
DAC8564EVM_3_fase_signalen_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac8c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800ae58  0800ae58  0001ae58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b088  0800b088  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b088  0800b088  0001b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b090  0800b090  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800b098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d8  2000010c  0800b1a4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034e4  0800b1a4  000234e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ede  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e8  00000000  00000000  0003a01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003d708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  0003ec58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025665  00000000  00000000  00040050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a421  00000000  00000000  000656b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d701b  00000000  00000000  0007fad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156af1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e28  00000000  00000000  00156b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000010c 	.word	0x2000010c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800ae3c 	.word	0x0800ae3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000110 	.word	0x20000110
 8000204:	0800ae3c 	.word	0x0800ae3c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b974 	b.w	8000e44 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468e      	mov	lr, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14d      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4694      	mov	ip, r2
 8000b86:	d969      	bls.n	8000c5c <__udivmoddi4+0xe8>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b152      	cbz	r2, 8000ba4 <__udivmoddi4+0x30>
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	f1c2 0120 	rsb	r1, r2, #32
 8000b96:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba2:	4094      	lsls	r4, r2
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	0c21      	lsrs	r1, r4, #16
 8000baa:	fbbe f6f8 	udiv	r6, lr, r8
 8000bae:	fa1f f78c 	uxth.w	r7, ip
 8000bb2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bba:	fb06 f107 	mul.w	r1, r6, r7
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bca:	f080 811f 	bcs.w	8000e0c <__udivmoddi4+0x298>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 811c 	bls.w	8000e0c <__udivmoddi4+0x298>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be0:	fb08 3310 	mls	r3, r8, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 f707 	mul.w	r7, r0, r7
 8000bec:	42a7      	cmp	r7, r4
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x92>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf8:	f080 810a 	bcs.w	8000e10 <__udivmoddi4+0x29c>
 8000bfc:	42a7      	cmp	r7, r4
 8000bfe:	f240 8107 	bls.w	8000e10 <__udivmoddi4+0x29c>
 8000c02:	4464      	add	r4, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	1be4      	subs	r4, r4, r7
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	b11d      	cbz	r5, 8000c18 <__udivmoddi4+0xa4>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c5 4300 	strd	r4, r3, [r5]
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0xc2>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	f000 80ef 	beq.w	8000e06 <__udivmoddi4+0x292>
 8000c28:	2600      	movs	r6, #0
 8000c2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2e:	4630      	mov	r0, r6
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	fab3 f683 	clz	r6, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d14a      	bne.n	8000cd4 <__udivmoddi4+0x160>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xd4>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 80f9 	bhi.w	8000e3a <__udivmoddi4+0x2c6>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	469e      	mov	lr, r3
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d0e0      	beq.n	8000c18 <__udivmoddi4+0xa4>
 8000c56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5a:	e7dd      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000c5c:	b902      	cbnz	r2, 8000c60 <__udivmoddi4+0xec>
 8000c5e:	deff      	udf	#255	; 0xff
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 8092 	bne.w	8000d8e <__udivmoddi4+0x21a>
 8000c6a:	eba1 010c 	sub.w	r1, r1, ip
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2601      	movs	r6, #1
 8000c78:	0c20      	lsrs	r0, r4, #16
 8000c7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c86:	fb0e f003 	mul.w	r0, lr, r3
 8000c8a:	4288      	cmp	r0, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x12c>
 8000c8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x12a>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2c0>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	1a09      	subs	r1, r1, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x156>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x154>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2ca>
 8000cc8:	4608      	mov	r0, r1
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd2:	e79c      	b.n	8000c0e <__udivmoddi4+0x9a>
 8000cd4:	f1c6 0720 	rsb	r7, r6, #32
 8000cd8:	40b3      	lsls	r3, r6
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cea:	431c      	orrs	r4, r3
 8000cec:	40f9      	lsrs	r1, r7
 8000cee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfa:	0c20      	lsrs	r0, r4, #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fb09 1118 	mls	r1, r9, r8, r1
 8000d04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d08:	fb08 f00e 	mul.w	r0, r8, lr
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b8>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2bc>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2bc>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4461      	add	r1, ip
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d34:	fb09 1110 	mls	r1, r9, r0, r1
 8000d38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d40:	458e      	cmp	lr, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1e2>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2b4>
 8000d4e:	458e      	cmp	lr, r1
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2b4>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5e:	eba1 010e 	sub.w	r1, r1, lr
 8000d62:	42a1      	cmp	r1, r4
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46a6      	mov	lr, r4
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x2a4>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x2a0>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x212>
 8000d6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d72:	eb61 010e 	sbc.w	r1, r1, lr
 8000d76:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7e:	40f1      	lsrs	r1, r6
 8000d80:	431f      	orrs	r7, r3
 8000d82:	e9c5 7100 	strd	r7, r1, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	40d8      	lsrs	r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	4301      	orrs	r1, r0
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dac:	fb07 3610 	mls	r6, r7, r0, r3
 8000db0:	0c0b      	lsrs	r3, r1, #16
 8000db2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x260>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b8>
 8000dcc:	429e      	cmp	r6, r3
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b8>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1b9b      	subs	r3, r3, r6
 8000dd6:	b289      	uxth	r1, r1
 8000dd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ddc:	fb07 3316 	mls	r3, r7, r6, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb06 f30e 	mul.w	r3, r6, lr
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x28a>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2b0>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2b0>
 8000dfa:	3e02      	subs	r6, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0x104>
 8000e06:	462e      	mov	r6, r5
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e705      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	e6e3      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6f8      	b.n	8000c06 <__udivmoddi4+0x92>
 8000e14:	454b      	cmp	r3, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f8>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e20:	3801      	subs	r0, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f8>
 8000e24:	4646      	mov	r6, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x28a>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1e2>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b8>
 8000e34:	3b02      	subs	r3, #2
 8000e36:	4461      	add	r1, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x12c>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e709      	b.n	8000c52 <__udivmoddi4+0xde>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x156>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <calculate_three_phase_sine_wave_samples>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calculate_three_phase_sine_wave_samples() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
 8000e52:	e0c8      	b.n	8000fe6 <calculate_three_phase_sine_wave_samples+0x19e>
        double t = (double)i / SAMPLE_RATE;
 8000e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e56:	f7ff fb29 	bl	80004ac <__aeabi_i2d>
 8000e5a:	a377      	add	r3, pc, #476	; (adr r3, 8001038 <calculate_three_phase_sine_wave_samples+0x1f0>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fcb8 	bl	80007d4 <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Phase A
        double sample_A = AMPLITUDE * sin(2 * PI * FREQUENCY * t);
 8000e6c:	a366      	add	r3, pc, #408	; (adr r3, 8001008 <calculate_three_phase_sine_wave_samples+0x1c0>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e76:	f7ff fb83 	bl	8000580 <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	ec43 2b17 	vmov	d7, r2, r3
 8000e82:	eeb0 0a47 	vmov.f32	s0, s14
 8000e86:	eef0 0a67 	vmov.f32	s1, s15
 8000e8a:	f008 ff8d 	bl	8009da8 <sin>
 8000e8e:	ec51 0b10 	vmov	r0, r1, d0
 8000e92:	a361      	add	r3, pc, #388	; (adr r3, 8001018 <calculate_three_phase_sine_wave_samples+0x1d0>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	f7ff fb72 	bl	8000580 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
        sine_wave_A[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_A + OFFSET));
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b5f      	ldr	r3, [pc, #380]	; (8001028 <calculate_three_phase_sine_wave_samples+0x1e0>)
 8000eaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000eae:	f7ff f9b1 	bl	8000214 <__adddf3>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	a351      	add	r3, pc, #324	; (adr r3, 8001000 <calculate_three_phase_sine_wave_samples+0x1b8>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff fb5e 	bl	8000580 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fe1a 	bl	8000b04 <__aeabi_d2uiz>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	4a55      	ldr	r2, [pc, #340]	; (800102c <calculate_three_phase_sine_wave_samples+0x1e4>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        // Phase B (120 degrees shifted)
        double sample_B = AMPLITUDE * sin(2 * PI * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 8000edc:	a34a      	add	r3, pc, #296	; (adr r3, 8001008 <calculate_three_phase_sine_wave_samples+0x1c0>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ee6:	f7ff fb4b 	bl	8000580 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	a347      	add	r3, pc, #284	; (adr r3, 8001010 <calculate_three_phase_sine_wave_samples+0x1c8>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff f98c 	bl	8000214 <__adddf3>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	ec43 2b17 	vmov	d7, r2, r3
 8000f04:	eeb0 0a47 	vmov.f32	s0, s14
 8000f08:	eef0 0a67 	vmov.f32	s1, s15
 8000f0c:	f008 ff4c 	bl	8009da8 <sin>
 8000f10:	ec51 0b10 	vmov	r0, r1, d0
 8000f14:	a340      	add	r3, pc, #256	; (adr r3, 8001018 <calculate_three_phase_sine_wave_samples+0x1d0>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fb31 	bl	8000580 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	e9c7 2302 	strd	r2, r3, [r7, #8]
        sine_wave_B[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_B + OFFSET));
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <calculate_three_phase_sine_wave_samples+0x1e0>)
 8000f2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f30:	f7ff f970 	bl	8000214 <__adddf3>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	a330      	add	r3, pc, #192	; (adr r3, 8001000 <calculate_three_phase_sine_wave_samples+0x1b8>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fb1d 	bl	8000580 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fdd9 	bl	8000b04 <__aeabi_d2uiz>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b299      	uxth	r1, r3
 8000f56:	4a36      	ldr	r2, [pc, #216]	; (8001030 <calculate_three_phase_sine_wave_samples+0x1e8>)
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        // Phase C (240 degrees shifted)
        double sample_C = AMPLITUDE * sin(2 * PI * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8000f5e:	a32a      	add	r3, pc, #168	; (adr r3, 8001008 <calculate_three_phase_sine_wave_samples+0x1c0>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f68:	f7ff fb0a 	bl	8000580 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	a32a      	add	r3, pc, #168	; (adr r3, 8001020 <calculate_three_phase_sine_wave_samples+0x1d8>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff f94b 	bl	8000214 <__adddf3>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	ec43 2b17 	vmov	d7, r2, r3
 8000f86:	eeb0 0a47 	vmov.f32	s0, s14
 8000f8a:	eef0 0a67 	vmov.f32	s1, s15
 8000f8e:	f008 ff0b 	bl	8009da8 <sin>
 8000f92:	ec51 0b10 	vmov	r0, r1, d0
 8000f96:	a320      	add	r3, pc, #128	; (adr r3, 8001018 <calculate_three_phase_sine_wave_samples+0x1d0>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff faf0 	bl	8000580 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	e9c7 2300 	strd	r2, r3, [r7]
        sine_wave_C[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_C + OFFSET));
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <calculate_three_phase_sine_wave_samples+0x1e0>)
 8000fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fb2:	f7ff f92f 	bl	8000214 <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	a310      	add	r3, pc, #64	; (adr r3, 8001000 <calculate_three_phase_sine_wave_samples+0x1b8>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff fadc 	bl	8000580 <__aeabi_dmul>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fd98 	bl	8000b04 <__aeabi_d2uiz>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <calculate_three_phase_sine_wave_samples+0x1ec>)
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8000fec:	f6ff af32 	blt.w	8000e54 <calculate_three_phase_sine_wave_samples+0xc>
    }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	9999999a 	.word	0x9999999a
 8001004:	40c99999 	.word	0x40c99999
 8001008:	5974e65c 	.word	0x5974e65c
 800100c:	4073a28c 	.word	0x4073a28c
 8001010:	37db38a1 	.word	0x37db38a1
 8001014:	4000c152 	.word	0x4000c152
 8001018:	66666666 	.word	0x66666666
 800101c:	3fe66666 	.word	0x3fe66666
 8001020:	37db38a1 	.word	0x37db38a1
 8001024:	4010c152 	.word	0x4010c152
 8001028:	3ff40000 	.word	0x3ff40000
 800102c:	20000250 	.word	0x20000250
 8001030:	200009d0 	.word	0x200009d0
 8001034:	20001150 	.word	0x20001150
 8001038:	00000000 	.word	0x00000000
 800103c:	40e77000 	.word	0x40e77000

08001040 <DAC8564_Write>:

void DAC8564_Write(uint16_t channel, uint16_t value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	80fb      	strh	r3, [r7, #6]
 800104c:	4613      	mov	r3, r2
 800104e:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = DAC8564_SEQUENTIANALY_WRITE_UPDATE | (channel << 1);  // Set command and channel
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	b25b      	sxtb	r3, r3
 8001056:	f043 0310 	orr.w	r3, r3, #16
 800105a:	b25b      	sxtb	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	733b      	strb	r3, [r7, #12]
    data[1] = (value >> 8) & 0xFF;  // MSB
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	737b      	strb	r3, [r7, #13]
    data[2] = value & 0xFF;  // LSB
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOA, SPI_SYS_Pin, GPIO_PIN_RESET);  // CS Low
 8001070:	2200      	movs	r2, #0
 8001072:	2110      	movs	r1, #16
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <DAC8564_Write+0x5c>)
 8001076:	f000 ff45 	bl	8001f04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 3, SPI_TIMEOUT);
 800107a:	f107 010c 	add.w	r1, r7, #12
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	2203      	movs	r2, #3
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <DAC8564_Write+0x60>)
 8001086:	f003 fbba 	bl	80047fe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, SPI_SYS_Pin, GPIO_PIN_SET);  // CS High
 800108a:	2201      	movs	r2, #1
 800108c:	2110      	movs	r1, #16
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <DAC8564_Write+0x5c>)
 8001090:	f000 ff38 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000
 80010a0:	20000128 	.word	0x20000128

080010a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b4:	d133      	bne.n	800111e <HAL_TIM_PeriodElapsedCallback+0x7a>
        // Output the current sample for each phase to respective DAC channels
        DAC8564_Write(0, sine_wave_A[sample_index]);  // Phase A on DAC A
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010c4:	4619      	mov	r1, r3
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ffba 	bl	8001040 <DAC8564_Write>
        DAC8564_Write(1, sine_wave_B[sample_index]);  // Phase B on DAC B
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010da:	4619      	mov	r1, r3
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ffaf 	bl	8001040 <DAC8564_Write>
        DAC8564_Write(2, sine_wave_C[sample_index]);  // Phase C on DAC C
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010f0:	4619      	mov	r1, r3
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff ffa4 	bl	8001040 <DAC8564_Write>

        // Increment the sample index
        sample_index = (sample_index + 1) % NUM_SAMPLES;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001102:	fb83 1302 	smull	r1, r3, r3, r2
 8001106:	4413      	add	r3, r2
 8001108:	1259      	asrs	r1, r3, #9
 800110a:	17d3      	asrs	r3, r2, #31
 800110c:	1ac9      	subs	r1, r1, r3
 800110e:	460b      	mov	r3, r1
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	1a5b      	subs	r3, r3, r1
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	1ad1      	subs	r1, r2, r3
 8001118:	b28a      	uxth	r2, r1
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800111c:	801a      	strh	r2, [r3, #0]
    }
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200018d0 	.word	0x200018d0
 800112c:	20000250 	.word	0x20000250
 8001130:	200009d0 	.word	0x200009d0
 8001134:	20001150 	.word	0x20001150
 8001138:	88888889 	.word	0x88888889

0800113c <SET_refference>:

void SET_refference() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    uint8_t data[3];
    data[0] = 0x01;
 8001142:	2301      	movs	r3, #1
 8001144:	713b      	strb	r3, [r7, #4]
    data[1] = 0x10;
 8001146:	2310      	movs	r3, #16
 8001148:	717b      	strb	r3, [r7, #5]
    data[2] = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(GPIOA, SPI_SYS_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2110      	movs	r1, #16
 8001152:	4809      	ldr	r0, [pc, #36]	; (8001178 <SET_refference+0x3c>)
 8001154:	f000 fed6 	bl	8001f04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 3, SPI_TIMEOUT);
 8001158:	1d39      	adds	r1, r7, #4
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	2203      	movs	r2, #3
 8001160:	4806      	ldr	r0, [pc, #24]	; (800117c <SET_refference+0x40>)
 8001162:	f003 fb4c 	bl	80047fe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, SPI_SYS_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2110      	movs	r1, #16
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <SET_refference+0x3c>)
 800116c:	f000 feca 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020000 	.word	0x40020000
 800117c:	20000128 	.word	0x20000128

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f000 fb82 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f828 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 f96a 	bl	8001464 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001190:	f000 f914 	bl	80013bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001194:	f000 f93c 	bl	8001410 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001198:	f008 f870 	bl	800927c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800119c:	f000 f88a 	bl	80012b4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80011a0:	f000 f8c0 	bl	8001324 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(150);
 80011a4:	2096      	movs	r0, #150	; 0x96
 80011a6:	f000 fbe3 	bl	8001970 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, SPI_SYS_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2110      	movs	r1, #16
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <main+0x54>)
 80011b0:	f000 fea8 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80011b4:	200a      	movs	r0, #10
 80011b6:	f000 fbdb 	bl	8001970 <HAL_Delay>
  SET_refference();
 80011ba:	f7ff ffbf 	bl	800113c <SET_refference>

  // Calculate samples for three-phase sine waves
  calculate_three_phase_sine_wave_samples();
 80011be:	f7ff fe43 	bl	8000e48 <calculate_three_phase_sine_wave_samples>

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <main+0x58>)
 80011c4:	f003 fd72 	bl	8004cac <HAL_TIM_Base_Start_IT>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <main+0x52>
      Error_Handler();
 80011ce:	f000 f9cb 	bl	8001568 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <main+0x52>
 80011d4:	40020000 	.word	0x40020000
 80011d8:	20000180 	.word	0x20000180

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2234      	movs	r2, #52	; 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 fdd4 	bl	8009d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <SystemClock_Config+0xd0>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a28      	ldr	r2, [pc, #160]	; (80012ac <SystemClock_Config+0xd0>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <SystemClock_Config+0xd0>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <SystemClock_Config+0xd4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <SystemClock_Config+0xd4>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <SystemClock_Config+0xd4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001240:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001250:	23a8      	movs	r3, #168	; 0xa8
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001258:	2307      	movs	r3, #7
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4618      	mov	r0, r3
 8001266:	f002 ffa3 	bl	80041b0 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001270:	f000 f97a 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001278:	2303      	movs	r3, #3
 800127a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001280:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001284:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2105      	movs	r1, #5
 8001292:	4618      	mov	r0, r3
 8001294:	f002 f918 	bl	80034c8 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800129e:	f000 f963 	bl	8001568 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_SPI1_Init+0x68>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <MX_SPI1_Init+0x6c>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_SPI1_Init+0x68>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_SPI1_Init+0x68>)
 80012c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_SPI1_Init+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI1_Init+0x68>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_SPI1_Init+0x68>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI1_Init+0x68>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI1_Init+0x68>)
 80012ea:	2220      	movs	r2, #32
 80012ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_SPI1_Init+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI1_Init+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_SPI1_Init+0x68>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI1_Init+0x68>)
 8001302:	220a      	movs	r2, #10
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_SPI1_Init+0x68>)
 8001308:	f003 f9f0 	bl	80046ec <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001312:	f000 f929 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000128 	.word	0x20000128
 8001320:	40013000 	.word	0x40013000

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM2_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1749;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001356:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800135a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_TIM2_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_TIM2_Init+0x94>)
 800136a:	f003 fc4f 	bl	8004c0c <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 f8f8 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001386:	f003 fe09 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 f8ea 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM2_Init+0x94>)
 80013a2:	f004 f825 	bl	80053f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f8dc 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000180 	.word	0x20000180

080013bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART1_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013f4:	f004 f88c 	bl	8005510 <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f8b3 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200001c8 	.word	0x200001c8
 800140c:	40011000 	.word	0x40011000

08001410 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART3_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001448:	f004 f862 	bl	8005510 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 f889 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000020c 	.word	0x2000020c
 8001460:	40004800 	.word	0x40004800

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <MX_GPIO_Init+0xf4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a35      	ldr	r2, [pc, #212]	; (8001558 <MX_GPIO_Init+0xf4>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <MX_GPIO_Init+0xf4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <MX_GPIO_Init+0xf4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_GPIO_Init+0xf4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SYS_GPIO_Port, SPI_SYS_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2110      	movs	r1, #16
 80014ee:	481b      	ldr	r0, [pc, #108]	; (800155c <MX_GPIO_Init+0xf8>)
 80014f0:	f000 fd08 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	211c      	movs	r1, #28
 80014f8:	4819      	ldr	r0, [pc, #100]	; (8001560 <MX_GPIO_Init+0xfc>)
 80014fa:	f000 fd03 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_SYS_Pin */
  GPIO_InitStruct.Pin = SPI_SYS_Pin;
 80014fe:	2310      	movs	r3, #16
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SYS_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4811      	ldr	r0, [pc, #68]	; (800155c <MX_GPIO_Init+0xf8>)
 8001516:	f000 fb61 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : START_KNOP_Pin PAUZEER_KNOP_Pin STOP_KNOP_Pin */
  GPIO_InitStruct.Pin = START_KNOP_Pin|PAUZEER_KNOP_Pin|STOP_KNOP_Pin;
 800151a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_GPIO_Init+0x100>)
 8001530:	f000 fb54 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RODE_LED_Pin GROENE_LED_Pin BLAUWE_LED_Pin */
  GPIO_InitStruct.Pin = RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin;
 8001534:	231c      	movs	r3, #28
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_GPIO_Init+0xfc>)
 800154c:	f000 fb46 	bl	8001bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	40021800 	.word	0x40021800
 8001564:	40020400 	.word	0x40020400

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_MspInit+0x4c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_SPI_MspInit+0x84>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12b      	bne.n	800163e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_SPI_MspInit+0x88>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_SPI_MspInit+0x88>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_SPI_MspInit+0x88>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_SPI_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_SPI_MspInit+0x88>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_SPI_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800161e:	2328      	movs	r3, #40	; 0x28
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162e:	2305      	movs	r3, #5
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_SPI_MspInit+0x8c>)
 800163a:	f000 facf 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40013000 	.word	0x40013000
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001664:	d115      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_TIM_Base_MspInit+0x48>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_TIM_Base_MspInit+0x48>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_TIM_Base_MspInit+0x48>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201c      	movs	r0, #28
 8001688:	f000 fa71 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800168c:	201c      	movs	r0, #28
 800168e:	f000 fa8a 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_UART_MspInit+0xe8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12c      	bne.n	800171c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_UART_MspInit+0xec>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a30      	ldr	r2, [pc, #192]	; (800178c <HAL_UART_MspInit+0xec>)
 80016cc:	f043 0310 	orr.w	r3, r3, #16
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_UART_MspInit+0xec>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_UART_MspInit+0xec>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a29      	ldr	r2, [pc, #164]	; (800178c <HAL_UART_MspInit+0xec>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_UART_MspInit+0xec>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800170a:	2307      	movs	r3, #7
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	481e      	ldr	r0, [pc, #120]	; (8001790 <HAL_UART_MspInit+0xf0>)
 8001716:	f000 fa61 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800171a:	e031      	b.n	8001780 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_UART_MspInit+0xf4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12c      	bne.n	8001780 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_UART_MspInit+0xec>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_UART_MspInit+0xec>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_UART_MspInit+0xec>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_UART_MspInit+0xec>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_UART_MspInit+0xec>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_UART_MspInit+0xec>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 800175e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001770:	2307      	movs	r3, #7
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_UART_MspInit+0xf0>)
 800177c:	f000 fa2e 	bl	8001bdc <HAL_GPIO_Init>
}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40011000 	.word	0x40011000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400
 8001794:	40004800 	.word	0x40004800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f8a4 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <TIM2_IRQHandler+0x10>)
 80017f2:	f003 facb 	bl	8004d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000180 	.word	0x20000180

08001800 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <OTG_FS_IRQHandler+0x10>)
 8001806:	f000 fced 	bl	80021e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20002db8 	.word	0x20002db8

08001814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183e:	490e      	ldr	r1, [pc, #56]	; (8001878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001854:	4c0b      	ldr	r4, [pc, #44]	; (8001884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001862:	f7ff ffd7 	bl	8001814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001866:	f008 fa73 	bl	8009d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186a:	f7ff fc89 	bl	8001180 <main>
  bx  lr    
 800186e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 800187c:	0800b098 	.word	0x0800b098
  ldr r2, =_sbss
 8001880:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001884:	200034e4 	.word	0x200034e4

08001888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC_IRQHandler>
	...

0800188c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_Init+0x40>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_Init+0x40>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_Init+0x40>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f94f 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	200f      	movs	r0, #15
 80018bc:	f000 f808 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fe58 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f967 	bl	8001bc2 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f92f 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000000 	.word	0x20000000
 8001928:	20000008 	.word	0x20000008
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008
 8001954:	200018d4 	.word	0x200018d4

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200018d4 	.word	0x200018d4

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffde 	bl	8001958 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <__NVIC_EnableIRQ+0x38>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff29 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff3e 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff31 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e165      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8154 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ae 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x308>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x202>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae96 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f38:	b08f      	sub	sp, #60	; 0x3c
 8001f3a:	af0a      	add	r7, sp, #40	; 0x28
 8001f3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e116      	b.n	8002176 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f007 fb7c 	bl	8009660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fe99 	bl	8005cbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	687e      	ldr	r6, [r7, #4]
 8001f94:	466d      	mov	r5, sp
 8001f96:	f106 0410 	add.w	r4, r6, #16
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001faa:	1d33      	adds	r3, r6, #4
 8001fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fae:	6838      	ldr	r0, [r7, #0]
 8001fb0:	f003 fd70 	bl	8005a94 <USB_CoreInit>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0d7      	b.n	8002176 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fe87 	bl	8005ce0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e04a      	b.n	800206e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	333d      	adds	r3, #61	; 0x3d
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	333c      	adds	r3, #60	; 0x3c
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	b298      	uxth	r0, r3
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3344      	adds	r3, #68	; 0x44
 8002014:	4602      	mov	r2, r0
 8002016:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	3340      	adds	r3, #64	; 0x40
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	334c      	adds	r3, #76	; 0x4c
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3354      	adds	r3, #84	; 0x54
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	3301      	adds	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3af      	bcc.n	8001fd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e044      	b.n	8002108 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	3301      	adds	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	d3b5      	bcc.n	800207e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	687e      	ldr	r6, [r7, #4]
 800211a:	466d      	mov	r5, sp
 800211c:	f106 0410 	add.w	r4, r6, #16
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	e894 0003 	ldmia.w	r4, {r0, r1}
 800212c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002130:	1d33      	adds	r3, r6, #4
 8002132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f003 fe1f 	bl	8005d78 <USB_DevInit>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e014      	b.n	8002176 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d102      	bne.n	800216a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 f98b 	bl	8003480 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 ff61 	bl	8007036 <USB_DevDisconnect>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800217e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_PCD_Start+0x1c>
 8002196:	2302      	movs	r3, #2
 8002198:	e020      	b.n	80021dc <HAL_PCD_Start+0x5e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d109      	bne.n	80021be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fd6a 	bl	8005c9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 ff11 	bl	8006ff4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b08d      	sub	sp, #52	; 0x34
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 ffcf 	bl	800719e <USB_GetMode>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 84b7 	bne.w	8002b76 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f004 ff33 	bl	8007078 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 84ad 	beq.w	8002b74 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f004 ff20 	bl	8007078 <USB_ReadInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f002 0202 	and.w	r2, r2, #2
 8002250:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 ff0e 	bl	8007078 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b10      	cmp	r3, #16
 8002264:	d161      	bne.n	800232a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0210 	bic.w	r2, r2, #16
 8002274:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	0c5b      	lsrs	r3, r3, #17
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d124      	bne.n	80022ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d035      	beq.n	800231a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6a38      	ldr	r0, [r7, #32]
 80022c2:	f004 fd45 	bl	8006d50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d2:	441a      	add	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e4:	441a      	add	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	621a      	str	r2, [r3, #32]
 80022ea:	e016      	b.n	800231a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	0c5b      	lsrs	r3, r3, #17
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d110      	bne.n	800231a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022fe:	2208      	movs	r2, #8
 8002300:	4619      	mov	r1, r3
 8002302:	6a38      	ldr	r0, [r7, #32]
 8002304:	f004 fd24 	bl	8006d50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002314:	441a      	add	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0210 	orr.w	r2, r2, #16
 8002328:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fea2 	bl	8007078 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800233e:	f040 80a7 	bne.w	8002490 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fea7 	bl	800709e <USB_ReadDevAllOutEpInterrupt>
 8002350:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002352:	e099      	b.n	8002488 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 808e 	beq.w	800247c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fecb 	bl	8007106 <USB_ReadDevOutEPInterrupt>
 8002370:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	2301      	movs	r3, #1
 800238c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800238e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 feef 	bl	8003174 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	2308      	movs	r3, #8
 80023b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 ffc5 	bl	8003344 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	2310      	movs	r3, #16
 80023d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d030      	beq.n	8002442 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d109      	bne.n	8002400 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	78db      	ldrb	r3, [r3, #3]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f007 fa34 	bl	8009898 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	2302      	movs	r3, #2
 8002440:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002458:	461a      	mov	r2, r3
 800245a:	2320      	movs	r3, #32
 800245c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	3301      	adds	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	2b00      	cmp	r3, #0
 800248c:	f47f af62 	bne.w	8002354 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f004 fdef 	bl	8007078 <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a4:	f040 80db 	bne.w	800265e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fe10 	bl	80070d2 <USB_ReadDevAllInEpInterrupt>
 80024b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024b8:	e0cd      	b.n	8002656 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80c2 	beq.w	800264a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fe36 	bl	8007142 <USB_ReadDevInEPInterrupt>
 80024d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d057      	beq.n	8002592 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	2201      	movs	r2, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69f9      	ldr	r1, [r7, #28]
 80024fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002502:	4013      	ands	r3, r2
 8002504:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002512:	461a      	mov	r2, r3
 8002514:	2301      	movs	r3, #1
 8002516:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d132      	bne.n	8002586 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334c      	adds	r3, #76	; 0x4c
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4403      	add	r3, r0
 8002540:	3348      	adds	r3, #72	; 0x48
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4419      	add	r1, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4403      	add	r3, r0
 8002554:	334c      	adds	r3, #76	; 0x4c
 8002556:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	2b00      	cmp	r3, #0
 800255c:	d113      	bne.n	8002586 <HAL_PCD_IRQHandler+0x3a2>
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3354      	adds	r3, #84	; 0x54
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800257e:	461a      	mov	r2, r3
 8002580:	2101      	movs	r1, #1
 8002582:	f004 fe3d 	bl	8007200 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f007 f8fe 	bl	800978e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a8:	461a      	mov	r2, r3
 80025aa:	2308      	movs	r3, #8
 80025ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c4:	461a      	mov	r2, r3
 80025c6:	2310      	movs	r3, #16
 80025c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e0:	461a      	mov	r2, r3
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d023      	beq.n	8002638 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f2:	6a38      	ldr	r0, [r7, #32]
 80025f4:	f003 fd1e 	bl	8006034 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	3338      	adds	r3, #56	; 0x38
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	78db      	ldrb	r3, [r3, #3]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d108      	bne.n	8002626 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2200      	movs	r2, #0
 8002618:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f007 f94b 	bl	80098bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002632:	461a      	mov	r2, r3
 8002634:	2302      	movs	r3, #2
 8002636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fd08 	bl	800305a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f af2e 	bne.w	80024ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fd08 	bl	8007078 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800266e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002672:	d122      	bne.n	80026ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800269a:	2100      	movs	r1, #0
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f007 fac5 	bl	8009c2c <HAL_PCDEx_LPM_Callback>
 80026a2:	e002      	b.n	80026aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 f8e9 	bl	800987c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 fcda 	bl	8007078 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ce:	d112      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d102      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f007 f8a5 	bl	8009830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026f4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fcbc 	bl	8007078 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270a:	d121      	bne.n	8002750 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800271a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d111      	bne.n	800274a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002740:	2101      	movs	r1, #1
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f007 fa72 	bl	8009c2c <HAL_PCDEx_LPM_Callback>
 8002748:	e002      	b.n	8002750 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f007 f870 	bl	8009830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fc8f 	bl	8007078 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002764:	f040 80b7 	bne.w	80028d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2110      	movs	r1, #16
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fc56 	bl	8006034 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278c:	e046      	b.n	800281c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279a:	461a      	mov	r2, r3
 800279c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b2:	0151      	lsls	r1, r2, #5
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	440a      	add	r2, r1
 80027b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ce:	461a      	mov	r2, r3
 80027d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002806:	0151      	lsls	r1, r2, #5
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	440a      	add	r2, r1
 800280c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002810:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002814:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	3301      	adds	r3, #1
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	429a      	cmp	r2, r3
 8002824:	d3b3      	bcc.n	800278e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002834:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002838:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002852:	f043 030b 	orr.w	r3, r3, #11
 8002856:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002868:	f043 030b 	orr.w	r3, r3, #11
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	e015      	b.n	800289c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800287e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002882:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002886:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002896:	f043 030b 	orr.w	r3, r3, #11
 800289a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c0:	461a      	mov	r2, r3
 80028c2:	f004 fc9d 	bl	8007200 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fbcc 	bl	8007078 <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d124      	bne.n	8002936 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 fc62 	bl	80071ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fc17 	bl	800612e <USB_GetDevSpeed>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681c      	ldr	r4, [r3, #0]
 800290c:	f000 fec2 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 8002910:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f003 f91c 	bl	8005b58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f006 ff5c 	bl	80097de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002934:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f004 fb9c 	bl	8007078 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d10a      	bne.n	8002960 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f006 ff39 	bl	80097c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f002 0208 	and.w	r2, r2, #8
 800295e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fb87 	bl	8007078 <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d122      	bne.n	80029ba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002980:	2301      	movs	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	e014      	b.n	80029b0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fb27 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	3301      	adds	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d3e5      	bcc.n	8002986 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fb5a 	bl	8007078 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ce:	d13b      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d0:	2301      	movs	r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e02b      	b.n	8002a2e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3340      	adds	r3, #64	; 0x40
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d115      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da12      	bge.n	8002a28 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	333f      	adds	r3, #63	; 0x3f
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fae8 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3ce      	bcc.n	80029d6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 fb13 	bl	8007078 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a5c:	d155      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a5e:	2301      	movs	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	e045      	b.n	8002af0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d12e      	bne.n	8002aea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da2b      	bge.n	8002aea <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d121      	bne.n	8002aea <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae6:	6053      	str	r3, [r2, #4]
            break;
 8002ae8:	e007      	b.n	8002afa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	3301      	adds	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3b4      	bcc.n	8002a64 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 fab2 	bl	8007078 <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d10a      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f006 fedd 	bl	80098e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fa9c 	bl	8007078 <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d115      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f006 fecd 	bl	80098fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	e000      	b.n	8002b76 <HAL_PCD_IRQHandler+0x992>
      return;
 8002b74:	bf00      	nop
    }
  }
}
 8002b76:	3734      	adds	r7, #52	; 0x34
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd90      	pop	{r4, r7, pc}

08002b7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_SetAddress+0x1a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e013      	b.n	8002bbe <HAL_PCD_SetAddress+0x42>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 f9fa 	bl	8006fa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	4608      	mov	r0, r1
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	70fb      	strb	r3, [r7, #3]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	803b      	strh	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0f      	bge.n	8002c0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	3338      	adds	r3, #56	; 0x38
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3304      	adds	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
 8002c0a:	e00f      	b.n	8002c2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c38:	883a      	ldrh	r2, [r7, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	78ba      	ldrb	r2, [r7, #2]
 8002c42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c56:	78bb      	ldrb	r3, [r7, #2]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d102      	bne.n	8002c62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_PCD_EP_Open+0xaa>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e00e      	b.n	8002c8e <HAL_PCD_EP_Open+0xc8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fa7a 	bl	8006178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0f      	bge.n	8002cca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3338      	adds	r3, #56	; 0x38
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	705a      	strb	r2, [r3, #1]
 8002cc8:	e00f      	b.n	8002cea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 020f 	and.w	r2, r3, #15
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_PCD_EP_Close+0x6e>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e00e      	b.n	8002d22 <HAL_PCD_EP_Close+0x8c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fab8 	bl	8006288 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	460b      	mov	r3, r1
 8002d38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	f003 020f 	and.w	r2, r3, #15
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	f003 fd97 	bl	80068d0 <USB_EP0StartXfer>
 8002da2:	e008      	b.n	8002db6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6979      	ldr	r1, [r7, #20]
 8002db2:	f003 fb45 	bl	8006440 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	f003 020f 	and.w	r2, r3, #15
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	3338      	adds	r3, #56	; 0x38
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d102      	bne.n	8002e4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	f003 fd35 	bl	80068d0 <USB_EP0StartXfer>
 8002e66:	e008      	b.n	8002e7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	f003 fae3 	bl	8006440 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d901      	bls.n	8002ea2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e050      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0f      	bge.n	8002eca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	3338      	adds	r3, #56	; 0x38
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
 8002ec8:	e00d      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_PCD_EP_SetStall+0x82>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e01e      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xc0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 ff73 	bl	8006e00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	b2d9      	uxtb	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f34:	461a      	mov	r2, r3
 8002f36:	f004 f963 	bl	8007200 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d901      	bls.n	8002f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e042      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0f      	bge.n	8002f92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	3338      	adds	r3, #56	; 0x38
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	705a      	strb	r2, [r3, #1]
 8002f90:	e00f      	b.n	8002fb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_EP_ClrStall+0x86>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e00e      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 ff7b 	bl	8006edc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da0c      	bge.n	8003026 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00c      	b.n	8003040 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fd9a 	bl	8006b80 <USB_EPStopXfer>
 800304c:	4603      	mov	r3, r0
 800304e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003050:	7afb      	ldrb	r3, [r7, #11]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af02      	add	r7, sp, #8
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3338      	adds	r3, #56	; 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	429a      	cmp	r2, r3
 800308c:	d901      	bls.n	8003092 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06c      	b.n	800316c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d902      	bls.n	80030ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3303      	adds	r3, #3
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b6:	e02b      	b.n	8003110 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d902      	bls.n	80030d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3303      	adds	r3, #3
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6919      	ldr	r1, [r3, #16]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4603      	mov	r3, r0
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f003 fdee 	bl	8006cd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	441a      	add	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	441a      	add	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	b29b      	uxth	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	429a      	cmp	r2, r3
 8003124:	d809      	bhi.n	800313a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312e:	429a      	cmp	r2, r3
 8003130:	d203      	bcs.n	800313a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1be      	bne.n	80030b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	429a      	cmp	r2, r3
 8003144:	d811      	bhi.n	800316a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	2201      	movs	r2, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	43db      	mvns	r3, r3
 8003160:	6939      	ldr	r1, [r7, #16]
 8003162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003166:	4013      	ands	r3, r2
 8003168:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	333c      	adds	r3, #60	; 0x3c
 800318c:	3304      	adds	r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d17b      	bne.n	80032a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4a61      	ldr	r2, [pc, #388]	; (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	f240 80b9 	bls.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80b3 	beq.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	e0a7      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2320      	movs	r3, #32
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	e098      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 8093 	bne.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d90f      	bls.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	e07e      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3304      	adds	r3, #4
 8003246:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	440b      	add	r3, r1
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d114      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800327c:	461a      	mov	r2, r3
 800327e:	2101      	movs	r1, #1
 8003280:	f003 ffbe 	bl	8007200 <USB_EP0_OutStart>
 8003284:	e006      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	441a      	add	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f006 fa5c 	bl	8009758 <HAL_PCD_DataOutStageCallback>
 80032a0:	e046      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d124      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	e032      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	2320      	movs	r3, #32
 80032e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f006 fa33 	bl	8009758 <HAL_PCD_DataOutStageCallback>
 80032f2:	e01d      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d114      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800331c:	461a      	mov	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f003 ff6e 	bl	8007200 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f006 fa14 	bl	8009758 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	4f54300a 	.word	0x4f54300a
 8003340:	4f54310a 	.word	0x4f54310a

08003344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	333c      	adds	r3, #60	; 0x3c
 800335c:	3304      	adds	r3, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d90e      	bls.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f006 f9cb 	bl	8009734 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d90c      	bls.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033b8:	461a      	mov	r2, r3
 80033ba:	2101      	movs	r1, #1
 80033bc:	f003 ff20 	bl	8007200 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	4f54300a 	.word	0x4f54300a

080033d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
 80033dc:	4613      	mov	r3, r2
 80033de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ee:	883b      	ldrh	r3, [r7, #0]
 80033f0:	0419      	lsls	r1, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
 80033fc:	e028      	b.n	8003450 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e00d      	b.n	800342e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	3340      	adds	r3, #64	; 0x40
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4413      	add	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3301      	adds	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	3b01      	subs	r3, #1
 8003434:	429a      	cmp	r2, r3
 8003436:	d3ec      	bcc.n	8003412 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003438:	883b      	ldrh	r3, [r7, #0]
 800343a:	0418      	lsls	r0, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	3b01      	subs	r3, #1
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	4302      	orrs	r2, r0
 8003448:	3340      	adds	r3, #64	; 0x40
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b2:	f043 0303 	orr.w	r3, r3, #3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0cc      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034dc:	4b68      	ldr	r3, [pc, #416]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d90c      	bls.n	8003504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b65      	ldr	r3, [pc, #404]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b63      	ldr	r3, [pc, #396]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0b8      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800351c:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b50      	ldr	r3, [pc, #320]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	494d      	ldr	r1, [pc, #308]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d044      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d119      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e07f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d003      	beq.n	8003586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003582:	2b03      	cmp	r3, #3
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e06f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e067      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4934      	ldr	r1, [pc, #208]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b8:	f7fe f9ce 	bl	8001958 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fe f9ca 	bl	8001958 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 020c 	and.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1eb      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d20c      	bcs.n	8003610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e032      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4916      	ldr	r1, [pc, #88]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	490e      	ldr	r1, [pc, #56]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364e:	f000 fb7f 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003652:	4602      	mov	r2, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	490a      	ldr	r1, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	5ccb      	ldrb	r3, [r1, r3]
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe f92e 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00
 8003684:	40023800 	.word	0x40023800
 8003688:	0800ae98 	.word	0x0800ae98
 800368c:	20000000 	.word	0x20000000
 8003690:	20000004 	.word	0x20000004

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000000 	.word	0x20000000

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	0800aea8 	.word	0x0800aea8

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffdc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0b5b      	lsrs	r3, r3, #13
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	0800aea8 	.word	0x0800aea8

080036fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	; 0x30
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003734:	4b6f      	ldr	r3, [pc, #444]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	496c      	ldr	r1, [pc, #432]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003752:	2301      	movs	r3, #1
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003762:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003768:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	4960      	ldr	r1, [pc, #384]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d017      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003790:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4955      	ldr	r1, [pc, #340]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ae:	d101      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80037b0:	2301      	movs	r3, #1
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80037bc:	2301      	movs	r3, #1
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d017      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	4946      	ldr	r1, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d101      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80037ec:	2301      	movs	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80037f8:	2301      	movs	r3, #1
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 808a 	beq.w	800391e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a38      	ldr	r2, [pc, #224]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003832:	f7fe f891 	bl	8001958 <HAL_GetTick>
 8003836:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fe f88d 	bl	8001958 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e278      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003860:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02f      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	429a      	cmp	r2, r3
 8003874:	d028      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003880:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800388c:	4a19      	ldr	r2, [pc, #100]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d114      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800389e:	f7fe f85b 	bl	8001958 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe f857 	bl	8001958 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e240      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d4:	d114      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	4902      	ldr	r1, [pc, #8]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]
 80038f0:	e00c      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x210>
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40007000 	.word	0x40007000
 80038fc:	42470e40 	.word	0x42470e40
 8003900:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a49      	ldr	r2, [pc, #292]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003906:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800390a:	6093      	str	r3, [r2, #8]
 800390c:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800390e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	4944      	ldr	r1, [pc, #272]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800391a:	4313      	orrs	r3, r2
 800391c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003930:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003932:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	4937      	ldr	r1, [pc, #220]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003962:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003968:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	492e      	ldr	r1, [pc, #184]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d011      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	4926      	ldr	r1, [pc, #152]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a2:	d101      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80039a4:	2301      	movs	r3, #1
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d011      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e4:	4911      	ldr	r1, [pc, #68]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d101      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80039f6:	2301      	movs	r3, #1
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d005      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a08:	f040 80ff 	bne.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a12:	f7fd ffa1 	bl	8001958 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a18:	e00e      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a1a:	f7fd ff9d 	bl	8001958 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d907      	bls.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e188      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	424711e0 	.word	0x424711e0
 8003a34:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a38:	4b7e      	ldr	r3, [pc, #504]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ea      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d028      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d124      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a6c:	4b71      	ldr	r3, [pc, #452]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a84:	0e1b      	lsrs	r3, r3, #24
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	431a      	orrs	r2, r3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	071b      	lsls	r3, r3, #28
 8003aae:	4961      	ldr	r1, [pc, #388]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d035      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae0:	d130      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ae2:	4b54      	ldr	r3, [pc, #336]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af4:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afa:	0f1b      	lsrs	r3, r3, #28
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	3b01      	subs	r3, #1
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	4943      	ldr	r1, [pc, #268]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b32:	f023 021f 	bic.w	r2, r3, #31
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	493d      	ldr	r1, [pc, #244]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d029      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b58:	d124      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b6c:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b72:	0f1b      	lsrs	r3, r3, #28
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	071b      	lsls	r3, r3, #28
 8003b9c:	4925      	ldr	r1, [pc, #148]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	4917      	ldr	r1, [pc, #92]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fd feb8 	bl	8001958 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bec:	f7fd feb4 	bl	8001958 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e09f      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 8095 	bne.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fd fe9e 	bl	8001958 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c1e:	e00f      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c20:	f7fd fe9a 	bl	8001958 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d908      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e085      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	42470068 	.word	0x42470068
 8003c3c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d0e8      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02b      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d127      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003c76:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	4928      	ldr	r1, [pc, #160]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	4922      	ldr	r1, [pc, #136]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01d      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cda:	d118      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	0e1b      	lsrs	r3, r3, #24
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	019b      	lsls	r3, r3, #6
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	4910      	ldr	r1, [pc, #64]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fd fe20 	bl	8001958 <HAL_GetTick>
 8003d18:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d1c:	f7fd fe1c 	bl	8001958 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e007      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3a:	d1ef      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3730      	adds	r7, #48	; 0x30
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	42470070 	.word	0x42470070

08003d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d54:	b0ae      	sub	sp, #184	; 0xb8
 8003d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d76:	4bcb      	ldr	r3, [pc, #812]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	f200 8206 	bhi.w	8004190 <HAL_RCC_GetSysClockFreq+0x440>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08004191 	.word	0x08004191
 8003d94:	08004191 	.word	0x08004191
 8003d98:	08004191 	.word	0x08004191
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08004191 	.word	0x08004191
 8003da4:	08004191 	.word	0x08004191
 8003da8:	08004191 	.word	0x08004191
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08004191 	.word	0x08004191
 8003db4:	08004191 	.word	0x08004191
 8003db8:	08004191 	.word	0x08004191
 8003dbc:	08003fc1 	.word	0x08003fc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4bb9      	ldr	r3, [pc, #740]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003dc6:	e1e7      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dc8:	4bb8      	ldr	r3, [pc, #736]	; (80040ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8003dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dce:	e1e3      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4bb4      	ldr	r3, [pc, #720]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ddc:	4bb1      	ldr	r3, [pc, #708]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d071      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de8:	4bae      	ldr	r3, [pc, #696]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003df4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f04f 0100 	mov.w	r1, #0
 8003e1a:	0159      	lsls	r1, r3, #5
 8003e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e20:	0150      	lsls	r0, r2, #5
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4621      	mov	r1, r4
 8003e28:	1a51      	subs	r1, r2, r1
 8003e2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e32:	647b      	str	r3, [r7, #68]	; 0x44
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e40:	4649      	mov	r1, r9
 8003e42:	018b      	lsls	r3, r1, #6
 8003e44:	4641      	mov	r1, r8
 8003e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	018a      	lsls	r2, r1, #6
 8003e4e:	4641      	mov	r1, r8
 8003e50:	1a51      	subs	r1, r2, r1
 8003e52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e54:	4649      	mov	r1, r9
 8003e56:	eb63 0301 	sbc.w	r3, r3, r1
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e68:	4649      	mov	r1, r9
 8003e6a:	00cb      	lsls	r3, r1, #3
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e72:	4641      	mov	r1, r8
 8003e74:	00ca      	lsls	r2, r1, #3
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	633b      	str	r3, [r7, #48]	; 0x30
 8003e82:	462b      	mov	r3, r5
 8003e84:	460a      	mov	r2, r1
 8003e86:	eb42 0303 	adc.w	r3, r2, r3
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e98:	4629      	mov	r1, r5
 8003e9a:	024b      	lsls	r3, r1, #9
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	024a      	lsls	r2, r1, #9
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ebc:	f7fc fe42 	bl	8000b44 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eca:	e067      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4b75      	ldr	r3, [pc, #468]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ed8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f00:	0150      	lsls	r0, r2, #5
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4621      	mov	r1, r4
 8003f08:	1a51      	subs	r1, r2, r1
 8003f0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f20:	4649      	mov	r1, r9
 8003f22:	018b      	lsls	r3, r1, #6
 8003f24:	4641      	mov	r1, r8
 8003f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	018a      	lsls	r2, r1, #6
 8003f2e:	4641      	mov	r1, r8
 8003f30:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f34:	4649      	mov	r1, r9
 8003f36:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4e:	4692      	mov	sl, r2
 8003f50:	469b      	mov	fp, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	eb1a 0303 	adds.w	r3, sl, r3
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	028b      	lsls	r3, r1, #10
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f78:	4621      	mov	r1, r4
 8003f7a:	028a      	lsls	r2, r1, #10
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f84:	2200      	movs	r2, #0
 8003f86:	673b      	str	r3, [r7, #112]	; 0x70
 8003f88:	677a      	str	r2, [r7, #116]	; 0x74
 8003f8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f8e:	f7fc fdd9 	bl	8000b44 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4613      	mov	r3, r2
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f9c:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fbe:	e0eb      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc0:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fcc:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d06b      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	2200      	movs	r2, #0
 8003fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fea:	663b      	str	r3, [r7, #96]	; 0x60
 8003fec:	2300      	movs	r3, #0
 8003fee:	667b      	str	r3, [r7, #100]	; 0x64
 8003ff0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	0159      	lsls	r1, r3, #5
 8004002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004006:	0150      	lsls	r0, r2, #5
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4621      	mov	r1, r4
 800400e:	1a51      	subs	r1, r2, r1
 8004010:	61b9      	str	r1, [r7, #24]
 8004012:	4629      	mov	r1, r5
 8004014:	eb63 0301 	sbc.w	r3, r3, r1
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004026:	4659      	mov	r1, fp
 8004028:	018b      	lsls	r3, r1, #6
 800402a:	4651      	mov	r1, sl
 800402c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004030:	4651      	mov	r1, sl
 8004032:	018a      	lsls	r2, r1, #6
 8004034:	4651      	mov	r1, sl
 8004036:	ebb2 0801 	subs.w	r8, r2, r1
 800403a:	4659      	mov	r1, fp
 800403c:	eb63 0901 	sbc.w	r9, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004050:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004054:	4690      	mov	r8, r2
 8004056:	4699      	mov	r9, r3
 8004058:	4623      	mov	r3, r4
 800405a:	eb18 0303 	adds.w	r3, r8, r3
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	462b      	mov	r3, r5
 8004062:	eb49 0303 	adc.w	r3, r9, r3
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004074:	4629      	mov	r1, r5
 8004076:	024b      	lsls	r3, r1, #9
 8004078:	4621      	mov	r1, r4
 800407a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800407e:	4621      	mov	r1, r4
 8004080:	024a      	lsls	r2, r1, #9
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800408a:	2200      	movs	r2, #0
 800408c:	65bb      	str	r3, [r7, #88]	; 0x58
 800408e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004090:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004094:	f7fc fd56 	bl	8000b44 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a2:	e065      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x420>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b0:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	2200      	movs	r2, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	4611      	mov	r1, r2
 80040bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040c0:	653b      	str	r3, [r7, #80]	; 0x50
 80040c2:	2300      	movs	r3, #0
 80040c4:	657b      	str	r3, [r7, #84]	; 0x54
 80040c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80040ca:	4642      	mov	r2, r8
 80040cc:	464b      	mov	r3, r9
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	0159      	lsls	r1, r3, #5
 80040d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040dc:	0150      	lsls	r0, r2, #5
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4641      	mov	r1, r8
 80040e4:	1a51      	subs	r1, r2, r1
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	4649      	mov	r1, r9
 80040ea:	eb63 0301 	sbc.w	r3, r3, r1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040fc:	4659      	mov	r1, fp
 80040fe:	018b      	lsls	r3, r1, #6
 8004100:	4651      	mov	r1, sl
 8004102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004106:	4651      	mov	r1, sl
 8004108:	018a      	lsls	r2, r1, #6
 800410a:	4651      	mov	r1, sl
 800410c:	1a54      	subs	r4, r2, r1
 800410e:	4659      	mov	r1, fp
 8004110:	eb63 0501 	sbc.w	r5, r3, r1
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	00eb      	lsls	r3, r5, #3
 800411e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004122:	00e2      	lsls	r2, r4, #3
 8004124:	4614      	mov	r4, r2
 8004126:	461d      	mov	r5, r3
 8004128:	4643      	mov	r3, r8
 800412a:	18e3      	adds	r3, r4, r3
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	464b      	mov	r3, r9
 8004130:	eb45 0303 	adc.w	r3, r5, r3
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004142:	4629      	mov	r1, r5
 8004144:	028b      	lsls	r3, r1, #10
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800414c:	4621      	mov	r1, r4
 800414e:	028a      	lsls	r2, r1, #10
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004158:	2200      	movs	r2, #0
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48
 800415c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800415e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004162:	f7fc fcef 	bl	8000b44 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4613      	mov	r3, r2
 800416c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0f1b      	lsrs	r3, r3, #28
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800417e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800418e:	e003      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8004192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004196:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004198:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800419c:	4618      	mov	r0, r3
 800419e:	37b8      	adds	r7, #184	; 0xb8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	00f42400 	.word	0x00f42400

080041b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e28d      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8083 	beq.w	80042d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041d0:	4b94      	ldr	r3, [pc, #592]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d019      	beq.n	8004210 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041dc:	4b91      	ldr	r3, [pc, #580]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041e8:	4b8e      	ldr	r3, [pc, #568]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f4:	d00c      	beq.n	8004210 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d112      	bne.n	8004228 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b84      	ldr	r3, [pc, #528]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05b      	beq.n	80042d4 <HAL_RCC_OscConfig+0x124>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d157      	bne.n	80042d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e25a      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x90>
 8004232:	4b7c      	ldr	r3, [pc, #496]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7b      	ldr	r2, [pc, #492]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xcc>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0xb4>
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b73      	ldr	r3, [pc, #460]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a72      	ldr	r2, [pc, #456]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xcc>
 8004264:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a6b      	ldr	r2, [pc, #428]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd fb68 	bl	8001958 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fb64 	bl	8001958 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e21f      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b61      	ldr	r3, [pc, #388]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xdc>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fb54 	bl	8001958 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd fb50 	bl	8001958 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e20b      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b57      	ldr	r3, [pc, #348]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x104>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d06f      	beq.n	80043c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042e2:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d017      	beq.n	800431e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ee:	4b4d      	ldr	r3, [pc, #308]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d105      	bne.n	8004306 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042fa:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d11c      	bne.n	800434c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004312:	4b44      	ldr	r3, [pc, #272]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_RCC_OscConfig+0x186>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1d3      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004336:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4937      	ldr	r1, [pc, #220]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	e03a      	b.n	80043c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004354:	4b34      	ldr	r3, [pc, #208]	; (8004428 <HAL_RCC_OscConfig+0x278>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd fafd 	bl	8001958 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004362:	f7fd faf9 	bl	8001958 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1b4      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004374:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004380:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4925      	ldr	r1, [pc, #148]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_OscConfig+0x278>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd fadc 	bl	8001958 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fd fad8 	bl	8001958 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e193      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d036      	beq.n	800443c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <HAL_RCC_OscConfig+0x27c>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd fabc 	bl	8001958 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd fab8 	bl	8001958 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e173      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x234>
 8004402:	e01b      	b.n	800443c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_OscConfig+0x27c>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fd faa5 	bl	8001958 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	e00e      	b.n	8004430 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004412:	f7fd faa1 	bl	8001958 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d907      	bls.n	8004430 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e15c      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
 8004424:	40023800 	.word	0x40023800
 8004428:	42470000 	.word	0x42470000
 800442c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	4b8a      	ldr	r3, [pc, #552]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ea      	bne.n	8004412 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8097 	beq.w	8004578 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444e:	4b83      	ldr	r3, [pc, #524]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	4b7f      	ldr	r3, [pc, #508]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a7e      	ldr	r2, [pc, #504]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b7c      	ldr	r3, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b79      	ldr	r3, [pc, #484]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d118      	bne.n	80044b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b76      	ldr	r3, [pc, #472]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a75      	ldr	r2, [pc, #468]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 800448c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004492:	f7fd fa61 	bl	8001958 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449a:	f7fd fa5d 	bl	8001958 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e118      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <HAL_RCC_OscConfig+0x4b0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x31e>
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a65      	ldr	r2, [pc, #404]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
 80044cc:	e01c      	b.n	8004508 <HAL_RCC_OscConfig+0x358>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x340>
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a60      	ldr	r2, [pc, #384]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
 80044e2:	4b5e      	ldr	r3, [pc, #376]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a5d      	ldr	r2, [pc, #372]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0x358>
 80044f0:	4b5a      	ldr	r3, [pc, #360]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	4a59      	ldr	r2, [pc, #356]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6713      	str	r3, [r2, #112]	; 0x70
 80044fc:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a56      	ldr	r2, [pc, #344]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004502:	f023 0304 	bic.w	r3, r3, #4
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fd fa22 	bl	8001958 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fd fa1e 	bl	8001958 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0d7      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ee      	beq.n	8004518 <HAL_RCC_OscConfig+0x368>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fd fa0c 	bl	8001958 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	e00a      	b.n	800455a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7fd fa08 	bl	8001958 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0c1      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455a:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ee      	bne.n	8004544 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456c:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	4a3a      	ldr	r2, [pc, #232]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80ad 	beq.w	80046dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b08      	cmp	r3, #8
 800458c:	d060      	beq.n	8004650 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d145      	bne.n	8004622 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b33      	ldr	r3, [pc, #204]	; (8004664 <HAL_RCC_OscConfig+0x4b4>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd f9dc 	bl	8001958 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd f9d8 	bl	8001958 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e093      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	3b01      	subs	r3, #1
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	071b      	lsls	r3, r3, #28
 80045ee:	491b      	ldr	r1, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x4b4>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fd f9ad 	bl	8001958 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004602:	f7fd f9a9 	bl	8001958 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e064      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x452>
 8004620:	e05c      	b.n	80046dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCC_OscConfig+0x4b4>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd f996 	bl	8001958 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd f992 	bl	8001958 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e04d      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_RCC_OscConfig+0x4ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x480>
 800464e:	e045      	b.n	80046dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e040      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
 800465c:	40023800 	.word	0x40023800
 8004660:	40007000 	.word	0x40007000
 8004664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004668:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <HAL_RCC_OscConfig+0x538>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d030      	beq.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d129      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d122      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800469e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d119      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d10f      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800

080046ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e07b      	b.n	80047f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d009      	beq.n	8004724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
 8004716:	e005      	b.n	8004724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc ff40 	bl	80015c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0104 	and.w	r1, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0210 	and.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b088      	sub	sp, #32
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_SPI_Transmit+0x22>
 800481c:	2302      	movs	r3, #2
 800481e:	e126      	b.n	8004a6e <HAL_SPI_Transmit+0x270>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004828:	f7fd f896 	bl	8001958 <HAL_GetTick>
 800482c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d002      	beq.n	8004844 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800483e:	2302      	movs	r3, #2
 8004840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004842:	e10b      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_SPI_Transmit+0x52>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004854:	e102      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489c:	d10f      	bne.n	80048be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d007      	beq.n	80048dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e4:	d14b      	bne.n	800497e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0xf6>
 80048ee:	8afb      	ldrh	r3, [r7, #22]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d13e      	bne.n	8004972 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	881a      	ldrh	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004918:	e02b      	b.n	8004972 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d112      	bne.n	800494e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	881a      	ldrh	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	1c9a      	adds	r2, r3, #2
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	86da      	strh	r2, [r3, #54]	; 0x36
 800494c:	e011      	b.n	8004972 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494e:	f7fd f803 	bl	8001958 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d803      	bhi.n	8004966 <HAL_SPI_Transmit+0x168>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d102      	bne.n	800496c <HAL_SPI_Transmit+0x16e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004970:	e074      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1ce      	bne.n	800491a <HAL_SPI_Transmit+0x11c>
 800497c:	e04c      	b.n	8004a18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_SPI_Transmit+0x18e>
 8004986:	8afb      	ldrh	r3, [r7, #22]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d140      	bne.n	8004a0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	7812      	ldrb	r2, [r2, #0]
 8004998:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049b2:	e02c      	b.n	8004a0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d113      	bne.n	80049ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80049e8:	e011      	b.n	8004a0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ea:	f7fc ffb5 	bl	8001958 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d803      	bhi.n	8004a02 <HAL_SPI_Transmit+0x204>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d102      	bne.n	8004a08 <HAL_SPI_Transmit+0x20a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a0c:	e026      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1cd      	bne.n	80049b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f8b3 	bl	8004b88 <SPI_EndRxTxTransaction>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e000      	b.n	8004a5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a88:	f7fc ff66 	bl	8001958 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a98:	f7fc ff5e 	bl	8001958 <HAL_GetTick>
 8004a9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	015b      	lsls	r3, r3, #5
 8004aa4:	0d1b      	lsrs	r3, r3, #20
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	e054      	b.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d050      	beq.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ab8:	f7fc ff4e 	bl	8001958 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d902      	bls.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d13d      	bne.n	8004b4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae6:	d111      	bne.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af0:	d004      	beq.n	8004afc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afa:	d107      	bne.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b14:	d10f      	bne.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e017      	b.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	bf0c      	ite	eq
 8004b6a:	2301      	moveq	r3, #1
 8004b6c:	2300      	movne	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d19b      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000000 	.word	0x20000000

08004b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <SPI_EndRxTxTransaction+0x7c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <SPI_EndRxTxTransaction+0x80>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	0d5b      	lsrs	r3, r3, #21
 8004ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d112      	bne.n	8004bda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff ff5a 	bl	8004a78 <SPI_WaitFlagStateUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e00f      	b.n	8004bfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf0:	2b80      	cmp	r3, #128	; 0x80
 8004bf2:	d0f2      	beq.n	8004bda <SPI_EndRxTxTransaction+0x52>
 8004bf4:	e000      	b.n	8004bf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004bf6:	bf00      	nop
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000000 	.word	0x20000000
 8004c08:	165e9f81 	.word	0x165e9f81

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e041      	b.n	8004ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc fd0e 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fa96 	bl	800517c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e04e      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d022      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d01d      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a19      	ldr	r2, [pc, #100]	; (8004d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d111      	bne.n	8004d50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d010      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e007      	b.n	8004d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40010400 	.word	0x40010400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40001800 	.word	0x40001800

08004d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0202 	mvn.w	r2, #2
 8004db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9b5 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f9a7 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f9b8 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0204 	mvn.w	r2, #4
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f98b 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f97d 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f98e 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0208 	mvn.w	r2, #8
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f961 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f953 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f964 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0210 	mvn.w	r2, #16
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f937 	bl	800513e <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f929 	bl	800512a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f93a 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0201 	mvn.w	r2, #1
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc f8ca 	bl	80010a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fae0 	bl	80054fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8ff 	bl	8005166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0220 	mvn.w	r2, #32
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 faaa 	bl	80054e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0b4      	b.n	8005122 <HAL_TIM_ConfigClockSource+0x186>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff0:	d03e      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0xd4>
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	f200 8087 	bhi.w	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	f000 8086 	beq.w	800510e <HAL_TIM_ConfigClockSource+0x172>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d87f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d01a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0xa6>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d87b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b60      	cmp	r3, #96	; 0x60
 8005012:	d050      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d877      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b50      	cmp	r3, #80	; 0x50
 800501a:	d03c      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xfa>
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d873      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d058      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d86f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b30      	cmp	r3, #48	; 0x30
 800502a:	d064      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d86b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d060      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d867      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05c      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800503c:	2b10      	cmp	r3, #16
 800503e:	d05a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	e062      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f000 f9ad 	bl	80053b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e04f      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f000 f996 	bl	80053b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005092:	609a      	str	r2, [r3, #8]
      break;
 8005094:	e03c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 f90a 	bl	80052bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2150      	movs	r1, #80	; 0x50
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f963 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 80050b4:	e02c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 f929 	bl	800531a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2160      	movs	r1, #96	; 0x60
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f953 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 80050d4:	e01c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 f8ea 	bl	80052bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f943 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 80050f4:	e00c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	4610      	mov	r0, r2
 8005102:	f000 f93a 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8005106:	e003      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e000      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800510e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a40      	ldr	r2, [pc, #256]	; (8005290 <TIM_Base_SetConfig+0x114>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d00f      	beq.n	80051bc <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3d      	ldr	r2, [pc, #244]	; (8005294 <TIM_Base_SetConfig+0x118>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00b      	beq.n	80051bc <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3c      	ldr	r2, [pc, #240]	; (8005298 <TIM_Base_SetConfig+0x11c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d007      	beq.n	80051bc <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a3b      	ldr	r2, [pc, #236]	; (800529c <TIM_Base_SetConfig+0x120>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a3a      	ldr	r2, [pc, #232]	; (80052a0 <TIM_Base_SetConfig+0x124>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d108      	bne.n	80051ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2f      	ldr	r2, [pc, #188]	; (8005290 <TIM_Base_SetConfig+0x114>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d02b      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051dc:	d027      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2c      	ldr	r2, [pc, #176]	; (8005294 <TIM_Base_SetConfig+0x118>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d023      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2b      	ldr	r2, [pc, #172]	; (8005298 <TIM_Base_SetConfig+0x11c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01f      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <TIM_Base_SetConfig+0x120>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01b      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a29      	ldr	r2, [pc, #164]	; (80052a0 <TIM_Base_SetConfig+0x124>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d017      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <TIM_Base_SetConfig+0x128>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <TIM_Base_SetConfig+0x12c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00f      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a26      	ldr	r2, [pc, #152]	; (80052ac <TIM_Base_SetConfig+0x130>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00b      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <TIM_Base_SetConfig+0x134>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <TIM_Base_SetConfig+0x138>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a23      	ldr	r2, [pc, #140]	; (80052b8 <TIM_Base_SetConfig+0x13c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d108      	bne.n	8005240 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <TIM_Base_SetConfig+0x114>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_Base_SetConfig+0xf8>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <TIM_Base_SetConfig+0x124>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	615a      	str	r2, [r3, #20]
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800
 80052b0:	40001800 	.word	0x40001800
 80052b4:	40001c00 	.word	0x40001c00
 80052b8:	40002000 	.word	0x40002000

080052bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 030a 	bic.w	r3, r3, #10
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b087      	sub	sp, #28
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0210 	bic.w	r2, r3, #16
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005356:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005404:	2302      	movs	r3, #2
 8005406:	e05a      	b.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a21      	ldr	r2, [pc, #132]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d01d      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1b      	ldr	r2, [pc, #108]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d10c      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40010400 	.word	0x40010400
 80054e0:	40014000 	.word	0x40014000
 80054e4:	40001800 	.word	0x40001800

080054e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e03f      	b.n	80055a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fc f8b2 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2224      	movs	r2, #36	; 0x24
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f829 	bl	80055ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b0:	b0c0      	sub	sp, #256	; 0x100
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	ea40 0301 	orr.w	r3, r0, r1
 80055d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005604:	f021 010c 	bic.w	r1, r1, #12
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005612:	430b      	orrs	r3, r1
 8005614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	6999      	ldr	r1, [r3, #24]
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	ea40 0301 	orr.w	r3, r0, r1
 8005632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b8f      	ldr	r3, [pc, #572]	; (8005878 <UART_SetConfig+0x2cc>)
 800563c:	429a      	cmp	r2, r3
 800563e:	d005      	beq.n	800564c <UART_SetConfig+0xa0>
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b8d      	ldr	r3, [pc, #564]	; (800587c <UART_SetConfig+0x2d0>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d104      	bne.n	8005656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7fe f842 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 8005650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005654:	e003      	b.n	800565e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005656:	f7fe f829 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 800565a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005668:	f040 810c 	bne.w	8005884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800566c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005670:	2200      	movs	r2, #0
 8005672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800567a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800567e:	4622      	mov	r2, r4
 8005680:	462b      	mov	r3, r5
 8005682:	1891      	adds	r1, r2, r2
 8005684:	65b9      	str	r1, [r7, #88]	; 0x58
 8005686:	415b      	adcs	r3, r3
 8005688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800568a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800568e:	4621      	mov	r1, r4
 8005690:	eb12 0801 	adds.w	r8, r2, r1
 8005694:	4629      	mov	r1, r5
 8005696:	eb43 0901 	adc.w	r9, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ae:	4690      	mov	r8, r2
 80056b0:	4699      	mov	r9, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb18 0303 	adds.w	r3, r8, r3
 80056b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056bc:	462b      	mov	r3, r5
 80056be:	eb49 0303 	adc.w	r3, r9, r3
 80056c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056da:	460b      	mov	r3, r1
 80056dc:	18db      	adds	r3, r3, r3
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
 80056e0:	4613      	mov	r3, r2
 80056e2:	eb42 0303 	adc.w	r3, r2, r3
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
 80056e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056f0:	f7fb fa28 	bl	8000b44 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b61      	ldr	r3, [pc, #388]	; (8005880 <UART_SetConfig+0x2d4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011c      	lsls	r4, r3, #4
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800570c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	64b9      	str	r1, [r7, #72]	; 0x48
 800571c:	415b      	adcs	r3, r3
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005724:	4641      	mov	r1, r8
 8005726:	eb12 0a01 	adds.w	sl, r2, r1
 800572a:	4649      	mov	r1, r9
 800572c:	eb43 0b01 	adc.w	fp, r3, r1
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800573c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005744:	4692      	mov	sl, r2
 8005746:	469b      	mov	fp, r3
 8005748:	4643      	mov	r3, r8
 800574a:	eb1a 0303 	adds.w	r3, sl, r3
 800574e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005752:	464b      	mov	r3, r9
 8005754:	eb4b 0303 	adc.w	r3, fp, r3
 8005758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800576c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005770:	460b      	mov	r3, r1
 8005772:	18db      	adds	r3, r3, r3
 8005774:	643b      	str	r3, [r7, #64]	; 0x40
 8005776:	4613      	mov	r3, r2
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	647b      	str	r3, [r7, #68]	; 0x44
 800577e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005786:	f7fb f9dd 	bl	8000b44 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4611      	mov	r1, r2
 8005790:	4b3b      	ldr	r3, [pc, #236]	; (8005880 <UART_SetConfig+0x2d4>)
 8005792:	fba3 2301 	umull	r2, r3, r3, r1
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2264      	movs	r2, #100	; 0x64
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	1acb      	subs	r3, r1, r3
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057a6:	4b36      	ldr	r3, [pc, #216]	; (8005880 <UART_SetConfig+0x2d4>)
 80057a8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057b4:	441c      	add	r4, r3
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80057d0:	415b      	adcs	r3, r3
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057d8:	4641      	mov	r1, r8
 80057da:	1851      	adds	r1, r2, r1
 80057dc:	6339      	str	r1, [r7, #48]	; 0x30
 80057de:	4649      	mov	r1, r9
 80057e0:	414b      	adcs	r3, r1
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057f0:	4659      	mov	r1, fp
 80057f2:	00cb      	lsls	r3, r1, #3
 80057f4:	4651      	mov	r1, sl
 80057f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fa:	4651      	mov	r1, sl
 80057fc:	00ca      	lsls	r2, r1, #3
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	4603      	mov	r3, r0
 8005804:	4642      	mov	r2, r8
 8005806:	189b      	adds	r3, r3, r2
 8005808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800580c:	464b      	mov	r3, r9
 800580e:	460a      	mov	r2, r1
 8005810:	eb42 0303 	adc.w	r3, r2, r3
 8005814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800582c:	460b      	mov	r3, r1
 800582e:	18db      	adds	r3, r3, r3
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	4613      	mov	r3, r2
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800583a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800583e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005842:	f7fb f97f 	bl	8000b44 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <UART_SetConfig+0x2d4>)
 800584c:	fba3 1302 	umull	r1, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	2164      	movs	r1, #100	; 0x64
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	3332      	adds	r3, #50	; 0x32
 800585e:	4a08      	ldr	r2, [pc, #32]	; (8005880 <UART_SetConfig+0x2d4>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	f003 0207 	and.w	r2, r3, #7
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4422      	add	r2, r4
 8005872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005874:	e105      	b.n	8005a82 <UART_SetConfig+0x4d6>
 8005876:	bf00      	nop
 8005878:	40011000 	.word	0x40011000
 800587c:	40011400 	.word	0x40011400
 8005880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005888:	2200      	movs	r2, #0
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800588e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005896:	4642      	mov	r2, r8
 8005898:	464b      	mov	r3, r9
 800589a:	1891      	adds	r1, r2, r2
 800589c:	6239      	str	r1, [r7, #32]
 800589e:	415b      	adcs	r3, r3
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
 80058a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058a6:	4641      	mov	r1, r8
 80058a8:	1854      	adds	r4, r2, r1
 80058aa:	4649      	mov	r1, r9
 80058ac:	eb43 0501 	adc.w	r5, r3, r1
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	00eb      	lsls	r3, r5, #3
 80058ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058be:	00e2      	lsls	r2, r4, #3
 80058c0:	4614      	mov	r4, r2
 80058c2:	461d      	mov	r5, r3
 80058c4:	4643      	mov	r3, r8
 80058c6:	18e3      	adds	r3, r4, r3
 80058c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058cc:	464b      	mov	r3, r9
 80058ce:	eb45 0303 	adc.w	r3, r5, r3
 80058d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058f2:	4629      	mov	r1, r5
 80058f4:	008b      	lsls	r3, r1, #2
 80058f6:	4621      	mov	r1, r4
 80058f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fc:	4621      	mov	r1, r4
 80058fe:	008a      	lsls	r2, r1, #2
 8005900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005904:	f7fb f91e 	bl	8000b44 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <UART_SetConfig+0x4e4>)
 800590e:	fba3 2302 	umull	r2, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	011c      	lsls	r4, r3, #4
 8005916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800591a:	2200      	movs	r2, #0
 800591c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	1891      	adds	r1, r2, r2
 800592e:	61b9      	str	r1, [r7, #24]
 8005930:	415b      	adcs	r3, r3
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005938:	4641      	mov	r1, r8
 800593a:	1851      	adds	r1, r2, r1
 800593c:	6139      	str	r1, [r7, #16]
 800593e:	4649      	mov	r1, r9
 8005940:	414b      	adcs	r3, r1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005950:	4659      	mov	r1, fp
 8005952:	00cb      	lsls	r3, r1, #3
 8005954:	4651      	mov	r1, sl
 8005956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800595a:	4651      	mov	r1, sl
 800595c:	00ca      	lsls	r2, r1, #3
 800595e:	4610      	mov	r0, r2
 8005960:	4619      	mov	r1, r3
 8005962:	4603      	mov	r3, r0
 8005964:	4642      	mov	r2, r8
 8005966:	189b      	adds	r3, r3, r2
 8005968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800596c:	464b      	mov	r3, r9
 800596e:	460a      	mov	r2, r1
 8005970:	eb42 0303 	adc.w	r3, r2, r3
 8005974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	67bb      	str	r3, [r7, #120]	; 0x78
 8005982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005990:	4649      	mov	r1, r9
 8005992:	008b      	lsls	r3, r1, #2
 8005994:	4641      	mov	r1, r8
 8005996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800599a:	4641      	mov	r1, r8
 800599c:	008a      	lsls	r2, r1, #2
 800599e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059a2:	f7fb f8cf 	bl	8000b44 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <UART_SetConfig+0x4e4>)
 80059ac:	fba3 1302 	umull	r1, r3, r3, r2
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	2164      	movs	r1, #100	; 0x64
 80059b4:	fb01 f303 	mul.w	r3, r1, r3
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	3332      	adds	r3, #50	; 0x32
 80059be:	4a34      	ldr	r2, [pc, #208]	; (8005a90 <UART_SetConfig+0x4e4>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ca:	441c      	add	r4, r3
 80059cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d0:	2200      	movs	r2, #0
 80059d2:	673b      	str	r3, [r7, #112]	; 0x70
 80059d4:	677a      	str	r2, [r7, #116]	; 0x74
 80059d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059da:	4642      	mov	r2, r8
 80059dc:	464b      	mov	r3, r9
 80059de:	1891      	adds	r1, r2, r2
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	415b      	adcs	r3, r3
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ea:	4641      	mov	r1, r8
 80059ec:	1851      	adds	r1, r2, r1
 80059ee:	6039      	str	r1, [r7, #0]
 80059f0:	4649      	mov	r1, r9
 80059f2:	414b      	adcs	r3, r1
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a02:	4659      	mov	r1, fp
 8005a04:	00cb      	lsls	r3, r1, #3
 8005a06:	4651      	mov	r1, sl
 8005a08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0c:	4651      	mov	r1, sl
 8005a0e:	00ca      	lsls	r2, r1, #3
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	4642      	mov	r2, r8
 8005a18:	189b      	adds	r3, r3, r2
 8005a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a30:	667a      	str	r2, [r7, #100]	; 0x64
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a3e:	4649      	mov	r1, r9
 8005a40:	008b      	lsls	r3, r1, #2
 8005a42:	4641      	mov	r1, r8
 8005a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a48:	4641      	mov	r1, r8
 8005a4a:	008a      	lsls	r2, r1, #2
 8005a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a50:	f7fb f878 	bl	8000b44 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <UART_SetConfig+0x4e4>)
 8005a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2164      	movs	r1, #100	; 0x64
 8005a62:	fb01 f303 	mul.w	r3, r1, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	3332      	adds	r3, #50	; 0x32
 8005a6c:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <UART_SetConfig+0x4e4>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4422      	add	r2, r4
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	bf00      	nop
 8005a84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a8e:	bf00      	nop
 8005a90:	51eb851f 	.word	0x51eb851f

08005a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a94:	b084      	sub	sp, #16
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	f107 001c 	add.w	r0, r7, #28
 8005aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d122      	bne.n	8005af2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fbe8 	bl	80072bc <USB_CoreReset>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
 8005af0:	e01a      	b.n	8005b28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fbdc 	bl	80072bc <USB_CoreReset>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
 8005b1a:	e005      	b.n	8005b28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10b      	bne.n	8005b46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f043 0206 	orr.w	r2, r3, #6
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b52:	b004      	add	sp, #16
 8005b54:	4770      	bx	lr
	...

08005b58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d165      	bne.n	8005c38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4a41      	ldr	r2, [pc, #260]	; (8005c74 <USB_SetTurnaroundTime+0x11c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d906      	bls.n	8005b82 <USB_SetTurnaroundTime+0x2a>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4a40      	ldr	r2, [pc, #256]	; (8005c78 <USB_SetTurnaroundTime+0x120>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d202      	bcs.n	8005b82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b7c:	230f      	movs	r3, #15
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e062      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	4a3c      	ldr	r2, [pc, #240]	; (8005c78 <USB_SetTurnaroundTime+0x120>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d306      	bcc.n	8005b98 <USB_SetTurnaroundTime+0x40>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4a3b      	ldr	r2, [pc, #236]	; (8005c7c <USB_SetTurnaroundTime+0x124>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d202      	bcs.n	8005b98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b92:	230e      	movs	r3, #14
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e057      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4a38      	ldr	r2, [pc, #224]	; (8005c7c <USB_SetTurnaroundTime+0x124>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d306      	bcc.n	8005bae <USB_SetTurnaroundTime+0x56>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4a37      	ldr	r2, [pc, #220]	; (8005c80 <USB_SetTurnaroundTime+0x128>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d202      	bcs.n	8005bae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ba8:	230d      	movs	r3, #13
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	e04c      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	4a33      	ldr	r2, [pc, #204]	; (8005c80 <USB_SetTurnaroundTime+0x128>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d306      	bcc.n	8005bc4 <USB_SetTurnaroundTime+0x6c>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4a32      	ldr	r2, [pc, #200]	; (8005c84 <USB_SetTurnaroundTime+0x12c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d802      	bhi.n	8005bc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e041      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4a2f      	ldr	r2, [pc, #188]	; (8005c84 <USB_SetTurnaroundTime+0x12c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d906      	bls.n	8005bda <USB_SetTurnaroundTime+0x82>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <USB_SetTurnaroundTime+0x130>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d802      	bhi.n	8005bda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005bd4:	230b      	movs	r3, #11
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e036      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a2a      	ldr	r2, [pc, #168]	; (8005c88 <USB_SetTurnaroundTime+0x130>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d906      	bls.n	8005bf0 <USB_SetTurnaroundTime+0x98>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4a29      	ldr	r2, [pc, #164]	; (8005c8c <USB_SetTurnaroundTime+0x134>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d802      	bhi.n	8005bf0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005bea:	230a      	movs	r3, #10
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e02b      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4a26      	ldr	r2, [pc, #152]	; (8005c8c <USB_SetTurnaroundTime+0x134>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d906      	bls.n	8005c06 <USB_SetTurnaroundTime+0xae>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4a25      	ldr	r2, [pc, #148]	; (8005c90 <USB_SetTurnaroundTime+0x138>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d202      	bcs.n	8005c06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c00:	2309      	movs	r3, #9
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e020      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4a21      	ldr	r2, [pc, #132]	; (8005c90 <USB_SetTurnaroundTime+0x138>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d306      	bcc.n	8005c1c <USB_SetTurnaroundTime+0xc4>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a20      	ldr	r2, [pc, #128]	; (8005c94 <USB_SetTurnaroundTime+0x13c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d802      	bhi.n	8005c1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c16:	2308      	movs	r3, #8
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e015      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <USB_SetTurnaroundTime+0x13c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d906      	bls.n	8005c32 <USB_SetTurnaroundTime+0xda>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <USB_SetTurnaroundTime+0x140>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d202      	bcs.n	8005c32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c2c:	2307      	movs	r3, #7
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e00a      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c32:	2306      	movs	r3, #6
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e007      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c3e:	2309      	movs	r3, #9
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e001      	b.n	8005c48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c44:	2309      	movs	r3, #9
 8005c46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	00d8acbf 	.word	0x00d8acbf
 8005c78:	00e4e1c0 	.word	0x00e4e1c0
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	01067380 	.word	0x01067380
 8005c84:	011a499f 	.word	0x011a499f
 8005c88:	01312cff 	.word	0x01312cff
 8005c8c:	014ca43f 	.word	0x014ca43f
 8005c90:	016e3600 	.word	0x016e3600
 8005c94:	01a6ab1f 	.word	0x01a6ab1f
 8005c98:	01e84800 	.word	0x01e84800

08005c9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f043 0201 	orr.w	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f023 0201 	bic.w	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d115      	bne.n	8005d2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f7fb fe2e 	bl	8001970 <HAL_Delay>
      ms++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 fa3f 	bl	800719e <USB_GetMode>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d01e      	beq.n	8005d64 <USB_SetCurrentMode+0x84>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b31      	cmp	r3, #49	; 0x31
 8005d2a:	d9f0      	bls.n	8005d0e <USB_SetCurrentMode+0x2e>
 8005d2c:	e01a      	b.n	8005d64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d115      	bne.n	8005d60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7fb fe15 	bl	8001970 <HAL_Delay>
      ms++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 fa26 	bl	800719e <USB_GetMode>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <USB_SetCurrentMode+0x84>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b31      	cmp	r3, #49	; 0x31
 8005d5c:	d9f0      	bls.n	8005d40 <USB_SetCurrentMode+0x60>
 8005d5e:	e001      	b.n	8005d64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e005      	b.n	8005d70 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b32      	cmp	r3, #50	; 0x32
 8005d68:	d101      	bne.n	8005d6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d78:	b084      	sub	sp, #16
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	e009      	b.n	8005dac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3340      	adds	r3, #64	; 0x40
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3301      	adds	r3, #1
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b0e      	cmp	r3, #14
 8005db0:	d9f2      	bls.n	8005d98 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11c      	bne.n	8005df2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dc6:	f043 0302 	orr.w	r3, r3, #2
 8005dca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e005      	b.n	8005dfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e10:	4619      	mov	r1, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e18:	461a      	mov	r2, r3
 8005e1a:	680b      	ldr	r3, [r1, #0]
 8005e1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d10c      	bne.n	8005e3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f965 	bl	80060fc <USB_SetDevSpeed>
 8005e32:	e008      	b.n	8005e46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e34:	2101      	movs	r1, #1
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f960 	bl	80060fc <USB_SetDevSpeed>
 8005e3c:	e003      	b.n	8005e46 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e3e:	2103      	movs	r1, #3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f95b 	bl	80060fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e46:	2110      	movs	r1, #16
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f8f3 	bl	8006034 <USB_FlushTxFifo>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f91f 	bl	800609c <USB_FlushRxFifo>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2300      	movs	r3, #0
 8005e72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	461a      	mov	r2, r3
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	e043      	b.n	8005f1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea8:	d118      	bne.n	8005edc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e013      	b.n	8005eee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e008      	b.n	8005eee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	461a      	mov	r2, r3
 8005efc:	2300      	movs	r3, #0
 8005efe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3301      	adds	r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d3b7      	bcc.n	8005e92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	e043      	b.n	8005fb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f3e:	d118      	bne.n	8005f72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	461a      	mov	r2, r3
 8005f54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e013      	b.n	8005f84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e008      	b.n	8005f84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2300      	movs	r3, #0
 8005f82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3301      	adds	r3, #1
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d3b7      	bcc.n	8005f28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f043 0210 	orr.w	r2, r3, #16
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <USB_DevInit+0x2b8>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f043 0208 	orr.w	r2, r3, #8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d107      	bne.n	8006020 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006018:	f043 0304 	orr.w	r3, r3, #4
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800602c:	b004      	add	sp, #16
 800602e:	4770      	bx	lr
 8006030:	803c3800 	.word	0x803c3800

08006034 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a13      	ldr	r2, [pc, #76]	; (8006098 <USB_FlushTxFifo+0x64>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e01b      	b.n	800608c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	daf2      	bge.n	8006042 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	019b      	lsls	r3, r3, #6
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a08      	ldr	r2, [pc, #32]	; (8006098 <USB_FlushTxFifo+0x64>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e006      	b.n	800608c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b20      	cmp	r3, #32
 8006088:	d0f0      	beq.n	800606c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	00030d40 	.word	0x00030d40

0800609c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a11      	ldr	r2, [pc, #68]	; (80060f8 <USB_FlushRxFifo+0x5c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e018      	b.n	80060ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	daf2      	bge.n	80060a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2210      	movs	r2, #16
 80060ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a08      	ldr	r2, [pc, #32]	; (80060f8 <USB_FlushRxFifo+0x5c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e006      	b.n	80060ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d0f0      	beq.n	80060cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	00030d40 	.word	0x00030d40

080060fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b087      	sub	sp, #28
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d102      	bne.n	8006154 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
 8006152:	e00a      	b.n	800616a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d002      	beq.n	8006160 <USB_GetDevSpeed+0x32>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b06      	cmp	r3, #6
 800615e:	d102      	bne.n	8006166 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006160:	2302      	movs	r3, #2
 8006162:	75fb      	strb	r3, [r7, #23]
 8006164:	e001      	b.n	800616a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006166:	230f      	movs	r3, #15
 8006168:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d13a      	bne.n	800620a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	2101      	movs	r1, #1
 80061a6:	fa01 f303 	lsl.w	r3, r1, r3
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	68f9      	ldr	r1, [r7, #12]
 80061ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d155      	bne.n	8006278 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	791b      	ldrb	r3, [r3, #4]
 80061e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	059b      	lsls	r3, r3, #22
 80061ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061f0:	4313      	orrs	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e036      	b.n	8006278 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	2101      	movs	r1, #1
 800621c:	fa01 f303 	lsl.w	r3, r1, r3
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006228:	4313      	orrs	r3, r2
 800622a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11a      	bne.n	8006278 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	791b      	ldrb	r3, [r3, #4]
 800625c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800625e:	430b      	orrs	r3, r1
 8006260:	4313      	orrs	r3, r2
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006276:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d161      	bne.n	8006368 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ba:	d11f      	bne.n	80062fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	2101      	movs	r1, #1
 800630e:	fa01 f303 	lsl.w	r3, r1, r3
 8006312:	b29b      	uxth	r3, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800631c:	4013      	ands	r3, r2
 800631e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	2101      	movs	r1, #1
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	b29b      	uxth	r3, r3
 8006338:	43db      	mvns	r3, r3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4013      	ands	r3, r2
 8006342:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	0159      	lsls	r1, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	440b      	add	r3, r1
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	4619      	mov	r1, r3
 8006360:	4b35      	ldr	r3, [pc, #212]	; (8006438 <USB_DeactivateEndpoint+0x1b0>)
 8006362:	4013      	ands	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
 8006366:	e060      	b.n	800642a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637e:	d11f      	bne.n	80063c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800639e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	2101      	movs	r1, #1
 80063d2:	fa01 f303 	lsl.w	r3, r1, r3
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	43db      	mvns	r3, r3
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e0:	4013      	ands	r3, r2
 80063e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	2101      	movs	r1, #1
 80063f6:	fa01 f303 	lsl.w	r3, r1, r3
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	43db      	mvns	r3, r3
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006404:	4013      	ands	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	0159      	lsls	r1, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	440b      	add	r3, r1
 800641e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006422:	4619      	mov	r1, r3
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <USB_DeactivateEndpoint+0x1b4>)
 8006426:	4013      	ands	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	ec337800 	.word	0xec337800
 800643c:	eff37800 	.word	0xeff37800

08006440 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	2b01      	cmp	r3, #1
 800645e:	f040 815c 	bne.w	800671a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d132      	bne.n	80064d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006484:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006488:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800648c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c8:	0cdb      	lsrs	r3, r3, #19
 80064ca:	04db      	lsls	r3, r3, #19
 80064cc:	6113      	str	r3, [r2, #16]
 80064ce:	e074      	b.n	80065ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ea:	0cdb      	lsrs	r3, r3, #19
 80064ec:	04db      	lsls	r3, r3, #19
 80064ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800650e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6999      	ldr	r1, [r3, #24]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	440b      	add	r3, r1
 800652c:	1e59      	subs	r1, r3, #1
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	fbb1 f3f3 	udiv	r3, r1, r3
 8006536:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006538:	4b9d      	ldr	r3, [pc, #628]	; (80067b0 <USB_EPStartXfer+0x370>)
 800653a:	400b      	ands	r3, r1
 800653c:	69b9      	ldr	r1, [r7, #24]
 800653e:	0148      	lsls	r0, r1, #5
 8006540:	69f9      	ldr	r1, [r7, #28]
 8006542:	4401      	add	r1, r0
 8006544:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006548:	4313      	orrs	r3, r2
 800654a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006562:	69b9      	ldr	r1, [r7, #24]
 8006564:	0148      	lsls	r0, r1, #5
 8006566:	69f9      	ldr	r1, [r7, #28]
 8006568:	4401      	add	r1, r0
 800656a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800656e:	4313      	orrs	r3, r2
 8006570:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	791b      	ldrb	r3, [r3, #4]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d11f      	bne.n	80065ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006598:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d14b      	bne.n	8006658 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d4:	461a      	mov	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d128      	bne.n	8006636 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d110      	bne.n	8006616 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	e00f      	b.n	8006636 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006634:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006650:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e133      	b.n	80068c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006676:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	791b      	ldrb	r3, [r3, #4]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d015      	beq.n	80066ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 811b 	beq.w	80068c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	69f9      	ldr	r1, [r7, #28]
 80066a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a6:	4313      	orrs	r3, r2
 80066a8:	634b      	str	r3, [r1, #52]	; 0x34
 80066aa:	e109      	b.n	80068c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d110      	bne.n	80066de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e00f      	b.n	80066fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6919      	ldr	r1, [r3, #16]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	b298      	uxth	r0, r3
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	4603      	mov	r3, r0
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fade 	bl	8006cd4 <USB_WritePacket>
 8006718:	e0d2      	b.n	80068c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006734:	0cdb      	lsrs	r3, r3, #19
 8006736:	04db      	lsls	r3, r3, #19
 8006738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006754:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006758:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800675c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d126      	bne.n	80067b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800677c:	69b9      	ldr	r1, [r7, #24]
 800677e:	0148      	lsls	r0, r1, #5
 8006780:	69f9      	ldr	r1, [r7, #28]
 8006782:	4401      	add	r1, r0
 8006784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006788:	4313      	orrs	r3, r2
 800678a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067aa:	6113      	str	r3, [r2, #16]
 80067ac:	e03a      	b.n	8006824 <USB_EPStartXfer+0x3e4>
 80067ae:	bf00      	nop
 80067b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	1e5a      	subs	r2, r3, #1
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	8afa      	ldrh	r2, [r7, #22]
 80067d0:	fb03 f202 	mul.w	r2, r3, r2
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	8afb      	ldrh	r3, [r7, #22]
 80067e8:	04d9      	lsls	r1, r3, #19
 80067ea:	4b38      	ldr	r3, [pc, #224]	; (80068cc <USB_EPStartXfer+0x48c>)
 80067ec:	400b      	ands	r3, r1
 80067ee:	69b9      	ldr	r1, [r7, #24]
 80067f0:	0148      	lsls	r0, r1, #5
 80067f2:	69f9      	ldr	r1, [r7, #28]
 80067f4:	4401      	add	r1, r0
 80067f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067fa:	4313      	orrs	r3, r2
 80067fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006814:	69b9      	ldr	r1, [r7, #24]
 8006816:	0148      	lsls	r0, r1, #5
 8006818:	69f9      	ldr	r1, [r7, #28]
 800681a:	4401      	add	r1, r0
 800681c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006820:	4313      	orrs	r3, r2
 8006822:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d10d      	bne.n	8006846 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6919      	ldr	r1, [r3, #16]
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	460a      	mov	r2, r1
 8006844:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	791b      	ldrb	r3, [r3, #4]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d128      	bne.n	80068a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d110      	bne.n	8006880 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	440a      	add	r2, r1
 8006874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e00f      	b.n	80068a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	440a      	add	r2, r1
 8006896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	1ff80000 	.word	0x1ff80000

080068d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	f040 80ce 	bne.w	8006a8e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d132      	bne.n	8006960 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006914:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006918:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800691c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800693c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006958:	0cdb      	lsrs	r3, r3, #19
 800695a:	04db      	lsls	r3, r3, #19
 800695c:	6113      	str	r3, [r2, #16]
 800695e:	e04e      	b.n	80069fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697a:	0cdb      	lsrs	r3, r3, #19
 800697c:	04db      	lsls	r3, r3, #19
 800697e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800699e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ee:	6939      	ldr	r1, [r7, #16]
 80069f0:	0148      	lsls	r0, r1, #5
 80069f2:	6979      	ldr	r1, [r7, #20]
 80069f4:	4401      	add	r1, r0
 80069f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069fa:	4313      	orrs	r3, r2
 80069fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d11e      	bne.n	8006a42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d009      	beq.n	8006a20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	461a      	mov	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	e097      	b.n	8006b72 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8083 	beq.w	8006b72 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	6979      	ldr	r1, [r7, #20]
 8006a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	634b      	str	r3, [r1, #52]	; 0x34
 8006a8c:	e071      	b.n	8006b72 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	0cdb      	lsrs	r3, r3, #19
 8006aaa:	04db      	lsls	r3, r3, #19
 8006aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006acc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ad0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b20:	6939      	ldr	r1, [r7, #16]
 8006b22:	0148      	lsls	r0, r1, #5
 8006b24:	6979      	ldr	r1, [r7, #20]
 8006b26:	4401      	add	r1, r0
 8006b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10d      	bne.n	8006b52 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6919      	ldr	r1, [r3, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4e:	460a      	mov	r2, r1
 8006b50:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d14a      	bne.n	8006c34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bb6:	f040 8086 	bne.w	8006cc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	7812      	ldrb	r2, [r2, #0]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bdc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	7812      	ldrb	r2, [r2, #0]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d902      	bls.n	8006c18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
          break;
 8006c16:	e056      	b.n	8006cc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c30:	d0e7      	beq.n	8006c02 <USB_EPStopXfer+0x82>
 8006c32:	e048      	b.n	8006cc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4c:	d13b      	bne.n	8006cc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	7812      	ldrb	r2, [r2, #0]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d902      	bls.n	8006cac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8006caa:	e00c      	b.n	8006cc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc4:	d0e7      	beq.n	8006c96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	71fb      	strb	r3, [r7, #7]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d123      	bne.n	8006d42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cfa:	88bb      	ldrh	r3, [r7, #4]
 8006cfc:	3303      	adds	r3, #3
 8006cfe:	089b      	lsrs	r3, r3, #2
 8006d00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e018      	b.n	8006d3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	031a      	lsls	r2, r3, #12
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d14:	461a      	mov	r2, r3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	3301      	adds	r3, #1
 8006d26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	3301      	adds	r3, #1
 8006d32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	3301      	adds	r3, #1
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3e2      	bcc.n	8006d08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3724      	adds	r7, #36	; 0x24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b08b      	sub	sp, #44	; 0x2c
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	089b      	lsrs	r3, r3, #2
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	623b      	str	r3, [r7, #32]
 8006d7a:	e014      	b.n	8006da6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	3301      	adds	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	3301      	adds	r3, #1
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	3301      	adds	r3, #1
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	6a3a      	ldr	r2, [r7, #32]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d3e6      	bcc.n	8006d7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006dae:	8bfb      	ldrh	r3, [r7, #30]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01e      	beq.n	8006df2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f107 0310 	add.w	r3, r7, #16
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	701a      	strb	r2, [r3, #0]
      i++;
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	623b      	str	r3, [r7, #32]
      pDest++;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	3301      	adds	r3, #1
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006de6:	8bfb      	ldrh	r3, [r7, #30]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006dec:	8bfb      	ldrh	r3, [r7, #30]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1ea      	bne.n	8006dc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	372c      	adds	r7, #44	; 0x2c
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d12c      	bne.n	8006e76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	db12      	blt.n	8006e54 <USB_EPSetStall+0x54>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00f      	beq.n	8006e54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	0151      	lsls	r1, r2, #5
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	440a      	add	r2, r1
 8006e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	e02b      	b.n	8006ece <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db12      	blt.n	8006eae <USB_EPSetStall+0xae>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00f      	beq.n	8006eae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ecc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d128      	bne.n	8006f4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	791b      	ldrb	r3, [r3, #4]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d003      	beq.n	8006f28 <USB_EPClearStall+0x4c>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	791b      	ldrb	r3, [r3, #4]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d138      	bne.n	8006f9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	e027      	b.n	8006f9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	0151      	lsls	r1, r2, #5
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	440a      	add	r2, r1
 8006f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d003      	beq.n	8006f7a <USB_EPClearStall+0x9e>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	791b      	ldrb	r3, [r3, #4]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d10f      	bne.n	8006f9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007022:	f023 0302 	bic.w	r3, r3, #2
 8007026:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007050:	f023 0303 	bic.w	r3, r3, #3
 8007054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4013      	ands	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007090:	68fb      	ldr	r3, [r7, #12]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	4013      	ands	r3, r2
 80070c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	0c1b      	lsrs	r3, r3, #16
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	4013      	ands	r3, r2
 80070f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	b29b      	uxth	r3, r3
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	460b      	mov	r3, r1
 8007110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	4013      	ands	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007134:	68bb      	ldr	r3, [r7, #8]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007142:	b480      	push	{r7}
 8007144:	b087      	sub	sp, #28
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	01db      	lsls	r3, r3, #7
 8007174:	b2db      	uxtb	r3, r3
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4013      	ands	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007190:	68bb      	ldr	r3, [r7, #8]
}
 8007192:	4618      	mov	r0, r3
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f003 0301 	and.w	r3, r3, #1
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071d8:	f023 0307 	bic.w	r3, r3, #7
 80071dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	460b      	mov	r3, r1
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	333c      	adds	r3, #60	; 0x3c
 8007216:	3304      	adds	r3, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4a26      	ldr	r2, [pc, #152]	; (80072b8 <USB_EP0_OutStart+0xb8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d90a      	bls.n	800723a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007234:	d101      	bne.n	800723a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e037      	b.n	80072aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	461a      	mov	r2, r3
 8007242:	2300      	movs	r3, #0
 8007244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007268:	f043 0318 	orr.w	r3, r3, #24
 800726c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007280:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d10f      	bne.n	80072a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	4f54300a 	.word	0x4f54300a

080072bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4a13      	ldr	r2, [pc, #76]	; (8007320 <USB_CoreReset+0x64>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d901      	bls.n	80072da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e01b      	b.n	8007312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	daf2      	bge.n	80072c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <USB_CoreReset+0x64>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e006      	b.n	8007312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d0f0      	beq.n	80072f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	00030d40 	.word	0x00030d40

08007324 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007330:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007334:	f002 fcc8 	bl	8009cc8 <USBD_static_malloc>
 8007338:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d109      	bne.n	8007354 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32b0      	adds	r2, #176	; 0xb0
 800734a:	2100      	movs	r1, #0
 800734c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007350:	2302      	movs	r3, #2
 8007352:	e0d4      	b.n	80074fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007354:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007358:	2100      	movs	r1, #0
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f002 fd1c 	bl	8009d98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	32b0      	adds	r2, #176	; 0xb0
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	32b0      	adds	r2, #176	; 0xb0
 800737a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7c1b      	ldrb	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d138      	bne.n	80073fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800738c:	4b5e      	ldr	r3, [pc, #376]	; (8007508 <USBD_CDC_Init+0x1e4>)
 800738e:	7819      	ldrb	r1, [r3, #0]
 8007390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007394:	2202      	movs	r2, #2
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f002 fb25 	bl	80099e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800739c:	4b5a      	ldr	r3, [pc, #360]	; (8007508 <USBD_CDC_Init+0x1e4>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f003 020f 	and.w	r2, r3, #15
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	3324      	adds	r3, #36	; 0x24
 80073b2:	2201      	movs	r2, #1
 80073b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073b6:	4b55      	ldr	r3, [pc, #340]	; (800750c <USBD_CDC_Init+0x1e8>)
 80073b8:	7819      	ldrb	r1, [r3, #0]
 80073ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073be:	2202      	movs	r2, #2
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f002 fb10 	bl	80099e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073c6:	4b51      	ldr	r3, [pc, #324]	; (800750c <USBD_CDC_Init+0x1e8>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	f003 020f 	and.w	r2, r3, #15
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073de:	2201      	movs	r2, #1
 80073e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073e2:	4b4b      	ldr	r3, [pc, #300]	; (8007510 <USBD_CDC_Init+0x1ec>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 020f 	and.w	r2, r3, #15
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	440b      	add	r3, r1
 80073f6:	3326      	adds	r3, #38	; 0x26
 80073f8:	2210      	movs	r2, #16
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	e035      	b.n	800746a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073fe:	4b42      	ldr	r3, [pc, #264]	; (8007508 <USBD_CDC_Init+0x1e4>)
 8007400:	7819      	ldrb	r1, [r3, #0]
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	2202      	movs	r2, #2
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f002 faed 	bl	80099e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800740c:	4b3e      	ldr	r3, [pc, #248]	; (8007508 <USBD_CDC_Init+0x1e4>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	f003 020f 	and.w	r2, r3, #15
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	3324      	adds	r3, #36	; 0x24
 8007422:	2201      	movs	r2, #1
 8007424:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <USBD_CDC_Init+0x1e8>)
 8007428:	7819      	ldrb	r1, [r3, #0]
 800742a:	2340      	movs	r3, #64	; 0x40
 800742c:	2202      	movs	r2, #2
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f002 fad9 	bl	80099e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007434:	4b35      	ldr	r3, [pc, #212]	; (800750c <USBD_CDC_Init+0x1e8>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f003 020f 	and.w	r2, r3, #15
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800744c:	2201      	movs	r2, #1
 800744e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007450:	4b2f      	ldr	r3, [pc, #188]	; (8007510 <USBD_CDC_Init+0x1ec>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 020f 	and.w	r2, r3, #15
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	3326      	adds	r3, #38	; 0x26
 8007466:	2210      	movs	r2, #16
 8007468:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800746a:	4b29      	ldr	r3, [pc, #164]	; (8007510 <USBD_CDC_Init+0x1ec>)
 800746c:	7819      	ldrb	r1, [r3, #0]
 800746e:	2308      	movs	r3, #8
 8007470:	2203      	movs	r2, #3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f002 fab7 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007478:	4b25      	ldr	r3, [pc, #148]	; (8007510 <USBD_CDC_Init+0x1ec>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	f003 020f 	and.w	r2, r3, #15
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	3324      	adds	r3, #36	; 0x24
 800748e:	2201      	movs	r2, #1
 8007490:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	33b0      	adds	r3, #176	; 0xb0
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80074c8:	2302      	movs	r3, #2
 80074ca:	e018      	b.n	80074fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7c1b      	ldrb	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074d4:	4b0d      	ldr	r3, [pc, #52]	; (800750c <USBD_CDC_Init+0x1e8>)
 80074d6:	7819      	ldrb	r1, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f002 fb6e 	bl	8009bc4 <USBD_LL_PrepareReceive>
 80074e8:	e008      	b.n	80074fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ea:	4b08      	ldr	r3, [pc, #32]	; (800750c <USBD_CDC_Init+0x1e8>)
 80074ec:	7819      	ldrb	r1, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 fb64 	bl	8009bc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000093 	.word	0x20000093
 800750c:	20000094 	.word	0x20000094
 8007510:	20000095 	.word	0x20000095

08007514 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007520:	4b3a      	ldr	r3, [pc, #232]	; (800760c <USBD_CDC_DeInit+0xf8>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f002 fa83 	bl	8009a32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800752c:	4b37      	ldr	r3, [pc, #220]	; (800760c <USBD_CDC_DeInit+0xf8>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	440b      	add	r3, r1
 8007540:	3324      	adds	r3, #36	; 0x24
 8007542:	2200      	movs	r2, #0
 8007544:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007546:	4b32      	ldr	r3, [pc, #200]	; (8007610 <USBD_CDC_DeInit+0xfc>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f002 fa70 	bl	8009a32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007552:	4b2f      	ldr	r3, [pc, #188]	; (8007610 <USBD_CDC_DeInit+0xfc>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	f003 020f 	and.w	r2, r3, #15
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	440b      	add	r3, r1
 8007566:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800756a:	2200      	movs	r2, #0
 800756c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800756e:	4b29      	ldr	r3, [pc, #164]	; (8007614 <USBD_CDC_DeInit+0x100>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f002 fa5c 	bl	8009a32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800757a:	4b26      	ldr	r3, [pc, #152]	; (8007614 <USBD_CDC_DeInit+0x100>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	f003 020f 	and.w	r2, r3, #15
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	3324      	adds	r3, #36	; 0x24
 8007590:	2200      	movs	r2, #0
 8007592:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007594:	4b1f      	ldr	r3, [pc, #124]	; (8007614 <USBD_CDC_DeInit+0x100>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	f003 020f 	and.w	r2, r3, #15
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	3326      	adds	r3, #38	; 0x26
 80075aa:	2200      	movs	r2, #0
 80075ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	32b0      	adds	r2, #176	; 0xb0
 80075b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01f      	beq.n	8007600 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	33b0      	adds	r3, #176	; 0xb0
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32b0      	adds	r2, #176	; 0xb0
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f002 fb7e 	bl	8009ce4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32b0      	adds	r2, #176	; 0xb0
 80075f2:	2100      	movs	r1, #0
 80075f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000093 	.word	0x20000093
 8007610:	20000094 	.word	0x20000094
 8007614:	20000095 	.word	0x20000095

08007618 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	32b0      	adds	r2, #176	; 0xb0
 800762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007630:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	e0bf      	b.n	80077c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007650:	2b00      	cmp	r3, #0
 8007652:	d050      	beq.n	80076f6 <USBD_CDC_Setup+0xde>
 8007654:	2b20      	cmp	r3, #32
 8007656:	f040 80af 	bne.w	80077b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	88db      	ldrh	r3, [r3, #6]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d03a      	beq.n	80076d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b25b      	sxtb	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	da1b      	bge.n	80076a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	33b0      	adds	r3, #176	; 0xb0
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007682:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	88d2      	ldrh	r2, [r2, #6]
 8007688:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	88db      	ldrh	r3, [r3, #6]
 800768e:	2b07      	cmp	r3, #7
 8007690:	bf28      	it	cs
 8007692:	2307      	movcs	r3, #7
 8007694:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	89fa      	ldrh	r2, [r7, #14]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fd6d 	bl	800917c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80076a2:	e090      	b.n	80077c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785a      	ldrb	r2, [r3, #1]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88db      	ldrh	r3, [r3, #6]
 80076b2:	2b3f      	cmp	r3, #63	; 0x3f
 80076b4:	d803      	bhi.n	80076be <USBD_CDC_Setup+0xa6>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	88db      	ldrh	r3, [r3, #6]
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	e000      	b.n	80076c0 <USBD_CDC_Setup+0xa8>
 80076be:	2240      	movs	r2, #64	; 0x40
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80076c6:	6939      	ldr	r1, [r7, #16]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80076ce:	461a      	mov	r2, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fd7f 	bl	80091d4 <USBD_CtlPrepareRx>
      break;
 80076d6:	e076      	b.n	80077c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	33b0      	adds	r3, #176	; 0xb0
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	7850      	ldrb	r0, [r2, #1]
 80076ee:	2200      	movs	r2, #0
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	4798      	blx	r3
      break;
 80076f4:	e067      	b.n	80077c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b0b      	cmp	r3, #11
 80076fc:	d851      	bhi.n	80077a2 <USBD_CDC_Setup+0x18a>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <USBD_CDC_Setup+0xec>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007735 	.word	0x08007735
 8007708:	080077b1 	.word	0x080077b1
 800770c:	080077a3 	.word	0x080077a3
 8007710:	080077a3 	.word	0x080077a3
 8007714:	080077a3 	.word	0x080077a3
 8007718:	080077a3 	.word	0x080077a3
 800771c:	080077a3 	.word	0x080077a3
 8007720:	080077a3 	.word	0x080077a3
 8007724:	080077a3 	.word	0x080077a3
 8007728:	080077a3 	.word	0x080077a3
 800772c:	0800775f 	.word	0x0800775f
 8007730:	08007789 	.word	0x08007789
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b03      	cmp	r3, #3
 800773e:	d107      	bne.n	8007750 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007740:	f107 030a 	add.w	r3, r7, #10
 8007744:	2202      	movs	r2, #2
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 fd17 	bl	800917c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800774e:	e032      	b.n	80077b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fca1 	bl	800909a <USBD_CtlError>
            ret = USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	75fb      	strb	r3, [r7, #23]
          break;
 800775c:	e02b      	b.n	80077b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b03      	cmp	r3, #3
 8007768:	d107      	bne.n	800777a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800776a:	f107 030d 	add.w	r3, r7, #13
 800776e:	2201      	movs	r2, #1
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fd02 	bl	800917c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007778:	e01d      	b.n	80077b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fc8c 	bl	800909a <USBD_CtlError>
            ret = USBD_FAIL;
 8007782:	2303      	movs	r3, #3
 8007784:	75fb      	strb	r3, [r7, #23]
          break;
 8007786:	e016      	b.n	80077b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b03      	cmp	r3, #3
 8007792:	d00f      	beq.n	80077b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 fc7f 	bl	800909a <USBD_CtlError>
            ret = USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077a0:	e008      	b.n	80077b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 fc78 	bl	800909a <USBD_CtlError>
          ret = USBD_FAIL;
 80077aa:	2303      	movs	r3, #3
 80077ac:	75fb      	strb	r3, [r7, #23]
          break;
 80077ae:	e002      	b.n	80077b6 <USBD_CDC_Setup+0x19e>
          break;
 80077b0:	bf00      	nop
 80077b2:	e008      	b.n	80077c6 <USBD_CDC_Setup+0x1ae>
          break;
 80077b4:	bf00      	nop
      }
      break;
 80077b6:	e006      	b.n	80077c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fc6d 	bl	800909a <USBD_CtlError>
      ret = USBD_FAIL;
 80077c0:	2303      	movs	r3, #3
 80077c2:	75fb      	strb	r3, [r7, #23]
      break;
 80077c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	32b0      	adds	r2, #176	; 0xb0
 80077ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e065      	b.n	80078c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	32b0      	adds	r2, #176	; 0xb0
 8007804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	f003 020f 	and.w	r2, r3, #15
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	3318      	adds	r3, #24
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d02f      	beq.n	8007884 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	3318      	adds	r3, #24
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	f003 010f 	and.w	r1, r3, #15
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	460b      	mov	r3, r1
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	440b      	add	r3, r1
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4403      	add	r3, r0
 800784c:	3348      	adds	r3, #72	; 0x48
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	fbb2 f1f3 	udiv	r1, r2, r3
 8007854:	fb01 f303 	mul.w	r3, r1, r3
 8007858:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800785a:	2b00      	cmp	r3, #0
 800785c:	d112      	bne.n	8007884 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	f003 020f 	and.w	r2, r3, #15
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	3318      	adds	r3, #24
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007876:	78f9      	ldrb	r1, [r7, #3]
 8007878:	2300      	movs	r3, #0
 800787a:	2200      	movs	r2, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f002 f980 	bl	8009b82 <USBD_LL_Transmit>
 8007882:	e01f      	b.n	80078c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	33b0      	adds	r3, #176	; 0xb0
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	33b0      	adds	r3, #176	; 0xb0
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	32b0      	adds	r2, #176	; 0xb0
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	32b0      	adds	r2, #176	; 0xb0
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e01a      	b.n	8007936 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f002 f97e 	bl	8009c06 <USBD_LL_GetRxDataSize>
 800790a:	4602      	mov	r2, r0
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	33b0      	adds	r3, #176	; 0xb0
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007930:	4611      	mov	r1, r2
 8007932:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	32b0      	adds	r2, #176	; 0xb0
 8007950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007954:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	e025      	b.n	80079ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	33b0      	adds	r3, #176	; 0xb0
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d01a      	beq.n	80079aa <USBD_CDC_EP0_RxReady+0x6c>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800797a:	2bff      	cmp	r3, #255	; 0xff
 800797c:	d015      	beq.n	80079aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	33b0      	adds	r3, #176	; 0xb0
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007996:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800799e:	b292      	uxth	r2, r2
 80079a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	22ff      	movs	r2, #255	; 0xff
 80079a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079bc:	2182      	movs	r1, #130	; 0x82
 80079be:	4818      	ldr	r0, [pc, #96]	; (8007a20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079c0:	f000 fd09 	bl	80083d6 <USBD_GetEpDesc>
 80079c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079c6:	2101      	movs	r1, #1
 80079c8:	4815      	ldr	r0, [pc, #84]	; (8007a20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079ca:	f000 fd04 	bl	80083d6 <USBD_GetEpDesc>
 80079ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079d0:	2181      	movs	r1, #129	; 0x81
 80079d2:	4813      	ldr	r0, [pc, #76]	; (8007a20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079d4:	f000 fcff 	bl	80083d6 <USBD_GetEpDesc>
 80079d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2210      	movs	r2, #16
 80079e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d006      	beq.n	80079fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f4:	711a      	strb	r2, [r3, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a08:	711a      	strb	r2, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2243      	movs	r2, #67	; 0x43
 8007a12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000050 	.word	0x20000050

08007a24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a2c:	2182      	movs	r1, #130	; 0x82
 8007a2e:	4818      	ldr	r0, [pc, #96]	; (8007a90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a30:	f000 fcd1 	bl	80083d6 <USBD_GetEpDesc>
 8007a34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a36:	2101      	movs	r1, #1
 8007a38:	4815      	ldr	r0, [pc, #84]	; (8007a90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a3a:	f000 fccc 	bl	80083d6 <USBD_GetEpDesc>
 8007a3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a40:	2181      	movs	r1, #129	; 0x81
 8007a42:	4813      	ldr	r0, [pc, #76]	; (8007a90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a44:	f000 fcc7 	bl	80083d6 <USBD_GetEpDesc>
 8007a48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2210      	movs	r2, #16
 8007a54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d006      	beq.n	8007a6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	711a      	strb	r2, [r3, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f042 0202 	orr.w	r2, r2, #2
 8007a68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d006      	beq.n	8007a7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	711a      	strb	r2, [r3, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f042 0202 	orr.w	r2, r2, #2
 8007a7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2243      	movs	r2, #67	; 0x43
 8007a82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000050 	.word	0x20000050

08007a94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a9c:	2182      	movs	r1, #130	; 0x82
 8007a9e:	4818      	ldr	r0, [pc, #96]	; (8007b00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007aa0:	f000 fc99 	bl	80083d6 <USBD_GetEpDesc>
 8007aa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4815      	ldr	r0, [pc, #84]	; (8007b00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007aaa:	f000 fc94 	bl	80083d6 <USBD_GetEpDesc>
 8007aae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ab0:	2181      	movs	r1, #129	; 0x81
 8007ab2:	4813      	ldr	r0, [pc, #76]	; (8007b00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ab4:	f000 fc8f 	bl	80083d6 <USBD_GetEpDesc>
 8007ab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d006      	beq.n	8007ada <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad4:	711a      	strb	r2, [r3, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae8:	711a      	strb	r2, [r3, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2243      	movs	r2, #67	; 0x43
 8007af2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000050 	.word	0x20000050

08007b04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	220a      	movs	r2, #10
 8007b10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b12:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	2000000c 	.word	0x2000000c

08007b24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e009      	b.n	8007b4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	33b0      	adds	r3, #176	; 0xb0
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	32b0      	adds	r2, #176	; 0xb0
 8007b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b72:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e008      	b.n	8007b90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32b0      	adds	r2, #176	; 0xb0
 8007bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e004      	b.n	8007bca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	32b0      	adds	r2, #176	; 0xb0
 8007bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	32b0      	adds	r2, #176	; 0xb0
 8007bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e018      	b.n	8007c38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7c1b      	ldrb	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c0e:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <USBD_CDC_ReceivePacket+0x68>)
 8007c10:	7819      	ldrb	r1, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 ffd1 	bl	8009bc4 <USBD_LL_PrepareReceive>
 8007c22:	e008      	b.n	8007c36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c24:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <USBD_CDC_ReceivePacket+0x68>)
 8007c26:	7819      	ldrb	r1, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c2e:	2340      	movs	r3, #64	; 0x40
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 ffc7 	bl	8009bc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000094 	.word	0x20000094

08007c44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e01f      	b.n	8007c9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	79fa      	ldrb	r2, [r7, #7]
 8007c8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f001 fe41 	bl	8009918 <USBD_LL_Init>
 8007c96:	4603      	mov	r3, r0
 8007c98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e025      	b.n	8007d08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	32ae      	adds	r2, #174	; 0xae
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00f      	beq.n	8007cf8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	32ae      	adds	r2, #174	; 0xae
 8007ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	f107 020e 	add.w	r2, r7, #14
 8007cec:	4610      	mov	r0, r2
 8007cee:	4798      	blx	r3
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fe49 	bl	80099b0 <USBD_LL_Start>
 8007d1e:	4603      	mov	r3, r0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d009      	beq.n	8007d6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	4611      	mov	r1, r2
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	4611      	mov	r1, r2
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 f932 	bl	8009026 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d01a      	beq.n	8007e1c <USBD_LL_SetupStage+0x72>
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d822      	bhi.n	8007e30 <USBD_LL_SetupStage+0x86>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <USBD_LL_SetupStage+0x4a>
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d00a      	beq.n	8007e08 <USBD_LL_SetupStage+0x5e>
 8007df2:	e01d      	b.n	8007e30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fb5f 	bl	80084c0 <USBD_StdDevReq>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]
      break;
 8007e06:	e020      	b.n	8007e4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fbc7 	bl	80085a4 <USBD_StdItfReq>
 8007e16:	4603      	mov	r3, r0
 8007e18:	73fb      	strb	r3, [r7, #15]
      break;
 8007e1a:	e016      	b.n	8007e4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fc29 	bl	800867c <USBD_StdEPReq>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2e:	e00c      	b.n	8007e4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 fe16 	bl	8009a70 <USBD_LL_StallEP>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
      break;
 8007e48:	bf00      	nop
  }

  return ret;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d16e      	bne.n	8007f4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	f040 8098 	bne.w	8007fb0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d913      	bls.n	8007eb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	1ad2      	subs	r2, r2, r3
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	bf28      	it	cs
 8007ea6:	4613      	movcs	r3, r2
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f001 f9ae 	bl	800920e <USBD_CtlContinueRx>
 8007eb2:	e07d      	b.n	8007fb0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d014      	beq.n	8007eec <USBD_LL_DataOutStage+0x98>
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d81d      	bhi.n	8007f02 <USBD_LL_DataOutStage+0xae>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <USBD_LL_DataOutStage+0x7c>
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d003      	beq.n	8007ed6 <USBD_LL_DataOutStage+0x82>
 8007ece:	e018      	b.n	8007f02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75bb      	strb	r3, [r7, #22]
            break;
 8007ed4:	e018      	b.n	8007f08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 fa5e 	bl	80083a2 <USBD_CoreFindIF>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	75bb      	strb	r3, [r7, #22]
            break;
 8007eea:	e00d      	b.n	8007f08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fa60 	bl	80083bc <USBD_CoreFindEP>
 8007efc:	4603      	mov	r3, r0
 8007efe:	75bb      	strb	r3, [r7, #22]
            break;
 8007f00:	e002      	b.n	8007f08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75bb      	strb	r3, [r7, #22]
            break;
 8007f06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f08:	7dbb      	ldrb	r3, [r7, #22]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d119      	bne.n	8007f42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d113      	bne.n	8007f42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f1a:	7dba      	ldrb	r2, [r7, #22]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	32ae      	adds	r2, #174	; 0xae
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f2a:	7dba      	ldrb	r2, [r7, #22]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f32:	7dba      	ldrb	r2, [r7, #22]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	32ae      	adds	r2, #174	; 0xae
 8007f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f001 f974 	bl	8009230 <USBD_CtlSendStatus>
 8007f48:	e032      	b.n	8007fb0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4619      	mov	r1, r3
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fa31 	bl	80083bc <USBD_CoreFindEP>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
 8007f60:	2bff      	cmp	r3, #255	; 0xff
 8007f62:	d025      	beq.n	8007fb0 <USBD_LL_DataOutStage+0x15c>
 8007f64:	7dbb      	ldrb	r3, [r7, #22]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d122      	bne.n	8007fb0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d117      	bne.n	8007fa6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007f76:	7dba      	ldrb	r2, [r7, #22]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	32ae      	adds	r2, #174	; 0xae
 8007f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007f86:	7dba      	ldrb	r2, [r7, #22]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007f8e:	7dba      	ldrb	r2, [r7, #22]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	32ae      	adds	r2, #174	; 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	7afa      	ldrb	r2, [r7, #11]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	e000      	b.n	8007fb2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007fc8:	7afb      	ldrb	r3, [r7, #11]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d16f      	bne.n	80080ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d15a      	bne.n	8008094 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d914      	bls.n	8008014 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	1ad2      	subs	r2, r2, r3
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f001 f8d6 	bl	80091b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008006:	2300      	movs	r3, #0
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f001 fdd9 	bl	8009bc4 <USBD_LL_PrepareReceive>
 8008012:	e03f      	b.n	8008094 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	429a      	cmp	r2, r3
 800801e:	d11c      	bne.n	800805a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008028:	429a      	cmp	r2, r3
 800802a:	d316      	bcc.n	800805a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008036:	429a      	cmp	r2, r3
 8008038:	d20f      	bcs.n	800805a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800803a:	2200      	movs	r2, #0
 800803c:	2100      	movs	r1, #0
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 f8b7 	bl	80091b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800804c:	2300      	movs	r3, #0
 800804e:	2200      	movs	r2, #0
 8008050:	2100      	movs	r1, #0
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f001 fdb6 	bl	8009bc4 <USBD_LL_PrepareReceive>
 8008058:	e01c      	b.n	8008094 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b03      	cmp	r3, #3
 8008064:	d10f      	bne.n	8008086 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d009      	beq.n	8008086 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008086:	2180      	movs	r1, #128	; 0x80
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f001 fcf1 	bl	8009a70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f001 f8e1 	bl	8009256 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d03a      	beq.n	8008114 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fe42 	bl	8007d28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080ac:	e032      	b.n	8008114 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80080ae:	7afb      	ldrb	r3, [r7, #11]
 80080b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	4619      	mov	r1, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f97f 	bl	80083bc <USBD_CoreFindEP>
 80080be:	4603      	mov	r3, r0
 80080c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	2bff      	cmp	r3, #255	; 0xff
 80080c6:	d025      	beq.n	8008114 <USBD_LL_DataInStage+0x15a>
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d122      	bne.n	8008114 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d11c      	bne.n	8008114 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80080da:	7dfa      	ldrb	r2, [r7, #23]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	32ae      	adds	r2, #174	; 0xae
 80080e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d014      	beq.n	8008114 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80080ea:	7dfa      	ldrb	r2, [r7, #23]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80080f2:	7dfa      	ldrb	r2, [r7, #23]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	32ae      	adds	r2, #174	; 0xae
 80080f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	7afa      	ldrb	r2, [r7, #11]
 8008100:	4611      	mov	r1, r2
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	4798      	blx	r3
 8008106:	4603      	mov	r3, r0
 8008108:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800810a:	7dbb      	ldrb	r3, [r7, #22]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008110:	7dbb      	ldrb	r3, [r7, #22]
 8008112:	e000      	b.n	8008116 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d014      	beq.n	8008184 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6852      	ldr	r2, [r2, #4]
 8008172:	b2d2      	uxtb	r2, r2
 8008174:	4611      	mov	r1, r2
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008180:	2303      	movs	r3, #3
 8008182:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008184:	2340      	movs	r3, #64	; 0x40
 8008186:	2200      	movs	r2, #0
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fc2b 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081a0:	2340      	movs	r3, #64	; 0x40
 80081a2:	2200      	movs	r2, #0
 80081a4:	2180      	movs	r1, #128	; 0x80
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 fc1d 	bl	80099e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2240      	movs	r2, #64	; 0x40
 80081b6:	621a      	str	r2, [r3, #32]

  return ret;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	78fa      	ldrb	r2, [r7, #3]
 80081d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2204      	movs	r2, #4
 80081fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b04      	cmp	r3, #4
 8008220:	d106      	bne.n	8008230 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008228:	b2da      	uxtb	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b03      	cmp	r3, #3
 8008250:	d110      	bne.n	8008274 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	32ae      	adds	r2, #174	; 0xae
 8008294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800829c:	2303      	movs	r3, #3
 800829e:	e01c      	b.n	80082da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d115      	bne.n	80082d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	32ae      	adds	r2, #174	; 0xae
 80082b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32ae      	adds	r2, #174	; 0xae
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	4611      	mov	r1, r2
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	32ae      	adds	r2, #174	; 0xae
 80082f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008300:	2303      	movs	r3, #3
 8008302:	e01c      	b.n	800833e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b03      	cmp	r3, #3
 800830e:	d115      	bne.n	800833c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32ae      	adds	r2, #174	; 0xae
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	32ae      	adds	r2, #174	; 0xae
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	4611      	mov	r1, r2
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00e      	beq.n	8008398 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6852      	ldr	r2, [r2, #4]
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	4611      	mov	r1, r2
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008394:	2303      	movs	r3, #3
 8008396:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80083ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80083c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b086      	sub	sp, #24
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	885b      	ldrh	r3, [r3, #2]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d920      	bls.n	8008440 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008406:	e013      	b.n	8008430 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008408:	f107 030a 	add.w	r3, r7, #10
 800840c:	4619      	mov	r1, r3
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f000 f81b 	bl	800844a <USBD_GetNextDesc>
 8008414:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b05      	cmp	r3, #5
 800841c:	d108      	bne.n	8008430 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	789b      	ldrb	r3, [r3, #2]
 8008426:	78fa      	ldrb	r2, [r7, #3]
 8008428:	429a      	cmp	r2, r3
 800842a:	d008      	beq.n	800843e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	885b      	ldrh	r3, [r3, #2]
 8008434:	b29a      	uxth	r2, r3
 8008436:	897b      	ldrh	r3, [r7, #10]
 8008438:	429a      	cmp	r2, r3
 800843a:	d8e5      	bhi.n	8008408 <USBD_GetEpDesc+0x32>
 800843c:	e000      	b.n	8008440 <USBD_GetEpDesc+0x6a>
          break;
 800843e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008440:	693b      	ldr	r3, [r7, #16]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	881a      	ldrh	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	4413      	add	r3, r2
 8008464:	b29a      	uxth	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008476:	68fb      	ldr	r3, [r7, #12]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	3301      	adds	r3, #1
 800849a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80084a2:	8a3b      	ldrh	r3, [r7, #16]
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	b21a      	sxth	r2, r3
 80084a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	b21b      	sxth	r3, r3
 80084b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80084b2:	89fb      	ldrh	r3, [r7, #14]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084d6:	2b40      	cmp	r3, #64	; 0x40
 80084d8:	d005      	beq.n	80084e6 <USBD_StdDevReq+0x26>
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d857      	bhi.n	800858e <USBD_StdDevReq+0xce>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00f      	beq.n	8008502 <USBD_StdDevReq+0x42>
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d153      	bne.n	800858e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32ae      	adds	r2, #174	; 0xae
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	4798      	blx	r3
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008500:	e04a      	b.n	8008598 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	785b      	ldrb	r3, [r3, #1]
 8008506:	2b09      	cmp	r3, #9
 8008508:	d83b      	bhi.n	8008582 <USBD_StdDevReq+0xc2>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <USBD_StdDevReq+0x50>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008565 	.word	0x08008565
 8008514:	08008579 	.word	0x08008579
 8008518:	08008583 	.word	0x08008583
 800851c:	0800856f 	.word	0x0800856f
 8008520:	08008583 	.word	0x08008583
 8008524:	08008543 	.word	0x08008543
 8008528:	08008539 	.word	0x08008539
 800852c:	08008583 	.word	0x08008583
 8008530:	0800855b 	.word	0x0800855b
 8008534:	0800854d 	.word	0x0800854d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa3c 	bl	80089b8 <USBD_GetDescriptor>
          break;
 8008540:	e024      	b.n	800858c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fbcb 	bl	8008ce0 <USBD_SetAddress>
          break;
 800854a:	e01f      	b.n	800858c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fc0a 	bl	8008d68 <USBD_SetConfig>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
          break;
 8008558:	e018      	b.n	800858c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fcad 	bl	8008ebc <USBD_GetConfig>
          break;
 8008562:	e013      	b.n	800858c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fcde 	bl	8008f28 <USBD_GetStatus>
          break;
 800856c:	e00e      	b.n	800858c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fd0d 	bl	8008f90 <USBD_SetFeature>
          break;
 8008576:	e009      	b.n	800858c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fd31 	bl	8008fe2 <USBD_ClrFeature>
          break;
 8008580:	e004      	b.n	800858c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fd88 	bl	800909a <USBD_CtlError>
          break;
 800858a:	bf00      	nop
      }
      break;
 800858c:	e004      	b.n	8008598 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fd82 	bl	800909a <USBD_CtlError>
      break;
 8008596:	bf00      	nop
  }

  return ret;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop

080085a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d005      	beq.n	80085ca <USBD_StdItfReq+0x26>
 80085be:	2b40      	cmp	r3, #64	; 0x40
 80085c0:	d852      	bhi.n	8008668 <USBD_StdItfReq+0xc4>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <USBD_StdItfReq+0x26>
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d14e      	bne.n	8008668 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d840      	bhi.n	800865a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	889b      	ldrh	r3, [r3, #4]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d836      	bhi.n	8008650 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	889b      	ldrh	r3, [r3, #4]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff fed9 	bl	80083a2 <USBD_CoreFindIF>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2bff      	cmp	r3, #255	; 0xff
 80085f8:	d01d      	beq.n	8008636 <USBD_StdItfReq+0x92>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d11a      	bne.n	8008636 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008600:	7bba      	ldrb	r2, [r7, #14]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32ae      	adds	r2, #174	; 0xae
 8008606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00f      	beq.n	8008630 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008610:	7bba      	ldrb	r2, [r7, #14]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008618:	7bba      	ldrb	r2, [r7, #14]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	32ae      	adds	r2, #174	; 0xae
 800861e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800862e:	e004      	b.n	800863a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008630:	2303      	movs	r3, #3
 8008632:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008634:	e001      	b.n	800863a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008636:	2303      	movs	r3, #3
 8008638:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	88db      	ldrh	r3, [r3, #6]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d110      	bne.n	8008664 <USBD_StdItfReq+0xc0>
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10d      	bne.n	8008664 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fdf1 	bl	8009230 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800864e:	e009      	b.n	8008664 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fd21 	bl	800909a <USBD_CtlError>
          break;
 8008658:	e004      	b.n	8008664 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fd1c 	bl	800909a <USBD_CtlError>
          break;
 8008662:	e000      	b.n	8008666 <USBD_StdItfReq+0xc2>
          break;
 8008664:	bf00      	nop
      }
      break;
 8008666:	e004      	b.n	8008672 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fd15 	bl	800909a <USBD_CtlError>
      break;
 8008670:	bf00      	nop
  }

  return ret;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	889b      	ldrh	r3, [r3, #4]
 800868e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d007      	beq.n	80086ac <USBD_StdEPReq+0x30>
 800869c:	2b40      	cmp	r3, #64	; 0x40
 800869e:	f200 817f 	bhi.w	80089a0 <USBD_StdEPReq+0x324>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d02a      	beq.n	80086fc <USBD_StdEPReq+0x80>
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	f040 817a 	bne.w	80089a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fe83 	bl	80083bc <USBD_CoreFindEP>
 80086b6:	4603      	mov	r3, r0
 80086b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086ba:	7b7b      	ldrb	r3, [r7, #13]
 80086bc:	2bff      	cmp	r3, #255	; 0xff
 80086be:	f000 8174 	beq.w	80089aa <USBD_StdEPReq+0x32e>
 80086c2:	7b7b      	ldrb	r3, [r7, #13]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f040 8170 	bne.w	80089aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80086ca:	7b7a      	ldrb	r2, [r7, #13]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80086d2:	7b7a      	ldrb	r2, [r7, #13]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	32ae      	adds	r2, #174	; 0xae
 80086d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8163 	beq.w	80089aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80086e4:	7b7a      	ldrb	r2, [r7, #13]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	32ae      	adds	r2, #174	; 0xae
 80086ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086fa:	e156      	b.n	80089aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	2b03      	cmp	r3, #3
 8008702:	d008      	beq.n	8008716 <USBD_StdEPReq+0x9a>
 8008704:	2b03      	cmp	r3, #3
 8008706:	f300 8145 	bgt.w	8008994 <USBD_StdEPReq+0x318>
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 809b 	beq.w	8008846 <USBD_StdEPReq+0x1ca>
 8008710:	2b01      	cmp	r3, #1
 8008712:	d03c      	beq.n	800878e <USBD_StdEPReq+0x112>
 8008714:	e13e      	b.n	8008994 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d002      	beq.n	8008728 <USBD_StdEPReq+0xac>
 8008722:	2b03      	cmp	r3, #3
 8008724:	d016      	beq.n	8008754 <USBD_StdEPReq+0xd8>
 8008726:	e02c      	b.n	8008782 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00d      	beq.n	800874a <USBD_StdEPReq+0xce>
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b80      	cmp	r3, #128	; 0x80
 8008732:	d00a      	beq.n	800874a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 f999 	bl	8009a70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800873e:	2180      	movs	r1, #128	; 0x80
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 f995 	bl	8009a70 <USBD_LL_StallEP>
 8008746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008748:	e020      	b.n	800878c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fca4 	bl	800909a <USBD_CtlError>
              break;
 8008752:	e01b      	b.n	800878c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	885b      	ldrh	r3, [r3, #2]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10e      	bne.n	800877a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00b      	beq.n	800877a <USBD_StdEPReq+0xfe>
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b80      	cmp	r3, #128	; 0x80
 8008766:	d008      	beq.n	800877a <USBD_StdEPReq+0xfe>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	88db      	ldrh	r3, [r3, #6]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d104      	bne.n	800877a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 f97b 	bl	8009a70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fd58 	bl	8009230 <USBD_CtlSendStatus>

              break;
 8008780:	e004      	b.n	800878c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fc88 	bl	800909a <USBD_CtlError>
              break;
 800878a:	bf00      	nop
          }
          break;
 800878c:	e107      	b.n	800899e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d002      	beq.n	80087a0 <USBD_StdEPReq+0x124>
 800879a:	2b03      	cmp	r3, #3
 800879c:	d016      	beq.n	80087cc <USBD_StdEPReq+0x150>
 800879e:	e04b      	b.n	8008838 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00d      	beq.n	80087c2 <USBD_StdEPReq+0x146>
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b80      	cmp	r3, #128	; 0x80
 80087aa:	d00a      	beq.n	80087c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 f95d 	bl	8009a70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087b6:	2180      	movs	r1, #128	; 0x80
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 f959 	bl	8009a70 <USBD_LL_StallEP>
 80087be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087c0:	e040      	b.n	8008844 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fc68 	bl	800909a <USBD_CtlError>
              break;
 80087ca:	e03b      	b.n	8008844 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	885b      	ldrh	r3, [r3, #2]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d136      	bne.n	8008842 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d004      	beq.n	80087e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 f963 	bl	8009aae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fd21 	bl	8009230 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fde2 	bl	80083bc <USBD_CoreFindEP>
 80087f8:	4603      	mov	r3, r0
 80087fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087fc:	7b7b      	ldrb	r3, [r7, #13]
 80087fe:	2bff      	cmp	r3, #255	; 0xff
 8008800:	d01f      	beq.n	8008842 <USBD_StdEPReq+0x1c6>
 8008802:	7b7b      	ldrb	r3, [r7, #13]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d11c      	bne.n	8008842 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008808:	7b7a      	ldrb	r2, [r7, #13]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008810:	7b7a      	ldrb	r2, [r7, #13]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	32ae      	adds	r2, #174	; 0xae
 8008816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d010      	beq.n	8008842 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008820:	7b7a      	ldrb	r2, [r7, #13]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	32ae      	adds	r2, #174	; 0xae
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
 8008832:	4603      	mov	r3, r0
 8008834:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008836:	e004      	b.n	8008842 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fc2d 	bl	800909a <USBD_CtlError>
              break;
 8008840:	e000      	b.n	8008844 <USBD_StdEPReq+0x1c8>
              break;
 8008842:	bf00      	nop
          }
          break;
 8008844:	e0ab      	b.n	800899e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d002      	beq.n	8008858 <USBD_StdEPReq+0x1dc>
 8008852:	2b03      	cmp	r3, #3
 8008854:	d032      	beq.n	80088bc <USBD_StdEPReq+0x240>
 8008856:	e097      	b.n	8008988 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <USBD_StdEPReq+0x1f2>
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b80      	cmp	r3, #128	; 0x80
 8008862:	d004      	beq.n	800886e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fc17 	bl	800909a <USBD_CtlError>
                break;
 800886c:	e091      	b.n	8008992 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800886e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008872:	2b00      	cmp	r3, #0
 8008874:	da0b      	bge.n	800888e <USBD_StdEPReq+0x212>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800887c:	4613      	mov	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	3310      	adds	r3, #16
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	3304      	adds	r3, #4
 800888c:	e00b      	b.n	80088a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4413      	add	r3, r2
 80088a4:	3304      	adds	r3, #4
 80088a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2202      	movs	r2, #2
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fc61 	bl	800917c <USBD_CtlSendData>
              break;
 80088ba:	e06a      	b.n	8008992 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	da11      	bge.n	80088e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	f003 020f 	and.w	r2, r3, #15
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	3324      	adds	r3, #36	; 0x24
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d117      	bne.n	800890e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fbda 	bl	800909a <USBD_CtlError>
                  break;
 80088e6:	e054      	b.n	8008992 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	f003 020f 	and.w	r2, r3, #15
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	440b      	add	r3, r1
 80088fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fbc7 	bl	800909a <USBD_CtlError>
                  break;
 800890c:	e041      	b.n	8008992 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800890e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	da0b      	bge.n	800892e <USBD_StdEPReq+0x2b2>
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	3310      	adds	r3, #16
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	4413      	add	r3, r2
 800892a:	3304      	adds	r3, #4
 800892c:	e00b      	b.n	8008946 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	4413      	add	r3, r2
 8008944:	3304      	adds	r3, #4
 8008946:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <USBD_StdEPReq+0x2d8>
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	2b80      	cmp	r3, #128	; 0x80
 8008952:	d103      	bne.n	800895c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e00e      	b.n	800897a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f8c3 	bl	8009aec <USBD_LL_IsStallEP>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e002      	b.n	800897a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2202      	movs	r2, #2
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fbfb 	bl	800917c <USBD_CtlSendData>
              break;
 8008986:	e004      	b.n	8008992 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fb85 	bl	800909a <USBD_CtlError>
              break;
 8008990:	bf00      	nop
          }
          break;
 8008992:	e004      	b.n	800899e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fb7f 	bl	800909a <USBD_CtlError>
          break;
 800899c:	bf00      	nop
      }
      break;
 800899e:	e005      	b.n	80089ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fb79 	bl	800909a <USBD_CtlError>
      break;
 80089a8:	e000      	b.n	80089ac <USBD_StdEPReq+0x330>
      break;
 80089aa:	bf00      	nop
  }

  return ret;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	2b0e      	cmp	r3, #14
 80089da:	f200 8152 	bhi.w	8008c82 <USBD_GetDescriptor+0x2ca>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <USBD_GetDescriptor+0x2c>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a55 	.word	0x08008a55
 80089e8:	08008a6d 	.word	0x08008a6d
 80089ec:	08008aad 	.word	0x08008aad
 80089f0:	08008c83 	.word	0x08008c83
 80089f4:	08008c83 	.word	0x08008c83
 80089f8:	08008c23 	.word	0x08008c23
 80089fc:	08008c4f 	.word	0x08008c4f
 8008a00:	08008c83 	.word	0x08008c83
 8008a04:	08008c83 	.word	0x08008c83
 8008a08:	08008c83 	.word	0x08008c83
 8008a0c:	08008c83 	.word	0x08008c83
 8008a10:	08008c83 	.word	0x08008c83
 8008a14:	08008c83 	.word	0x08008c83
 8008a18:	08008c83 	.word	0x08008c83
 8008a1c:	08008a21 	.word	0x08008a21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a42:	e126      	b.n	8008c92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fb27 	bl	800909a <USBD_CtlError>
        err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
      break;
 8008a52:	e11e      	b.n	8008c92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7c12      	ldrb	r2, [r2, #16]
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	60f8      	str	r0, [r7, #12]
      break;
 8008a6a:	e112      	b.n	8008c92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	7c1b      	ldrb	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10d      	bne.n	8008a90 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7c:	f107 0208 	add.w	r2, r7, #8
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a8e:	e100      	b.n	8008c92 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	f107 0208 	add.w	r2, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	701a      	strb	r2, [r3, #0]
      break;
 8008aaa:	e0f2      	b.n	8008c92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	885b      	ldrh	r3, [r3, #2]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	f200 80ac 	bhi.w	8008c10 <USBD_GetDescriptor+0x258>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBD_GetDescriptor+0x108>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad9 	.word	0x08008ad9
 8008ac4:	08008b0d 	.word	0x08008b0d
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b75 	.word	0x08008b75
 8008ad0:	08008ba9 	.word	0x08008ba9
 8008ad4:	08008bdd 	.word	0x08008bdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7c12      	ldrb	r2, [r2, #16]
 8008af0:	f107 0108 	add.w	r1, r7, #8
 8008af4:	4610      	mov	r0, r2
 8008af6:	4798      	blx	r3
 8008af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008afa:	e091      	b.n	8008c20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 facb 	bl	800909a <USBD_CtlError>
            err++;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	3301      	adds	r3, #1
 8008b08:	72fb      	strb	r3, [r7, #11]
          break;
 8008b0a:	e089      	b.n	8008c20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	7c12      	ldrb	r2, [r2, #16]
 8008b24:	f107 0108 	add.w	r1, r7, #8
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
 8008b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2e:	e077      	b.n	8008c20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fab1 	bl	800909a <USBD_CtlError>
            err++;
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3e:	e06f      	b.n	8008c20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	7c12      	ldrb	r2, [r2, #16]
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b62:	e05d      	b.n	8008c20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fa97 	bl	800909a <USBD_CtlError>
            err++;
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	72fb      	strb	r3, [r7, #11]
          break;
 8008b72:	e055      	b.n	8008c20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	7c12      	ldrb	r2, [r2, #16]
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b96:	e043      	b.n	8008c20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa7d 	bl	800909a <USBD_CtlError>
            err++;
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ba6:	e03b      	b.n	8008c20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	7c12      	ldrb	r2, [r2, #16]
 8008bc0:	f107 0108 	add.w	r1, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bca:	e029      	b.n	8008c20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa63 	bl	800909a <USBD_CtlError>
            err++;
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bda:	e021      	b.n	8008c20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7c12      	ldrb	r2, [r2, #16]
 8008bf4:	f107 0108 	add.w	r1, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bfe:	e00f      	b.n	8008c20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa49 	bl	800909a <USBD_CtlError>
            err++;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c0e:	e007      	b.n	8008c20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa41 	bl	800909a <USBD_CtlError>
          err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c1e:	bf00      	nop
      }
      break;
 8008c20:	e037      	b.n	8008c92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7c1b      	ldrb	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c32:	f107 0208 	add.w	r2, r7, #8
 8008c36:	4610      	mov	r0, r2
 8008c38:	4798      	blx	r3
 8008c3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c3c:	e029      	b.n	8008c92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fa2a 	bl	800909a <USBD_CtlError>
        err++;
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c4c:	e021      	b.n	8008c92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	7c1b      	ldrb	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	f107 0208 	add.w	r2, r7, #8
 8008c62:	4610      	mov	r0, r2
 8008c64:	4798      	blx	r3
 8008c66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	2207      	movs	r2, #7
 8008c6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c70:	e00f      	b.n	8008c92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fa10 	bl	800909a <USBD_CtlError>
        err++;
 8008c7a:	7afb      	ldrb	r3, [r7, #11]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c80:	e007      	b.n	8008c92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fa08 	bl	800909a <USBD_CtlError>
      err++;
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c90:	bf00      	nop
  }

  if (err != 0U)
 8008c92:	7afb      	ldrb	r3, [r7, #11]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d11e      	bne.n	8008cd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	88db      	ldrh	r3, [r3, #6]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d016      	beq.n	8008cce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008ca0:	893b      	ldrh	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00e      	beq.n	8008cc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	88da      	ldrh	r2, [r3, #6]
 8008caa:	893b      	ldrh	r3, [r7, #8]
 8008cac:	4293      	cmp	r3, r2
 8008cae:	bf28      	it	cs
 8008cb0:	4613      	movcs	r3, r2
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cb6:	893b      	ldrh	r3, [r7, #8]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fa5d 	bl	800917c <USBD_CtlSendData>
 8008cc2:	e009      	b.n	8008cd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f9e7 	bl	800909a <USBD_CtlError>
 8008ccc:	e004      	b.n	8008cd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 faae 	bl	8009230 <USBD_CtlSendStatus>
 8008cd4:	e000      	b.n	8008cd8 <USBD_GetDescriptor+0x320>
    return;
 8008cd6:	bf00      	nop
  }
}
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop

08008ce0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	889b      	ldrh	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d131      	bne.n	8008d56 <USBD_SetAddress+0x76>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	88db      	ldrh	r3, [r3, #6]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d12d      	bne.n	8008d56 <USBD_SetAddress+0x76>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	885b      	ldrh	r3, [r3, #2]
 8008cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8008d00:	d829      	bhi.n	8008d56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	885b      	ldrh	r3, [r3, #2]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d104      	bne.n	8008d24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f9bc 	bl	800909a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d22:	e01d      	b.n	8008d60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7bfa      	ldrb	r2, [r7, #15]
 8008d28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 ff07 	bl	8009b44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa7a 	bl	8009230 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d004      	beq.n	8008d4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2202      	movs	r2, #2
 8008d46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4a:	e009      	b.n	8008d60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d54:	e004      	b.n	8008d60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f99e 	bl	800909a <USBD_CtlError>
  }
}
 8008d5e:	bf00      	nop
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	4b4e      	ldr	r3, [pc, #312]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008d7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d80:	4b4d      	ldr	r3, [pc, #308]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d905      	bls.n	8008d94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f985 	bl	800909a <USBD_CtlError>
    return USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e08c      	b.n	8008eae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d002      	beq.n	8008da6 <USBD_SetConfig+0x3e>
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d029      	beq.n	8008df8 <USBD_SetConfig+0x90>
 8008da4:	e075      	b.n	8008e92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008da6:	4b44      	ldr	r3, [pc, #272]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d020      	beq.n	8008df0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008dae:	4b42      	ldr	r3, [pc, #264]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008db8:	4b3f      	ldr	r3, [pc, #252]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fe ffbd 	bl	8007d3e <USBD_SetClassConfig>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d008      	beq.n	8008de0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f962 	bl	800909a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2202      	movs	r2, #2
 8008dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008dde:	e065      	b.n	8008eac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fa25 	bl	8009230 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2203      	movs	r2, #3
 8008dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dee:	e05d      	b.n	8008eac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fa1d 	bl	8009230 <USBD_CtlSendStatus>
      break;
 8008df6:	e059      	b.n	8008eac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008df8:	4b2f      	ldr	r3, [pc, #188]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d112      	bne.n	8008e26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e08:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e12:	4b29      	ldr	r3, [pc, #164]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7fe ffac 	bl	8007d76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa06 	bl	8009230 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e24:	e042      	b.n	8008eac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e26:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d02a      	beq.n	8008e8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7fe ff9a 	bl	8007d76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e42:	4b1d      	ldr	r3, [pc, #116]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fe ff73 	bl	8007d3e <USBD_SetClassConfig>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00f      	beq.n	8008e82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f918 	bl	800909a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7fe ff7f 	bl	8007d76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e80:	e014      	b.n	8008eac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f9d4 	bl	8009230 <USBD_CtlSendStatus>
      break;
 8008e88:	e010      	b.n	8008eac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9d0 	bl	8009230 <USBD_CtlSendStatus>
      break;
 8008e90:	e00c      	b.n	8008eac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f900 	bl	800909a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e9a:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <USBD_SetConfig+0x150>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7fe ff68 	bl	8007d76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8008eaa:	bf00      	nop
  }

  return ret;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200018d8 	.word	0x200018d8

08008ebc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	88db      	ldrh	r3, [r3, #6]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d004      	beq.n	8008ed8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f8e2 	bl	800909a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ed6:	e023      	b.n	8008f20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	dc02      	bgt.n	8008eea <USBD_GetConfig+0x2e>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dc03      	bgt.n	8008ef0 <USBD_GetConfig+0x34>
 8008ee8:	e015      	b.n	8008f16 <USBD_GetConfig+0x5a>
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d00b      	beq.n	8008f06 <USBD_GetConfig+0x4a>
 8008eee:	e012      	b.n	8008f16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	2201      	movs	r2, #1
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f93c 	bl	800917c <USBD_CtlSendData>
        break;
 8008f04:	e00c      	b.n	8008f20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f934 	bl	800917c <USBD_CtlSendData>
        break;
 8008f14:	e004      	b.n	8008f20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f8be 	bl	800909a <USBD_CtlError>
        break;
 8008f1e:	bf00      	nop
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d81e      	bhi.n	8008f7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	88db      	ldrh	r3, [r3, #6]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d004      	beq.n	8008f52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f8a5 	bl	800909a <USBD_CtlError>
        break;
 8008f50:	e01a      	b.n	8008f88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f043 0202 	orr.w	r2, r3, #2
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	330c      	adds	r3, #12
 8008f72:	2202      	movs	r2, #2
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f900 	bl	800917c <USBD_CtlSendData>
      break;
 8008f7c:	e004      	b.n	8008f88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f88a 	bl	800909a <USBD_CtlError>
      break;
 8008f86:	bf00      	nop
  }
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d107      	bne.n	8008fb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f940 	bl	8009230 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008fb0:	e013      	b.n	8008fda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	885b      	ldrh	r3, [r3, #2]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d10b      	bne.n	8008fd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	889b      	ldrh	r3, [r3, #4]
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f930 	bl	8009230 <USBD_CtlSendStatus>
}
 8008fd0:	e003      	b.n	8008fda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f860 	bl	800909a <USBD_CtlError>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d80b      	bhi.n	8009012 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	885b      	ldrh	r3, [r3, #2]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d10c      	bne.n	800901c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f910 	bl	8009230 <USBD_CtlSendStatus>
      }
      break;
 8009010:	e004      	b.n	800901c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f840 	bl	800909a <USBD_CtlError>
      break;
 800901a:	e000      	b.n	800901e <USBD_ClrFeature+0x3c>
      break;
 800901c:	bf00      	nop
  }
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	781a      	ldrb	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3301      	adds	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3301      	adds	r3, #1
 800904e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff fa17 	bl	8008484 <SWAPBYTE>
 8009056:	4603      	mov	r3, r0
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3301      	adds	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3301      	adds	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff fa0a 	bl	8008484 <SWAPBYTE>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3301      	adds	r3, #1
 800907c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3301      	adds	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff f9fd 	bl	8008484 <SWAPBYTE>
 800908a:	4603      	mov	r3, r0
 800908c:	461a      	mov	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	80da      	strh	r2, [r3, #6]
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090a4:	2180      	movs	r1, #128	; 0x80
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fce2 	bl	8009a70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fcde 	bl	8009a70 <USBD_LL_StallEP>
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d036      	beq.n	8009140 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090d6:	6938      	ldr	r0, [r7, #16]
 80090d8:	f000 f836 	bl	8009148 <USBD_GetLen>
 80090dc:	4603      	mov	r3, r0
 80090de:	3301      	adds	r3, #1
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	4413      	add	r3, r2
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	7812      	ldrb	r2, [r2, #0]
 80090f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	3301      	adds	r3, #1
 80090fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	4413      	add	r3, r2
 8009102:	2203      	movs	r2, #3
 8009104:	701a      	strb	r2, [r3, #0]
  idx++;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	3301      	adds	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800910c:	e013      	b.n	8009136 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	4413      	add	r3, r2
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	3301      	adds	r3, #1
 800911e:	613b      	str	r3, [r7, #16]
    idx++;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	3301      	adds	r3, #1
 8009124:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	4413      	add	r3, r2
 800912c:	2200      	movs	r2, #0
 800912e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	3301      	adds	r3, #1
 8009134:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e7      	bne.n	800910e <USBD_GetString+0x52>
 800913e:	e000      	b.n	8009142 <USBD_GetString+0x86>
    return;
 8009140:	bf00      	nop
  }
}
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009158:	e005      	b.n	8009166 <USBD_GetLen+0x1e>
  {
    len++;
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	3301      	adds	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	3301      	adds	r3, #1
 8009164:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1f5      	bne.n	800915a <USBD_GetLen+0x12>
  }

  return len;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2202      	movs	r2, #2
 800918c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	2100      	movs	r1, #0
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 fced 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	2100      	movs	r1, #0
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 fcdc 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2203      	movs	r2, #3
 80091e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	2100      	movs	r1, #0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 fce0 	bl	8009bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	2100      	movs	r1, #0
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 fccf 	bl	8009bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2204      	movs	r2, #4
 800923c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009240:	2300      	movs	r3, #0
 8009242:	2200      	movs	r2, #0
 8009244:	2100      	movs	r1, #0
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fc9b 	bl	8009b82 <USBD_LL_Transmit>

  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2205      	movs	r2, #5
 8009262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009266:	2300      	movs	r3, #0
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fca9 	bl	8009bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009280:	2200      	movs	r2, #0
 8009282:	4912      	ldr	r1, [pc, #72]	; (80092cc <MX_USB_DEVICE_Init+0x50>)
 8009284:	4812      	ldr	r0, [pc, #72]	; (80092d0 <MX_USB_DEVICE_Init+0x54>)
 8009286:	f7fe fcdd 	bl	8007c44 <USBD_Init>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009290:	f7f8 f96a 	bl	8001568 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009294:	490f      	ldr	r1, [pc, #60]	; (80092d4 <MX_USB_DEVICE_Init+0x58>)
 8009296:	480e      	ldr	r0, [pc, #56]	; (80092d0 <MX_USB_DEVICE_Init+0x54>)
 8009298:	f7fe fd04 	bl	8007ca4 <USBD_RegisterClass>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092a2:	f7f8 f961 	bl	8001568 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092a6:	490c      	ldr	r1, [pc, #48]	; (80092d8 <MX_USB_DEVICE_Init+0x5c>)
 80092a8:	4809      	ldr	r0, [pc, #36]	; (80092d0 <MX_USB_DEVICE_Init+0x54>)
 80092aa:	f7fe fc3b 	bl	8007b24 <USBD_CDC_RegisterInterface>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092b4:	f7f8 f958 	bl	8001568 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092b8:	4805      	ldr	r0, [pc, #20]	; (80092d0 <MX_USB_DEVICE_Init+0x54>)
 80092ba:	f7fe fd29 	bl	8007d10 <USBD_Start>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092c4:	f7f8 f950 	bl	8001568 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092c8:	bf00      	nop
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	200000ac 	.word	0x200000ac
 80092d0:	200018dc 	.word	0x200018dc
 80092d4:	20000018 	.word	0x20000018
 80092d8:	20000098 	.word	0x20000098

080092dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092e0:	2200      	movs	r2, #0
 80092e2:	4905      	ldr	r1, [pc, #20]	; (80092f8 <CDC_Init_FS+0x1c>)
 80092e4:	4805      	ldr	r0, [pc, #20]	; (80092fc <CDC_Init_FS+0x20>)
 80092e6:	f7fe fc37 	bl	8007b58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092ea:	4905      	ldr	r1, [pc, #20]	; (8009300 <CDC_Init_FS+0x24>)
 80092ec:	4803      	ldr	r0, [pc, #12]	; (80092fc <CDC_Init_FS+0x20>)
 80092ee:	f7fe fc55 	bl	8007b9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	200023b8 	.word	0x200023b8
 80092fc:	200018dc 	.word	0x200018dc
 8009300:	20001bb8 	.word	0x20001bb8

08009304 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800930a:	4618      	mov	r0, r3
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
 8009320:	4613      	mov	r3, r2
 8009322:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b23      	cmp	r3, #35	; 0x23
 8009328:	d84a      	bhi.n	80093c0 <CDC_Control_FS+0xac>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <CDC_Control_FS+0x1c>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	080093c1 	.word	0x080093c1
 8009334:	080093c1 	.word	0x080093c1
 8009338:	080093c1 	.word	0x080093c1
 800933c:	080093c1 	.word	0x080093c1
 8009340:	080093c1 	.word	0x080093c1
 8009344:	080093c1 	.word	0x080093c1
 8009348:	080093c1 	.word	0x080093c1
 800934c:	080093c1 	.word	0x080093c1
 8009350:	080093c1 	.word	0x080093c1
 8009354:	080093c1 	.word	0x080093c1
 8009358:	080093c1 	.word	0x080093c1
 800935c:	080093c1 	.word	0x080093c1
 8009360:	080093c1 	.word	0x080093c1
 8009364:	080093c1 	.word	0x080093c1
 8009368:	080093c1 	.word	0x080093c1
 800936c:	080093c1 	.word	0x080093c1
 8009370:	080093c1 	.word	0x080093c1
 8009374:	080093c1 	.word	0x080093c1
 8009378:	080093c1 	.word	0x080093c1
 800937c:	080093c1 	.word	0x080093c1
 8009380:	080093c1 	.word	0x080093c1
 8009384:	080093c1 	.word	0x080093c1
 8009388:	080093c1 	.word	0x080093c1
 800938c:	080093c1 	.word	0x080093c1
 8009390:	080093c1 	.word	0x080093c1
 8009394:	080093c1 	.word	0x080093c1
 8009398:	080093c1 	.word	0x080093c1
 800939c:	080093c1 	.word	0x080093c1
 80093a0:	080093c1 	.word	0x080093c1
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	080093c1 	.word	0x080093c1
 80093ac:	080093c1 	.word	0x080093c1
 80093b0:	080093c1 	.word	0x080093c1
 80093b4:	080093c1 	.word	0x080093c1
 80093b8:	080093c1 	.word	0x080093c1
 80093bc:	080093c1 	.word	0x080093c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093c0:	bf00      	nop
  }

  return (USBD_OK);
 80093c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	4805      	ldr	r0, [pc, #20]	; (80093f4 <CDC_Receive_FS+0x24>)
 80093de:	f7fe fbdd 	bl	8007b9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093e2:	4804      	ldr	r0, [pc, #16]	; (80093f4 <CDC_Receive_FS+0x24>)
 80093e4:	f7fe fbf8 	bl	8007bd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200018dc 	.word	0x200018dc

080093f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800940a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	371c      	adds	r7, #28
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
	...

0800941c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	6039      	str	r1, [r7, #0]
 8009426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2212      	movs	r2, #18
 800942c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800942e:	4b03      	ldr	r3, [pc, #12]	; (800943c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009430:	4618      	mov	r0, r3
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	200000cc 	.word	0x200000cc

08009440 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	6039      	str	r1, [r7, #0]
 800944a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2204      	movs	r2, #4
 8009450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009452:	4b03      	ldr	r3, [pc, #12]	; (8009460 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	200000ec 	.word	0x200000ec

08009464 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d105      	bne.n	8009482 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	4907      	ldr	r1, [pc, #28]	; (8009498 <USBD_FS_ProductStrDescriptor+0x34>)
 800947a:	4808      	ldr	r0, [pc, #32]	; (800949c <USBD_FS_ProductStrDescriptor+0x38>)
 800947c:	f7ff fe1e 	bl	80090bc <USBD_GetString>
 8009480:	e004      	b.n	800948c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4904      	ldr	r1, [pc, #16]	; (8009498 <USBD_FS_ProductStrDescriptor+0x34>)
 8009486:	4805      	ldr	r0, [pc, #20]	; (800949c <USBD_FS_ProductStrDescriptor+0x38>)
 8009488:	f7ff fe18 	bl	80090bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800948c:	4b02      	ldr	r3, [pc, #8]	; (8009498 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20002bb8 	.word	0x20002bb8
 800949c:	0800ae58 	.word	0x0800ae58

080094a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	6039      	str	r1, [r7, #0]
 80094aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	4904      	ldr	r1, [pc, #16]	; (80094c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094b0:	4804      	ldr	r0, [pc, #16]	; (80094c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094b2:	f7ff fe03 	bl	80090bc <USBD_GetString>
  return USBD_StrDesc;
 80094b6:	4b02      	ldr	r3, [pc, #8]	; (80094c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20002bb8 	.word	0x20002bb8
 80094c4:	0800ae68 	.word	0x0800ae68

080094c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	6039      	str	r1, [r7, #0]
 80094d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	221a      	movs	r2, #26
 80094d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094da:	f000 f855 	bl	8009588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094de:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	200000f0 	.word	0x200000f0

080094ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d105      	bne.n	800950a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4907      	ldr	r1, [pc, #28]	; (8009520 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009502:	4808      	ldr	r0, [pc, #32]	; (8009524 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009504:	f7ff fdda 	bl	80090bc <USBD_GetString>
 8009508:	e004      	b.n	8009514 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4904      	ldr	r1, [pc, #16]	; (8009520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800950e:	4805      	ldr	r0, [pc, #20]	; (8009524 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009510:	f7ff fdd4 	bl	80090bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009514:	4b02      	ldr	r3, [pc, #8]	; (8009520 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20002bb8 	.word	0x20002bb8
 8009524:	0800ae7c 	.word	0x0800ae7c

08009528 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d105      	bne.n	8009546 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4907      	ldr	r1, [pc, #28]	; (800955c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800953e:	4808      	ldr	r0, [pc, #32]	; (8009560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009540:	f7ff fdbc 	bl	80090bc <USBD_GetString>
 8009544:	e004      	b.n	8009550 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	4904      	ldr	r1, [pc, #16]	; (800955c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800954a:	4805      	ldr	r0, [pc, #20]	; (8009560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800954c:	f7ff fdb6 	bl	80090bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009550:	4b02      	ldr	r3, [pc, #8]	; (800955c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20002bb8 	.word	0x20002bb8
 8009560:	0800ae88 	.word	0x0800ae88

08009564 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	220c      	movs	r2, #12
 8009574:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009576:	4b03      	ldr	r3, [pc, #12]	; (8009584 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	200000e0 	.word	0x200000e0

08009588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <Get_SerialNum+0x44>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <Get_SerialNum+0x48>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800959a:	4b0e      	ldr	r3, [pc, #56]	; (80095d4 <Get_SerialNum+0x4c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d009      	beq.n	80095c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ae:	2208      	movs	r2, #8
 80095b0:	4909      	ldr	r1, [pc, #36]	; (80095d8 <Get_SerialNum+0x50>)
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 f814 	bl	80095e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095b8:	2204      	movs	r2, #4
 80095ba:	4908      	ldr	r1, [pc, #32]	; (80095dc <Get_SerialNum+0x54>)
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f000 f80f 	bl	80095e0 <IntToUnicode>
  }
}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	1fff7a10 	.word	0x1fff7a10
 80095d0:	1fff7a14 	.word	0x1fff7a14
 80095d4:	1fff7a18 	.word	0x1fff7a18
 80095d8:	200000f2 	.word	0x200000f2
 80095dc:	20000102 	.word	0x20000102

080095e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
 80095f6:	e027      	b.n	8009648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	0f1b      	lsrs	r3, r3, #28
 80095fc:	2b09      	cmp	r3, #9
 80095fe:	d80b      	bhi.n	8009618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	0f1b      	lsrs	r3, r3, #28
 8009604:	b2da      	uxtb	r2, r3
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	4619      	mov	r1, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	440b      	add	r3, r1
 8009610:	3230      	adds	r2, #48	; 0x30
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e00a      	b.n	800962e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	0f1b      	lsrs	r3, r3, #28
 800961c:	b2da      	uxtb	r2, r3
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	4619      	mov	r1, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	440b      	add	r3, r1
 8009628:	3237      	adds	r2, #55	; 0x37
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	3301      	adds	r3, #1
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	3301      	adds	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
 8009648:	7dfa      	ldrb	r2, [r7, #23]
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	429a      	cmp	r2, r3
 800964e:	d3d3      	bcc.n	80095f8 <IntToUnicode+0x18>
  }
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
	...

08009660 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b0a0      	sub	sp, #128	; 0x80
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	605a      	str	r2, [r3, #4]
 8009672:	609a      	str	r2, [r3, #8]
 8009674:	60da      	str	r2, [r3, #12]
 8009676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009678:	f107 0310 	add.w	r3, r7, #16
 800967c:	225c      	movs	r2, #92	; 0x5c
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f000 fb89 	bl	8009d98 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800968e:	d149      	bne.n	8009724 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009694:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009696:	2300      	movs	r3, #0
 8009698:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800969a:	f107 0310 	add.w	r3, r7, #16
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fa f82c 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80096aa:	f7f7 ff5d 	bl	8001568 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	4b1e      	ldr	r3, [pc, #120]	; (800972c <HAL_PCD_MspInit+0xcc>)
 80096b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b6:	4a1d      	ldr	r2, [pc, #116]	; (800972c <HAL_PCD_MspInit+0xcc>)
 80096b8:	f043 0301 	orr.w	r3, r3, #1
 80096bc:	6313      	str	r3, [r2, #48]	; 0x30
 80096be:	4b1b      	ldr	r3, [pc, #108]	; (800972c <HAL_PCD_MspInit+0xcc>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096d0:	2302      	movs	r3, #2
 80096d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d4:	2300      	movs	r3, #0
 80096d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096d8:	2303      	movs	r3, #3
 80096da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096dc:	230a      	movs	r3, #10
 80096de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80096e4:	4619      	mov	r1, r3
 80096e6:	4812      	ldr	r0, [pc, #72]	; (8009730 <HAL_PCD_MspInit+0xd0>)
 80096e8:	f7f8 fa78 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096ec:	4b0f      	ldr	r3, [pc, #60]	; (800972c <HAL_PCD_MspInit+0xcc>)
 80096ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f0:	4a0e      	ldr	r2, [pc, #56]	; (800972c <HAL_PCD_MspInit+0xcc>)
 80096f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f6:	6353      	str	r3, [r2, #52]	; 0x34
 80096f8:	2300      	movs	r3, #0
 80096fa:	60bb      	str	r3, [r7, #8]
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <HAL_PCD_MspInit+0xcc>)
 80096fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <HAL_PCD_MspInit+0xcc>)
 8009702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009706:	6453      	str	r3, [r2, #68]	; 0x44
 8009708:	4b08      	ldr	r3, [pc, #32]	; (800972c <HAL_PCD_MspInit+0xcc>)
 800970a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009714:	2200      	movs	r2, #0
 8009716:	2100      	movs	r1, #0
 8009718:	2043      	movs	r0, #67	; 0x43
 800971a:	f7f8 fa28 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800971e:	2043      	movs	r0, #67	; 0x43
 8009720:	f7f8 fa41 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009724:	bf00      	nop
 8009726:	3780      	adds	r7, #128	; 0x80
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	40023800 	.word	0x40023800
 8009730:	40020000 	.word	0x40020000

08009734 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7fe fb2d 	bl	8007daa <USBD_LL_SetupStage>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	4613      	mov	r3, r2
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	440b      	add	r3, r1
 8009778:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	4619      	mov	r1, r3
 8009782:	f7fe fb67 	bl	8007e54 <USBD_LL_DataOutStage>
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b082      	sub	sp, #8
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	460b      	mov	r3, r1
 8009798:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	4613      	mov	r3, r2
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	440b      	add	r3, r1
 80097ae:	334c      	adds	r3, #76	; 0x4c
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	4619      	mov	r1, r3
 80097b6:	f7fe fc00 	bl	8007fba <USBD_LL_DataInStage>
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fd34 	bl	800823e <USBD_LL_SOF>
}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097e6:	2301      	movs	r3, #1
 80097e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]
 80097f6:	e008      	b.n	800980a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d102      	bne.n	8009806 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009800:	2301      	movs	r3, #1
 8009802:	73fb      	strb	r3, [r7, #15]
 8009804:	e001      	b.n	800980a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009806:	f7f7 feaf 	bl	8001568 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009810:	7bfa      	ldrb	r2, [r7, #15]
 8009812:	4611      	mov	r1, r2
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fcd4 	bl	80081c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe fc7c 	bl	800811e <USBD_LL_Reset>
}
 8009826:	bf00      	nop
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fccf 	bl	80081e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009856:	f043 0301 	orr.w	r3, r3, #1
 800985a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009864:	4b04      	ldr	r3, [pc, #16]	; (8009878 <HAL_PCD_SuspendCallback+0x48>)
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	4a03      	ldr	r2, [pc, #12]	; (8009878 <HAL_PCD_SuspendCallback+0x48>)
 800986a:	f043 0306 	orr.w	r3, r3, #6
 800986e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	e000ed00 	.word	0xe000ed00

0800987c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fcbf 	bl	800820e <USBD_LL_Resume>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	4611      	mov	r1, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fd17 	bl	80082e2 <USBD_LL_IsoOUTIncomplete>
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ce:	78fa      	ldrb	r2, [r7, #3]
 80098d0:	4611      	mov	r1, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe fcd3 	bl	800827e <USBD_LL_IsoINIncomplete>
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fd29 	bl	8008346 <USBD_LL_DevConnected>
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fd26 	bl	800835c <USBD_LL_DevDisconnected>
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d13c      	bne.n	80099a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009928:	4a20      	ldr	r2, [pc, #128]	; (80099ac <USBD_LL_Init+0x94>)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a1e      	ldr	r2, [pc, #120]	; (80099ac <USBD_LL_Init+0x94>)
 8009934:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009938:	4b1c      	ldr	r3, [pc, #112]	; (80099ac <USBD_LL_Init+0x94>)
 800993a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800993e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009940:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <USBD_LL_Init+0x94>)
 8009942:	2206      	movs	r2, #6
 8009944:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009946:	4b19      	ldr	r3, [pc, #100]	; (80099ac <USBD_LL_Init+0x94>)
 8009948:	2202      	movs	r2, #2
 800994a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800994c:	4b17      	ldr	r3, [pc, #92]	; (80099ac <USBD_LL_Init+0x94>)
 800994e:	2200      	movs	r2, #0
 8009950:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009952:	4b16      	ldr	r3, [pc, #88]	; (80099ac <USBD_LL_Init+0x94>)
 8009954:	2202      	movs	r2, #2
 8009956:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009958:	4b14      	ldr	r3, [pc, #80]	; (80099ac <USBD_LL_Init+0x94>)
 800995a:	2200      	movs	r2, #0
 800995c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800995e:	4b13      	ldr	r3, [pc, #76]	; (80099ac <USBD_LL_Init+0x94>)
 8009960:	2200      	movs	r2, #0
 8009962:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009964:	4b11      	ldr	r3, [pc, #68]	; (80099ac <USBD_LL_Init+0x94>)
 8009966:	2200      	movs	r2, #0
 8009968:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800996a:	4b10      	ldr	r3, [pc, #64]	; (80099ac <USBD_LL_Init+0x94>)
 800996c:	2200      	movs	r2, #0
 800996e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009970:	4b0e      	ldr	r3, [pc, #56]	; (80099ac <USBD_LL_Init+0x94>)
 8009972:	2200      	movs	r2, #0
 8009974:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009976:	480d      	ldr	r0, [pc, #52]	; (80099ac <USBD_LL_Init+0x94>)
 8009978:	f7f8 fadd 	bl	8001f36 <HAL_PCD_Init>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009982:	f7f7 fdf1 	bl	8001568 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <USBD_LL_Init+0x94>)
 800998a:	f7f9 fd68 	bl	800345e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800998e:	2240      	movs	r2, #64	; 0x40
 8009990:	2100      	movs	r1, #0
 8009992:	4806      	ldr	r0, [pc, #24]	; (80099ac <USBD_LL_Init+0x94>)
 8009994:	f7f9 fd1c 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009998:	2280      	movs	r2, #128	; 0x80
 800999a:	2101      	movs	r1, #1
 800999c:	4803      	ldr	r0, [pc, #12]	; (80099ac <USBD_LL_Init+0x94>)
 800999e:	f7f9 fd17 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20002db8 	.word	0x20002db8

080099b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7f8 fbd9 	bl	800217e <HAL_PCD_Start>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f990 	bl	8009cf8 <USBD_Get_USB_Status>
 80099d8:	4603      	mov	r3, r0
 80099da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	4608      	mov	r0, r1
 80099f0:	4611      	mov	r1, r2
 80099f2:	461a      	mov	r2, r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	70fb      	strb	r3, [r7, #3]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70bb      	strb	r3, [r7, #2]
 80099fc:	4613      	mov	r3, r2
 80099fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a0e:	78bb      	ldrb	r3, [r7, #2]
 8009a10:	883a      	ldrh	r2, [r7, #0]
 8009a12:	78f9      	ldrb	r1, [r7, #3]
 8009a14:	f7f9 f8d7 	bl	8002bc6 <HAL_PCD_EP_Open>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f96a 	bl	8009cf8 <USBD_Get_USB_Status>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	4611      	mov	r1, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7f9 f920 	bl	8002c96 <HAL_PCD_EP_Close>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 f94b 	bl	8009cf8 <USBD_Get_USB_Status>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a8a:	78fa      	ldrb	r2, [r7, #3]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f9 f9f8 	bl	8002e84 <HAL_PCD_EP_SetStall>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 f92c 	bl	8009cf8 <USBD_Get_USB_Status>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7f9 fa3d 	bl	8002f4c <HAL_PCD_EP_ClrStall>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f90d 	bl	8009cf8 <USBD_Get_USB_Status>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009afe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	da0b      	bge.n	8009b20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	4613      	mov	r3, r2
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	333e      	adds	r3, #62	; 0x3e
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	e00b      	b.n	8009b38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	440b      	add	r3, r1
 8009b32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009b36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f9 f80a 	bl	8002b7c <HAL_PCD_SetAddress>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 f8c2 	bl	8009cf8 <USBD_Get_USB_Status>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b086      	sub	sp, #24
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ba0:	7af9      	ldrb	r1, [r7, #11]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	f7f9 f923 	bl	8002df0 <HAL_PCD_EP_Transmit>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 f8a1 	bl	8009cf8 <USBD_Get_USB_Status>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bba:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009be2:	7af9      	ldrb	r1, [r7, #11]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	f7f9 f89f 	bl	8002d2a <HAL_PCD_EP_Receive>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 f880 	bl	8009cf8 <USBD_Get_USB_Status>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c18:	78fa      	ldrb	r2, [r7, #3]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7f9 f8cf 	bl	8002dc0 <HAL_PCD_EP_GetRxCount>
 8009c22:	4603      	mov	r3, r0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <HAL_PCDEx_LPM_Callback+0x18>
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d01f      	beq.n	8009c82 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009c42:	e03b      	b.n	8009cbc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d007      	beq.n	8009c5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009c4c:	f7f7 fac6 	bl	80011dc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c50:	4b1c      	ldr	r3, [pc, #112]	; (8009cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	4a1b      	ldr	r2, [pc, #108]	; (8009cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009c56:	f023 0306 	bic.w	r3, r3, #6
 8009c5a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fac7 	bl	800820e <USBD_LL_Resume>
    break;
 8009c80:	e01c      	b.n	8009cbc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c94:	f043 0301 	orr.w	r3, r3, #1
 8009c98:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe fa9e 	bl	80081e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cae:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	4a04      	ldr	r2, [pc, #16]	; (8009cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009cb4:	f043 0306 	orr.w	r3, r3, #6
 8009cb8:	6113      	str	r3, [r2, #16]
    break;
 8009cba:	bf00      	nop
}
 8009cbc:	bf00      	nop
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	e000ed00 	.word	0xe000ed00

08009cc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cd0:	4b03      	ldr	r3, [pc, #12]	; (8009ce0 <USBD_static_malloc+0x18>)
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	200032c4 	.word	0x200032c4

08009ce4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d06:	79fb      	ldrb	r3, [r7, #7]
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d817      	bhi.n	8009d3c <USBD_Get_USB_Status+0x44>
 8009d0c:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <USBD_Get_USB_Status+0x1c>)
 8009d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d12:	bf00      	nop
 8009d14:	08009d25 	.word	0x08009d25
 8009d18:	08009d2b 	.word	0x08009d2b
 8009d1c:	08009d31 	.word	0x08009d31
 8009d20:	08009d37 	.word	0x08009d37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]
    break;
 8009d28:	e00b      	b.n	8009d42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d2e:	e008      	b.n	8009d42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d30:	2301      	movs	r3, #1
 8009d32:	73fb      	strb	r3, [r7, #15]
    break;
 8009d34:	e005      	b.n	8009d42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d36:	2303      	movs	r3, #3
 8009d38:	73fb      	strb	r3, [r7, #15]
    break;
 8009d3a:	e002      	b.n	8009d42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d40:	bf00      	nop
  }
  return usb_status;
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <__libc_init_array>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	4d0d      	ldr	r5, [pc, #52]	; (8009d88 <__libc_init_array+0x38>)
 8009d54:	4c0d      	ldr	r4, [pc, #52]	; (8009d8c <__libc_init_array+0x3c>)
 8009d56:	1b64      	subs	r4, r4, r5
 8009d58:	10a4      	asrs	r4, r4, #2
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	42a6      	cmp	r6, r4
 8009d5e:	d109      	bne.n	8009d74 <__libc_init_array+0x24>
 8009d60:	4d0b      	ldr	r5, [pc, #44]	; (8009d90 <__libc_init_array+0x40>)
 8009d62:	4c0c      	ldr	r4, [pc, #48]	; (8009d94 <__libc_init_array+0x44>)
 8009d64:	f001 f86a 	bl	800ae3c <_init>
 8009d68:	1b64      	subs	r4, r4, r5
 8009d6a:	10a4      	asrs	r4, r4, #2
 8009d6c:	2600      	movs	r6, #0
 8009d6e:	42a6      	cmp	r6, r4
 8009d70:	d105      	bne.n	8009d7e <__libc_init_array+0x2e>
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d78:	4798      	blx	r3
 8009d7a:	3601      	adds	r6, #1
 8009d7c:	e7ee      	b.n	8009d5c <__libc_init_array+0xc>
 8009d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d82:	4798      	blx	r3
 8009d84:	3601      	adds	r6, #1
 8009d86:	e7f2      	b.n	8009d6e <__libc_init_array+0x1e>
 8009d88:	0800b090 	.word	0x0800b090
 8009d8c:	0800b090 	.word	0x0800b090
 8009d90:	0800b090 	.word	0x0800b090
 8009d94:	0800b094 	.word	0x0800b094

08009d98 <memset>:
 8009d98:	4402      	add	r2, r0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d100      	bne.n	8009da2 <memset+0xa>
 8009da0:	4770      	bx	lr
 8009da2:	f803 1b01 	strb.w	r1, [r3], #1
 8009da6:	e7f9      	b.n	8009d9c <memset+0x4>

08009da8 <sin>:
 8009da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009daa:	ec53 2b10 	vmov	r2, r3, d0
 8009dae:	4828      	ldr	r0, [pc, #160]	; (8009e50 <sin+0xa8>)
 8009db0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009db4:	4281      	cmp	r1, r0
 8009db6:	dc07      	bgt.n	8009dc8 <sin+0x20>
 8009db8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009e48 <sin+0xa0>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	b005      	add	sp, #20
 8009dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc4:	f000 be6c 	b.w	800aaa0 <__kernel_sin>
 8009dc8:	4822      	ldr	r0, [pc, #136]	; (8009e54 <sin+0xac>)
 8009dca:	4281      	cmp	r1, r0
 8009dcc:	dd09      	ble.n	8009de2 <sin+0x3a>
 8009dce:	ee10 0a10 	vmov	r0, s0
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	f7f6 fa1c 	bl	8000210 <__aeabi_dsub>
 8009dd8:	ec41 0b10 	vmov	d0, r0, r1
 8009ddc:	b005      	add	sp, #20
 8009dde:	f85d fb04 	ldr.w	pc, [sp], #4
 8009de2:	4668      	mov	r0, sp
 8009de4:	f000 f838 	bl	8009e58 <__ieee754_rem_pio2>
 8009de8:	f000 0003 	and.w	r0, r0, #3
 8009dec:	2801      	cmp	r0, #1
 8009dee:	d00c      	beq.n	8009e0a <sin+0x62>
 8009df0:	2802      	cmp	r0, #2
 8009df2:	d011      	beq.n	8009e18 <sin+0x70>
 8009df4:	b9f0      	cbnz	r0, 8009e34 <sin+0x8c>
 8009df6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dfa:	ed9d 0b00 	vldr	d0, [sp]
 8009dfe:	2001      	movs	r0, #1
 8009e00:	f000 fe4e 	bl	800aaa0 <__kernel_sin>
 8009e04:	ec51 0b10 	vmov	r0, r1, d0
 8009e08:	e7e6      	b.n	8009dd8 <sin+0x30>
 8009e0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e0e:	ed9d 0b00 	vldr	d0, [sp]
 8009e12:	f000 fa2d 	bl	800a270 <__kernel_cos>
 8009e16:	e7f5      	b.n	8009e04 <sin+0x5c>
 8009e18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e1c:	ed9d 0b00 	vldr	d0, [sp]
 8009e20:	2001      	movs	r0, #1
 8009e22:	f000 fe3d 	bl	800aaa0 <__kernel_sin>
 8009e26:	ec53 2b10 	vmov	r2, r3, d0
 8009e2a:	ee10 0a10 	vmov	r0, s0
 8009e2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e32:	e7d1      	b.n	8009dd8 <sin+0x30>
 8009e34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e38:	ed9d 0b00 	vldr	d0, [sp]
 8009e3c:	f000 fa18 	bl	800a270 <__kernel_cos>
 8009e40:	e7f1      	b.n	8009e26 <sin+0x7e>
 8009e42:	bf00      	nop
 8009e44:	f3af 8000 	nop.w
	...
 8009e50:	3fe921fb 	.word	0x3fe921fb
 8009e54:	7fefffff 	.word	0x7fefffff

08009e58 <__ieee754_rem_pio2>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	ed2d 8b02 	vpush	{d8}
 8009e60:	ec55 4b10 	vmov	r4, r5, d0
 8009e64:	4bca      	ldr	r3, [pc, #808]	; (800a190 <__ieee754_rem_pio2+0x338>)
 8009e66:	b08b      	sub	sp, #44	; 0x2c
 8009e68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009e6c:	4598      	cmp	r8, r3
 8009e6e:	4682      	mov	sl, r0
 8009e70:	9502      	str	r5, [sp, #8]
 8009e72:	dc08      	bgt.n	8009e86 <__ieee754_rem_pio2+0x2e>
 8009e74:	2200      	movs	r2, #0
 8009e76:	2300      	movs	r3, #0
 8009e78:	ed80 0b00 	vstr	d0, [r0]
 8009e7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e80:	f04f 0b00 	mov.w	fp, #0
 8009e84:	e028      	b.n	8009ed8 <__ieee754_rem_pio2+0x80>
 8009e86:	4bc3      	ldr	r3, [pc, #780]	; (800a194 <__ieee754_rem_pio2+0x33c>)
 8009e88:	4598      	cmp	r8, r3
 8009e8a:	dc78      	bgt.n	8009f7e <__ieee754_rem_pio2+0x126>
 8009e8c:	9b02      	ldr	r3, [sp, #8]
 8009e8e:	4ec2      	ldr	r6, [pc, #776]	; (800a198 <__ieee754_rem_pio2+0x340>)
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	ee10 0a10 	vmov	r0, s0
 8009e96:	a3b0      	add	r3, pc, #704	; (adr r3, 800a158 <__ieee754_rem_pio2+0x300>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	dd39      	ble.n	8009f14 <__ieee754_rem_pio2+0xbc>
 8009ea0:	f7f6 f9b6 	bl	8000210 <__aeabi_dsub>
 8009ea4:	45b0      	cmp	r8, r6
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	d01b      	beq.n	8009ee4 <__ieee754_rem_pio2+0x8c>
 8009eac:	a3ac      	add	r3, pc, #688	; (adr r3, 800a160 <__ieee754_rem_pio2+0x308>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f7f6 f9ad 	bl	8000210 <__aeabi_dsub>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	e9ca 2300 	strd	r2, r3, [sl]
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	f7f6 f9a5 	bl	8000210 <__aeabi_dsub>
 8009ec6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a160 <__ieee754_rem_pio2+0x308>)
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f7f6 f9a0 	bl	8000210 <__aeabi_dsub>
 8009ed0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ed4:	f04f 0b01 	mov.w	fp, #1
 8009ed8:	4658      	mov	r0, fp
 8009eda:	b00b      	add	sp, #44	; 0x2c
 8009edc:	ecbd 8b02 	vpop	{d8}
 8009ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a168 <__ieee754_rem_pio2+0x310>)
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	f7f6 f991 	bl	8000210 <__aeabi_dsub>
 8009eee:	a3a0      	add	r3, pc, #640	; (adr r3, 800a170 <__ieee754_rem_pio2+0x318>)
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	f7f6 f98a 	bl	8000210 <__aeabi_dsub>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	e9ca 2300 	strd	r2, r3, [sl]
 8009f04:	4620      	mov	r0, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	f7f6 f982 	bl	8000210 <__aeabi_dsub>
 8009f0c:	a398      	add	r3, pc, #608	; (adr r3, 800a170 <__ieee754_rem_pio2+0x318>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	e7db      	b.n	8009ecc <__ieee754_rem_pio2+0x74>
 8009f14:	f7f6 f97e 	bl	8000214 <__adddf3>
 8009f18:	45b0      	cmp	r8, r6
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	d016      	beq.n	8009f4e <__ieee754_rem_pio2+0xf6>
 8009f20:	a38f      	add	r3, pc, #572	; (adr r3, 800a160 <__ieee754_rem_pio2+0x308>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f7f6 f975 	bl	8000214 <__adddf3>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	e9ca 2300 	strd	r2, r3, [sl]
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 f96b 	bl	8000210 <__aeabi_dsub>
 8009f3a:	a389      	add	r3, pc, #548	; (adr r3, 800a160 <__ieee754_rem_pio2+0x308>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f7f6 f968 	bl	8000214 <__adddf3>
 8009f44:	f04f 3bff 	mov.w	fp, #4294967295
 8009f48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f4c:	e7c4      	b.n	8009ed8 <__ieee754_rem_pio2+0x80>
 8009f4e:	a386      	add	r3, pc, #536	; (adr r3, 800a168 <__ieee754_rem_pio2+0x310>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	f7f6 f95e 	bl	8000214 <__adddf3>
 8009f58:	a385      	add	r3, pc, #532	; (adr r3, 800a170 <__ieee754_rem_pio2+0x318>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	4604      	mov	r4, r0
 8009f60:	460d      	mov	r5, r1
 8009f62:	f7f6 f957 	bl	8000214 <__adddf3>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	e9ca 2300 	strd	r2, r3, [sl]
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	f7f6 f94d 	bl	8000210 <__aeabi_dsub>
 8009f76:	a37e      	add	r3, pc, #504	; (adr r3, 800a170 <__ieee754_rem_pio2+0x318>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	e7e0      	b.n	8009f40 <__ieee754_rem_pio2+0xe8>
 8009f7e:	4b87      	ldr	r3, [pc, #540]	; (800a19c <__ieee754_rem_pio2+0x344>)
 8009f80:	4598      	cmp	r8, r3
 8009f82:	f300 80d9 	bgt.w	800a138 <__ieee754_rem_pio2+0x2e0>
 8009f86:	f000 fe49 	bl	800ac1c <fabs>
 8009f8a:	ec55 4b10 	vmov	r4, r5, d0
 8009f8e:	ee10 0a10 	vmov	r0, s0
 8009f92:	a379      	add	r3, pc, #484	; (adr r3, 800a178 <__ieee754_rem_pio2+0x320>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 faf1 	bl	8000580 <__aeabi_dmul>
 8009f9e:	4b80      	ldr	r3, [pc, #512]	; (800a1a0 <__ieee754_rem_pio2+0x348>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f7f6 f937 	bl	8000214 <__adddf3>
 8009fa6:	f7f6 fd85 	bl	8000ab4 <__aeabi_d2iz>
 8009faa:	4683      	mov	fp, r0
 8009fac:	f7f6 fa7e 	bl	80004ac <__aeabi_i2d>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	ec43 2b18 	vmov	d8, r2, r3
 8009fb8:	a367      	add	r3, pc, #412	; (adr r3, 800a158 <__ieee754_rem_pio2+0x300>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 fadf 	bl	8000580 <__aeabi_dmul>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 f921 	bl	8000210 <__aeabi_dsub>
 8009fce:	a364      	add	r3, pc, #400	; (adr r3, 800a160 <__ieee754_rem_pio2+0x308>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	ec51 0b18 	vmov	r0, r1, d8
 8009fdc:	f7f6 fad0 	bl	8000580 <__aeabi_dmul>
 8009fe0:	f1bb 0f1f 	cmp.w	fp, #31
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	460d      	mov	r5, r1
 8009fe8:	dc0d      	bgt.n	800a006 <__ieee754_rem_pio2+0x1ae>
 8009fea:	4b6e      	ldr	r3, [pc, #440]	; (800a1a4 <__ieee754_rem_pio2+0x34c>)
 8009fec:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	4543      	cmp	r3, r8
 8009ff6:	d006      	beq.n	800a006 <__ieee754_rem_pio2+0x1ae>
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	462b      	mov	r3, r5
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	4639      	mov	r1, r7
 800a000:	f7f6 f906 	bl	8000210 <__aeabi_dsub>
 800a004:	e00f      	b.n	800a026 <__ieee754_rem_pio2+0x1ce>
 800a006:	462b      	mov	r3, r5
 800a008:	4622      	mov	r2, r4
 800a00a:	4630      	mov	r0, r6
 800a00c:	4639      	mov	r1, r7
 800a00e:	f7f6 f8ff 	bl	8000210 <__aeabi_dsub>
 800a012:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a016:	9303      	str	r3, [sp, #12]
 800a018:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a01c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a020:	f1b8 0f10 	cmp.w	r8, #16
 800a024:	dc02      	bgt.n	800a02c <__ieee754_rem_pio2+0x1d4>
 800a026:	e9ca 0100 	strd	r0, r1, [sl]
 800a02a:	e039      	b.n	800a0a0 <__ieee754_rem_pio2+0x248>
 800a02c:	a34e      	add	r3, pc, #312	; (adr r3, 800a168 <__ieee754_rem_pio2+0x310>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	ec51 0b18 	vmov	r0, r1, d8
 800a036:	f7f6 faa3 	bl	8000580 <__aeabi_dmul>
 800a03a:	4604      	mov	r4, r0
 800a03c:	460d      	mov	r5, r1
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4630      	mov	r0, r6
 800a044:	4639      	mov	r1, r7
 800a046:	f7f6 f8e3 	bl	8000210 <__aeabi_dsub>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4680      	mov	r8, r0
 800a050:	4689      	mov	r9, r1
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 f8db 	bl	8000210 <__aeabi_dsub>
 800a05a:	4622      	mov	r2, r4
 800a05c:	462b      	mov	r3, r5
 800a05e:	f7f6 f8d7 	bl	8000210 <__aeabi_dsub>
 800a062:	a343      	add	r3, pc, #268	; (adr r3, 800a170 <__ieee754_rem_pio2+0x318>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	ec51 0b18 	vmov	r0, r1, d8
 800a070:	f7f6 fa86 	bl	8000580 <__aeabi_dmul>
 800a074:	4622      	mov	r2, r4
 800a076:	462b      	mov	r3, r5
 800a078:	f7f6 f8ca 	bl	8000210 <__aeabi_dsub>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4604      	mov	r4, r0
 800a082:	460d      	mov	r5, r1
 800a084:	4640      	mov	r0, r8
 800a086:	4649      	mov	r1, r9
 800a088:	f7f6 f8c2 	bl	8000210 <__aeabi_dsub>
 800a08c:	9a03      	ldr	r2, [sp, #12]
 800a08e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b31      	cmp	r3, #49	; 0x31
 800a096:	dc24      	bgt.n	800a0e2 <__ieee754_rem_pio2+0x28a>
 800a098:	e9ca 0100 	strd	r0, r1, [sl]
 800a09c:	4646      	mov	r6, r8
 800a09e:	464f      	mov	r7, r9
 800a0a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4642      	mov	r2, r8
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f7f6 f8b0 	bl	8000210 <__aeabi_dsub>
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	f7f6 f8ac 	bl	8000210 <__aeabi_dsub>
 800a0b8:	9b02      	ldr	r3, [sp, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0c0:	f6bf af0a 	bge.w	8009ed8 <__ieee754_rem_pio2+0x80>
 800a0c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a0cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0d0:	f8ca 8000 	str.w	r8, [sl]
 800a0d4:	f8ca 0008 	str.w	r0, [sl, #8]
 800a0d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a0dc:	f1cb 0b00 	rsb	fp, fp, #0
 800a0e0:	e6fa      	b.n	8009ed8 <__ieee754_rem_pio2+0x80>
 800a0e2:	a327      	add	r3, pc, #156	; (adr r3, 800a180 <__ieee754_rem_pio2+0x328>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	ec51 0b18 	vmov	r0, r1, d8
 800a0ec:	f7f6 fa48 	bl	8000580 <__aeabi_dmul>
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	460d      	mov	r5, r1
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	f7f6 f888 	bl	8000210 <__aeabi_dsub>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4606      	mov	r6, r0
 800a106:	460f      	mov	r7, r1
 800a108:	4640      	mov	r0, r8
 800a10a:	4649      	mov	r1, r9
 800a10c:	f7f6 f880 	bl	8000210 <__aeabi_dsub>
 800a110:	4622      	mov	r2, r4
 800a112:	462b      	mov	r3, r5
 800a114:	f7f6 f87c 	bl	8000210 <__aeabi_dsub>
 800a118:	a31b      	add	r3, pc, #108	; (adr r3, 800a188 <__ieee754_rem_pio2+0x330>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	4604      	mov	r4, r0
 800a120:	460d      	mov	r5, r1
 800a122:	ec51 0b18 	vmov	r0, r1, d8
 800a126:	f7f6 fa2b 	bl	8000580 <__aeabi_dmul>
 800a12a:	4622      	mov	r2, r4
 800a12c:	462b      	mov	r3, r5
 800a12e:	f7f6 f86f 	bl	8000210 <__aeabi_dsub>
 800a132:	4604      	mov	r4, r0
 800a134:	460d      	mov	r5, r1
 800a136:	e75f      	b.n	8009ff8 <__ieee754_rem_pio2+0x1a0>
 800a138:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <__ieee754_rem_pio2+0x350>)
 800a13a:	4598      	cmp	r8, r3
 800a13c:	dd36      	ble.n	800a1ac <__ieee754_rem_pio2+0x354>
 800a13e:	ee10 2a10 	vmov	r2, s0
 800a142:	462b      	mov	r3, r5
 800a144:	4620      	mov	r0, r4
 800a146:	4629      	mov	r1, r5
 800a148:	f7f6 f862 	bl	8000210 <__aeabi_dsub>
 800a14c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a150:	e9ca 0100 	strd	r0, r1, [sl]
 800a154:	e694      	b.n	8009e80 <__ieee754_rem_pio2+0x28>
 800a156:	bf00      	nop
 800a158:	54400000 	.word	0x54400000
 800a15c:	3ff921fb 	.word	0x3ff921fb
 800a160:	1a626331 	.word	0x1a626331
 800a164:	3dd0b461 	.word	0x3dd0b461
 800a168:	1a600000 	.word	0x1a600000
 800a16c:	3dd0b461 	.word	0x3dd0b461
 800a170:	2e037073 	.word	0x2e037073
 800a174:	3ba3198a 	.word	0x3ba3198a
 800a178:	6dc9c883 	.word	0x6dc9c883
 800a17c:	3fe45f30 	.word	0x3fe45f30
 800a180:	2e000000 	.word	0x2e000000
 800a184:	3ba3198a 	.word	0x3ba3198a
 800a188:	252049c1 	.word	0x252049c1
 800a18c:	397b839a 	.word	0x397b839a
 800a190:	3fe921fb 	.word	0x3fe921fb
 800a194:	4002d97b 	.word	0x4002d97b
 800a198:	3ff921fb 	.word	0x3ff921fb
 800a19c:	413921fb 	.word	0x413921fb
 800a1a0:	3fe00000 	.word	0x3fe00000
 800a1a4:	0800aeb0 	.word	0x0800aeb0
 800a1a8:	7fefffff 	.word	0x7fefffff
 800a1ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a1b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a1b4:	ee10 0a10 	vmov	r0, s0
 800a1b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a1bc:	ee10 6a10 	vmov	r6, s0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	f7f6 fc77 	bl	8000ab4 <__aeabi_d2iz>
 800a1c6:	f7f6 f971 	bl	80004ac <__aeabi_i2d>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1d6:	f7f6 f81b 	bl	8000210 <__aeabi_dsub>
 800a1da:	4b23      	ldr	r3, [pc, #140]	; (800a268 <__ieee754_rem_pio2+0x410>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f7f6 f9cf 	bl	8000580 <__aeabi_dmul>
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	f7f6 fc65 	bl	8000ab4 <__aeabi_d2iz>
 800a1ea:	f7f6 f95f 	bl	80004ac <__aeabi_i2d>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1fa:	f7f6 f809 	bl	8000210 <__aeabi_dsub>
 800a1fe:	4b1a      	ldr	r3, [pc, #104]	; (800a268 <__ieee754_rem_pio2+0x410>)
 800a200:	2200      	movs	r2, #0
 800a202:	f7f6 f9bd 	bl	8000580 <__aeabi_dmul>
 800a206:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a20a:	ad04      	add	r5, sp, #16
 800a20c:	f04f 0803 	mov.w	r8, #3
 800a210:	46a9      	mov	r9, r5
 800a212:	2600      	movs	r6, #0
 800a214:	2700      	movs	r7, #0
 800a216:	4632      	mov	r2, r6
 800a218:	463b      	mov	r3, r7
 800a21a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a21e:	46c3      	mov	fp, r8
 800a220:	3d08      	subs	r5, #8
 800a222:	f108 38ff 	add.w	r8, r8, #4294967295
 800a226:	f7f6 fc13 	bl	8000a50 <__aeabi_dcmpeq>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d1f3      	bne.n	800a216 <__ieee754_rem_pio2+0x3be>
 800a22e:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <__ieee754_rem_pio2+0x414>)
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	2302      	movs	r3, #2
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	4622      	mov	r2, r4
 800a238:	465b      	mov	r3, fp
 800a23a:	4651      	mov	r1, sl
 800a23c:	4648      	mov	r0, r9
 800a23e:	f000 f8df 	bl	800a400 <__kernel_rem_pio2>
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	4683      	mov	fp, r0
 800a248:	f6bf ae46 	bge.w	8009ed8 <__ieee754_rem_pio2+0x80>
 800a24c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a254:	e9ca 2300 	strd	r2, r3, [sl]
 800a258:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a260:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a264:	e73a      	b.n	800a0dc <__ieee754_rem_pio2+0x284>
 800a266:	bf00      	nop
 800a268:	41700000 	.word	0x41700000
 800a26c:	0800af30 	.word	0x0800af30

0800a270 <__kernel_cos>:
 800a270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	ec57 6b10 	vmov	r6, r7, d0
 800a278:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a27c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a280:	ed8d 1b00 	vstr	d1, [sp]
 800a284:	da07      	bge.n	800a296 <__kernel_cos+0x26>
 800a286:	ee10 0a10 	vmov	r0, s0
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 fc12 	bl	8000ab4 <__aeabi_d2iz>
 800a290:	2800      	cmp	r0, #0
 800a292:	f000 8088 	beq.w	800a3a6 <__kernel_cos+0x136>
 800a296:	4632      	mov	r2, r6
 800a298:	463b      	mov	r3, r7
 800a29a:	4630      	mov	r0, r6
 800a29c:	4639      	mov	r1, r7
 800a29e:	f7f6 f96f 	bl	8000580 <__aeabi_dmul>
 800a2a2:	4b51      	ldr	r3, [pc, #324]	; (800a3e8 <__kernel_cos+0x178>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	460d      	mov	r5, r1
 800a2aa:	f7f6 f969 	bl	8000580 <__aeabi_dmul>
 800a2ae:	a340      	add	r3, pc, #256	; (adr r3, 800a3b0 <__kernel_cos+0x140>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	468b      	mov	fp, r1
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	f7f6 f960 	bl	8000580 <__aeabi_dmul>
 800a2c0:	a33d      	add	r3, pc, #244	; (adr r3, 800a3b8 <__kernel_cos+0x148>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f7f5 ffa5 	bl	8000214 <__adddf3>
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	f7f6 f957 	bl	8000580 <__aeabi_dmul>
 800a2d2:	a33b      	add	r3, pc, #236	; (adr r3, 800a3c0 <__kernel_cos+0x150>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f7f5 ff9a 	bl	8000210 <__aeabi_dsub>
 800a2dc:	4622      	mov	r2, r4
 800a2de:	462b      	mov	r3, r5
 800a2e0:	f7f6 f94e 	bl	8000580 <__aeabi_dmul>
 800a2e4:	a338      	add	r3, pc, #224	; (adr r3, 800a3c8 <__kernel_cos+0x158>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f7f5 ff93 	bl	8000214 <__adddf3>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	f7f6 f945 	bl	8000580 <__aeabi_dmul>
 800a2f6:	a336      	add	r3, pc, #216	; (adr r3, 800a3d0 <__kernel_cos+0x160>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f5 ff88 	bl	8000210 <__aeabi_dsub>
 800a300:	4622      	mov	r2, r4
 800a302:	462b      	mov	r3, r5
 800a304:	f7f6 f93c 	bl	8000580 <__aeabi_dmul>
 800a308:	a333      	add	r3, pc, #204	; (adr r3, 800a3d8 <__kernel_cos+0x168>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f7f5 ff81 	bl	8000214 <__adddf3>
 800a312:	4622      	mov	r2, r4
 800a314:	462b      	mov	r3, r5
 800a316:	f7f6 f933 	bl	8000580 <__aeabi_dmul>
 800a31a:	4622      	mov	r2, r4
 800a31c:	462b      	mov	r3, r5
 800a31e:	f7f6 f92f 	bl	8000580 <__aeabi_dmul>
 800a322:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a326:	4604      	mov	r4, r0
 800a328:	460d      	mov	r5, r1
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f6 f927 	bl	8000580 <__aeabi_dmul>
 800a332:	460b      	mov	r3, r1
 800a334:	4602      	mov	r2, r0
 800a336:	4629      	mov	r1, r5
 800a338:	4620      	mov	r0, r4
 800a33a:	f7f5 ff69 	bl	8000210 <__aeabi_dsub>
 800a33e:	4b2b      	ldr	r3, [pc, #172]	; (800a3ec <__kernel_cos+0x17c>)
 800a340:	4598      	cmp	r8, r3
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	dc10      	bgt.n	800a36a <__kernel_cos+0xfa>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4650      	mov	r0, sl
 800a34e:	4659      	mov	r1, fp
 800a350:	f7f5 ff5e 	bl	8000210 <__aeabi_dsub>
 800a354:	460b      	mov	r3, r1
 800a356:	4926      	ldr	r1, [pc, #152]	; (800a3f0 <__kernel_cos+0x180>)
 800a358:	4602      	mov	r2, r0
 800a35a:	2000      	movs	r0, #0
 800a35c:	f7f5 ff58 	bl	8000210 <__aeabi_dsub>
 800a360:	ec41 0b10 	vmov	d0, r0, r1
 800a364:	b003      	add	sp, #12
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36a:	4b22      	ldr	r3, [pc, #136]	; (800a3f4 <__kernel_cos+0x184>)
 800a36c:	4920      	ldr	r1, [pc, #128]	; (800a3f0 <__kernel_cos+0x180>)
 800a36e:	4598      	cmp	r8, r3
 800a370:	bfcc      	ite	gt
 800a372:	4d21      	ldrgt	r5, [pc, #132]	; (800a3f8 <__kernel_cos+0x188>)
 800a374:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a378:	2400      	movs	r4, #0
 800a37a:	4622      	mov	r2, r4
 800a37c:	462b      	mov	r3, r5
 800a37e:	2000      	movs	r0, #0
 800a380:	f7f5 ff46 	bl	8000210 <__aeabi_dsub>
 800a384:	4622      	mov	r2, r4
 800a386:	4680      	mov	r8, r0
 800a388:	4689      	mov	r9, r1
 800a38a:	462b      	mov	r3, r5
 800a38c:	4650      	mov	r0, sl
 800a38e:	4659      	mov	r1, fp
 800a390:	f7f5 ff3e 	bl	8000210 <__aeabi_dsub>
 800a394:	4632      	mov	r2, r6
 800a396:	463b      	mov	r3, r7
 800a398:	f7f5 ff3a 	bl	8000210 <__aeabi_dsub>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	e7da      	b.n	800a35c <__kernel_cos+0xec>
 800a3a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a3e0 <__kernel_cos+0x170>
 800a3aa:	e7db      	b.n	800a364 <__kernel_cos+0xf4>
 800a3ac:	f3af 8000 	nop.w
 800a3b0:	be8838d4 	.word	0xbe8838d4
 800a3b4:	bda8fae9 	.word	0xbda8fae9
 800a3b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a3bc:	3e21ee9e 	.word	0x3e21ee9e
 800a3c0:	809c52ad 	.word	0x809c52ad
 800a3c4:	3e927e4f 	.word	0x3e927e4f
 800a3c8:	19cb1590 	.word	0x19cb1590
 800a3cc:	3efa01a0 	.word	0x3efa01a0
 800a3d0:	16c15177 	.word	0x16c15177
 800a3d4:	3f56c16c 	.word	0x3f56c16c
 800a3d8:	5555554c 	.word	0x5555554c
 800a3dc:	3fa55555 	.word	0x3fa55555
 800a3e0:	00000000 	.word	0x00000000
 800a3e4:	3ff00000 	.word	0x3ff00000
 800a3e8:	3fe00000 	.word	0x3fe00000
 800a3ec:	3fd33332 	.word	0x3fd33332
 800a3f0:	3ff00000 	.word	0x3ff00000
 800a3f4:	3fe90000 	.word	0x3fe90000
 800a3f8:	3fd20000 	.word	0x3fd20000
 800a3fc:	00000000 	.word	0x00000000

0800a400 <__kernel_rem_pio2>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ed2d 8b02 	vpush	{d8}
 800a408:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a40c:	f112 0f14 	cmn.w	r2, #20
 800a410:	9308      	str	r3, [sp, #32]
 800a412:	9101      	str	r1, [sp, #4]
 800a414:	4bc4      	ldr	r3, [pc, #784]	; (800a728 <__kernel_rem_pio2+0x328>)
 800a416:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a418:	900b      	str	r0, [sp, #44]	; 0x2c
 800a41a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	9b08      	ldr	r3, [sp, #32]
 800a422:	f103 33ff 	add.w	r3, r3, #4294967295
 800a426:	bfa8      	it	ge
 800a428:	1ed4      	subge	r4, r2, #3
 800a42a:	9306      	str	r3, [sp, #24]
 800a42c:	bfb2      	itee	lt
 800a42e:	2400      	movlt	r4, #0
 800a430:	2318      	movge	r3, #24
 800a432:	fb94 f4f3 	sdivge	r4, r4, r3
 800a436:	f06f 0317 	mvn.w	r3, #23
 800a43a:	fb04 3303 	mla	r3, r4, r3, r3
 800a43e:	eb03 0a02 	add.w	sl, r3, r2
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	9a06      	ldr	r2, [sp, #24]
 800a446:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a718 <__kernel_rem_pio2+0x318>
 800a44a:	eb03 0802 	add.w	r8, r3, r2
 800a44e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a450:	1aa7      	subs	r7, r4, r2
 800a452:	ae22      	add	r6, sp, #136	; 0x88
 800a454:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a458:	2500      	movs	r5, #0
 800a45a:	4545      	cmp	r5, r8
 800a45c:	dd13      	ble.n	800a486 <__kernel_rem_pio2+0x86>
 800a45e:	9b08      	ldr	r3, [sp, #32]
 800a460:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a718 <__kernel_rem_pio2+0x318>
 800a464:	aa22      	add	r2, sp, #136	; 0x88
 800a466:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a46a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a46e:	f04f 0800 	mov.w	r8, #0
 800a472:	9b02      	ldr	r3, [sp, #8]
 800a474:	4598      	cmp	r8, r3
 800a476:	dc2f      	bgt.n	800a4d8 <__kernel_rem_pio2+0xd8>
 800a478:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a47c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a480:	462f      	mov	r7, r5
 800a482:	2600      	movs	r6, #0
 800a484:	e01b      	b.n	800a4be <__kernel_rem_pio2+0xbe>
 800a486:	42ef      	cmn	r7, r5
 800a488:	d407      	bmi.n	800a49a <__kernel_rem_pio2+0x9a>
 800a48a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a48e:	f7f6 f80d 	bl	80004ac <__aeabi_i2d>
 800a492:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a496:	3501      	adds	r5, #1
 800a498:	e7df      	b.n	800a45a <__kernel_rem_pio2+0x5a>
 800a49a:	ec51 0b18 	vmov	r0, r1, d8
 800a49e:	e7f8      	b.n	800a492 <__kernel_rem_pio2+0x92>
 800a4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a4a8:	f7f6 f86a 	bl	8000580 <__aeabi_dmul>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b4:	f7f5 feae 	bl	8000214 <__adddf3>
 800a4b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4bc:	3601      	adds	r6, #1
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	429e      	cmp	r6, r3
 800a4c2:	f1a7 0708 	sub.w	r7, r7, #8
 800a4c6:	ddeb      	ble.n	800a4a0 <__kernel_rem_pio2+0xa0>
 800a4c8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a4cc:	f108 0801 	add.w	r8, r8, #1
 800a4d0:	ecab 7b02 	vstmia	fp!, {d7}
 800a4d4:	3508      	adds	r5, #8
 800a4d6:	e7cc      	b.n	800a472 <__kernel_rem_pio2+0x72>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	aa0e      	add	r2, sp, #56	; 0x38
 800a4dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4e0:	930d      	str	r3, [sp, #52]	; 0x34
 800a4e2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a4e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4e8:	9c02      	ldr	r4, [sp, #8]
 800a4ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a4ec:	00e3      	lsls	r3, r4, #3
 800a4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a4f0:	ab9a      	add	r3, sp, #616	; 0x268
 800a4f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4f6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a4fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a4fe:	ab72      	add	r3, sp, #456	; 0x1c8
 800a500:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a504:	46c3      	mov	fp, r8
 800a506:	46a1      	mov	r9, r4
 800a508:	f1b9 0f00 	cmp.w	r9, #0
 800a50c:	f1a5 0508 	sub.w	r5, r5, #8
 800a510:	dc77      	bgt.n	800a602 <__kernel_rem_pio2+0x202>
 800a512:	ec47 6b10 	vmov	d0, r6, r7
 800a516:	4650      	mov	r0, sl
 800a518:	f000 fc0a 	bl	800ad30 <scalbn>
 800a51c:	ec57 6b10 	vmov	r6, r7, d0
 800a520:	2200      	movs	r2, #0
 800a522:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a526:	ee10 0a10 	vmov	r0, s0
 800a52a:	4639      	mov	r1, r7
 800a52c:	f7f6 f828 	bl	8000580 <__aeabi_dmul>
 800a530:	ec41 0b10 	vmov	d0, r0, r1
 800a534:	f000 fb7c 	bl	800ac30 <floor>
 800a538:	4b7c      	ldr	r3, [pc, #496]	; (800a72c <__kernel_rem_pio2+0x32c>)
 800a53a:	ec51 0b10 	vmov	r0, r1, d0
 800a53e:	2200      	movs	r2, #0
 800a540:	f7f6 f81e 	bl	8000580 <__aeabi_dmul>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	f7f5 fe60 	bl	8000210 <__aeabi_dsub>
 800a550:	460f      	mov	r7, r1
 800a552:	4606      	mov	r6, r0
 800a554:	f7f6 faae 	bl	8000ab4 <__aeabi_d2iz>
 800a558:	9004      	str	r0, [sp, #16]
 800a55a:	f7f5 ffa7 	bl	80004ac <__aeabi_i2d>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4630      	mov	r0, r6
 800a564:	4639      	mov	r1, r7
 800a566:	f7f5 fe53 	bl	8000210 <__aeabi_dsub>
 800a56a:	f1ba 0f00 	cmp.w	sl, #0
 800a56e:	4606      	mov	r6, r0
 800a570:	460f      	mov	r7, r1
 800a572:	dd6d      	ble.n	800a650 <__kernel_rem_pio2+0x250>
 800a574:	1e62      	subs	r2, r4, #1
 800a576:	ab0e      	add	r3, sp, #56	; 0x38
 800a578:	9d04      	ldr	r5, [sp, #16]
 800a57a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a57e:	f1ca 0118 	rsb	r1, sl, #24
 800a582:	fa40 f301 	asr.w	r3, r0, r1
 800a586:	441d      	add	r5, r3
 800a588:	408b      	lsls	r3, r1
 800a58a:	1ac0      	subs	r0, r0, r3
 800a58c:	ab0e      	add	r3, sp, #56	; 0x38
 800a58e:	9504      	str	r5, [sp, #16]
 800a590:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a594:	f1ca 0317 	rsb	r3, sl, #23
 800a598:	fa40 fb03 	asr.w	fp, r0, r3
 800a59c:	f1bb 0f00 	cmp.w	fp, #0
 800a5a0:	dd65      	ble.n	800a66e <__kernel_rem_pio2+0x26e>
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	4615      	mov	r5, r2
 800a5ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a5b0:	4294      	cmp	r4, r2
 800a5b2:	f300 809c 	bgt.w	800a6ee <__kernel_rem_pio2+0x2ee>
 800a5b6:	f1ba 0f00 	cmp.w	sl, #0
 800a5ba:	dd07      	ble.n	800a5cc <__kernel_rem_pio2+0x1cc>
 800a5bc:	f1ba 0f01 	cmp.w	sl, #1
 800a5c0:	f000 80c0 	beq.w	800a744 <__kernel_rem_pio2+0x344>
 800a5c4:	f1ba 0f02 	cmp.w	sl, #2
 800a5c8:	f000 80c6 	beq.w	800a758 <__kernel_rem_pio2+0x358>
 800a5cc:	f1bb 0f02 	cmp.w	fp, #2
 800a5d0:	d14d      	bne.n	800a66e <__kernel_rem_pio2+0x26e>
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	463b      	mov	r3, r7
 800a5d6:	4956      	ldr	r1, [pc, #344]	; (800a730 <__kernel_rem_pio2+0x330>)
 800a5d8:	2000      	movs	r0, #0
 800a5da:	f7f5 fe19 	bl	8000210 <__aeabi_dsub>
 800a5de:	4606      	mov	r6, r0
 800a5e0:	460f      	mov	r7, r1
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	d043      	beq.n	800a66e <__kernel_rem_pio2+0x26e>
 800a5e6:	4650      	mov	r0, sl
 800a5e8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a720 <__kernel_rem_pio2+0x320>
 800a5ec:	f000 fba0 	bl	800ad30 <scalbn>
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	ec53 2b10 	vmov	r2, r3, d0
 800a5f8:	f7f5 fe0a 	bl	8000210 <__aeabi_dsub>
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	460f      	mov	r7, r1
 800a600:	e035      	b.n	800a66e <__kernel_rem_pio2+0x26e>
 800a602:	4b4c      	ldr	r3, [pc, #304]	; (800a734 <__kernel_rem_pio2+0x334>)
 800a604:	2200      	movs	r2, #0
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	f7f5 ffb9 	bl	8000580 <__aeabi_dmul>
 800a60e:	f7f6 fa51 	bl	8000ab4 <__aeabi_d2iz>
 800a612:	f7f5 ff4b 	bl	80004ac <__aeabi_i2d>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	ec43 2b18 	vmov	d8, r2, r3
 800a61e:	4b46      	ldr	r3, [pc, #280]	; (800a738 <__kernel_rem_pio2+0x338>)
 800a620:	2200      	movs	r2, #0
 800a622:	f7f5 ffad 	bl	8000580 <__aeabi_dmul>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4630      	mov	r0, r6
 800a62c:	4639      	mov	r1, r7
 800a62e:	f7f5 fdef 	bl	8000210 <__aeabi_dsub>
 800a632:	f7f6 fa3f 	bl	8000ab4 <__aeabi_d2iz>
 800a636:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a63a:	f84b 0b04 	str.w	r0, [fp], #4
 800a63e:	ec51 0b18 	vmov	r0, r1, d8
 800a642:	f7f5 fde7 	bl	8000214 <__adddf3>
 800a646:	f109 39ff 	add.w	r9, r9, #4294967295
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	e75b      	b.n	800a508 <__kernel_rem_pio2+0x108>
 800a650:	d106      	bne.n	800a660 <__kernel_rem_pio2+0x260>
 800a652:	1e63      	subs	r3, r4, #1
 800a654:	aa0e      	add	r2, sp, #56	; 0x38
 800a656:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a65a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a65e:	e79d      	b.n	800a59c <__kernel_rem_pio2+0x19c>
 800a660:	4b36      	ldr	r3, [pc, #216]	; (800a73c <__kernel_rem_pio2+0x33c>)
 800a662:	2200      	movs	r2, #0
 800a664:	f7f6 fa12 	bl	8000a8c <__aeabi_dcmpge>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d13d      	bne.n	800a6e8 <__kernel_rem_pio2+0x2e8>
 800a66c:	4683      	mov	fp, r0
 800a66e:	2200      	movs	r2, #0
 800a670:	2300      	movs	r3, #0
 800a672:	4630      	mov	r0, r6
 800a674:	4639      	mov	r1, r7
 800a676:	f7f6 f9eb 	bl	8000a50 <__aeabi_dcmpeq>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	f000 80c0 	beq.w	800a800 <__kernel_rem_pio2+0x400>
 800a680:	1e65      	subs	r5, r4, #1
 800a682:	462b      	mov	r3, r5
 800a684:	2200      	movs	r2, #0
 800a686:	9902      	ldr	r1, [sp, #8]
 800a688:	428b      	cmp	r3, r1
 800a68a:	da6c      	bge.n	800a766 <__kernel_rem_pio2+0x366>
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	f000 8089 	beq.w	800a7a4 <__kernel_rem_pio2+0x3a4>
 800a692:	ab0e      	add	r3, sp, #56	; 0x38
 800a694:	f1aa 0a18 	sub.w	sl, sl, #24
 800a698:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 80ad 	beq.w	800a7fc <__kernel_rem_pio2+0x3fc>
 800a6a2:	4650      	mov	r0, sl
 800a6a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a720 <__kernel_rem_pio2+0x320>
 800a6a8:	f000 fb42 	bl	800ad30 <scalbn>
 800a6ac:	ab9a      	add	r3, sp, #616	; 0x268
 800a6ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6b2:	ec57 6b10 	vmov	r6, r7, d0
 800a6b6:	00ec      	lsls	r4, r5, #3
 800a6b8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a6bc:	46aa      	mov	sl, r5
 800a6be:	f1ba 0f00 	cmp.w	sl, #0
 800a6c2:	f280 80d6 	bge.w	800a872 <__kernel_rem_pio2+0x472>
 800a6c6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a718 <__kernel_rem_pio2+0x318>
 800a6ca:	462e      	mov	r6, r5
 800a6cc:	2e00      	cmp	r6, #0
 800a6ce:	f2c0 8104 	blt.w	800a8da <__kernel_rem_pio2+0x4da>
 800a6d2:	ab72      	add	r3, sp, #456	; 0x1c8
 800a6d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a6d8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a740 <__kernel_rem_pio2+0x340>
 800a6dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a6e0:	f04f 0800 	mov.w	r8, #0
 800a6e4:	1baf      	subs	r7, r5, r6
 800a6e6:	e0ea      	b.n	800a8be <__kernel_rem_pio2+0x4be>
 800a6e8:	f04f 0b02 	mov.w	fp, #2
 800a6ec:	e759      	b.n	800a5a2 <__kernel_rem_pio2+0x1a2>
 800a6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a6f2:	b955      	cbnz	r5, 800a70a <__kernel_rem_pio2+0x30a>
 800a6f4:	b123      	cbz	r3, 800a700 <__kernel_rem_pio2+0x300>
 800a6f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a6fa:	f8c8 3000 	str.w	r3, [r8]
 800a6fe:	2301      	movs	r3, #1
 800a700:	3201      	adds	r2, #1
 800a702:	f108 0804 	add.w	r8, r8, #4
 800a706:	461d      	mov	r5, r3
 800a708:	e752      	b.n	800a5b0 <__kernel_rem_pio2+0x1b0>
 800a70a:	1acb      	subs	r3, r1, r3
 800a70c:	f8c8 3000 	str.w	r3, [r8]
 800a710:	462b      	mov	r3, r5
 800a712:	e7f5      	b.n	800a700 <__kernel_rem_pio2+0x300>
 800a714:	f3af 8000 	nop.w
	...
 800a724:	3ff00000 	.word	0x3ff00000
 800a728:	0800b078 	.word	0x0800b078
 800a72c:	40200000 	.word	0x40200000
 800a730:	3ff00000 	.word	0x3ff00000
 800a734:	3e700000 	.word	0x3e700000
 800a738:	41700000 	.word	0x41700000
 800a73c:	3fe00000 	.word	0x3fe00000
 800a740:	0800b038 	.word	0x0800b038
 800a744:	1e62      	subs	r2, r4, #1
 800a746:	ab0e      	add	r3, sp, #56	; 0x38
 800a748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a750:	a90e      	add	r1, sp, #56	; 0x38
 800a752:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a756:	e739      	b.n	800a5cc <__kernel_rem_pio2+0x1cc>
 800a758:	1e62      	subs	r2, r4, #1
 800a75a:	ab0e      	add	r3, sp, #56	; 0x38
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a764:	e7f4      	b.n	800a750 <__kernel_rem_pio2+0x350>
 800a766:	a90e      	add	r1, sp, #56	; 0x38
 800a768:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	430a      	orrs	r2, r1
 800a770:	e789      	b.n	800a686 <__kernel_rem_pio2+0x286>
 800a772:	3301      	adds	r3, #1
 800a774:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a778:	2900      	cmp	r1, #0
 800a77a:	d0fa      	beq.n	800a772 <__kernel_rem_pio2+0x372>
 800a77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a77e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a782:	446a      	add	r2, sp
 800a784:	3a98      	subs	r2, #152	; 0x98
 800a786:	920a      	str	r2, [sp, #40]	; 0x28
 800a788:	9a08      	ldr	r2, [sp, #32]
 800a78a:	18e3      	adds	r3, r4, r3
 800a78c:	18a5      	adds	r5, r4, r2
 800a78e:	aa22      	add	r2, sp, #136	; 0x88
 800a790:	f104 0801 	add.w	r8, r4, #1
 800a794:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	4543      	cmp	r3, r8
 800a79e:	da04      	bge.n	800a7aa <__kernel_rem_pio2+0x3aa>
 800a7a0:	461c      	mov	r4, r3
 800a7a2:	e6a3      	b.n	800a4ec <__kernel_rem_pio2+0xec>
 800a7a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e7e4      	b.n	800a774 <__kernel_rem_pio2+0x374>
 800a7aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a7b0:	f7f5 fe7c 	bl	80004ac <__aeabi_i2d>
 800a7b4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ba:	46ab      	mov	fp, r5
 800a7bc:	461c      	mov	r4, r3
 800a7be:	f04f 0900 	mov.w	r9, #0
 800a7c2:	2600      	movs	r6, #0
 800a7c4:	2700      	movs	r7, #0
 800a7c6:	9b06      	ldr	r3, [sp, #24]
 800a7c8:	4599      	cmp	r9, r3
 800a7ca:	dd06      	ble.n	800a7da <__kernel_rem_pio2+0x3da>
 800a7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ce:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a7d2:	f108 0801 	add.w	r8, r8, #1
 800a7d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7d8:	e7df      	b.n	800a79a <__kernel_rem_pio2+0x39a>
 800a7da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a7de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a7e2:	f7f5 fecd 	bl	8000580 <__aeabi_dmul>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	f7f5 fd11 	bl	8000214 <__adddf3>
 800a7f2:	f109 0901 	add.w	r9, r9, #1
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460f      	mov	r7, r1
 800a7fa:	e7e4      	b.n	800a7c6 <__kernel_rem_pio2+0x3c6>
 800a7fc:	3d01      	subs	r5, #1
 800a7fe:	e748      	b.n	800a692 <__kernel_rem_pio2+0x292>
 800a800:	ec47 6b10 	vmov	d0, r6, r7
 800a804:	f1ca 0000 	rsb	r0, sl, #0
 800a808:	f000 fa92 	bl	800ad30 <scalbn>
 800a80c:	ec57 6b10 	vmov	r6, r7, d0
 800a810:	4ba0      	ldr	r3, [pc, #640]	; (800aa94 <__kernel_rem_pio2+0x694>)
 800a812:	ee10 0a10 	vmov	r0, s0
 800a816:	2200      	movs	r2, #0
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f6 f937 	bl	8000a8c <__aeabi_dcmpge>
 800a81e:	b1f8      	cbz	r0, 800a860 <__kernel_rem_pio2+0x460>
 800a820:	4b9d      	ldr	r3, [pc, #628]	; (800aa98 <__kernel_rem_pio2+0x698>)
 800a822:	2200      	movs	r2, #0
 800a824:	4630      	mov	r0, r6
 800a826:	4639      	mov	r1, r7
 800a828:	f7f5 feaa 	bl	8000580 <__aeabi_dmul>
 800a82c:	f7f6 f942 	bl	8000ab4 <__aeabi_d2iz>
 800a830:	4680      	mov	r8, r0
 800a832:	f7f5 fe3b 	bl	80004ac <__aeabi_i2d>
 800a836:	4b97      	ldr	r3, [pc, #604]	; (800aa94 <__kernel_rem_pio2+0x694>)
 800a838:	2200      	movs	r2, #0
 800a83a:	f7f5 fea1 	bl	8000580 <__aeabi_dmul>
 800a83e:	460b      	mov	r3, r1
 800a840:	4602      	mov	r2, r0
 800a842:	4639      	mov	r1, r7
 800a844:	4630      	mov	r0, r6
 800a846:	f7f5 fce3 	bl	8000210 <__aeabi_dsub>
 800a84a:	f7f6 f933 	bl	8000ab4 <__aeabi_d2iz>
 800a84e:	1c65      	adds	r5, r4, #1
 800a850:	ab0e      	add	r3, sp, #56	; 0x38
 800a852:	f10a 0a18 	add.w	sl, sl, #24
 800a856:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a85a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a85e:	e720      	b.n	800a6a2 <__kernel_rem_pio2+0x2a2>
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	f7f6 f926 	bl	8000ab4 <__aeabi_d2iz>
 800a868:	ab0e      	add	r3, sp, #56	; 0x38
 800a86a:	4625      	mov	r5, r4
 800a86c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a870:	e717      	b.n	800a6a2 <__kernel_rem_pio2+0x2a2>
 800a872:	ab0e      	add	r3, sp, #56	; 0x38
 800a874:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a878:	f7f5 fe18 	bl	80004ac <__aeabi_i2d>
 800a87c:	4632      	mov	r2, r6
 800a87e:	463b      	mov	r3, r7
 800a880:	f7f5 fe7e 	bl	8000580 <__aeabi_dmul>
 800a884:	4b84      	ldr	r3, [pc, #528]	; (800aa98 <__kernel_rem_pio2+0x698>)
 800a886:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a88a:	2200      	movs	r2, #0
 800a88c:	4630      	mov	r0, r6
 800a88e:	4639      	mov	r1, r7
 800a890:	f7f5 fe76 	bl	8000580 <__aeabi_dmul>
 800a894:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a898:	4606      	mov	r6, r0
 800a89a:	460f      	mov	r7, r1
 800a89c:	e70f      	b.n	800a6be <__kernel_rem_pio2+0x2be>
 800a89e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a8a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a8a6:	f7f5 fe6b 	bl	8000580 <__aeabi_dmul>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8b2:	f7f5 fcaf 	bl	8000214 <__adddf3>
 800a8b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8ba:	f108 0801 	add.w	r8, r8, #1
 800a8be:	9b02      	ldr	r3, [sp, #8]
 800a8c0:	4598      	cmp	r8, r3
 800a8c2:	dc01      	bgt.n	800a8c8 <__kernel_rem_pio2+0x4c8>
 800a8c4:	45b8      	cmp	r8, r7
 800a8c6:	ddea      	ble.n	800a89e <__kernel_rem_pio2+0x49e>
 800a8c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a8cc:	ab4a      	add	r3, sp, #296	; 0x128
 800a8ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a8d2:	ed87 7b00 	vstr	d7, [r7]
 800a8d6:	3e01      	subs	r6, #1
 800a8d8:	e6f8      	b.n	800a6cc <__kernel_rem_pio2+0x2cc>
 800a8da:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	dc0b      	bgt.n	800a8f8 <__kernel_rem_pio2+0x4f8>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dc35      	bgt.n	800a950 <__kernel_rem_pio2+0x550>
 800a8e4:	d059      	beq.n	800a99a <__kernel_rem_pio2+0x59a>
 800a8e6:	9b04      	ldr	r3, [sp, #16]
 800a8e8:	f003 0007 	and.w	r0, r3, #7
 800a8ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a8f0:	ecbd 8b02 	vpop	{d8}
 800a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d1f3      	bne.n	800a8e6 <__kernel_rem_pio2+0x4e6>
 800a8fe:	ab4a      	add	r3, sp, #296	; 0x128
 800a900:	4423      	add	r3, r4
 800a902:	9306      	str	r3, [sp, #24]
 800a904:	461c      	mov	r4, r3
 800a906:	469a      	mov	sl, r3
 800a908:	9502      	str	r5, [sp, #8]
 800a90a:	9b02      	ldr	r3, [sp, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a912:	dc6b      	bgt.n	800a9ec <__kernel_rem_pio2+0x5ec>
 800a914:	46aa      	mov	sl, r5
 800a916:	f1ba 0f01 	cmp.w	sl, #1
 800a91a:	f1a4 0408 	sub.w	r4, r4, #8
 800a91e:	f300 8085 	bgt.w	800aa2c <__kernel_rem_pio2+0x62c>
 800a922:	9c06      	ldr	r4, [sp, #24]
 800a924:	2000      	movs	r0, #0
 800a926:	3408      	adds	r4, #8
 800a928:	2100      	movs	r1, #0
 800a92a:	2d01      	cmp	r5, #1
 800a92c:	f300 809d 	bgt.w	800aa6a <__kernel_rem_pio2+0x66a>
 800a930:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a934:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a938:	f1bb 0f00 	cmp.w	fp, #0
 800a93c:	f040 809b 	bne.w	800aa76 <__kernel_rem_pio2+0x676>
 800a940:	9b01      	ldr	r3, [sp, #4]
 800a942:	e9c3 5600 	strd	r5, r6, [r3]
 800a946:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a94a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a94e:	e7ca      	b.n	800a8e6 <__kernel_rem_pio2+0x4e6>
 800a950:	3408      	adds	r4, #8
 800a952:	ab4a      	add	r3, sp, #296	; 0x128
 800a954:	441c      	add	r4, r3
 800a956:	462e      	mov	r6, r5
 800a958:	2000      	movs	r0, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	2e00      	cmp	r6, #0
 800a95e:	da36      	bge.n	800a9ce <__kernel_rem_pio2+0x5ce>
 800a960:	f1bb 0f00 	cmp.w	fp, #0
 800a964:	d039      	beq.n	800a9da <__kernel_rem_pio2+0x5da>
 800a966:	4602      	mov	r2, r0
 800a968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a96c:	9c01      	ldr	r4, [sp, #4]
 800a96e:	e9c4 2300 	strd	r2, r3, [r4]
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a97a:	f7f5 fc49 	bl	8000210 <__aeabi_dsub>
 800a97e:	ae4c      	add	r6, sp, #304	; 0x130
 800a980:	2401      	movs	r4, #1
 800a982:	42a5      	cmp	r5, r4
 800a984:	da2c      	bge.n	800a9e0 <__kernel_rem_pio2+0x5e0>
 800a986:	f1bb 0f00 	cmp.w	fp, #0
 800a98a:	d002      	beq.n	800a992 <__kernel_rem_pio2+0x592>
 800a98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a990:	4619      	mov	r1, r3
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a998:	e7a5      	b.n	800a8e6 <__kernel_rem_pio2+0x4e6>
 800a99a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a99e:	eb0d 0403 	add.w	r4, sp, r3
 800a9a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	da09      	bge.n	800a9c2 <__kernel_rem_pio2+0x5c2>
 800a9ae:	f1bb 0f00 	cmp.w	fp, #0
 800a9b2:	d002      	beq.n	800a9ba <__kernel_rem_pio2+0x5ba>
 800a9b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	9b01      	ldr	r3, [sp, #4]
 800a9bc:	e9c3 0100 	strd	r0, r1, [r3]
 800a9c0:	e791      	b.n	800a8e6 <__kernel_rem_pio2+0x4e6>
 800a9c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a9c6:	f7f5 fc25 	bl	8000214 <__adddf3>
 800a9ca:	3d01      	subs	r5, #1
 800a9cc:	e7ed      	b.n	800a9aa <__kernel_rem_pio2+0x5aa>
 800a9ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a9d2:	f7f5 fc1f 	bl	8000214 <__adddf3>
 800a9d6:	3e01      	subs	r6, #1
 800a9d8:	e7c0      	b.n	800a95c <__kernel_rem_pio2+0x55c>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	e7c5      	b.n	800a96c <__kernel_rem_pio2+0x56c>
 800a9e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a9e4:	f7f5 fc16 	bl	8000214 <__adddf3>
 800a9e8:	3401      	adds	r4, #1
 800a9ea:	e7ca      	b.n	800a982 <__kernel_rem_pio2+0x582>
 800a9ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a9f4:	9b02      	ldr	r3, [sp, #8]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	9302      	str	r3, [sp, #8]
 800a9fa:	4632      	mov	r2, r6
 800a9fc:	463b      	mov	r3, r7
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f5 fc07 	bl	8000214 <__adddf3>
 800aa06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f5 fbfd 	bl	8000210 <__aeabi_dsub>
 800aa16:	4632      	mov	r2, r6
 800aa18:	463b      	mov	r3, r7
 800aa1a:	f7f5 fbfb 	bl	8000214 <__adddf3>
 800aa1e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800aa22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa26:	ed8a 7b00 	vstr	d7, [sl]
 800aa2a:	e76e      	b.n	800a90a <__kernel_rem_pio2+0x50a>
 800aa2c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aa30:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800aa34:	4640      	mov	r0, r8
 800aa36:	4632      	mov	r2, r6
 800aa38:	463b      	mov	r3, r7
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	f7f5 fbea 	bl	8000214 <__adddf3>
 800aa40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4640      	mov	r0, r8
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	f7f5 fbe0 	bl	8000210 <__aeabi_dsub>
 800aa50:	4632      	mov	r2, r6
 800aa52:	463b      	mov	r3, r7
 800aa54:	f7f5 fbde 	bl	8000214 <__adddf3>
 800aa58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa60:	ed84 7b00 	vstr	d7, [r4]
 800aa64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa68:	e755      	b.n	800a916 <__kernel_rem_pio2+0x516>
 800aa6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa6e:	f7f5 fbd1 	bl	8000214 <__adddf3>
 800aa72:	3d01      	subs	r5, #1
 800aa74:	e759      	b.n	800a92a <__kernel_rem_pio2+0x52a>
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	9a01      	ldr	r2, [sp, #4]
 800aa7a:	601d      	str	r5, [r3, #0]
 800aa7c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aa80:	605c      	str	r4, [r3, #4]
 800aa82:	609f      	str	r7, [r3, #8]
 800aa84:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800aa88:	60d3      	str	r3, [r2, #12]
 800aa8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa8e:	6110      	str	r0, [r2, #16]
 800aa90:	6153      	str	r3, [r2, #20]
 800aa92:	e728      	b.n	800a8e6 <__kernel_rem_pio2+0x4e6>
 800aa94:	41700000 	.word	0x41700000
 800aa98:	3e700000 	.word	0x3e700000
 800aa9c:	00000000 	.word	0x00000000

0800aaa0 <__kernel_sin>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	ed2d 8b04 	vpush	{d8-d9}
 800aaa8:	eeb0 8a41 	vmov.f32	s16, s2
 800aaac:	eef0 8a61 	vmov.f32	s17, s3
 800aab0:	ec55 4b10 	vmov	r4, r5, d0
 800aab4:	b083      	sub	sp, #12
 800aab6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aaba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aabe:	9001      	str	r0, [sp, #4]
 800aac0:	da06      	bge.n	800aad0 <__kernel_sin+0x30>
 800aac2:	ee10 0a10 	vmov	r0, s0
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 fff4 	bl	8000ab4 <__aeabi_d2iz>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d051      	beq.n	800ab74 <__kernel_sin+0xd4>
 800aad0:	4622      	mov	r2, r4
 800aad2:	462b      	mov	r3, r5
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 fd52 	bl	8000580 <__aeabi_dmul>
 800aadc:	4682      	mov	sl, r0
 800aade:	468b      	mov	fp, r1
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4620      	mov	r0, r4
 800aae6:	4629      	mov	r1, r5
 800aae8:	f7f5 fd4a 	bl	8000580 <__aeabi_dmul>
 800aaec:	a341      	add	r3, pc, #260	; (adr r3, 800abf4 <__kernel_sin+0x154>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	4689      	mov	r9, r1
 800aaf6:	4650      	mov	r0, sl
 800aaf8:	4659      	mov	r1, fp
 800aafa:	f7f5 fd41 	bl	8000580 <__aeabi_dmul>
 800aafe:	a33f      	add	r3, pc, #252	; (adr r3, 800abfc <__kernel_sin+0x15c>)
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f7f5 fb84 	bl	8000210 <__aeabi_dsub>
 800ab08:	4652      	mov	r2, sl
 800ab0a:	465b      	mov	r3, fp
 800ab0c:	f7f5 fd38 	bl	8000580 <__aeabi_dmul>
 800ab10:	a33c      	add	r3, pc, #240	; (adr r3, 800ac04 <__kernel_sin+0x164>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fb7d 	bl	8000214 <__adddf3>
 800ab1a:	4652      	mov	r2, sl
 800ab1c:	465b      	mov	r3, fp
 800ab1e:	f7f5 fd2f 	bl	8000580 <__aeabi_dmul>
 800ab22:	a33a      	add	r3, pc, #232	; (adr r3, 800ac0c <__kernel_sin+0x16c>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 fb72 	bl	8000210 <__aeabi_dsub>
 800ab2c:	4652      	mov	r2, sl
 800ab2e:	465b      	mov	r3, fp
 800ab30:	f7f5 fd26 	bl	8000580 <__aeabi_dmul>
 800ab34:	a337      	add	r3, pc, #220	; (adr r3, 800ac14 <__kernel_sin+0x174>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fb6b 	bl	8000214 <__adddf3>
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	4606      	mov	r6, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	b9eb      	cbnz	r3, 800ab82 <__kernel_sin+0xe2>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4650      	mov	r0, sl
 800ab4c:	4659      	mov	r1, fp
 800ab4e:	f7f5 fd17 	bl	8000580 <__aeabi_dmul>
 800ab52:	a325      	add	r3, pc, #148	; (adr r3, 800abe8 <__kernel_sin+0x148>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	f7f5 fb5a 	bl	8000210 <__aeabi_dsub>
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	464b      	mov	r3, r9
 800ab60:	f7f5 fd0e 	bl	8000580 <__aeabi_dmul>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4620      	mov	r0, r4
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	f7f5 fb52 	bl	8000214 <__adddf3>
 800ab70:	4604      	mov	r4, r0
 800ab72:	460d      	mov	r5, r1
 800ab74:	ec45 4b10 	vmov	d0, r4, r5
 800ab78:	b003      	add	sp, #12
 800ab7a:	ecbd 8b04 	vpop	{d8-d9}
 800ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab82:	4b1b      	ldr	r3, [pc, #108]	; (800abf0 <__kernel_sin+0x150>)
 800ab84:	ec51 0b18 	vmov	r0, r1, d8
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f7f5 fcf9 	bl	8000580 <__aeabi_dmul>
 800ab8e:	4632      	mov	r2, r6
 800ab90:	ec41 0b19 	vmov	d9, r0, r1
 800ab94:	463b      	mov	r3, r7
 800ab96:	4640      	mov	r0, r8
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f7f5 fcf1 	bl	8000580 <__aeabi_dmul>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	ec51 0b19 	vmov	r0, r1, d9
 800aba6:	f7f5 fb33 	bl	8000210 <__aeabi_dsub>
 800abaa:	4652      	mov	r2, sl
 800abac:	465b      	mov	r3, fp
 800abae:	f7f5 fce7 	bl	8000580 <__aeabi_dmul>
 800abb2:	ec53 2b18 	vmov	r2, r3, d8
 800abb6:	f7f5 fb2b 	bl	8000210 <__aeabi_dsub>
 800abba:	a30b      	add	r3, pc, #44	; (adr r3, 800abe8 <__kernel_sin+0x148>)
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	4606      	mov	r6, r0
 800abc2:	460f      	mov	r7, r1
 800abc4:	4640      	mov	r0, r8
 800abc6:	4649      	mov	r1, r9
 800abc8:	f7f5 fcda 	bl	8000580 <__aeabi_dmul>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4630      	mov	r0, r6
 800abd2:	4639      	mov	r1, r7
 800abd4:	f7f5 fb1e 	bl	8000214 <__adddf3>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4620      	mov	r0, r4
 800abde:	4629      	mov	r1, r5
 800abe0:	f7f5 fb16 	bl	8000210 <__aeabi_dsub>
 800abe4:	e7c4      	b.n	800ab70 <__kernel_sin+0xd0>
 800abe6:	bf00      	nop
 800abe8:	55555549 	.word	0x55555549
 800abec:	3fc55555 	.word	0x3fc55555
 800abf0:	3fe00000 	.word	0x3fe00000
 800abf4:	5acfd57c 	.word	0x5acfd57c
 800abf8:	3de5d93a 	.word	0x3de5d93a
 800abfc:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac00:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac04:	57b1fe7d 	.word	0x57b1fe7d
 800ac08:	3ec71de3 	.word	0x3ec71de3
 800ac0c:	19c161d5 	.word	0x19c161d5
 800ac10:	3f2a01a0 	.word	0x3f2a01a0
 800ac14:	1110f8a6 	.word	0x1110f8a6
 800ac18:	3f811111 	.word	0x3f811111

0800ac1c <fabs>:
 800ac1c:	ec51 0b10 	vmov	r0, r1, d0
 800ac20:	ee10 2a10 	vmov	r2, s0
 800ac24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac28:	ec43 2b10 	vmov	d0, r2, r3
 800ac2c:	4770      	bx	lr
	...

0800ac30 <floor>:
 800ac30:	ec51 0b10 	vmov	r0, r1, d0
 800ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ac3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ac40:	2e13      	cmp	r6, #19
 800ac42:	ee10 5a10 	vmov	r5, s0
 800ac46:	ee10 8a10 	vmov	r8, s0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	dc32      	bgt.n	800acb4 <floor+0x84>
 800ac4e:	2e00      	cmp	r6, #0
 800ac50:	da14      	bge.n	800ac7c <floor+0x4c>
 800ac52:	a333      	add	r3, pc, #204	; (adr r3, 800ad20 <floor+0xf0>)
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	f7f5 fadc 	bl	8000214 <__adddf3>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f7f5 ff1e 	bl	8000aa0 <__aeabi_dcmpgt>
 800ac64:	b138      	cbz	r0, 800ac76 <floor+0x46>
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	da57      	bge.n	800ad1a <floor+0xea>
 800ac6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ac6e:	431d      	orrs	r5, r3
 800ac70:	d001      	beq.n	800ac76 <floor+0x46>
 800ac72:	4c2d      	ldr	r4, [pc, #180]	; (800ad28 <floor+0xf8>)
 800ac74:	2500      	movs	r5, #0
 800ac76:	4621      	mov	r1, r4
 800ac78:	4628      	mov	r0, r5
 800ac7a:	e025      	b.n	800acc8 <floor+0x98>
 800ac7c:	4f2b      	ldr	r7, [pc, #172]	; (800ad2c <floor+0xfc>)
 800ac7e:	4137      	asrs	r7, r6
 800ac80:	ea01 0307 	and.w	r3, r1, r7
 800ac84:	4303      	orrs	r3, r0
 800ac86:	d01f      	beq.n	800acc8 <floor+0x98>
 800ac88:	a325      	add	r3, pc, #148	; (adr r3, 800ad20 <floor+0xf0>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	f7f5 fac1 	bl	8000214 <__adddf3>
 800ac92:	2200      	movs	r2, #0
 800ac94:	2300      	movs	r3, #0
 800ac96:	f7f5 ff03 	bl	8000aa0 <__aeabi_dcmpgt>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d0eb      	beq.n	800ac76 <floor+0x46>
 800ac9e:	2c00      	cmp	r4, #0
 800aca0:	bfbe      	ittt	lt
 800aca2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aca6:	fa43 f606 	asrlt.w	r6, r3, r6
 800acaa:	19a4      	addlt	r4, r4, r6
 800acac:	ea24 0407 	bic.w	r4, r4, r7
 800acb0:	2500      	movs	r5, #0
 800acb2:	e7e0      	b.n	800ac76 <floor+0x46>
 800acb4:	2e33      	cmp	r6, #51	; 0x33
 800acb6:	dd0b      	ble.n	800acd0 <floor+0xa0>
 800acb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800acbc:	d104      	bne.n	800acc8 <floor+0x98>
 800acbe:	ee10 2a10 	vmov	r2, s0
 800acc2:	460b      	mov	r3, r1
 800acc4:	f7f5 faa6 	bl	8000214 <__adddf3>
 800acc8:	ec41 0b10 	vmov	d0, r0, r1
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800acd4:	f04f 33ff 	mov.w	r3, #4294967295
 800acd8:	fa23 f707 	lsr.w	r7, r3, r7
 800acdc:	4207      	tst	r7, r0
 800acde:	d0f3      	beq.n	800acc8 <floor+0x98>
 800ace0:	a30f      	add	r3, pc, #60	; (adr r3, 800ad20 <floor+0xf0>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 fa95 	bl	8000214 <__adddf3>
 800acea:	2200      	movs	r2, #0
 800acec:	2300      	movs	r3, #0
 800acee:	f7f5 fed7 	bl	8000aa0 <__aeabi_dcmpgt>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d0bf      	beq.n	800ac76 <floor+0x46>
 800acf6:	2c00      	cmp	r4, #0
 800acf8:	da02      	bge.n	800ad00 <floor+0xd0>
 800acfa:	2e14      	cmp	r6, #20
 800acfc:	d103      	bne.n	800ad06 <floor+0xd6>
 800acfe:	3401      	adds	r4, #1
 800ad00:	ea25 0507 	bic.w	r5, r5, r7
 800ad04:	e7b7      	b.n	800ac76 <floor+0x46>
 800ad06:	2301      	movs	r3, #1
 800ad08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad0c:	fa03 f606 	lsl.w	r6, r3, r6
 800ad10:	4435      	add	r5, r6
 800ad12:	4545      	cmp	r5, r8
 800ad14:	bf38      	it	cc
 800ad16:	18e4      	addcc	r4, r4, r3
 800ad18:	e7f2      	b.n	800ad00 <floor+0xd0>
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	462c      	mov	r4, r5
 800ad1e:	e7aa      	b.n	800ac76 <floor+0x46>
 800ad20:	8800759c 	.word	0x8800759c
 800ad24:	7e37e43c 	.word	0x7e37e43c
 800ad28:	bff00000 	.word	0xbff00000
 800ad2c:	000fffff 	.word	0x000fffff

0800ad30 <scalbn>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	ec55 4b10 	vmov	r4, r5, d0
 800ad36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	462b      	mov	r3, r5
 800ad3e:	b99a      	cbnz	r2, 800ad68 <scalbn+0x38>
 800ad40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad44:	4323      	orrs	r3, r4
 800ad46:	d036      	beq.n	800adb6 <scalbn+0x86>
 800ad48:	4b39      	ldr	r3, [pc, #228]	; (800ae30 <scalbn+0x100>)
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	ee10 0a10 	vmov	r0, s0
 800ad50:	2200      	movs	r2, #0
 800ad52:	f7f5 fc15 	bl	8000580 <__aeabi_dmul>
 800ad56:	4b37      	ldr	r3, [pc, #220]	; (800ae34 <scalbn+0x104>)
 800ad58:	429e      	cmp	r6, r3
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	da10      	bge.n	800ad82 <scalbn+0x52>
 800ad60:	a32b      	add	r3, pc, #172	; (adr r3, 800ae10 <scalbn+0xe0>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	e03a      	b.n	800adde <scalbn+0xae>
 800ad68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad6c:	428a      	cmp	r2, r1
 800ad6e:	d10c      	bne.n	800ad8a <scalbn+0x5a>
 800ad70:	ee10 2a10 	vmov	r2, s0
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fa4c 	bl	8000214 <__adddf3>
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	e019      	b.n	800adb6 <scalbn+0x86>
 800ad82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad86:	460b      	mov	r3, r1
 800ad88:	3a36      	subs	r2, #54	; 0x36
 800ad8a:	4432      	add	r2, r6
 800ad8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad90:	428a      	cmp	r2, r1
 800ad92:	dd08      	ble.n	800ada6 <scalbn+0x76>
 800ad94:	2d00      	cmp	r5, #0
 800ad96:	a120      	add	r1, pc, #128	; (adr r1, 800ae18 <scalbn+0xe8>)
 800ad98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad9c:	da1c      	bge.n	800add8 <scalbn+0xa8>
 800ad9e:	a120      	add	r1, pc, #128	; (adr r1, 800ae20 <scalbn+0xf0>)
 800ada0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ada4:	e018      	b.n	800add8 <scalbn+0xa8>
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	dd08      	ble.n	800adbc <scalbn+0x8c>
 800adaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800adb6:	ec45 4b10 	vmov	d0, r4, r5
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800adc0:	da19      	bge.n	800adf6 <scalbn+0xc6>
 800adc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800adc6:	429e      	cmp	r6, r3
 800adc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800adcc:	dd0a      	ble.n	800ade4 <scalbn+0xb4>
 800adce:	a112      	add	r1, pc, #72	; (adr r1, 800ae18 <scalbn+0xe8>)
 800add0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1e2      	bne.n	800ad9e <scalbn+0x6e>
 800add8:	a30f      	add	r3, pc, #60	; (adr r3, 800ae18 <scalbn+0xe8>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	f7f5 fbcf 	bl	8000580 <__aeabi_dmul>
 800ade2:	e7cb      	b.n	800ad7c <scalbn+0x4c>
 800ade4:	a10a      	add	r1, pc, #40	; (adr r1, 800ae10 <scalbn+0xe0>)
 800ade6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0b8      	beq.n	800ad60 <scalbn+0x30>
 800adee:	a10e      	add	r1, pc, #56	; (adr r1, 800ae28 <scalbn+0xf8>)
 800adf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf4:	e7b4      	b.n	800ad60 <scalbn+0x30>
 800adf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adfa:	3236      	adds	r2, #54	; 0x36
 800adfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae04:	4620      	mov	r0, r4
 800ae06:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <scalbn+0x108>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	e7e8      	b.n	800adde <scalbn+0xae>
 800ae0c:	f3af 8000 	nop.w
 800ae10:	c2f8f359 	.word	0xc2f8f359
 800ae14:	01a56e1f 	.word	0x01a56e1f
 800ae18:	8800759c 	.word	0x8800759c
 800ae1c:	7e37e43c 	.word	0x7e37e43c
 800ae20:	8800759c 	.word	0x8800759c
 800ae24:	fe37e43c 	.word	0xfe37e43c
 800ae28:	c2f8f359 	.word	0xc2f8f359
 800ae2c:	81a56e1f 	.word	0x81a56e1f
 800ae30:	43500000 	.word	0x43500000
 800ae34:	ffff3cb0 	.word	0xffff3cb0
 800ae38:	3c900000 	.word	0x3c900000

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr
