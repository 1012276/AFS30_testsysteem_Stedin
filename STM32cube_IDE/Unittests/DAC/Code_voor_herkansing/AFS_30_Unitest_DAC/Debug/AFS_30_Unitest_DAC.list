
AFS_30_Unitest_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ec0  08008ec0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ec8  08008ec8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ec8  08008ec8  00018ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ecc  08008ecc  00018ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  2000010c  08008fdc  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ef0  08008fdc  00021ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001632b  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003434  00000000  00000000  00036467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000398a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024de4  00000000  00000000  0003b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164ec  00000000  00000000  0006079c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfffb  00000000  00000000  00076c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146c83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  00146cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008e50 	.word	0x08008e50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08008e50 	.word	0x08008e50

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fcdc 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f814 	bl	800053c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000514:	f000 f87e 	bl	8000614 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f9b8 	bl	800088c <MX_GPIO_Init>
  MX_I2S1_Init();
 800051c:	f000 f8a2 	bl	8000664 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000520:	f000 f8ce 	bl	80006c0 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000524:	f000 f8fa 	bl	800071c <MX_I2S3_Init>
  MX_SPI4_Init();
 8000528:	f000 f926 	bl	8000778 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f95a 	bl	80007e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f982 	bl	8000838 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000534:	f007 fef6 	bl	8008324 <MX_USB_DEVICE_Init>
//
//  uint8_t pll_clk_ctrl0 = AD1934_ReadRegister(AD1934_PLL_CLK_CTRL0);
//  uint8_t pll_clk_ctrl1 = AD1934_ReadRegister(AD1934_PLL_CLK_CTRL1);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x30>
	...

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f008 fc78 	bl	8008e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b29      	ldr	r3, [pc, #164]	; (800060c <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a28      	ldr	r2, [pc, #160]	; (800060c <SystemClock_Config+0xd0>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <SystemClock_Config+0xd0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xd4>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 80005ac:	2306      	movs	r3, #6
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b0:	23a8      	movs	r3, #168	; 0xa8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 fcd1 	bl	8003f6c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 fa06 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fc84 	bl	8002f00 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 f9ef 	bl	80009e0 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b098      	sub	sp, #96	; 0x60
 8000618:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	225c      	movs	r2, #92	; 0x5c
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f008 fc0d 	bl	8008e40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800062a:	2332      	movs	r3, #50	; 0x32
 800062c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 8000632:	2306      	movs	r3, #6
 8000634:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000642:	2300      	movs	r3, #0
 8000644:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000646:	2300      	movs	r3, #0
 8000648:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fd71 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000658:	f000 f9c2 	bl	80009e0 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3760      	adds	r7, #96	; 0x60
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <MX_I2S1_Init>:




static void MX_I2S1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2S1_Init+0x54>)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <MX_I2S1_Init+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2S1_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2S1_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2S1_Init+0x54>)
 800067e:	2203      	movs	r2, #3
 8000680:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_I2S1_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_I2S1_Init+0x54>)
 800068a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800068e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2S1_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_I2S1_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2S1_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_I2S1_Init+0x54>)
 80006a4:	f000 ff66 	bl	8001574 <HAL_I2S_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 80006ae:	f000 f997 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000128 	.word	0x20000128
 80006bc:	40013000 	.word	0x40013000

080006c0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_I2S2_Init+0x54>)
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <MX_I2S2_Init+0x58>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2S2_Init+0x54>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_I2S2_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2S2_Init+0x54>)
 80006da:	2203      	movs	r2, #3
 80006dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_I2S2_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_I2S2_Init+0x54>)
 80006e6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80006ea:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2S2_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_I2S2_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2S2_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_I2S2_Init+0x54>)
 8000700:	f000 ff38 	bl	8001574 <HAL_I2S_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800070a:	f000 f969 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000170 	.word	0x20000170
 8000718:	40003800 	.word	0x40003800

0800071c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_I2S3_Init+0x54>)
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <MX_I2S3_Init+0x58>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_I2S3_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2S3_Init+0x54>)
 8000736:	2203      	movs	r2, #3
 8000738:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_I2S3_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_I2S3_Init+0x54>)
 8000742:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000746:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_I2S3_Init+0x54>)
 800075c:	f000 ff0a 	bl	8001574 <HAL_I2S_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000766:	f000 f93b 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001b8 	.word	0x200001b8
 8000774:	40003c00 	.word	0x40003c00

08000778 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_SPI4_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_SPI4_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI4_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI4_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_SPI4_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI4_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI4_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI4_Init+0x64>)
 80007a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI4_Init+0x64>)
 80007ac:	2218      	movs	r2, #24
 80007ae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_SPI4_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI4_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_SPI4_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI4_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_SPI4_Init+0x64>)
 80007ca:	f003 fe6d 	bl	80044a8 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f904 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000200 	.word	0x20000200
 80007e0:	40013400 	.word	0x40013400

080007e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART1_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 800081c:	f003 fecd 	bl	80045ba <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f8db 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000258 	.word	0x20000258
 8000834:	40011000 	.word	0x40011000

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART3_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000870:	f003 fea3 	bl	80045ba <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f8b1 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000029c 	.word	0x2000029c
 8000888:	40004800 	.word	0x40004800

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a4a      	ldr	r2, [pc, #296]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a3c      	ldr	r2, [pc, #240]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <MX_GPIO_Init+0x148>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a35      	ldr	r2, [pc, #212]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <MX_GPIO_Init+0x148>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <MX_GPIO_Init+0x148>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_GPIO_Init+0x148>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	211c      	movs	r1, #28
 800096a:	481b      	ldr	r0, [pc, #108]	; (80009d8 <MX_GPIO_Init+0x14c>)
 800096c:	f000 fde8 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DE_OUTPUT_Pin|RE_OUTPUT_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2130      	movs	r1, #48	; 0x30
 8000974:	4819      	ldr	r0, [pc, #100]	; (80009dc <MX_GPIO_Init+0x150>)
 8000976:	f000 fde3 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_KNOP_Pin PAUZEER_KNOP_Pin STOP_KNOP_Pin */
  GPIO_InitStruct.Pin = START_KNOP_Pin|PAUZEER_KNOP_Pin|STOP_KNOP_Pin;
 800097a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0x150>)
 8000990:	f000 fc42 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : RODE_LED_Pin GROENE_LED_Pin BLAUWE_LED_Pin */
  GPIO_InitStruct.Pin = RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin;
 8000994:	231c      	movs	r3, #28
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80009ac:	f000 fc34 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : DE_OUTPUT_Pin RE_OUTPUT_Pin */
  GPIO_InitStruct.Pin = DE_OUTPUT_Pin|RE_OUTPUT_Pin;
 80009b0:	2330      	movs	r3, #48	; 0x30
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_GPIO_Init+0x150>)
 80009c8:	f000 fc26 	bl	8001218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3730      	adds	r7, #48	; 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021800 	.word	0x40021800
 80009dc:	40020400 	.word	0x40020400

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b090      	sub	sp, #64	; 0x40
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a79      	ldr	r2, [pc, #484]	; (8000c40 <HAL_I2S_MspInit+0x204>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12c      	bne.n	8000ab8 <HAL_I2S_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a62:	4b78      	ldr	r3, [pc, #480]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a77      	ldr	r2, [pc, #476]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b75      	ldr	r3, [pc, #468]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7e:	4b71      	ldr	r3, [pc, #452]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a70      	ldr	r2, [pc, #448]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b6e      	ldr	r3, [pc, #440]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000a96:	23b0      	movs	r3, #176	; 0xb0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4865      	ldr	r0, [pc, #404]	; (8000c48 <HAL_I2S_MspInit+0x20c>)
 8000ab2:	f000 fbb1 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ab6:	e0bf      	b.n	8000c38 <HAL_I2S_MspInit+0x1fc>
  else if(hi2s->Instance==SPI2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a63      	ldr	r2, [pc, #396]	; (8000c4c <HAL_I2S_MspInit+0x210>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d169      	bne.n	8000b96 <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	4b5f      	ldr	r3, [pc, #380]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a5e      	ldr	r2, [pc, #376]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b5c      	ldr	r3, [pc, #368]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	4b58      	ldr	r3, [pc, #352]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a57      	ldr	r2, [pc, #348]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	4b51      	ldr	r3, [pc, #324]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a50      	ldr	r2, [pc, #320]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b4e      	ldr	r3, [pc, #312]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a49      	ldr	r2, [pc, #292]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b44:	2305      	movs	r3, #5
 8000b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4840      	ldr	r0, [pc, #256]	; (8000c50 <HAL_I2S_MspInit+0x214>)
 8000b50:	f000 fb62 	bl	8001218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b64:	2305      	movs	r3, #5
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4839      	ldr	r0, [pc, #228]	; (8000c54 <HAL_I2S_MspInit+0x218>)
 8000b70:	f000 fb52 	bl	8001218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4832      	ldr	r0, [pc, #200]	; (8000c58 <HAL_I2S_MspInit+0x21c>)
 8000b90:	f000 fb42 	bl	8001218 <HAL_GPIO_Init>
}
 8000b94:	e050      	b.n	8000c38 <HAL_I2S_MspInit+0x1fc>
  else if(hi2s->Instance==SPI3)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a30      	ldr	r2, [pc, #192]	; (8000c5c <HAL_I2S_MspInit+0x220>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d14b      	bne.n	8000c38 <HAL_I2S_MspInit+0x1fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_I2S_MspInit+0x208>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c06:	2306      	movs	r3, #6
 8000c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <HAL_I2S_MspInit+0x20c>)
 8000c12:	f000 fb01 	bl	8001218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c28:	2306      	movs	r3, #6
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_I2S_MspInit+0x218>)
 8000c34:	f000 faf0 	bl	8001218 <HAL_GPIO_Init>
}
 8000c38:	bf00      	nop
 8000c3a:	3740      	adds	r7, #64	; 0x40
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40013000 	.word	0x40013000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40003800 	.word	0x40003800
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40003c00 	.word	0x40003c00

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_SPI_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cba:	2374      	movs	r3, #116	; 0x74
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_SPI_MspInit+0x8c>)
 8000cd6:	f000 fa9f 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40013400 	.word	0x40013400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4a:	23c0      	movs	r3, #192	; 0xc0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d66:	f000 fa57 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6a:	e031      	b.n	8000dd0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 8000dae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000dcc:	f000 fa24 	bl	8001218 <HAL_GPIO_Init>
}
 8000dd0:	bf00      	nop
 8000dd2:	3730      	adds	r7, #48	; 0x30
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40004800 	.word	0x40004800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f89a 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <OTG_FS_IRQHandler+0x10>)
 8000e42:	f000 feeb 	bl	8001c1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200017c4 	.word	0x200017c4

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f007 ffa9 	bl	8008df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fb2f 	bl	8000508 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000eb8:	08008ed0 	.word	0x08008ed0
  ldr r2, =_sbss
 8000ebc:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000ec0:	20001ef0 	.word	0x20001ef0

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94f 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fd76 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f967 	bl	80011fe <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f92f 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200002e0 	.word	0x200002e0

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200002e0 	.word	0x200002e0

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e165      	b.n	8001500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8154 	bne.w	80014fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	2b02      	cmp	r3, #2
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d017      	beq.n	8001308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d123      	bne.n	800135c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80ae 	beq.w	80014fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <HAL_GPIO_Init+0x300>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a5c      	ldr	r2, [pc, #368]	; (8001518 <HAL_GPIO_Init+0x300>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b5a      	ldr	r3, [pc, #360]	; (8001518 <HAL_GPIO_Init+0x300>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <HAL_GPIO_Init+0x304>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4f      	ldr	r2, [pc, #316]	; (8001520 <HAL_GPIO_Init+0x308>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4e      	ldr	r2, [pc, #312]	; (8001524 <HAL_GPIO_Init+0x30c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x216>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4d      	ldr	r2, [pc, #308]	; (8001528 <HAL_GPIO_Init+0x310>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x212>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4c      	ldr	r2, [pc, #304]	; (800152c <HAL_GPIO_Init+0x314>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x20e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4b      	ldr	r2, [pc, #300]	; (8001530 <HAL_GPIO_Init+0x318>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x20a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4a      	ldr	r2, [pc, #296]	; (8001534 <HAL_GPIO_Init+0x31c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x206>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_GPIO_Init+0x320>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x202>
 8001416:	2306      	movs	r3, #6
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800141a:	2307      	movs	r3, #7
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	; (800151c <HAL_GPIO_Init+0x304>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <HAL_GPIO_Init+0x324>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a31      	ldr	r2, [pc, #196]	; (800153c <HAL_GPIO_Init+0x324>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_GPIO_Init+0x324>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a26      	ldr	r2, [pc, #152]	; (800153c <HAL_GPIO_Init+0x324>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <HAL_GPIO_Init+0x324>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_GPIO_Init+0x324>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_GPIO_Init+0x324>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f4:	4a11      	ldr	r2, [pc, #68]	; (800153c <HAL_GPIO_Init+0x324>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae96 	bls.w	8001234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40021400 	.word	0x40021400
 8001538:	40021800 	.word	0x40021800
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0e1      	b.n	800174a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a6d      	ldr	r2, [pc, #436]	; (8001754 <HAL_I2S_Init+0x1e0>)
 800159e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fa4b 	bl	8000a3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015bc:	f023 030f 	bic.w	r3, r3, #15
 80015c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2202      	movs	r2, #2
 80015c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d06f      	beq.n	80016b2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80015da:	2310      	movs	r3, #16
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e001      	b.n	80015e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80015e0:	2320      	movs	r3, #32
 80015e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d802      	bhi.n	80015f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_I2S_Init+0x1e4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d004      	beq.n	8001606 <HAL_I2S_Init+0x92>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a56      	ldr	r2, [pc, #344]	; (800175c <HAL_I2S_Init+0x1e8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d104      	bne.n	8001610 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8001606:	2001      	movs	r0, #1
 8001608:	f002 f8be 	bl	8003788 <HAL_RCCEx_GetPeriphCLKFreq>
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	e003      	b.n	8001618 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001610:	2002      	movs	r0, #2
 8001612:	f002 f8b9 	bl	8003788 <HAL_RCCEx_GetPeriphCLKFreq>
 8001616:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001620:	d125      	bne.n	800166e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	fbb2 f2f3 	udiv	r2, r2, r3
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	3305      	adds	r3, #5
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	e01f      	b.n	800168c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	fbb2 f2f3 	udiv	r2, r2, r3
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	3305      	adds	r3, #5
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	e00e      	b.n	800168c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fbb2 f2f3 	udiv	r2, r2, r3
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	3305      	adds	r3, #5
 800168a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4a34      	ldr	r2, [pc, #208]	; (8001760 <HAL_I2S_Init+0x1ec>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	e003      	b.n	80016ba <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d902      	bls.n	80016c6 <HAL_I2S_Init+0x152>
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d907      	bls.n	80016d6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f043 0210 	orr.w	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e039      	b.n	800174a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	ea42 0103 	orr.w	r1, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016f4:	f023 030f 	bic.w	r3, r3, #15
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6851      	ldr	r1, [r2, #4]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6892      	ldr	r2, [r2, #8]
 8001700:	4311      	orrs	r1, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68d2      	ldr	r2, [r2, #12]
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6992      	ldr	r2, [r2, #24]
 800170c:	430a      	orrs	r2, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001718:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b30      	cmp	r3, #48	; 0x30
 8001720:	d003      	beq.n	800172a <HAL_I2S_Init+0x1b6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2bb0      	cmp	r3, #176	; 0xb0
 8001728:	d107      	bne.n	800173a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001738:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	0800185b 	.word	0x0800185b
 8001758:	40003800 	.word	0x40003800
 800175c:	40003c00 	.word	0x40003c00
 8001760:	cccccccd 	.word	0xcccccccd

08001764 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	1c9a      	adds	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffb8 	bl	8001764 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	b292      	uxth	r2, r2
 8001810:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	1c9a      	adds	r2, r3, #2
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001820:	b29b      	uxth	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10e      	bne.n	8001852 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001842:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff93 	bl	8001778 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b04      	cmp	r3, #4
 8001874:	d13a      	bne.n	80018ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d109      	bne.n	8001894 <I2S_IRQHandler+0x3a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d102      	bne.n	8001894 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffb4 	bl	80017fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189a:	2b40      	cmp	r3, #64	; 0x40
 800189c:	d126      	bne.n	80018ec <I2S_IRQHandler+0x92>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d11f      	bne.n	80018ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff50 	bl	800178c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d136      	bne.n	8001966 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d109      	bne.n	8001916 <I2S_IRQHandler+0xbc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d102      	bne.n	8001916 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff45 	bl	80017a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b08      	cmp	r3, #8
 800191e:	d122      	bne.n	8001966 <I2S_IRQHandler+0x10c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b20      	cmp	r3, #32
 800192c:	d11b      	bne.n	8001966 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800193c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f043 0204 	orr.w	r2, r3, #4
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff13 	bl	800178c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800196e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001970:	b08f      	sub	sp, #60	; 0x3c
 8001972:	af0a      	add	r7, sp, #40	; 0x28
 8001974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e116      	b.n	8001bae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f006 feb4 	bl	8008708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 f9d1 	bl	8004d66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	687e      	ldr	r6, [r7, #4]
 80019cc:	466d      	mov	r5, sp
 80019ce:	f106 0410 	add.w	r4, r6, #16
 80019d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019de:	e885 0003 	stmia.w	r5, {r0, r1}
 80019e2:	1d33      	adds	r3, r6, #4
 80019e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e6:	6838      	ldr	r0, [r7, #0]
 80019e8:	f003 f8a8 	bl	8004b3c <USB_CoreInit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2202      	movs	r2, #2
 80019f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0d7      	b.n	8001bae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 f9bf 	bl	8004d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	e04a      	b.n	8001aa6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333d      	adds	r3, #61	; 0x3d
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	333c      	adds	r3, #60	; 0x3c
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	b298      	uxth	r0, r3
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3344      	adds	r3, #68	; 0x44
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3340      	adds	r3, #64	; 0x40
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3348      	adds	r3, #72	; 0x48
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	334c      	adds	r3, #76	; 0x4c
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3354      	adds	r3, #84	; 0x54
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3af      	bcc.n	8001a10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e044      	b.n	8001b40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3b5      	bcc.n	8001ab6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	687e      	ldr	r6, [r7, #4]
 8001b52:	466d      	mov	r5, sp
 8001b54:	f106 0410 	add.w	r4, r6, #16
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b68:	1d33      	adds	r3, r6, #4
 8001b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6c:	6838      	ldr	r0, [r7, #0]
 8001b6e:	f003 f957 	bl	8004e20 <USB_DevInit>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e014      	b.n	8001bae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f001 f98b 	bl	8002eb8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fa99 	bl	80060de <USB_DevDisconnect>

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_Start+0x1c>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e020      	b.n	8001c14 <HAL_PCD_Start+0x5e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d109      	bne.n	8001bf6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d005      	beq.n	8001bf6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f8a2 	bl	8004d44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 fa49 	bl	800609c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b08d      	sub	sp, #52	; 0x34
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fb07 	bl	8006246 <USB_GetMode>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 84b7 	bne.w	80025ae <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fa6b 	bl	8006120 <USB_ReadInterrupts>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 84ad 	beq.w	80025ac <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fa58 	bl	8006120 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d107      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f002 0202 	and.w	r2, r2, #2
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fa46 	bl	8006120 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d161      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0210 	bic.w	r2, r2, #16
 8001cac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	0c5b      	lsrs	r3, r3, #17
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d124      	bne.n	8001d24 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d035      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6a38      	ldr	r0, [r7, #32]
 8001cfa:	f004 f87d 	bl	8005df8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0a:	441a      	add	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d1c:	441a      	add	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	621a      	str	r2, [r3, #32]
 8001d22:	e016      	b.n	8001d52 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	0c5b      	lsrs	r3, r3, #17
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d110      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d36:	2208      	movs	r2, #8
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6a38      	ldr	r0, [r7, #32]
 8001d3c:	f004 f85c 	bl	8005df8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d4c:	441a      	add	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0210 	orr.w	r2, r2, #16
 8001d60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 f9da 	bl	8006120 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d76:	f040 80a7 	bne.w	8001ec8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 f9df 	bl	8006146 <USB_ReadDevAllOutEpInterrupt>
 8001d88:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d8a:	e099      	b.n	8001ec0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 808e 	beq.w	8001eb4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 fa03 	bl	80061ae <USB_ReadDevOutEPInterrupt>
 8001da8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00c      	beq.n	8001dce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 feef 	bl	8002bac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00c      	beq.n	8001df2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de4:	461a      	mov	r2, r3
 8001de6:	2308      	movs	r3, #8
 8001de8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 ffc5 	bl	8002d7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d030      	beq.n	8001e7a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d109      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e36:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	78db      	ldrb	r3, [r3, #3]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d108      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f006 fd6c 	bl	8008940 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e74:	461a      	mov	r2, r3
 8001e76:	2302      	movs	r3, #2
 8001e78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e90:	461a      	mov	r2, r3
 8001e92:	2320      	movs	r3, #32
 8001e94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d009      	beq.n	8001eb4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eac:	461a      	mov	r2, r3
 8001eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f47f af62 	bne.w	8001d8c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 f927 	bl	8006120 <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001edc:	f040 80db 	bne.w	8002096 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 f948 	bl	800617a <USB_ReadDevAllInEpInterrupt>
 8001eea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ef0:	e0cd      	b.n	800208e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80c2 	beq.w	8002082 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 f96e 	bl	80061ea <USB_ReadDevInEPInterrupt>
 8001f0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d057      	beq.n	8001fca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	2201      	movs	r2, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69f9      	ldr	r1, [r7, #28]
 8001f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d132      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	334c      	adds	r3, #76	; 0x4c
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	3348      	adds	r3, #72	; 0x48
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4419      	add	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4403      	add	r3, r0
 8001f8c:	334c      	adds	r3, #76	; 0x4c
 8001f8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d113      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x3a2>
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3354      	adds	r3, #84	; 0x54
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d108      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2101      	movs	r1, #1
 8001fba:	f004 f975 	bl	80062a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f006 fc36 	bl	8008836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2310      	movs	r3, #16
 8002000:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002018:	461a      	mov	r2, r3
 800201a:	2340      	movs	r3, #64	; 0x40
 800201c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d023      	beq.n	8002070 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202a:	6a38      	ldr	r0, [r7, #32]
 800202c:	f003 f856 	bl	80050dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3338      	adds	r3, #56	; 0x38
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	78db      	ldrb	r3, [r3, #3]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2200      	movs	r2, #0
 8002050:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f006 fc83 	bl	8008964 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206a:	461a      	mov	r2, r3
 800206c:	2302      	movs	r3, #2
 800206e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800207a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fd08 	bl	8002a92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	3301      	adds	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f af2e 	bne.w	8001ef2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 f840 	bl	8006120 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020aa:	d122      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d108      	bne.n	80020dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020d2:	2100      	movs	r1, #0
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f006 fdfd 	bl	8008cd4 <HAL_PCDEx_LPM_Callback>
 80020da:	e002      	b.n	80020e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f006 fc21 	bl	8008924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 f812 	bl	8006120 <USB_ReadInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002106:	d112      	bne.n	800212e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f006 fbdd 	bl	80088d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800212c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fff4 	bl	8006120 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800213e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002142:	d121      	bne.n	8002188 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002152:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d111      	bne.n	8002182 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002178:	2101      	movs	r1, #1
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f006 fdaa 	bl	8008cd4 <HAL_PCDEx_LPM_Callback>
 8002180:	e002      	b.n	8002188 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f006 fba8 	bl	80088d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f003 ffc7 	bl	8006120 <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	f040 80b7 	bne.w	800230e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2110      	movs	r1, #16
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 ff8e 	bl	80050dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c4:	e046      	b.n	8002254 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d2:	461a      	mov	r2, r3
 80021d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800220c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	0151      	lsls	r1, r2, #5
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	440a      	add	r2, r1
 8002224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002228:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800222c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	0151      	lsls	r1, r2, #5
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	440a      	add	r2, r1
 8002244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002248:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800224c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	3301      	adds	r3, #1
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225a:	429a      	cmp	r2, r3
 800225c:	d3b3      	bcc.n	80021c6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002270:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228a:	f043 030b 	orr.w	r3, r3, #11
 800228e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a0:	f043 030b 	orr.w	r3, r3, #11
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	e015      	b.n	80022d4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ce:	f043 030b 	orr.w	r3, r3, #11
 80022d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022f8:	461a      	mov	r2, r3
 80022fa:	f003 ffd5 	bl	80062a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800230c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 ff04 	bl	8006120 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002322:	d124      	bne.n	800236e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 ff9a 	bl	8006262 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f002 ff4f 	bl	80051d6 <USB_GetDevSpeed>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681c      	ldr	r4, [r3, #0]
 8002344:	f000 fec2 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8002348:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	4620      	mov	r0, r4
 8002354:	f002 fc54 	bl	8004c00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f006 fa94 	bl	8008886 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800236c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fed4 	bl	8006120 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b08      	cmp	r3, #8
 8002380:	d10a      	bne.n	8002398 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f006 fa71 	bl	800886a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f002 0208 	and.w	r2, r2, #8
 8002396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f003 febf 	bl	8006120 <USB_ReadInterrupts>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	2b80      	cmp	r3, #128	; 0x80
 80023aa:	d122      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b8:	2301      	movs	r3, #1
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	e014      	b.n	80023e8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d105      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fb27 	bl	8002a30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	3301      	adds	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3e5      	bcc.n	80023be <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fe92 	bl	8006120 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002406:	d13b      	bne.n	8002480 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002408:	2301      	movs	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	e02b      	b.n	8002466 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3340      	adds	r3, #64	; 0x40
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d115      	bne.n	8002460 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002434:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002436:	2b00      	cmp	r3, #0
 8002438:	da12      	bge.n	8002460 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	333f      	adds	r3, #63	; 0x3f
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fae8 	bl	8002a30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	3301      	adds	r3, #1
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	429a      	cmp	r2, r3
 800246e:	d3ce      	bcc.n	800240e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800247e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fe4b 	bl	8006120 <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002494:	d155      	bne.n	8002542 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	e045      	b.n	8002528 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d12e      	bne.n	8002522 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da2b      	bge.n	8002522 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80024d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024da:	429a      	cmp	r2, r3
 80024dc:	d121      	bne.n	8002522 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251e:	6053      	str	r3, [r2, #4]
            break;
 8002520:	e007      	b.n	8002532 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	429a      	cmp	r2, r3
 8002530:	d3b4      	bcc.n	800249c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fdea 	bl	8006120 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d10a      	bne.n	800256e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f006 fa15 	bl	8008988 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800256c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fdd4 	bl	8006120 <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d115      	bne.n	80025ae <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f006 fa05 	bl	80089a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e000      	b.n	80025ae <HAL_PCD_IRQHandler+0x992>
      return;
 80025ac:	bf00      	nop
    }
  }
}
 80025ae:	3734      	adds	r7, #52	; 0x34
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_PCD_SetAddress+0x1a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e013      	b.n	80025f6 <HAL_PCD_SetAddress+0x42>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fd32 	bl	8006050 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	4608      	mov	r0, r1
 8002608:	4611      	mov	r1, r2
 800260a:	461a      	mov	r2, r3
 800260c:	4603      	mov	r3, r0
 800260e:	70fb      	strb	r3, [r7, #3]
 8002610:	460b      	mov	r3, r1
 8002612:	803b      	strh	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800261c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da0f      	bge.n	8002644 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 020f 	and.w	r2, r3, #15
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	3338      	adds	r3, #56	; 0x38
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	705a      	strb	r2, [r3, #1]
 8002642:	e00f      	b.n	8002664 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	b2da      	uxtb	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002670:	883a      	ldrh	r2, [r7, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	78ba      	ldrb	r2, [r7, #2]
 800267a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800268e:	78bb      	ldrb	r3, [r7, #2]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d102      	bne.n	800269a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_PCD_EP_Open+0xaa>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e00e      	b.n	80026c6 <HAL_PCD_EP_Open+0xc8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fdb2 	bl	8005220 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80026c4:	7afb      	ldrb	r3, [r7, #11]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	da0f      	bge.n	8002702 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	3338      	adds	r3, #56	; 0x38
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	3304      	adds	r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	705a      	strb	r2, [r3, #1]
 8002700:	e00f      	b.n	8002722 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	3304      	adds	r3, #4
 800271a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_PCD_EP_Close+0x6e>
 8002738:	2302      	movs	r3, #2
 800273a:	e00e      	b.n	800275a <HAL_PCD_EP_Close+0x8c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	4618      	mov	r0, r3
 800274c:	f002 fdf0 	bl	8005330 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	460b      	mov	r3, r1
 8002770:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	f003 020f 	and.w	r2, r3, #15
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	3304      	adds	r3, #4
 800278a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027a4:	7afb      	ldrb	r3, [r7, #11]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	f003 f8cf 	bl	8005978 <USB_EP0StartXfer>
 80027da:	e008      	b.n	80027ee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6979      	ldr	r1, [r7, #20]
 80027ea:	f002 fe7d 	bl	80054e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f003 020f 	and.w	r2, r3, #15
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	460b      	mov	r3, r1
 8002836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002838:	7afb      	ldrb	r3, [r7, #11]
 800283a:	f003 020f 	and.w	r2, r3, #15
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	3338      	adds	r3, #56	; 0x38
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2201      	movs	r2, #1
 8002866:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	b2da      	uxtb	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002882:	7afb      	ldrb	r3, [r7, #11]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6979      	ldr	r1, [r7, #20]
 800289a:	f003 f86d 	bl	8005978 <USB_EP0StartXfer>
 800289e:	e008      	b.n	80028b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	6979      	ldr	r1, [r7, #20]
 80028ae:	f002 fe1b 	bl	80054e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 020f 	and.w	r2, r3, #15
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d901      	bls.n	80028da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e050      	b.n	800297c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da0f      	bge.n	8002902 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	3338      	adds	r3, #56	; 0x38
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	3304      	adds	r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	705a      	strb	r2, [r3, #1]
 8002900:	e00d      	b.n	800291e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_PCD_EP_SetStall+0x82>
 800293a:	2302      	movs	r3, #2
 800293c:	e01e      	b.n	800297c <HAL_PCD_EP_SetStall+0xc0>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	4618      	mov	r0, r3
 800294e:	f003 faab 	bl	8005ea8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	b2d9      	uxtb	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800296c:	461a      	mov	r2, r3
 800296e:	f003 fc9b 	bl	80062a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d901      	bls.n	80029a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e042      	b.n	8002a28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	da0f      	bge.n	80029ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 020f 	and.w	r2, r3, #15
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	3338      	adds	r3, #56	; 0x38
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	3304      	adds	r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	705a      	strb	r2, [r3, #1]
 80029c8:	e00f      	b.n	80029ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	3304      	adds	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_PCD_EP_ClrStall+0x86>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e00e      	b.n	8002a28 <HAL_PCD_EP_ClrStall+0xa4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fab3 	bl	8005f84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da0c      	bge.n	8002a5e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3338      	adds	r3, #56	; 0x38
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e00c      	b.n	8002a78 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	3304      	adds	r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f8d2 	bl	8005c28 <USB_EPStopXfer>
 8002a84:	4603      	mov	r3, r0
 8002a86:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a88:	7afb      	ldrb	r3, [r7, #11]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b08a      	sub	sp, #40	; 0x28
 8002a96:	af02      	add	r7, sp, #8
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3338      	adds	r3, #56	; 0x38
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d901      	bls.n	8002aca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06c      	b.n	8002ba4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d902      	bls.n	8002ae6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3303      	adds	r3, #3
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aee:	e02b      	b.n	8002b48 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d902      	bls.n	8002b0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3303      	adds	r3, #3
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6919      	ldr	r1, [r3, #16]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4603      	mov	r3, r0
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f003 f926 	bl	8005d7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	441a      	add	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	441a      	add	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d809      	bhi.n	8002b72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d203      	bcs.n	8002b72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1be      	bne.n	8002af0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d811      	bhi.n	8002ba2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2201      	movs	r2, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	333c      	adds	r3, #60	; 0x3c
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d17b      	bne.n	8002cda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4a61      	ldr	r2, [pc, #388]	; (8002d74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	f240 80b9 	bls.w	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80b3 	beq.w	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c14:	6093      	str	r3, [r2, #8]
 8002c16:	e0a7      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2320      	movs	r3, #32
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	e098      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8093 	bne.w	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	4a4b      	ldr	r2, [pc, #300]	; (8002d74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d90f      	bls.n	8002c6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	6093      	str	r3, [r2, #8]
 8002c68:	e07e      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d114      	bne.n	8002ccc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	f003 faf6 	bl	80062a8 <USB_EP0_OutStart>
 8002cbc:	e006      	b.n	8002ccc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f005 fd94 	bl	8008800 <HAL_PCD_DataOutStageCallback>
 8002cd8:	e046      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d124      	bne.n	8002d2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfe:	6093      	str	r3, [r2, #8]
 8002d00:	e032      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f005 fd6b 	bl	8008800 <HAL_PCD_DataOutStageCallback>
 8002d2a:	e01d      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d114      	bne.n	8002d5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d54:	461a      	mov	r2, r3
 8002d56:	2100      	movs	r1, #0
 8002d58:	f003 faa6 	bl	80062a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f005 fd4c 	bl	8008800 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	4f54300a 	.word	0x4f54300a
 8002d78:	4f54310a 	.word	0x4f54310a

08002d7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	333c      	adds	r3, #60	; 0x3c
 8002d94:	3304      	adds	r3, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d90e      	bls.n	8002dd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f005 fd03 	bl	80087dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d90c      	bls.n	8002df8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002df0:	461a      	mov	r2, r3
 8002df2:	2101      	movs	r1, #1
 8002df4:	f003 fa58 	bl	80062a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	4f54300a 	.word	0x4f54300a

08002e08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
 8002e14:	4613      	mov	r3, r2
 8002e16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d107      	bne.n	8002e36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e26:	883b      	ldrh	r3, [r7, #0]
 8002e28:	0419      	lsls	r1, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
 8002e34:	e028      	b.n	8002e88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4413      	add	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e00d      	b.n	8002e66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3340      	adds	r3, #64	; 0x40
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	3301      	adds	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d3ec      	bcc.n	8002e4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e70:	883b      	ldrh	r3, [r7, #0]
 8002e72:	0418      	lsls	r0, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	4302      	orrs	r2, r0
 8002e80:	3340      	adds	r3, #64	; 0x40
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	f043 0303 	orr.w	r3, r3, #3
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0cc      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f14:	4b68      	ldr	r3, [pc, #416]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d90c      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0b8      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f54:	4b59      	ldr	r3, [pc, #356]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a58      	ldr	r2, [pc, #352]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f6c:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a52      	ldr	r2, [pc, #328]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	494d      	ldr	r1, [pc, #308]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d044      	beq.n	8003020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d119      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fce:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e067      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 0203 	bic.w	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4934      	ldr	r1, [pc, #208]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff0:	f7fd ffd0 	bl	8000f94 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff8:	f7fd ffcc 	bl	8000f94 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e04f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 020c 	and.w	r2, r3, #12
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	429a      	cmp	r2, r3
 800301e:	d1eb      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d20c      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e032      	b.n	80030ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4916      	ldr	r1, [pc, #88]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	490e      	ldr	r1, [pc, #56]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003086:	f000 fdc7 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	490a      	ldr	r1, [pc, #40]	; (80030c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd ff30 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023c00 	.word	0x40023c00
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08008ea8 	.word	0x08008ea8
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	08008eb8 	.word	0x08008eb8

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003110:	f7ff ffdc 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0b5b      	lsrs	r3, r3, #13
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	08008eb8 	.word	0x08008eb8

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800316e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003172:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	496c      	ldr	r1, [pc, #432]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800318a:	2301      	movs	r3, #1
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	4960      	ldr	r1, [pc, #384]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80031b8:	2301      	movs	r3, #1
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d017      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c8:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4955      	ldr	r1, [pc, #340]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e6:	d101      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80031e8:	2301      	movs	r3, #1
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80031f4:	2301      	movs	r3, #1
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003204:	4b49      	ldr	r3, [pc, #292]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	4946      	ldr	r1, [pc, #280]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d101      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003224:	2301      	movs	r3, #1
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003230:	2301      	movs	r3, #1
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 808a 	beq.w	8003356 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	4b39      	ldr	r3, [pc, #228]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a38      	ldr	r2, [pc, #224]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800325e:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a33      	ldr	r2, [pc, #204]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800326a:	f7fd fe93 	bl	8000f94 <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fd fe8f 	bl	8000f94 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e278      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003298:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a8:	6a3a      	ldr	r2, [r7, #32]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d028      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ae:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d114      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fd fe5d 	bl	8000f94 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fd fe59 	bl	8000f94 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e240      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330c:	d114      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003322:	4902      	ldr	r1, [pc, #8]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	608b      	str	r3, [r1, #8]
 8003328:	e00c      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
 8003334:	42470e40 	.word	0x42470e40
 8003338:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a49      	ldr	r2, [pc, #292]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800333e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003350:	4944      	ldr	r1, [pc, #272]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003352:	4313      	orrs	r3, r2
 8003354:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003368:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800336a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003386:	4937      	ldr	r1, [pc, #220]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800339a:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	492e      	ldr	r1, [pc, #184]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d011      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	4926      	ldr	r1, [pc, #152]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033da:	d101      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80033dc:	2301      	movs	r3, #1
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	491a      	ldr	r1, [pc, #104]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	2b00      	cmp	r3, #0
 800340c:	d011      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	4911      	ldr	r1, [pc, #68]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342c:	d101      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800342e:	2301      	movs	r3, #1
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d005      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003440:	f040 80ff 	bne.w	8003642 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800344a:	f7fd fda3 	bl	8000f94 <HAL_GetTick>
 800344e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003450:	e00e      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003452:	f7fd fd9f 	bl	8000f94 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d907      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e188      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003464:	40023800 	.word	0x40023800
 8003468:	424711e0 	.word	0x424711e0
 800346c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1ea      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003498:	2b00      	cmp	r3, #0
 800349a:	d028      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d124      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80034a4:	4b71      	ldr	r3, [pc, #452]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	3301      	adds	r3, #1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034bc:	0e1b      	lsrs	r3, r3, #24
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	431a      	orrs	r2, r3
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	4961      	ldr	r1, [pc, #388]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800350c:	2b00      	cmp	r3, #0
 800350e:	d035      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003518:	d130      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	3301      	adds	r3, #1
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800352c:	4b4f      	ldr	r3, [pc, #316]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003532:	0f1b      	lsrs	r3, r3, #28
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	019b      	lsls	r3, r3, #6
 8003544:	431a      	orrs	r2, r3
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	3b01      	subs	r3, #1
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	431a      	orrs	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	071b      	lsls	r3, r3, #28
 800355c:	4943      	ldr	r1, [pc, #268]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356a:	f023 021f 	bic.w	r2, r3, #31
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	493d      	ldr	r1, [pc, #244]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d029      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003590:	d124      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003592:	4b36      	ldr	r3, [pc, #216]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035a4:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035aa:	0f1b      	lsrs	r3, r3, #28
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	019b      	lsls	r3, r3, #6
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	3b01      	subs	r3, #1
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	431a      	orrs	r2, r3
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	431a      	orrs	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	071b      	lsls	r3, r3, #28
 80035d4:	4925      	ldr	r1, [pc, #148]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d016      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	4917      	ldr	r1, [pc, #92]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003616:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800361c:	f7fd fcba 	bl	8000f94 <HAL_GetTick>
 8003620:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003624:	f7fd fcb6 	bl	8000f94 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e09f      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	2b01      	cmp	r3, #1
 8003646:	f040 8095 	bne.w	8003774 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003650:	f7fd fca0 	bl	8000f94 <HAL_GetTick>
 8003654:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003656:	e00f      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003658:	f7fd fc9c 	bl	8000f94 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d908      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e085      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	42470068 	.word	0x42470068
 8003674:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003678:	4b41      	ldr	r3, [pc, #260]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003684:	d0e8      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02b      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d127      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	431a      	orrs	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	061b      	lsls	r3, r3, #24
 80036dc:	4928      	ldr	r1, [pc, #160]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	3b01      	subs	r3, #1
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	4922      	ldr	r1, [pc, #136]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01d      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003712:	d118      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	0e1b      	lsrs	r3, r3, #24
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	019b      	lsls	r3, r3, #6
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	3b01      	subs	r3, #1
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	4910      	ldr	r1, [pc, #64]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800374c:	f7fd fc22 	bl	8000f94 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003754:	f7fd fc1e 	bl	8000f94 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e007      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003772:	d1ef      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3730      	adds	r7, #48	; 0x30
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	42470070 	.word	0x42470070

08003788 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	f200 8224 	bhi.w	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080039bb 	.word	0x080039bb
 80037bc:	08003ae5 	.word	0x08003ae5
 80037c0:	08003bfb 	.word	0x08003bfb
 80037c4:	080037d9 	.word	0x080037d9
 80037c8:	08003bfb 	.word	0x08003bfb
 80037cc:	08003bfb 	.word	0x08003bfb
 80037d0:	08003bfb 	.word	0x08003bfb
 80037d4:	080037d9 	.word	0x080037d9
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80037d8:	4ba8      	ldr	r3, [pc, #672]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037de:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ee:	f000 80d6 	beq.w	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037f8:	f200 80dd 	bhi.w	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003802:	f000 809f 	beq.w	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800380c:	f200 80d3 	bhi.w	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003816:	d05b      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381e:	f200 80ca 	bhi.w	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003828:	f000 80b6 	beq.w	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003832:	f200 80c0 	bhi.w	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800383c:	f000 8082 	beq.w	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003846:	f200 80b6 	bhi.w	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003856:	d03b      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003858:	e0ad      	b.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800385a:	4b88      	ldr	r3, [pc, #544]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003866:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003870:	4a83      	ldr	r2, [pc, #524]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e008      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800387a:	4b80      	ldr	r3, [pc, #512]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003884:	4a7f      	ldr	r2, [pc, #508]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800388c:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	0e1b      	lsrs	r3, r3, #24
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800389a:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	fb03 f202 	mul.w	r2, r3, r2
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80038b4:	4b71      	ldr	r3, [pc, #452]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	61fb      	str	r3, [r7, #28]
          break;
 80038ce:	e073      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80038d0:	4b6a      	ldr	r3, [pc, #424]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038dc:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e6:	4a66      	ldr	r2, [pc, #408]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	e008      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80038f0:	4b62      	ldr	r3, [pc, #392]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fa:	4a62      	ldr	r2, [pc, #392]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003902:	4b5e      	ldr	r3, [pc, #376]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003908:	0e1b      	lsrs	r3, r3, #24
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003910:	4b5a      	ldr	r3, [pc, #360]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	fb03 f202 	mul.w	r2, r3, r2
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800392a:	4b54      	ldr	r3, [pc, #336]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800392c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	3301      	adds	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	61fb      	str	r3, [r7, #28]
          break;
 8003942:	e039      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003944:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003950:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003958:	4a49      	ldr	r2, [pc, #292]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e007      	b.n	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003962:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003972:	4b42      	ldr	r3, [pc, #264]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0f1b      	lsrs	r3, r3, #28
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	fb03 f202 	mul.w	r2, r3, r2
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	61fb      	str	r3, [r7, #28]
          break;
 8003996:	e00f      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800399a:	61fb      	str	r3, [r7, #28]
          break;
 800399c:	e00c      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80039aa:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80039ac:	61fb      	str	r3, [r7, #28]
          break;
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039b2:	61fb      	str	r3, [r7, #28]
          break;
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80039b6:	bf00      	nop
        }
      }
      break;
 80039b8:	e11f      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80039ba:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80039cc:	d079      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80039d4:	f200 8082 	bhi.w	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039de:	d03c      	beq.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e6:	d879      	bhi.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f4:	d172      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80039f8:	61fb      	str	r3, [r7, #28]
          break;
 80039fa:	e072      	b.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a08:	d109      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	e008      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4a:	0f1b      	lsrs	r3, r3, #28
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	61fb      	str	r3, [r7, #28]
          break;
 8003a58:	e043      	b.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a66:	d111      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e010      	b.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	00f42400 	.word	0x00f42400
 8003a84:	00b71b00 	.word	0x00b71b00
 8003a88:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a8c:	4b5e      	ldr	r3, [pc, #376]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a94:	4a5d      	ldr	r2, [pc, #372]	; (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003a9c:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0f1b      	lsrs	r3, r3, #28
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	61fb      	str	r3, [r7, #28]
          break;
 8003ac0:	e00f      	b.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ac2:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003ad0:	4b4f      	ldr	r3, [pc, #316]	; (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003ad2:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ad8:	61fb      	str	r3, [r7, #28]
          break;
 8003ada:	e002      	b.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
          break;
 8003ae0:	bf00      	nop
        }
      }
      break;
 8003ae2:	e08a      	b.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003ae4:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aea:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003af6:	d06f      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003afe:	d878      	bhi.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b06:	d03c      	beq.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0e:	d870      	bhi.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1c:	d169      	bne.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003b20:	61fb      	str	r3, [r7, #28]
          break;
 8003b22:	e069      	b.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b24:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b30:	d109      	bne.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b32:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b3c:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b50:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	099b      	lsrs	r3, r3, #6
 8003b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b6c:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b72:	0f1b      	lsrs	r3, r3, #28
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	61fb      	str	r3, [r7, #28]
          break;
 8003b80:	e03a      	b.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b82:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8e:	d108      	bne.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e007      	b.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ba2:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0f1b      	lsrs	r3, r3, #28
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	61fb      	str	r3, [r7, #28]
          break;
 8003bd6:	e00f      	b.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be4:	d102      	bne.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003be8:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003bea:	e005      	b.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003bec:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003bee:	61fb      	str	r3, [r7, #28]
          break;
 8003bf0:	e002      	b.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
          break;
 8003bf6:	bf00      	nop
        }
      }
      break;
 8003bf8:	bf00      	nop
    }
  }
  return frequency;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3724      	adds	r7, #36	; 0x24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	00b71b00 	.word	0x00b71b00
 8003c14:	00bb8000 	.word	0x00bb8000

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b0a6      	sub	sp, #152	; 0x98
 8003c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3e:	4bc8      	ldr	r3, [pc, #800]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	f200 817e 	bhi.w	8003f48 <HAL_RCC_GetSysClockFreq+0x330>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c89 	.word	0x08003c89
 8003c58:	08003f49 	.word	0x08003f49
 8003c5c:	08003f49 	.word	0x08003f49
 8003c60:	08003f49 	.word	0x08003f49
 8003c64:	08003c91 	.word	0x08003c91
 8003c68:	08003f49 	.word	0x08003f49
 8003c6c:	08003f49 	.word	0x08003f49
 8003c70:	08003f49 	.word	0x08003f49
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003f49 	.word	0x08003f49
 8003c7c:	08003f49 	.word	0x08003f49
 8003c80:	08003f49 	.word	0x08003f49
 8003c84:	08003e03 	.word	0x08003e03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4bb6      	ldr	r3, [pc, #728]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003c8e:	e15f      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c90:	4bb5      	ldr	r3, [pc, #724]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003c96:	e15b      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c98:	4bb1      	ldr	r3, [pc, #708]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca4:	4bae      	ldr	r3, [pc, #696]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d031      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb0:	4bab      	ldr	r3, [pc, #684]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003cc8:	4ba7      	ldr	r3, [pc, #668]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003cce:	462a      	mov	r2, r5
 8003cd0:	fb03 f202 	mul.w	r2, r3, r2
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	4aa2      	ldr	r2, [pc, #648]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	fba1 1202 	umull	r1, r2, r1, r2
 8003ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ce8:	460a      	mov	r2, r1
 8003cea:	67ba      	str	r2, [r7, #120]	; 0x78
 8003cec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003cee:	4413      	add	r3, r2
 8003cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cfa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003cfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d00:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003d04:	f7fc fa7e 	bl	8000204 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d12:	e064      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d14:	4b92      	ldr	r3, [pc, #584]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d1e:	657a      	str	r2, [r7, #84]	; 0x54
 8003d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d28:	2300      	movs	r3, #0
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d30:	4622      	mov	r2, r4
 8003d32:	462b      	mov	r3, r5
 8003d34:	f04f 0000 	mov.w	r0, #0
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	0159      	lsls	r1, r3, #5
 8003d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d42:	0150      	lsls	r0, r2, #5
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4621      	mov	r1, r4
 8003d4a:	1a51      	subs	r1, r2, r1
 8003d4c:	6139      	str	r1, [r7, #16]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	eb63 0301 	sbc.w	r3, r3, r1
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d62:	4659      	mov	r1, fp
 8003d64:	018b      	lsls	r3, r1, #6
 8003d66:	4651      	mov	r1, sl
 8003d68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	018a      	lsls	r2, r1, #6
 8003d70:	4651      	mov	r1, sl
 8003d72:	ebb2 0801 	subs.w	r8, r2, r1
 8003d76:	4659      	mov	r1, fp
 8003d78:	eb63 0901 	sbc.w	r9, r3, r1
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d90:	4690      	mov	r8, r2
 8003d92:	4699      	mov	r9, r3
 8003d94:	4623      	mov	r3, r4
 8003d96:	eb18 0303 	adds.w	r3, r8, r3
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	eb49 0303 	adc.w	r3, r9, r3
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003db0:	4629      	mov	r1, r5
 8003db2:	028b      	lsls	r3, r1, #10
 8003db4:	4621      	mov	r1, r4
 8003db6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dba:	4621      	mov	r1, r4
 8003dbc:	028a      	lsls	r2, r1, #10
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dca:	647a      	str	r2, [r7, #68]	; 0x44
 8003dcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dd0:	f7fc fa18 	bl	8000204 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dde:	4b60      	ldr	r3, [pc, #384]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	3301      	adds	r3, #1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003df0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e00:	e0a6      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e02:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0e:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02a      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b51      	ldr	r3, [pc, #324]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	2200      	movs	r2, #0
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e30:	fb03 f201 	mul.w	r2, r3, r1
 8003e34:	2300      	movs	r3, #0
 8003e36:	fb00 f303 	mul.w	r3, r0, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e42:	677a      	str	r2, [r7, #116]	; 0x74
 8003e44:	460a      	mov	r2, r1
 8003e46:	673a      	str	r2, [r7, #112]	; 0x70
 8003e48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e4a:	4413      	add	r3, r2
 8003e4c:	677b      	str	r3, [r7, #116]	; 0x74
 8003e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e52:	2200      	movs	r2, #0
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	637a      	str	r2, [r7, #52]	; 0x34
 8003e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003e60:	f7fc f9d0 	bl	8000204 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e6e:	e05b      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e70:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	2200      	movs	r2, #0
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
 8003e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	0159      	lsls	r1, r3, #5
 8003e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e9e:	0150      	lsls	r0, r2, #5
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	00eb      	lsls	r3, r5, #3
 8003ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eda:	00e2      	lsls	r2, r4, #3
 8003edc:	4614      	mov	r4, r2
 8003ede:	461d      	mov	r5, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	18e3      	adds	r3, r4, r3
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	eb45 0303 	adc.w	r3, r5, r3
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003efa:	4629      	mov	r1, r5
 8003efc:	028b      	lsls	r3, r1, #10
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f04:	4621      	mov	r1, r4
 8003f06:	028a      	lsls	r2, r1, #10
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f10:	2200      	movs	r2, #0
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	61fa      	str	r2, [r7, #28]
 8003f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f1a:	f7fc f973 	bl	8000204 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4613      	mov	r3, r2
 8003f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f28:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	0f1b      	lsrs	r3, r3, #28
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003f46:	e003      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003f4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3798      	adds	r7, #152	; 0x98
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	00f42400 	.word	0x00f42400
 8003f68:	00b71b00 	.word	0x00b71b00

08003f6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e28d      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8083 	beq.w	8004092 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f8c:	4b94      	ldr	r3, [pc, #592]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d019      	beq.n	8003fcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f98:	4b91      	ldr	r3, [pc, #580]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fa4:	4b8e      	ldr	r3, [pc, #568]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb0:	d00c      	beq.n	8003fcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb2:	4b8b      	ldr	r3, [pc, #556]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d112      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d05b      	beq.n	8004090 <HAL_RCC_OscConfig+0x124>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d157      	bne.n	8004090 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e25a      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x90>
 8003fee:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7b      	ldr	r2, [pc, #492]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e01d      	b.n	8004038 <HAL_RCC_OscConfig+0xcc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0xb4>
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 800400c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a72      	ldr	r2, [pc, #456]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e00b      	b.n	8004038 <HAL_RCC_OscConfig+0xcc>
 8004020:	4b6f      	ldr	r3, [pc, #444]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6e      	ldr	r2, [pc, #440]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6b      	ldr	r2, [pc, #428]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fc ffa8 	bl	8000f94 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7fc ffa4 	bl	8000f94 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e21f      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0xdc>
 8004066:	e014      	b.n	8004092 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fc ff94 	bl	8000f94 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004070:	f7fc ff90 	bl	8000f94 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e20b      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004082:	4b57      	ldr	r3, [pc, #348]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x104>
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d06f      	beq.n	800417e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800409e:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d017      	beq.n	80040da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040aa:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d105      	bne.n	80040c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040b6:	4b4a      	ldr	r3, [pc, #296]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c2:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	d11c      	bne.n	8004108 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b44      	ldr	r3, [pc, #272]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d116      	bne.n	8004108 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_RCC_OscConfig+0x186>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e1d3      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4937      	ldr	r1, [pc, #220]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	e03a      	b.n	800417e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004110:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <HAL_RCC_OscConfig+0x278>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fc ff3d 	bl	8000f94 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411e:	f7fc ff39 	bl	8000f94 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e1b4      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413c:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4925      	ldr	r1, [pc, #148]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
 8004150:	e015      	b.n	800417e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_RCC_OscConfig+0x278>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fc ff1c 	bl	8000f94 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004160:	f7fc ff18 	bl	8000f94 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e193      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d036      	beq.n	80041f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d016      	beq.n	80041c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_RCC_OscConfig+0x27c>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fc fefc 	bl	8000f94 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a0:	f7fc fef8 	bl	8000f94 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e173      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x274>)
 80041b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x234>
 80041be:	e01b      	b.n	80041f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c6:	f7fc fee5 	bl	8000f94 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	e00e      	b.n	80041ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ce:	f7fc fee1 	bl	8000f94 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d907      	bls.n	80041ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e15c      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	42470000 	.word	0x42470000
 80041e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ec:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80041ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ea      	bne.n	80041ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8097 	beq.w	8004334 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420a:	4b83      	ldr	r3, [pc, #524]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10f      	bne.n	8004236 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	4b7f      	ldr	r3, [pc, #508]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a7e      	ldr	r2, [pc, #504]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b7c      	ldr	r3, [pc, #496]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b79      	ldr	r3, [pc, #484]	; (800441c <HAL_RCC_OscConfig+0x4b0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d118      	bne.n	8004274 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004242:	4b76      	ldr	r3, [pc, #472]	; (800441c <HAL_RCC_OscConfig+0x4b0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a75      	ldr	r2, [pc, #468]	; (800441c <HAL_RCC_OscConfig+0x4b0>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424e:	f7fc fea1 	bl	8000f94 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004256:	f7fc fe9d 	bl	8000f94 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e118      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <HAL_RCC_OscConfig+0x4b0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d106      	bne.n	800428a <HAL_RCC_OscConfig+0x31e>
 800427c:	4b66      	ldr	r3, [pc, #408]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a65      	ldr	r2, [pc, #404]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
 8004288:	e01c      	b.n	80042c4 <HAL_RCC_OscConfig+0x358>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x340>
 8004292:	4b61      	ldr	r3, [pc, #388]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a60      	ldr	r2, [pc, #384]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
 800429e:	4b5e      	ldr	r3, [pc, #376]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a5d      	ldr	r2, [pc, #372]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0x358>
 80042ac:	4b5a      	ldr	r3, [pc, #360]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a59      	ldr	r2, [pc, #356]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	4b57      	ldr	r3, [pc, #348]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a56      	ldr	r2, [pc, #344]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80042be:	f023 0304 	bic.w	r3, r3, #4
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fc fe62 	bl	8000f94 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fc fe5e 	bl	8000f94 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0d7      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ee      	beq.n	80042d4 <HAL_RCC_OscConfig+0x368>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fc fe4c 	bl	8000f94 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fc fe48 	bl	8000f94 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e0c1      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004316:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1ee      	bne.n	8004300 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004328:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 800432e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004332:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80ad 	beq.w	8004498 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800433e:	4b36      	ldr	r3, [pc, #216]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b08      	cmp	r3, #8
 8004348:	d060      	beq.n	800440c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d145      	bne.n	80043de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_OscConfig+0x4b4>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fc fe1c 	bl	8000f94 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004360:	f7fc fe18 	bl	8000f94 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e093      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	491b      	ldr	r1, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x4b4>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b6:	f7fc fded 	bl	8000f94 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043be:	f7fc fde9 	bl	8000f94 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e064      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x452>
 80043dc:	e05c      	b.n	8004498 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCC_OscConfig+0x4b4>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fc fdd6 	bl	8000f94 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fc fdd2 	bl	8000f94 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04d      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_OscConfig+0x4ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x480>
 800440a:	e045      	b.n	8004498 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e040      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
 8004418:	40023800 	.word	0x40023800
 800441c:	40007000 	.word	0x40007000
 8004420:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <HAL_RCC_OscConfig+0x538>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d030      	beq.n	8004494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d129      	bne.n	8004494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d122      	bne.n	8004494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004454:	4013      	ands	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800445a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445c:	4293      	cmp	r3, r2
 800445e:	d119      	bne.n	8004494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	3b01      	subs	r3, #1
 800446e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d10f      	bne.n	8004494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800

080044a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e07b      	b.n	80045b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ca:	d009      	beq.n	80044e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
 80044d2:	e005      	b.n	80044e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fc fbb0 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	ea42 0103 	orr.w	r1, r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	f003 0104 	and.w	r1, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0210 	and.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e03f      	b.n	800464c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fc fb85 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2224      	movs	r2, #36	; 0x24
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f828 	bl	8004654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004612:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004622:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004632:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004658:	b0c0      	sub	sp, #256	; 0x100
 800465a:	af00      	add	r7, sp, #0
 800465c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004670:	68d9      	ldr	r1, [r3, #12]
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	ea40 0301 	orr.w	r3, r0, r1
 800467c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	431a      	orrs	r2, r3
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	431a      	orrs	r2, r3
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046ac:	f021 010c 	bic.w	r1, r1, #12
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ba:	430b      	orrs	r3, r1
 80046bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ce:	6999      	ldr	r1, [r3, #24]
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	ea40 0301 	orr.w	r3, r0, r1
 80046da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b8f      	ldr	r3, [pc, #572]	; (8004920 <UART_SetConfig+0x2cc>)
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d005      	beq.n	80046f4 <UART_SetConfig+0xa0>
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b8d      	ldr	r3, [pc, #564]	; (8004924 <UART_SetConfig+0x2d0>)
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d104      	bne.n	80046fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7fe fd0a 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80046f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046fc:	e003      	b.n	8004706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046fe:	f7fe fcf1 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8004702:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004710:	f040 810c 	bne.w	800492c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800471e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004726:	4622      	mov	r2, r4
 8004728:	462b      	mov	r3, r5
 800472a:	1891      	adds	r1, r2, r2
 800472c:	65b9      	str	r1, [r7, #88]	; 0x58
 800472e:	415b      	adcs	r3, r3
 8004730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004736:	4621      	mov	r1, r4
 8004738:	eb12 0801 	adds.w	r8, r2, r1
 800473c:	4629      	mov	r1, r5
 800473e:	eb43 0901 	adc.w	r9, r3, r1
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800474e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004756:	4690      	mov	r8, r2
 8004758:	4699      	mov	r9, r3
 800475a:	4623      	mov	r3, r4
 800475c:	eb18 0303 	adds.w	r3, r8, r3
 8004760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004764:	462b      	mov	r3, r5
 8004766:	eb49 0303 	adc.w	r3, r9, r3
 800476a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800477a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800477e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004782:	460b      	mov	r3, r1
 8004784:	18db      	adds	r3, r3, r3
 8004786:	653b      	str	r3, [r7, #80]	; 0x50
 8004788:	4613      	mov	r3, r2
 800478a:	eb42 0303 	adc.w	r3, r2, r3
 800478e:	657b      	str	r3, [r7, #84]	; 0x54
 8004790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004798:	f7fb fd34 	bl	8000204 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4b61      	ldr	r3, [pc, #388]	; (8004928 <UART_SetConfig+0x2d4>)
 80047a2:	fba3 2302 	umull	r2, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	011c      	lsls	r4, r3, #4
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047bc:	4642      	mov	r2, r8
 80047be:	464b      	mov	r3, r9
 80047c0:	1891      	adds	r1, r2, r2
 80047c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80047c4:	415b      	adcs	r3, r3
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047cc:	4641      	mov	r1, r8
 80047ce:	eb12 0a01 	adds.w	sl, r2, r1
 80047d2:	4649      	mov	r1, r9
 80047d4:	eb43 0b01 	adc.w	fp, r3, r1
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ec:	4692      	mov	sl, r2
 80047ee:	469b      	mov	fp, r3
 80047f0:	4643      	mov	r3, r8
 80047f2:	eb1a 0303 	adds.w	r3, sl, r3
 80047f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047fa:	464b      	mov	r3, r9
 80047fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004810:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004818:	460b      	mov	r3, r1
 800481a:	18db      	adds	r3, r3, r3
 800481c:	643b      	str	r3, [r7, #64]	; 0x40
 800481e:	4613      	mov	r3, r2
 8004820:	eb42 0303 	adc.w	r3, r2, r3
 8004824:	647b      	str	r3, [r7, #68]	; 0x44
 8004826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800482a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800482e:	f7fb fce9 	bl	8000204 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4611      	mov	r1, r2
 8004838:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <UART_SetConfig+0x2d4>)
 800483a:	fba3 2301 	umull	r2, r3, r3, r1
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	2264      	movs	r2, #100	; 0x64
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	1acb      	subs	r3, r1, r3
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800484e:	4b36      	ldr	r3, [pc, #216]	; (8004928 <UART_SetConfig+0x2d4>)
 8004850:	fba3 2302 	umull	r2, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800485c:	441c      	add	r4, r3
 800485e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004862:	2200      	movs	r2, #0
 8004864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004868:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800486c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004870:	4642      	mov	r2, r8
 8004872:	464b      	mov	r3, r9
 8004874:	1891      	adds	r1, r2, r2
 8004876:	63b9      	str	r1, [r7, #56]	; 0x38
 8004878:	415b      	adcs	r3, r3
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004880:	4641      	mov	r1, r8
 8004882:	1851      	adds	r1, r2, r1
 8004884:	6339      	str	r1, [r7, #48]	; 0x30
 8004886:	4649      	mov	r1, r9
 8004888:	414b      	adcs	r3, r1
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004898:	4659      	mov	r1, fp
 800489a:	00cb      	lsls	r3, r1, #3
 800489c:	4651      	mov	r1, sl
 800489e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a2:	4651      	mov	r1, sl
 80048a4:	00ca      	lsls	r2, r1, #3
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	4642      	mov	r2, r8
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048b4:	464b      	mov	r3, r9
 80048b6:	460a      	mov	r2, r1
 80048b8:	eb42 0303 	adc.w	r3, r2, r3
 80048bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048d4:	460b      	mov	r3, r1
 80048d6:	18db      	adds	r3, r3, r3
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048da:	4613      	mov	r3, r2
 80048dc:	eb42 0303 	adc.w	r3, r2, r3
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048ea:	f7fb fc8b 	bl	8000204 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <UART_SetConfig+0x2d4>)
 80048f4:	fba3 1302 	umull	r1, r3, r3, r2
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	2164      	movs	r1, #100	; 0x64
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	3332      	adds	r3, #50	; 0x32
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <UART_SetConfig+0x2d4>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	f003 0207 	and.w	r2, r3, #7
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4422      	add	r2, r4
 800491a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800491c:	e105      	b.n	8004b2a <UART_SetConfig+0x4d6>
 800491e:	bf00      	nop
 8004920:	40011000 	.word	0x40011000
 8004924:	40011400 	.word	0x40011400
 8004928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800492c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800493a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800493e:	4642      	mov	r2, r8
 8004940:	464b      	mov	r3, r9
 8004942:	1891      	adds	r1, r2, r2
 8004944:	6239      	str	r1, [r7, #32]
 8004946:	415b      	adcs	r3, r3
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800494e:	4641      	mov	r1, r8
 8004950:	1854      	adds	r4, r2, r1
 8004952:	4649      	mov	r1, r9
 8004954:	eb43 0501 	adc.w	r5, r3, r1
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	00eb      	lsls	r3, r5, #3
 8004962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004966:	00e2      	lsls	r2, r4, #3
 8004968:	4614      	mov	r4, r2
 800496a:	461d      	mov	r5, r3
 800496c:	4643      	mov	r3, r8
 800496e:	18e3      	adds	r3, r4, r3
 8004970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004974:	464b      	mov	r3, r9
 8004976:	eb45 0303 	adc.w	r3, r5, r3
 800497a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800498a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800499a:	4629      	mov	r1, r5
 800499c:	008b      	lsls	r3, r1, #2
 800499e:	4621      	mov	r1, r4
 80049a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a4:	4621      	mov	r1, r4
 80049a6:	008a      	lsls	r2, r1, #2
 80049a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049ac:	f7fb fc2a 	bl	8000204 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4b60      	ldr	r3, [pc, #384]	; (8004b38 <UART_SetConfig+0x4e4>)
 80049b6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	011c      	lsls	r4, r3, #4
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	61b9      	str	r1, [r7, #24]
 80049d8:	415b      	adcs	r3, r3
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e0:	4641      	mov	r1, r8
 80049e2:	1851      	adds	r1, r2, r1
 80049e4:	6139      	str	r1, [r7, #16]
 80049e6:	4649      	mov	r1, r9
 80049e8:	414b      	adcs	r3, r1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f8:	4659      	mov	r1, fp
 80049fa:	00cb      	lsls	r3, r1, #3
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a02:	4651      	mov	r1, sl
 8004a04:	00ca      	lsls	r2, r1, #3
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a14:	464b      	mov	r3, r9
 8004a16:	460a      	mov	r2, r1
 8004a18:	eb42 0303 	adc.w	r3, r2, r3
 8004a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a38:	4649      	mov	r1, r9
 8004a3a:	008b      	lsls	r3, r1, #2
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a42:	4641      	mov	r1, r8
 8004a44:	008a      	lsls	r2, r1, #2
 8004a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a4a:	f7fb fbdb 	bl	8000204 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4b39      	ldr	r3, [pc, #228]	; (8004b38 <UART_SetConfig+0x4e4>)
 8004a54:	fba3 1302 	umull	r1, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	2164      	movs	r1, #100	; 0x64
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	3332      	adds	r3, #50	; 0x32
 8004a66:	4a34      	ldr	r2, [pc, #208]	; (8004b38 <UART_SetConfig+0x4e4>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a72:	441c      	add	r4, r3
 8004a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a78:	2200      	movs	r2, #0
 8004a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a7c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a82:	4642      	mov	r2, r8
 8004a84:	464b      	mov	r3, r9
 8004a86:	1891      	adds	r1, r2, r2
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	415b      	adcs	r3, r3
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a92:	4641      	mov	r1, r8
 8004a94:	1851      	adds	r1, r2, r1
 8004a96:	6039      	str	r1, [r7, #0]
 8004a98:	4649      	mov	r1, r9
 8004a9a:	414b      	adcs	r3, r1
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aaa:	4659      	mov	r1, fp
 8004aac:	00cb      	lsls	r3, r1, #3
 8004aae:	4651      	mov	r1, sl
 8004ab0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	00ca      	lsls	r2, r1, #3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	4642      	mov	r2, r8
 8004ac0:	189b      	adds	r3, r3, r2
 8004ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ad8:	667a      	str	r2, [r7, #100]	; 0x64
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	008b      	lsls	r3, r1, #2
 8004aea:	4641      	mov	r1, r8
 8004aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af0:	4641      	mov	r1, r8
 8004af2:	008a      	lsls	r2, r1, #2
 8004af4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004af8:	f7fb fb84 	bl	8000204 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <UART_SetConfig+0x4e4>)
 8004b02:	fba3 1302 	umull	r1, r3, r3, r2
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2164      	movs	r1, #100	; 0x64
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	3332      	adds	r3, #50	; 0x32
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <UART_SetConfig+0x4e4>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	f003 020f 	and.w	r2, r3, #15
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4422      	add	r2, r4
 8004b28:	609a      	str	r2, [r3, #8]
}
 8004b2a:	bf00      	nop
 8004b2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b36:	bf00      	nop
 8004b38:	51eb851f 	.word	0x51eb851f

08004b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	f107 001c 	add.w	r0, r7, #28
 8004b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d122      	bne.n	8004b9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f001 fbe8 	bl	8006364 <USB_CoreReset>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e01a      	b.n	8004bd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f001 fbdc 	bl	8006364 <USB_CoreReset>
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
 8004bc2:	e005      	b.n	8004bd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10b      	bne.n	8004bee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f043 0206 	orr.w	r2, r3, #6
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f043 0220 	orr.w	r2, r3, #32
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bfa:	b004      	add	sp, #16
 8004bfc:	4770      	bx	lr
	...

08004c00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d165      	bne.n	8004ce0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a41      	ldr	r2, [pc, #260]	; (8004d1c <USB_SetTurnaroundTime+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d906      	bls.n	8004c2a <USB_SetTurnaroundTime+0x2a>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a40      	ldr	r2, [pc, #256]	; (8004d20 <USB_SetTurnaroundTime+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d202      	bcs.n	8004c2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c24:	230f      	movs	r3, #15
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e062      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4a3c      	ldr	r2, [pc, #240]	; (8004d20 <USB_SetTurnaroundTime+0x120>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d306      	bcc.n	8004c40 <USB_SetTurnaroundTime+0x40>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <USB_SetTurnaroundTime+0x124>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d202      	bcs.n	8004c40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c3a:	230e      	movs	r3, #14
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e057      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <USB_SetTurnaroundTime+0x124>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d306      	bcc.n	8004c56 <USB_SetTurnaroundTime+0x56>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a37      	ldr	r2, [pc, #220]	; (8004d28 <USB_SetTurnaroundTime+0x128>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d202      	bcs.n	8004c56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c50:	230d      	movs	r3, #13
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e04c      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4a33      	ldr	r2, [pc, #204]	; (8004d28 <USB_SetTurnaroundTime+0x128>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d306      	bcc.n	8004c6c <USB_SetTurnaroundTime+0x6c>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a32      	ldr	r2, [pc, #200]	; (8004d2c <USB_SetTurnaroundTime+0x12c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d802      	bhi.n	8004c6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c66:	230c      	movs	r3, #12
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e041      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <USB_SetTurnaroundTime+0x12c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d906      	bls.n	8004c82 <USB_SetTurnaroundTime+0x82>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <USB_SetTurnaroundTime+0x130>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d802      	bhi.n	8004c82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c7c:	230b      	movs	r3, #11
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e036      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <USB_SetTurnaroundTime+0x130>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d906      	bls.n	8004c98 <USB_SetTurnaroundTime+0x98>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <USB_SetTurnaroundTime+0x134>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d802      	bhi.n	8004c98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c92:	230a      	movs	r3, #10
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e02b      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <USB_SetTurnaroundTime+0x134>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d906      	bls.n	8004cae <USB_SetTurnaroundTime+0xae>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <USB_SetTurnaroundTime+0x138>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d202      	bcs.n	8004cae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ca8:	2309      	movs	r3, #9
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e020      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <USB_SetTurnaroundTime+0x138>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d306      	bcc.n	8004cc4 <USB_SetTurnaroundTime+0xc4>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <USB_SetTurnaroundTime+0x13c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d802      	bhi.n	8004cc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e015      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <USB_SetTurnaroundTime+0x13c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d906      	bls.n	8004cda <USB_SetTurnaroundTime+0xda>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <USB_SetTurnaroundTime+0x140>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d202      	bcs.n	8004cda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004cd4:	2307      	movs	r3, #7
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e00a      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004cda:	2306      	movs	r3, #6
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	e007      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ce6:	2309      	movs	r3, #9
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e001      	b.n	8004cf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004cec:	2309      	movs	r3, #9
 8004cee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	00d8acbf 	.word	0x00d8acbf
 8004d20:	00e4e1c0 	.word	0x00e4e1c0
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	01067380 	.word	0x01067380
 8004d2c:	011a499f 	.word	0x011a499f
 8004d30:	01312cff 	.word	0x01312cff
 8004d34:	014ca43f 	.word	0x014ca43f
 8004d38:	016e3600 	.word	0x016e3600
 8004d3c:	01a6ab1f 	.word	0x01a6ab1f
 8004d40:	01e84800 	.word	0x01e84800

08004d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f043 0201 	orr.w	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d115      	bne.n	8004dd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004db6:	2001      	movs	r0, #1
 8004db8:	f7fc f8f8 	bl	8000fac <HAL_Delay>
      ms++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f001 fa3f 	bl	8006246 <USB_GetMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d01e      	beq.n	8004e0c <USB_SetCurrentMode+0x84>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b31      	cmp	r3, #49	; 0x31
 8004dd2:	d9f0      	bls.n	8004db6 <USB_SetCurrentMode+0x2e>
 8004dd4:	e01a      	b.n	8004e0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d115      	bne.n	8004e08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004de8:	2001      	movs	r0, #1
 8004dea:	f7fc f8df 	bl	8000fac <HAL_Delay>
      ms++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 fa26 	bl	8006246 <USB_GetMode>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <USB_SetCurrentMode+0x84>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b31      	cmp	r3, #49	; 0x31
 8004e04:	d9f0      	bls.n	8004de8 <USB_SetCurrentMode+0x60>
 8004e06:	e001      	b.n	8004e0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e005      	b.n	8004e18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b32      	cmp	r3, #50	; 0x32
 8004e10:	d101      	bne.n	8004e16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e20:	b084      	sub	sp, #16
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e009      	b.n	8004e54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3340      	adds	r3, #64	; 0x40
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	3301      	adds	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b0e      	cmp	r3, #14
 8004e58:	d9f2      	bls.n	8004e40 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d11c      	bne.n	8004e9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e6e:	f043 0302 	orr.w	r3, r3, #2
 8004e72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e005      	b.n	8004ea6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb8:	4619      	mov	r1, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	680b      	ldr	r3, [r1, #0]
 8004ec4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d10c      	bne.n	8004ee6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d104      	bne.n	8004edc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f965 	bl	80051a4 <USB_SetDevSpeed>
 8004eda:	e008      	b.n	8004eee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004edc:	2101      	movs	r1, #1
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f960 	bl	80051a4 <USB_SetDevSpeed>
 8004ee4:	e003      	b.n	8004eee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ee6:	2103      	movs	r1, #3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f95b 	bl	80051a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004eee:	2110      	movs	r1, #16
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f8f3 	bl	80050dc <USB_FlushTxFifo>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f91f 	bl	8005144 <USB_FlushRxFifo>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	461a      	mov	r2, r3
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f22:	461a      	mov	r2, r3
 8004f24:	2300      	movs	r3, #0
 8004f26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e043      	b.n	8004fc2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f50:	d118      	bne.n	8004f84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	461a      	mov	r2, r3
 8004f66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e013      	b.n	8004f96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e008      	b.n	8004f96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	461a      	mov	r2, r3
 8004f92:	2300      	movs	r3, #0
 8004f94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3b7      	bcc.n	8004f3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	e043      	b.n	8005058 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe6:	d118      	bne.n	800501a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e013      	b.n	800502c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e008      	b.n	800502c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	461a      	mov	r2, r3
 800504c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005050:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3301      	adds	r3, #1
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d3b7      	bcc.n	8004fd0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800506e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005072:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005080:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f043 0210 	orr.w	r2, r3, #16
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699a      	ldr	r2, [r3, #24]
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <USB_DevInit+0x2b8>)
 800509a:	4313      	orrs	r3, r2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f043 0208 	orr.w	r2, r3, #8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050c0:	f043 0304 	orr.w	r3, r3, #4
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050d4:	b004      	add	sp, #16
 80050d6:	4770      	bx	lr
 80050d8:	803c3800 	.word	0x803c3800

080050dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a13      	ldr	r2, [pc, #76]	; (8005140 <USB_FlushTxFifo+0x64>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e01b      	b.n	8005134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	daf2      	bge.n	80050ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	019b      	lsls	r3, r3, #6
 800510c:	f043 0220 	orr.w	r2, r3, #32
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <USB_FlushTxFifo+0x64>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e006      	b.n	8005134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d0f0      	beq.n	8005114 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	00030d40 	.word	0x00030d40

08005144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3301      	adds	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <USB_FlushRxFifo+0x5c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e018      	b.n	8005194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	daf2      	bge.n	8005150 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2210      	movs	r2, #16
 8005172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3301      	adds	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <USB_FlushRxFifo+0x5c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e006      	b.n	8005194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b10      	cmp	r3, #16
 8005190:	d0f0      	beq.n	8005174 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	00030d40 	.word	0x00030d40

080051a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b087      	sub	sp, #28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0306 	and.w	r3, r3, #6
 80051ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
 80051fa:	e00a      	b.n	8005212 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d002      	beq.n	8005208 <USB_GetDevSpeed+0x32>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b06      	cmp	r3, #6
 8005206:	d102      	bne.n	800520e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005208:	2302      	movs	r3, #2
 800520a:	75fb      	strb	r3, [r7, #23]
 800520c:	e001      	b.n	8005212 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800520e:	230f      	movs	r3, #15
 8005210:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
}
 8005214:	4618      	mov	r0, r3
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d13a      	bne.n	80052b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	2101      	movs	r1, #1
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	b29b      	uxth	r3, r3
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800525a:	4313      	orrs	r3, r2
 800525c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d155      	bne.n	8005320 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	791b      	ldrb	r3, [r3, #4]
 800528e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005290:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	059b      	lsls	r3, r3, #22
 8005296:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005298:	4313      	orrs	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	e036      	b.n	8005320 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	2101      	movs	r1, #1
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d11a      	bne.n	8005320 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	791b      	ldrb	r3, [r3, #4]
 8005304:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005306:	430b      	orrs	r3, r1
 8005308:	4313      	orrs	r3, r2
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d161      	bne.n	8005410 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005362:	d11f      	bne.n	80053a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005382:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	2101      	movs	r1, #1
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c4:	4013      	ands	r3, r2
 80053c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f303 	lsl.w	r3, r1, r3
 80053de:	b29b      	uxth	r3, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e8:	4013      	ands	r3, r2
 80053ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	0159      	lsls	r1, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	440b      	add	r3, r1
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	4619      	mov	r1, r3
 8005408:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <USB_DeactivateEndpoint+0x1b0>)
 800540a:	4013      	ands	r3, r2
 800540c:	600b      	str	r3, [r1, #0]
 800540e:	e060      	b.n	80054d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005426:	d11f      	bne.n	8005468 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005446:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005466:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	2101      	movs	r1, #1
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	43db      	mvns	r3, r3
 8005482:	68f9      	ldr	r1, [r7, #12]
 8005484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005488:	4013      	ands	r3, r2
 800548a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	2101      	movs	r1, #1
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	43db      	mvns	r3, r3
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ac:	4013      	ands	r3, r2
 80054ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	0159      	lsls	r1, r3, #5
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	440b      	add	r3, r1
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	4619      	mov	r1, r3
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <USB_DeactivateEndpoint+0x1b4>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	ec337800 	.word	0xec337800
 80054e4:	eff37800 	.word	0xeff37800

080054e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 815c 	bne.w	80057c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d132      	bne.n	8005578 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005530:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	0cdb      	lsrs	r3, r3, #19
 8005572:	04db      	lsls	r3, r3, #19
 8005574:	6113      	str	r3, [r2, #16]
 8005576:	e074      	b.n	8005662 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005592:	0cdb      	lsrs	r3, r3, #19
 8005594:	04db      	lsls	r3, r3, #19
 8005596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	440b      	add	r3, r1
 80055d4:	1e59      	subs	r1, r3, #1
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	fbb1 f3f3 	udiv	r3, r1, r3
 80055de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055e0:	4b9d      	ldr	r3, [pc, #628]	; (8005858 <USB_EPStartXfer+0x370>)
 80055e2:	400b      	ands	r3, r1
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	0148      	lsls	r0, r1, #5
 80055e8:	69f9      	ldr	r1, [r7, #28]
 80055ea:	4401      	add	r1, r0
 80055ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560a:	69b9      	ldr	r1, [r7, #24]
 800560c:	0148      	lsls	r0, r1, #5
 800560e:	69f9      	ldr	r1, [r7, #28]
 8005610:	4401      	add	r1, r0
 8005612:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005616:	4313      	orrs	r3, r2
 8005618:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	791b      	ldrb	r3, [r3, #4]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d11f      	bne.n	8005662 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005640:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005660:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d14b      	bne.n	8005700 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	791b      	ldrb	r3, [r3, #4]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d128      	bne.n	80056de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e00f      	b.n	80056de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e133      	b.n	8005968 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	440a      	add	r2, r1
 8005716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800571e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	791b      	ldrb	r3, [r3, #4]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d015      	beq.n	8005754 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 811b 	beq.w	8005968 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	2101      	movs	r1, #1
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	69f9      	ldr	r1, [r7, #28]
 800574a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800574e:	4313      	orrs	r3, r2
 8005750:	634b      	str	r3, [r1, #52]	; 0x34
 8005752:	e109      	b.n	8005968 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d110      	bne.n	8005786 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	440a      	add	r2, r1
 800577a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e00f      	b.n	80057a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6919      	ldr	r1, [r3, #16]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	b298      	uxth	r0, r3
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4603      	mov	r3, r0
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fade 	bl	8005d7c <USB_WritePacket>
 80057c0:	e0d2      	b.n	8005968 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057dc:	0cdb      	lsrs	r3, r3, #19
 80057de:	04db      	lsls	r3, r3, #19
 80057e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005804:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d126      	bne.n	800585c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	0148      	lsls	r0, r1, #5
 8005828:	69f9      	ldr	r1, [r7, #28]
 800582a:	4401      	add	r1, r0
 800582c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005830:	4313      	orrs	r3, r2
 8005832:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005852:	6113      	str	r3, [r2, #16]
 8005854:	e03a      	b.n	80058cc <USB_EPStartXfer+0x3e4>
 8005856:	bf00      	nop
 8005858:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4413      	add	r3, r2
 8005866:	1e5a      	subs	r2, r3, #1
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	8afa      	ldrh	r2, [r7, #22]
 8005878:	fb03 f202 	mul.w	r2, r3, r2
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	8afb      	ldrh	r3, [r7, #22]
 8005890:	04d9      	lsls	r1, r3, #19
 8005892:	4b38      	ldr	r3, [pc, #224]	; (8005974 <USB_EPStartXfer+0x48c>)
 8005894:	400b      	ands	r3, r1
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	0148      	lsls	r0, r1, #5
 800589a:	69f9      	ldr	r1, [r7, #28]
 800589c:	4401      	add	r1, r0
 800589e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058a2:	4313      	orrs	r3, r2
 80058a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058bc:	69b9      	ldr	r1, [r7, #24]
 80058be:	0148      	lsls	r0, r1, #5
 80058c0:	69f9      	ldr	r1, [r7, #28]
 80058c2:	4401      	add	r1, r0
 80058c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058c8:	4313      	orrs	r3, r2
 80058ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d10d      	bne.n	80058ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6919      	ldr	r1, [r3, #16]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	460a      	mov	r2, r1
 80058ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	791b      	ldrb	r3, [r3, #4]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d128      	bne.n	8005948 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d110      	bne.n	8005928 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e00f      	b.n	8005948 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005946:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	1ff80000 	.word	0x1ff80000

08005978 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	f040 80ce 	bne.w	8005b36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d132      	bne.n	8005a08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a00:	0cdb      	lsrs	r3, r3, #19
 8005a02:	04db      	lsls	r3, r3, #19
 8005a04:	6113      	str	r3, [r2, #16]
 8005a06:	e04e      	b.n	8005aa6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a22:	0cdb      	lsrs	r3, r3, #19
 8005a24:	04db      	lsls	r3, r3, #19
 8005a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d903      	bls.n	8005a60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a96:	6939      	ldr	r1, [r7, #16]
 8005a98:	0148      	lsls	r0, r1, #5
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	4401      	add	r1, r0
 8005a9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d11e      	bne.n	8005aea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e097      	b.n	8005c1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8083 	beq.w	8005c1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2a:	6979      	ldr	r1, [r7, #20]
 8005b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b30:	4313      	orrs	r3, r2
 8005b32:	634b      	str	r3, [r1, #52]	; 0x34
 8005b34:	e071      	b.n	8005c1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b50:	0cdb      	lsrs	r3, r3, #19
 8005b52:	04db      	lsls	r3, r3, #19
 8005b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bc8:	6939      	ldr	r1, [r7, #16]
 8005bca:	0148      	lsls	r0, r1, #5
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	4401      	add	r1, r0
 8005bd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10d      	bne.n	8005bfa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6919      	ldr	r1, [r3, #16]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d14a      	bne.n	8005cdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c5e:	f040 8086 	bne.w	8005d6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ca8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d902      	bls.n	8005cc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005cbe:	e056      	b.n	8005d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd8:	d0e7      	beq.n	8005caa <USB_EPStopXfer+0x82>
 8005cda:	e048      	b.n	8005d6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf4:	d13b      	bne.n	8005d6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	7812      	ldrb	r2, [r2, #0]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d902      	bls.n	8005d54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
          break;
 8005d52:	e00c      	b.n	8005d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6c:	d0e7      	beq.n	8005d3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	71fb      	strb	r3, [r7, #7]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d123      	bne.n	8005dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005da2:	88bb      	ldrh	r3, [r7, #4]
 8005da4:	3303      	adds	r3, #3
 8005da6:	089b      	lsrs	r3, r3, #2
 8005da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e018      	b.n	8005de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	031a      	lsls	r2, r3, #12
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d3e2      	bcc.n	8005db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3724      	adds	r7, #36	; 0x24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b08b      	sub	sp, #44	; 0x2c
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	089b      	lsrs	r3, r3, #2
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	e014      	b.n	8005e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	3301      	adds	r3, #1
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	3301      	adds	r3, #1
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	3301      	adds	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	3301      	adds	r3, #1
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	623b      	str	r3, [r7, #32]
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d3e6      	bcc.n	8005e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e56:	8bfb      	ldrh	r3, [r7, #30]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01e      	beq.n	8005e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	461a      	mov	r2, r3
 8005e68:	f107 0310 	add.w	r3, r7, #16
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	701a      	strb	r2, [r3, #0]
      i++;
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	3301      	adds	r3, #1
 8005e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e8e:	8bfb      	ldrh	r3, [r7, #30]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e94:	8bfb      	ldrh	r3, [r7, #30]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1ea      	bne.n	8005e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	372c      	adds	r7, #44	; 0x2c
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d12c      	bne.n	8005f1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	db12      	blt.n	8005efc <USB_EPSetStall+0x54>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00f      	beq.n	8005efc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005efa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e02b      	b.n	8005f76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db12      	blt.n	8005f56 <USB_EPSetStall+0xae>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00f      	beq.n	8005f56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d128      	bne.n	8005ff2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	791b      	ldrb	r3, [r3, #4]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d003      	beq.n	8005fd0 <USB_EPClearStall+0x4c>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d138      	bne.n	8006042 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e027      	b.n	8006042 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006010:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	791b      	ldrb	r3, [r3, #4]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d003      	beq.n	8006022 <USB_EPClearStall+0x9e>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	791b      	ldrb	r3, [r3, #4]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d10f      	bne.n	8006042 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006040:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800606e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006072:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ca:	f023 0302 	bic.w	r3, r3, #2
 80060ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060f8:	f023 0303 	bic.w	r3, r3, #3
 80060fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800610c:	f043 0302 	orr.w	r3, r3, #2
 8006110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4013      	ands	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006138:	68fb      	ldr	r3, [r7, #12]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	0c1b      	lsrs	r3, r3, #16
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	4013      	ands	r3, r2
 800619c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	b29b      	uxth	r3, r3
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4013      	ands	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061dc:	68bb      	ldr	r3, [r7, #8]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b087      	sub	sp, #28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	01db      	lsls	r3, r3, #7
 800621c:	b2db      	uxtb	r3, r3
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4013      	ands	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006238:	68bb      	ldr	r3, [r7, #8]
}
 800623a:	4618      	mov	r0, r3
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f003 0301 	and.w	r3, r3, #1
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006280:	f023 0307 	bic.w	r3, r3, #7
 8006284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	460b      	mov	r3, r1
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	333c      	adds	r3, #60	; 0x3c
 80062be:	3304      	adds	r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4a26      	ldr	r2, [pc, #152]	; (8006360 <USB_EP0_OutStart+0xb8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d90a      	bls.n	80062e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062dc:	d101      	bne.n	80062e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e037      	b.n	8006352 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	461a      	mov	r2, r3
 80062ea:	2300      	movs	r3, #0
 80062ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006310:	f043 0318 	orr.w	r3, r3, #24
 8006314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006324:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006328:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800632a:	7afb      	ldrb	r3, [r7, #11]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d10f      	bne.n	8006350 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800634e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	4f54300a 	.word	0x4f54300a

08006364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <USB_CoreReset+0x64>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d901      	bls.n	8006382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e01b      	b.n	80063ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	daf2      	bge.n	8006370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f043 0201 	orr.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <USB_CoreReset+0x64>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d901      	bls.n	80063ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e006      	b.n	80063ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d0f0      	beq.n	800639a <USB_CoreReset+0x36>

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	00030d40 	.word	0x00030d40

080063cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063dc:	f002 fcc8 	bl	8008d70 <USBD_static_malloc>
 80063e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32b0      	adds	r2, #176	; 0xb0
 80063f2:	2100      	movs	r1, #0
 80063f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063f8:	2302      	movs	r3, #2
 80063fa:	e0d4      	b.n	80065a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80063fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006400:	2100      	movs	r1, #0
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f002 fd1c 	bl	8008e40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	32b0      	adds	r2, #176	; 0xb0
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	32b0      	adds	r2, #176	; 0xb0
 8006422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7c1b      	ldrb	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d138      	bne.n	80064a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006434:	4b5e      	ldr	r3, [pc, #376]	; (80065b0 <USBD_CDC_Init+0x1e4>)
 8006436:	7819      	ldrb	r1, [r3, #0]
 8006438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800643c:	2202      	movs	r2, #2
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f002 fb25 	bl	8008a8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006444:	4b5a      	ldr	r3, [pc, #360]	; (80065b0 <USBD_CDC_Init+0x1e4>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2201      	movs	r2, #1
 800645c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800645e:	4b55      	ldr	r3, [pc, #340]	; (80065b4 <USBD_CDC_Init+0x1e8>)
 8006460:	7819      	ldrb	r1, [r3, #0]
 8006462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006466:	2202      	movs	r2, #2
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f002 fb10 	bl	8008a8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800646e:	4b51      	ldr	r3, [pc, #324]	; (80065b4 <USBD_CDC_Init+0x1e8>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006486:	2201      	movs	r2, #1
 8006488:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800648a:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <USBD_CDC_Init+0x1ec>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	3326      	adds	r3, #38	; 0x26
 80064a0:	2210      	movs	r2, #16
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	e035      	b.n	8006512 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064a6:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <USBD_CDC_Init+0x1e4>)
 80064a8:	7819      	ldrb	r1, [r3, #0]
 80064aa:	2340      	movs	r3, #64	; 0x40
 80064ac:	2202      	movs	r2, #2
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f002 faed 	bl	8008a8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064b4:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <USBD_CDC_Init+0x1e4>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f003 020f 	and.w	r2, r3, #15
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	3324      	adds	r3, #36	; 0x24
 80064ca:	2201      	movs	r2, #1
 80064cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064ce:	4b39      	ldr	r3, [pc, #228]	; (80065b4 <USBD_CDC_Init+0x1e8>)
 80064d0:	7819      	ldrb	r1, [r3, #0]
 80064d2:	2340      	movs	r3, #64	; 0x40
 80064d4:	2202      	movs	r2, #2
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f002 fad9 	bl	8008a8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064dc:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <USBD_CDC_Init+0x1e8>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 020f 	and.w	r2, r3, #15
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064f4:	2201      	movs	r2, #1
 80064f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064f8:	4b2f      	ldr	r3, [pc, #188]	; (80065b8 <USBD_CDC_Init+0x1ec>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 020f 	and.w	r2, r3, #15
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	3326      	adds	r3, #38	; 0x26
 800650e:	2210      	movs	r2, #16
 8006510:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006512:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <USBD_CDC_Init+0x1ec>)
 8006514:	7819      	ldrb	r1, [r3, #0]
 8006516:	2308      	movs	r3, #8
 8006518:	2203      	movs	r2, #3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f002 fab7 	bl	8008a8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006520:	4b25      	ldr	r3, [pc, #148]	; (80065b8 <USBD_CDC_Init+0x1ec>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3324      	adds	r3, #36	; 0x24
 8006536:	2201      	movs	r2, #1
 8006538:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	33b0      	adds	r3, #176	; 0xb0
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006570:	2302      	movs	r3, #2
 8006572:	e018      	b.n	80065a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	7c1b      	ldrb	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800657c:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <USBD_CDC_Init+0x1e8>)
 800657e:	7819      	ldrb	r1, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 fb6e 	bl	8008c6c <USBD_LL_PrepareReceive>
 8006590:	e008      	b.n	80065a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006592:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <USBD_CDC_Init+0x1e8>)
 8006594:	7819      	ldrb	r1, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800659c:	2340      	movs	r3, #64	; 0x40
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f002 fb64 	bl	8008c6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000093 	.word	0x20000093
 80065b4:	20000094 	.word	0x20000094
 80065b8:	20000095 	.word	0x20000095

080065bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80065c8:	4b3a      	ldr	r3, [pc, #232]	; (80066b4 <USBD_CDC_DeInit+0xf8>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f002 fa83 	bl	8008ada <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80065d4:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <USBD_CDC_DeInit+0xf8>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3324      	adds	r3, #36	; 0x24
 80065ea:	2200      	movs	r2, #0
 80065ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80065ee:	4b32      	ldr	r3, [pc, #200]	; (80066b8 <USBD_CDC_DeInit+0xfc>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 fa70 	bl	8008ada <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80065fa:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <USBD_CDC_DeInit+0xfc>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006612:	2200      	movs	r2, #0
 8006614:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006616:	4b29      	ldr	r3, [pc, #164]	; (80066bc <USBD_CDC_DeInit+0x100>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f002 fa5c 	bl	8008ada <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006622:	4b26      	ldr	r3, [pc, #152]	; (80066bc <USBD_CDC_DeInit+0x100>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	f003 020f 	and.w	r2, r3, #15
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	3324      	adds	r3, #36	; 0x24
 8006638:	2200      	movs	r2, #0
 800663a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800663c:	4b1f      	ldr	r3, [pc, #124]	; (80066bc <USBD_CDC_DeInit+0x100>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f003 020f 	and.w	r2, r3, #15
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	3326      	adds	r3, #38	; 0x26
 8006652:	2200      	movs	r2, #0
 8006654:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	32b0      	adds	r2, #176	; 0xb0
 8006660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01f      	beq.n	80066a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	33b0      	adds	r3, #176	; 0xb0
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	32b0      	adds	r2, #176	; 0xb0
 8006686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668a:	4618      	mov	r0, r3
 800668c:	f002 fb7e 	bl	8008d8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	32b0      	adds	r2, #176	; 0xb0
 800669a:	2100      	movs	r1, #0
 800669c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000093 	.word	0x20000093
 80066b8:	20000094 	.word	0x20000094
 80066bc:	20000095 	.word	0x20000095

080066c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	32b0      	adds	r2, #176	; 0xb0
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e0bf      	b.n	8006870 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d050      	beq.n	800679e <USBD_CDC_Setup+0xde>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	f040 80af 	bne.w	8006860 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	88db      	ldrh	r3, [r3, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d03a      	beq.n	8006780 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b25b      	sxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	da1b      	bge.n	800674c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	33b0      	adds	r3, #176	; 0xb0
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800672a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	88d2      	ldrh	r2, [r2, #6]
 8006730:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	88db      	ldrh	r3, [r3, #6]
 8006736:	2b07      	cmp	r3, #7
 8006738:	bf28      	it	cs
 800673a:	2307      	movcs	r3, #7
 800673c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	89fa      	ldrh	r2, [r7, #14]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fd6d 	bl	8008224 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800674a:	e090      	b.n	800686e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	785a      	ldrb	r2, [r3, #1]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	88db      	ldrh	r3, [r3, #6]
 800675a:	2b3f      	cmp	r3, #63	; 0x3f
 800675c:	d803      	bhi.n	8006766 <USBD_CDC_Setup+0xa6>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	88db      	ldrh	r3, [r3, #6]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	e000      	b.n	8006768 <USBD_CDC_Setup+0xa8>
 8006766:	2240      	movs	r2, #64	; 0x40
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800676e:	6939      	ldr	r1, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006776:	461a      	mov	r2, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fd7f 	bl	800827c <USBD_CtlPrepareRx>
      break;
 800677e:	e076      	b.n	800686e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	33b0      	adds	r3, #176	; 0xb0
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	7850      	ldrb	r0, [r2, #1]
 8006796:	2200      	movs	r2, #0
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	4798      	blx	r3
      break;
 800679c:	e067      	b.n	800686e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	2b0b      	cmp	r3, #11
 80067a4:	d851      	bhi.n	800684a <USBD_CDC_Setup+0x18a>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <USBD_CDC_Setup+0xec>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067dd 	.word	0x080067dd
 80067b0:	08006859 	.word	0x08006859
 80067b4:	0800684b 	.word	0x0800684b
 80067b8:	0800684b 	.word	0x0800684b
 80067bc:	0800684b 	.word	0x0800684b
 80067c0:	0800684b 	.word	0x0800684b
 80067c4:	0800684b 	.word	0x0800684b
 80067c8:	0800684b 	.word	0x0800684b
 80067cc:	0800684b 	.word	0x0800684b
 80067d0:	0800684b 	.word	0x0800684b
 80067d4:	08006807 	.word	0x08006807
 80067d8:	08006831 	.word	0x08006831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d107      	bne.n	80067f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067e8:	f107 030a 	add.w	r3, r7, #10
 80067ec:	2202      	movs	r2, #2
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fd17 	bl	8008224 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067f6:	e032      	b.n	800685e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 fca1 	bl	8008142 <USBD_CtlError>
            ret = USBD_FAIL;
 8006800:	2303      	movs	r3, #3
 8006802:	75fb      	strb	r3, [r7, #23]
          break;
 8006804:	e02b      	b.n	800685e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b03      	cmp	r3, #3
 8006810:	d107      	bne.n	8006822 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006812:	f107 030d 	add.w	r3, r7, #13
 8006816:	2201      	movs	r2, #1
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fd02 	bl	8008224 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006820:	e01d      	b.n	800685e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fc8c 	bl	8008142 <USBD_CtlError>
            ret = USBD_FAIL;
 800682a:	2303      	movs	r3, #3
 800682c:	75fb      	strb	r3, [r7, #23]
          break;
 800682e:	e016      	b.n	800685e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b03      	cmp	r3, #3
 800683a:	d00f      	beq.n	800685c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fc7f 	bl	8008142 <USBD_CtlError>
            ret = USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006848:	e008      	b.n	800685c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 fc78 	bl	8008142 <USBD_CtlError>
          ret = USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	75fb      	strb	r3, [r7, #23]
          break;
 8006856:	e002      	b.n	800685e <USBD_CDC_Setup+0x19e>
          break;
 8006858:	bf00      	nop
 800685a:	e008      	b.n	800686e <USBD_CDC_Setup+0x1ae>
          break;
 800685c:	bf00      	nop
      }
      break;
 800685e:	e006      	b.n	800686e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fc6d 	bl	8008142 <USBD_CtlError>
      ret = USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	75fb      	strb	r3, [r7, #23]
      break;
 800686c:	bf00      	nop
  }

  return (uint8_t)ret;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800688a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32b0      	adds	r2, #176	; 0xb0
 8006896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	e065      	b.n	800696e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	32b0      	adds	r2, #176	; 0xb0
 80068ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	f003 020f 	and.w	r2, r3, #15
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	3318      	adds	r3, #24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d02f      	beq.n	800692c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	3318      	adds	r3, #24
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	f003 010f 	and.w	r1, r3, #15
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	460b      	mov	r3, r1
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	440b      	add	r3, r1
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4403      	add	r3, r0
 80068f4:	3348      	adds	r3, #72	; 0x48
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006902:	2b00      	cmp	r3, #0
 8006904:	d112      	bne.n	800692c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006906:	78fb      	ldrb	r3, [r7, #3]
 8006908:	f003 020f 	and.w	r2, r3, #15
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	3318      	adds	r3, #24
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800691e:	78f9      	ldrb	r1, [r7, #3]
 8006920:	2300      	movs	r3, #0
 8006922:	2200      	movs	r2, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f002 f980 	bl	8008c2a <USBD_LL_Transmit>
 800692a:	e01f      	b.n	800696c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	33b0      	adds	r3, #176	; 0xb0
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d010      	beq.n	800696c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	33b0      	adds	r3, #176	; 0xb0
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	32b0      	adds	r2, #176	; 0xb0
 800698c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006990:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	32b0      	adds	r2, #176	; 0xb0
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e01a      	b.n	80069de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f002 f97e 	bl	8008cae <USBD_LL_GetRxDataSize>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	33b0      	adds	r3, #176	; 0xb0
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069d8:	4611      	mov	r1, r2
 80069da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	32b0      	adds	r2, #176	; 0xb0
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e025      	b.n	8006a54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	33b0      	adds	r3, #176	; 0xb0
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01a      	beq.n	8006a52 <USBD_CDC_EP0_RxReady+0x6c>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a22:	2bff      	cmp	r3, #255	; 0xff
 8006a24:	d015      	beq.n	8006a52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	33b0      	adds	r3, #176	; 0xb0
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a46:	b292      	uxth	r2, r2
 8006a48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	22ff      	movs	r2, #255	; 0xff
 8006a4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a64:	2182      	movs	r1, #130	; 0x82
 8006a66:	4818      	ldr	r0, [pc, #96]	; (8006ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a68:	f000 fd09 	bl	800747e <USBD_GetEpDesc>
 8006a6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4815      	ldr	r0, [pc, #84]	; (8006ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a72:	f000 fd04 	bl	800747e <USBD_GetEpDesc>
 8006a76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a78:	2181      	movs	r1, #129	; 0x81
 8006a7a:	4813      	ldr	r0, [pc, #76]	; (8006ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a7c:	f000 fcff 	bl	800747e <USBD_GetEpDesc>
 8006a80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2210      	movs	r2, #16
 8006a8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d006      	beq.n	8006aa2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a9c:	711a      	strb	r2, [r3, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d006      	beq.n	8006ab6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab0:	711a      	strb	r2, [r3, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2243      	movs	r2, #67	; 0x43
 8006aba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006abc:	4b02      	ldr	r3, [pc, #8]	; (8006ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000050 	.word	0x20000050

08006acc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ad4:	2182      	movs	r1, #130	; 0x82
 8006ad6:	4818      	ldr	r0, [pc, #96]	; (8006b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ad8:	f000 fcd1 	bl	800747e <USBD_GetEpDesc>
 8006adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4815      	ldr	r0, [pc, #84]	; (8006b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ae2:	f000 fccc 	bl	800747e <USBD_GetEpDesc>
 8006ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ae8:	2181      	movs	r1, #129	; 0x81
 8006aea:	4813      	ldr	r0, [pc, #76]	; (8006b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006aec:	f000 fcc7 	bl	800747e <USBD_GetEpDesc>
 8006af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2210      	movs	r2, #16
 8006afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d006      	beq.n	8006b12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2200      	movs	r2, #0
 8006b08:	711a      	strb	r2, [r3, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f042 0202 	orr.w	r2, r2, #2
 8006b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	711a      	strb	r2, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f042 0202 	orr.w	r2, r2, #2
 8006b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2243      	movs	r2, #67	; 0x43
 8006b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b2c:	4b02      	ldr	r3, [pc, #8]	; (8006b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000050 	.word	0x20000050

08006b3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b44:	2182      	movs	r1, #130	; 0x82
 8006b46:	4818      	ldr	r0, [pc, #96]	; (8006ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b48:	f000 fc99 	bl	800747e <USBD_GetEpDesc>
 8006b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b4e:	2101      	movs	r1, #1
 8006b50:	4815      	ldr	r0, [pc, #84]	; (8006ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b52:	f000 fc94 	bl	800747e <USBD_GetEpDesc>
 8006b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b58:	2181      	movs	r1, #129	; 0x81
 8006b5a:	4813      	ldr	r0, [pc, #76]	; (8006ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b5c:	f000 fc8f 	bl	800747e <USBD_GetEpDesc>
 8006b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d006      	beq.n	8006b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7c:	711a      	strb	r2, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b90:	711a      	strb	r2, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2243      	movs	r2, #67	; 0x43
 8006b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000050 	.word	0x20000050

08006bac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	220a      	movs	r2, #10
 8006bb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bba:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	2000000c 	.word	0x2000000c

08006bcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e009      	b.n	8006bf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	33b0      	adds	r3, #176	; 0xb0
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	32b0      	adds	r2, #176	; 0xb0
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e008      	b.n	8006c38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	32b0      	adds	r2, #176	; 0xb0
 8006c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e004      	b.n	8006c72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	32b0      	adds	r2, #176	; 0xb0
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32b0      	adds	r2, #176	; 0xb0
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e018      	b.n	8006ce0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7c1b      	ldrb	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <USBD_CDC_ReceivePacket+0x68>)
 8006cb8:	7819      	ldrb	r1, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 ffd1 	bl	8008c6c <USBD_LL_PrepareReceive>
 8006cca:	e008      	b.n	8006cde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <USBD_CDC_ReceivePacket+0x68>)
 8006cce:	7819      	ldrb	r1, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cd6:	2340      	movs	r3, #64	; 0x40
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 ffc7 	bl	8008c6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000094 	.word	0x20000094

08006cec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e01f      	b.n	8006d44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	79fa      	ldrb	r2, [r7, #7]
 8006d36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f001 fe41 	bl	80089c0 <USBD_LL_Init>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e025      	b.n	8006db0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32ae      	adds	r2, #174	; 0xae
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00f      	beq.n	8006da0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	32ae      	adds	r2, #174	; 0xae
 8006d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	f107 020e 	add.w	r2, r7, #14
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
 8006d98:	4602      	mov	r2, r0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fe49 	bl	8008a58 <USBD_LL_Start>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e44:	2303      	movs	r3, #3
 8006e46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 f932 	bl	80080ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d01a      	beq.n	8006ec4 <USBD_LL_SetupStage+0x72>
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d822      	bhi.n	8006ed8 <USBD_LL_SetupStage+0x86>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <USBD_LL_SetupStage+0x4a>
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d00a      	beq.n	8006eb0 <USBD_LL_SetupStage+0x5e>
 8006e9a:	e01d      	b.n	8006ed8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fb5f 	bl	8007568 <USBD_StdDevReq>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]
      break;
 8006eae:	e020      	b.n	8006ef2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fbc7 	bl	800764c <USBD_StdItfReq>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec2:	e016      	b.n	8006ef2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fc29 	bl	8007724 <USBD_StdEPReq>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed6:	e00c      	b.n	8006ef2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ede:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fe16 	bl	8008b18 <USBD_LL_StallEP>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef0:	bf00      	nop
  }

  return ret;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	460b      	mov	r3, r1
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d16e      	bne.n	8006ff2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	f040 8098 	bne.w	8007058 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d913      	bls.n	8006f5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	1ad2      	subs	r2, r2, r3
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	bf28      	it	cs
 8006f4e:	4613      	movcs	r3, r2
 8006f50:	461a      	mov	r2, r3
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f001 f9ae 	bl	80082b6 <USBD_CtlContinueRx>
 8006f5a:	e07d      	b.n	8007058 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d014      	beq.n	8006f94 <USBD_LL_DataOutStage+0x98>
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d81d      	bhi.n	8006faa <USBD_LL_DataOutStage+0xae>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <USBD_LL_DataOutStage+0x7c>
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d003      	beq.n	8006f7e <USBD_LL_DataOutStage+0x82>
 8006f76:	e018      	b.n	8006faa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75bb      	strb	r3, [r7, #22]
            break;
 8006f7c:	e018      	b.n	8006fb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fa5e 	bl	800744a <USBD_CoreFindIF>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75bb      	strb	r3, [r7, #22]
            break;
 8006f92:	e00d      	b.n	8006fb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fa60 	bl	8007464 <USBD_CoreFindEP>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75bb      	strb	r3, [r7, #22]
            break;
 8006fa8:	e002      	b.n	8006fb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75bb      	strb	r3, [r7, #22]
            break;
 8006fae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006fb0:	7dbb      	ldrb	r3, [r7, #22]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d119      	bne.n	8006fea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d113      	bne.n	8006fea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006fc2:	7dba      	ldrb	r2, [r7, #22]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	32ae      	adds	r2, #174	; 0xae
 8006fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006fd2:	7dba      	ldrb	r2, [r7, #22]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006fda:	7dba      	ldrb	r2, [r7, #22]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	32ae      	adds	r2, #174	; 0xae
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f001 f974 	bl	80082d8 <USBD_CtlSendStatus>
 8006ff0:	e032      	b.n	8007058 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ff2:	7afb      	ldrb	r3, [r7, #11]
 8006ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fa31 	bl	8007464 <USBD_CoreFindEP>
 8007002:	4603      	mov	r3, r0
 8007004:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007006:	7dbb      	ldrb	r3, [r7, #22]
 8007008:	2bff      	cmp	r3, #255	; 0xff
 800700a:	d025      	beq.n	8007058 <USBD_LL_DataOutStage+0x15c>
 800700c:	7dbb      	ldrb	r3, [r7, #22]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d122      	bne.n	8007058 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b03      	cmp	r3, #3
 800701c:	d117      	bne.n	800704e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800701e:	7dba      	ldrb	r2, [r7, #22]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	32ae      	adds	r2, #174	; 0xae
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00f      	beq.n	800704e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800702e:	7dba      	ldrb	r2, [r7, #22]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007036:	7dba      	ldrb	r2, [r7, #22]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	32ae      	adds	r2, #174	; 0xae
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	7afa      	ldrb	r2, [r7, #11]
 8007044:	4611      	mov	r1, r2
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	4798      	blx	r3
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	e000      	b.n	800705a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	460b      	mov	r3, r1
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d16f      	bne.n	8007156 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3314      	adds	r3, #20
 800707a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007082:	2b02      	cmp	r3, #2
 8007084:	d15a      	bne.n	800713c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	429a      	cmp	r2, r3
 8007090:	d914      	bls.n	80070bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f001 f8d6 	bl	800825a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 fdd9 	bl	8008c6c <USBD_LL_PrepareReceive>
 80070ba:	e03f      	b.n	800713c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d11c      	bne.n	8007102 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d316      	bcc.n	8007102 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070de:	429a      	cmp	r2, r3
 80070e0:	d20f      	bcs.n	8007102 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070e2:	2200      	movs	r2, #0
 80070e4:	2100      	movs	r1, #0
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f001 f8b7 	bl	800825a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070f4:	2300      	movs	r3, #0
 80070f6:	2200      	movs	r2, #0
 80070f8:	2100      	movs	r1, #0
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f001 fdb6 	bl	8008c6c <USBD_LL_PrepareReceive>
 8007100:	e01c      	b.n	800713c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b03      	cmp	r3, #3
 800710c:	d10f      	bne.n	800712e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800712e:	2180      	movs	r1, #128	; 0x80
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f001 fcf1 	bl	8008b18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f001 f8e1 	bl	80082fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d03a      	beq.n	80071bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fe42 	bl	8006dd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007154:	e032      	b.n	80071bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800715c:	b2db      	uxtb	r3, r3
 800715e:	4619      	mov	r1, r3
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f97f 	bl	8007464 <USBD_CoreFindEP>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	2bff      	cmp	r3, #255	; 0xff
 800716e:	d025      	beq.n	80071bc <USBD_LL_DataInStage+0x15a>
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d122      	bne.n	80071bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d11c      	bne.n	80071bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007182:	7dfa      	ldrb	r2, [r7, #23]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	32ae      	adds	r2, #174	; 0xae
 8007188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d014      	beq.n	80071bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007192:	7dfa      	ldrb	r2, [r7, #23]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800719a:	7dfa      	ldrb	r2, [r7, #23]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	32ae      	adds	r2, #174	; 0xae
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	7afa      	ldrb	r2, [r7, #11]
 80071a8:	4611      	mov	r1, r2
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	4798      	blx	r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80071b2:	7dbb      	ldrb	r3, [r7, #22]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80071b8:	7dbb      	ldrb	r3, [r7, #22]
 80071ba:	e000      	b.n	80071be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d014      	beq.n	800722c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00e      	beq.n	800722c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6852      	ldr	r2, [r2, #4]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	4611      	mov	r1, r2
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007228:	2303      	movs	r3, #3
 800722a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	2200      	movs	r2, #0
 8007230:	2100      	movs	r1, #0
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fc2b 	bl	8008a8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2240      	movs	r2, #64	; 0x40
 8007244:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	2200      	movs	r2, #0
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fc1d 	bl	8008a8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2240      	movs	r2, #64	; 0x40
 800725e:	621a      	str	r2, [r3, #32]

  return ret;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2da      	uxtb	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2204      	movs	r2, #4
 80072a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d106      	bne.n	80072d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d110      	bne.n	800731c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	32ae      	adds	r2, #174	; 0xae
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007344:	2303      	movs	r3, #3
 8007346:	e01c      	b.n	8007382 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b03      	cmp	r3, #3
 8007352:	d115      	bne.n	8007380 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32ae      	adds	r2, #174	; 0xae
 800735e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32ae      	adds	r2, #174	; 0xae
 8007372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	4611      	mov	r1, r2
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	32ae      	adds	r2, #174	; 0xae
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e01c      	b.n	80073e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d115      	bne.n	80073e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32ae      	adds	r2, #174	; 0xae
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	32ae      	adds	r2, #174	; 0xae
 80073d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	78fa      	ldrb	r2, [r7, #3]
 80073de:	4611      	mov	r1, r2
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6852      	ldr	r2, [r2, #4]
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	4611      	mov	r1, r2
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007456:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007470:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	885b      	ldrh	r3, [r3, #2]
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d920      	bls.n	80074e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80074ae:	e013      	b.n	80074d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80074b0:	f107 030a 	add.w	r3, r7, #10
 80074b4:	4619      	mov	r1, r3
 80074b6:	6978      	ldr	r0, [r7, #20]
 80074b8:	f000 f81b 	bl	80074f2 <USBD_GetNextDesc>
 80074bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d108      	bne.n	80074d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	789b      	ldrb	r3, [r3, #2]
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d008      	beq.n	80074e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	885b      	ldrh	r3, [r3, #2]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	897b      	ldrh	r3, [r7, #10]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d8e5      	bhi.n	80074b0 <USBD_GetEpDesc+0x32>
 80074e4:	e000      	b.n	80074e8 <USBD_GetEpDesc+0x6a>
          break;
 80074e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80074e8:	693b      	ldr	r3, [r7, #16]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	881a      	ldrh	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	4413      	add	r3, r2
 800750c:	b29a      	uxth	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4413      	add	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	3301      	adds	r3, #1
 8007542:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800754a:	8a3b      	ldrh	r3, [r7, #16]
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	b21a      	sxth	r2, r3
 8007550:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007554:	4313      	orrs	r3, r2
 8007556:	b21b      	sxth	r3, r3
 8007558:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800755a:	89fb      	ldrh	r3, [r7, #14]
}
 800755c:	4618      	mov	r0, r3
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	d005      	beq.n	800758e <USBD_StdDevReq+0x26>
 8007582:	2b40      	cmp	r3, #64	; 0x40
 8007584:	d857      	bhi.n	8007636 <USBD_StdDevReq+0xce>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00f      	beq.n	80075aa <USBD_StdDevReq+0x42>
 800758a:	2b20      	cmp	r3, #32
 800758c:	d153      	bne.n	8007636 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	32ae      	adds	r2, #174	; 0xae
 8007598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]
      break;
 80075a8:	e04a      	b.n	8007640 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b09      	cmp	r3, #9
 80075b0:	d83b      	bhi.n	800762a <USBD_StdDevReq+0xc2>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <USBD_StdDevReq+0x50>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007621 	.word	0x08007621
 80075c0:	0800762b 	.word	0x0800762b
 80075c4:	08007617 	.word	0x08007617
 80075c8:	0800762b 	.word	0x0800762b
 80075cc:	080075eb 	.word	0x080075eb
 80075d0:	080075e1 	.word	0x080075e1
 80075d4:	0800762b 	.word	0x0800762b
 80075d8:	08007603 	.word	0x08007603
 80075dc:	080075f5 	.word	0x080075f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa3c 	bl	8007a60 <USBD_GetDescriptor>
          break;
 80075e8:	e024      	b.n	8007634 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fbcb 	bl	8007d88 <USBD_SetAddress>
          break;
 80075f2:	e01f      	b.n	8007634 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc0a 	bl	8007e10 <USBD_SetConfig>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]
          break;
 8007600:	e018      	b.n	8007634 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fcad 	bl	8007f64 <USBD_GetConfig>
          break;
 800760a:	e013      	b.n	8007634 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fcde 	bl	8007fd0 <USBD_GetStatus>
          break;
 8007614:	e00e      	b.n	8007634 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fd0d 	bl	8008038 <USBD_SetFeature>
          break;
 800761e:	e009      	b.n	8007634 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fd31 	bl	800808a <USBD_ClrFeature>
          break;
 8007628:	e004      	b.n	8007634 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fd88 	bl	8008142 <USBD_CtlError>
          break;
 8007632:	bf00      	nop
      }
      break;
 8007634:	e004      	b.n	8007640 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fd82 	bl	8008142 <USBD_CtlError>
      break;
 800763e:	bf00      	nop
  }

  return ret;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop

0800764c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d005      	beq.n	8007672 <USBD_StdItfReq+0x26>
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d852      	bhi.n	8007710 <USBD_StdItfReq+0xc4>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <USBD_StdItfReq+0x26>
 800766e:	2b20      	cmp	r3, #32
 8007670:	d14e      	bne.n	8007710 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007678:	b2db      	uxtb	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	2b02      	cmp	r3, #2
 800767e:	d840      	bhi.n	8007702 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	889b      	ldrh	r3, [r3, #4]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d836      	bhi.n	80076f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	889b      	ldrh	r3, [r3, #4]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff fed9 	bl	800744a <USBD_CoreFindIF>
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2bff      	cmp	r3, #255	; 0xff
 80076a0:	d01d      	beq.n	80076de <USBD_StdItfReq+0x92>
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d11a      	bne.n	80076de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80076a8:	7bba      	ldrb	r2, [r7, #14]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	32ae      	adds	r2, #174	; 0xae
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00f      	beq.n	80076d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80076b8:	7bba      	ldrb	r2, [r7, #14]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076c0:	7bba      	ldrb	r2, [r7, #14]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	32ae      	adds	r2, #174	; 0xae
 80076c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076d6:	e004      	b.n	80076e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076dc:	e001      	b.n	80076e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076de:	2303      	movs	r3, #3
 80076e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	88db      	ldrh	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d110      	bne.n	800770c <USBD_StdItfReq+0xc0>
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10d      	bne.n	800770c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fdf1 	bl	80082d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076f6:	e009      	b.n	800770c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fd21 	bl	8008142 <USBD_CtlError>
          break;
 8007700:	e004      	b.n	800770c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fd1c 	bl	8008142 <USBD_CtlError>
          break;
 800770a:	e000      	b.n	800770e <USBD_StdItfReq+0xc2>
          break;
 800770c:	bf00      	nop
      }
      break;
 800770e:	e004      	b.n	800771a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fd15 	bl	8008142 <USBD_CtlError>
      break;
 8007718:	bf00      	nop
  }

  return ret;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	889b      	ldrh	r3, [r3, #4]
 8007736:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d007      	beq.n	8007754 <USBD_StdEPReq+0x30>
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	f200 817f 	bhi.w	8007a48 <USBD_StdEPReq+0x324>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d02a      	beq.n	80077a4 <USBD_StdEPReq+0x80>
 800774e:	2b20      	cmp	r3, #32
 8007750:	f040 817a 	bne.w	8007a48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fe83 	bl	8007464 <USBD_CoreFindEP>
 800775e:	4603      	mov	r3, r0
 8007760:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007762:	7b7b      	ldrb	r3, [r7, #13]
 8007764:	2bff      	cmp	r3, #255	; 0xff
 8007766:	f000 8174 	beq.w	8007a52 <USBD_StdEPReq+0x32e>
 800776a:	7b7b      	ldrb	r3, [r7, #13]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 8170 	bne.w	8007a52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007772:	7b7a      	ldrb	r2, [r7, #13]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800777a:	7b7a      	ldrb	r2, [r7, #13]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	32ae      	adds	r2, #174	; 0xae
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8163 	beq.w	8007a52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800778c:	7b7a      	ldrb	r2, [r7, #13]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32ae      	adds	r2, #174	; 0xae
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077a2:	e156      	b.n	8007a52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d008      	beq.n	80077be <USBD_StdEPReq+0x9a>
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	f300 8145 	bgt.w	8007a3c <USBD_StdEPReq+0x318>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 809b 	beq.w	80078ee <USBD_StdEPReq+0x1ca>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d03c      	beq.n	8007836 <USBD_StdEPReq+0x112>
 80077bc:	e13e      	b.n	8007a3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d002      	beq.n	80077d0 <USBD_StdEPReq+0xac>
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d016      	beq.n	80077fc <USBD_StdEPReq+0xd8>
 80077ce:	e02c      	b.n	800782a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <USBD_StdEPReq+0xce>
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b80      	cmp	r3, #128	; 0x80
 80077da:	d00a      	beq.n	80077f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 f999 	bl	8008b18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 f995 	bl	8008b18 <USBD_LL_StallEP>
 80077ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077f0:	e020      	b.n	8007834 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fca4 	bl	8008142 <USBD_CtlError>
              break;
 80077fa:	e01b      	b.n	8007834 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10e      	bne.n	8007822 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <USBD_StdEPReq+0xfe>
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b80      	cmp	r3, #128	; 0x80
 800780e:	d008      	beq.n	8007822 <USBD_StdEPReq+0xfe>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	88db      	ldrh	r3, [r3, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 f97b 	bl	8008b18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fd58 	bl	80082d8 <USBD_CtlSendStatus>

              break;
 8007828:	e004      	b.n	8007834 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fc88 	bl	8008142 <USBD_CtlError>
              break;
 8007832:	bf00      	nop
          }
          break;
 8007834:	e107      	b.n	8007a46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d002      	beq.n	8007848 <USBD_StdEPReq+0x124>
 8007842:	2b03      	cmp	r3, #3
 8007844:	d016      	beq.n	8007874 <USBD_StdEPReq+0x150>
 8007846:	e04b      	b.n	80078e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <USBD_StdEPReq+0x146>
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d00a      	beq.n	800786a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f95d 	bl	8008b18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800785e:	2180      	movs	r1, #128	; 0x80
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f959 	bl	8008b18 <USBD_LL_StallEP>
 8007866:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007868:	e040      	b.n	80078ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fc68 	bl	8008142 <USBD_CtlError>
              break;
 8007872:	e03b      	b.n	80078ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	885b      	ldrh	r3, [r3, #2]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d136      	bne.n	80078ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 f963 	bl	8008b56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fd21 	bl	80082d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fde2 	bl	8007464 <USBD_CoreFindEP>
 80078a0:	4603      	mov	r3, r0
 80078a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078a4:	7b7b      	ldrb	r3, [r7, #13]
 80078a6:	2bff      	cmp	r3, #255	; 0xff
 80078a8:	d01f      	beq.n	80078ea <USBD_StdEPReq+0x1c6>
 80078aa:	7b7b      	ldrb	r3, [r7, #13]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d11c      	bne.n	80078ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80078b0:	7b7a      	ldrb	r2, [r7, #13]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80078b8:	7b7a      	ldrb	r2, [r7, #13]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	32ae      	adds	r2, #174	; 0xae
 80078be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d010      	beq.n	80078ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078c8:	7b7a      	ldrb	r2, [r7, #13]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32ae      	adds	r2, #174	; 0xae
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078de:	e004      	b.n	80078ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fc2d 	bl	8008142 <USBD_CtlError>
              break;
 80078e8:	e000      	b.n	80078ec <USBD_StdEPReq+0x1c8>
              break;
 80078ea:	bf00      	nop
          }
          break;
 80078ec:	e0ab      	b.n	8007a46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d002      	beq.n	8007900 <USBD_StdEPReq+0x1dc>
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d032      	beq.n	8007964 <USBD_StdEPReq+0x240>
 80078fe:	e097      	b.n	8007a30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <USBD_StdEPReq+0x1f2>
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b80      	cmp	r3, #128	; 0x80
 800790a:	d004      	beq.n	8007916 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fc17 	bl	8008142 <USBD_CtlError>
                break;
 8007914:	e091      	b.n	8007a3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800791a:	2b00      	cmp	r3, #0
 800791c:	da0b      	bge.n	8007936 <USBD_StdEPReq+0x212>
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	3310      	adds	r3, #16
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	4413      	add	r3, r2
 8007932:	3304      	adds	r3, #4
 8007934:	e00b      	b.n	800794e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4413      	add	r3, r2
 800794c:	3304      	adds	r3, #4
 800794e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2202      	movs	r2, #2
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc61 	bl	8008224 <USBD_CtlSendData>
              break;
 8007962:	e06a      	b.n	8007a3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007968:	2b00      	cmp	r3, #0
 800796a:	da11      	bge.n	8007990 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	f003 020f 	and.w	r2, r3, #15
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	3324      	adds	r3, #36	; 0x24
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d117      	bne.n	80079b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fbda 	bl	8008142 <USBD_CtlError>
                  break;
 800798e:	e054      	b.n	8007a3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	f003 020f 	and.w	r2, r3, #15
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	440b      	add	r3, r1
 80079a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fbc7 	bl	8008142 <USBD_CtlError>
                  break;
 80079b4:	e041      	b.n	8007a3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	da0b      	bge.n	80079d6 <USBD_StdEPReq+0x2b2>
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	3310      	adds	r3, #16
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	3304      	adds	r3, #4
 80079d4:	e00b      	b.n	80079ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	4413      	add	r3, r2
 80079ec:	3304      	adds	r3, #4
 80079ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <USBD_StdEPReq+0x2d8>
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	2b80      	cmp	r3, #128	; 0x80
 80079fa:	d103      	bne.n	8007a04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	e00e      	b.n	8007a22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f8c3 	bl	8008b94 <USBD_LL_IsStallEP>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2201      	movs	r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e002      	b.n	8007a22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2202      	movs	r2, #2
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fbfb 	bl	8008224 <USBD_CtlSendData>
              break;
 8007a2e:	e004      	b.n	8007a3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fb85 	bl	8008142 <USBD_CtlError>
              break;
 8007a38:	bf00      	nop
          }
          break;
 8007a3a:	e004      	b.n	8007a46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb7f 	bl	8008142 <USBD_CtlError>
          break;
 8007a44:	bf00      	nop
      }
      break;
 8007a46:	e005      	b.n	8007a54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb79 	bl	8008142 <USBD_CtlError>
      break;
 8007a50:	e000      	b.n	8007a54 <USBD_StdEPReq+0x330>
      break;
 8007a52:	bf00      	nop
  }

  return ret;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	2b0e      	cmp	r3, #14
 8007a82:	f200 8152 	bhi.w	8007d2a <USBD_GetDescriptor+0x2ca>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <USBD_GetDescriptor+0x2c>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007afd 	.word	0x08007afd
 8007a90:	08007b15 	.word	0x08007b15
 8007a94:	08007b55 	.word	0x08007b55
 8007a98:	08007d2b 	.word	0x08007d2b
 8007a9c:	08007d2b 	.word	0x08007d2b
 8007aa0:	08007ccb 	.word	0x08007ccb
 8007aa4:	08007cf7 	.word	0x08007cf7
 8007aa8:	08007d2b 	.word	0x08007d2b
 8007aac:	08007d2b 	.word	0x08007d2b
 8007ab0:	08007d2b 	.word	0x08007d2b
 8007ab4:	08007d2b 	.word	0x08007d2b
 8007ab8:	08007d2b 	.word	0x08007d2b
 8007abc:	08007d2b 	.word	0x08007d2b
 8007ac0:	08007d2b 	.word	0x08007d2b
 8007ac4:	08007ac9 	.word	0x08007ac9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00b      	beq.n	8007aec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7c12      	ldrb	r2, [r2, #16]
 8007ae0:	f107 0108 	add.w	r1, r7, #8
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aea:	e126      	b.n	8007d3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fb27 	bl	8008142 <USBD_CtlError>
        err++;
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	3301      	adds	r3, #1
 8007af8:	72fb      	strb	r3, [r7, #11]
      break;
 8007afa:	e11e      	b.n	8007d3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	7c12      	ldrb	r2, [r2, #16]
 8007b08:	f107 0108 	add.w	r1, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
      break;
 8007b12:	e112      	b.n	8007d3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7c1b      	ldrb	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10d      	bne.n	8007b38 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	f107 0208 	add.w	r2, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3301      	adds	r3, #1
 8007b32:	2202      	movs	r2, #2
 8007b34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b36:	e100      	b.n	8007d3a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	f107 0208 	add.w	r2, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	2202      	movs	r2, #2
 8007b50:	701a      	strb	r2, [r3, #0]
      break;
 8007b52:	e0f2      	b.n	8007d3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	885b      	ldrh	r3, [r3, #2]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	f200 80ac 	bhi.w	8007cb8 <USBD_GetDescriptor+0x258>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <USBD_GetDescriptor+0x108>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b81 	.word	0x08007b81
 8007b6c:	08007bb5 	.word	0x08007bb5
 8007b70:	08007be9 	.word	0x08007be9
 8007b74:	08007c1d 	.word	0x08007c1d
 8007b78:	08007c51 	.word	0x08007c51
 8007b7c:	08007c85 	.word	0x08007c85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba2:	e091      	b.n	8007cc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 facb 	bl	8008142 <USBD_CtlError>
            err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb2:	e089      	b.n	8007cc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd6:	e077      	b.n	8007cc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fab1 	bl	8008142 <USBD_CtlError>
            err++;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3301      	adds	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]
          break;
 8007be6:	e06f      	b.n	8007cc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	f107 0108 	add.w	r1, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0a:	e05d      	b.n	8007cc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa97 	bl	8008142 <USBD_CtlError>
            err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1a:	e055      	b.n	8007cc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3e:	e043      	b.n	8007cc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa7d 	bl	8008142 <USBD_CtlError>
            err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4e:	e03b      	b.n	8007cc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c72:	e029      	b.n	8007cc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa63 	bl	8008142 <USBD_CtlError>
            err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
          break;
 8007c82:	e021      	b.n	8007cc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca6:	e00f      	b.n	8007cc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa49 	bl	8008142 <USBD_CtlError>
            err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb6:	e007      	b.n	8007cc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa41 	bl	8008142 <USBD_CtlError>
          err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007cc6:	bf00      	nop
      }
      break;
 8007cc8:	e037      	b.n	8007d3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7c1b      	ldrb	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cda:	f107 0208 	add.w	r2, r7, #8
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4798      	blx	r3
 8007ce2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ce4:	e029      	b.n	8007d3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa2a 	bl	8008142 <USBD_CtlError>
        err++;
 8007cee:	7afb      	ldrb	r3, [r7, #11]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cf4:	e021      	b.n	8007d3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7c1b      	ldrb	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10d      	bne.n	8007d1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	f107 0208 	add.w	r2, r7, #8
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4798      	blx	r3
 8007d0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	2207      	movs	r2, #7
 8007d16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d18:	e00f      	b.n	8007d3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fa10 	bl	8008142 <USBD_CtlError>
        err++;
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	3301      	adds	r3, #1
 8007d26:	72fb      	strb	r3, [r7, #11]
      break;
 8007d28:	e007      	b.n	8007d3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa08 	bl	8008142 <USBD_CtlError>
      err++;
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	3301      	adds	r3, #1
 8007d36:	72fb      	strb	r3, [r7, #11]
      break;
 8007d38:	bf00      	nop
  }

  if (err != 0U)
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11e      	bne.n	8007d7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	88db      	ldrh	r3, [r3, #6]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d016      	beq.n	8007d76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007d48:	893b      	ldrh	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00e      	beq.n	8007d6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88da      	ldrh	r2, [r3, #6]
 8007d52:	893b      	ldrh	r3, [r7, #8]
 8007d54:	4293      	cmp	r3, r2
 8007d56:	bf28      	it	cs
 8007d58:	4613      	movcs	r3, r2
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d5e:	893b      	ldrh	r3, [r7, #8]
 8007d60:	461a      	mov	r2, r3
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fa5d 	bl	8008224 <USBD_CtlSendData>
 8007d6a:	e009      	b.n	8007d80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9e7 	bl	8008142 <USBD_CtlError>
 8007d74:	e004      	b.n	8007d80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 faae 	bl	80082d8 <USBD_CtlSendStatus>
 8007d7c:	e000      	b.n	8007d80 <USBD_GetDescriptor+0x320>
    return;
 8007d7e:	bf00      	nop
  }
}
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop

08007d88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	889b      	ldrh	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d131      	bne.n	8007dfe <USBD_SetAddress+0x76>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	88db      	ldrh	r3, [r3, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d12d      	bne.n	8007dfe <USBD_SetAddress+0x76>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	2b7f      	cmp	r3, #127	; 0x7f
 8007da8:	d829      	bhi.n	8007dfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	885b      	ldrh	r3, [r3, #2]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d104      	bne.n	8007dcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f9bc 	bl	8008142 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dca:	e01d      	b.n	8007e08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7bfa      	ldrb	r2, [r7, #15]
 8007dd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 ff07 	bl	8008bec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa7a 	bl	80082d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	e009      	b.n	8007e08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfc:	e004      	b.n	8007e08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f99e 	bl	8008142 <USBD_CtlError>
  }
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	885b      	ldrh	r3, [r3, #2]
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	4b4e      	ldr	r3, [pc, #312]	; (8007f60 <USBD_SetConfig+0x150>)
 8007e26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e28:	4b4d      	ldr	r3, [pc, #308]	; (8007f60 <USBD_SetConfig+0x150>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d905      	bls.n	8007e3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f985 	bl	8008142 <USBD_CtlError>
    return USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e08c      	b.n	8007f56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d002      	beq.n	8007e4e <USBD_SetConfig+0x3e>
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d029      	beq.n	8007ea0 <USBD_SetConfig+0x90>
 8007e4c:	e075      	b.n	8007f3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e4e:	4b44      	ldr	r3, [pc, #272]	; (8007f60 <USBD_SetConfig+0x150>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d020      	beq.n	8007e98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e56:	4b42      	ldr	r3, [pc, #264]	; (8007f60 <USBD_SetConfig+0x150>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e60:	4b3f      	ldr	r3, [pc, #252]	; (8007f60 <USBD_SetConfig+0x150>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fe ffbd 	bl	8006de6 <USBD_SetClassConfig>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d008      	beq.n	8007e88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f962 	bl	8008142 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2202      	movs	r2, #2
 8007e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e86:	e065      	b.n	8007f54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fa25 	bl	80082d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2203      	movs	r2, #3
 8007e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e96:	e05d      	b.n	8007f54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa1d 	bl	80082d8 <USBD_CtlSendStatus>
      break;
 8007e9e:	e059      	b.n	8007f54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ea0:	4b2f      	ldr	r3, [pc, #188]	; (8007f60 <USBD_SetConfig+0x150>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d112      	bne.n	8007ece <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007eb0:	4b2b      	ldr	r3, [pc, #172]	; (8007f60 <USBD_SetConfig+0x150>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eba:	4b29      	ldr	r3, [pc, #164]	; (8007f60 <USBD_SetConfig+0x150>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fe ffac 	bl	8006e1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa06 	bl	80082d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ecc:	e042      	b.n	8007f54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ece:	4b24      	ldr	r3, [pc, #144]	; (8007f60 <USBD_SetConfig+0x150>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d02a      	beq.n	8007f32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fe ff9a 	bl	8006e1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007eea:	4b1d      	ldr	r3, [pc, #116]	; (8007f60 <USBD_SetConfig+0x150>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <USBD_SetConfig+0x150>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fe ff73 	bl	8006de6 <USBD_SetClassConfig>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00f      	beq.n	8007f2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f918 	bl	8008142 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fe ff7f 	bl	8006e1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f28:	e014      	b.n	8007f54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f9d4 	bl	80082d8 <USBD_CtlSendStatus>
      break;
 8007f30:	e010      	b.n	8007f54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9d0 	bl	80082d8 <USBD_CtlSendStatus>
      break;
 8007f38:	e00c      	b.n	8007f54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f900 	bl	8008142 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f42:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <USBD_SetConfig+0x150>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7fe ff68 	bl	8006e1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	73fb      	strb	r3, [r7, #15]
      break;
 8007f52:	bf00      	nop
  }

  return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	200002e4 	.word	0x200002e4

08007f64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d004      	beq.n	8007f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f8e2 	bl	8008142 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f7e:	e023      	b.n	8007fc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	dc02      	bgt.n	8007f92 <USBD_GetConfig+0x2e>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dc03      	bgt.n	8007f98 <USBD_GetConfig+0x34>
 8007f90:	e015      	b.n	8007fbe <USBD_GetConfig+0x5a>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d00b      	beq.n	8007fae <USBD_GetConfig+0x4a>
 8007f96:	e012      	b.n	8007fbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f93c 	bl	8008224 <USBD_CtlSendData>
        break;
 8007fac:	e00c      	b.n	8007fc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f934 	bl	8008224 <USBD_CtlSendData>
        break;
 8007fbc:	e004      	b.n	8007fc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f8be 	bl	8008142 <USBD_CtlError>
        break;
 8007fc6:	bf00      	nop
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d81e      	bhi.n	8008026 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	88db      	ldrh	r3, [r3, #6]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d004      	beq.n	8007ffa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8a5 	bl	8008142 <USBD_CtlError>
        break;
 8007ff8:	e01a      	b.n	8008030 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f043 0202 	orr.w	r2, r3, #2
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	330c      	adds	r3, #12
 800801a:	2202      	movs	r2, #2
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f900 	bl	8008224 <USBD_CtlSendData>
      break;
 8008024:	e004      	b.n	8008030 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f88a 	bl	8008142 <USBD_CtlError>
      break;
 800802e:	bf00      	nop
  }
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d107      	bne.n	800805a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f940 	bl	80082d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008058:	e013      	b.n	8008082 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d10b      	bne.n	800807a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	889b      	ldrh	r3, [r3, #4]
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	b29b      	uxth	r3, r3
 800806a:	b2da      	uxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f930 	bl	80082d8 <USBD_CtlSendStatus>
}
 8008078:	e003      	b.n	8008082 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f860 	bl	8008142 <USBD_CtlError>
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809a:	b2db      	uxtb	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d80b      	bhi.n	80080ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	885b      	ldrh	r3, [r3, #2]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10c      	bne.n	80080c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f910 	bl	80082d8 <USBD_CtlSendStatus>
      }
      break;
 80080b8:	e004      	b.n	80080c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f840 	bl	8008142 <USBD_CtlError>
      break;
 80080c2:	e000      	b.n	80080c6 <USBD_ClrFeature+0x3c>
      break;
 80080c4:	bf00      	nop
  }
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff fa17 	bl	800752c <SWAPBYTE>
 80080fe:	4603      	mov	r3, r0
 8008100:	461a      	mov	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3301      	adds	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff fa0a 	bl	800752c <SWAPBYTE>
 8008118:	4603      	mov	r3, r0
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff f9fd 	bl	800752c <SWAPBYTE>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	80da      	strh	r2, [r3, #6]
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800814c:	2180      	movs	r1, #128	; 0x80
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fce2 	bl	8008b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008154:	2100      	movs	r1, #0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fcde 	bl	8008b18 <USBD_LL_StallEP>
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d036      	beq.n	80081e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800817e:	6938      	ldr	r0, [r7, #16]
 8008180:	f000 f836 	bl	80081f0 <USBD_GetLen>
 8008184:	4603      	mov	r3, r0
 8008186:	3301      	adds	r3, #1
 8008188:	b29b      	uxth	r3, r3
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	b29a      	uxth	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	4413      	add	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7812      	ldrb	r2, [r2, #0]
 800819c:	701a      	strb	r2, [r3, #0]
  idx++;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	3301      	adds	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	2203      	movs	r2, #3
 80081ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	3301      	adds	r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081b4:	e013      	b.n	80081de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	4413      	add	r3, r2
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	7812      	ldrb	r2, [r2, #0]
 80081c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3301      	adds	r3, #1
 80081c6:	613b      	str	r3, [r7, #16]
    idx++;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	3301      	adds	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	4413      	add	r3, r2
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	3301      	adds	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e7      	bne.n	80081b6 <USBD_GetString+0x52>
 80081e6:	e000      	b.n	80081ea <USBD_GetString+0x86>
    return;
 80081e8:	bf00      	nop
  }
}
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008200:	e005      	b.n	800820e <USBD_GetLen+0x1e>
  {
    len++;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	3301      	adds	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3301      	adds	r3, #1
 800820c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1f5      	bne.n	8008202 <USBD_GetLen+0x12>
  }

  return len;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2202      	movs	r2, #2
 8008234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 fced 	bl	8008c2a <USBD_LL_Transmit>

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	2100      	movs	r1, #0
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fcdc 	bl	8008c2a <USBD_LL_Transmit>

  return USBD_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2203      	movs	r2, #3
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fce0 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	2100      	movs	r1, #0
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 fccf 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2204      	movs	r2, #4
 80082e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082e8:	2300      	movs	r3, #0
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fc9b 	bl	8008c2a <USBD_LL_Transmit>

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2205      	movs	r2, #5
 800830a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800830e:	2300      	movs	r3, #0
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fca9 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008328:	2200      	movs	r2, #0
 800832a:	4912      	ldr	r1, [pc, #72]	; (8008374 <MX_USB_DEVICE_Init+0x50>)
 800832c:	4812      	ldr	r0, [pc, #72]	; (8008378 <MX_USB_DEVICE_Init+0x54>)
 800832e:	f7fe fcdd 	bl	8006cec <USBD_Init>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008338:	f7f8 fb52 	bl	80009e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800833c:	490f      	ldr	r1, [pc, #60]	; (800837c <MX_USB_DEVICE_Init+0x58>)
 800833e:	480e      	ldr	r0, [pc, #56]	; (8008378 <MX_USB_DEVICE_Init+0x54>)
 8008340:	f7fe fd04 	bl	8006d4c <USBD_RegisterClass>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800834a:	f7f8 fb49 	bl	80009e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800834e:	490c      	ldr	r1, [pc, #48]	; (8008380 <MX_USB_DEVICE_Init+0x5c>)
 8008350:	4809      	ldr	r0, [pc, #36]	; (8008378 <MX_USB_DEVICE_Init+0x54>)
 8008352:	f7fe fc3b 	bl	8006bcc <USBD_CDC_RegisterInterface>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800835c:	f7f8 fb40 	bl	80009e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008360:	4805      	ldr	r0, [pc, #20]	; (8008378 <MX_USB_DEVICE_Init+0x54>)
 8008362:	f7fe fd29 	bl	8006db8 <USBD_Start>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800836c:	f7f8 fb38 	bl	80009e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008370:	bf00      	nop
 8008372:	bd80      	pop	{r7, pc}
 8008374:	200000ac 	.word	0x200000ac
 8008378:	200002e8 	.word	0x200002e8
 800837c:	20000018 	.word	0x20000018
 8008380:	20000098 	.word	0x20000098

08008384 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008388:	2200      	movs	r2, #0
 800838a:	4905      	ldr	r1, [pc, #20]	; (80083a0 <CDC_Init_FS+0x1c>)
 800838c:	4805      	ldr	r0, [pc, #20]	; (80083a4 <CDC_Init_FS+0x20>)
 800838e:	f7fe fc37 	bl	8006c00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008392:	4905      	ldr	r1, [pc, #20]	; (80083a8 <CDC_Init_FS+0x24>)
 8008394:	4803      	ldr	r0, [pc, #12]	; (80083a4 <CDC_Init_FS+0x20>)
 8008396:	f7fe fc55 	bl	8006c44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800839a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800839c:	4618      	mov	r0, r3
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20000dc4 	.word	0x20000dc4
 80083a4:	200002e8 	.word	0x200002e8
 80083a8:	200005c4 	.word	0x200005c4

080083ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	6039      	str	r1, [r7, #0]
 80083c6:	71fb      	strb	r3, [r7, #7]
 80083c8:	4613      	mov	r3, r2
 80083ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b23      	cmp	r3, #35	; 0x23
 80083d0:	d84a      	bhi.n	8008468 <CDC_Control_FS+0xac>
 80083d2:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <CDC_Control_FS+0x1c>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	08008469 	.word	0x08008469
 80083dc:	08008469 	.word	0x08008469
 80083e0:	08008469 	.word	0x08008469
 80083e4:	08008469 	.word	0x08008469
 80083e8:	08008469 	.word	0x08008469
 80083ec:	08008469 	.word	0x08008469
 80083f0:	08008469 	.word	0x08008469
 80083f4:	08008469 	.word	0x08008469
 80083f8:	08008469 	.word	0x08008469
 80083fc:	08008469 	.word	0x08008469
 8008400:	08008469 	.word	0x08008469
 8008404:	08008469 	.word	0x08008469
 8008408:	08008469 	.word	0x08008469
 800840c:	08008469 	.word	0x08008469
 8008410:	08008469 	.word	0x08008469
 8008414:	08008469 	.word	0x08008469
 8008418:	08008469 	.word	0x08008469
 800841c:	08008469 	.word	0x08008469
 8008420:	08008469 	.word	0x08008469
 8008424:	08008469 	.word	0x08008469
 8008428:	08008469 	.word	0x08008469
 800842c:	08008469 	.word	0x08008469
 8008430:	08008469 	.word	0x08008469
 8008434:	08008469 	.word	0x08008469
 8008438:	08008469 	.word	0x08008469
 800843c:	08008469 	.word	0x08008469
 8008440:	08008469 	.word	0x08008469
 8008444:	08008469 	.word	0x08008469
 8008448:	08008469 	.word	0x08008469
 800844c:	08008469 	.word	0x08008469
 8008450:	08008469 	.word	0x08008469
 8008454:	08008469 	.word	0x08008469
 8008458:	08008469 	.word	0x08008469
 800845c:	08008469 	.word	0x08008469
 8008460:	08008469 	.word	0x08008469
 8008464:	08008469 	.word	0x08008469
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008468:	bf00      	nop
  }

  return (USBD_OK);
 800846a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	4805      	ldr	r0, [pc, #20]	; (800849c <CDC_Receive_FS+0x24>)
 8008486:	f7fe fbdd 	bl	8006c44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800848a:	4804      	ldr	r0, [pc, #16]	; (800849c <CDC_Receive_FS+0x24>)
 800848c:	f7fe fbf8 	bl	8006c80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	200002e8 	.word	0x200002e8

080084a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2212      	movs	r2, #18
 80084d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084d6:	4b03      	ldr	r3, [pc, #12]	; (80084e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	200000cc 	.word	0x200000cc

080084e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2204      	movs	r2, #4
 80084f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084fa:	4b03      	ldr	r3, [pc, #12]	; (8008508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	200000ec 	.word	0x200000ec

0800850c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4907      	ldr	r1, [pc, #28]	; (8008540 <USBD_FS_ProductStrDescriptor+0x34>)
 8008522:	4808      	ldr	r0, [pc, #32]	; (8008544 <USBD_FS_ProductStrDescriptor+0x38>)
 8008524:	f7ff fe1e 	bl	8008164 <USBD_GetString>
 8008528:	e004      	b.n	8008534 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	4904      	ldr	r1, [pc, #16]	; (8008540 <USBD_FS_ProductStrDescriptor+0x34>)
 800852e:	4805      	ldr	r0, [pc, #20]	; (8008544 <USBD_FS_ProductStrDescriptor+0x38>)
 8008530:	f7ff fe18 	bl	8008164 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200015c4 	.word	0x200015c4
 8008544:	08008e68 	.word	0x08008e68

08008548 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	4904      	ldr	r1, [pc, #16]	; (8008568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008558:	4804      	ldr	r0, [pc, #16]	; (800856c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800855a:	f7ff fe03 	bl	8008164 <USBD_GetString>
  return USBD_StrDesc;
 800855e:	4b02      	ldr	r3, [pc, #8]	; (8008568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	200015c4 	.word	0x200015c4
 800856c:	08008e78 	.word	0x08008e78

08008570 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	221a      	movs	r2, #26
 8008580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008582:	f000 f855 	bl	8008630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008586:	4b02      	ldr	r3, [pc, #8]	; (8008590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	200000f0 	.word	0x200000f0

08008594 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4907      	ldr	r1, [pc, #28]	; (80085c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80085ac:	f7ff fdda 	bl	8008164 <USBD_GetString>
 80085b0:	e004      	b.n	80085bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4904      	ldr	r1, [pc, #16]	; (80085c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085b6:	4805      	ldr	r0, [pc, #20]	; (80085cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80085b8:	f7ff fdd4 	bl	8008164 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200015c4 	.word	0x200015c4
 80085cc:	08008e8c 	.word	0x08008e8c

080085d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4907      	ldr	r1, [pc, #28]	; (8008604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085e6:	4808      	ldr	r0, [pc, #32]	; (8008608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e8:	f7ff fdbc 	bl	8008164 <USBD_GetString>
 80085ec:	e004      	b.n	80085f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085f4:	f7ff fdb6 	bl	8008164 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200015c4 	.word	0x200015c4
 8008608:	08008e98 	.word	0x08008e98

0800860c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	220c      	movs	r2, #12
 800861c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800861e:	4b03      	ldr	r3, [pc, #12]	; (800862c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	200000e0 	.word	0x200000e0

08008630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008636:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <Get_SerialNum+0x44>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800863c:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <Get_SerialNum+0x48>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008642:	4b0e      	ldr	r3, [pc, #56]	; (800867c <Get_SerialNum+0x4c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d009      	beq.n	800866a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008656:	2208      	movs	r2, #8
 8008658:	4909      	ldr	r1, [pc, #36]	; (8008680 <Get_SerialNum+0x50>)
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 f814 	bl	8008688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008660:	2204      	movs	r2, #4
 8008662:	4908      	ldr	r1, [pc, #32]	; (8008684 <Get_SerialNum+0x54>)
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	f000 f80f 	bl	8008688 <IntToUnicode>
  }
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	1fff7a10 	.word	0x1fff7a10
 8008678:	1fff7a14 	.word	0x1fff7a14
 800867c:	1fff7a18 	.word	0x1fff7a18
 8008680:	200000f2 	.word	0x200000f2
 8008684:	20000102 	.word	0x20000102

08008688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800869a:	2300      	movs	r3, #0
 800869c:	75fb      	strb	r3, [r7, #23]
 800869e:	e027      	b.n	80086f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	0f1b      	lsrs	r3, r3, #28
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d80b      	bhi.n	80086c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	0f1b      	lsrs	r3, r3, #28
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	4619      	mov	r1, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	440b      	add	r3, r1
 80086b8:	3230      	adds	r2, #48	; 0x30
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e00a      	b.n	80086d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	0f1b      	lsrs	r3, r3, #28
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4619      	mov	r1, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	440b      	add	r3, r1
 80086d0:	3237      	adds	r2, #55	; 0x37
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	3301      	adds	r3, #1
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	4413      	add	r3, r2
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	3301      	adds	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
 80086f0:	7dfa      	ldrb	r2, [r7, #23]
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d3d3      	bcc.n	80086a0 <IntToUnicode+0x18>
  }
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
	...

08008708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b0a0      	sub	sp, #128	; 0x80
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008710:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	605a      	str	r2, [r3, #4]
 800871a:	609a      	str	r2, [r3, #8]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008720:	f107 0310 	add.w	r3, r7, #16
 8008724:	225c      	movs	r2, #92	; 0x5c
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fb89 	bl	8008e40 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008736:	d149      	bne.n	80087cc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800873c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800873e:	2300      	movs	r3, #0
 8008740:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008742:	f107 0310 	add.w	r3, r7, #16
 8008746:	4618      	mov	r0, r3
 8008748:	f7fa fcf4 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8008752:	f7f8 f945 	bl	80009e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	6313      	str	r3, [r2, #48]	; 0x30
 8008766:	4b1b      	ldr	r3, [pc, #108]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008776:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008778:	2302      	movs	r3, #2
 800877a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877c:	2300      	movs	r3, #0
 800877e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008780:	2303      	movs	r3, #3
 8008782:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008784:	230a      	movs	r3, #10
 8008786:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800878c:	4619      	mov	r1, r3
 800878e:	4812      	ldr	r0, [pc, #72]	; (80087d8 <HAL_PCD_MspInit+0xd0>)
 8008790:	f7f8 fd42 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008794:	4b0f      	ldr	r3, [pc, #60]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 8008796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008798:	4a0e      	ldr	r2, [pc, #56]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 800879a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879e:	6353      	str	r3, [r2, #52]	; 0x34
 80087a0:	2300      	movs	r3, #0
 80087a2:	60bb      	str	r3, [r7, #8]
 80087a4:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 80087a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a8:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 80087aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087ae:	6453      	str	r3, [r2, #68]	; 0x44
 80087b0:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <HAL_PCD_MspInit+0xcc>)
 80087b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087bc:	2200      	movs	r2, #0
 80087be:	2100      	movs	r1, #0
 80087c0:	2043      	movs	r0, #67	; 0x43
 80087c2:	f7f8 fcf2 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087c6:	2043      	movs	r0, #67	; 0x43
 80087c8:	f7f8 fd0b 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087cc:	bf00      	nop
 80087ce:	3780      	adds	r7, #128	; 0x80
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40023800 	.word	0x40023800
 80087d8:	40020000 	.word	0x40020000

080087dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087f0:	4619      	mov	r1, r3
 80087f2:	4610      	mov	r0, r2
 80087f4:	f7fe fb2d 	bl	8006e52 <USBD_LL_SetupStage>
}
 80087f8:	bf00      	nop
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	4613      	mov	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	78fb      	ldrb	r3, [r7, #3]
 8008828:	4619      	mov	r1, r3
 800882a:	f7fe fb67 	bl	8006efc <USBD_LL_DataOutStage>
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	334c      	adds	r3, #76	; 0x4c
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	4619      	mov	r1, r3
 800885e:	f7fe fc00 	bl	8007062 <USBD_LL_DataInStage>
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fd34 	bl	80072e6 <USBD_LL_SOF>
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d102      	bne.n	80088a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]
 800889e:	e008      	b.n	80088b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d102      	bne.n	80088ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
 80088ac:	e001      	b.n	80088b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088ae:	f7f8 f897 	bl	80009e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088b8:	7bfa      	ldrb	r2, [r7, #15]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fcd4 	bl	800726a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe fc7c 	bl	80071c6 <USBD_LL_Reset>
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fccf 	bl	800728a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800890c:	4b04      	ldr	r3, [pc, #16]	; (8008920 <HAL_PCD_SuspendCallback+0x48>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	4a03      	ldr	r2, [pc, #12]	; (8008920 <HAL_PCD_SuspendCallback+0x48>)
 8008912:	f043 0306 	orr.w	r3, r3, #6
 8008916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed00 	.word	0xe000ed00

08008924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fcbf 	bl	80072b6 <USBD_LL_Resume>
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fd17 	bl	800738a <USBD_LL_IsoOUTIncomplete>
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fcd3 	bl	8007326 <USBD_LL_IsoINIncomplete>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fd29 	bl	80073ee <USBD_LL_DevConnected>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fd26 	bl	8007404 <USBD_LL_DevDisconnected>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d13c      	bne.n	8008a4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089d0:	4a20      	ldr	r2, [pc, #128]	; (8008a54 <USBD_LL_Init+0x94>)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a1e      	ldr	r2, [pc, #120]	; (8008a54 <USBD_LL_Init+0x94>)
 80089dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089e0:	4b1c      	ldr	r3, [pc, #112]	; (8008a54 <USBD_LL_Init+0x94>)
 80089e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80089e8:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <USBD_LL_Init+0x94>)
 80089ea:	2206      	movs	r2, #6
 80089ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089ee:	4b19      	ldr	r3, [pc, #100]	; (8008a54 <USBD_LL_Init+0x94>)
 80089f0:	2202      	movs	r2, #2
 80089f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089f4:	4b17      	ldr	r3, [pc, #92]	; (8008a54 <USBD_LL_Init+0x94>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <USBD_LL_Init+0x94>)
 80089fc:	2202      	movs	r2, #2
 80089fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a00:	4b14      	ldr	r3, [pc, #80]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a06:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a0c:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a18:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a1e:	480d      	ldr	r0, [pc, #52]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a20:	f7f8 ffa5 	bl	800196e <HAL_PCD_Init>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a2a:	f7f7 ffd9 	bl	80009e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a2e:	2180      	movs	r1, #128	; 0x80
 8008a30:	4808      	ldr	r0, [pc, #32]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a32:	f7fa fa30 	bl	8002e96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a36:	2240      	movs	r2, #64	; 0x40
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4806      	ldr	r0, [pc, #24]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a3c:	f7fa f9e4 	bl	8002e08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a40:	2280      	movs	r2, #128	; 0x80
 8008a42:	2101      	movs	r1, #1
 8008a44:	4803      	ldr	r0, [pc, #12]	; (8008a54 <USBD_LL_Init+0x94>)
 8008a46:	f7fa f9df 	bl	8002e08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	200017c4 	.word	0x200017c4

08008a58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7f9 f8a1 	bl	8001bb6 <HAL_PCD_Start>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f990 	bl	8008da0 <USBD_Get_USB_Status>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	4608      	mov	r0, r1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	70fb      	strb	r3, [r7, #3]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70bb      	strb	r3, [r7, #2]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ab6:	78bb      	ldrb	r3, [r7, #2]
 8008ab8:	883a      	ldrh	r2, [r7, #0]
 8008aba:	78f9      	ldrb	r1, [r7, #3]
 8008abc:	f7f9 fd9f 	bl	80025fe <HAL_PCD_EP_Open>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f96a 	bl	8008da0 <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	4611      	mov	r1, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f9 fde8 	bl	80026ce <HAL_PCD_EP_Close>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 f94b 	bl	8008da0 <USBD_Get_USB_Status>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7f9 fec0 	bl	80028bc <HAL_PCD_EP_SetStall>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f92c 	bl	8008da0 <USBD_Get_USB_Status>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7f9 ff05 	bl	8002984 <HAL_PCD_EP_ClrStall>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f90d 	bl	8008da0 <USBD_Get_USB_Status>
 8008b86:	4603      	mov	r3, r0
 8008b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ba6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da0b      	bge.n	8008bc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb6:	68f9      	ldr	r1, [r7, #12]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	333e      	adds	r3, #62	; 0x3e
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	e00b      	b.n	8008be0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bce:	68f9      	ldr	r1, [r7, #12]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	440b      	add	r3, r1
 8008bda:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008bde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7f9 fcd2 	bl	80025b4 <HAL_PCD_SetAddress>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f8c2 	bl	8008da0 <USBD_Get_USB_Status>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b086      	sub	sp, #24
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	460b      	mov	r3, r1
 8008c38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c48:	7af9      	ldrb	r1, [r7, #11]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	f7f9 fdeb 	bl	8002828 <HAL_PCD_EP_Transmit>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 f8a1 	bl	8008da0 <USBD_Get_USB_Status>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c62:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c8a:	7af9      	ldrb	r1, [r7, #11]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	f7f9 fd67 	bl	8002762 <HAL_PCD_EP_Receive>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f880 	bl	8008da0 <USBD_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ca4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f9 fd97 	bl	80027f8 <HAL_PCD_EP_GetRxCount>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <HAL_PCDEx_LPM_Callback+0x18>
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d01f      	beq.n	8008d2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008cea:	e03b      	b.n	8008d64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d007      	beq.n	8008d04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008cf4:	f7f7 fc22 	bl	800053c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cf8:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008cfe:	f023 0306 	bic.w	r3, r3, #6
 8008d02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d16:	f023 0301 	bic.w	r3, r3, #1
 8008d1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fac7 	bl	80072b6 <USBD_LL_Resume>
    break;
 8008d28:	e01c      	b.n	8008d64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6812      	ldr	r2, [r2, #0]
 8008d38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fa9e 	bl	800728a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8008d5c:	f043 0306 	orr.w	r3, r3, #6
 8008d60:	6113      	str	r3, [r2, #16]
    break;
 8008d62:	bf00      	nop
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d78:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <USBD_static_malloc+0x18>)
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20001cd0 	.word	0x20001cd0

08008d8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]

}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d817      	bhi.n	8008de4 <USBD_Get_USB_Status+0x44>
 8008db4:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <USBD_Get_USB_Status+0x1c>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008dd3 	.word	0x08008dd3
 8008dc4:	08008dd9 	.word	0x08008dd9
 8008dc8:	08008ddf 	.word	0x08008ddf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	e00b      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd6:	e008      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
    break;
 8008ddc:	e005      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dde:	2303      	movs	r3, #3
 8008de0:	73fb      	strb	r3, [r7, #15]
    break;
 8008de2:	e002      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008de4:	2303      	movs	r3, #3
 8008de6:	73fb      	strb	r3, [r7, #15]
    break;
 8008de8:	bf00      	nop
  }
  return usb_status;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <__libc_init_array>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4d0d      	ldr	r5, [pc, #52]	; (8008e30 <__libc_init_array+0x38>)
 8008dfc:	4c0d      	ldr	r4, [pc, #52]	; (8008e34 <__libc_init_array+0x3c>)
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	2600      	movs	r6, #0
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	d109      	bne.n	8008e1c <__libc_init_array+0x24>
 8008e08:	4d0b      	ldr	r5, [pc, #44]	; (8008e38 <__libc_init_array+0x40>)
 8008e0a:	4c0c      	ldr	r4, [pc, #48]	; (8008e3c <__libc_init_array+0x44>)
 8008e0c:	f000 f820 	bl	8008e50 <_init>
 8008e10:	1b64      	subs	r4, r4, r5
 8008e12:	10a4      	asrs	r4, r4, #2
 8008e14:	2600      	movs	r6, #0
 8008e16:	42a6      	cmp	r6, r4
 8008e18:	d105      	bne.n	8008e26 <__libc_init_array+0x2e>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e20:	4798      	blx	r3
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7ee      	b.n	8008e04 <__libc_init_array+0xc>
 8008e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2a:	4798      	blx	r3
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	e7f2      	b.n	8008e16 <__libc_init_array+0x1e>
 8008e30:	08008ec8 	.word	0x08008ec8
 8008e34:	08008ec8 	.word	0x08008ec8
 8008e38:	08008ec8 	.word	0x08008ec8
 8008e3c:	08008ecc 	.word	0x08008ecc

08008e40 <memset>:
 8008e40:	4402      	add	r2, r0
 8008e42:	4603      	mov	r3, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
