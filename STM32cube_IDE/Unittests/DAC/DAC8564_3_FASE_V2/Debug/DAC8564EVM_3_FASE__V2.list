
DAC8564EVM_3_FASE__V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c804  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800c9d0  0800c9d0  0001c9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc00  0800cc00  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc08  0800cc08  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc08  0800cc08  0001cc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800cc10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a530  20000110  0800cd20  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a640  0800cd20  0002a640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b745  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397d  00000000  00000000  0003b885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0003f208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00040880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d7c  00000000  00000000  00041d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd5b  00000000  00000000  00067b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8922  00000000  00000000  00083867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006364  00000000  00000000  0015c1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000110 	.word	0x20000110
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c9b4 	.word	0x0800c9b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000114 	.word	0x20000114
 8000204:	0800c9b4 	.word	0x0800c9b4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b974 	b.w	8000ee4 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	468e      	mov	lr, r1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d14d      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c22:	428a      	cmp	r2, r1
 8000c24:	4694      	mov	ip, r2
 8000c26:	d969      	bls.n	8000cfc <__udivmoddi4+0xe8>
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	b152      	cbz	r2, 8000c44 <__udivmoddi4+0x30>
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	f1c2 0120 	rsb	r1, r2, #32
 8000c36:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c42:	4094      	lsls	r4, r2
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	0c21      	lsrs	r1, r4, #16
 8000c4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4e:	fa1f f78c 	uxth.w	r7, ip
 8000c52:	fb08 e316 	mls	r3, r8, r6, lr
 8000c56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5a:	fb06 f107 	mul.w	r1, r6, r7
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 811f 	bcs.w	8000eac <__udivmoddi4+0x298>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 811c 	bls.w	8000eac <__udivmoddi4+0x298>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 f707 	mul.w	r7, r0, r7
 8000c8c:	42a7      	cmp	r7, r4
 8000c8e:	d90a      	bls.n	8000ca6 <__udivmoddi4+0x92>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x29c>
 8000c9c:	42a7      	cmp	r7, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x29c>
 8000ca2:	4464      	add	r4, ip
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	1be4      	subs	r4, r4, r7
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa4>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xc2>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	f000 80ef 	beq.w	8000ea6 <__udivmoddi4+0x292>
 8000cc8:	2600      	movs	r6, #0
 8000cca:	e9c5 0100 	strd	r0, r1, [r5]
 8000cce:	4630      	mov	r0, r6
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f683 	clz	r6, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d14a      	bne.n	8000d74 <__udivmoddi4+0x160>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd4>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80f9 	bhi.w	8000eda <__udivmoddi4+0x2c6>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa4>
 8000cf6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa4>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xec>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 8092 	bne.w	8000e2e <__udivmoddi4+0x21a>
 8000d0a:	eba1 010c 	sub.w	r1, r1, ip
 8000d0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d12:	fa1f fe8c 	uxth.w	lr, ip
 8000d16:	2601      	movs	r6, #1
 8000d18:	0c20      	lsrs	r0, r4, #16
 8000d1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d26:	fb0e f003 	mul.w	r0, lr, r3
 8000d2a:	4288      	cmp	r0, r1
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x12c>
 8000d2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x12a>
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	f200 80cb 	bhi.w	8000ed4 <__udivmoddi4+0x2c0>
 8000d3e:	4643      	mov	r3, r8
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d48:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d50:	fb0e fe00 	mul.w	lr, lr, r0
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x156>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d60:	d202      	bcs.n	8000d68 <__udivmoddi4+0x154>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	f200 80bb 	bhi.w	8000ede <__udivmoddi4+0x2ca>
 8000d68:	4608      	mov	r0, r1
 8000d6a:	eba4 040e 	sub.w	r4, r4, lr
 8000d6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x9a>
 8000d74:	f1c6 0720 	rsb	r7, r6, #32
 8000d78:	40b3      	lsls	r3, r6
 8000d7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d82:	fa20 f407 	lsr.w	r4, r0, r7
 8000d86:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8a:	431c      	orrs	r4, r3
 8000d8c:	40f9      	lsrs	r1, r7
 8000d8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d92:	fa00 f306 	lsl.w	r3, r0, r6
 8000d96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9a:	0c20      	lsrs	r0, r4, #16
 8000d9c:	fa1f fe8c 	uxth.w	lr, ip
 8000da0:	fb09 1118 	mls	r1, r9, r8, r1
 8000da4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dac:	4288      	cmp	r0, r1
 8000dae:	fa02 f206 	lsl.w	r2, r2, r6
 8000db2:	d90b      	bls.n	8000dcc <__udivmoddi4+0x1b8>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dbc:	f080 8088 	bcs.w	8000ed0 <__udivmoddi4+0x2bc>
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	f240 8085 	bls.w	8000ed0 <__udivmoddi4+0x2bc>
 8000dc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ddc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de0:	458e      	cmp	lr, r1
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1e2>
 8000de4:	eb1c 0101 	adds.w	r1, ip, r1
 8000de8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dec:	d26c      	bcs.n	8000ec8 <__udivmoddi4+0x2b4>
 8000dee:	458e      	cmp	lr, r1
 8000df0:	d96a      	bls.n	8000ec8 <__udivmoddi4+0x2b4>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4461      	add	r1, ip
 8000df6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfe:	eba1 010e 	sub.w	r1, r1, lr
 8000e02:	42a1      	cmp	r1, r4
 8000e04:	46c8      	mov	r8, r9
 8000e06:	46a6      	mov	lr, r4
 8000e08:	d356      	bcc.n	8000eb8 <__udivmoddi4+0x2a4>
 8000e0a:	d053      	beq.n	8000eb4 <__udivmoddi4+0x2a0>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x212>
 8000e0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e12:	eb61 010e 	sbc.w	r1, r1, lr
 8000e16:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1e:	40f1      	lsrs	r1, r6
 8000e20:	431f      	orrs	r7, r3
 8000e22:	e9c5 7100 	strd	r7, r1, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1c2 0320 	rsb	r3, r2, #32
 8000e32:	40d8      	lsrs	r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	4301      	orrs	r1, r0
 8000e40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e44:	fa1f fe8c 	uxth.w	lr, ip
 8000e48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e50:	0c0b      	lsrs	r3, r1, #16
 8000e52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e56:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5a:	429e      	cmp	r6, r3
 8000e5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x260>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6a:	d22f      	bcs.n	8000ecc <__udivmoddi4+0x2b8>
 8000e6c:	429e      	cmp	r6, r3
 8000e6e:	d92d      	bls.n	8000ecc <__udivmoddi4+0x2b8>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1b9b      	subs	r3, r3, r6
 8000e76:	b289      	uxth	r1, r1
 8000e78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb06 f30e 	mul.w	r3, r6, lr
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x28a>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e94:	d216      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d914      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e9a:	3e02      	subs	r6, #2
 8000e9c:	4461      	add	r1, ip
 8000e9e:	1ac9      	subs	r1, r1, r3
 8000ea0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea4:	e738      	b.n	8000d18 <__udivmoddi4+0x104>
 8000ea6:	462e      	mov	r6, r5
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	e705      	b.n	8000cb8 <__udivmoddi4+0xa4>
 8000eac:	4606      	mov	r6, r0
 8000eae:	e6e3      	b.n	8000c78 <__udivmoddi4+0x64>
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x92>
 8000eb4:	454b      	cmp	r3, r9
 8000eb6:	d2a9      	bcs.n	8000e0c <__udivmoddi4+0x1f8>
 8000eb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ebc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7a3      	b.n	8000e0c <__udivmoddi4+0x1f8>
 8000ec4:	4646      	mov	r6, r8
 8000ec6:	e7ea      	b.n	8000e9e <__udivmoddi4+0x28a>
 8000ec8:	4620      	mov	r0, r4
 8000eca:	e794      	b.n	8000df6 <__udivmoddi4+0x1e2>
 8000ecc:	4640      	mov	r0, r8
 8000ece:	e7d1      	b.n	8000e74 <__udivmoddi4+0x260>
 8000ed0:	46d0      	mov	r8, sl
 8000ed2:	e77b      	b.n	8000dcc <__udivmoddi4+0x1b8>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	4461      	add	r1, ip
 8000ed8:	e732      	b.n	8000d40 <__udivmoddi4+0x12c>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e709      	b.n	8000cf2 <__udivmoddi4+0xde>
 8000ede:	4464      	add	r4, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e742      	b.n	8000d6a <__udivmoddi4+0x156>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <calculate_three_phase_sine_wave_samples>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void calculate_three_phase_sine_wave_samples(uint16_t* wave_A, uint16_t* wave_B, uint16_t* wave_C) {
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ef8:	f000 bda2 	b.w	8001a40 <calculate_three_phase_sine_wave_samples+0xb58>
        double t = (double)i / SAMPLE_RATE;
 8000efc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000efe:	f7ff fad5 	bl	80004ac <__aeabi_i2d>
 8000f02:	a3c1      	add	r3, pc, #772	; (adr r3, 8001208 <calculate_three_phase_sine_wave_samples+0x320>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fc64 	bl	80007d4 <__aeabi_ddiv>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Phase A with harmonic distortion
        double sample_A = AMPLITUDE * sin(2 * PI * FREQUENCY * t);
 8000f14:	4bb4      	ldr	r3, [pc, #720]	; (80011e8 <calculate_three_phase_sine_wave_samples+0x300>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fad9 	bl	80004d0 <__aeabi_f2d>
 8000f1e:	4604      	mov	r4, r0
 8000f20:	460d      	mov	r5, r1
 8000f22:	a3a3      	add	r3, pc, #652	; (adr r3, 80011b0 <calculate_three_phase_sine_wave_samples+0x2c8>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f2c:	f7ff fb28 	bl	8000580 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	ec43 2b17 	vmov	d7, r2, r3
 8000f38:	eeb0 0a47 	vmov.f32	s0, s14
 8000f3c:	eef0 0a67 	vmov.f32	s1, s15
 8000f40:	f00a fcee 	bl	800b920 <sin>
 8000f44:	ec53 2b10 	vmov	r2, r3, d0
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f7ff fb18 	bl	8000580 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_3 * AMPLITUDE * sin(2 * PI * 3 * FREQUENCY * t);
 8000f58:	4ba4      	ldr	r3, [pc, #656]	; (80011ec <calculate_three_phase_sine_wave_samples+0x304>)
 8000f5a:	ed93 7a00 	vldr	s14, [r3]
 8000f5e:	4ba2      	ldr	r3, [pc, #648]	; (80011e8 <calculate_three_phase_sine_wave_samples+0x300>)
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f68:	ee17 0a90 	vmov	r0, s15
 8000f6c:	f7ff fab0 	bl	80004d0 <__aeabi_f2d>
 8000f70:	4604      	mov	r4, r0
 8000f72:	460d      	mov	r5, r1
 8000f74:	a390      	add	r3, pc, #576	; (adr r3, 80011b8 <calculate_three_phase_sine_wave_samples+0x2d0>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f7e:	f7ff faff 	bl	8000580 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	ec43 2b17 	vmov	d7, r2, r3
 8000f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f8e:	eef0 0a67 	vmov.f32	s1, s15
 8000f92:	f00a fcc5 	bl	800b920 <sin>
 8000f96:	ec53 2b10 	vmov	r2, r3, d0
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff faef 	bl	8000580 <__aeabi_dmul>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000faa:	f7ff f933 	bl	8000214 <__adddf3>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_5 * AMPLITUDE * sin(2 * PI * 5 * FREQUENCY * t);
 8000fb6:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <calculate_three_phase_sine_wave_samples+0x308>)
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	4b8a      	ldr	r3, [pc, #552]	; (80011e8 <calculate_three_phase_sine_wave_samples+0x300>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc6:	ee17 0a90 	vmov	r0, s15
 8000fca:	f7ff fa81 	bl	80004d0 <__aeabi_f2d>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	a37b      	add	r3, pc, #492	; (adr r3, 80011c0 <calculate_three_phase_sine_wave_samples+0x2d8>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fdc:	f7ff fad0 	bl	8000580 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	ec43 2b17 	vmov	d7, r2, r3
 8000fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fec:	eef0 0a67 	vmov.f32	s1, s15
 8000ff0:	f00a fc96 	bl	800b920 <sin>
 8000ff4:	ec53 2b10 	vmov	r2, r3, d0
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fac0 	bl	8000580 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001008:	f7ff f904 	bl	8000214 <__adddf3>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_7 * AMPLITUDE * sin(2 * PI * 7 * FREQUENCY * t);
 8001014:	4b77      	ldr	r3, [pc, #476]	; (80011f4 <calculate_three_phase_sine_wave_samples+0x30c>)
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	4b73      	ldr	r3, [pc, #460]	; (80011e8 <calculate_three_phase_sine_wave_samples+0x300>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	ee17 0a90 	vmov	r0, s15
 8001028:	f7ff fa52 	bl	80004d0 <__aeabi_f2d>
 800102c:	4604      	mov	r4, r0
 800102e:	460d      	mov	r5, r1
 8001030:	a365      	add	r3, pc, #404	; (adr r3, 80011c8 <calculate_three_phase_sine_wave_samples+0x2e0>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800103a:	f7ff faa1 	bl	8000580 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	ec43 2b17 	vmov	d7, r2, r3
 8001046:	eeb0 0a47 	vmov.f32	s0, s14
 800104a:	eef0 0a67 	vmov.f32	s1, s15
 800104e:	f00a fc67 	bl	800b920 <sin>
 8001052:	ec53 2b10 	vmov	r2, r3, d0
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff fa91 	bl	8000580 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001066:	f7ff f8d5 	bl	8000214 <__adddf3>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_9 * AMPLITUDE * sin(2 * PI * 9 * FREQUENCY * t);
 8001072:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <calculate_three_phase_sine_wave_samples+0x310>)
 8001074:	ed93 7a00 	vldr	s14, [r3]
 8001078:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <calculate_three_phase_sine_wave_samples+0x300>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001082:	ee17 0a90 	vmov	r0, s15
 8001086:	f7ff fa23 	bl	80004d0 <__aeabi_f2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	a350      	add	r3, pc, #320	; (adr r3, 80011d0 <calculate_three_phase_sine_wave_samples+0x2e8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001098:	f7ff fa72 	bl	8000580 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	ec43 2b17 	vmov	d7, r2, r3
 80010a4:	eeb0 0a47 	vmov.f32	s0, s14
 80010a8:	eef0 0a67 	vmov.f32	s1, s15
 80010ac:	f00a fc38 	bl	800b920 <sin>
 80010b0:	ec53 2b10 	vmov	r2, r3, d0
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff fa62 	bl	8000580 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010c4:	f7ff f8a6 	bl	8000214 <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_11 * AMPLITUDE * sin(2 * PI * 11 * FREQUENCY * t);
 80010d0:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <calculate_three_phase_sine_wave_samples+0x314>)
 80010d2:	ed93 7a00 	vldr	s14, [r3]
 80010d6:	4b44      	ldr	r3, [pc, #272]	; (80011e8 <calculate_three_phase_sine_wave_samples+0x300>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	ee17 0a90 	vmov	r0, s15
 80010e4:	f7ff f9f4 	bl	80004d0 <__aeabi_f2d>
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	a33a      	add	r3, pc, #232	; (adr r3, 80011d8 <calculate_three_phase_sine_wave_samples+0x2f0>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010f6:	f7ff fa43 	bl	8000580 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	ec43 2b17 	vmov	d7, r2, r3
 8001102:	eeb0 0a47 	vmov.f32	s0, s14
 8001106:	eef0 0a67 	vmov.f32	s1, s15
 800110a:	f00a fc09 	bl	800b920 <sin>
 800110e:	ec53 2b10 	vmov	r2, r3, d0
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff fa33 	bl	8000580 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001122:	f7ff f877 	bl	8000214 <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_13 * AMPLITUDE * sin(2 * PI * 13 * FREQUENCY * t);
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <calculate_three_phase_sine_wave_samples+0x318>)
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <calculate_three_phase_sine_wave_samples+0x300>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113e:	ee17 0a90 	vmov	r0, s15
 8001142:	f7ff f9c5 	bl	80004d0 <__aeabi_f2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	a325      	add	r3, pc, #148	; (adr r3, 80011e0 <calculate_three_phase_sine_wave_samples+0x2f8>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001154:	f7ff fa14 	bl	8000580 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	ec43 2b17 	vmov	d7, r2, r3
 8001160:	eeb0 0a47 	vmov.f32	s0, s14
 8001164:	eef0 0a67 	vmov.f32	s1, s15
 8001168:	f00a fbda 	bl	800b920 <sin>
 800116c:	ec53 2b10 	vmov	r2, r3, d0
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff fa04 	bl	8000580 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001180:	f7ff f848 	bl	8000214 <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (sample_A >= 2.5)
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <calculate_three_phase_sine_wave_samples+0x31c>)
 8001192:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001196:	f7ff fc79 	bl	8000a8c <__aeabi_dcmpge>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d037      	beq.n	8001210 <calculate_three_phase_sine_wave_samples+0x328>
        {
        	sample_A= 2.5;
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <calculate_three_phase_sine_wave_samples+0x31c>)
 80011a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80011aa:	e040      	b.n	800122e <calculate_three_phase_sine_wave_samples+0x346>
 80011ac:	f3af 8000 	nop.w
 80011b0:	5974e65c 	.word	0x5974e65c
 80011b4:	4073a28c 	.word	0x4073a28c
 80011b8:	862f598b 	.word	0x862f598b
 80011bc:	408d73d2 	.word	0x408d73d2
 80011c0:	6fd21ff3 	.word	0x6fd21ff3
 80011c4:	40988b2f 	.word	0x40988b2f
 80011c8:	ce464991 	.word	0xce464991
 80011cc:	40a12e3a 	.word	0x40a12e3a
 80011d0:	e4a38328 	.word	0xe4a38328
 80011d4:	40a616dd 	.word	0x40a616dd
 80011d8:	fb00bcbf 	.word	0xfb00bcbf
 80011dc:	40aaff80 	.word	0x40aaff80
 80011e0:	115df656 	.word	0x115df656
 80011e4:	40afe824 	.word	0x40afe824
 80011e8:	200002a8 	.word	0x200002a8
 80011ec:	200002ac 	.word	0x200002ac
 80011f0:	200002b0 	.word	0x200002b0
 80011f4:	200002b4 	.word	0x200002b4
 80011f8:	200002b8 	.word	0x200002b8
 80011fc:	200002bc 	.word	0x200002bc
 8001200:	200002c0 	.word	0x200002c0
 8001204:	40040000 	.word	0x40040000
 8001208:	00000000 	.word	0x00000000
 800120c:	40e77000 	.word	0x40e77000
        }
        else if (sample_A <= -2.5)
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4bd6      	ldr	r3, [pc, #856]	; (8001570 <calculate_three_phase_sine_wave_samples+0x688>)
 8001216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800121a:	f7ff fc2d 	bl	8000a78 <__aeabi_dcmple>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <calculate_three_phase_sine_wave_samples+0x346>
		{
			sample_A= -2.5;
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4bd1      	ldr	r3, [pc, #836]	; (8001570 <calculate_three_phase_sine_wave_samples+0x688>)
 800122a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

        wave_A[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_A + VREF));
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4bd0      	ldr	r3, [pc, #832]	; (8001574 <calculate_three_phase_sine_wave_samples+0x68c>)
 8001234:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001238:	f7fe ffec 	bl	8000214 <__adddf3>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	a3b8      	add	r3, pc, #736	; (adr r3, 8001528 <calculate_three_phase_sine_wave_samples+0x640>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f999 	bl	8000580 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	18d4      	adds	r4, r2, r3
 800125e:	f7ff fc51 	bl	8000b04 <__aeabi_d2uiz>
 8001262:	4603      	mov	r3, r0
 8001264:	b29b      	uxth	r3, r3
 8001266:	8023      	strh	r3, [r4, #0]

        // Phase B with harmonic distortion (120 degrees shifted)

        double sample_B = AMPLITUDE * sin(2 * PI * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 8001268:	4bc3      	ldr	r3, [pc, #780]	; (8001578 <calculate_three_phase_sine_wave_samples+0x690>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f92f 	bl	80004d0 <__aeabi_f2d>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	a3ae      	add	r3, pc, #696	; (adr r3, 8001530 <calculate_three_phase_sine_wave_samples+0x648>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001280:	f7ff f97e 	bl	8000580 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	a3aa      	add	r3, pc, #680	; (adr r3, 8001538 <calculate_three_phase_sine_wave_samples+0x650>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7fe ffbf 	bl	8000214 <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	ec43 2b17 	vmov	d7, r2, r3
 800129e:	eeb0 0a47 	vmov.f32	s0, s14
 80012a2:	eef0 0a67 	vmov.f32	s1, s15
 80012a6:	f00a fb3b 	bl	800b920 <sin>
 80012aa:	ec53 2b10 	vmov	r2, r3, d0
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f965 	bl	8000580 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_3 * AMPLITUDE * sin(2 * PI * 3 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 80012be:	4baf      	ldr	r3, [pc, #700]	; (800157c <calculate_three_phase_sine_wave_samples+0x694>)
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	4bac      	ldr	r3, [pc, #688]	; (8001578 <calculate_three_phase_sine_wave_samples+0x690>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ce:	ee17 0a90 	vmov	r0, s15
 80012d2:	f7ff f8fd 	bl	80004d0 <__aeabi_f2d>
 80012d6:	4604      	mov	r4, r0
 80012d8:	460d      	mov	r5, r1
 80012da:	a399      	add	r3, pc, #612	; (adr r3, 8001540 <calculate_three_phase_sine_wave_samples+0x658>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e4:	f7ff f94c 	bl	8000580 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	a391      	add	r3, pc, #580	; (adr r3, 8001538 <calculate_three_phase_sine_wave_samples+0x650>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7fe ff8d 	bl	8000214 <__adddf3>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ec43 2b17 	vmov	d7, r2, r3
 8001302:	eeb0 0a47 	vmov.f32	s0, s14
 8001306:	eef0 0a67 	vmov.f32	s1, s15
 800130a:	f00a fb09 	bl	800b920 <sin>
 800130e:	ec53 2b10 	vmov	r2, r3, d0
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7ff f933 	bl	8000580 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001322:	f7fe ff77 	bl	8000214 <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_5 * AMPLITUDE * sin(2 * PI * 5 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800132e:	4b94      	ldr	r3, [pc, #592]	; (8001580 <calculate_three_phase_sine_wave_samples+0x698>)
 8001330:	ed93 7a00 	vldr	s14, [r3]
 8001334:	4b90      	ldr	r3, [pc, #576]	; (8001578 <calculate_three_phase_sine_wave_samples+0x690>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133e:	ee17 0a90 	vmov	r0, s15
 8001342:	f7ff f8c5 	bl	80004d0 <__aeabi_f2d>
 8001346:	4604      	mov	r4, r0
 8001348:	460d      	mov	r5, r1
 800134a:	a37f      	add	r3, pc, #508	; (adr r3, 8001548 <calculate_three_phase_sine_wave_samples+0x660>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001354:	f7ff f914 	bl	8000580 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	a375      	add	r3, pc, #468	; (adr r3, 8001538 <calculate_three_phase_sine_wave_samples+0x650>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7fe ff55 	bl	8000214 <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	ec43 2b17 	vmov	d7, r2, r3
 8001372:	eeb0 0a47 	vmov.f32	s0, s14
 8001376:	eef0 0a67 	vmov.f32	s1, s15
 800137a:	f00a fad1 	bl	800b920 <sin>
 800137e:	ec53 2b10 	vmov	r2, r3, d0
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7ff f8fb 	bl	8000580 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001392:	f7fe ff3f 	bl	8000214 <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_7 * AMPLITUDE * sin(2 * PI * 7 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800139e:	4b79      	ldr	r3, [pc, #484]	; (8001584 <calculate_three_phase_sine_wave_samples+0x69c>)
 80013a0:	ed93 7a00 	vldr	s14, [r3]
 80013a4:	4b74      	ldr	r3, [pc, #464]	; (8001578 <calculate_three_phase_sine_wave_samples+0x690>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ae:	ee17 0a90 	vmov	r0, s15
 80013b2:	f7ff f88d 	bl	80004d0 <__aeabi_f2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	a365      	add	r3, pc, #404	; (adr r3, 8001550 <calculate_three_phase_sine_wave_samples+0x668>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013c4:	f7ff f8dc 	bl	8000580 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	a359      	add	r3, pc, #356	; (adr r3, 8001538 <calculate_three_phase_sine_wave_samples+0x650>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7fe ff1d 	bl	8000214 <__adddf3>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	ec43 2b17 	vmov	d7, r2, r3
 80013e2:	eeb0 0a47 	vmov.f32	s0, s14
 80013e6:	eef0 0a67 	vmov.f32	s1, s15
 80013ea:	f00a fa99 	bl	800b920 <sin>
 80013ee:	ec53 2b10 	vmov	r2, r3, d0
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f8c3 	bl	8000580 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001402:	f7fe ff07 	bl	8000214 <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_9 * AMPLITUDE * sin(2 * PI * 9 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800140e:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <calculate_three_phase_sine_wave_samples+0x6a0>)
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <calculate_three_phase_sine_wave_samples+0x690>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f855 	bl	80004d0 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	a34b      	add	r3, pc, #300	; (adr r3, 8001558 <calculate_three_phase_sine_wave_samples+0x670>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001434:	f7ff f8a4 	bl	8000580 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a33d      	add	r3, pc, #244	; (adr r3, 8001538 <calculate_three_phase_sine_wave_samples+0x650>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7fe fee5 	bl	8000214 <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	ec43 2b17 	vmov	d7, r2, r3
 8001452:	eeb0 0a47 	vmov.f32	s0, s14
 8001456:	eef0 0a67 	vmov.f32	s1, s15
 800145a:	f00a fa61 	bl	800b920 <sin>
 800145e:	ec53 2b10 	vmov	r2, r3, d0
 8001462:	4620      	mov	r0, r4
 8001464:	4629      	mov	r1, r5
 8001466:	f7ff f88b 	bl	8000580 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001472:	f7fe fecf 	bl	8000214 <__adddf3>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_11 * AMPLITUDE * sin(2 * PI * 11 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <calculate_three_phase_sine_wave_samples+0x6a4>)
 8001480:	ed93 7a00 	vldr	s14, [r3]
 8001484:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <calculate_three_phase_sine_wave_samples+0x690>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	ee17 0a90 	vmov	r0, s15
 8001492:	f7ff f81d 	bl	80004d0 <__aeabi_f2d>
 8001496:	4604      	mov	r4, r0
 8001498:	460d      	mov	r5, r1
 800149a:	a331      	add	r3, pc, #196	; (adr r3, 8001560 <calculate_three_phase_sine_wave_samples+0x678>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a4:	f7ff f86c 	bl	8000580 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	a321      	add	r3, pc, #132	; (adr r3, 8001538 <calculate_three_phase_sine_wave_samples+0x650>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7fe fead 	bl	8000214 <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ec43 2b17 	vmov	d7, r2, r3
 80014c2:	eeb0 0a47 	vmov.f32	s0, s14
 80014c6:	eef0 0a67 	vmov.f32	s1, s15
 80014ca:	f00a fa29 	bl	800b920 <sin>
 80014ce:	ec53 2b10 	vmov	r2, r3, d0
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7ff f853 	bl	8000580 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014e2:	f7fe fe97 	bl	8000214 <__adddf3>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_13 * AMPLITUDE * sin(2 * PI * 13 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <calculate_three_phase_sine_wave_samples+0x6a8>)
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <calculate_three_phase_sine_wave_samples+0x690>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fe:	ee17 0a90 	vmov	r0, s15
 8001502:	f7fe ffe5 	bl	80004d0 <__aeabi_f2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	a317      	add	r3, pc, #92	; (adr r3, 8001568 <calculate_three_phase_sine_wave_samples+0x680>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001514:	f7ff f834 	bl	8000580 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	e038      	b.n	8001594 <calculate_three_phase_sine_wave_samples+0x6ac>
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	9999999a 	.word	0x9999999a
 800152c:	40c99999 	.word	0x40c99999
 8001530:	5974e65c 	.word	0x5974e65c
 8001534:	4073a28c 	.word	0x4073a28c
 8001538:	37db38a1 	.word	0x37db38a1
 800153c:	4000c152 	.word	0x4000c152
 8001540:	862f598b 	.word	0x862f598b
 8001544:	408d73d2 	.word	0x408d73d2
 8001548:	6fd21ff3 	.word	0x6fd21ff3
 800154c:	40988b2f 	.word	0x40988b2f
 8001550:	ce464991 	.word	0xce464991
 8001554:	40a12e3a 	.word	0x40a12e3a
 8001558:	e4a38328 	.word	0xe4a38328
 800155c:	40a616dd 	.word	0x40a616dd
 8001560:	fb00bcbf 	.word	0xfb00bcbf
 8001564:	40aaff80 	.word	0x40aaff80
 8001568:	115df656 	.word	0x115df656
 800156c:	40afe824 	.word	0x40afe824
 8001570:	c0040000 	.word	0xc0040000
 8001574:	40040000 	.word	0x40040000
 8001578:	200002a8 	.word	0x200002a8
 800157c:	200002ac 	.word	0x200002ac
 8001580:	200002b0 	.word	0x200002b0
 8001584:	200002b4 	.word	0x200002b4
 8001588:	200002b8 	.word	0x200002b8
 800158c:	200002bc 	.word	0x200002bc
 8001590:	200002c0 	.word	0x200002c0
 8001594:	a319      	add	r3, pc, #100	; (adr r3, 80015fc <calculate_three_phase_sine_wave_samples+0x714>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7fe fe3b 	bl	8000214 <__adddf3>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	ec43 2b17 	vmov	d7, r2, r3
 80015a6:	eeb0 0a47 	vmov.f32	s0, s14
 80015aa:	eef0 0a67 	vmov.f32	s1, s15
 80015ae:	f00a f9b7 	bl	800b920 <sin>
 80015b2:	ec53 2b10 	vmov	r2, r3, d0
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7fe ffe1 	bl	8000580 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015c6:	f7fe fe25 	bl	8000214 <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (sample_B >= 2.5)
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <calculate_three_phase_sine_wave_samples+0x710>)
 80015d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015dc:	f7ff fa56 	bl	8000a8c <__aeabi_dcmpge>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00e      	beq.n	8001604 <calculate_three_phase_sine_wave_samples+0x71c>
        {
        	sample_B= 2.5;
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <calculate_three_phase_sine_wave_samples+0x710>)
 80015ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80015f0:	e017      	b.n	8001622 <calculate_three_phase_sine_wave_samples+0x73a>
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	40040000 	.word	0x40040000
 80015fc:	37db38a1 	.word	0x37db38a1
 8001600:	4000c152 	.word	0x4000c152
        }
        else if (sample_B <= -2.5)
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4bd5      	ldr	r3, [pc, #852]	; (8001960 <calculate_three_phase_sine_wave_samples+0xa78>)
 800160a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800160e:	f7ff fa33 	bl	8000a78 <__aeabi_dcmple>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <calculate_three_phase_sine_wave_samples+0x73a>
		{
			sample_B= -2.5;
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4bd0      	ldr	r3, [pc, #832]	; (8001960 <calculate_three_phase_sine_wave_samples+0xa78>)
 800161e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

        wave_B[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_B + VREF));
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4bcf      	ldr	r3, [pc, #828]	; (8001964 <calculate_three_phase_sine_wave_samples+0xa7c>)
 8001628:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800162c:	f7fe fdf2 	bl	8000214 <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	a3b7      	add	r3, pc, #732	; (adr r3, 8001918 <calculate_three_phase_sine_wave_samples+0xa30>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ff9f 	bl	8000580 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	18d4      	adds	r4, r2, r3
 8001652:	f7ff fa57 	bl	8000b04 <__aeabi_d2uiz>
 8001656:	4603      	mov	r3, r0
 8001658:	b29b      	uxth	r3, r3
 800165a:	8023      	strh	r3, [r4, #0]


        // Phase C with harmonic distortion (240 degrees shifted)
        double sample_C = AMPLITUDE * sin(2 * PI * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 800165c:	4bc2      	ldr	r3, [pc, #776]	; (8001968 <calculate_three_phase_sine_wave_samples+0xa80>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff35 	bl	80004d0 <__aeabi_f2d>
 8001666:	4604      	mov	r4, r0
 8001668:	460d      	mov	r5, r1
 800166a:	a3ad      	add	r3, pc, #692	; (adr r3, 8001920 <calculate_three_phase_sine_wave_samples+0xa38>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001674:	f7fe ff84 	bl	8000580 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	a3a9      	add	r3, pc, #676	; (adr r3, 8001928 <calculate_three_phase_sine_wave_samples+0xa40>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe fdc5 	bl	8000214 <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b17 	vmov	d7, r2, r3
 8001692:	eeb0 0a47 	vmov.f32	s0, s14
 8001696:	eef0 0a67 	vmov.f32	s1, s15
 800169a:	f00a f941 	bl	800b920 <sin>
 800169e:	ec53 2b10 	vmov	r2, r3, d0
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe ff6b 	bl	8000580 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_3 * AMPLITUDE * sin(2 * PI * 3 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 80016b2:	4bae      	ldr	r3, [pc, #696]	; (800196c <calculate_three_phase_sine_wave_samples+0xa84>)
 80016b4:	ed93 7a00 	vldr	s14, [r3]
 80016b8:	4bab      	ldr	r3, [pc, #684]	; (8001968 <calculate_three_phase_sine_wave_samples+0xa80>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c2:	ee17 0a90 	vmov	r0, s15
 80016c6:	f7fe ff03 	bl	80004d0 <__aeabi_f2d>
 80016ca:	4604      	mov	r4, r0
 80016cc:	460d      	mov	r5, r1
 80016ce:	a398      	add	r3, pc, #608	; (adr r3, 8001930 <calculate_three_phase_sine_wave_samples+0xa48>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d8:	f7fe ff52 	bl	8000580 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a390      	add	r3, pc, #576	; (adr r3, 8001928 <calculate_three_phase_sine_wave_samples+0xa40>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fd93 	bl	8000214 <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b17 	vmov	d7, r2, r3
 80016f6:	eeb0 0a47 	vmov.f32	s0, s14
 80016fa:	eef0 0a67 	vmov.f32	s1, s15
 80016fe:	f00a f90f 	bl	800b920 <sin>
 8001702:	ec53 2b10 	vmov	r2, r3, d0
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe ff39 	bl	8000580 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001716:	f7fe fd7d 	bl	8000214 <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_5 * AMPLITUDE * sin(2 * PI * 5 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001722:	4b93      	ldr	r3, [pc, #588]	; (8001970 <calculate_three_phase_sine_wave_samples+0xa88>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <calculate_three_phase_sine_wave_samples+0xa80>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001732:	ee17 0a90 	vmov	r0, s15
 8001736:	f7fe fecb 	bl	80004d0 <__aeabi_f2d>
 800173a:	4604      	mov	r4, r0
 800173c:	460d      	mov	r5, r1
 800173e:	a37e      	add	r3, pc, #504	; (adr r3, 8001938 <calculate_three_phase_sine_wave_samples+0xa50>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001748:	f7fe ff1a 	bl	8000580 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	a374      	add	r3, pc, #464	; (adr r3, 8001928 <calculate_three_phase_sine_wave_samples+0xa40>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe fd5b 	bl	8000214 <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	ec43 2b17 	vmov	d7, r2, r3
 8001766:	eeb0 0a47 	vmov.f32	s0, s14
 800176a:	eef0 0a67 	vmov.f32	s1, s15
 800176e:	f00a f8d7 	bl	800b920 <sin>
 8001772:	ec53 2b10 	vmov	r2, r3, d0
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7fe ff01 	bl	8000580 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001786:	f7fe fd45 	bl	8000214 <__adddf3>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_7 * AMPLITUDE * sin(2 * PI * 7 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001792:	4b78      	ldr	r3, [pc, #480]	; (8001974 <calculate_three_phase_sine_wave_samples+0xa8c>)
 8001794:	ed93 7a00 	vldr	s14, [r3]
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <calculate_three_phase_sine_wave_samples+0xa80>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a2:	ee17 0a90 	vmov	r0, s15
 80017a6:	f7fe fe93 	bl	80004d0 <__aeabi_f2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	a364      	add	r3, pc, #400	; (adr r3, 8001940 <calculate_three_phase_sine_wave_samples+0xa58>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017b8:	f7fe fee2 	bl	8000580 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	a358      	add	r3, pc, #352	; (adr r3, 8001928 <calculate_three_phase_sine_wave_samples+0xa40>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe fd23 	bl	8000214 <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	ec43 2b17 	vmov	d7, r2, r3
 80017d6:	eeb0 0a47 	vmov.f32	s0, s14
 80017da:	eef0 0a67 	vmov.f32	s1, s15
 80017de:	f00a f89f 	bl	800b920 <sin>
 80017e2:	ec53 2b10 	vmov	r2, r3, d0
 80017e6:	4620      	mov	r0, r4
 80017e8:	4629      	mov	r1, r5
 80017ea:	f7fe fec9 	bl	8000580 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017f6:	f7fe fd0d 	bl	8000214 <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_9 * AMPLITUDE * sin(2 * PI * 9 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <calculate_three_phase_sine_wave_samples+0xa90>)
 8001804:	ed93 7a00 	vldr	s14, [r3]
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <calculate_three_phase_sine_wave_samples+0xa80>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe fe5b 	bl	80004d0 <__aeabi_f2d>
 800181a:	4604      	mov	r4, r0
 800181c:	460d      	mov	r5, r1
 800181e:	a34a      	add	r3, pc, #296	; (adr r3, 8001948 <calculate_three_phase_sine_wave_samples+0xa60>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001828:	f7fe feaa 	bl	8000580 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a33c      	add	r3, pc, #240	; (adr r3, 8001928 <calculate_three_phase_sine_wave_samples+0xa40>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fceb 	bl	8000214 <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	ec43 2b17 	vmov	d7, r2, r3
 8001846:	eeb0 0a47 	vmov.f32	s0, s14
 800184a:	eef0 0a67 	vmov.f32	s1, s15
 800184e:	f00a f867 	bl	800b920 <sin>
 8001852:	ec53 2b10 	vmov	r2, r3, d0
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fe91 	bl	8000580 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001866:	f7fe fcd5 	bl	8000214 <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_11 * AMPLITUDE * sin(2 * PI * 11 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <calculate_three_phase_sine_wave_samples+0xa94>)
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <calculate_three_phase_sine_wave_samples+0xa80>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	ee17 0a90 	vmov	r0, s15
 8001886:	f7fe fe23 	bl	80004d0 <__aeabi_f2d>
 800188a:	4604      	mov	r4, r0
 800188c:	460d      	mov	r5, r1
 800188e:	a330      	add	r3, pc, #192	; (adr r3, 8001950 <calculate_three_phase_sine_wave_samples+0xa68>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001898:	f7fe fe72 	bl	8000580 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	a320      	add	r3, pc, #128	; (adr r3, 8001928 <calculate_three_phase_sine_wave_samples+0xa40>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fcb3 	bl	8000214 <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	ec43 2b17 	vmov	d7, r2, r3
 80018b6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ba:	eef0 0a67 	vmov.f32	s1, s15
 80018be:	f00a f82f 	bl	800b920 <sin>
 80018c2:	ec53 2b10 	vmov	r2, r3, d0
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe fe59 	bl	8000580 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018d6:	f7fe fc9d 	bl	8000214 <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_13 * AMPLITUDE * sin(2 * PI * 13 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <calculate_three_phase_sine_wave_samples+0xa98>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <calculate_three_phase_sine_wave_samples+0xa80>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f7fe fdeb 	bl	80004d0 <__aeabi_f2d>
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
 80018fe:	a316      	add	r3, pc, #88	; (adr r3, 8001958 <calculate_three_phase_sine_wave_samples+0xa70>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001908:	f7fe fe3a 	bl	8000580 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	e036      	b.n	8001984 <calculate_three_phase_sine_wave_samples+0xa9c>
 8001916:	bf00      	nop
 8001918:	9999999a 	.word	0x9999999a
 800191c:	40c99999 	.word	0x40c99999
 8001920:	5974e65c 	.word	0x5974e65c
 8001924:	4073a28c 	.word	0x4073a28c
 8001928:	37db38a1 	.word	0x37db38a1
 800192c:	4010c152 	.word	0x4010c152
 8001930:	862f598b 	.word	0x862f598b
 8001934:	408d73d2 	.word	0x408d73d2
 8001938:	6fd21ff3 	.word	0x6fd21ff3
 800193c:	40988b2f 	.word	0x40988b2f
 8001940:	ce464991 	.word	0xce464991
 8001944:	40a12e3a 	.word	0x40a12e3a
 8001948:	e4a38328 	.word	0xe4a38328
 800194c:	40a616dd 	.word	0x40a616dd
 8001950:	fb00bcbf 	.word	0xfb00bcbf
 8001954:	40aaff80 	.word	0x40aaff80
 8001958:	115df656 	.word	0x115df656
 800195c:	40afe824 	.word	0x40afe824
 8001960:	c0040000 	.word	0xc0040000
 8001964:	40040000 	.word	0x40040000
 8001968:	200002a8 	.word	0x200002a8
 800196c:	200002ac 	.word	0x200002ac
 8001970:	200002b0 	.word	0x200002b0
 8001974:	200002b4 	.word	0x200002b4
 8001978:	200002b8 	.word	0x200002b8
 800197c:	200002bc 	.word	0x200002bc
 8001980:	200002c0 	.word	0x200002c0
 8001984:	a338      	add	r3, pc, #224	; (adr r3, 8001a68 <calculate_three_phase_sine_wave_samples+0xb80>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fc43 	bl	8000214 <__adddf3>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ec43 2b17 	vmov	d7, r2, r3
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	f009 ffbf 	bl	800b920 <sin>
 80019a2:	ec53 2b10 	vmov	r2, r3, d0
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fde9 	bl	8000580 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019b6:	f7fe fc2d 	bl	8000214 <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	e9c7 2306 	strd	r2, r3, [r7, #24]

        if (sample_C >= 2.5)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <calculate_three_phase_sine_wave_samples+0xb78>)
 80019c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019cc:	f7ff f85e 	bl	8000a8c <__aeabi_dcmpge>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <calculate_three_phase_sine_wave_samples+0xafa>
        {
        	sample_C= 2.5;
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <calculate_three_phase_sine_wave_samples+0xb78>)
 80019dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80019e0:	e00e      	b.n	8001a00 <calculate_three_phase_sine_wave_samples+0xb18>
        }
        else if (sample_C <= -2.5)
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <calculate_three_phase_sine_wave_samples+0xb7c>)
 80019e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019ec:	f7ff f844 	bl	8000a78 <__aeabi_dcmple>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <calculate_three_phase_sine_wave_samples+0xb18>
		{
			sample_C= -2.5;
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <calculate_three_phase_sine_wave_samples+0xb7c>)
 80019fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}
        wave_C[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_C + VREF));
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <calculate_three_phase_sine_wave_samples+0xb78>)
 8001a06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a0a:	f7fe fc03 	bl	8000214 <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	a310      	add	r3, pc, #64	; (adr r3, 8001a58 <calculate_three_phase_sine_wave_samples+0xb70>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fdb0 	bl	8000580 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	18d4      	adds	r4, r2, r3
 8001a30:	f7ff f868 	bl	8000b04 <__aeabi_d2uiz>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	8023      	strh	r3, [r4, #0]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001a46:	f6ff aa59 	blt.w	8000efc <calculate_three_phase_sine_wave_samples+0x14>
    }
}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	3738      	adds	r7, #56	; 0x38
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bdb0      	pop	{r4, r5, r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	9999999a 	.word	0x9999999a
 8001a5c:	40c99999 	.word	0x40c99999
 8001a60:	40040000 	.word	0x40040000
 8001a64:	c0040000 	.word	0xc0040000
 8001a68:	37db38a1 	.word	0x37db38a1
 8001a6c:	4010c152 	.word	0x4010c152

08001a70 <select_test_scenario>:

////// Function to select the test scenario and calculate its samples
void select_test_scenario(int scenario_number) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    switch (scenario_number) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	f200 82ab 	bhi.w	8001fd8 <select_test_scenario+0x568>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <select_test_scenario+0x18>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001aa1 	.word	0x08001aa1
 8001a8c:	08001b0f 	.word	0x08001b0f
 8001a90:	08001b7d 	.word	0x08001b7d
 8001a94:	08001beb 	.word	0x08001beb
 8001a98:	08001d95 	.word	0x08001d95
 8001a9c:	08001eb7 	.word	0x08001eb7
		case 1:  // Stroom scenario 1
			AMPLITUDE = (stroom_s1 / 10000) *sqrt(2.0);
 8001aa0:	4b9d      	ldr	r3, [pc, #628]	; (8001d18 <select_test_scenario+0x2a8>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001d1c <select_test_scenario+0x2ac>
 8001aaa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001aae:	ee16 0a90 	vmov	r0, s13
 8001ab2:	f7fe fd0d 	bl	80004d0 <__aeabi_f2d>
 8001ab6:	a396      	add	r3, pc, #600	; (adr r3, 8001d10 <select_test_scenario+0x2a0>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fd60 	bl	8000580 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f7ff f83c 	bl	8000b44 <__aeabi_d2f>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a94      	ldr	r2, [pc, #592]	; (8001d20 <select_test_scenario+0x2b0>)
 8001ad0:	6013      	str	r3, [r2, #0]
			HARMONIC_3 = 0; HARMONIC_5 = 0; HARMONIC_7 = 0; HARMONIC_9 = 0;
 8001ad2:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <select_test_scenario+0x2b4>)
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <select_test_scenario+0x2b8>)
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	4b92      	ldr	r3, [pc, #584]	; (8001d2c <select_test_scenario+0x2bc>)
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4b91      	ldr	r3, [pc, #580]	; (8001d30 <select_test_scenario+0x2c0>)
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
			HARMONIC_11 = 0; HARMONIC_13 = 0;
 8001af2:	4b90      	ldr	r3, [pc, #576]	; (8001d34 <select_test_scenario+0x2c4>)
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	4b8f      	ldr	r3, [pc, #572]	; (8001d38 <select_test_scenario+0x2c8>)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
			calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[0], sine_wave_B_scenario[0], sine_wave_C_scenario[0]);
 8001b02:	4a8e      	ldr	r2, [pc, #568]	; (8001d3c <select_test_scenario+0x2cc>)
 8001b04:	498e      	ldr	r1, [pc, #568]	; (8001d40 <select_test_scenario+0x2d0>)
 8001b06:	488f      	ldr	r0, [pc, #572]	; (8001d44 <select_test_scenario+0x2d4>)
 8001b08:	f7ff f9ee 	bl	8000ee8 <calculate_three_phase_sine_wave_samples>
			break;
 8001b0c:	e264      	b.n	8001fd8 <select_test_scenario+0x568>
		case 2:  // Stroom scenario 2
			AMPLITUDE = (stroom_s2 / 10000) *sqrt(2.0);
 8001b0e:	4b8e      	ldr	r3, [pc, #568]	; (8001d48 <select_test_scenario+0x2d8>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001d1c <select_test_scenario+0x2ac>
 8001b18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b1c:	ee16 0a90 	vmov	r0, s13
 8001b20:	f7fe fcd6 	bl	80004d0 <__aeabi_f2d>
 8001b24:	a37a      	add	r3, pc, #488	; (adr r3, 8001d10 <select_test_scenario+0x2a0>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fd29 	bl	8000580 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f805 	bl	8000b44 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a78      	ldr	r2, [pc, #480]	; (8001d20 <select_test_scenario+0x2b0>)
 8001b3e:	6013      	str	r3, [r2, #0]
			HARMONIC_3 = 0; HARMONIC_5 = 0; HARMONIC_7 = 0; HARMONIC_9 = 0;
 8001b40:	4b78      	ldr	r3, [pc, #480]	; (8001d24 <select_test_scenario+0x2b4>)
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4b77      	ldr	r3, [pc, #476]	; (8001d28 <select_test_scenario+0x2b8>)
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <select_test_scenario+0x2bc>)
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <select_test_scenario+0x2c0>)
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
			HARMONIC_11 = 0; HARMONIC_13 = 0;
 8001b60:	4b74      	ldr	r3, [pc, #464]	; (8001d34 <select_test_scenario+0x2c4>)
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	4b73      	ldr	r3, [pc, #460]	; (8001d38 <select_test_scenario+0x2c8>)
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
			calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[1], sine_wave_B_scenario[1], sine_wave_C_scenario[1]);
 8001b70:	4a76      	ldr	r2, [pc, #472]	; (8001d4c <select_test_scenario+0x2dc>)
 8001b72:	4977      	ldr	r1, [pc, #476]	; (8001d50 <select_test_scenario+0x2e0>)
 8001b74:	4877      	ldr	r0, [pc, #476]	; (8001d54 <select_test_scenario+0x2e4>)
 8001b76:	f7ff f9b7 	bl	8000ee8 <calculate_three_phase_sine_wave_samples>
			break;
 8001b7a:	e22d      	b.n	8001fd8 <select_test_scenario+0x568>
        case 3:  // Stroom scenario 3
            AMPLITUDE = (stroom_s3 / 10000) *sqrt(2.0);
 8001b7c:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <select_test_scenario+0x2e8>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001d1c <select_test_scenario+0x2ac>
 8001b86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b8a:	ee16 0a90 	vmov	r0, s13
 8001b8e:	f7fe fc9f 	bl	80004d0 <__aeabi_f2d>
 8001b92:	a35f      	add	r3, pc, #380	; (adr r3, 8001d10 <select_test_scenario+0x2a0>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fcf2 	bl	8000580 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7fe ffce 	bl	8000b44 <__aeabi_d2f>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a5d      	ldr	r2, [pc, #372]	; (8001d20 <select_test_scenario+0x2b0>)
 8001bac:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = 0; HARMONIC_5 = 0; HARMONIC_7 = 0; HARMONIC_9 = 0;
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <select_test_scenario+0x2b4>)
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <select_test_scenario+0x2b8>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <select_test_scenario+0x2bc>)
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <select_test_scenario+0x2c0>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
            HARMONIC_11 = 0; HARMONIC_13 = 0;
 8001bce:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <select_test_scenario+0x2c4>)
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <select_test_scenario+0x2c8>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[2], sine_wave_B_scenario[2], sine_wave_C_scenario[2]);
 8001bde:	4a5f      	ldr	r2, [pc, #380]	; (8001d5c <select_test_scenario+0x2ec>)
 8001be0:	495f      	ldr	r1, [pc, #380]	; (8001d60 <select_test_scenario+0x2f0>)
 8001be2:	4860      	ldr	r0, [pc, #384]	; (8001d64 <select_test_scenario+0x2f4>)
 8001be4:	f7ff f980 	bl	8000ee8 <calculate_three_phase_sine_wave_samples>
            break;
 8001be8:	e1f6      	b.n	8001fd8 <select_test_scenario+0x568>
        case 4:  // THD scenario 1
            AMPLITUDE = (thd_s1_rms / 10000) *sqrt(2.0);
 8001bea:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <select_test_scenario+0x2f8>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001d1c <select_test_scenario+0x2ac>
 8001bf4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bf8:	ee16 0a90 	vmov	r0, s13
 8001bfc:	f7fe fc68 	bl	80004d0 <__aeabi_f2d>
 8001c00:	a343      	add	r3, pc, #268	; (adr r3, 8001d10 <select_test_scenario+0x2a0>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcbb 	bl	8000580 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe ff97 	bl	8000b44 <__aeabi_d2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a41      	ldr	r2, [pc, #260]	; (8001d20 <select_test_scenario+0x2b0>)
 8001c1a:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = thd_s1_3h / 100.0;
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <select_test_scenario+0x2fc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc43 	bl	80004ac <__aeabi_i2d>
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <select_test_scenario+0x300>)
 8001c2c:	f7fe fdd2 	bl	80007d4 <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ff84 	bl	8000b44 <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <select_test_scenario+0x2b4>)
 8001c40:	6013      	str	r3, [r2, #0]
            HARMONIC_5 = thd_s1_5h / 100.0;
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <select_test_scenario+0x304>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc30 	bl	80004ac <__aeabi_i2d>
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <select_test_scenario+0x300>)
 8001c52:	f7fe fdbf 	bl	80007d4 <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ff71 	bl	8000b44 <__aeabi_d2f>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a30      	ldr	r2, [pc, #192]	; (8001d28 <select_test_scenario+0x2b8>)
 8001c66:	6013      	str	r3, [r2, #0]
            HARMONIC_7 = thd_s1_7h / 100.0;
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <select_test_scenario+0x308>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc1d 	bl	80004ac <__aeabi_i2d>
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <select_test_scenario+0x300>)
 8001c78:	f7fe fdac 	bl	80007d4 <__aeabi_ddiv>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe ff5e 	bl	8000b44 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <select_test_scenario+0x2bc>)
 8001c8c:	6013      	str	r3, [r2, #0]
            HARMONIC_9 = thd_s1_9h / 100.0;
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <select_test_scenario+0x30c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc0a 	bl	80004ac <__aeabi_i2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <select_test_scenario+0x300>)
 8001c9e:	f7fe fd99 	bl	80007d4 <__aeabi_ddiv>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff4b 	bl	8000b44 <__aeabi_d2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <select_test_scenario+0x2c0>)
 8001cb2:	6013      	str	r3, [r2, #0]
            HARMONIC_11 = thd_s1_11h / 100.0;
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <select_test_scenario+0x310>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbf7 	bl	80004ac <__aeabi_i2d>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <select_test_scenario+0x300>)
 8001cc4:	f7fe fd86 	bl	80007d4 <__aeabi_ddiv>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff38 	bl	8000b44 <__aeabi_d2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <select_test_scenario+0x2c4>)
 8001cd8:	6013      	str	r3, [r2, #0]
            HARMONIC_13 = thd_s1_13h / 100.0;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <select_test_scenario+0x314>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fbe4 	bl	80004ac <__aeabi_i2d>
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <select_test_scenario+0x300>)
 8001cea:	f7fe fd73 	bl	80007d4 <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff25 	bl	8000b44 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <select_test_scenario+0x2c8>)
 8001cfe:	6013      	str	r3, [r2, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[3], sine_wave_B_scenario[3], sine_wave_C_scenario[3]);
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <select_test_scenario+0x318>)
 8001d02:	4922      	ldr	r1, [pc, #136]	; (8001d8c <select_test_scenario+0x31c>)
 8001d04:	4822      	ldr	r0, [pc, #136]	; (8001d90 <select_test_scenario+0x320>)
 8001d06:	f7ff f8ef 	bl	8000ee8 <calculate_three_phase_sine_wave_samples>
            break;
 8001d0a:	e165      	b.n	8001fd8 <select_test_scenario+0x568>
 8001d0c:	f3af 8000 	nop.w
 8001d10:	667f3bcd 	.word	0x667f3bcd
 8001d14:	3ff6a09e 	.word	0x3ff6a09e
 8001d18:	200089d0 	.word	0x200089d0
 8001d1c:	461c4000 	.word	0x461c4000
 8001d20:	200002a8 	.word	0x200002a8
 8001d24:	200002ac 	.word	0x200002ac
 8001d28:	200002b0 	.word	0x200002b0
 8001d2c:	200002b4 	.word	0x200002b4
 8001d30:	200002b8 	.word	0x200002b8
 8001d34:	200002bc 	.word	0x200002bc
 8001d38:	200002c0 	.word	0x200002c0
 8001d3c:	20005cc4 	.word	0x20005cc4
 8001d40:	20002fc4 	.word	0x20002fc4
 8001d44:	200002c4 	.word	0x200002c4
 8001d48:	200089d4 	.word	0x200089d4
 8001d4c:	20006444 	.word	0x20006444
 8001d50:	20003744 	.word	0x20003744
 8001d54:	20000a44 	.word	0x20000a44
 8001d58:	200089d8 	.word	0x200089d8
 8001d5c:	20006bc4 	.word	0x20006bc4
 8001d60:	20003ec4 	.word	0x20003ec4
 8001d64:	200011c4 	.word	0x200011c4
 8001d68:	200089dc 	.word	0x200089dc
 8001d6c:	200089e8 	.word	0x200089e8
 8001d70:	40590000 	.word	0x40590000
 8001d74:	200089ec 	.word	0x200089ec
 8001d78:	200089f0 	.word	0x200089f0
 8001d7c:	200089f4 	.word	0x200089f4
 8001d80:	200089f8 	.word	0x200089f8
 8001d84:	200089fc 	.word	0x200089fc
 8001d88:	20007344 	.word	0x20007344
 8001d8c:	20004644 	.word	0x20004644
 8001d90:	20001944 	.word	0x20001944
        case 5:  // THD scenario 2
            AMPLITUDE = (thd_s2_rms / 10000) *sqrt(2.0);
 8001d94:	4b94      	ldr	r3, [pc, #592]	; (8001fe8 <select_test_scenario+0x578>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001fec <select_test_scenario+0x57c>
 8001d9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001da2:	ee16 0a90 	vmov	r0, s13
 8001da6:	f7fe fb93 	bl	80004d0 <__aeabi_f2d>
 8001daa:	a38d      	add	r3, pc, #564	; (adr r3, 8001fe0 <select_test_scenario+0x570>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fbe6 	bl	8000580 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fec2 	bl	8000b44 <__aeabi_d2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a8b      	ldr	r2, [pc, #556]	; (8001ff0 <select_test_scenario+0x580>)
 8001dc4:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = thd_s2_3h / 100.0;
 8001dc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ff4 <select_test_scenario+0x584>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fb6e 	bl	80004ac <__aeabi_i2d>
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <select_test_scenario+0x588>)
 8001dd6:	f7fe fcfd 	bl	80007d4 <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe feaf 	bl	8000b44 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a84      	ldr	r2, [pc, #528]	; (8001ffc <select_test_scenario+0x58c>)
 8001dea:	6013      	str	r3, [r2, #0]
            HARMONIC_5 = thd_s2_5h / 100.0;
 8001dec:	4b84      	ldr	r3, [pc, #528]	; (8002000 <select_test_scenario+0x590>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb5b 	bl	80004ac <__aeabi_i2d>
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <select_test_scenario+0x588>)
 8001dfc:	f7fe fcea 	bl	80007d4 <__aeabi_ddiv>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7fe fe9c 	bl	8000b44 <__aeabi_d2f>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a7d      	ldr	r2, [pc, #500]	; (8002004 <select_test_scenario+0x594>)
 8001e10:	6013      	str	r3, [r2, #0]
            HARMONIC_7 = thd_s2_7h / 100.0;
 8001e12:	4b7d      	ldr	r3, [pc, #500]	; (8002008 <select_test_scenario+0x598>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb48 	bl	80004ac <__aeabi_i2d>
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	4b75      	ldr	r3, [pc, #468]	; (8001ff8 <select_test_scenario+0x588>)
 8001e22:	f7fe fcd7 	bl	80007d4 <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fe89 	bl	8000b44 <__aeabi_d2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a75      	ldr	r2, [pc, #468]	; (800200c <select_test_scenario+0x59c>)
 8001e36:	6013      	str	r3, [r2, #0]
            HARMONIC_9 = thd_s2_9h / 100.0;
 8001e38:	4b75      	ldr	r3, [pc, #468]	; (8002010 <select_test_scenario+0x5a0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb35 	bl	80004ac <__aeabi_i2d>
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <select_test_scenario+0x588>)
 8001e48:	f7fe fcc4 	bl	80007d4 <__aeabi_ddiv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fe76 	bl	8000b44 <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <select_test_scenario+0x5a4>)
 8001e5c:	6013      	str	r3, [r2, #0]
            HARMONIC_11 = thd_s2_11h / 100.0;
 8001e5e:	4b6e      	ldr	r3, [pc, #440]	; (8002018 <select_test_scenario+0x5a8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb22 	bl	80004ac <__aeabi_i2d>
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <select_test_scenario+0x588>)
 8001e6e:	f7fe fcb1 	bl	80007d4 <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fe63 	bl	8000b44 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a66      	ldr	r2, [pc, #408]	; (800201c <select_test_scenario+0x5ac>)
 8001e82:	6013      	str	r3, [r2, #0]
            HARMONIC_13 = thd_s2_13h / 100.0;
 8001e84:	4b66      	ldr	r3, [pc, #408]	; (8002020 <select_test_scenario+0x5b0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb0f 	bl	80004ac <__aeabi_i2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <select_test_scenario+0x588>)
 8001e94:	f7fe fc9e 	bl	80007d4 <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fe50 	bl	8000b44 <__aeabi_d2f>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	; (8002024 <select_test_scenario+0x5b4>)
 8001ea8:	6013      	str	r3, [r2, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[4], sine_wave_B_scenario[4], sine_wave_C_scenario[4]);
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <select_test_scenario+0x5b8>)
 8001eac:	495f      	ldr	r1, [pc, #380]	; (800202c <select_test_scenario+0x5bc>)
 8001eae:	4860      	ldr	r0, [pc, #384]	; (8002030 <select_test_scenario+0x5c0>)
 8001eb0:	f7ff f81a 	bl	8000ee8 <calculate_three_phase_sine_wave_samples>
            break;
 8001eb4:	e090      	b.n	8001fd8 <select_test_scenario+0x568>
        case 6:  // THD scenario 3
            AMPLITUDE = (thd_s3_rms / 10000) *sqrt(2.0);
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	; (8002034 <select_test_scenario+0x5c4>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001fec <select_test_scenario+0x57c>
 8001ec0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ec4:	ee16 0a90 	vmov	r0, s13
 8001ec8:	f7fe fb02 	bl	80004d0 <__aeabi_f2d>
 8001ecc:	a344      	add	r3, pc, #272	; (adr r3, 8001fe0 <select_test_scenario+0x570>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fb55 	bl	8000580 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fe31 	bl	8000b44 <__aeabi_d2f>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a42      	ldr	r2, [pc, #264]	; (8001ff0 <select_test_scenario+0x580>)
 8001ee6:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = thd_s3_3h / 100.0;
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <select_test_scenario+0x5c8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fadd 	bl	80004ac <__aeabi_i2d>
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <select_test_scenario+0x588>)
 8001ef8:	f7fe fc6c 	bl	80007d4 <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fe1e 	bl	8000b44 <__aeabi_d2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a3c      	ldr	r2, [pc, #240]	; (8001ffc <select_test_scenario+0x58c>)
 8001f0c:	6013      	str	r3, [r2, #0]
            HARMONIC_5 = thd_s3_5h / 100.0;
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <select_test_scenario+0x5cc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe faca 	bl	80004ac <__aeabi_i2d>
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <select_test_scenario+0x588>)
 8001f1e:	f7fe fc59 	bl	80007d4 <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe0b 	bl	8000b44 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a34      	ldr	r2, [pc, #208]	; (8002004 <select_test_scenario+0x594>)
 8001f32:	6013      	str	r3, [r2, #0]
            HARMONIC_7 = thd_s3_7h / 100.0;
 8001f34:	4b42      	ldr	r3, [pc, #264]	; (8002040 <select_test_scenario+0x5d0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fab7 	bl	80004ac <__aeabi_i2d>
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <select_test_scenario+0x588>)
 8001f44:	f7fe fc46 	bl	80007d4 <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fdf8 	bl	8000b44 <__aeabi_d2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <select_test_scenario+0x59c>)
 8001f58:	6013      	str	r3, [r2, #0]
            HARMONIC_9 = thd_s3_9h / 100.0;
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <select_test_scenario+0x5d4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe faa4 	bl	80004ac <__aeabi_i2d>
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <select_test_scenario+0x588>)
 8001f6a:	f7fe fc33 	bl	80007d4 <__aeabi_ddiv>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fde5 	bl	8000b44 <__aeabi_d2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a25      	ldr	r2, [pc, #148]	; (8002014 <select_test_scenario+0x5a4>)
 8001f7e:	6013      	str	r3, [r2, #0]
            HARMONIC_11 = thd_s3_11h / 100.0;
 8001f80:	4b31      	ldr	r3, [pc, #196]	; (8002048 <select_test_scenario+0x5d8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fa91 	bl	80004ac <__aeabi_i2d>
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <select_test_scenario+0x588>)
 8001f90:	f7fe fc20 	bl	80007d4 <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fdd2 	bl	8000b44 <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <select_test_scenario+0x5ac>)
 8001fa4:	6013      	str	r3, [r2, #0]
            HARMONIC_13 = thd_s3_13h / 100.0;
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <select_test_scenario+0x5dc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa7e 	bl	80004ac <__aeabi_i2d>
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <select_test_scenario+0x588>)
 8001fb6:	f7fe fc0d 	bl	80007d4 <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fdbf 	bl	8000b44 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <select_test_scenario+0x5b4>)
 8001fca:	6013      	str	r3, [r2, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[5], sine_wave_B_scenario[5], sine_wave_C_scenario[5]);
 8001fcc:	4a20      	ldr	r2, [pc, #128]	; (8002050 <select_test_scenario+0x5e0>)
 8001fce:	4921      	ldr	r1, [pc, #132]	; (8002054 <select_test_scenario+0x5e4>)
 8001fd0:	4821      	ldr	r0, [pc, #132]	; (8002058 <select_test_scenario+0x5e8>)
 8001fd2:	f7fe ff89 	bl	8000ee8 <calculate_three_phase_sine_wave_samples>
            break;
 8001fd6:	bf00      	nop
    }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	667f3bcd 	.word	0x667f3bcd
 8001fe4:	3ff6a09e 	.word	0x3ff6a09e
 8001fe8:	200089e0 	.word	0x200089e0
 8001fec:	461c4000 	.word	0x461c4000
 8001ff0:	200002a8 	.word	0x200002a8
 8001ff4:	20008a00 	.word	0x20008a00
 8001ff8:	40590000 	.word	0x40590000
 8001ffc:	200002ac 	.word	0x200002ac
 8002000:	20008a04 	.word	0x20008a04
 8002004:	200002b0 	.word	0x200002b0
 8002008:	20008a08 	.word	0x20008a08
 800200c:	200002b4 	.word	0x200002b4
 8002010:	20008a0c 	.word	0x20008a0c
 8002014:	200002b8 	.word	0x200002b8
 8002018:	20008a10 	.word	0x20008a10
 800201c:	200002bc 	.word	0x200002bc
 8002020:	20008a14 	.word	0x20008a14
 8002024:	200002c0 	.word	0x200002c0
 8002028:	20007ac4 	.word	0x20007ac4
 800202c:	20004dc4 	.word	0x20004dc4
 8002030:	200020c4 	.word	0x200020c4
 8002034:	200089e4 	.word	0x200089e4
 8002038:	20008a18 	.word	0x20008a18
 800203c:	20008a1c 	.word	0x20008a1c
 8002040:	20008a20 	.word	0x20008a20
 8002044:	20008a24 	.word	0x20008a24
 8002048:	20008a28 	.word	0x20008a28
 800204c:	20008a2c 	.word	0x20008a2c
 8002050:	20008244 	.word	0x20008244
 8002054:	20005544 	.word	0x20005544
 8002058:	20002844 	.word	0x20002844

0800205c <DAC8564_Write>:


void DAC8564_Write(uint16_t channel, uint16_t value) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	460a      	mov	r2, r1
 8002066:	80fb      	strh	r3, [r7, #6]
 8002068:	4613      	mov	r3, r2
 800206a:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = DAC8564_SEQUENTIANALY_WRITE_UPDATE | (channel << 1);  // Set command and channel
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	b25b      	sxtb	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	733b      	strb	r3, [r7, #12]
    data[1] = (value >> 8) & 0xFF;  // MSB
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	737b      	strb	r3, [r7, #13]
    data[2] = value & 0xFF;  // LSB
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_RESET);  // CS Low
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002092:	480a      	ldr	r0, [pc, #40]	; (80020bc <DAC8564_Write+0x60>)
 8002094:	f001 f922 	bl	80032dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, 3, SPI_TIMEOUT);
 8002098:	f107 010c 	add.w	r1, r7, #12
 800209c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a0:	2203      	movs	r2, #3
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <DAC8564_Write+0x64>)
 80020a4:	f004 f957 	bl	8006356 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);  // CS High
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ae:	4803      	ldr	r0, [pc, #12]	; (80020bc <DAC8564_Write+0x60>)
 80020b0:	f001 f914 	bl	80032dc <HAL_GPIO_WritePin>
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40020400 	.word	0x40020400
 80020c0:	20000174 	.word	0x20000174

080020c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	f040 8088 	bne.w	80021e8 <HAL_TIM_PeriodElapsedCallback+0x124>
    	sample_counter++;
 80020d8:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	4a44      	ldr	r2, [pc, #272]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80020e0:	6013      	str	r3, [r2, #0]
    	if (sample_counter== 48000) {
 80020e2:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d145      	bne.n	800217a <HAL_TIM_PeriodElapsedCallback+0xb6>
    	        seconds_elapsed++;
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a3f      	ldr	r2, [pc, #252]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80020f6:	6013      	str	r3, [r2, #0]
                sample_counter=0;
 80020f8:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    	        // Wissel scenario na 120 seconden
    	        if (seconds_elapsed >=20) {
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b13      	cmp	r3, #19
 8002104:	d939      	bls.n	800217a <HAL_TIM_PeriodElapsedCallback+0xb6>
    	            seconds_elapsed = 0;
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

//    	             Ga door naar het volgende scenario
    	            current_scenario++;
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3301      	adds	r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002118:	701a      	strb	r2, [r3, #0]
    	            if (current_scenario > 6) {
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b06      	cmp	r3, #6
 8002122:	d903      	bls.n	800212c <HAL_TIM_PeriodElapsedCallback+0x68>
    	                current_scenario = 6;
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002126:	2206      	movs	r2, #6
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e026      	b.n	800217a <HAL_TIM_PeriodElapsedCallback+0xb6>

    	            }else {

    					// Wissel de actieve buffers naar de nieuwe berekende golfvormen
    					current_sine_wave_A = sine_wave_A_scenario[current_scenario - 1];
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	01db      	lsls	r3, r3, #7
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 800213e:	4413      	add	r3, r2
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002142:	6013      	str	r3, [r2, #0]
    					current_sine_wave_B = sine_wave_B_scenario[current_scenario - 1];
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	1e5a      	subs	r2, r3, #1
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	01db      	lsls	r3, r3, #7
 8002154:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002156:	4413      	add	r3, r2
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800215a:	6013      	str	r3, [r2, #0]
    					current_sine_wave_C = sine_wave_C_scenario[current_scenario - 1];
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	4613      	mov	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	01db      	lsls	r3, r3, #7
 800216c:	4a27      	ldr	r2, [pc, #156]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800216e:	4413      	add	r3, r2
 8002170:	4a27      	ldr	r2, [pc, #156]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002172:	6013      	str	r3, [r2, #0]
    					sample_index =0;
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002176:	2200      	movs	r2, #0
 8002178:	801a      	strh	r2, [r3, #0]



    	}

        DAC8564_Write(3, current_sine_wave_A[sample_index]);  // Phase A on DAC A
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	2003      	movs	r0, #3
 800218e:	f7ff ff65 	bl	800205c <DAC8564_Write>
        DAC8564_Write(1, current_sine_wave_B[sample_index]);  // Phase B on DAC B
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7ff ff59 	bl	800205c <DAC8564_Write>
        DAC8564_Write(2, current_sine_wave_C[sample_index]);  // Phase C on DAC C
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	2002      	movs	r0, #2
 80021be:	f7ff ff4d 	bl	800205c <DAC8564_Write>

        // Verhoog de sample index
        sample_index = (sample_index + 1) % NUM_SAMPLES;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80021cc:	fb83 1302 	smull	r1, r3, r3, r2
 80021d0:	4413      	add	r3, r2
 80021d2:	1259      	asrs	r1, r3, #9
 80021d4:	17d3      	asrs	r3, r2, #31
 80021d6:	1ac9      	subs	r1, r1, r3
 80021d8:	460b      	mov	r3, r1
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a5b      	subs	r3, r3, r1
 80021de:	019b      	lsls	r3, r3, #6
 80021e0:	1ad1      	subs	r1, r2, r3
 80021e2:	b28a      	uxth	r2, r1
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021e6:	801a      	strh	r2, [r3, #0]

        // Verhoog de sample index


    }
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200002a4 	.word	0x200002a4
 80021f4:	200002a0 	.word	0x200002a0
 80021f8:	20000000 	.word	0x20000000
 80021fc:	200002c4 	.word	0x200002c4
 8002200:	200089c4 	.word	0x200089c4
 8002204:	20002fc4 	.word	0x20002fc4
 8002208:	200089c8 	.word	0x200089c8
 800220c:	20005cc4 	.word	0x20005cc4
 8002210:	200089cc 	.word	0x200089cc
 8002214:	2000029c 	.word	0x2000029c
 8002218:	88888889 	.word	0x88888889

0800221c <SET_refference>:

void SET_refference() {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
    uint8_t data[3];
    data[0] = 0x01;
 8002222:	2301      	movs	r3, #1
 8002224:	713b      	strb	r3, [r7, #4]
    data[1] = 0x10;
 8002226:	2310      	movs	r3, #16
 8002228:	717b      	strb	r3, [r7, #5]
    data[2] = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002234:	4809      	ldr	r0, [pc, #36]	; (800225c <SET_refference+0x40>)
 8002236:	f001 f851 	bl	80032dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, 3, SPI_TIMEOUT);
 800223a:	1d39      	adds	r1, r7, #4
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	2203      	movs	r2, #3
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <SET_refference+0x44>)
 8002244:	f004 f887 	bl	8006356 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224e:	4803      	ldr	r0, [pc, #12]	; (800225c <SET_refference+0x40>)
 8002250:	f001 f844 	bl	80032dc <HAL_GPIO_WritePin>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40020400 	.word	0x40020400
 8002260:	20000174 	.word	0x20000174

08002264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226a:	f000 fcfb 	bl	8002c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800226e:	f000 f871 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002272:	f000 f9df 	bl	8002634 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002276:	f000 f989 	bl	800258c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800227a:	f000 f9b1 	bl	80025e0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800227e:	f008 fda9 	bl	800add4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8002282:	f000 f937 	bl	80024f4 <MX_TIM2_Init>
  MX_I2S1_Init();
 8002286:	f000 f8d1 	bl	800242c <MX_I2S1_Init>
  MX_SPI2_Init();
 800228a:	f000 f8fd 	bl	8002488 <MX_SPI2_Init>
// thd_s1_rms = 4000.0, thd_s2_rms =3000.0, thd_s3_rms =2000.0;
//
// for (int i = 1; i <= 6; i++) {
//     select_test_scenario(i);
// }
  stroom_s1 = 400;
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <main+0xac>)
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <main+0xb0>)
 8002292:	601a      	str	r2, [r3, #0]
  stroom_s2 = 5.0;
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <main+0xb4>)
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <main+0xb8>)
 8002298:	601a      	str	r2, [r3, #0]
  stroom_s3 = 5.0;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <main+0xbc>)
 800229c:	4a1f      	ldr	r2, [pc, #124]	; (800231c <main+0xb8>)
 800229e:	601a      	str	r2, [r3, #0]

 // Globale variabelen voor THD scenario's
 thd_s1_rms = 5.0, thd_s2_rms =5.0, thd_s3_rms =5.0;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <main+0xc0>)
 80022a2:	4a1e      	ldr	r2, [pc, #120]	; (800231c <main+0xb8>)
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <main+0xc4>)
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <main+0xb8>)
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <main+0xc8>)
 80022ae:	4a1b      	ldr	r2, [pc, #108]	; (800231c <main+0xb8>)
 80022b0:	601a      	str	r2, [r3, #0]

 for (int i = 1; i <= 6; i++) {
 80022b2:	2301      	movs	r3, #1
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	e005      	b.n	80022c4 <main+0x60>
     select_test_scenario(i);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fbd9 	bl	8001a70 <select_test_scenario>
 for (int i = 1; i <= 6; i++) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3301      	adds	r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	ddf6      	ble.n	80022b8 <main+0x54>
 }
 // Zet het eerste scenario klaar

 current_sine_wave_A = sine_wave_A_scenario[0];
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <main+0xcc>)
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <main+0xd0>)
 80022ce:	601a      	str	r2, [r3, #0]
 current_sine_wave_B = sine_wave_B_scenario[0];
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <main+0xd4>)
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <main+0xd8>)
 80022d4:	601a      	str	r2, [r3, #0]
 current_sine_wave_C = sine_wave_C_scenario[0];
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <main+0xdc>)
 80022d8:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <main+0xe0>)
 80022da:	601a      	str	r2, [r3, #0]
 current_scenario = 1;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <main+0xe4>)
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]




  HAL_Delay(150);
 80022e2:	2096      	movs	r0, #150	; 0x96
 80022e4:	f000 fd30 	bl	8002d48 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ee:	4817      	ldr	r0, [pc, #92]	; (800234c <main+0xe8>)
 80022f0:	f000 fff4 	bl	80032dc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80022f4:	200a      	movs	r0, #10
 80022f6:	f000 fd27 	bl	8002d48 <HAL_Delay>
  SET_refference();
 80022fa:	f7ff ff8f 	bl	800221c <SET_refference>

  // Calculate samples for three-phase sine waves


  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <main+0xec>)
 8002300:	f004 fa80 	bl	8006804 <HAL_TIM_Base_Start_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <main+0xaa>
      Error_Handler();
 800230a:	f000 fa6d 	bl	80027e8 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800230e:	e7fe      	b.n	800230e <main+0xaa>
 8002310:	200089d0 	.word	0x200089d0
 8002314:	43c80000 	.word	0x43c80000
 8002318:	200089d4 	.word	0x200089d4
 800231c:	40a00000 	.word	0x40a00000
 8002320:	200089d8 	.word	0x200089d8
 8002324:	200089dc 	.word	0x200089dc
 8002328:	200089e0 	.word	0x200089e0
 800232c:	200089e4 	.word	0x200089e4
 8002330:	200089c4 	.word	0x200089c4
 8002334:	200002c4 	.word	0x200002c4
 8002338:	200089c8 	.word	0x200089c8
 800233c:	20002fc4 	.word	0x20002fc4
 8002340:	200089cc 	.word	0x200089cc
 8002344:	20005cc4 	.word	0x20005cc4
 8002348:	20000000 	.word	0x20000000
 800234c:	40020400 	.word	0x40020400
 8002350:	200001cc 	.word	0x200001cc

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	; 0x50
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	2234      	movs	r2, #52	; 0x34
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f009 fad2 	bl	800b90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <SystemClock_Config+0xd0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	4a28      	ldr	r2, [pc, #160]	; (8002424 <SystemClock_Config+0xd0>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	; 0x40
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <SystemClock_Config+0xd0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <SystemClock_Config+0xd4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a22      	ldr	r2, [pc, #136]	; (8002428 <SystemClock_Config+0xd4>)
 800239e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <SystemClock_Config+0xd4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ba:	2302      	movs	r3, #2
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 80023c4:	2306      	movs	r3, #6
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023c8:	23a8      	movs	r3, #168	; 0xa8
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023cc:	2302      	movs	r3, #2
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023d0:	2307      	movs	r3, #7
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fc93 	bl	8005d08 <HAL_RCC_OscConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80023e8:	f000 f9fe 	bl	80027e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ec:	230f      	movs	r3, #15
 80023ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80023f0:	2303      	movs	r3, #3
 80023f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002402:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002404:	f107 0308 	add.w	r3, r7, #8
 8002408:	2105      	movs	r1, #5
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fc46 	bl	8004c9c <HAL_RCC_ClockConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002416:	f000 f9e7 	bl	80027e8 <Error_Handler>
  }
}
 800241a:	bf00      	nop
 800241c:	3750      	adds	r7, #80	; 0x50
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40007000 	.word	0x40007000

0800242c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <MX_I2S1_Init+0x54>)
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <MX_I2S1_Init+0x58>)
 8002434:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_I2S1_Init+0x54>)
 8002438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_I2S1_Init+0x54>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_I2S1_Init+0x54>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <MX_I2S1_Init+0x54>)
 800244c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002450:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_I2S1_Init+0x54>)
 8002454:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002458:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_I2S1_Init+0x54>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <MX_I2S1_Init+0x54>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_I2S1_Init+0x54>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <MX_I2S1_Init+0x54>)
 800246e:	f000 ff4f 	bl	8003310 <HAL_I2S_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 8002478:	f000 f9b6 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000012c 	.word	0x2000012c
 8002484:	40013000 	.word	0x40013000

08002488 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_SPI2_Init+0x64>)
 800248e:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <MX_SPI2_Init+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_SPI2_Init+0x64>)
 8002494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002498:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_SPI2_Init+0x64>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_SPI2_Init+0x64>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_SPI2_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_SPI2_Init+0x64>)
 80024b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_SPI2_Init+0x64>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <MX_SPI2_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_SPI2_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <MX_SPI2_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_SPI2_Init+0x64>)
 80024d4:	220a      	movs	r2, #10
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <MX_SPI2_Init+0x64>)
 80024da:	f003 feb3 	bl	8006244 <HAL_SPI_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024e4:	f000 f980 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000174 	.word	0x20000174
 80024f0:	40003800 	.word	0x40003800

080024f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002508:	463b      	mov	r3, r7
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <MX_TIM2_Init+0x94>)
 8002512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002516:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_TIM2_Init+0x94>)
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_TIM2_Init+0x94>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1749;
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <MX_TIM2_Init+0x94>)
 8002526:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800252a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <MX_TIM2_Init+0x94>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <MX_TIM2_Init+0x94>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002538:	4813      	ldr	r0, [pc, #76]	; (8002588 <MX_TIM2_Init+0x94>)
 800253a:	f004 f913 	bl	8006764 <HAL_TIM_Base_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002544:	f000 f950 	bl	80027e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	4619      	mov	r1, r3
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <MX_TIM2_Init+0x94>)
 8002556:	f004 facd 	bl	8006af4 <HAL_TIM_ConfigClockSource>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002560:	f000 f942 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_TIM2_Init+0x94>)
 8002572:	f004 fce9 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800257c:	f000 f934 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200001cc 	.word	0x200001cc

0800258c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <MX_USART1_UART_Init+0x50>)
 8002594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 8002598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800259c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_USART1_UART_Init+0x4c>)
 80025c4:	f004 fd50 	bl	8007068 <HAL_UART_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025ce:	f000 f90b 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000214 	.word	0x20000214
 80025dc:	40011000 	.word	0x40011000

080025e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_USART3_UART_Init+0x4c>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <MX_USART3_UART_Init+0x50>)
 80025e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <MX_USART3_UART_Init+0x4c>)
 80025ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_USART3_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <MX_USART3_UART_Init+0x4c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <MX_USART3_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <MX_USART3_UART_Init+0x4c>)
 8002606:	220c      	movs	r2, #12
 8002608:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <MX_USART3_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <MX_USART3_UART_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_USART3_UART_Init+0x4c>)
 8002618:	f004 fd26 	bl	8007068 <HAL_UART_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002622:	f000 f8e1 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000258 	.word	0x20000258
 8002630:	40004800 	.word	0x40004800

08002634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <MX_GPIO_Init+0x19c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a5f      	ldr	r2, [pc, #380]	; (80027d0 <MX_GPIO_Init+0x19c>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <MX_GPIO_Init+0x19c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <MX_GPIO_Init+0x19c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <MX_GPIO_Init+0x19c>)
 8002670:	f043 0320 	orr.w	r3, r3, #32
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <MX_GPIO_Init+0x19c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <MX_GPIO_Init+0x19c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <MX_GPIO_Init+0x19c>)
 800268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <MX_GPIO_Init+0x19c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a4a      	ldr	r2, [pc, #296]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a43      	ldr	r2, [pc, #268]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a3c      	ldr	r2, [pc, #240]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <MX_GPIO_Init+0x19c>)
 80026fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <MX_GPIO_Init+0x19c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	210e      	movs	r1, #14
 8002712:	4830      	ldr	r0, [pc, #192]	; (80027d4 <MX_GPIO_Init+0x1a0>)
 8002714:	f000 fde2 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	f241 0130 	movw	r1, #4144	; 0x1030
 800271e:	482e      	ldr	r0, [pc, #184]	; (80027d8 <MX_GPIO_Init+0x1a4>)
 8002720:	f000 fddc 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800272a:	482c      	ldr	r0, [pc, #176]	; (80027dc <MX_GPIO_Init+0x1a8>)
 800272c:	f000 fdd6 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	211c      	movs	r1, #28
 8002734:	482a      	ldr	r0, [pc, #168]	; (80027e0 <MX_GPIO_Init+0x1ac>)
 8002736:	f000 fdd1 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Start_knop_Pin Pauzeer_knop_Pin Stop_knop_Pin */
  GPIO_InitStruct.Pin = Start_knop_Pin|Pauzeer_knop_Pin|Stop_knop_Pin;
 800273a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800273e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002744:	2301      	movs	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4825      	ldr	r0, [pc, #148]	; (80027e4 <MX_GPIO_Init+0x1b0>)
 8002750:	f000 fc30 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blauwe_LED_Pin Groene_LED_Pin Rode_LED_Pin */
  GPIO_InitStruct.Pin = Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin;
 8002754:	230e      	movs	r3, #14
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002758:	2301      	movs	r3, #1
 800275a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	481a      	ldr	r0, [pc, #104]	; (80027d4 <MX_GPIO_Init+0x1a0>)
 800276c:	f000 fc22 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SYNC_Pin RE_tranceiver_Pin DE_tranceiver_Pin */
  GPIO_InitStruct.Pin = SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin;
 8002770:	f241 0330 	movw	r3, #4144	; 0x1030
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	4619      	mov	r1, r3
 8002788:	4813      	ldr	r0, [pc, #76]	; (80027d8 <MX_GPIO_Init+0x1a4>)
 800278a:	f000 fc13 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDAC_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 800278e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	2301      	movs	r3, #1
 8002796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	480d      	ldr	r0, [pc, #52]	; (80027dc <MX_GPIO_Init+0x1a8>)
 80027a8:	f000 fc04 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RODE_LED_Pin GROENE_LED_Pin BLAUWE_LED_Pin */
  GPIO_InitStruct.Pin = RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin;
 80027ac:	231c      	movs	r3, #28
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4807      	ldr	r0, [pc, #28]	; (80027e0 <MX_GPIO_Init+0x1ac>)
 80027c4:	f000 fbf6 	bl	8002fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027c8:	bf00      	nop
 80027ca:	3730      	adds	r7, #48	; 0x30
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40021400 	.word	0x40021400
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40020800 	.word	0x40020800

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <Error_Handler+0x8>
	...

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_MspInit+0x4c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_MspInit+0x4c>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_MspInit+0x4c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_MspInit+0x4c>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <HAL_MspInit+0x4c>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_MspInit+0x4c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b0a2      	sub	sp, #136	; 0x88
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800285c:	f107 0318 	add.w	r3, r7, #24
 8002860:	225c      	movs	r2, #92	; 0x5c
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f009 f851 	bl	800b90c <memset>
  if(hi2s->Instance==SPI1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a37      	ldr	r2, [pc, #220]	; (800294c <HAL_I2S_MspInit+0x108>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d167      	bne.n	8002944 <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8002878:	2332      	movs	r3, #50	; 0x32
 800287a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800287c:	2302      	movs	r3, #2
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 8002880:	2306      	movs	r3, #6
 8002882:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002884:	2302      	movs	r3, #2
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002888:	2302      	movs	r3, #2
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800288c:	2301      	movs	r3, #1
 800288e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8002890:	2300      	movs	r3, #0
 8002892:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fb19 	bl	8004ed0 <HAL_RCCEx_PeriphCLKConfig>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 80028a4:	f7ff ffa0 	bl	80027e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b6:	6453      	str	r3, [r2, #68]	; 0x44
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6313      	str	r3, [r2, #48]	; 0x30
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_I2S_MspInit+0x10c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80028fc:	23b0      	movs	r3, #176	; 0xb0
 80028fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800290e:	2305      	movs	r3, #5
 8002910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002918:	4619      	mov	r1, r3
 800291a:	480e      	ldr	r0, [pc, #56]	; (8002954 <HAL_I2S_MspInit+0x110>)
 800291c:	f000 fb4a 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002920:	2310      	movs	r3, #16
 8002922:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002932:	2305      	movs	r3, #5
 8002934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002938:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800293c:	4619      	mov	r1, r3
 800293e:	4806      	ldr	r0, [pc, #24]	; (8002958 <HAL_I2S_MspInit+0x114>)
 8002940:	f000 fb38 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002944:	bf00      	nop
 8002946:	3788      	adds	r7, #136	; 0x88
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40013000 	.word	0x40013000
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000
 8002958:	40020800 	.word	0x40020800

0800295c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <HAL_SPI_MspInit+0xc0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d14a      	bne.n	8002a14 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a26      	ldr	r2, [pc, #152]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_SPI_MspInit+0xc4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029d2:	2304      	movs	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029e2:	2305      	movs	r3, #5
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	480d      	ldr	r0, [pc, #52]	; (8002a24 <HAL_SPI_MspInit+0xc8>)
 80029ee:	f000 fae1 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80029f2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a04:	2305      	movs	r3, #5
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4806      	ldr	r0, [pc, #24]	; (8002a28 <HAL_SPI_MspInit+0xcc>)
 8002a10:	f000 fad0 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a14:	bf00      	nop
 8002a16:	3728      	adds	r7, #40	; 0x28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40003800 	.word	0x40003800
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020400 	.word	0x40020400

08002a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d115      	bne.n	8002a6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_TIM_Base_MspInit+0x48>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_TIM_Base_MspInit+0x48>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_TIM_Base_MspInit+0x48>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	201c      	movs	r0, #28
 8002a60:	f000 fa71 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a64:	201c      	movs	r0, #28
 8002a66:	f000 fa8a 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a32      	ldr	r2, [pc, #200]	; (8002b60 <HAL_UART_MspInit+0xe8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d12c      	bne.n	8002af4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a30      	ldr	r2, [pc, #192]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ad2:	23c0      	movs	r3, #192	; 0xc0
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	481e      	ldr	r0, [pc, #120]	; (8002b68 <HAL_UART_MspInit+0xf0>)
 8002aee:	f000 fa61 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002af2:	e031      	b.n	8002b58 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_UART_MspInit+0xf4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12c      	bne.n	8002b58 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_UART_MspInit+0xec>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 8002b36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b48:	2307      	movs	r3, #7
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <HAL_UART_MspInit+0xf0>)
 8002b54:	f000 fa2e 	bl	8002fb4 <HAL_GPIO_Init>
}
 8002b58:	bf00      	nop
 8002b5a:	3730      	adds	r7, #48	; 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40011000 	.word	0x40011000
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40004800 	.word	0x40004800

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler+0x4>

08002b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler+0x4>

08002b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bbc:	f000 f8a4 	bl	8002d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIM2_IRQHandler+0x10>)
 8002bca:	f003 fe8b 	bl	80068e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200001cc 	.word	0x200001cc

08002bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <OTG_FS_IRQHandler+0x10>)
 8002bde:	f000 feeb 	bl	80039b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20009f14 	.word	0x20009f14

08002bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <SystemInit+0x20>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <SystemInit+0x20>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c16:	490e      	ldr	r1, [pc, #56]	; (8002c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c1c:	e002      	b.n	8002c24 <LoopCopyDataInit>

08002c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c22:	3304      	adds	r3, #4

08002c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c28:	d3f9      	bcc.n	8002c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c2c:	4c0b      	ldr	r4, [pc, #44]	; (8002c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c30:	e001      	b.n	8002c36 <LoopFillZerobss>

08002c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c34:	3204      	adds	r2, #4

08002c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c38:	d3fb      	bcc.n	8002c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c3a:	f7ff ffd7 	bl	8002bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f008 fe41 	bl	800b8c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c42:	f7ff fb0f 	bl	8002264 <main>
  bx  lr    
 8002c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c50:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002c54:	0800cc10 	.word	0x0800cc10
  ldr r2, =_sbss
 8002c58:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002c5c:	2000a640 	.word	0x2000a640

08002c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC_IRQHandler>
	...

08002c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <HAL_Init+0x40>)
 8002c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_Init+0x40>)
 8002c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_Init+0x40>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_Init+0x40>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f000 f94f 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c92:	200f      	movs	r0, #15
 8002c94:	f000 f808 	bl	8002ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c98:	f7ff fdac 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00

08002ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_InitTick+0x54>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_InitTick+0x58>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f967 	bl	8002f9a <HAL_SYSTICK_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00e      	b.n	8002cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d80a      	bhi.n	8002cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f000 f92f 	bl	8002f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <HAL_InitTick+0x5c>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000004 	.word	0x20000004
 8002d00:	2000000c 	.word	0x2000000c
 8002d04:	20000008 	.word	0x20000008

08002d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x20>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_IncTick+0x24>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_IncTick+0x24>)
 8002d1a:	6013      	str	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	2000000c 	.word	0x2000000c
 8002d2c:	20008a30 	.word	0x20008a30

08002d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_GetTick+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20008a30 	.word	0x20008a30

08002d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff ffee 	bl	8002d30 <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d005      	beq.n	8002d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_Delay+0x44>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d6e:	bf00      	nop
 8002d70:	f7ff ffde 	bl	8002d30 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d8f7      	bhi.n	8002d70 <HAL_Delay+0x28>
  {
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0307 	and.w	r3, r3, #7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db0b      	blt.n	8002e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <__NVIC_EnableIRQ+0x38>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d301      	bcc.n	8002f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <SysTick_Config+0x40>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f7ff ff8e 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <SysTick_Config+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <SysTick_Config+0x40>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000e010 	.word	0xe000e010

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff29 	bl	8002d90 <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f58:	f7ff ff3e 	bl	8002dd8 <__NVIC_GetPriorityGrouping>
 8002f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ff8e 	bl	8002e84 <NVIC_EncodePriority>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff5d 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff31 	bl	8002df4 <__NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ffa2 	bl	8002eec <SysTick_Config>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e165      	b.n	800329c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	f040 8154 	bne.w	8003296 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d005      	beq.n	8003006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003002:	2b02      	cmp	r3, #2
 8003004:	d130      	bne.n	8003068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	2203      	movs	r2, #3
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800303c:	2201      	movs	r2, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 0201 	and.w	r2, r3, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b03      	cmp	r3, #3
 8003072:	d017      	beq.n	80030a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d123      	bne.n	80030f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	08da      	lsrs	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3208      	adds	r2, #8
 80030b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	69b9      	ldr	r1, [r7, #24]
 80030f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0203 	and.w	r2, r3, #3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80ae 	beq.w	8003296 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b5d      	ldr	r3, [pc, #372]	; (80032b4 <HAL_GPIO_Init+0x300>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <HAL_GPIO_Init+0x300>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <HAL_GPIO_Init+0x300>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003156:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <HAL_GPIO_Init+0x304>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4f      	ldr	r2, [pc, #316]	; (80032bc <HAL_GPIO_Init+0x308>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d025      	beq.n	80031ce <HAL_GPIO_Init+0x21a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <HAL_GPIO_Init+0x30c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <HAL_GPIO_Init+0x216>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4d      	ldr	r2, [pc, #308]	; (80032c4 <HAL_GPIO_Init+0x310>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x212>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4c      	ldr	r2, [pc, #304]	; (80032c8 <HAL_GPIO_Init+0x314>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x20e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4b      	ldr	r2, [pc, #300]	; (80032cc <HAL_GPIO_Init+0x318>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x20a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <HAL_GPIO_Init+0x31c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x206>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a49      	ldr	r2, [pc, #292]	; (80032d4 <HAL_GPIO_Init+0x320>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x202>
 80031b2:	2306      	movs	r3, #6
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x21c>
 80031b6:	2307      	movs	r3, #7
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x21c>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x21c>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x21c>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x21c>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x21c>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x21c>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e0:	4935      	ldr	r1, [pc, #212]	; (80032b8 <HAL_GPIO_Init+0x304>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ee:	4b3a      	ldr	r3, [pc, #232]	; (80032d8 <HAL_GPIO_Init+0x324>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003212:	4a31      	ldr	r2, [pc, #196]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_GPIO_Init+0x324>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_GPIO_Init+0x324>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_GPIO_Init+0x324>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f ae96 	bls.w	8002fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40020c00 	.word	0x40020c00
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40021400 	.word	0x40021400
 80032d4:	40021800 	.word	0x40021800
 80032d8:	40013c00 	.word	0x40013c00

080032dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	4613      	mov	r3, r2
 80032ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ec:	787b      	ldrb	r3, [r7, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f8:	e003      	b.n	8003302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	041a      	lsls	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	619a      	str	r2, [r3, #24]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0e1      	b.n	80034e6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a6d      	ldr	r2, [pc, #436]	; (80034f0 <HAL_I2S_Init+0x1e0>)
 800333a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fa81 	bl	8002844 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003358:	f023 030f 	bic.w	r3, r3, #15
 800335c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2202      	movs	r2, #2
 8003364:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d06f      	beq.n	800344e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003376:	2310      	movs	r3, #16
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e001      	b.n	8003380 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b20      	cmp	r3, #32
 8003386:	d802      	bhi.n	800338e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_I2S_Init+0x1e4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_I2S_Init+0x92>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a56      	ldr	r2, [pc, #344]	; (80034f8 <HAL_I2S_Init+0x1e8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d104      	bne.n	80033ac <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f002 f8be 	bl	8005524 <HAL_RCCEx_GetPeriphCLKFreq>
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	e003      	b.n	80033b4 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80033ac:	2002      	movs	r0, #2
 80033ae:	f002 f8b9 	bl	8005524 <HAL_RCCEx_GetPeriphCLKFreq>
 80033b2:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d125      	bne.n	800340a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	461a      	mov	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	3305      	adds	r3, #5
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	e01f      	b.n	8003428 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	3305      	adds	r3, #5
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e00e      	b.n	8003428 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	461a      	mov	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	3305      	adds	r3, #5
 8003426:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4a34      	ldr	r2, [pc, #208]	; (80034fc <HAL_I2S_Init+0x1ec>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	e003      	b.n	8003456 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800344e:	2302      	movs	r3, #2
 8003450:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d902      	bls.n	8003462 <HAL_I2S_Init+0x152>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	d907      	bls.n	8003472 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e039      	b.n	80034e6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	ea42 0103 	orr.w	r1, r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	430a      	orrs	r2, r1
 8003484:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003490:	f023 030f 	bic.w	r3, r3, #15
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6851      	ldr	r1, [r2, #4]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6992      	ldr	r2, [r2, #24]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b4:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b30      	cmp	r3, #48	; 0x30
 80034bc:	d003      	beq.n	80034c6 <HAL_I2S_Init+0x1b6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2bb0      	cmp	r3, #176	; 0xb0
 80034c4:	d107      	bne.n	80034d6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034d4:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	080035f7 	.word	0x080035f7
 80034f4:	40003800 	.word	0x40003800
 80034f8:	40003c00 	.word	0x40003c00
 80034fc:	cccccccd 	.word	0xcccccccd

08003500 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	881a      	ldrh	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10e      	bne.n	8003590 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003580:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffb8 	bl	8003500 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	b292      	uxth	r2, r2
 80035ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	1c9a      	adds	r2, r3, #2
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10e      	bne.n	80035ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff93 	bl	8003514 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b04      	cmp	r3, #4
 8003610:	d13a      	bne.n	8003688 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d109      	bne.n	8003630 <I2S_IRQHandler+0x3a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d102      	bne.n	8003630 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ffb4 	bl	8003598 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d126      	bne.n	8003688 <I2S_IRQHandler+0x92>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b20      	cmp	r3, #32
 8003646:	d11f      	bne.n	8003688 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003656:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ff50 	bl	8003528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d136      	bne.n	8003702 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d109      	bne.n	80036b2 <I2S_IRQHandler+0xbc>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d102      	bne.n	80036b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff45 	bl	800353c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d122      	bne.n	8003702 <I2S_IRQHandler+0x10c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d11b      	bne.n	8003702 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff13 	bl	8003528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800370a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370c:	b08f      	sub	sp, #60	; 0x3c
 800370e:	af0a      	add	r7, sp, #40	; 0x28
 8003710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e116      	b.n	800394a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f007 fd3e 	bl	800b1b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2203      	movs	r2, #3
 8003740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f004 f85b 	bl	8007816 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	687e      	ldr	r6, [r7, #4]
 8003768:	466d      	mov	r5, sp
 800376a:	f106 0410 	add.w	r4, r6, #16
 800376e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800377a:	e885 0003 	stmia.w	r5, {r0, r1}
 800377e:	1d33      	adds	r3, r6, #4
 8003780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f003 ff32 	bl	80075ec <USB_CoreInit>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0d7      	b.n	800394a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 f849 	bl	8007838 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
 80037aa:	e04a      	b.n	8003842 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	333d      	adds	r3, #61	; 0x3d
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	333c      	adds	r3, #60	; 0x3c
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	b298      	uxth	r0, r3
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3344      	adds	r3, #68	; 0x44
 80037e8:	4602      	mov	r2, r0
 80037ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3340      	adds	r3, #64	; 0x40
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3348      	adds	r3, #72	; 0x48
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	334c      	adds	r3, #76	; 0x4c
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3354      	adds	r3, #84	; 0x54
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	3301      	adds	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d3af      	bcc.n	80037ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e044      	b.n	80038dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	3301      	adds	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d3b5      	bcc.n	8003852 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	687e      	ldr	r6, [r7, #4]
 80038ee:	466d      	mov	r5, sp
 80038f0:	f106 0410 	add.w	r4, r6, #16
 80038f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003900:	e885 0003 	stmia.w	r5, {r0, r1}
 8003904:	1d33      	adds	r3, r6, #4
 8003906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003908:	6838      	ldr	r0, [r7, #0]
 800390a:	f003 ffe1 	bl	80078d0 <USB_DevInit>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e014      	b.n	800394a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f001 f98b 	bl	8004c54 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f005 f923 	bl	8008b8e <USB_DevDisconnect>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003952 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_PCD_Start+0x1c>
 800396a:	2302      	movs	r3, #2
 800396c:	e020      	b.n	80039b0 <HAL_PCD_Start+0x5e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	2b01      	cmp	r3, #1
 800397c:	d109      	bne.n	8003992 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003982:	2b01      	cmp	r3, #1
 8003984:	d005      	beq.n	8003992 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f003 ff2c 	bl	80077f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f005 f8d3 	bl	8008b4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b08d      	sub	sp, #52	; 0x34
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f005 f991 	bl	8008cf6 <USB_GetMode>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 84b7 	bne.w	800434a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f005 f8f5 	bl	8008bd0 <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 84ad 	beq.w	8004348 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f005 f8e2 	bl	8008bd0 <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d107      	bne.n	8003a26 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f002 0202 	and.w	r2, r2, #2
 8003a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f005 f8d0 	bl	8008bd0 <USB_ReadInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d161      	bne.n	8003afe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0210 	bic.w	r2, r2, #16
 8003a48:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	0c5b      	lsrs	r3, r3, #17
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d124      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d035      	beq.n	8003aee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	6a38      	ldr	r0, [r7, #32]
 8003a96:	f004 ff07 	bl	80088a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa6:	441a      	add	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab8:	441a      	add	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	621a      	str	r2, [r3, #32]
 8003abe:	e016      	b.n	8003aee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	0c5b      	lsrs	r3, r3, #17
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d110      	bne.n	8003aee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6a38      	ldr	r0, [r7, #32]
 8003ad8:	f004 fee6 	bl	80088a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae8:	441a      	add	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0210 	orr.w	r2, r2, #16
 8003afc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 f864 	bl	8008bd0 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b12:	f040 80a7 	bne.w	8003c64 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f005 f869 	bl	8008bf6 <USB_ReadDevAllOutEpInterrupt>
 8003b24:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b26:	e099      	b.n	8003c5c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 808e 	beq.w	8003c50 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f005 f88d 	bl	8008c5e <USB_ReadDevOutEPInterrupt>
 8003b44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00c      	beq.n	8003b6a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2301      	movs	r3, #1
 8003b60:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 feef 	bl	8004948 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00c      	beq.n	8003b8e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2308      	movs	r3, #8
 8003b84:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 ffc5 	bl	8004b18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d030      	beq.n	8003c16 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b80      	cmp	r3, #128	; 0x80
 8003bbe:	d109      	bne.n	8003bd4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	3304      	adds	r3, #4
 8003be8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	78db      	ldrb	r3, [r3, #3]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d108      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f007 fc04 	bl	800b40c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	461a      	mov	r2, r3
 8003c12:	2302      	movs	r3, #2
 8003c14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2320      	movs	r3, #32
 8003c30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	3301      	adds	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f47f af62 	bne.w	8003b28 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f004 ffb1 	bl	8008bd0 <USB_ReadInterrupts>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c78:	f040 80db 	bne.w	8003e32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 ffd2 	bl	8008c2a <USB_ReadDevAllInEpInterrupt>
 8003c86:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c8c:	e0cd      	b.n	8003e2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80c2 	beq.w	8003e1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fff8 	bl	8008c9a <USB_ReadDevInEPInterrupt>
 8003caa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d057      	beq.n	8003d66 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69f9      	ldr	r1, [r7, #28]
 8003cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2301      	movs	r3, #1
 8003cea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d132      	bne.n	8003d5a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	334c      	adds	r3, #76	; 0x4c
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4403      	add	r3, r0
 8003d14:	3348      	adds	r3, #72	; 0x48
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4419      	add	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4403      	add	r3, r0
 8003d28:	334c      	adds	r3, #76	; 0x4c
 8003d2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d113      	bne.n	8003d5a <HAL_PCD_IRQHandler+0x3a2>
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3354      	adds	r3, #84	; 0x54
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d108      	bne.n	8003d5a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d52:	461a      	mov	r2, r3
 8003d54:	2101      	movs	r1, #1
 8003d56:	f004 ffff 	bl	8008d58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f007 face 	bl	800b302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2308      	movs	r3, #8
 8003d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	461a      	mov	r2, r3
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d023      	beq.n	8003e0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc6:	6a38      	ldr	r0, [r7, #32]
 8003dc8:	f003 fee0 	bl	8007b8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	3338      	adds	r3, #56	; 0x38
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	3304      	adds	r3, #4
 8003dde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	78db      	ldrb	r3, [r3, #3]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d108      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f007 fb1b 	bl	800b430 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e06:	461a      	mov	r2, r3
 8003e08:	2302      	movs	r3, #2
 8003e0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fd08 	bl	800482e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	3301      	adds	r3, #1
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f47f af2e 	bne.w	8003c8e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f004 feca 	bl	8008bd0 <USB_ReadInterrupts>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e46:	d122      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d108      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f007 fc95 	bl	800b7a0 <HAL_PCDEx_LPM_Callback>
 8003e76:	e002      	b.n	8003e7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f007 fab9 	bl	800b3f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f004 fe9c 	bl	8008bd0 <USB_ReadInterrupts>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea2:	d112      	bne.n	8003eca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f007 fa75 	bl	800b3a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ec8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 fe7e 	bl	8008bd0 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ede:	d121      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003eee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d111      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f14:	2101      	movs	r1, #1
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f007 fc42 	bl	800b7a0 <HAL_PCDEx_LPM_Callback>
 8003f1c:	e002      	b.n	8003f24 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f007 fa40 	bl	800b3a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f004 fe51 	bl	8008bd0 <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f38:	f040 80b7 	bne.w	80040aa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2110      	movs	r1, #16
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 fe18 	bl	8007b8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	e046      	b.n	8003ff0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fa8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fba:	0151      	lsls	r1, r2, #5
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fe8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	3301      	adds	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3b3      	bcc.n	8003f62 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004008:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800400c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f043 030b 	orr.w	r3, r3, #11
 800402a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403c:	f043 030b 	orr.w	r3, r3, #11
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	e015      	b.n	8004070 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004052:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004056:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800405a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406a:	f043 030b 	orr.w	r3, r3, #11
 800406e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004082:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004094:	461a      	mov	r2, r3
 8004096:	f004 fe5f 	bl	8008d58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 fd8e 	bl	8008bd0 <USB_ReadInterrupts>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040be:	d124      	bne.n	800410a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f004 fe24 	bl	8008d12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f003 fdd9 	bl	8007c86 <USB_GetDevSpeed>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681c      	ldr	r4, [r3, #0]
 80040e0:	f000 fec2 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 80040e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	4620      	mov	r0, r4
 80040f0:	f003 fade 	bl	80076b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f007 f92c 	bl	800b352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004108:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f004 fd5e 	bl	8008bd0 <USB_ReadInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b08      	cmp	r3, #8
 800411c:	d10a      	bne.n	8004134 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f007 f909 	bl	800b336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f002 0208 	and.w	r2, r2, #8
 8004132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f004 fd49 	bl	8008bd0 <USB_ReadInterrupts>
 800413e:	4603      	mov	r3, r0
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d122      	bne.n	800418e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004154:	2301      	movs	r3, #1
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	e014      	b.n	8004184 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	b2db      	uxtb	r3, r3
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fb27 	bl	80047cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	3301      	adds	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418a:	429a      	cmp	r2, r3
 800418c:	d3e5      	bcc.n	800415a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f004 fd1c 	bl	8008bd0 <USB_ReadInterrupts>
 8004198:	4603      	mov	r3, r0
 800419a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a2:	d13b      	bne.n	800421c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	e02b      	b.n	8004202 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3340      	adds	r3, #64	; 0x40
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d115      	bne.n	80041fc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da12      	bge.n	80041fc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	333f      	adds	r3, #63	; 0x3f
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fae8 	bl	80047cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	3301      	adds	r3, #1
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	429a      	cmp	r2, r3
 800420a:	d3ce      	bcc.n	80041aa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800421a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fcd5 	bl	8008bd0 <USB_ReadInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004230:	d155      	bne.n	80042de <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004232:	2301      	movs	r3, #1
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	e045      	b.n	80042c4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d12e      	bne.n	80042be <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004260:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004262:	2b00      	cmp	r3, #0
 8004264:	da2b      	bge.n	80042be <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004272:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004276:	429a      	cmp	r2, r3
 8004278:	d121      	bne.n	80042be <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ba:	6053      	str	r3, [r2, #4]
            break;
 80042bc:	e007      	b.n	80042ce <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	3301      	adds	r3, #1
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d3b4      	bcc.n	8004238 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 fc74 	bl	8008bd0 <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d10a      	bne.n	800430a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f007 f8ad 	bl	800b454 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 fc5e 	bl	8008bd0 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d115      	bne.n	800434a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f007 f89d 	bl	800b470 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	e000      	b.n	800434a <HAL_PCD_IRQHandler+0x992>
      return;
 8004348:	bf00      	nop
    }
  }
}
 800434a:	3734      	adds	r7, #52	; 0x34
 800434c:	46bd      	mov	sp, r7
 800434e:	bd90      	pop	{r4, r7, pc}

08004350 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_PCD_SetAddress+0x1a>
 8004366:	2302      	movs	r3, #2
 8004368:	e013      	b.n	8004392 <HAL_PCD_SetAddress+0x42>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f004 fbbc 	bl	8008b00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	4608      	mov	r0, r1
 80043a4:	4611      	mov	r1, r2
 80043a6:	461a      	mov	r2, r3
 80043a8:	4603      	mov	r3, r0
 80043aa:	70fb      	strb	r3, [r7, #3]
 80043ac:	460b      	mov	r3, r1
 80043ae:	803b      	strh	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da0f      	bge.n	80043e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3338      	adds	r3, #56	; 0x38
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	705a      	strb	r2, [r3, #1]
 80043de:	e00f      	b.n	8004400 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	3304      	adds	r3, #4
 80043f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800440c:	883a      	ldrh	r2, [r7, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	78ba      	ldrb	r2, [r7, #2]
 8004416:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800442a:	78bb      	ldrb	r3, [r7, #2]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d102      	bne.n	8004436 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_PCD_EP_Open+0xaa>
 8004440:	2302      	movs	r3, #2
 8004442:	e00e      	b.n	8004462 <HAL_PCD_EP_Open+0xc8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68f9      	ldr	r1, [r7, #12]
 8004452:	4618      	mov	r0, r3
 8004454:	f003 fc3c 	bl	8007cd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004460:	7afb      	ldrb	r3, [r7, #11]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da0f      	bge.n	800449e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	3338      	adds	r3, #56	; 0x38
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	3304      	adds	r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	705a      	strb	r2, [r3, #1]
 800449c:	e00f      	b.n	80044be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_PCD_EP_Close+0x6e>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e00e      	b.n	80044f6 <HAL_PCD_EP_Close+0x8c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 fc7a 	bl	8007de0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	460b      	mov	r3, r1
 800450c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800450e:	7afb      	ldrb	r3, [r7, #11]
 8004510:	f003 020f 	and.w	r2, r3, #15
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	3304      	adds	r3, #4
 8004526:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2200      	movs	r2, #0
 8004538:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004540:	7afb      	ldrb	r3, [r7, #11]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	b2da      	uxtb	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d102      	bne.n	800455a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	f003 ff59 	bl	8008428 <USB_EP0StartXfer>
 8004576:	e008      	b.n	800458a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	f003 fd07 	bl	8007f98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80045b6:	681b      	ldr	r3, [r3, #0]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	460b      	mov	r3, r1
 80045d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d4:	7afb      	ldrb	r3, [r7, #11]
 80045d6:	f003 020f 	and.w	r2, r3, #15
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	3338      	adds	r3, #56	; 0x38
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2201      	movs	r2, #1
 8004602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004604:	7afb      	ldrb	r3, [r7, #11]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	b2da      	uxtb	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d102      	bne.n	800461e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	f003 fef7 	bl	8008428 <USB_EP0StartXfer>
 800463a:	e008      	b.n	800464e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	f003 fca5 	bl	8007f98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	f003 020f 	and.w	r2, r3, #15
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	429a      	cmp	r2, r3
 8004670:	d901      	bls.n	8004676 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e050      	b.n	8004718 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da0f      	bge.n	800469e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	3338      	adds	r3, #56	; 0x38
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	3304      	adds	r3, #4
 8004694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	705a      	strb	r2, [r3, #1]
 800469c:	e00d      	b.n	80046ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	3304      	adds	r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_PCD_EP_SetStall+0x82>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e01e      	b.n	8004718 <HAL_PCD_EP_SetStall+0xc0>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 f935 	bl	8008958 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	b2d9      	uxtb	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004708:	461a      	mov	r2, r3
 800470a:	f004 fb25 	bl	8008d58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d901      	bls.n	800473e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e042      	b.n	80047c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800473e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	da0f      	bge.n	8004766 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	3338      	adds	r3, #56	; 0x38
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	3304      	adds	r3, #4
 800475c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	705a      	strb	r2, [r3, #1]
 8004764:	e00f      	b.n	8004786 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f003 020f 	and.w	r2, r3, #15
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	3304      	adds	r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_PCD_EP_ClrStall+0x86>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e00e      	b.n	80047c4 <HAL_PCD_EP_ClrStall+0xa4>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f004 f93d 	bl	8008a34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da0c      	bge.n	80047fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	f003 020f 	and.w	r2, r3, #15
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	3338      	adds	r3, #56	; 0x38
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e00c      	b.n	8004814 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	3304      	adds	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	4618      	mov	r0, r3
 800481c:	f003 ff5c 	bl	80086d8 <USB_EPStopXfer>
 8004820:	4603      	mov	r3, r0
 8004822:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004824:	7afb      	ldrb	r3, [r7, #11]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08a      	sub	sp, #40	; 0x28
 8004832:	af02      	add	r7, sp, #8
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	3338      	adds	r3, #56	; 0x38
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	3304      	adds	r3, #4
 8004854:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	429a      	cmp	r2, r3
 8004860:	d901      	bls.n	8004866 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06c      	b.n	8004940 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	429a      	cmp	r2, r3
 800487a:	d902      	bls.n	8004882 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3303      	adds	r3, #3
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800488a:	e02b      	b.n	80048e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d902      	bls.n	80048a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3303      	adds	r3, #3
 80048ac:	089b      	lsrs	r3, r3, #2
 80048ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6919      	ldr	r1, [r3, #16]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4603      	mov	r3, r0
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f003 ffb0 	bl	800882c <USB_WritePacket>

    ep->xfer_buff  += len;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	441a      	add	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	441a      	add	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d809      	bhi.n	800490e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004902:	429a      	cmp	r2, r3
 8004904:	d203      	bcs.n	800490e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1be      	bne.n	800488c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	429a      	cmp	r2, r3
 8004918:	d811      	bhi.n	800493e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	2201      	movs	r2, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	43db      	mvns	r3, r3
 8004934:	6939      	ldr	r1, [r7, #16]
 8004936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800493a:	4013      	ands	r3, r2
 800493c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	333c      	adds	r3, #60	; 0x3c
 8004960:	3304      	adds	r3, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d17b      	bne.n	8004a76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4a61      	ldr	r2, [pc, #388]	; (8004b10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	f240 80b9 	bls.w	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80b3 	beq.w	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b0:	6093      	str	r3, [r2, #8]
 80049b2:	e0a7      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	2320      	movs	r3, #32
 80049ce:	6093      	str	r3, [r2, #8]
 80049d0:	e098      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f040 8093 	bne.w	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4a4b      	ldr	r2, [pc, #300]	; (8004b10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d90f      	bls.n	8004a06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fc:	461a      	mov	r2, r3
 80049fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a02:	6093      	str	r3, [r2, #8]
 8004a04:	e07e      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	0159      	lsls	r1, r3, #5
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	440b      	add	r3, r1
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d114      	bne.n	8004a68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a50:	461a      	mov	r2, r3
 8004a52:	2101      	movs	r1, #1
 8004a54:	f004 f980 	bl	8008d58 <USB_EP0_OutStart>
 8004a58:	e006      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f006 fc2c 	bl	800b2cc <HAL_PCD_DataOutStageCallback>
 8004a74:	e046      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d124      	bne.n	8004ac8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	461a      	mov	r2, r3
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	6093      	str	r3, [r2, #8]
 8004a9c:	e032      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f006 fc03 	bl	800b2cc <HAL_PCD_DataOutStageCallback>
 8004ac6:	e01d      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d114      	bne.n	8004af8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004af0:	461a      	mov	r2, r3
 8004af2:	2100      	movs	r1, #0
 8004af4:	f004 f930 	bl	8008d58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f006 fbe4 	bl	800b2cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	4f54300a 	.word	0x4f54300a
 8004b14:	4f54310a 	.word	0x4f54310a

08004b18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	333c      	adds	r3, #60	; 0x3c
 8004b30:	3304      	adds	r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d90e      	bls.n	8004b6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	461a      	mov	r2, r3
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f006 fb9b 	bl	800b2a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d90c      	bls.n	8004b94 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d108      	bne.n	8004b94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2101      	movs	r1, #1
 8004b90:	f004 f8e2 	bl	8008d58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	4f54300a 	.word	0x4f54300a

08004ba4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bc2:	883b      	ldrh	r3, [r7, #0]
 8004bc4:	0419      	lsls	r1, r3, #16
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd0:	e028      	b.n	8004c24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	73fb      	strb	r3, [r7, #15]
 8004be4:	e00d      	b.n	8004c02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	3340      	adds	r3, #64	; 0x40
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	7bfa      	ldrb	r2, [r7, #15]
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3ec      	bcc.n	8004be6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c0c:	883b      	ldrh	r3, [r7, #0]
 8004c0e:	0418      	lsls	r0, r3, #16
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	4302      	orrs	r2, r0
 8004c1c:	3340      	adds	r3, #64	; 0x40
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c86:	f043 0303 	orr.w	r3, r3, #3
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0cc      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b68      	ldr	r3, [pc, #416]	; (8004e54 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d90c      	bls.n	8004cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b65      	ldr	r3, [pc, #404]	; (8004e54 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b63      	ldr	r3, [pc, #396]	; (8004e54 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0b8      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d020      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cf0:	4b59      	ldr	r3, [pc, #356]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a58      	ldr	r2, [pc, #352]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d08:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a52      	ldr	r2, [pc, #328]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d14:	4b50      	ldr	r3, [pc, #320]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	494d      	ldr	r1, [pc, #308]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d044      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d107      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3a:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d119      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e07f      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d003      	beq.n	8004d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5a:	4b3f      	ldr	r3, [pc, #252]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e06f      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6a:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e067      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d7a:	4b37      	ldr	r3, [pc, #220]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f023 0203 	bic.w	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4934      	ldr	r1, [pc, #208]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d8c:	f7fd ffd0 	bl	8002d30 <HAL_GetTick>
 8004d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d94:	f7fd ffcc 	bl	8002d30 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e04f      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 020c 	and.w	r2, r3, #12
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d1eb      	bne.n	8004d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d20c      	bcs.n	8004de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dca:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e032      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df0:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4916      	ldr	r1, [pc, #88]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0e:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	490e      	ldr	r1, [pc, #56]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e22:	f000 fdc7 	bl	80059b4 <HAL_RCC_GetSysClockFreq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	490a      	ldr	r1, [pc, #40]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004e34:	5ccb      	ldrb	r3, [r1, r3]
 8004e36:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3a:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e3e:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fd ff30 	bl	8002ca8 <HAL_InitTick>

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40023c00 	.word	0x40023c00
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	0800ca10 	.word	0x0800ca10
 8004e60:	20000004 	.word	0x20000004
 8004e64:	20000008 	.word	0x20000008

08004e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000004 	.word	0x20000004

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e84:	f7ff fff0 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0a9b      	lsrs	r3, r3, #10
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4903      	ldr	r1, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	0800ca20 	.word	0x0800ca20

08004ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eac:	f7ff ffdc 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0b5b      	lsrs	r3, r3, #13
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4903      	ldr	r1, [pc, #12]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	0800ca20 	.word	0x0800ca20

08004ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f08:	4b6f      	ldr	r3, [pc, #444]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f0e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	496c      	ldr	r1, [pc, #432]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f26:	2301      	movs	r3, #1
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d010      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f36:	4b64      	ldr	r3, [pc, #400]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f44:	4960      	ldr	r1, [pc, #384]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004f54:	2301      	movs	r3, #1
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d017      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f64:	4b58      	ldr	r3, [pc, #352]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	4955      	ldr	r1, [pc, #340]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d101      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004f84:	2301      	movs	r3, #1
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004f90:	2301      	movs	r3, #1
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d017      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fa0:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	4946      	ldr	r1, [pc, #280]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fbe:	d101      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 808a 	beq.w	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	4a38      	ldr	r2, [pc, #224]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ffa:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a33      	ldr	r2, [pc, #204]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005006:	f7fd fe93 	bl	8002d30 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800500e:	f7fd fe8f 	bl	8002d30 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e278      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005020:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800502c:	4b26      	ldr	r3, [pc, #152]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005034:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	429a      	cmp	r2, r3
 8005048:	d028      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800504a:	4b1f      	ldr	r3, [pc, #124]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005054:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005060:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d114      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005072:	f7fd fe5d 	bl	8002d30 <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	e00a      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fd fe59 	bl	8002d30 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e240      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ee      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a8:	d114      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	4902      	ldr	r1, [pc, #8]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]
 80050c4:	e00c      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40007000 	.word	0x40007000
 80050d0:	42470e40 	.word	0x42470e40
 80050d4:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a49      	ldr	r2, [pc, #292]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050de:	6093      	str	r3, [r2, #8]
 80050e0:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ec:	4944      	ldr	r1, [pc, #272]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005104:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005106:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005114:	4b3a      	ldr	r3, [pc, #232]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	4937      	ldr	r1, [pc, #220]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005136:	4b32      	ldr	r3, [pc, #200]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005144:	492e      	ldr	r1, [pc, #184]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d011      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005158:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800515a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	4926      	ldr	r1, [pc, #152]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005176:	d101      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005178:	2301      	movs	r3, #1
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005188:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800518a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	491a      	ldr	r1, [pc, #104]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d011      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	4911      	ldr	r1, [pc, #68]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c8:	d101      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80051ca:	2301      	movs	r3, #1
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d005      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051dc:	f040 80ff 	bne.w	80053de <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e6:	f7fd fda3 	bl	8002d30 <HAL_GetTick>
 80051ea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ec:	e00e      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ee:	f7fd fd9f 	bl	8002d30 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d907      	bls.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e188      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005200:	40023800 	.word	0x40023800
 8005204:	424711e0 	.word	0x424711e0
 8005208:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800520c:	4b7e      	ldr	r3, [pc, #504]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ea      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005234:	2b00      	cmp	r3, #0
 8005236:	d028      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d124      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005240:	4b71      	ldr	r3, [pc, #452]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005246:	0c1b      	lsrs	r3, r3, #16
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	3301      	adds	r3, #1
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005252:	4b6d      	ldr	r3, [pc, #436]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005258:	0e1b      	lsrs	r3, r3, #24
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	431a      	orrs	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	3b01      	subs	r3, #1
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	4961      	ldr	r1, [pc, #388]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d035      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b4:	d130      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80052b6:	4b54      	ldr	r3, [pc, #336]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052bc:	0c1b      	lsrs	r3, r3, #16
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	3301      	adds	r3, #1
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052c8:	4b4f      	ldr	r3, [pc, #316]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ce:	0f1b      	lsrs	r3, r3, #28
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	019b      	lsls	r3, r3, #6
 80052e0:	431a      	orrs	r2, r3
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	3b01      	subs	r3, #1
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	431a      	orrs	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	071b      	lsls	r3, r3, #28
 80052f8:	4943      	ldr	r1, [pc, #268]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005300:	4b41      	ldr	r3, [pc, #260]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005306:	f023 021f 	bic.w	r2, r3, #31
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	493d      	ldr	r1, [pc, #244]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	2b00      	cmp	r3, #0
 8005322:	d029      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800532c:	d124      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800532e:	4b36      	ldr	r3, [pc, #216]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005340:	4b31      	ldr	r3, [pc, #196]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005346:	0f1b      	lsrs	r3, r3, #28
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	019b      	lsls	r3, r3, #6
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	3b01      	subs	r3, #1
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	431a      	orrs	r2, r3
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	431a      	orrs	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	071b      	lsls	r3, r3, #28
 8005370:	4925      	ldr	r1, [pc, #148]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005380:	2b00      	cmp	r3, #0
 8005382:	d016      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	019b      	lsls	r3, r3, #6
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	3b01      	subs	r3, #1
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	061b      	lsls	r3, r3, #24
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	071b      	lsls	r3, r3, #28
 80053aa:	4917      	ldr	r1, [pc, #92]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053b2:	4b16      	ldr	r3, [pc, #88]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053b8:	f7fd fcba 	bl	8002d30 <HAL_GetTick>
 80053bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053c0:	f7fd fcb6 	bl	8002d30 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e09f      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	f040 8095 	bne.w	8005510 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fd fca0 	bl	8002d30 <HAL_GetTick>
 80053f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053f2:	e00f      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053f4:	f7fd fc9c 	bl	8002d30 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d908      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e085      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	42470068 	.word	0x42470068
 8005410:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005414:	4b41      	ldr	r3, [pc, #260]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005420:	d0e8      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800543e:	2b00      	cmp	r3, #0
 8005440:	d02b      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	2b00      	cmp	r3, #0
 8005448:	d127      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800544a:	4b34      	ldr	r3, [pc, #208]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	3301      	adds	r3, #1
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	019b      	lsls	r3, r3, #6
 8005466:	431a      	orrs	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	3b01      	subs	r3, #1
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	4928      	ldr	r1, [pc, #160]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005480:	4b26      	ldr	r3, [pc, #152]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005486:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	3b01      	subs	r3, #1
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	4922      	ldr	r1, [pc, #136]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01d      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ae:	d118      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054b0:	4b1a      	ldr	r3, [pc, #104]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	0e1b      	lsrs	r3, r3, #24
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	019b      	lsls	r3, r3, #6
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	3b01      	subs	r3, #1
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	4910      	ldr	r1, [pc, #64]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e8:	f7fd fc22 	bl	8002d30 <HAL_GetTick>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80054f0:	f7fd fc1e 	bl	8002d30 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e007      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800550a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550e:	d1ef      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3730      	adds	r7, #48	; 0x30
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800
 8005520:	42470070 	.word	0x42470070

08005524 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	; 0x24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	2b07      	cmp	r3, #7
 800554a:	f200 8224 	bhi.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	08005757 	.word	0x08005757
 8005558:	08005881 	.word	0x08005881
 800555c:	08005997 	.word	0x08005997
 8005560:	08005575 	.word	0x08005575
 8005564:	08005997 	.word	0x08005997
 8005568:	08005997 	.word	0x08005997
 800556c:	08005997 	.word	0x08005997
 8005570:	08005575 	.word	0x08005575
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8005574:	4ba8      	ldr	r3, [pc, #672]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800557a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800558a:	f000 80d6 	beq.w	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005594:	f200 80dd 	bhi.w	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800559e:	f000 809f 	beq.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055a8:	f200 80d3 	bhi.w	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055b2:	d05b      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ba:	f200 80ca 	bhi.w	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055c4:	f000 80b6 	beq.w	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055ce:	f200 80c0 	bhi.w	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055d8:	f000 8082 	beq.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e2:	f200 80b6 	bhi.w	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f2:	d03b      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80055f4:	e0ad      	b.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055f6:	4b88      	ldr	r3, [pc, #544]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8005602:	4b85      	ldr	r3, [pc, #532]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800560c:	4a83      	ldr	r2, [pc, #524]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	e008      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8005616:	4b80      	ldr	r3, [pc, #512]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005620:	4a7f      	ldr	r2, [pc, #508]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8005628:	4b7b      	ldr	r3, [pc, #492]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	0e1b      	lsrs	r3, r3, #24
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8005636:	4b78      	ldr	r3, [pc, #480]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	fb03 f202 	mul.w	r2, r3, r2
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8005650:	4b71      	ldr	r3, [pc, #452]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	3301      	adds	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	61fb      	str	r3, [r7, #28]
          break;
 800566a:	e073      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800566c:	4b6a      	ldr	r3, [pc, #424]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005678:	4b67      	ldr	r3, [pc, #412]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005682:	4a66      	ldr	r2, [pc, #408]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	e008      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800568c:	4b62      	ldr	r3, [pc, #392]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005696:	4a62      	ldr	r2, [pc, #392]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005698:	fbb2 f3f3 	udiv	r3, r2, r3
 800569c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800569e:	4b5e      	ldr	r3, [pc, #376]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80056ac:	4b5a      	ldr	r3, [pc, #360]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	099b      	lsrs	r3, r3, #6
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	fb03 f202 	mul.w	r2, r3, r2
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80056c6:	4b54      	ldr	r3, [pc, #336]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	3301      	adds	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	61fb      	str	r3, [r7, #28]
          break;
 80056de:	e039      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056e0:	4b4d      	ldr	r3, [pc, #308]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d108      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056ec:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f4:	4a49      	ldr	r2, [pc, #292]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e007      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056fe:	4b46      	ldr	r3, [pc, #280]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005706:	4a46      	ldr	r2, [pc, #280]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800570e:	4b42      	ldr	r3, [pc, #264]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	0f1b      	lsrs	r3, r3, #28
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800571a:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	099b      	lsrs	r3, r3, #6
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	fb03 f202 	mul.w	r2, r3, r2
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	61fb      	str	r3, [r7, #28]
          break;
 8005732:	e00f      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005734:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005736:	61fb      	str	r3, [r7, #28]
          break;
 8005738:	e00c      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800573a:	4b37      	ldr	r3, [pc, #220]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8005746:	4b35      	ldr	r3, [pc, #212]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005748:	61fb      	str	r3, [r7, #28]
          break;
 800574a:	e003      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800574c:	4b34      	ldr	r3, [pc, #208]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800574e:	61fb      	str	r3, [r7, #28]
          break;
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8005752:	bf00      	nop
        }
      }
      break;
 8005754:	e11f      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005756:	4b30      	ldr	r3, [pc, #192]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800575c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005768:	d079      	beq.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005770:	f200 8082 	bhi.w	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800577a:	d03c      	beq.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005782:	d879      	bhi.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d006      	beq.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005790:	d172      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005794:	61fb      	str	r3, [r7, #28]
          break;
 8005796:	e072      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005798:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a4:	d109      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	e008      	b.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80057ba:	4b17      	ldr	r3, [pc, #92]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c4:	4a15      	ldr	r2, [pc, #84]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057cc:	4b12      	ldr	r3, [pc, #72]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d2:	099b      	lsrs	r3, r3, #6
 80057d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057e0:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	61fb      	str	r3, [r7, #28]
          break;
 80057f4:	e043      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80057f6:	4b08      	ldr	r3, [pc, #32]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005802:	d111      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800580c:	4a04      	ldr	r2, [pc, #16]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e010      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005816:	bf00      	nop
 8005818:	40023800 	.word	0x40023800
 800581c:	00f42400 	.word	0x00f42400
 8005820:	00b71b00 	.word	0x00b71b00
 8005824:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005828:	4b5e      	ldr	r3, [pc, #376]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005830:	4a5d      	ldr	r2, [pc, #372]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005838:	4b5a      	ldr	r3, [pc, #360]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	099b      	lsrs	r3, r3, #6
 800583e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800584a:	4b56      	ldr	r3, [pc, #344]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	0f1b      	lsrs	r3, r3, #28
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	61fb      	str	r3, [r7, #28]
          break;
 800585c:	e00f      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800585e:	4b51      	ldr	r3, [pc, #324]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586a:	d102      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800586c:	4b4f      	ldr	r3, [pc, #316]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800586e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005870:	e005      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8005872:	4b4d      	ldr	r3, [pc, #308]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005874:	61fb      	str	r3, [r7, #28]
          break;
 8005876:	e002      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	61fb      	str	r3, [r7, #28]
          break;
 800587c:	bf00      	nop
        }
      }
      break;
 800587e:	e08a      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005880:	4b48      	ldr	r3, [pc, #288]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005886:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005892:	d06f      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800589a:	d878      	bhi.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058a2:	d03c      	beq.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058aa:	d870      	bhi.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b8:	d169      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058ba:	4b3d      	ldr	r3, [pc, #244]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80058bc:	61fb      	str	r3, [r7, #28]
          break;
 80058be:	e069      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058c0:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058cc:	d109      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80058ce:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80058d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058d8:	4a34      	ldr	r2, [pc, #208]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80058da:	fbb2 f3f3 	udiv	r3, r2, r3
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e008      	b.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80058e2:	4b30      	ldr	r3, [pc, #192]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80058e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ec:	4a2e      	ldr	r2, [pc, #184]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058f4:	4b2b      	ldr	r3, [pc, #172]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80058f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	fb02 f303 	mul.w	r3, r2, r3
 8005906:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005908:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590e:	0f1b      	lsrs	r3, r3, #28
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	61fb      	str	r3, [r7, #28]
          break;
 800591c:	e03a      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800591e:	4b21      	ldr	r3, [pc, #132]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800592a:	d108      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800592c:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	e007      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800593e:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005946:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800594e:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	099b      	lsrs	r3, r3, #6
 8005954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005960:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	0f1b      	lsrs	r3, r3, #28
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	61fb      	str	r3, [r7, #28]
          break;
 8005972:	e00f      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005980:	d102      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8005982:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005984:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005986:	e005      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8005988:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800598a:	61fb      	str	r3, [r7, #28]
          break;
 800598c:	e002      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
          break;
 8005992:	bf00      	nop
        }
      }
      break;
 8005994:	bf00      	nop
    }
  }
  return frequency;
 8005996:	69fb      	ldr	r3, [r7, #28]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3724      	adds	r7, #36	; 0x24
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40023800 	.word	0x40023800
 80059a8:	00f42400 	.word	0x00f42400
 80059ac:	00b71b00 	.word	0x00b71b00
 80059b0:	00bb8000 	.word	0x00bb8000

080059b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b8:	b0a6      	sub	sp, #152	; 0x98
 80059ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059da:	4bc8      	ldr	r3, [pc, #800]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b0c      	cmp	r3, #12
 80059e4:	f200 817e 	bhi.w	8005ce4 <HAL_RCC_GetSysClockFreq+0x330>
 80059e8:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005ce5 	.word	0x08005ce5
 80059f8:	08005ce5 	.word	0x08005ce5
 80059fc:	08005ce5 	.word	0x08005ce5
 8005a00:	08005a2d 	.word	0x08005a2d
 8005a04:	08005ce5 	.word	0x08005ce5
 8005a08:	08005ce5 	.word	0x08005ce5
 8005a0c:	08005ce5 	.word	0x08005ce5
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005ce5 	.word	0x08005ce5
 8005a18:	08005ce5 	.word	0x08005ce5
 8005a1c:	08005ce5 	.word	0x08005ce5
 8005a20:	08005b9f 	.word	0x08005b9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a24:	4bb6      	ldr	r3, [pc, #728]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8005a2a:	e15f      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a2c:	4bb5      	ldr	r3, [pc, #724]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005a32:	e15b      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a34:	4bb1      	ldr	r3, [pc, #708]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a40:	4bae      	ldr	r3, [pc, #696]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d031      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4c:	4bab      	ldr	r3, [pc, #684]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	099b      	lsrs	r3, r3, #6
 8005a52:	2200      	movs	r2, #0
 8005a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a60:	2300      	movs	r3, #0
 8005a62:	667b      	str	r3, [r7, #100]	; 0x64
 8005a64:	4ba7      	ldr	r3, [pc, #668]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a66:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	fb03 f202 	mul.w	r2, r3, r2
 8005a70:	2300      	movs	r3, #0
 8005a72:	4621      	mov	r1, r4
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	4413      	add	r3, r2
 8005a7a:	4aa2      	ldr	r2, [pc, #648]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	fba1 1202 	umull	r1, r2, r1, r2
 8005a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a84:	460a      	mov	r2, r1
 8005a86:	67ba      	str	r2, [r7, #120]	; 0x78
 8005a88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005a8a:	4413      	add	r3, r2
 8005a8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a92:	2200      	movs	r2, #0
 8005a94:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005a98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005aa0:	f7fb f8a0 	bl	8000be4 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005aae:	e064      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab0:	4b92      	ldr	r3, [pc, #584]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	099b      	lsrs	r3, r3, #6
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8005aba:	657a      	str	r2, [r7, #84]	; 0x54
 8005abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005acc:	4622      	mov	r2, r4
 8005ace:	462b      	mov	r3, r5
 8005ad0:	f04f 0000 	mov.w	r0, #0
 8005ad4:	f04f 0100 	mov.w	r1, #0
 8005ad8:	0159      	lsls	r1, r3, #5
 8005ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ade:	0150      	lsls	r0, r2, #5
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	1a51      	subs	r1, r2, r1
 8005ae8:	6139      	str	r1, [r7, #16]
 8005aea:	4629      	mov	r1, r5
 8005aec:	eb63 0301 	sbc.w	r3, r3, r1
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005afe:	4659      	mov	r1, fp
 8005b00:	018b      	lsls	r3, r1, #6
 8005b02:	4651      	mov	r1, sl
 8005b04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b08:	4651      	mov	r1, sl
 8005b0a:	018a      	lsls	r2, r1, #6
 8005b0c:	4651      	mov	r1, sl
 8005b0e:	ebb2 0801 	subs.w	r8, r2, r1
 8005b12:	4659      	mov	r1, fp
 8005b14:	eb63 0901 	sbc.w	r9, r3, r1
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b2c:	4690      	mov	r8, r2
 8005b2e:	4699      	mov	r9, r3
 8005b30:	4623      	mov	r3, r4
 8005b32:	eb18 0303 	adds.w	r3, r8, r3
 8005b36:	60bb      	str	r3, [r7, #8]
 8005b38:	462b      	mov	r3, r5
 8005b3a:	eb49 0303 	adc.w	r3, r9, r3
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	028b      	lsls	r3, r1, #10
 8005b50:	4621      	mov	r1, r4
 8005b52:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b56:	4621      	mov	r1, r4
 8005b58:	028a      	lsls	r2, r1, #10
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b62:	2200      	movs	r2, #0
 8005b64:	643b      	str	r3, [r7, #64]	; 0x40
 8005b66:	647a      	str	r2, [r7, #68]	; 0x44
 8005b68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b6c:	f7fb f83a 	bl	8000be4 <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4613      	mov	r3, r2
 8005b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b7a:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	3301      	adds	r3, #1
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005b8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005b9c:	e0a6      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b9e:	4b57      	ldr	r3, [pc, #348]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005baa:	4b54      	ldr	r3, [pc, #336]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02a      	beq.n	8005c0c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb6:	4b51      	ldr	r3, [pc, #324]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4b4e      	ldr	r3, [pc, #312]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8005bcc:	fb03 f201 	mul.w	r2, r3, r1
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	fb00 f303 	mul.w	r3, r0, r3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	4a4a      	ldr	r2, [pc, #296]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8005bda:	fba0 1202 	umull	r1, r2, r0, r2
 8005bde:	677a      	str	r2, [r7, #116]	; 0x74
 8005be0:	460a      	mov	r2, r1
 8005be2:	673a      	str	r2, [r7, #112]	; 0x70
 8005be4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005be6:	4413      	add	r3, r2
 8005be8:	677b      	str	r3, [r7, #116]	; 0x74
 8005bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bee:	2200      	movs	r2, #0
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf2:	637a      	str	r2, [r7, #52]	; 0x34
 8005bf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bf8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005bfc:	f7fa fff2 	bl	8000be4 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4613      	mov	r3, r2
 8005c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c0a:	e05b      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	099b      	lsrs	r3, r3, #6
 8005c12:	2200      	movs	r2, #0
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1e:	623b      	str	r3, [r7, #32]
 8005c20:	2300      	movs	r3, #0
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
 8005c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c28:	4642      	mov	r2, r8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	f04f 0000 	mov.w	r0, #0
 8005c30:	f04f 0100 	mov.w	r1, #0
 8005c34:	0159      	lsls	r1, r3, #5
 8005c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c3a:	0150      	lsls	r0, r2, #5
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4641      	mov	r1, r8
 8005c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c46:	4649      	mov	r1, r9
 8005c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c60:	ebb2 040a 	subs.w	r4, r2, sl
 8005c64:	eb63 050b 	sbc.w	r5, r3, fp
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	00eb      	lsls	r3, r5, #3
 8005c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c76:	00e2      	lsls	r2, r4, #3
 8005c78:	4614      	mov	r4, r2
 8005c7a:	461d      	mov	r5, r3
 8005c7c:	4643      	mov	r3, r8
 8005c7e:	18e3      	adds	r3, r4, r3
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	464b      	mov	r3, r9
 8005c84:	eb45 0303 	adc.w	r3, r5, r3
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c96:	4629      	mov	r1, r5
 8005c98:	028b      	lsls	r3, r1, #10
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	028a      	lsls	r2, r1, #10
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cac:	2200      	movs	r2, #0
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	61fa      	str	r2, [r7, #28]
 8005cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cb6:	f7fa ff95 	bl	8000be4 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	0f1b      	lsrs	r3, r3, #28
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005ce2:	e003      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005cea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3798      	adds	r7, #152	; 0x98
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	00f42400 	.word	0x00f42400
 8005d04:	00b71b00 	.word	0x00b71b00

08005d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e28d      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8083 	beq.w	8005e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d28:	4b94      	ldr	r3, [pc, #592]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d019      	beq.n	8005d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d34:	4b91      	ldr	r3, [pc, #580]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d40:	4b8e      	ldr	r3, [pc, #568]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4e:	4b8b      	ldr	r3, [pc, #556]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	d112      	bne.n	8005d80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5a:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d68:	4b84      	ldr	r3, [pc, #528]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05b      	beq.n	8005e2c <HAL_RCC_OscConfig+0x124>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d157      	bne.n	8005e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e25a      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d106      	bne.n	8005d98 <HAL_RCC_OscConfig+0x90>
 8005d8a:	4b7c      	ldr	r3, [pc, #496]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7b      	ldr	r2, [pc, #492]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e01d      	b.n	8005dd4 <HAL_RCC_OscConfig+0xcc>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da0:	d10c      	bne.n	8005dbc <HAL_RCC_OscConfig+0xb4>
 8005da2:	4b76      	ldr	r3, [pc, #472]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a75      	ldr	r2, [pc, #468]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b73      	ldr	r3, [pc, #460]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a72      	ldr	r2, [pc, #456]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_OscConfig+0xcc>
 8005dbc:	4b6f      	ldr	r3, [pc, #444]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a6e      	ldr	r2, [pc, #440]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6b      	ldr	r2, [pc, #428]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d013      	beq.n	8005e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fc ffa8 	bl	8002d30 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de4:	f7fc ffa4 	bl	8002d30 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e21f      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df6:	4b61      	ldr	r3, [pc, #388]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0xdc>
 8005e02:	e014      	b.n	8005e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fc ff94 	bl	8002d30 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e0c:	f7fc ff90 	bl	8002d30 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	; 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e20b      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1e:	4b57      	ldr	r3, [pc, #348]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x104>
 8005e2a:	e000      	b.n	8005e2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d06f      	beq.n	8005f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e3a:	4b50      	ldr	r3, [pc, #320]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d017      	beq.n	8005e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e46:	4b4d      	ldr	r3, [pc, #308]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d105      	bne.n	8005e5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e52:	4b4a      	ldr	r3, [pc, #296]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e5e:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d11c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e6a:	4b44      	ldr	r3, [pc, #272]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d116      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e76:	4b41      	ldr	r3, [pc, #260]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_RCC_OscConfig+0x186>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d001      	beq.n	8005e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e1d3      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8e:	4b3b      	ldr	r3, [pc, #236]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4937      	ldr	r1, [pc, #220]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	e03a      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d020      	beq.n	8005eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eac:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <HAL_RCC_OscConfig+0x278>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7fc ff3d 	bl	8002d30 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eba:	f7fc ff39 	bl	8002d30 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e1b4      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed8:	4b28      	ldr	r3, [pc, #160]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4925      	ldr	r1, [pc, #148]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]
 8005eec:	e015      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <HAL_RCC_OscConfig+0x278>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fc ff1c 	bl	8002d30 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efc:	f7fc ff18 	bl	8002d30 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e193      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d036      	beq.n	8005f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f2e:	4b15      	ldr	r3, [pc, #84]	; (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fc fefc 	bl	8002d30 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7fc fef8 	bl	8002d30 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e173      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x234>
 8005f5a:	e01b      	b.n	8005f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fc fee5 	bl	8002d30 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f68:	e00e      	b.n	8005f88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6a:	f7fc fee1 	bl	8002d30 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d907      	bls.n	8005f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e15c      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	42470000 	.word	0x42470000
 8005f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f88:	4b8a      	ldr	r3, [pc, #552]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ea      	bne.n	8005f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8097 	beq.w	80060d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa6:	4b83      	ldr	r3, [pc, #524]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	4b7f      	ldr	r3, [pc, #508]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	4a7e      	ldr	r2, [pc, #504]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc2:	4b7c      	ldr	r3, [pc, #496]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd2:	4b79      	ldr	r3, [pc, #484]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d118      	bne.n	8006010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fde:	4b76      	ldr	r3, [pc, #472]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a75      	ldr	r2, [pc, #468]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fea:	f7fc fea1 	bl	8002d30 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff2:	f7fc fe9d 	bl	8002d30 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e118      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	4b6c      	ldr	r3, [pc, #432]	; (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d106      	bne.n	8006026 <HAL_RCC_OscConfig+0x31e>
 8006018:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	4a65      	ldr	r2, [pc, #404]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	6713      	str	r3, [r2, #112]	; 0x70
 8006024:	e01c      	b.n	8006060 <HAL_RCC_OscConfig+0x358>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d10c      	bne.n	8006048 <HAL_RCC_OscConfig+0x340>
 800602e:	4b61      	ldr	r3, [pc, #388]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	4a60      	ldr	r2, [pc, #384]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6713      	str	r3, [r2, #112]	; 0x70
 800603a:	4b5e      	ldr	r3, [pc, #376]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	4a5d      	ldr	r2, [pc, #372]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	6713      	str	r3, [r2, #112]	; 0x70
 8006046:	e00b      	b.n	8006060 <HAL_RCC_OscConfig+0x358>
 8006048:	4b5a      	ldr	r3, [pc, #360]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a59      	ldr	r2, [pc, #356]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	4b57      	ldr	r3, [pc, #348]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	4a56      	ldr	r2, [pc, #344]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d015      	beq.n	8006094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006068:	f7fc fe62 	bl	8002d30 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606e:	e00a      	b.n	8006086 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006070:	f7fc fe5e 	bl	8002d30 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	; 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e0d7      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ee      	beq.n	8006070 <HAL_RCC_OscConfig+0x368>
 8006092:	e014      	b.n	80060be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fc fe4c 	bl	8002d30 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fc fe48 	bl	8002d30 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0c1      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b2:	4b40      	ldr	r3, [pc, #256]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ee      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d105      	bne.n	80060d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c4:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	4a3a      	ldr	r2, [pc, #232]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80ad 	beq.w	8006234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060da:	4b36      	ldr	r3, [pc, #216]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 030c 	and.w	r3, r3, #12
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d060      	beq.n	80061a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d145      	bne.n	800617a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b33      	ldr	r3, [pc, #204]	; (80061bc <HAL_RCC_OscConfig+0x4b4>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f4:	f7fc fe1c 	bl	8002d30 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fc fe18 	bl	8002d30 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e093      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	4b29      	ldr	r3, [pc, #164]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	019b      	lsls	r3, r3, #6
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	3b01      	subs	r3, #1
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	071b      	lsls	r3, r3, #28
 8006146:	491b      	ldr	r1, [pc, #108]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <HAL_RCC_OscConfig+0x4b4>)
 800614e:	2201      	movs	r2, #1
 8006150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006152:	f7fc fded 	bl	8002d30 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615a:	f7fc fde9 	bl	8002d30 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e064      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616c:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x452>
 8006178:	e05c      	b.n	8006234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <HAL_RCC_OscConfig+0x4b4>)
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fc fdd6 	bl	8002d30 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006188:	f7fc fdd2 	bl	8002d30 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e04d      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x480>
 80061a6:	e045      	b.n	8006234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e040      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40007000 	.word	0x40007000
 80061bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_RCC_OscConfig+0x538>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d030      	beq.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d129      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d122      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d119      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d10f      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d107      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800

08006244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e07b      	b.n	800634e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d108      	bne.n	8006270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006266:	d009      	beq.n	800627c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	61da      	str	r2, [r3, #28]
 800626e:	e005      	b.n	800627c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fc fb60 	bl	800295c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	ea42 0103 	orr.w	r1, r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f003 0104 	and.w	r1, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	f003 0210 	and.w	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800633c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b088      	sub	sp, #32
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	4613      	mov	r3, r2
 8006364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_SPI_Transmit+0x22>
 8006374:	2302      	movs	r3, #2
 8006376:	e126      	b.n	80065c6 <HAL_SPI_Transmit+0x270>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006380:	f7fc fcd6 	bl	8002d30 <HAL_GetTick>
 8006384:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d002      	beq.n	800639c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006396:	2302      	movs	r3, #2
 8006398:	77fb      	strb	r3, [r7, #31]
    goto error;
 800639a:	e10b      	b.n	80065b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit+0x52>
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ac:	e102      	b.n	80065b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2203      	movs	r2, #3
 80063b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f4:	d10f      	bne.n	8006416 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006414:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d007      	beq.n	8006434 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643c:	d14b      	bne.n	80064d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_SPI_Transmit+0xf6>
 8006446:	8afb      	ldrh	r3, [r7, #22]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d13e      	bne.n	80064ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	881a      	ldrh	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	1c9a      	adds	r2, r3, #2
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006470:	e02b      	b.n	80064ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b02      	cmp	r3, #2
 800647e:	d112      	bne.n	80064a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	1c9a      	adds	r2, r3, #2
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80064a4:	e011      	b.n	80064ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a6:	f7fc fc43 	bl	8002d30 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d803      	bhi.n	80064be <HAL_SPI_Transmit+0x168>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_Transmit+0x16e>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064c8:	e074      	b.n	80065b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ce      	bne.n	8006472 <HAL_SPI_Transmit+0x11c>
 80064d4:	e04c      	b.n	8006570 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_SPI_Transmit+0x18e>
 80064de:	8afb      	ldrh	r3, [r7, #22]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d140      	bne.n	8006566 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800650a:	e02c      	b.n	8006566 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d113      	bne.n	8006542 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006540:	e011      	b.n	8006566 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006542:	f7fc fbf5 	bl	8002d30 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d803      	bhi.n	800655a <HAL_SPI_Transmit+0x204>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d102      	bne.n	8006560 <HAL_SPI_Transmit+0x20a>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006564:	e026      	b.n	80065b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1cd      	bne.n	800650c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f8b3 	bl	80066e0 <SPI_EndRxTxTransaction>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e000      	b.n	80065b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065e0:	f7fc fba6 	bl	8002d30 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4413      	add	r3, r2
 80065ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065f0:	f7fc fb9e 	bl	8002d30 <HAL_GetTick>
 80065f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065f6:	4b39      	ldr	r3, [pc, #228]	; (80066dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	015b      	lsls	r3, r3, #5
 80065fc:	0d1b      	lsrs	r3, r3, #20
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	fb02 f303 	mul.w	r3, r2, r3
 8006604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006606:	e054      	b.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d050      	beq.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006610:	f7fc fb8e 	bl	8002d30 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	429a      	cmp	r2, r3
 800661e:	d902      	bls.n	8006626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13d      	bne.n	80066a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663e:	d111      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006648:	d004      	beq.n	8006654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d107      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d10f      	bne.n	800668e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800668c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e017      	b.n	80066d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4013      	ands	r3, r2
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	bf0c      	ite	eq
 80066c2:	2301      	moveq	r3, #1
 80066c4:	2300      	movne	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d19b      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000004 	.word	0x20000004

080066e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <SPI_EndRxTxTransaction+0x7c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <SPI_EndRxTxTransaction+0x80>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	0d5b      	lsrs	r3, r3, #21
 80066f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
 8006700:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670a:	d112      	bne.n	8006732 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	2180      	movs	r1, #128	; 0x80
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff ff5a 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d016      	beq.n	8006750 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e00f      	b.n	8006752 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	3b01      	subs	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006748:	2b80      	cmp	r3, #128	; 0x80
 800674a:	d0f2      	beq.n	8006732 <SPI_EndRxTxTransaction+0x52>
 800674c:	e000      	b.n	8006750 <SPI_EndRxTxTransaction+0x70>
        break;
 800674e:	bf00      	nop
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000004 	.word	0x20000004
 8006760:	165e9f81 	.word	0x165e9f81

08006764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e041      	b.n	80067fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fc f94e 	bl	8002a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f000 fa96 	bl	8006cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	d001      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e04e      	b.n	80068ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a23      	ldr	r2, [pc, #140]	; (80068c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d022      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006846:	d01d      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <HAL_TIM_Base_Start_IT+0xc8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a19      	ldr	r2, [pc, #100]	; (80068dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d111      	bne.n	80068a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b06      	cmp	r3, #6
 8006894:	d010      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0201 	orr.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a6:	e007      	b.n	80068b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40010400 	.word	0x40010400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40001800 	.word	0x40001800

080068e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d122      	bne.n	8006940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d11b      	bne.n	8006940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0202 	mvn.w	r2, #2
 8006910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9b5 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 800692c:	e005      	b.n	800693a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f9a7 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f9b8 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b04      	cmp	r3, #4
 800694c:	d122      	bne.n	8006994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d11b      	bne.n	8006994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0204 	mvn.w	r2, #4
 8006964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f98b 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006980:	e005      	b.n	800698e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f97d 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f98e 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d122      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d11b      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0208 	mvn.w	r2, #8
 80069b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2204      	movs	r2, #4
 80069be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f961 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f953 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f964 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d122      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d11b      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0210 	mvn.w	r2, #16
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2208      	movs	r2, #8
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f937 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f929 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f93a 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d10e      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d107      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0201 	mvn.w	r2, #1
 8006a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fb fb2e 	bl	80020c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b80      	cmp	r3, #128	; 0x80
 8006a74:	d10e      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d107      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fae0 	bl	8007054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d10e      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	d107      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8ff 	bl	8006cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d10e      	bne.n	8006aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d107      	bne.n	8006aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0220 	mvn.w	r2, #32
 8006ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 faaa 	bl	8007040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIM_ConfigClockSource+0x1c>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e0b4      	b.n	8006c7a <HAL_TIM_ConfigClockSource+0x186>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b48:	d03e      	beq.n	8006bc8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4e:	f200 8087 	bhi.w	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b56:	f000 8086 	beq.w	8006c66 <HAL_TIM_ConfigClockSource+0x172>
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5e:	d87f      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b60:	2b70      	cmp	r3, #112	; 0x70
 8006b62:	d01a      	beq.n	8006b9a <HAL_TIM_ConfigClockSource+0xa6>
 8006b64:	2b70      	cmp	r3, #112	; 0x70
 8006b66:	d87b      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b68:	2b60      	cmp	r3, #96	; 0x60
 8006b6a:	d050      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x11a>
 8006b6c:	2b60      	cmp	r3, #96	; 0x60
 8006b6e:	d877      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b70:	2b50      	cmp	r3, #80	; 0x50
 8006b72:	d03c      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0xfa>
 8006b74:	2b50      	cmp	r3, #80	; 0x50
 8006b76:	d873      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d058      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x13a>
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d86f      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b80:	2b30      	cmp	r3, #48	; 0x30
 8006b82:	d064      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b84:	2b30      	cmp	r3, #48	; 0x30
 8006b86:	d86b      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d060      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d867      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d05c      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d05a      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b98:	e062      	b.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	6899      	ldr	r1, [r3, #8]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f000 f9ad 	bl	8006f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	609a      	str	r2, [r3, #8]
      break;
 8006bc6:	e04f      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6899      	ldr	r1, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f000 f996 	bl	8006f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bea:	609a      	str	r2, [r3, #8]
      break;
 8006bec:	e03c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6859      	ldr	r1, [r3, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f000 f90a 	bl	8006e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2150      	movs	r1, #80	; 0x50
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f963 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c0c:	e02c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6859      	ldr	r1, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f000 f929 	bl	8006e72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2160      	movs	r1, #96	; 0x60
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f953 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c2c:	e01c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f000 f8ea 	bl	8006e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2140      	movs	r1, #64	; 0x40
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f943 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c4c:	e00c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f000 f93a 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c5e:	e003      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
      break;
 8006c64:	e000      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a40      	ldr	r2, [pc, #256]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d00f      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3d      	ldr	r2, [pc, #244]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00b      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3c      	ldr	r2, [pc, #240]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d007      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a3b      	ldr	r2, [pc, #236]	; (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3a      	ldr	r2, [pc, #232]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d02b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d34:	d027      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d023      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2b      	ldr	r2, [pc, #172]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a29      	ldr	r2, [pc, #164]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d017      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <TIM_Base_SetConfig+0x128>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <TIM_Base_SetConfig+0x12c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <TIM_Base_SetConfig+0x130>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <TIM_Base_SetConfig+0x134>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a24      	ldr	r2, [pc, #144]	; (8006e0c <TIM_Base_SetConfig+0x138>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <TIM_Base_SetConfig+0x13c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d108      	bne.n	8006d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a0a      	ldr	r2, [pc, #40]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0xf8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a0c      	ldr	r2, [pc, #48]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d103      	bne.n	8006dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40010400 	.word	0x40010400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800
 8006e08:	40001800 	.word	0x40001800
 8006e0c:	40001c00 	.word	0x40001c00
 8006e10:	40002000 	.word	0x40002000

08006e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0201 	bic.w	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 030a 	bic.w	r3, r3, #10
 8006e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b087      	sub	sp, #28
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0210 	bic.w	r2, r3, #16
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f043 0307 	orr.w	r3, r3, #7
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	609a      	str	r2, [r3, #8]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	021a      	lsls	r2, r3, #8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	609a      	str	r2, [r3, #8]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e05a      	b.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d01d      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a18      	ldr	r2, [pc, #96]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a15      	ldr	r2, [pc, #84]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d10c      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40010400 	.word	0x40010400
 8007038:	40014000 	.word	0x40014000
 800703c:	40001800 	.word	0x40001800

08007040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e03f      	b.n	80070fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fb fcf2 	bl	8002a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	; 0x24
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f829 	bl	8007104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007108:	b0c0      	sub	sp, #256	; 0x100
 800710a:	af00      	add	r7, sp, #0
 800710c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	68d9      	ldr	r1, [r3, #12]
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	ea40 0301 	orr.w	r3, r0, r1
 800712c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800712e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	431a      	orrs	r2, r3
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	431a      	orrs	r2, r3
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800715c:	f021 010c 	bic.w	r1, r1, #12
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800716a:	430b      	orrs	r3, r1
 800716c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	6999      	ldr	r1, [r3, #24]
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	ea40 0301 	orr.w	r3, r0, r1
 800718a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b8f      	ldr	r3, [pc, #572]	; (80073d0 <UART_SetConfig+0x2cc>)
 8007194:	429a      	cmp	r2, r3
 8007196:	d005      	beq.n	80071a4 <UART_SetConfig+0xa0>
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4b8d      	ldr	r3, [pc, #564]	; (80073d4 <UART_SetConfig+0x2d0>)
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d104      	bne.n	80071ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a4:	f7fd fe80 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 80071a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071ac:	e003      	b.n	80071b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ae:	f7fd fe67 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80071b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c0:	f040 810c 	bne.w	80073dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071d6:	4622      	mov	r2, r4
 80071d8:	462b      	mov	r3, r5
 80071da:	1891      	adds	r1, r2, r2
 80071dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80071de:	415b      	adcs	r3, r3
 80071e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071e6:	4621      	mov	r1, r4
 80071e8:	eb12 0801 	adds.w	r8, r2, r1
 80071ec:	4629      	mov	r1, r5
 80071ee:	eb43 0901 	adc.w	r9, r3, r1
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007206:	4690      	mov	r8, r2
 8007208:	4699      	mov	r9, r3
 800720a:	4623      	mov	r3, r4
 800720c:	eb18 0303 	adds.w	r3, r8, r3
 8007210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007214:	462b      	mov	r3, r5
 8007216:	eb49 0303 	adc.w	r3, r9, r3
 800721a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800722a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800722e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007232:	460b      	mov	r3, r1
 8007234:	18db      	adds	r3, r3, r3
 8007236:	653b      	str	r3, [r7, #80]	; 0x50
 8007238:	4613      	mov	r3, r2
 800723a:	eb42 0303 	adc.w	r3, r2, r3
 800723e:	657b      	str	r3, [r7, #84]	; 0x54
 8007240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007248:	f7f9 fccc 	bl	8000be4 <__aeabi_uldivmod>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4b61      	ldr	r3, [pc, #388]	; (80073d8 <UART_SetConfig+0x2d4>)
 8007252:	fba3 2302 	umull	r2, r3, r3, r2
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	011c      	lsls	r4, r3, #4
 800725a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800726c:	4642      	mov	r2, r8
 800726e:	464b      	mov	r3, r9
 8007270:	1891      	adds	r1, r2, r2
 8007272:	64b9      	str	r1, [r7, #72]	; 0x48
 8007274:	415b      	adcs	r3, r3
 8007276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800727c:	4641      	mov	r1, r8
 800727e:	eb12 0a01 	adds.w	sl, r2, r1
 8007282:	4649      	mov	r1, r9
 8007284:	eb43 0b01 	adc.w	fp, r3, r1
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800729c:	4692      	mov	sl, r2
 800729e:	469b      	mov	fp, r3
 80072a0:	4643      	mov	r3, r8
 80072a2:	eb1a 0303 	adds.w	r3, sl, r3
 80072a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072aa:	464b      	mov	r3, r9
 80072ac:	eb4b 0303 	adc.w	r3, fp, r3
 80072b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072c8:	460b      	mov	r3, r1
 80072ca:	18db      	adds	r3, r3, r3
 80072cc:	643b      	str	r3, [r7, #64]	; 0x40
 80072ce:	4613      	mov	r3, r2
 80072d0:	eb42 0303 	adc.w	r3, r2, r3
 80072d4:	647b      	str	r3, [r7, #68]	; 0x44
 80072d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072de:	f7f9 fc81 	bl	8000be4 <__aeabi_uldivmod>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	4b3b      	ldr	r3, [pc, #236]	; (80073d8 <UART_SetConfig+0x2d4>)
 80072ea:	fba3 2301 	umull	r2, r3, r3, r1
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	2264      	movs	r2, #100	; 0x64
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	1acb      	subs	r3, r1, r3
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072fe:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <UART_SetConfig+0x2d4>)
 8007300:	fba3 2302 	umull	r2, r3, r3, r2
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800730c:	441c      	add	r4, r3
 800730e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007312:	2200      	movs	r2, #0
 8007314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800731c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	1891      	adds	r1, r2, r2
 8007326:	63b9      	str	r1, [r7, #56]	; 0x38
 8007328:	415b      	adcs	r3, r3
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007330:	4641      	mov	r1, r8
 8007332:	1851      	adds	r1, r2, r1
 8007334:	6339      	str	r1, [r7, #48]	; 0x30
 8007336:	4649      	mov	r1, r9
 8007338:	414b      	adcs	r3, r1
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007348:	4659      	mov	r1, fp
 800734a:	00cb      	lsls	r3, r1, #3
 800734c:	4651      	mov	r1, sl
 800734e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007352:	4651      	mov	r1, sl
 8007354:	00ca      	lsls	r2, r1, #3
 8007356:	4610      	mov	r0, r2
 8007358:	4619      	mov	r1, r3
 800735a:	4603      	mov	r3, r0
 800735c:	4642      	mov	r2, r8
 800735e:	189b      	adds	r3, r3, r2
 8007360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007364:	464b      	mov	r3, r9
 8007366:	460a      	mov	r2, r1
 8007368:	eb42 0303 	adc.w	r3, r2, r3
 800736c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800737c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007384:	460b      	mov	r3, r1
 8007386:	18db      	adds	r3, r3, r3
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28
 800738a:	4613      	mov	r3, r2
 800738c:	eb42 0303 	adc.w	r3, r2, r3
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800739a:	f7f9 fc23 	bl	8000be4 <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <UART_SetConfig+0x2d4>)
 80073a4:	fba3 1302 	umull	r1, r3, r3, r2
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	2164      	movs	r1, #100	; 0x64
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	3332      	adds	r3, #50	; 0x32
 80073b6:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <UART_SetConfig+0x2d4>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	f003 0207 	and.w	r2, r3, #7
 80073c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4422      	add	r2, r4
 80073ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073cc:	e105      	b.n	80075da <UART_SetConfig+0x4d6>
 80073ce:	bf00      	nop
 80073d0:	40011000 	.word	0x40011000
 80073d4:	40011400 	.word	0x40011400
 80073d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ee:	4642      	mov	r2, r8
 80073f0:	464b      	mov	r3, r9
 80073f2:	1891      	adds	r1, r2, r2
 80073f4:	6239      	str	r1, [r7, #32]
 80073f6:	415b      	adcs	r3, r3
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
 80073fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073fe:	4641      	mov	r1, r8
 8007400:	1854      	adds	r4, r2, r1
 8007402:	4649      	mov	r1, r9
 8007404:	eb43 0501 	adc.w	r5, r3, r1
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	00eb      	lsls	r3, r5, #3
 8007412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007416:	00e2      	lsls	r2, r4, #3
 8007418:	4614      	mov	r4, r2
 800741a:	461d      	mov	r5, r3
 800741c:	4643      	mov	r3, r8
 800741e:	18e3      	adds	r3, r4, r3
 8007420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007424:	464b      	mov	r3, r9
 8007426:	eb45 0303 	adc.w	r3, r5, r3
 800742a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800743a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800744a:	4629      	mov	r1, r5
 800744c:	008b      	lsls	r3, r1, #2
 800744e:	4621      	mov	r1, r4
 8007450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007454:	4621      	mov	r1, r4
 8007456:	008a      	lsls	r2, r1, #2
 8007458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800745c:	f7f9 fbc2 	bl	8000be4 <__aeabi_uldivmod>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4b60      	ldr	r3, [pc, #384]	; (80075e8 <UART_SetConfig+0x4e4>)
 8007466:	fba3 2302 	umull	r2, r3, r3, r2
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	011c      	lsls	r4, r3, #4
 800746e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007472:	2200      	movs	r2, #0
 8007474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800747c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	1891      	adds	r1, r2, r2
 8007486:	61b9      	str	r1, [r7, #24]
 8007488:	415b      	adcs	r3, r3
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007490:	4641      	mov	r1, r8
 8007492:	1851      	adds	r1, r2, r1
 8007494:	6139      	str	r1, [r7, #16]
 8007496:	4649      	mov	r1, r9
 8007498:	414b      	adcs	r3, r1
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074a8:	4659      	mov	r1, fp
 80074aa:	00cb      	lsls	r3, r1, #3
 80074ac:	4651      	mov	r1, sl
 80074ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074b2:	4651      	mov	r1, sl
 80074b4:	00ca      	lsls	r2, r1, #3
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	4642      	mov	r2, r8
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c4:	464b      	mov	r3, r9
 80074c6:	460a      	mov	r2, r1
 80074c8:	eb42 0303 	adc.w	r3, r2, r3
 80074cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80074da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074e8:	4649      	mov	r1, r9
 80074ea:	008b      	lsls	r3, r1, #2
 80074ec:	4641      	mov	r1, r8
 80074ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074f2:	4641      	mov	r1, r8
 80074f4:	008a      	lsls	r2, r1, #2
 80074f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074fa:	f7f9 fb73 	bl	8000be4 <__aeabi_uldivmod>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <UART_SetConfig+0x4e4>)
 8007504:	fba3 1302 	umull	r1, r3, r3, r2
 8007508:	095b      	lsrs	r3, r3, #5
 800750a:	2164      	movs	r1, #100	; 0x64
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	3332      	adds	r3, #50	; 0x32
 8007516:	4a34      	ldr	r2, [pc, #208]	; (80075e8 <UART_SetConfig+0x4e4>)
 8007518:	fba2 2303 	umull	r2, r3, r2, r3
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007522:	441c      	add	r4, r3
 8007524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007528:	2200      	movs	r2, #0
 800752a:	673b      	str	r3, [r7, #112]	; 0x70
 800752c:	677a      	str	r2, [r7, #116]	; 0x74
 800752e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	1891      	adds	r1, r2, r2
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	415b      	adcs	r3, r3
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007542:	4641      	mov	r1, r8
 8007544:	1851      	adds	r1, r2, r1
 8007546:	6039      	str	r1, [r7, #0]
 8007548:	4649      	mov	r1, r9
 800754a:	414b      	adcs	r3, r1
 800754c:	607b      	str	r3, [r7, #4]
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800755a:	4659      	mov	r1, fp
 800755c:	00cb      	lsls	r3, r1, #3
 800755e:	4651      	mov	r1, sl
 8007560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007564:	4651      	mov	r1, sl
 8007566:	00ca      	lsls	r2, r1, #3
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	4603      	mov	r3, r0
 800756e:	4642      	mov	r2, r8
 8007570:	189b      	adds	r3, r3, r2
 8007572:	66bb      	str	r3, [r7, #104]	; 0x68
 8007574:	464b      	mov	r3, r9
 8007576:	460a      	mov	r2, r1
 8007578:	eb42 0303 	adc.w	r3, r2, r3
 800757c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	663b      	str	r3, [r7, #96]	; 0x60
 8007588:	667a      	str	r2, [r7, #100]	; 0x64
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007596:	4649      	mov	r1, r9
 8007598:	008b      	lsls	r3, r1, #2
 800759a:	4641      	mov	r1, r8
 800759c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a0:	4641      	mov	r1, r8
 80075a2:	008a      	lsls	r2, r1, #2
 80075a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075a8:	f7f9 fb1c 	bl	8000be4 <__aeabi_uldivmod>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <UART_SetConfig+0x4e4>)
 80075b2:	fba3 1302 	umull	r1, r3, r3, r2
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	2164      	movs	r1, #100	; 0x64
 80075ba:	fb01 f303 	mul.w	r3, r1, r3
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	3332      	adds	r3, #50	; 0x32
 80075c4:	4a08      	ldr	r2, [pc, #32]	; (80075e8 <UART_SetConfig+0x4e4>)
 80075c6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	f003 020f 	and.w	r2, r3, #15
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4422      	add	r2, r4
 80075d8:	609a      	str	r2, [r3, #8]
}
 80075da:	bf00      	nop
 80075dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075e0:	46bd      	mov	sp, r7
 80075e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e6:	bf00      	nop
 80075e8:	51eb851f 	.word	0x51eb851f

080075ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075ec:	b084      	sub	sp, #16
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	f107 001c 	add.w	r0, r7, #28
 80075fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	2b01      	cmp	r3, #1
 8007602:	d122      	bne.n	800764a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d105      	bne.n	800763e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fbe8 	bl	8008e14 <USB_CoreReset>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
 8007648:	e01a      	b.n	8007680 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fbdc 	bl	8008e14 <USB_CoreReset>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d106      	bne.n	8007674 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	639a      	str	r2, [r3, #56]	; 0x38
 8007672:	e005      	b.n	8007680 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	2b01      	cmp	r3, #1
 8007684:	d10b      	bne.n	800769e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f043 0206 	orr.w	r2, r3, #6
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f043 0220 	orr.w	r2, r3, #32
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076aa:	b004      	add	sp, #16
 80076ac:	4770      	bx	lr
	...

080076b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d165      	bne.n	8007790 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4a41      	ldr	r2, [pc, #260]	; (80077cc <USB_SetTurnaroundTime+0x11c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d906      	bls.n	80076da <USB_SetTurnaroundTime+0x2a>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4a40      	ldr	r2, [pc, #256]	; (80077d0 <USB_SetTurnaroundTime+0x120>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d202      	bcs.n	80076da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076d4:	230f      	movs	r3, #15
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e062      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	4a3c      	ldr	r2, [pc, #240]	; (80077d0 <USB_SetTurnaroundTime+0x120>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d306      	bcc.n	80076f0 <USB_SetTurnaroundTime+0x40>
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	4a3b      	ldr	r2, [pc, #236]	; (80077d4 <USB_SetTurnaroundTime+0x124>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d202      	bcs.n	80076f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076ea:	230e      	movs	r3, #14
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	e057      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4a38      	ldr	r2, [pc, #224]	; (80077d4 <USB_SetTurnaroundTime+0x124>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d306      	bcc.n	8007706 <USB_SetTurnaroundTime+0x56>
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4a37      	ldr	r2, [pc, #220]	; (80077d8 <USB_SetTurnaroundTime+0x128>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d202      	bcs.n	8007706 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007700:	230d      	movs	r3, #13
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e04c      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	4a33      	ldr	r2, [pc, #204]	; (80077d8 <USB_SetTurnaroundTime+0x128>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d306      	bcc.n	800771c <USB_SetTurnaroundTime+0x6c>
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	4a32      	ldr	r2, [pc, #200]	; (80077dc <USB_SetTurnaroundTime+0x12c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d802      	bhi.n	800771c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007716:	230c      	movs	r3, #12
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	e041      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4a2f      	ldr	r2, [pc, #188]	; (80077dc <USB_SetTurnaroundTime+0x12c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d906      	bls.n	8007732 <USB_SetTurnaroundTime+0x82>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4a2e      	ldr	r2, [pc, #184]	; (80077e0 <USB_SetTurnaroundTime+0x130>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d802      	bhi.n	8007732 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800772c:	230b      	movs	r3, #11
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	e036      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4a2a      	ldr	r2, [pc, #168]	; (80077e0 <USB_SetTurnaroundTime+0x130>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d906      	bls.n	8007748 <USB_SetTurnaroundTime+0x98>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <USB_SetTurnaroundTime+0x134>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d802      	bhi.n	8007748 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007742:	230a      	movs	r3, #10
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	e02b      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a26      	ldr	r2, [pc, #152]	; (80077e4 <USB_SetTurnaroundTime+0x134>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d906      	bls.n	800775e <USB_SetTurnaroundTime+0xae>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4a25      	ldr	r2, [pc, #148]	; (80077e8 <USB_SetTurnaroundTime+0x138>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d202      	bcs.n	800775e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007758:	2309      	movs	r3, #9
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	e020      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <USB_SetTurnaroundTime+0x138>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d306      	bcc.n	8007774 <USB_SetTurnaroundTime+0xc4>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4a20      	ldr	r2, [pc, #128]	; (80077ec <USB_SetTurnaroundTime+0x13c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d802      	bhi.n	8007774 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800776e:	2308      	movs	r3, #8
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e015      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4a1d      	ldr	r2, [pc, #116]	; (80077ec <USB_SetTurnaroundTime+0x13c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d906      	bls.n	800778a <USB_SetTurnaroundTime+0xda>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4a1c      	ldr	r2, [pc, #112]	; (80077f0 <USB_SetTurnaroundTime+0x140>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d202      	bcs.n	800778a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007784:	2307      	movs	r3, #7
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e00a      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800778a:	2306      	movs	r3, #6
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	e007      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007796:	2309      	movs	r3, #9
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	e001      	b.n	80077a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800779c:	2309      	movs	r3, #9
 800779e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	029b      	lsls	r3, r3, #10
 80077b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	00d8acbf 	.word	0x00d8acbf
 80077d0:	00e4e1c0 	.word	0x00e4e1c0
 80077d4:	00f42400 	.word	0x00f42400
 80077d8:	01067380 	.word	0x01067380
 80077dc:	011a499f 	.word	0x011a499f
 80077e0:	01312cff 	.word	0x01312cff
 80077e4:	014ca43f 	.word	0x014ca43f
 80077e8:	016e3600 	.word	0x016e3600
 80077ec:	01a6ab1f 	.word	0x01a6ab1f
 80077f0:	01e84800 	.word	0x01e84800

080077f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f043 0201 	orr.w	r2, r3, #1
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f023 0201 	bic.w	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d115      	bne.n	8007886 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007866:	2001      	movs	r0, #1
 8007868:	f7fb fa6e 	bl	8002d48 <HAL_Delay>
      ms++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 fa3f 	bl	8008cf6 <USB_GetMode>
 8007878:	4603      	mov	r3, r0
 800787a:	2b01      	cmp	r3, #1
 800787c:	d01e      	beq.n	80078bc <USB_SetCurrentMode+0x84>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b31      	cmp	r3, #49	; 0x31
 8007882:	d9f0      	bls.n	8007866 <USB_SetCurrentMode+0x2e>
 8007884:	e01a      	b.n	80078bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d115      	bne.n	80078b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007898:	2001      	movs	r0, #1
 800789a:	f7fb fa55 	bl	8002d48 <HAL_Delay>
      ms++;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fa26 	bl	8008cf6 <USB_GetMode>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <USB_SetCurrentMode+0x84>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b31      	cmp	r3, #49	; 0x31
 80078b4:	d9f0      	bls.n	8007898 <USB_SetCurrentMode+0x60>
 80078b6:	e001      	b.n	80078bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e005      	b.n	80078c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b32      	cmp	r3, #50	; 0x32
 80078c0:	d101      	bne.n	80078c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078d0:	b084      	sub	sp, #16
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	e009      	b.n	8007904 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3340      	adds	r3, #64	; 0x40
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	2200      	movs	r2, #0
 80078fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3301      	adds	r3, #1
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b0e      	cmp	r3, #14
 8007908:	d9f2      	bls.n	80078f0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800790a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11c      	bne.n	800794a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800791e:	f043 0302 	orr.w	r3, r3, #2
 8007922:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e005      	b.n	8007956 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800795c:	461a      	mov	r2, r3
 800795e:	2300      	movs	r3, #0
 8007960:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	4619      	mov	r1, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007970:	461a      	mov	r2, r3
 8007972:	680b      	ldr	r3, [r1, #0]
 8007974:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10c      	bne.n	8007996 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f965 	bl	8007c54 <USB_SetDevSpeed>
 800798a:	e008      	b.n	800799e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800798c:	2101      	movs	r1, #1
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f960 	bl	8007c54 <USB_SetDevSpeed>
 8007994:	e003      	b.n	800799e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007996:	2103      	movs	r1, #3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f95b 	bl	8007c54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800799e:	2110      	movs	r1, #16
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f8f3 	bl	8007b8c <USB_FlushTxFifo>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f91f 	bl	8007bf4 <USB_FlushRxFifo>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c6:	461a      	mov	r2, r3
 80079c8:	2300      	movs	r3, #0
 80079ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	461a      	mov	r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	461a      	mov	r2, r3
 80079e0:	2300      	movs	r3, #0
 80079e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	e043      	b.n	8007a72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a00:	d118      	bne.n	8007a34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	461a      	mov	r2, r3
 8007a16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e013      	b.n	8007a46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	e008      	b.n	8007a46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a52:	461a      	mov	r2, r3
 8007a54:	2300      	movs	r3, #0
 8007a56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	461a      	mov	r2, r3
 8007a66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d3b7      	bcc.n	80079ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e043      	b.n	8007b08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a96:	d118      	bne.n	8007aca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e013      	b.n	8007adc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e008      	b.n	8007adc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2300      	movs	r3, #0
 8007aec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	461a      	mov	r2, r3
 8007afc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	3301      	adds	r3, #1
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d3b7      	bcc.n	8007a80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	f043 0210 	orr.w	r2, r3, #16
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <USB_DevInit+0x2b8>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f043 0208 	orr.w	r2, r3, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d107      	bne.n	8007b78 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b70:	f043 0304 	orr.w	r3, r3, #4
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b84:	b004      	add	sp, #16
 8007b86:	4770      	bx	lr
 8007b88:	803c3800 	.word	0x803c3800

08007b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <USB_FlushTxFifo+0x64>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d901      	bls.n	8007bac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e01b      	b.n	8007be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	daf2      	bge.n	8007b9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	019b      	lsls	r3, r3, #6
 8007bbc:	f043 0220 	orr.w	r2, r3, #32
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <USB_FlushTxFifo+0x64>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e006      	b.n	8007be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d0f0      	beq.n	8007bc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	00030d40 	.word	0x00030d40

08007bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a11      	ldr	r2, [pc, #68]	; (8007c50 <USB_FlushRxFifo+0x5c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d901      	bls.n	8007c12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e018      	b.n	8007c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	daf2      	bge.n	8007c00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2210      	movs	r2, #16
 8007c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a08      	ldr	r2, [pc, #32]	; (8007c50 <USB_FlushRxFifo+0x5c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d901      	bls.n	8007c36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e006      	b.n	8007c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0310 	and.w	r3, r3, #16
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d0f0      	beq.n	8007c24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	00030d40 	.word	0x00030d40

08007c54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c74:	4313      	orrs	r3, r2
 8007c76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b087      	sub	sp, #28
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0306 	and.w	r3, r3, #6
 8007c9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d102      	bne.n	8007cac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]
 8007caa:	e00a      	b.n	8007cc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d002      	beq.n	8007cb8 <USB_GetDevSpeed+0x32>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b06      	cmp	r3, #6
 8007cb6:	d102      	bne.n	8007cbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	75fb      	strb	r3, [r7, #23]
 8007cbc:	e001      	b.n	8007cc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cbe:	230f      	movs	r3, #15
 8007cc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d13a      	bne.n	8007d62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf2:	69da      	ldr	r2, [r3, #28]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d155      	bne.n	8007dd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	791b      	ldrb	r3, [r3, #4]
 8007d3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	059b      	lsls	r3, r3, #22
 8007d46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	0151      	lsls	r1, r2, #5
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	440a      	add	r2, r1
 8007d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	e036      	b.n	8007dd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d68:	69da      	ldr	r2, [r3, #28]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	2101      	movs	r1, #1
 8007d74:	fa01 f303 	lsl.w	r3, r1, r3
 8007d78:	041b      	lsls	r3, r3, #16
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d11a      	bne.n	8007dd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	791b      	ldrb	r3, [r3, #4]
 8007db4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007db6:	430b      	orrs	r3, r1
 8007db8:	4313      	orrs	r3, r2
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d161      	bne.n	8007ec0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e12:	d11f      	bne.n	8007e54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	0151      	lsls	r1, r2, #5
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	440a      	add	r2, r1
 8007e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	2101      	movs	r1, #1
 8007e66:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e74:	4013      	ands	r3, r2
 8007e76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	2101      	movs	r1, #1
 8007e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	43db      	mvns	r3, r3
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e98:	4013      	ands	r3, r2
 8007e9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	0159      	lsls	r1, r3, #5
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	440b      	add	r3, r1
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4b35      	ldr	r3, [pc, #212]	; (8007f90 <USB_DeactivateEndpoint+0x1b0>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	600b      	str	r3, [r1, #0]
 8007ebe:	e060      	b.n	8007f82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed6:	d11f      	bne.n	8007f18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	0151      	lsls	r1, r2, #5
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	440a      	add	r2, r1
 8007eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ef6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	2101      	movs	r1, #1
 8007f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2e:	041b      	lsls	r3, r3, #16
 8007f30:	43db      	mvns	r3, r3
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f38:	4013      	ands	r3, r2
 8007f3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f52:	041b      	lsls	r3, r3, #16
 8007f54:	43db      	mvns	r3, r3
 8007f56:	68f9      	ldr	r1, [r7, #12]
 8007f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	0159      	lsls	r1, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	440b      	add	r3, r1
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <USB_DeactivateEndpoint+0x1b4>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	ec337800 	.word	0xec337800
 8007f94:	eff37800 	.word	0xeff37800

08007f98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	; 0x28
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	f040 815c 	bne.w	8008272 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d132      	bne.n	8008028 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	0151      	lsls	r1, r2, #5
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	440a      	add	r2, r1
 8007fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	440a      	add	r2, r1
 800801c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008020:	0cdb      	lsrs	r3, r3, #19
 8008022:	04db      	lsls	r3, r3, #19
 8008024:	6113      	str	r3, [r2, #16]
 8008026:	e074      	b.n	8008112 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	440a      	add	r2, r1
 800803e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008042:	0cdb      	lsrs	r3, r3, #19
 8008044:	04db      	lsls	r3, r3, #19
 8008046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	440a      	add	r2, r1
 800805e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008062:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008066:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800806a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008078:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6999      	ldr	r1, [r3, #24]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	440b      	add	r3, r1
 8008084:	1e59      	subs	r1, r3, #1
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	fbb1 f3f3 	udiv	r3, r1, r3
 800808e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008090:	4b9d      	ldr	r3, [pc, #628]	; (8008308 <USB_EPStartXfer+0x370>)
 8008092:	400b      	ands	r3, r1
 8008094:	69b9      	ldr	r1, [r7, #24]
 8008096:	0148      	lsls	r0, r1, #5
 8008098:	69f9      	ldr	r1, [r7, #28]
 800809a:	4401      	add	r1, r0
 800809c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080a0:	4313      	orrs	r3, r2
 80080a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ba:	69b9      	ldr	r1, [r7, #24]
 80080bc:	0148      	lsls	r0, r1, #5
 80080be:	69f9      	ldr	r1, [r7, #28]
 80080c0:	4401      	add	r1, r0
 80080c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080c6:	4313      	orrs	r3, r2
 80080c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	791b      	ldrb	r3, [r3, #4]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d11f      	bne.n	8008112 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	0151      	lsls	r1, r2, #5
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	440a      	add	r2, r1
 80080e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80080f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800810c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008110:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d14b      	bne.n	80081b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	461a      	mov	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	791b      	ldrb	r3, [r3, #4]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d128      	bne.n	800818e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d110      	bne.n	800816e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	440a      	add	r2, r1
 8008162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008166:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	e00f      	b.n	800818e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	0151      	lsls	r1, r2, #5
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	440a      	add	r2, r1
 8008184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800818c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	0151      	lsls	r1, r2, #5
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	440a      	add	r2, r1
 80081a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	e133      	b.n	8008418 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	791b      	ldrb	r3, [r3, #4]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d015      	beq.n	8008204 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 811b 	beq.w	8008418 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	2101      	movs	r1, #1
 80081f4:	fa01 f303 	lsl.w	r3, r1, r3
 80081f8:	69f9      	ldr	r1, [r7, #28]
 80081fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081fe:	4313      	orrs	r3, r2
 8008200:	634b      	str	r3, [r1, #52]	; 0x34
 8008202:	e109      	b.n	8008418 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008210:	2b00      	cmp	r3, #0
 8008212:	d110      	bne.n	8008236 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	e00f      	b.n	8008256 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	0151      	lsls	r1, r2, #5
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	440a      	add	r2, r1
 800824c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008254:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6919      	ldr	r1, [r3, #16]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	b298      	uxth	r0, r3
 8008264:	79fb      	ldrb	r3, [r7, #7]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4603      	mov	r3, r0
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fade 	bl	800882c <USB_WritePacket>
 8008270:	e0d2      	b.n	8008418 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	440a      	add	r2, r1
 8008288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800828c:	0cdb      	lsrs	r3, r3, #19
 800828e:	04db      	lsls	r3, r3, #19
 8008290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d126      	bne.n	800830c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ca:	691a      	ldr	r2, [r3, #16]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082d4:	69b9      	ldr	r1, [r7, #24]
 80082d6:	0148      	lsls	r0, r1, #5
 80082d8:	69f9      	ldr	r1, [r7, #28]
 80082da:	4401      	add	r1, r0
 80082dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082e0:	4313      	orrs	r3, r2
 80082e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008302:	6113      	str	r3, [r2, #16]
 8008304:	e03a      	b.n	800837c <USB_EPStartXfer+0x3e4>
 8008306:	bf00      	nop
 8008308:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	699a      	ldr	r2, [r3, #24]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	4413      	add	r3, r2
 8008316:	1e5a      	subs	r2, r3, #1
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008320:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	8afa      	ldrh	r2, [r7, #22]
 8008328:	fb03 f202 	mul.w	r2, r3, r2
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833c:	691a      	ldr	r2, [r3, #16]
 800833e:	8afb      	ldrh	r3, [r7, #22]
 8008340:	04d9      	lsls	r1, r3, #19
 8008342:	4b38      	ldr	r3, [pc, #224]	; (8008424 <USB_EPStartXfer+0x48c>)
 8008344:	400b      	ands	r3, r1
 8008346:	69b9      	ldr	r1, [r7, #24]
 8008348:	0148      	lsls	r0, r1, #5
 800834a:	69f9      	ldr	r1, [r7, #28]
 800834c:	4401      	add	r1, r0
 800834e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008352:	4313      	orrs	r3, r2
 8008354:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800836c:	69b9      	ldr	r1, [r7, #24]
 800836e:	0148      	lsls	r0, r1, #5
 8008370:	69f9      	ldr	r1, [r7, #28]
 8008372:	4401      	add	r1, r0
 8008374:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008378:	4313      	orrs	r3, r2
 800837a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d10d      	bne.n	800839e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	6919      	ldr	r1, [r3, #16]
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839a:	460a      	mov	r2, r1
 800839c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	791b      	ldrb	r3, [r3, #4]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d128      	bne.n	80083f8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d110      	bne.n	80083d8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	0151      	lsls	r1, r2, #5
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	440a      	add	r2, r1
 80083cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	e00f      	b.n	80083f8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008412:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008416:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	1ff80000 	.word	0x1ff80000

08008428 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b01      	cmp	r3, #1
 8008446:	f040 80ce 	bne.w	80085e6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d132      	bne.n	80084b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	440a      	add	r2, r1
 8008468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	440a      	add	r2, r1
 800848c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008494:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	0151      	lsls	r1, r2, #5
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	440a      	add	r2, r1
 80084ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b0:	0cdb      	lsrs	r3, r3, #19
 80084b2:	04db      	lsls	r3, r3, #19
 80084b4:	6113      	str	r3, [r2, #16]
 80084b6:	e04e      	b.n	8008556 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d2:	0cdb      	lsrs	r3, r3, #19
 80084d4:	04db      	lsls	r3, r3, #19
 80084d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	429a      	cmp	r2, r3
 8008506:	d903      	bls.n	8008510 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800852e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853c:	691a      	ldr	r2, [r3, #16]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008546:	6939      	ldr	r1, [r7, #16]
 8008548:	0148      	lsls	r0, r1, #5
 800854a:	6979      	ldr	r1, [r7, #20]
 800854c:	4401      	add	r1, r0
 800854e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008552:	4313      	orrs	r3, r2
 8008554:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d11e      	bne.n	800859a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d009      	beq.n	8008578 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	461a      	mov	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	0151      	lsls	r1, r2, #5
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	440a      	add	r2, r1
 800858e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	e097      	b.n	80086ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 8083 	beq.w	80086ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	2101      	movs	r1, #1
 80085d6:	fa01 f303 	lsl.w	r3, r1, r3
 80085da:	6979      	ldr	r1, [r7, #20]
 80085dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e0:	4313      	orrs	r3, r2
 80085e2:	634b      	str	r3, [r1, #52]	; 0x34
 80085e4:	e071      	b.n	80086ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	0151      	lsls	r1, r2, #5
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	440a      	add	r2, r1
 80085fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008600:	0cdb      	lsrs	r3, r3, #19
 8008602:	04db      	lsls	r3, r3, #19
 8008604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008628:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	440a      	add	r2, r1
 8008658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008660:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008678:	6939      	ldr	r1, [r7, #16]
 800867a:	0148      	lsls	r0, r1, #5
 800867c:	6979      	ldr	r1, [r7, #20]
 800867e:	4401      	add	r1, r0
 8008680:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008684:	4313      	orrs	r3, r2
 8008686:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d10d      	bne.n	80086aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6919      	ldr	r1, [r3, #16]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a6:	460a      	mov	r2, r1
 80086a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	0151      	lsls	r1, r2, #5
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	440a      	add	r2, r1
 80086c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	371c      	adds	r7, #28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	785b      	ldrb	r3, [r3, #1]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d14a      	bne.n	800878c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800870a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800870e:	f040 8086 	bne.w	800881e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	7812      	ldrb	r2, [r2, #0]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008730:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008734:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	0151      	lsls	r1, r2, #5
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	440a      	add	r2, r1
 8008750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3301      	adds	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f242 7210 	movw	r2, #10000	; 0x2710
 8008766:	4293      	cmp	r3, r2
 8008768:	d902      	bls.n	8008770 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	75fb      	strb	r3, [r7, #23]
          break;
 800876e:	e056      	b.n	800881e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008788:	d0e7      	beq.n	800875a <USB_EPStopXfer+0x82>
 800878a:	e048      	b.n	800881e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087a4:	d13b      	bne.n	800881e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	7812      	ldrb	r2, [r2, #0]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d902      	bls.n	8008804 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	75fb      	strb	r3, [r7, #23]
          break;
 8008802:	e00c      	b.n	800881e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800881c:	d0e7      	beq.n	80087ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008820:	4618      	mov	r0, r3
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800882c:	b480      	push	{r7}
 800882e:	b089      	sub	sp, #36	; 0x24
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4611      	mov	r1, r2
 8008838:	461a      	mov	r2, r3
 800883a:	460b      	mov	r3, r1
 800883c:	71fb      	strb	r3, [r7, #7]
 800883e:	4613      	mov	r3, r2
 8008840:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800884a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800884e:	2b00      	cmp	r3, #0
 8008850:	d123      	bne.n	800889a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008852:	88bb      	ldrh	r3, [r7, #4]
 8008854:	3303      	adds	r3, #3
 8008856:	089b      	lsrs	r3, r3, #2
 8008858:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800885a:	2300      	movs	r3, #0
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	e018      	b.n	8008892 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	031a      	lsls	r2, r3, #12
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	4413      	add	r3, r2
 8008868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886c:	461a      	mov	r2, r3
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	3301      	adds	r3, #1
 800887e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	3301      	adds	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	3301      	adds	r3, #1
 800888a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	3301      	adds	r3, #1
 8008890:	61bb      	str	r3, [r7, #24]
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	429a      	cmp	r2, r3
 8008898:	d3e2      	bcc.n	8008860 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3724      	adds	r7, #36	; 0x24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b08b      	sub	sp, #44	; 0x2c
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	089b      	lsrs	r3, r3, #2
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	623b      	str	r3, [r7, #32]
 80088d2:	e014      	b.n	80088fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	601a      	str	r2, [r3, #0]
    pDest++;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	3301      	adds	r3, #1
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	3301      	adds	r3, #1
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	3301      	adds	r3, #1
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	3301      	adds	r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	3301      	adds	r3, #1
 80088fc:	623b      	str	r3, [r7, #32]
 80088fe:	6a3a      	ldr	r2, [r7, #32]
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	429a      	cmp	r2, r3
 8008904:	d3e6      	bcc.n	80088d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008906:	8bfb      	ldrh	r3, [r7, #30]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01e      	beq.n	800894a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008916:	461a      	mov	r2, r3
 8008918:	f107 0310 	add.w	r3, r7, #16
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	fa22 f303 	lsr.w	r3, r2, r3
 800892c:	b2da      	uxtb	r2, r3
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	701a      	strb	r2, [r3, #0]
      i++;
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	3301      	adds	r3, #1
 8008936:	623b      	str	r3, [r7, #32]
      pDest++;
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	3301      	adds	r3, #1
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800893e:	8bfb      	ldrh	r3, [r7, #30]
 8008940:	3b01      	subs	r3, #1
 8008942:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008944:	8bfb      	ldrh	r3, [r7, #30]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1ea      	bne.n	8008920 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800894c:	4618      	mov	r0, r3
 800894e:	372c      	adds	r7, #44	; 0x2c
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	785b      	ldrb	r3, [r3, #1]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d12c      	bne.n	80089ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	db12      	blt.n	80089ac <USB_EPSetStall+0x54>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00f      	beq.n	80089ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	e02b      	b.n	8008a26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	db12      	blt.n	8008a06 <USB_EPSetStall+0xae>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00f      	beq.n	8008a06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d128      	bne.n	8008aa2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	791b      	ldrb	r3, [r3, #4]
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d003      	beq.n	8008a80 <USB_EPClearStall+0x4c>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	791b      	ldrb	r3, [r3, #4]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d138      	bne.n	8008af2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	e027      	b.n	8008af2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008abc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ac0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	791b      	ldrb	r3, [r3, #4]
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d003      	beq.n	8008ad2 <USB_EPClearStall+0x9e>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	791b      	ldrb	r3, [r3, #4]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d10f      	bne.n	8008af2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b66:	f023 0303 	bic.w	r3, r3, #3
 8008b6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b7a:	f023 0302 	bic.w	r3, r3, #2
 8008b7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b085      	sub	sp, #20
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ba8:	f023 0303 	bic.w	r3, r3, #3
 8008bac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bbc:	f043 0302 	orr.w	r3, r3, #2
 8008bc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4013      	ands	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	4013      	ands	r3, r2
 8008c18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	0c1b      	lsrs	r3, r3, #16
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	b29b      	uxth	r3, r3
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b087      	sub	sp, #28
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cca:	01db      	lsls	r3, r3, #7
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f003 0301 	and.w	r3, r3, #1
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d30:	f023 0307 	bic.w	r3, r3, #7
 8008d34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	460b      	mov	r3, r1
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	333c      	adds	r3, #60	; 0x3c
 8008d6e:	3304      	adds	r3, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	4a26      	ldr	r2, [pc, #152]	; (8008e10 <USB_EP0_OutStart+0xb8>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d90a      	bls.n	8008d92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d8c:	d101      	bne.n	8008d92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e037      	b.n	8008e02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008db0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc0:	f043 0318 	orr.w	r3, r3, #24
 8008dc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008dd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d10f      	bne.n	8008e00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dfa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008dfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	4f54300a 	.word	0x4f54300a

08008e14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4a13      	ldr	r2, [pc, #76]	; (8008e78 <USB_CoreReset+0x64>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d901      	bls.n	8008e32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e01b      	b.n	8008e6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	daf2      	bge.n	8008e20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	f043 0201 	orr.w	r2, r3, #1
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4a09      	ldr	r2, [pc, #36]	; (8008e78 <USB_CoreReset+0x64>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d901      	bls.n	8008e5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e006      	b.n	8008e6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d0f0      	beq.n	8008e4a <USB_CoreReset+0x36>

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	00030d40 	.word	0x00030d40

08008e7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008e8c:	f002 fcd6 	bl	800b83c <USBD_static_malloc>
 8008e90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d109      	bne.n	8008eac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32b0      	adds	r2, #176	; 0xb0
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	e0d4      	b.n	8009056 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008eac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f002 fd2a 	bl	800b90c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	32b0      	adds	r2, #176	; 0xb0
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32b0      	adds	r2, #176	; 0xb0
 8008ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7c1b      	ldrb	r3, [r3, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d138      	bne.n	8008f56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008ee4:	4b5e      	ldr	r3, [pc, #376]	; (8009060 <USBD_CDC_Init+0x1e4>)
 8008ee6:	7819      	ldrb	r1, [r3, #0]
 8008ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eec:	2202      	movs	r2, #2
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f002 fb33 	bl	800b55a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ef4:	4b5a      	ldr	r3, [pc, #360]	; (8009060 <USBD_CDC_Init+0x1e4>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	f003 020f 	and.w	r2, r3, #15
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	3324      	adds	r3, #36	; 0x24
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f0e:	4b55      	ldr	r3, [pc, #340]	; (8009064 <USBD_CDC_Init+0x1e8>)
 8008f10:	7819      	ldrb	r1, [r3, #0]
 8008f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f16:	2202      	movs	r2, #2
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f002 fb1e 	bl	800b55a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f1e:	4b51      	ldr	r3, [pc, #324]	; (8009064 <USBD_CDC_Init+0x1e8>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f003 020f 	and.w	r2, r3, #15
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	440b      	add	r3, r1
 8008f32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f36:	2201      	movs	r2, #1
 8008f38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f3a:	4b4b      	ldr	r3, [pc, #300]	; (8009068 <USBD_CDC_Init+0x1ec>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	3326      	adds	r3, #38	; 0x26
 8008f50:	2210      	movs	r2, #16
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	e035      	b.n	8008fc2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f56:	4b42      	ldr	r3, [pc, #264]	; (8009060 <USBD_CDC_Init+0x1e4>)
 8008f58:	7819      	ldrb	r1, [r3, #0]
 8008f5a:	2340      	movs	r3, #64	; 0x40
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f002 fafb 	bl	800b55a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f64:	4b3e      	ldr	r3, [pc, #248]	; (8009060 <USBD_CDC_Init+0x1e4>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	f003 020f 	and.w	r2, r3, #15
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	3324      	adds	r3, #36	; 0x24
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f7e:	4b39      	ldr	r3, [pc, #228]	; (8009064 <USBD_CDC_Init+0x1e8>)
 8008f80:	7819      	ldrb	r1, [r3, #0]
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2202      	movs	r2, #2
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f002 fae7 	bl	800b55a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f8c:	4b35      	ldr	r3, [pc, #212]	; (8009064 <USBD_CDC_Init+0x1e8>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008fa8:	4b2f      	ldr	r3, [pc, #188]	; (8009068 <USBD_CDC_Init+0x1ec>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 020f 	and.w	r2, r3, #15
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	3326      	adds	r3, #38	; 0x26
 8008fbe:	2210      	movs	r2, #16
 8008fc0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008fc2:	4b29      	ldr	r3, [pc, #164]	; (8009068 <USBD_CDC_Init+0x1ec>)
 8008fc4:	7819      	ldrb	r1, [r3, #0]
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	2203      	movs	r2, #3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f002 fac5 	bl	800b55a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008fd0:	4b25      	ldr	r3, [pc, #148]	; (8009068 <USBD_CDC_Init+0x1ec>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 020f 	and.w	r2, r3, #15
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	3324      	adds	r3, #36	; 0x24
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	33b0      	adds	r3, #176	; 0xb0
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009020:	2302      	movs	r3, #2
 8009022:	e018      	b.n	8009056 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7c1b      	ldrb	r3, [r3, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10a      	bne.n	8009042 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800902c:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <USBD_CDC_Init+0x1e8>)
 800902e:	7819      	ldrb	r1, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f002 fb7c 	bl	800b738 <USBD_LL_PrepareReceive>
 8009040:	e008      	b.n	8009054 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009042:	4b08      	ldr	r3, [pc, #32]	; (8009064 <USBD_CDC_Init+0x1e8>)
 8009044:	7819      	ldrb	r1, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800904c:	2340      	movs	r3, #64	; 0x40
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f002 fb72 	bl	800b738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000097 	.word	0x20000097
 8009064:	20000098 	.word	0x20000098
 8009068:	20000099 	.word	0x20000099

0800906c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009078:	4b3a      	ldr	r3, [pc, #232]	; (8009164 <USBD_CDC_DeInit+0xf8>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f002 fa91 	bl	800b5a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009084:	4b37      	ldr	r3, [pc, #220]	; (8009164 <USBD_CDC_DeInit+0xf8>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 020f 	and.w	r2, r3, #15
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	3324      	adds	r3, #36	; 0x24
 800909a:	2200      	movs	r2, #0
 800909c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800909e:	4b32      	ldr	r3, [pc, #200]	; (8009168 <USBD_CDC_DeInit+0xfc>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f002 fa7e 	bl	800b5a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80090aa:	4b2f      	ldr	r3, [pc, #188]	; (8009168 <USBD_CDC_DeInit+0xfc>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	f003 020f 	and.w	r2, r3, #15
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	440b      	add	r3, r1
 80090be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090c2:	2200      	movs	r2, #0
 80090c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80090c6:	4b29      	ldr	r3, [pc, #164]	; (800916c <USBD_CDC_DeInit+0x100>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f002 fa6a 	bl	800b5a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80090d2:	4b26      	ldr	r3, [pc, #152]	; (800916c <USBD_CDC_DeInit+0x100>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	f003 020f 	and.w	r2, r3, #15
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	3324      	adds	r3, #36	; 0x24
 80090e8:	2200      	movs	r2, #0
 80090ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80090ec:	4b1f      	ldr	r3, [pc, #124]	; (800916c <USBD_CDC_DeInit+0x100>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	f003 020f 	and.w	r2, r3, #15
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	3326      	adds	r3, #38	; 0x26
 8009102:	2200      	movs	r2, #0
 8009104:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	32b0      	adds	r2, #176	; 0xb0
 8009110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01f      	beq.n	8009158 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	33b0      	adds	r3, #176	; 0xb0
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	32b0      	adds	r2, #176	; 0xb0
 8009136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913a:	4618      	mov	r0, r3
 800913c:	f002 fb8c 	bl	800b858 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	32b0      	adds	r2, #176	; 0xb0
 800914a:	2100      	movs	r1, #0
 800914c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20000097 	.word	0x20000097
 8009168:	20000098 	.word	0x20000098
 800916c:	20000099 	.word	0x20000099

08009170 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	32b0      	adds	r2, #176	; 0xb0
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	e0bf      	b.n	8009320 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d050      	beq.n	800924e <USBD_CDC_Setup+0xde>
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	f040 80af 	bne.w	8009310 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	88db      	ldrh	r3, [r3, #6]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d03a      	beq.n	8009230 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b25b      	sxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	da1b      	bge.n	80091fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	33b0      	adds	r3, #176	; 0xb0
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80091da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	88d2      	ldrh	r2, [r2, #6]
 80091e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	88db      	ldrh	r3, [r3, #6]
 80091e6:	2b07      	cmp	r3, #7
 80091e8:	bf28      	it	cs
 80091ea:	2307      	movcs	r3, #7
 80091ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	89fa      	ldrh	r2, [r7, #14]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fd6d 	bl	800acd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80091fa:	e090      	b.n	800931e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	785a      	ldrb	r2, [r3, #1]
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	88db      	ldrh	r3, [r3, #6]
 800920a:	2b3f      	cmp	r3, #63	; 0x3f
 800920c:	d803      	bhi.n	8009216 <USBD_CDC_Setup+0xa6>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	88db      	ldrh	r3, [r3, #6]
 8009212:	b2da      	uxtb	r2, r3
 8009214:	e000      	b.n	8009218 <USBD_CDC_Setup+0xa8>
 8009216:	2240      	movs	r2, #64	; 0x40
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800921e:	6939      	ldr	r1, [r7, #16]
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009226:	461a      	mov	r2, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 fd7f 	bl	800ad2c <USBD_CtlPrepareRx>
      break;
 800922e:	e076      	b.n	800931e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	33b0      	adds	r3, #176	; 0xb0
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	7850      	ldrb	r0, [r2, #1]
 8009246:	2200      	movs	r2, #0
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	4798      	blx	r3
      break;
 800924c:	e067      	b.n	800931e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	2b0b      	cmp	r3, #11
 8009254:	d851      	bhi.n	80092fa <USBD_CDC_Setup+0x18a>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <USBD_CDC_Setup+0xec>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	0800928d 	.word	0x0800928d
 8009260:	08009309 	.word	0x08009309
 8009264:	080092fb 	.word	0x080092fb
 8009268:	080092fb 	.word	0x080092fb
 800926c:	080092fb 	.word	0x080092fb
 8009270:	080092fb 	.word	0x080092fb
 8009274:	080092fb 	.word	0x080092fb
 8009278:	080092fb 	.word	0x080092fb
 800927c:	080092fb 	.word	0x080092fb
 8009280:	080092fb 	.word	0x080092fb
 8009284:	080092b7 	.word	0x080092b7
 8009288:	080092e1 	.word	0x080092e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b03      	cmp	r3, #3
 8009296:	d107      	bne.n	80092a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009298:	f107 030a 	add.w	r3, r7, #10
 800929c:	2202      	movs	r2, #2
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fd17 	bl	800acd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092a6:	e032      	b.n	800930e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fca1 	bl	800abf2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092b0:	2303      	movs	r3, #3
 80092b2:	75fb      	strb	r3, [r7, #23]
          break;
 80092b4:	e02b      	b.n	800930e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d107      	bne.n	80092d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092c2:	f107 030d 	add.w	r3, r7, #13
 80092c6:	2201      	movs	r2, #1
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 fd02 	bl	800acd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092d0:	e01d      	b.n	800930e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 fc8c 	bl	800abf2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	75fb      	strb	r3, [r7, #23]
          break;
 80092de:	e016      	b.n	800930e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d00f      	beq.n	800930c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 fc7f 	bl	800abf2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092f8:	e008      	b.n	800930c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fc78 	bl	800abf2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	75fb      	strb	r3, [r7, #23]
          break;
 8009306:	e002      	b.n	800930e <USBD_CDC_Setup+0x19e>
          break;
 8009308:	bf00      	nop
 800930a:	e008      	b.n	800931e <USBD_CDC_Setup+0x1ae>
          break;
 800930c:	bf00      	nop
      }
      break;
 800930e:	e006      	b.n	800931e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fc6d 	bl	800abf2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009318:	2303      	movs	r3, #3
 800931a:	75fb      	strb	r3, [r7, #23]
      break;
 800931c:	bf00      	nop
  }

  return (uint8_t)ret;
 800931e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800933a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32b0      	adds	r2, #176	; 0xb0
 8009346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800934e:	2303      	movs	r3, #3
 8009350:	e065      	b.n	800941e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	32b0      	adds	r2, #176	; 0xb0
 800935c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009360:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	f003 020f 	and.w	r2, r3, #15
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	3318      	adds	r3, #24
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d02f      	beq.n	80093dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	f003 020f 	and.w	r2, r3, #15
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	440b      	add	r3, r1
 800938e:	3318      	adds	r3, #24
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	f003 010f 	and.w	r1, r3, #15
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	460b      	mov	r3, r1
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	440b      	add	r3, r1
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4403      	add	r3, r0
 80093a4:	3348      	adds	r3, #72	; 0x48
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80093ac:	fb01 f303 	mul.w	r3, r1, r3
 80093b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d112      	bne.n	80093dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	f003 020f 	and.w	r2, r3, #15
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	440b      	add	r3, r1
 80093c8:	3318      	adds	r3, #24
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093ce:	78f9      	ldrb	r1, [r7, #3]
 80093d0:	2300      	movs	r3, #0
 80093d2:	2200      	movs	r2, #0
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f002 f98e 	bl	800b6f6 <USBD_LL_Transmit>
 80093da:	e01f      	b.n	800941c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	33b0      	adds	r3, #176	; 0xb0
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d010      	beq.n	800941c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	33b0      	adds	r3, #176	; 0xb0
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009418:	78fa      	ldrb	r2, [r7, #3]
 800941a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	32b0      	adds	r2, #176	; 0xb0
 800943c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009440:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	32b0      	adds	r2, #176	; 0xb0
 800944c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009454:	2303      	movs	r3, #3
 8009456:	e01a      	b.n	800948e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f002 f98c 	bl	800b77a <USBD_LL_GetRxDataSize>
 8009462:	4602      	mov	r2, r0
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	33b0      	adds	r3, #176	; 0xb0
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009488:	4611      	mov	r1, r2
 800948a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	32b0      	adds	r2, #176	; 0xb0
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e025      	b.n	8009504 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	33b0      	adds	r3, #176	; 0xb0
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01a      	beq.n	8009502 <USBD_CDC_EP0_RxReady+0x6c>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80094d2:	2bff      	cmp	r3, #255	; 0xff
 80094d4:	d015      	beq.n	8009502 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	33b0      	adds	r3, #176	; 0xb0
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80094ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80094f6:	b292      	uxth	r2, r2
 80094f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009514:	2182      	movs	r1, #130	; 0x82
 8009516:	4818      	ldr	r0, [pc, #96]	; (8009578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009518:	f000 fd09 	bl	8009f2e <USBD_GetEpDesc>
 800951c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800951e:	2101      	movs	r1, #1
 8009520:	4815      	ldr	r0, [pc, #84]	; (8009578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009522:	f000 fd04 	bl	8009f2e <USBD_GetEpDesc>
 8009526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009528:	2181      	movs	r1, #129	; 0x81
 800952a:	4813      	ldr	r0, [pc, #76]	; (8009578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800952c:	f000 fcff 	bl	8009f2e <USBD_GetEpDesc>
 8009530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2210      	movs	r2, #16
 800953c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d006      	beq.n	8009552 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	2200      	movs	r2, #0
 8009548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800954c:	711a      	strb	r2, [r3, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d006      	beq.n	8009566 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009560:	711a      	strb	r2, [r3, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2243      	movs	r2, #67	; 0x43
 800956a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800956c:	4b02      	ldr	r3, [pc, #8]	; (8009578 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000054 	.word	0x20000054

0800957c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009584:	2182      	movs	r1, #130	; 0x82
 8009586:	4818      	ldr	r0, [pc, #96]	; (80095e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009588:	f000 fcd1 	bl	8009f2e <USBD_GetEpDesc>
 800958c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800958e:	2101      	movs	r1, #1
 8009590:	4815      	ldr	r0, [pc, #84]	; (80095e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009592:	f000 fccc 	bl	8009f2e <USBD_GetEpDesc>
 8009596:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009598:	2181      	movs	r1, #129	; 0x81
 800959a:	4813      	ldr	r0, [pc, #76]	; (80095e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800959c:	f000 fcc7 	bl	8009f2e <USBD_GetEpDesc>
 80095a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2210      	movs	r2, #16
 80095ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d006      	beq.n	80095c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2200      	movs	r2, #0
 80095b8:	711a      	strb	r2, [r3, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f042 0202 	orr.w	r2, r2, #2
 80095c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d006      	beq.n	80095d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	711a      	strb	r2, [r3, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f042 0202 	orr.w	r2, r2, #2
 80095d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2243      	movs	r2, #67	; 0x43
 80095da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000054 	.word	0x20000054

080095ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095f4:	2182      	movs	r1, #130	; 0x82
 80095f6:	4818      	ldr	r0, [pc, #96]	; (8009658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80095f8:	f000 fc99 	bl	8009f2e <USBD_GetEpDesc>
 80095fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095fe:	2101      	movs	r1, #1
 8009600:	4815      	ldr	r0, [pc, #84]	; (8009658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009602:	f000 fc94 	bl	8009f2e <USBD_GetEpDesc>
 8009606:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009608:	2181      	movs	r1, #129	; 0x81
 800960a:	4813      	ldr	r0, [pc, #76]	; (8009658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800960c:	f000 fc8f 	bl	8009f2e <USBD_GetEpDesc>
 8009610:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2210      	movs	r2, #16
 800961c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d006      	beq.n	8009632 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2200      	movs	r2, #0
 8009628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800962c:	711a      	strb	r2, [r3, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d006      	beq.n	8009646 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009640:	711a      	strb	r2, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2243      	movs	r2, #67	; 0x43
 800964a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800964c:	4b02      	ldr	r3, [pc, #8]	; (8009658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000054 	.word	0x20000054

0800965c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	220a      	movs	r2, #10
 8009668:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800966a:	4b03      	ldr	r3, [pc, #12]	; (8009678 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	20000010 	.word	0x20000010

0800967c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800968c:	2303      	movs	r3, #3
 800968e:	e009      	b.n	80096a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	33b0      	adds	r3, #176	; 0xb0
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	32b0      	adds	r2, #176	; 0xb0
 80096c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e008      	b.n	80096e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	371c      	adds	r7, #28
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	32b0      	adds	r2, #176	; 0xb0
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e004      	b.n	8009722 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	32b0      	adds	r2, #176	; 0xb0
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	32b0      	adds	r2, #176	; 0xb0
 8009752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800975a:	2303      	movs	r3, #3
 800975c:	e018      	b.n	8009790 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	7c1b      	ldrb	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10a      	bne.n	800977c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009766:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <USBD_CDC_ReceivePacket+0x68>)
 8009768:	7819      	ldrb	r1, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 ffdf 	bl	800b738 <USBD_LL_PrepareReceive>
 800977a:	e008      	b.n	800978e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <USBD_CDC_ReceivePacket+0x68>)
 800977e:	7819      	ldrb	r1, [r3, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009786:	2340      	movs	r3, #64	; 0x40
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 ffd5 	bl	800b738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000098 	.word	0x20000098

0800979c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e01f      	b.n	80097f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	79fa      	ldrb	r2, [r7, #7]
 80097e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f001 fe4f 	bl	800b48c <USBD_LL_Init>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	e025      	b.n	8009860 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32ae      	adds	r2, #174	; 0xae
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00f      	beq.n	8009850 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	32ae      	adds	r2, #174	; 0xae
 800983a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	f107 020e 	add.w	r2, r7, #14
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
 8009848:	4602      	mov	r2, r0
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 fe57 	bl	800b524 <USBD_LL_Start>
 8009876:	4603      	mov	r3, r0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009888:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d009      	beq.n	80098c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	4611      	mov	r1, r2
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	4798      	blx	r3
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	4798      	blx	r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	4618      	mov	r0, r3
 8009916:	f001 f932 	bl	800ab7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009928:	461a      	mov	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009936:	f003 031f 	and.w	r3, r3, #31
 800993a:	2b02      	cmp	r3, #2
 800993c:	d01a      	beq.n	8009974 <USBD_LL_SetupStage+0x72>
 800993e:	2b02      	cmp	r3, #2
 8009940:	d822      	bhi.n	8009988 <USBD_LL_SetupStage+0x86>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <USBD_LL_SetupStage+0x4a>
 8009946:	2b01      	cmp	r3, #1
 8009948:	d00a      	beq.n	8009960 <USBD_LL_SetupStage+0x5e>
 800994a:	e01d      	b.n	8009988 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fb5f 	bl	800a018 <USBD_StdDevReq>
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]
      break;
 800995e:	e020      	b.n	80099a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fbc7 	bl	800a0fc <USBD_StdItfReq>
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
      break;
 8009972:	e016      	b.n	80099a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc29 	bl	800a1d4 <USBD_StdEPReq>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]
      break;
 8009986:	e00c      	b.n	80099a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800998e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009992:	b2db      	uxtb	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fe24 	bl	800b5e4 <USBD_LL_StallEP>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
      break;
 80099a0:	bf00      	nop
  }

  return ret;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	460b      	mov	r3, r1
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d16e      	bne.n	8009aa2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80099ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	f040 8098 	bne.w	8009b08 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	689a      	ldr	r2, [r3, #8]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d913      	bls.n	8009a0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	1ad2      	subs	r2, r2, r3
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	4293      	cmp	r3, r2
 80099fc:	bf28      	it	cs
 80099fe:	4613      	movcs	r3, r2
 8009a00:	461a      	mov	r2, r3
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f001 f9ae 	bl	800ad66 <USBD_CtlContinueRx>
 8009a0a:	e07d      	b.n	8009b08 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a12:	f003 031f 	and.w	r3, r3, #31
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d014      	beq.n	8009a44 <USBD_LL_DataOutStage+0x98>
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d81d      	bhi.n	8009a5a <USBD_LL_DataOutStage+0xae>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <USBD_LL_DataOutStage+0x7c>
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d003      	beq.n	8009a2e <USBD_LL_DataOutStage+0x82>
 8009a26:	e018      	b.n	8009a5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75bb      	strb	r3, [r7, #22]
            break;
 8009a2c:	e018      	b.n	8009a60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	4619      	mov	r1, r3
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 fa5e 	bl	8009efa <USBD_CoreFindIF>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	75bb      	strb	r3, [r7, #22]
            break;
 8009a42:	e00d      	b.n	8009a60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 fa60 	bl	8009f14 <USBD_CoreFindEP>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75bb      	strb	r3, [r7, #22]
            break;
 8009a58:	e002      	b.n	8009a60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75bb      	strb	r3, [r7, #22]
            break;
 8009a5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009a60:	7dbb      	ldrb	r3, [r7, #22]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d119      	bne.n	8009a9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d113      	bne.n	8009a9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009a72:	7dba      	ldrb	r2, [r7, #22]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	32ae      	adds	r2, #174	; 0xae
 8009a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009a82:	7dba      	ldrb	r2, [r7, #22]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009a8a:	7dba      	ldrb	r2, [r7, #22]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	32ae      	adds	r2, #174	; 0xae
 8009a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f001 f974 	bl	800ad88 <USBD_CtlSendStatus>
 8009aa0:	e032      	b.n	8009b08 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009aa2:	7afb      	ldrb	r3, [r7, #11]
 8009aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	4619      	mov	r1, r3
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 fa31 	bl	8009f14 <USBD_CoreFindEP>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ab6:	7dbb      	ldrb	r3, [r7, #22]
 8009ab8:	2bff      	cmp	r3, #255	; 0xff
 8009aba:	d025      	beq.n	8009b08 <USBD_LL_DataOutStage+0x15c>
 8009abc:	7dbb      	ldrb	r3, [r7, #22]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d122      	bne.n	8009b08 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d117      	bne.n	8009afe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009ace:	7dba      	ldrb	r2, [r7, #22]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	32ae      	adds	r2, #174	; 0xae
 8009ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00f      	beq.n	8009afe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009ade:	7dba      	ldrb	r2, [r7, #22]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009ae6:	7dba      	ldrb	r2, [r7, #22]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	32ae      	adds	r2, #174	; 0xae
 8009aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	7afa      	ldrb	r2, [r7, #11]
 8009af4:	4611      	mov	r1, r2
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	4798      	blx	r3
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	e000      	b.n	8009b0a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	607a      	str	r2, [r7, #4]
 8009b1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d16f      	bne.n	8009c06 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3314      	adds	r3, #20
 8009b2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d15a      	bne.n	8009bec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	689a      	ldr	r2, [r3, #8]
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d914      	bls.n	8009b6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	1ad2      	subs	r2, r2, r3
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	461a      	mov	r2, r3
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f001 f8d6 	bl	800ad0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2200      	movs	r2, #0
 8009b62:	2100      	movs	r1, #0
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f001 fde7 	bl	800b738 <USBD_LL_PrepareReceive>
 8009b6a:	e03f      	b.n	8009bec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d11c      	bne.n	8009bb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d316      	bcc.n	8009bb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d20f      	bcs.n	8009bb2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b92:	2200      	movs	r2, #0
 8009b94:	2100      	movs	r1, #0
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f001 f8b7 	bl	800ad0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2100      	movs	r1, #0
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f001 fdc4 	bl	800b738 <USBD_LL_PrepareReceive>
 8009bb0:	e01c      	b.n	8009bec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d10f      	bne.n	8009bde <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d009      	beq.n	8009bde <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bde:	2180      	movs	r1, #128	; 0x80
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f001 fcff 	bl	800b5e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f001 f8e1 	bl	800adae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d03a      	beq.n	8009c6c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff fe42 	bl	8009880 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c04:	e032      	b.n	8009c6c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	4619      	mov	r1, r3
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f97f 	bl	8009f14 <USBD_CoreFindEP>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2bff      	cmp	r3, #255	; 0xff
 8009c1e:	d025      	beq.n	8009c6c <USBD_LL_DataInStage+0x15a>
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d122      	bne.n	8009c6c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d11c      	bne.n	8009c6c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009c32:	7dfa      	ldrb	r2, [r7, #23]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	32ae      	adds	r2, #174	; 0xae
 8009c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d014      	beq.n	8009c6c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009c42:	7dfa      	ldrb	r2, [r7, #23]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009c4a:	7dfa      	ldrb	r2, [r7, #23]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	32ae      	adds	r2, #174	; 0xae
 8009c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	7afa      	ldrb	r2, [r7, #11]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	4798      	blx	r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009c62:	7dbb      	ldrb	r3, [r7, #22]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009c68:	7dbb      	ldrb	r3, [r7, #22]
 8009c6a:	e000      	b.n	8009c6e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d014      	beq.n	8009cdc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00e      	beq.n	8009cdc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	6852      	ldr	r2, [r2, #4]
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	4611      	mov	r1, r2
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4798      	blx	r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cdc:	2340      	movs	r3, #64	; 0x40
 8009cde:	2200      	movs	r2, #0
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 fc39 	bl	800b55a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2240      	movs	r2, #64	; 0x40
 8009cf4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2180      	movs	r1, #128	; 0x80
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 fc2b 	bl	800b55a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2240      	movs	r2, #64	; 0x40
 8009d0e:	621a      	str	r2, [r3, #32]

  return ret;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	78fa      	ldrb	r2, [r7, #3]
 8009d2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2204      	movs	r2, #4
 8009d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d106      	bne.n	8009d88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d110      	bne.n	8009dcc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00b      	beq.n	8009dcc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b082      	sub	sp, #8
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	460b      	mov	r3, r1
 8009de0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	32ae      	adds	r2, #174	; 0xae
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e01c      	b.n	8009e32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d115      	bne.n	8009e30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	32ae      	adds	r2, #174	; 0xae
 8009e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e12:	6a1b      	ldr	r3, [r3, #32]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	32ae      	adds	r2, #174	; 0xae
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	78fa      	ldrb	r2, [r7, #3]
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	32ae      	adds	r2, #174	; 0xae
 8009e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e01c      	b.n	8009e96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d115      	bne.n	8009e94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	32ae      	adds	r2, #174	; 0xae
 8009e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	32ae      	adds	r2, #174	; 0xae
 8009e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	78fa      	ldrb	r2, [r7, #3]
 8009e8e:	4611      	mov	r1, r2
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00e      	beq.n	8009ef0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	6852      	ldr	r2, [r2, #4]
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	4798      	blx	r3
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009eec:	2303      	movs	r3, #3
 8009eee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b086      	sub	sp, #24
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	885b      	ldrh	r3, [r3, #2]
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d920      	bls.n	8009f98 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009f5e:	e013      	b.n	8009f88 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009f60:	f107 030a 	add.w	r3, r7, #10
 8009f64:	4619      	mov	r1, r3
 8009f66:	6978      	ldr	r0, [r7, #20]
 8009f68:	f000 f81b 	bl	8009fa2 <USBD_GetNextDesc>
 8009f6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	d108      	bne.n	8009f88 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	789b      	ldrb	r3, [r3, #2]
 8009f7e:	78fa      	ldrb	r2, [r7, #3]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d008      	beq.n	8009f96 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	885b      	ldrh	r3, [r3, #2]
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	897b      	ldrh	r3, [r7, #10]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d8e5      	bhi.n	8009f60 <USBD_GetEpDesc+0x32>
 8009f94:	e000      	b.n	8009f98 <USBD_GetEpDesc+0x6a>
          break;
 8009f96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009f98:	693b      	ldr	r3, [r7, #16]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	881a      	ldrh	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	4413      	add	r3, r2
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4413      	add	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009fce:	68fb      	ldr	r3, [r7, #12]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ffa:	8a3b      	ldrh	r3, [r7, #16]
 8009ffc:	021b      	lsls	r3, r3, #8
 8009ffe:	b21a      	sxth	r2, r3
 800a000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a004:	4313      	orrs	r3, r2
 800a006:	b21b      	sxth	r3, r3
 800a008:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a00a:	89fb      	ldrh	r3, [r7, #14]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	371c      	adds	r7, #28
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a02e:	2b40      	cmp	r3, #64	; 0x40
 800a030:	d005      	beq.n	800a03e <USBD_StdDevReq+0x26>
 800a032:	2b40      	cmp	r3, #64	; 0x40
 800a034:	d857      	bhi.n	800a0e6 <USBD_StdDevReq+0xce>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00f      	beq.n	800a05a <USBD_StdDevReq+0x42>
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	d153      	bne.n	800a0e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	32ae      	adds	r2, #174	; 0xae
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	4798      	blx	r3
 800a054:	4603      	mov	r3, r0
 800a056:	73fb      	strb	r3, [r7, #15]
      break;
 800a058:	e04a      	b.n	800a0f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	785b      	ldrb	r3, [r3, #1]
 800a05e:	2b09      	cmp	r3, #9
 800a060:	d83b      	bhi.n	800a0da <USBD_StdDevReq+0xc2>
 800a062:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <USBD_StdDevReq+0x50>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a0bd 	.word	0x0800a0bd
 800a06c:	0800a0d1 	.word	0x0800a0d1
 800a070:	0800a0db 	.word	0x0800a0db
 800a074:	0800a0c7 	.word	0x0800a0c7
 800a078:	0800a0db 	.word	0x0800a0db
 800a07c:	0800a09b 	.word	0x0800a09b
 800a080:	0800a091 	.word	0x0800a091
 800a084:	0800a0db 	.word	0x0800a0db
 800a088:	0800a0b3 	.word	0x0800a0b3
 800a08c:	0800a0a5 	.word	0x0800a0a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa3c 	bl	800a510 <USBD_GetDescriptor>
          break;
 800a098:	e024      	b.n	800a0e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fbcb 	bl	800a838 <USBD_SetAddress>
          break;
 800a0a2:	e01f      	b.n	800a0e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fc0a 	bl	800a8c0 <USBD_SetConfig>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]
          break;
 800a0b0:	e018      	b.n	800a0e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fcad 	bl	800aa14 <USBD_GetConfig>
          break;
 800a0ba:	e013      	b.n	800a0e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fcde 	bl	800aa80 <USBD_GetStatus>
          break;
 800a0c4:	e00e      	b.n	800a0e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fd0d 	bl	800aae8 <USBD_SetFeature>
          break;
 800a0ce:	e009      	b.n	800a0e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fd31 	bl	800ab3a <USBD_ClrFeature>
          break;
 800a0d8:	e004      	b.n	800a0e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fd88 	bl	800abf2 <USBD_CtlError>
          break;
 800a0e2:	bf00      	nop
      }
      break;
 800a0e4:	e004      	b.n	800a0f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fd82 	bl	800abf2 <USBD_CtlError>
      break;
 800a0ee:	bf00      	nop
  }

  return ret;
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop

0800a0fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a112:	2b40      	cmp	r3, #64	; 0x40
 800a114:	d005      	beq.n	800a122 <USBD_StdItfReq+0x26>
 800a116:	2b40      	cmp	r3, #64	; 0x40
 800a118:	d852      	bhi.n	800a1c0 <USBD_StdItfReq+0xc4>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <USBD_StdItfReq+0x26>
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d14e      	bne.n	800a1c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	3b01      	subs	r3, #1
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d840      	bhi.n	800a1b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	889b      	ldrh	r3, [r3, #4]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b01      	cmp	r3, #1
 800a138:	d836      	bhi.n	800a1a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	889b      	ldrh	r3, [r3, #4]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff fed9 	bl	8009efa <USBD_CoreFindIF>
 800a148:	4603      	mov	r3, r0
 800a14a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	2bff      	cmp	r3, #255	; 0xff
 800a150:	d01d      	beq.n	800a18e <USBD_StdItfReq+0x92>
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11a      	bne.n	800a18e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a158:	7bba      	ldrb	r2, [r7, #14]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	32ae      	adds	r2, #174	; 0xae
 800a15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00f      	beq.n	800a188 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a168:	7bba      	ldrb	r2, [r7, #14]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a170:	7bba      	ldrb	r2, [r7, #14]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	32ae      	adds	r2, #174	; 0xae
 800a176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a186:	e004      	b.n	800a192 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a188:	2303      	movs	r3, #3
 800a18a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a18c:	e001      	b.n	800a192 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a18e:	2303      	movs	r3, #3
 800a190:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	88db      	ldrh	r3, [r3, #6]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d110      	bne.n	800a1bc <USBD_StdItfReq+0xc0>
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10d      	bne.n	800a1bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fdf1 	bl	800ad88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1a6:	e009      	b.n	800a1bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fd21 	bl	800abf2 <USBD_CtlError>
          break;
 800a1b0:	e004      	b.n	800a1bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fd1c 	bl	800abf2 <USBD_CtlError>
          break;
 800a1ba:	e000      	b.n	800a1be <USBD_StdItfReq+0xc2>
          break;
 800a1bc:	bf00      	nop
      }
      break;
 800a1be:	e004      	b.n	800a1ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fd15 	bl	800abf2 <USBD_CtlError>
      break;
 800a1c8:	bf00      	nop
  }

  return ret;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	889b      	ldrh	r3, [r3, #4]
 800a1e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d007      	beq.n	800a204 <USBD_StdEPReq+0x30>
 800a1f4:	2b40      	cmp	r3, #64	; 0x40
 800a1f6:	f200 817f 	bhi.w	800a4f8 <USBD_StdEPReq+0x324>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d02a      	beq.n	800a254 <USBD_StdEPReq+0x80>
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	f040 817a 	bne.w	800a4f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff fe83 	bl	8009f14 <USBD_CoreFindEP>
 800a20e:	4603      	mov	r3, r0
 800a210:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a212:	7b7b      	ldrb	r3, [r7, #13]
 800a214:	2bff      	cmp	r3, #255	; 0xff
 800a216:	f000 8174 	beq.w	800a502 <USBD_StdEPReq+0x32e>
 800a21a:	7b7b      	ldrb	r3, [r7, #13]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f040 8170 	bne.w	800a502 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a222:	7b7a      	ldrb	r2, [r7, #13]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a22a:	7b7a      	ldrb	r2, [r7, #13]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	32ae      	adds	r2, #174	; 0xae
 800a230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 8163 	beq.w	800a502 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a23c:	7b7a      	ldrb	r2, [r7, #13]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32ae      	adds	r2, #174	; 0xae
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a252:	e156      	b.n	800a502 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d008      	beq.n	800a26e <USBD_StdEPReq+0x9a>
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	f300 8145 	bgt.w	800a4ec <USBD_StdEPReq+0x318>
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 809b 	beq.w	800a39e <USBD_StdEPReq+0x1ca>
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d03c      	beq.n	800a2e6 <USBD_StdEPReq+0x112>
 800a26c:	e13e      	b.n	800a4ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d002      	beq.n	800a280 <USBD_StdEPReq+0xac>
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d016      	beq.n	800a2ac <USBD_StdEPReq+0xd8>
 800a27e:	e02c      	b.n	800a2da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <USBD_StdEPReq+0xce>
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b80      	cmp	r3, #128	; 0x80
 800a28a:	d00a      	beq.n	800a2a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a28c:	7bbb      	ldrb	r3, [r7, #14]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 f9a7 	bl	800b5e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a296:	2180      	movs	r1, #128	; 0x80
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 f9a3 	bl	800b5e4 <USBD_LL_StallEP>
 800a29e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2a0:	e020      	b.n	800a2e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fca4 	bl	800abf2 <USBD_CtlError>
              break;
 800a2aa:	e01b      	b.n	800a2e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	885b      	ldrh	r3, [r3, #2]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10e      	bne.n	800a2d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00b      	beq.n	800a2d2 <USBD_StdEPReq+0xfe>
 800a2ba:	7bbb      	ldrb	r3, [r7, #14]
 800a2bc:	2b80      	cmp	r3, #128	; 0x80
 800a2be:	d008      	beq.n	800a2d2 <USBD_StdEPReq+0xfe>
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	88db      	ldrh	r3, [r3, #6]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2c8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 f989 	bl	800b5e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fd58 	bl	800ad88 <USBD_CtlSendStatus>

              break;
 800a2d8:	e004      	b.n	800a2e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fc88 	bl	800abf2 <USBD_CtlError>
              break;
 800a2e2:	bf00      	nop
          }
          break;
 800a2e4:	e107      	b.n	800a4f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d002      	beq.n	800a2f8 <USBD_StdEPReq+0x124>
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d016      	beq.n	800a324 <USBD_StdEPReq+0x150>
 800a2f6:	e04b      	b.n	800a390 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <USBD_StdEPReq+0x146>
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	2b80      	cmp	r3, #128	; 0x80
 800a302:	d00a      	beq.n	800a31a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a304:	7bbb      	ldrb	r3, [r7, #14]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 f96b 	bl	800b5e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a30e:	2180      	movs	r1, #128	; 0x80
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 f967 	bl	800b5e4 <USBD_LL_StallEP>
 800a316:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a318:	e040      	b.n	800a39c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fc68 	bl	800abf2 <USBD_CtlError>
              break;
 800a322:	e03b      	b.n	800a39c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	885b      	ldrh	r3, [r3, #2]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d136      	bne.n	800a39a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a336:	7bbb      	ldrb	r3, [r7, #14]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 f971 	bl	800b622 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fd21 	bl	800ad88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff fde2 	bl	8009f14 <USBD_CoreFindEP>
 800a350:	4603      	mov	r3, r0
 800a352:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a354:	7b7b      	ldrb	r3, [r7, #13]
 800a356:	2bff      	cmp	r3, #255	; 0xff
 800a358:	d01f      	beq.n	800a39a <USBD_StdEPReq+0x1c6>
 800a35a:	7b7b      	ldrb	r3, [r7, #13]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d11c      	bne.n	800a39a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a360:	7b7a      	ldrb	r2, [r7, #13]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a368:	7b7a      	ldrb	r2, [r7, #13]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	32ae      	adds	r2, #174	; 0xae
 800a36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d010      	beq.n	800a39a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a378:	7b7a      	ldrb	r2, [r7, #13]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	32ae      	adds	r2, #174	; 0xae
 800a37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a38e:	e004      	b.n	800a39a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fc2d 	bl	800abf2 <USBD_CtlError>
              break;
 800a398:	e000      	b.n	800a39c <USBD_StdEPReq+0x1c8>
              break;
 800a39a:	bf00      	nop
          }
          break;
 800a39c:	e0ab      	b.n	800a4f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d002      	beq.n	800a3b0 <USBD_StdEPReq+0x1dc>
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d032      	beq.n	800a414 <USBD_StdEPReq+0x240>
 800a3ae:	e097      	b.n	800a4e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d007      	beq.n	800a3c6 <USBD_StdEPReq+0x1f2>
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	2b80      	cmp	r3, #128	; 0x80
 800a3ba:	d004      	beq.n	800a3c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fc17 	bl	800abf2 <USBD_CtlError>
                break;
 800a3c4:	e091      	b.n	800a4ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	da0b      	bge.n	800a3e6 <USBD_StdEPReq+0x212>
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	3310      	adds	r3, #16
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	e00b      	b.n	800a3fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2202      	movs	r2, #2
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fc61 	bl	800acd4 <USBD_CtlSendData>
              break;
 800a412:	e06a      	b.n	800a4ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	da11      	bge.n	800a440 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
 800a41e:	f003 020f 	and.w	r2, r3, #15
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	440b      	add	r3, r1
 800a42e:	3324      	adds	r3, #36	; 0x24
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d117      	bne.n	800a466 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fbda 	bl	800abf2 <USBD_CtlError>
                  break;
 800a43e:	e054      	b.n	800a4ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	f003 020f 	and.w	r2, r3, #15
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	440b      	add	r3, r1
 800a452:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fbc7 	bl	800abf2 <USBD_CtlError>
                  break;
 800a464:	e041      	b.n	800a4ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	da0b      	bge.n	800a486 <USBD_StdEPReq+0x2b2>
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a474:	4613      	mov	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	3310      	adds	r3, #16
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	4413      	add	r3, r2
 800a482:	3304      	adds	r3, #4
 800a484:	e00b      	b.n	800a49e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	4413      	add	r3, r2
 800a49c:	3304      	adds	r3, #4
 800a49e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <USBD_StdEPReq+0x2d8>
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	2b80      	cmp	r3, #128	; 0x80
 800a4aa:	d103      	bne.n	800a4b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e00e      	b.n	800a4d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 f8d1 	bl	800b660 <USBD_LL_IsStallEP>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	e002      	b.n	800a4d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fbfb 	bl	800acd4 <USBD_CtlSendData>
              break;
 800a4de:	e004      	b.n	800a4ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fb85 	bl	800abf2 <USBD_CtlError>
              break;
 800a4e8:	bf00      	nop
          }
          break;
 800a4ea:	e004      	b.n	800a4f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fb7f 	bl	800abf2 <USBD_CtlError>
          break;
 800a4f4:	bf00      	nop
      }
      break;
 800a4f6:	e005      	b.n	800a504 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fb79 	bl	800abf2 <USBD_CtlError>
      break;
 800a500:	e000      	b.n	800a504 <USBD_StdEPReq+0x330>
      break;
 800a502:	bf00      	nop
  }

  return ret;
 800a504:	7bfb      	ldrb	r3, [r7, #15]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
	...

0800a510 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	885b      	ldrh	r3, [r3, #2]
 800a52a:	0a1b      	lsrs	r3, r3, #8
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b01      	subs	r3, #1
 800a530:	2b0e      	cmp	r3, #14
 800a532:	f200 8152 	bhi.w	800a7da <USBD_GetDescriptor+0x2ca>
 800a536:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <USBD_GetDescriptor+0x2c>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a5ad 	.word	0x0800a5ad
 800a540:	0800a5c5 	.word	0x0800a5c5
 800a544:	0800a605 	.word	0x0800a605
 800a548:	0800a7db 	.word	0x0800a7db
 800a54c:	0800a7db 	.word	0x0800a7db
 800a550:	0800a77b 	.word	0x0800a77b
 800a554:	0800a7a7 	.word	0x0800a7a7
 800a558:	0800a7db 	.word	0x0800a7db
 800a55c:	0800a7db 	.word	0x0800a7db
 800a560:	0800a7db 	.word	0x0800a7db
 800a564:	0800a7db 	.word	0x0800a7db
 800a568:	0800a7db 	.word	0x0800a7db
 800a56c:	0800a7db 	.word	0x0800a7db
 800a570:	0800a7db 	.word	0x0800a7db
 800a574:	0800a579 	.word	0x0800a579
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00b      	beq.n	800a59c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	7c12      	ldrb	r2, [r2, #16]
 800a590:	f107 0108 	add.w	r1, r7, #8
 800a594:	4610      	mov	r0, r2
 800a596:	4798      	blx	r3
 800a598:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a59a:	e126      	b.n	800a7ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fb27 	bl	800abf2 <USBD_CtlError>
        err++;
 800a5a4:	7afb      	ldrb	r3, [r7, #11]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	72fb      	strb	r3, [r7, #11]
      break;
 800a5aa:	e11e      	b.n	800a7ea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7c12      	ldrb	r2, [r2, #16]
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	60f8      	str	r0, [r7, #12]
      break;
 800a5c2:	e112      	b.n	800a7ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7c1b      	ldrb	r3, [r3, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10d      	bne.n	800a5e8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	f107 0208 	add.w	r2, r7, #8
 800a5d8:	4610      	mov	r0, r2
 800a5da:	4798      	blx	r3
 800a5dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a5e6:	e100      	b.n	800a7ea <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	f107 0208 	add.w	r2, r7, #8
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	2202      	movs	r2, #2
 800a600:	701a      	strb	r2, [r3, #0]
      break;
 800a602:	e0f2      	b.n	800a7ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	885b      	ldrh	r3, [r3, #2]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	f200 80ac 	bhi.w	800a768 <USBD_GetDescriptor+0x258>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <USBD_GetDescriptor+0x108>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a631 	.word	0x0800a631
 800a61c:	0800a665 	.word	0x0800a665
 800a620:	0800a699 	.word	0x0800a699
 800a624:	0800a6cd 	.word	0x0800a6cd
 800a628:	0800a701 	.word	0x0800a701
 800a62c:	0800a735 	.word	0x0800a735
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00b      	beq.n	800a654 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	7c12      	ldrb	r2, [r2, #16]
 800a648:	f107 0108 	add.w	r1, r7, #8
 800a64c:	4610      	mov	r0, r2
 800a64e:	4798      	blx	r3
 800a650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a652:	e091      	b.n	800a778 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 facb 	bl	800abf2 <USBD_CtlError>
            err++;
 800a65c:	7afb      	ldrb	r3, [r7, #11]
 800a65e:	3301      	adds	r3, #1
 800a660:	72fb      	strb	r3, [r7, #11]
          break;
 800a662:	e089      	b.n	800a778 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00b      	beq.n	800a688 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	7c12      	ldrb	r2, [r2, #16]
 800a67c:	f107 0108 	add.w	r1, r7, #8
 800a680:	4610      	mov	r0, r2
 800a682:	4798      	blx	r3
 800a684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a686:	e077      	b.n	800a778 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fab1 	bl	800abf2 <USBD_CtlError>
            err++;
 800a690:	7afb      	ldrb	r3, [r7, #11]
 800a692:	3301      	adds	r3, #1
 800a694:	72fb      	strb	r3, [r7, #11]
          break;
 800a696:	e06f      	b.n	800a778 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00b      	beq.n	800a6bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	7c12      	ldrb	r2, [r2, #16]
 800a6b0:	f107 0108 	add.w	r1, r7, #8
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4798      	blx	r3
 800a6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ba:	e05d      	b.n	800a778 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fa97 	bl	800abf2 <USBD_CtlError>
            err++;
 800a6c4:	7afb      	ldrb	r3, [r7, #11]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6ca:	e055      	b.n	800a778 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00b      	beq.n	800a6f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	7c12      	ldrb	r2, [r2, #16]
 800a6e4:	f107 0108 	add.w	r1, r7, #8
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ee:	e043      	b.n	800a778 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fa7d 	bl	800abf2 <USBD_CtlError>
            err++;
 800a6f8:	7afb      	ldrb	r3, [r7, #11]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a6fe:	e03b      	b.n	800a778 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	7c12      	ldrb	r2, [r2, #16]
 800a718:	f107 0108 	add.w	r1, r7, #8
 800a71c:	4610      	mov	r0, r2
 800a71e:	4798      	blx	r3
 800a720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a722:	e029      	b.n	800a778 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fa63 	bl	800abf2 <USBD_CtlError>
            err++;
 800a72c:	7afb      	ldrb	r3, [r7, #11]
 800a72e:	3301      	adds	r3, #1
 800a730:	72fb      	strb	r3, [r7, #11]
          break;
 800a732:	e021      	b.n	800a778 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	7c12      	ldrb	r2, [r2, #16]
 800a74c:	f107 0108 	add.w	r1, r7, #8
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
 800a754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a756:	e00f      	b.n	800a778 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa49 	bl	800abf2 <USBD_CtlError>
            err++;
 800a760:	7afb      	ldrb	r3, [r7, #11]
 800a762:	3301      	adds	r3, #1
 800a764:	72fb      	strb	r3, [r7, #11]
          break;
 800a766:	e007      	b.n	800a778 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fa41 	bl	800abf2 <USBD_CtlError>
          err++;
 800a770:	7afb      	ldrb	r3, [r7, #11]
 800a772:	3301      	adds	r3, #1
 800a774:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a776:	bf00      	nop
      }
      break;
 800a778:	e037      	b.n	800a7ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	7c1b      	ldrb	r3, [r3, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d109      	bne.n	800a796 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	f107 0208 	add.w	r2, r7, #8
 800a78e:	4610      	mov	r0, r2
 800a790:	4798      	blx	r3
 800a792:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a794:	e029      	b.n	800a7ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fa2a 	bl	800abf2 <USBD_CtlError>
        err++;
 800a79e:	7afb      	ldrb	r3, [r7, #11]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a7a4:	e021      	b.n	800a7ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	7c1b      	ldrb	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10d      	bne.n	800a7ca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	f107 0208 	add.w	r2, r7, #8
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	4798      	blx	r3
 800a7be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	2207      	movs	r2, #7
 800a7c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7c8:	e00f      	b.n	800a7ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fa10 	bl	800abf2 <USBD_CtlError>
        err++;
 800a7d2:	7afb      	ldrb	r3, [r7, #11]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a7d8:	e007      	b.n	800a7ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fa08 	bl	800abf2 <USBD_CtlError>
      err++;
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a7e8:	bf00      	nop
  }

  if (err != 0U)
 800a7ea:	7afb      	ldrb	r3, [r7, #11]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d11e      	bne.n	800a82e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	88db      	ldrh	r3, [r3, #6]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d016      	beq.n	800a826 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a7f8:	893b      	ldrh	r3, [r7, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00e      	beq.n	800a81c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	88da      	ldrh	r2, [r3, #6]
 800a802:	893b      	ldrh	r3, [r7, #8]
 800a804:	4293      	cmp	r3, r2
 800a806:	bf28      	it	cs
 800a808:	4613      	movcs	r3, r2
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a80e:	893b      	ldrh	r3, [r7, #8]
 800a810:	461a      	mov	r2, r3
 800a812:	68f9      	ldr	r1, [r7, #12]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fa5d 	bl	800acd4 <USBD_CtlSendData>
 800a81a:	e009      	b.n	800a830 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f9e7 	bl	800abf2 <USBD_CtlError>
 800a824:	e004      	b.n	800a830 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 faae 	bl	800ad88 <USBD_CtlSendStatus>
 800a82c:	e000      	b.n	800a830 <USBD_GetDescriptor+0x320>
    return;
 800a82e:	bf00      	nop
  }
}
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop

0800a838 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	889b      	ldrh	r3, [r3, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d131      	bne.n	800a8ae <USBD_SetAddress+0x76>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	88db      	ldrh	r3, [r3, #6]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d12d      	bne.n	800a8ae <USBD_SetAddress+0x76>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	885b      	ldrh	r3, [r3, #2]
 800a856:	2b7f      	cmp	r3, #127	; 0x7f
 800a858:	d829      	bhi.n	800a8ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	885b      	ldrh	r3, [r3, #2]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a864:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d104      	bne.n	800a87c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f9bc 	bl	800abf2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87a:	e01d      	b.n	800a8b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7bfa      	ldrb	r2, [r7, #15]
 800a880:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 ff15 	bl	800b6b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fa7a 	bl	800ad88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d004      	beq.n	800a8a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2202      	movs	r2, #2
 800a89e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a2:	e009      	b.n	800a8b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ac:	e004      	b.n	800a8b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f99e 	bl	800abf2 <USBD_CtlError>
  }
}
 800a8b6:	bf00      	nop
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	4b4e      	ldr	r3, [pc, #312]	; (800aa10 <USBD_SetConfig+0x150>)
 800a8d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a8d8:	4b4d      	ldr	r3, [pc, #308]	; (800aa10 <USBD_SetConfig+0x150>)
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d905      	bls.n	800a8ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f985 	bl	800abf2 <USBD_CtlError>
    return USBD_FAIL;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e08c      	b.n	800aa06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d002      	beq.n	800a8fe <USBD_SetConfig+0x3e>
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d029      	beq.n	800a950 <USBD_SetConfig+0x90>
 800a8fc:	e075      	b.n	800a9ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a8fe:	4b44      	ldr	r3, [pc, #272]	; (800aa10 <USBD_SetConfig+0x150>)
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d020      	beq.n	800a948 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a906:	4b42      	ldr	r3, [pc, #264]	; (800aa10 <USBD_SetConfig+0x150>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a910:	4b3f      	ldr	r3, [pc, #252]	; (800aa10 <USBD_SetConfig+0x150>)
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7fe ffbd 	bl	8009896 <USBD_SetClassConfig>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d008      	beq.n	800a938 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f962 	bl	800abf2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2202      	movs	r2, #2
 800a932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a936:	e065      	b.n	800aa04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fa25 	bl	800ad88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2203      	movs	r2, #3
 800a942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a946:	e05d      	b.n	800aa04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fa1d 	bl	800ad88 <USBD_CtlSendStatus>
      break;
 800a94e:	e059      	b.n	800aa04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a950:	4b2f      	ldr	r3, [pc, #188]	; (800aa10 <USBD_SetConfig+0x150>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d112      	bne.n	800a97e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a960:	4b2b      	ldr	r3, [pc, #172]	; (800aa10 <USBD_SetConfig+0x150>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	461a      	mov	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a96a:	4b29      	ldr	r3, [pc, #164]	; (800aa10 <USBD_SetConfig+0x150>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7fe ffac 	bl	80098ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa06 	bl	800ad88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a97c:	e042      	b.n	800aa04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a97e:	4b24      	ldr	r3, [pc, #144]	; (800aa10 <USBD_SetConfig+0x150>)
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d02a      	beq.n	800a9e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	b2db      	uxtb	r3, r3
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7fe ff9a 	bl	80098ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a99a:	4b1d      	ldr	r3, [pc, #116]	; (800aa10 <USBD_SetConfig+0x150>)
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9a4:	4b1a      	ldr	r3, [pc, #104]	; (800aa10 <USBD_SetConfig+0x150>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7fe ff73 	bl	8009896 <USBD_SetClassConfig>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00f      	beq.n	800a9da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f918 	bl	800abf2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7fe ff7f 	bl	80098ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a9d8:	e014      	b.n	800aa04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f9d4 	bl	800ad88 <USBD_CtlSendStatus>
      break;
 800a9e0:	e010      	b.n	800aa04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f9d0 	bl	800ad88 <USBD_CtlSendStatus>
      break;
 800a9e8:	e00c      	b.n	800aa04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f900 	bl	800abf2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9f2:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <USBD_SetConfig+0x150>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7fe ff68 	bl	80098ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	73fb      	strb	r3, [r7, #15]
      break;
 800aa02:	bf00      	nop
  }

  return ret;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20008a34 	.word	0x20008a34

0800aa14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	88db      	ldrh	r3, [r3, #6]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d004      	beq.n	800aa30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f8e2 	bl	800abf2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa2e:	e023      	b.n	800aa78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	dc02      	bgt.n	800aa42 <USBD_GetConfig+0x2e>
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	dc03      	bgt.n	800aa48 <USBD_GetConfig+0x34>
 800aa40:	e015      	b.n	800aa6e <USBD_GetConfig+0x5a>
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d00b      	beq.n	800aa5e <USBD_GetConfig+0x4a>
 800aa46:	e012      	b.n	800aa6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3308      	adds	r3, #8
 800aa52:	2201      	movs	r2, #1
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f93c 	bl	800acd4 <USBD_CtlSendData>
        break;
 800aa5c:	e00c      	b.n	800aa78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	3304      	adds	r3, #4
 800aa62:	2201      	movs	r2, #1
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f934 	bl	800acd4 <USBD_CtlSendData>
        break;
 800aa6c:	e004      	b.n	800aa78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 f8be 	bl	800abf2 <USBD_CtlError>
        break;
 800aa76:	bf00      	nop
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	3b01      	subs	r3, #1
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d81e      	bhi.n	800aad6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	88db      	ldrh	r3, [r3, #6]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d004      	beq.n	800aaaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8a5 	bl	800abf2 <USBD_CtlError>
        break;
 800aaa8:	e01a      	b.n	800aae0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d005      	beq.n	800aac6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	f043 0202 	orr.w	r2, r3, #2
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	330c      	adds	r3, #12
 800aaca:	2202      	movs	r2, #2
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f900 	bl	800acd4 <USBD_CtlSendData>
      break;
 800aad4:	e004      	b.n	800aae0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f88a 	bl	800abf2 <USBD_CtlError>
      break;
 800aade:	bf00      	nop
  }
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	885b      	ldrh	r3, [r3, #2]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d107      	bne.n	800ab0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f940 	bl	800ad88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ab08:	e013      	b.n	800ab32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	885b      	ldrh	r3, [r3, #2]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d10b      	bne.n	800ab2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	889b      	ldrh	r3, [r3, #4]
 800ab16:	0a1b      	lsrs	r3, r3, #8
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f930 	bl	800ad88 <USBD_CtlSendStatus>
}
 800ab28:	e003      	b.n	800ab32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f860 	bl	800abf2 <USBD_CtlError>
}
 800ab32:	bf00      	nop
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d80b      	bhi.n	800ab6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	885b      	ldrh	r3, [r3, #2]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d10c      	bne.n	800ab74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f910 	bl	800ad88 <USBD_CtlSendStatus>
      }
      break;
 800ab68:	e004      	b.n	800ab74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f840 	bl	800abf2 <USBD_CtlError>
      break;
 800ab72:	e000      	b.n	800ab76 <USBD_ClrFeature+0x3c>
      break;
 800ab74:	bf00      	nop
  }
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	781a      	ldrb	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3301      	adds	r3, #1
 800ab98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	781a      	ldrb	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f7ff fa17 	bl	8009fdc <SWAPBYTE>
 800abae:	4603      	mov	r3, r0
 800abb0:	461a      	mov	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3301      	adds	r3, #1
 800abc0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff fa0a 	bl	8009fdc <SWAPBYTE>
 800abc8:	4603      	mov	r3, r0
 800abca:	461a      	mov	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3301      	adds	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3301      	adds	r3, #1
 800abda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff f9fd 	bl	8009fdc <SWAPBYTE>
 800abe2:	4603      	mov	r3, r0
 800abe4:	461a      	mov	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	80da      	strh	r2, [r3, #6]
}
 800abea:	bf00      	nop
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800abfc:	2180      	movs	r1, #128	; 0x80
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fcf0 	bl	800b5e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac04:	2100      	movs	r1, #0
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fcec 	bl	800b5e4 <USBD_LL_StallEP>
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d036      	beq.n	800ac98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac2e:	6938      	ldr	r0, [r7, #16]
 800ac30:	f000 f836 	bl	800aca0 <USBD_GetLen>
 800ac34:	4603      	mov	r3, r0
 800ac36:	3301      	adds	r3, #1
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	4413      	add	r3, r2
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	3301      	adds	r3, #1
 800ac52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	4413      	add	r3, r2
 800ac5a:	2203      	movs	r2, #3
 800ac5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	3301      	adds	r3, #1
 800ac62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac64:	e013      	b.n	800ac8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	7812      	ldrb	r2, [r2, #0]
 800ac70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3301      	adds	r3, #1
 800ac76:	613b      	str	r3, [r7, #16]
    idx++;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	4413      	add	r3, r2
 800ac84:	2200      	movs	r2, #0
 800ac86:	701a      	strb	r2, [r3, #0]
    idx++;
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e7      	bne.n	800ac66 <USBD_GetString+0x52>
 800ac96:	e000      	b.n	800ac9a <USBD_GetString+0x86>
    return;
 800ac98:	bf00      	nop
  }
}
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800acb0:	e005      	b.n	800acbe <USBD_GetLen+0x1e>
  {
    len++;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	3301      	adds	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	3301      	adds	r3, #1
 800acbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1f5      	bne.n	800acb2 <USBD_GetLen+0x12>
  }

  return len;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	2100      	movs	r1, #0
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 fcfb 	bl	800b6f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fcea 	bl	800b6f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	2100      	movs	r1, #0
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fcee 	bl	800b738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	2100      	movs	r1, #0
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 fcdd 	bl	800b738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2204      	movs	r2, #4
 800ad94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fca9 	bl	800b6f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2205      	movs	r2, #5
 800adba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adbe:	2300      	movs	r3, #0
 800adc0:	2200      	movs	r2, #0
 800adc2:	2100      	movs	r1, #0
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fcb7 	bl	800b738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800add8:	2200      	movs	r2, #0
 800adda:	4912      	ldr	r1, [pc, #72]	; (800ae24 <MX_USB_DEVICE_Init+0x50>)
 800addc:	4812      	ldr	r0, [pc, #72]	; (800ae28 <MX_USB_DEVICE_Init+0x54>)
 800adde:	f7fe fcdd 	bl	800979c <USBD_Init>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ade8:	f7f7 fcfe 	bl	80027e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800adec:	490f      	ldr	r1, [pc, #60]	; (800ae2c <MX_USB_DEVICE_Init+0x58>)
 800adee:	480e      	ldr	r0, [pc, #56]	; (800ae28 <MX_USB_DEVICE_Init+0x54>)
 800adf0:	f7fe fd04 	bl	80097fc <USBD_RegisterClass>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800adfa:	f7f7 fcf5 	bl	80027e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800adfe:	490c      	ldr	r1, [pc, #48]	; (800ae30 <MX_USB_DEVICE_Init+0x5c>)
 800ae00:	4809      	ldr	r0, [pc, #36]	; (800ae28 <MX_USB_DEVICE_Init+0x54>)
 800ae02:	f7fe fc3b 	bl	800967c <USBD_CDC_RegisterInterface>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae0c:	f7f7 fcec 	bl	80027e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae10:	4805      	ldr	r0, [pc, #20]	; (800ae28 <MX_USB_DEVICE_Init+0x54>)
 800ae12:	f7fe fd29 	bl	8009868 <USBD_Start>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae1c:	f7f7 fce4 	bl	80027e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae20:	bf00      	nop
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	200000b0 	.word	0x200000b0
 800ae28:	20008a38 	.word	0x20008a38
 800ae2c:	2000001c 	.word	0x2000001c
 800ae30:	2000009c 	.word	0x2000009c

0800ae34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae38:	2200      	movs	r2, #0
 800ae3a:	4905      	ldr	r1, [pc, #20]	; (800ae50 <CDC_Init_FS+0x1c>)
 800ae3c:	4805      	ldr	r0, [pc, #20]	; (800ae54 <CDC_Init_FS+0x20>)
 800ae3e:	f7fe fc37 	bl	80096b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae42:	4905      	ldr	r1, [pc, #20]	; (800ae58 <CDC_Init_FS+0x24>)
 800ae44:	4803      	ldr	r0, [pc, #12]	; (800ae54 <CDC_Init_FS+0x20>)
 800ae46:	f7fe fc55 	bl	80096f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20009514 	.word	0x20009514
 800ae54:	20008a38 	.word	0x20008a38
 800ae58:	20008d14 	.word	0x20008d14

0800ae5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	2b23      	cmp	r3, #35	; 0x23
 800ae80:	d84a      	bhi.n	800af18 <CDC_Control_FS+0xac>
 800ae82:	a201      	add	r2, pc, #4	; (adr r2, 800ae88 <CDC_Control_FS+0x1c>)
 800ae84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae88:	0800af19 	.word	0x0800af19
 800ae8c:	0800af19 	.word	0x0800af19
 800ae90:	0800af19 	.word	0x0800af19
 800ae94:	0800af19 	.word	0x0800af19
 800ae98:	0800af19 	.word	0x0800af19
 800ae9c:	0800af19 	.word	0x0800af19
 800aea0:	0800af19 	.word	0x0800af19
 800aea4:	0800af19 	.word	0x0800af19
 800aea8:	0800af19 	.word	0x0800af19
 800aeac:	0800af19 	.word	0x0800af19
 800aeb0:	0800af19 	.word	0x0800af19
 800aeb4:	0800af19 	.word	0x0800af19
 800aeb8:	0800af19 	.word	0x0800af19
 800aebc:	0800af19 	.word	0x0800af19
 800aec0:	0800af19 	.word	0x0800af19
 800aec4:	0800af19 	.word	0x0800af19
 800aec8:	0800af19 	.word	0x0800af19
 800aecc:	0800af19 	.word	0x0800af19
 800aed0:	0800af19 	.word	0x0800af19
 800aed4:	0800af19 	.word	0x0800af19
 800aed8:	0800af19 	.word	0x0800af19
 800aedc:	0800af19 	.word	0x0800af19
 800aee0:	0800af19 	.word	0x0800af19
 800aee4:	0800af19 	.word	0x0800af19
 800aee8:	0800af19 	.word	0x0800af19
 800aeec:	0800af19 	.word	0x0800af19
 800aef0:	0800af19 	.word	0x0800af19
 800aef4:	0800af19 	.word	0x0800af19
 800aef8:	0800af19 	.word	0x0800af19
 800aefc:	0800af19 	.word	0x0800af19
 800af00:	0800af19 	.word	0x0800af19
 800af04:	0800af19 	.word	0x0800af19
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af19 	.word	0x0800af19
 800af10:	0800af19 	.word	0x0800af19
 800af14:	0800af19 	.word	0x0800af19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af18:	bf00      	nop
  }

  return (USBD_OK);
 800af1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	4805      	ldr	r0, [pc, #20]	; (800af4c <CDC_Receive_FS+0x24>)
 800af36:	f7fe fbdd 	bl	80096f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af3a:	4804      	ldr	r0, [pc, #16]	; (800af4c <CDC_Receive_FS+0x24>)
 800af3c:	f7fe fbf8 	bl	8009730 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800af40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20008a38 	.word	0x20008a38

0800af50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af66:	4618      	mov	r0, r3
 800af68:	371c      	adds	r7, #28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
	...

0800af74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	6039      	str	r1, [r7, #0]
 800af7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2212      	movs	r2, #18
 800af84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af86:	4b03      	ldr	r3, [pc, #12]	; (800af94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	200000d0 	.word	0x200000d0

0800af98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	6039      	str	r1, [r7, #0]
 800afa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2204      	movs	r2, #4
 800afa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800afaa:	4b03      	ldr	r3, [pc, #12]	; (800afb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	200000f0 	.word	0x200000f0

0800afbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	6039      	str	r1, [r7, #0]
 800afc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d105      	bne.n	800afda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	4907      	ldr	r1, [pc, #28]	; (800aff0 <USBD_FS_ProductStrDescriptor+0x34>)
 800afd2:	4808      	ldr	r0, [pc, #32]	; (800aff4 <USBD_FS_ProductStrDescriptor+0x38>)
 800afd4:	f7ff fe1e 	bl	800ac14 <USBD_GetString>
 800afd8:	e004      	b.n	800afe4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	4904      	ldr	r1, [pc, #16]	; (800aff0 <USBD_FS_ProductStrDescriptor+0x34>)
 800afde:	4805      	ldr	r0, [pc, #20]	; (800aff4 <USBD_FS_ProductStrDescriptor+0x38>)
 800afe0:	f7ff fe18 	bl	800ac14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20009d14 	.word	0x20009d14
 800aff4:	0800c9d0 	.word	0x0800c9d0

0800aff8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	4904      	ldr	r1, [pc, #16]	; (800b018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b008:	4804      	ldr	r0, [pc, #16]	; (800b01c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b00a:	f7ff fe03 	bl	800ac14 <USBD_GetString>
  return USBD_StrDesc;
 800b00e:	4b02      	ldr	r3, [pc, #8]	; (800b018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20009d14 	.word	0x20009d14
 800b01c:	0800c9e0 	.word	0x0800c9e0

0800b020 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	6039      	str	r1, [r7, #0]
 800b02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	221a      	movs	r2, #26
 800b030:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b032:	f000 f855 	bl	800b0e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b036:	4b02      	ldr	r3, [pc, #8]	; (800b040 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	200000f4 	.word	0x200000f4

0800b044 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	6039      	str	r1, [r7, #0]
 800b04e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d105      	bne.n	800b062 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	4907      	ldr	r1, [pc, #28]	; (800b078 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b05a:	4808      	ldr	r0, [pc, #32]	; (800b07c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b05c:	f7ff fdda 	bl	800ac14 <USBD_GetString>
 800b060:	e004      	b.n	800b06c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	4904      	ldr	r1, [pc, #16]	; (800b078 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b066:	4805      	ldr	r0, [pc, #20]	; (800b07c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b068:	f7ff fdd4 	bl	800ac14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b06c:	4b02      	ldr	r3, [pc, #8]	; (800b078 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20009d14 	.word	0x20009d14
 800b07c:	0800c9f4 	.word	0x0800c9f4

0800b080 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	6039      	str	r1, [r7, #0]
 800b08a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b08c:	79fb      	ldrb	r3, [r7, #7]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d105      	bne.n	800b09e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4907      	ldr	r1, [pc, #28]	; (800b0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b096:	4808      	ldr	r0, [pc, #32]	; (800b0b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b098:	f7ff fdbc 	bl	800ac14 <USBD_GetString>
 800b09c:	e004      	b.n	800b0a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	4904      	ldr	r1, [pc, #16]	; (800b0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0a2:	4805      	ldr	r0, [pc, #20]	; (800b0b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0a4:	f7ff fdb6 	bl	800ac14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0a8:	4b02      	ldr	r3, [pc, #8]	; (800b0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20009d14 	.word	0x20009d14
 800b0b8:	0800ca00 	.word	0x0800ca00

0800b0bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	6039      	str	r1, [r7, #0]
 800b0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	220c      	movs	r2, #12
 800b0cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b0ce:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	200000e4 	.word	0x200000e4

0800b0e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <Get_SerialNum+0x44>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0ec:	4b0e      	ldr	r3, [pc, #56]	; (800b128 <Get_SerialNum+0x48>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <Get_SerialNum+0x4c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b106:	2208      	movs	r2, #8
 800b108:	4909      	ldr	r1, [pc, #36]	; (800b130 <Get_SerialNum+0x50>)
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 f814 	bl	800b138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b110:	2204      	movs	r2, #4
 800b112:	4908      	ldr	r1, [pc, #32]	; (800b134 <Get_SerialNum+0x54>)
 800b114:	68b8      	ldr	r0, [r7, #8]
 800b116:	f000 f80f 	bl	800b138 <IntToUnicode>
  }
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	1fff7a10 	.word	0x1fff7a10
 800b128:	1fff7a14 	.word	0x1fff7a14
 800b12c:	1fff7a18 	.word	0x1fff7a18
 800b130:	200000f6 	.word	0x200000f6
 800b134:	20000106 	.word	0x20000106

0800b138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b138:	b480      	push	{r7}
 800b13a:	b087      	sub	sp, #28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	4613      	mov	r3, r2
 800b144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b14a:	2300      	movs	r3, #0
 800b14c:	75fb      	strb	r3, [r7, #23]
 800b14e:	e027      	b.n	800b1a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	0f1b      	lsrs	r3, r3, #28
 800b154:	2b09      	cmp	r3, #9
 800b156:	d80b      	bhi.n	800b170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	0f1b      	lsrs	r3, r3, #28
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	005b      	lsls	r3, r3, #1
 800b162:	4619      	mov	r1, r3
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	440b      	add	r3, r1
 800b168:	3230      	adds	r2, #48	; 0x30
 800b16a:	b2d2      	uxtb	r2, r2
 800b16c:	701a      	strb	r2, [r3, #0]
 800b16e:	e00a      	b.n	800b186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	0f1b      	lsrs	r3, r3, #28
 800b174:	b2da      	uxtb	r2, r3
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	005b      	lsls	r3, r3, #1
 800b17a:	4619      	mov	r1, r3
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	440b      	add	r3, r1
 800b180:	3237      	adds	r2, #55	; 0x37
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	011b      	lsls	r3, r3, #4
 800b18a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	3301      	adds	r3, #1
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	4413      	add	r3, r2
 800b196:	2200      	movs	r2, #0
 800b198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	3301      	adds	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]
 800b1a0:	7dfa      	ldrb	r2, [r7, #23]
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d3d3      	bcc.n	800b150 <IntToUnicode+0x18>
  }
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
	...

0800b1b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b0a0      	sub	sp, #128	; 0x80
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	605a      	str	r2, [r3, #4]
 800b1ca:	609a      	str	r2, [r3, #8]
 800b1cc:	60da      	str	r2, [r3, #12]
 800b1ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b1d0:	f107 0310 	add.w	r3, r7, #16
 800b1d4:	225c      	movs	r2, #92	; 0x5c
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fb97 	bl	800b90c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1e6:	d156      	bne.n	800b296 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b1e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b1f2:	f107 0310 	add.w	r3, r7, #16
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7f9 fe6a 	bl	8004ed0 <HAL_RCCEx_PeriphCLKConfig>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b202:	f7f7 faf1 	bl	80027e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b206:	2300      	movs	r3, #0
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	4b25      	ldr	r3, [pc, #148]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20e:	4a24      	ldr	r2, [pc, #144]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b210:	f043 0301 	orr.w	r3, r3, #1
 800b214:	6313      	str	r3, [r2, #48]	; 0x30
 800b216:	4b22      	ldr	r3, [pc, #136]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b222:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b226:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b228:	2300      	movs	r3, #0
 800b22a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b22c:	2300      	movs	r3, #0
 800b22e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b230:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b234:	4619      	mov	r1, r3
 800b236:	481b      	ldr	r0, [pc, #108]	; (800b2a4 <HAL_PCD_MspInit+0xec>)
 800b238:	f7f7 febc 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b23c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b240:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b242:	2302      	movs	r3, #2
 800b244:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b246:	2300      	movs	r3, #0
 800b248:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b24a:	2303      	movs	r3, #3
 800b24c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b24e:	230a      	movs	r3, #10
 800b250:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b252:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b256:	4619      	mov	r1, r3
 800b258:	4812      	ldr	r0, [pc, #72]	; (800b2a4 <HAL_PCD_MspInit+0xec>)
 800b25a:	f7f7 feab 	bl	8002fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b25e:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b262:	4a0f      	ldr	r2, [pc, #60]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b268:	6353      	str	r3, [r2, #52]	; 0x34
 800b26a:	2300      	movs	r3, #0
 800b26c:	60bb      	str	r3, [r7, #8]
 800b26e:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b272:	4a0b      	ldr	r2, [pc, #44]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b278:	6453      	str	r3, [r2, #68]	; 0x44
 800b27a:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <HAL_PCD_MspInit+0xe8>)
 800b27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b27e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b282:	60bb      	str	r3, [r7, #8]
 800b284:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b286:	2200      	movs	r2, #0
 800b288:	2100      	movs	r1, #0
 800b28a:	2043      	movs	r0, #67	; 0x43
 800b28c:	f7f7 fe5b 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b290:	2043      	movs	r0, #67	; 0x43
 800b292:	f7f7 fe74 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b296:	bf00      	nop
 800b298:	3780      	adds	r7, #128	; 0x80
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	40023800 	.word	0x40023800
 800b2a4:	40020000 	.word	0x40020000

0800b2a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b2bc:	4619      	mov	r1, r3
 800b2be:	4610      	mov	r0, r2
 800b2c0:	f7fe fb1f 	bl	8009902 <USBD_LL_SetupStage>
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b2de:	78fa      	ldrb	r2, [r7, #3]
 800b2e0:	6879      	ldr	r1, [r7, #4]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	00db      	lsls	r3, r3, #3
 800b2e6:	4413      	add	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	440b      	add	r3, r1
 800b2ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	78fb      	ldrb	r3, [r7, #3]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	f7fe fb59 	bl	80099ac <USBD_LL_DataOutStage>
}
 800b2fa:	bf00      	nop
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b314:	78fa      	ldrb	r2, [r7, #3]
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	4613      	mov	r3, r2
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	440b      	add	r3, r1
 800b322:	334c      	adds	r3, #76	; 0x4c
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	78fb      	ldrb	r3, [r7, #3]
 800b328:	4619      	mov	r1, r3
 800b32a:	f7fe fbf2 	bl	8009b12 <USBD_LL_DataInStage>
}
 800b32e:	bf00      	nop
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b082      	sub	sp, #8
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b344:	4618      	mov	r0, r3
 800b346:	f7fe fd26 	bl	8009d96 <USBD_LL_SOF>
}
 800b34a:	bf00      	nop
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b084      	sub	sp, #16
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b35a:	2301      	movs	r3, #1
 800b35c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
 800b36a:	e008      	b.n	800b37e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d102      	bne.n	800b37a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b374:	2301      	movs	r3, #1
 800b376:	73fb      	strb	r3, [r7, #15]
 800b378:	e001      	b.n	800b37e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b37a:	f7f7 fa35 	bl	80027e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b384:	7bfa      	ldrb	r2, [r7, #15]
 800b386:	4611      	mov	r1, r2
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fcc6 	bl	8009d1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b394:	4618      	mov	r0, r3
 800b396:	f7fe fc6e 	bl	8009c76 <USBD_LL_Reset>
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe fcc1 	bl	8009d3a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	6812      	ldr	r2, [r2, #0]
 800b3c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3ca:	f043 0301 	orr.w	r3, r3, #1
 800b3ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d005      	beq.n	800b3e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <HAL_PCD_SuspendCallback+0x48>)
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	4a03      	ldr	r2, [pc, #12]	; (800b3ec <HAL_PCD_SuspendCallback+0x48>)
 800b3de:	f043 0306 	orr.w	r3, r3, #6
 800b3e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	e000ed00 	.word	0xe000ed00

0800b3f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe fcb1 	bl	8009d66 <USBD_LL_Resume>
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b41e:	78fa      	ldrb	r2, [r7, #3]
 800b420:	4611      	mov	r1, r2
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fd09 	bl	8009e3a <USBD_LL_IsoOUTIncomplete>
}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b442:	78fa      	ldrb	r2, [r7, #3]
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f7fe fcc5 	bl	8009dd6 <USBD_LL_IsoINIncomplete>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fd1b 	bl	8009e9e <USBD_LL_DevConnected>
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fd18 	bl	8009eb4 <USBD_LL_DevDisconnected>
}
 800b484:	bf00      	nop
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d13c      	bne.n	800b516 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b49c:	4a20      	ldr	r2, [pc, #128]	; (800b520 <USBD_LL_Init+0x94>)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a1e      	ldr	r2, [pc, #120]	; (800b520 <USBD_LL_Init+0x94>)
 800b4a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	; (800b520 <USBD_LL_Init+0x94>)
 800b4ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b4b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b4b4:	4b1a      	ldr	r3, [pc, #104]	; (800b520 <USBD_LL_Init+0x94>)
 800b4b6:	2206      	movs	r2, #6
 800b4b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b4ba:	4b19      	ldr	r3, [pc, #100]	; (800b520 <USBD_LL_Init+0x94>)
 800b4bc:	2202      	movs	r2, #2
 800b4be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4c0:	4b17      	ldr	r3, [pc, #92]	; (800b520 <USBD_LL_Init+0x94>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4c6:	4b16      	ldr	r3, [pc, #88]	; (800b520 <USBD_LL_Init+0x94>)
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b4cc:	4b14      	ldr	r3, [pc, #80]	; (800b520 <USBD_LL_Init+0x94>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b4d2:	4b13      	ldr	r3, [pc, #76]	; (800b520 <USBD_LL_Init+0x94>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b4d8:	4b11      	ldr	r3, [pc, #68]	; (800b520 <USBD_LL_Init+0x94>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b4de:	4b10      	ldr	r3, [pc, #64]	; (800b520 <USBD_LL_Init+0x94>)
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	; (800b520 <USBD_LL_Init+0x94>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b4ea:	480d      	ldr	r0, [pc, #52]	; (800b520 <USBD_LL_Init+0x94>)
 800b4ec:	f7f8 f90d 	bl	800370a <HAL_PCD_Init>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b4f6:	f7f7 f977 	bl	80027e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b4fa:	2180      	movs	r1, #128	; 0x80
 800b4fc:	4808      	ldr	r0, [pc, #32]	; (800b520 <USBD_LL_Init+0x94>)
 800b4fe:	f7f9 fb98 	bl	8004c32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b502:	2240      	movs	r2, #64	; 0x40
 800b504:	2100      	movs	r1, #0
 800b506:	4806      	ldr	r0, [pc, #24]	; (800b520 <USBD_LL_Init+0x94>)
 800b508:	f7f9 fb4c 	bl	8004ba4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b50c:	2280      	movs	r2, #128	; 0x80
 800b50e:	2101      	movs	r1, #1
 800b510:	4803      	ldr	r0, [pc, #12]	; (800b520 <USBD_LL_Init+0x94>)
 800b512:	f7f9 fb47 	bl	8004ba4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20009f14 	.word	0x20009f14

0800b524 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7f8 fa09 	bl	8003952 <HAL_PCD_Start>
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	4618      	mov	r0, r3
 800b548:	f000 f990 	bl	800b86c <USBD_Get_USB_Status>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b550:	7bbb      	ldrb	r3, [r7, #14]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b084      	sub	sp, #16
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	4608      	mov	r0, r1
 800b564:	4611      	mov	r1, r2
 800b566:	461a      	mov	r2, r3
 800b568:	4603      	mov	r3, r0
 800b56a:	70fb      	strb	r3, [r7, #3]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70bb      	strb	r3, [r7, #2]
 800b570:	4613      	mov	r3, r2
 800b572:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b582:	78bb      	ldrb	r3, [r7, #2]
 800b584:	883a      	ldrh	r2, [r7, #0]
 800b586:	78f9      	ldrb	r1, [r7, #3]
 800b588:	f7f8 ff07 	bl	800439a <HAL_PCD_EP_Open>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 f96a 	bl	800b86c <USBD_Get_USB_Status>
 800b598:	4603      	mov	r3, r0
 800b59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5c0:	78fa      	ldrb	r2, [r7, #3]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7f8 ff50 	bl	800446a <HAL_PCD_EP_Close>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 f94b 	bl	800b86c <USBD_Get_USB_Status>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5fe:	78fa      	ldrb	r2, [r7, #3]
 800b600:	4611      	mov	r1, r2
 800b602:	4618      	mov	r0, r3
 800b604:	f7f9 f828 	bl	8004658 <HAL_PCD_EP_SetStall>
 800b608:	4603      	mov	r3, r0
 800b60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 f92c 	bl	800b86c <USBD_Get_USB_Status>
 800b614:	4603      	mov	r3, r0
 800b616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b618:	7bbb      	ldrb	r3, [r7, #14]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	460b      	mov	r3, r1
 800b62c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b63c:	78fa      	ldrb	r2, [r7, #3]
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f7f9 f86d 	bl	8004720 <HAL_PCD_EP_ClrStall>
 800b646:	4603      	mov	r3, r0
 800b648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 f90d 	bl	800b86c <USBD_Get_USB_Status>
 800b652:	4603      	mov	r3, r0
 800b654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b656:	7bbb      	ldrb	r3, [r7, #14]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b672:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	da0b      	bge.n	800b694 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b67c:	78fb      	ldrb	r3, [r7, #3]
 800b67e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b682:	68f9      	ldr	r1, [r7, #12]
 800b684:	4613      	mov	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	333e      	adds	r3, #62	; 0x3e
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	e00b      	b.n	800b6ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b69a:	68f9      	ldr	r1, [r7, #12]
 800b69c:	4613      	mov	r3, r2
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	4413      	add	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	440b      	add	r3, r1
 800b6a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b6aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6d2:	78fa      	ldrb	r2, [r7, #3]
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f8 fe3a 	bl	8004350 <HAL_PCD_SetAddress>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 f8c2 	bl	800b86c <USBD_Get_USB_Status>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b086      	sub	sp, #24
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	603b      	str	r3, [r7, #0]
 800b702:	460b      	mov	r3, r1
 800b704:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b714:	7af9      	ldrb	r1, [r7, #11]
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	f7f8 ff53 	bl	80045c4 <HAL_PCD_EP_Transmit>
 800b71e:	4603      	mov	r3, r0
 800b720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	4618      	mov	r0, r3
 800b726:	f000 f8a1 	bl	800b86c <USBD_Get_USB_Status>
 800b72a:	4603      	mov	r3, r0
 800b72c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b72e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	607a      	str	r2, [r7, #4]
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	460b      	mov	r3, r1
 800b746:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b756:	7af9      	ldrb	r1, [r7, #11]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	f7f8 fecf 	bl	80044fe <HAL_PCD_EP_Receive>
 800b760:	4603      	mov	r3, r0
 800b762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f880 	bl	800b86c <USBD_Get_USB_Status>
 800b76c:	4603      	mov	r3, r0
 800b76e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b770:	7dbb      	ldrb	r3, [r7, #22]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	460b      	mov	r3, r1
 800b784:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b78c:	78fa      	ldrb	r2, [r7, #3]
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7f8 feff 	bl	8004594 <HAL_PCD_EP_GetRxCount>
 800b796:	4603      	mov	r3, r0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b7ac:	78fb      	ldrb	r3, [r7, #3]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <HAL_PCDEx_LPM_Callback+0x18>
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d01f      	beq.n	800b7f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b7b6:	e03b      	b.n	800b830 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b7c0:	f7f6 fdc8 	bl	8002354 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7c4:	4b1c      	ldr	r3, [pc, #112]	; (800b838 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	4a1b      	ldr	r2, [pc, #108]	; (800b838 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7ca:	f023 0306 	bic.w	r3, r3, #6
 800b7ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	6812      	ldr	r2, [r2, #0]
 800b7de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7e2:	f023 0301 	bic.w	r3, r3, #1
 800b7e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe fab9 	bl	8009d66 <USBD_LL_Resume>
    break;
 800b7f4:	e01c      	b.n	800b830 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	6812      	ldr	r2, [r2, #0]
 800b804:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b808:	f043 0301 	orr.w	r3, r3, #1
 800b80c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe fa90 	bl	8009d3a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b822:	4b05      	ldr	r3, [pc, #20]	; (800b838 <HAL_PCDEx_LPM_Callback+0x98>)
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	4a04      	ldr	r2, [pc, #16]	; (800b838 <HAL_PCDEx_LPM_Callback+0x98>)
 800b828:	f043 0306 	orr.w	r3, r3, #6
 800b82c:	6113      	str	r3, [r2, #16]
    break;
 800b82e:	bf00      	nop
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	e000ed00 	.word	0xe000ed00

0800b83c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b844:	4b03      	ldr	r3, [pc, #12]	; (800b854 <USBD_static_malloc+0x18>)
}
 800b846:	4618      	mov	r0, r3
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	2000a420 	.word	0x2000a420

0800b858 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]

}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d817      	bhi.n	800b8b0 <USBD_Get_USB_Status+0x44>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <USBD_Get_USB_Status+0x1c>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b899 	.word	0x0800b899
 800b88c:	0800b89f 	.word	0x0800b89f
 800b890:	0800b8a5 	.word	0x0800b8a5
 800b894:	0800b8ab 	.word	0x0800b8ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
    break;
 800b89c:	e00b      	b.n	800b8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a2:	e008      	b.n	800b8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a8:	e005      	b.n	800b8b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ae:	e002      	b.n	800b8b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b4:	bf00      	nop
  }
  return usb_status;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <__libc_init_array>:
 800b8c4:	b570      	push	{r4, r5, r6, lr}
 800b8c6:	4d0d      	ldr	r5, [pc, #52]	; (800b8fc <__libc_init_array+0x38>)
 800b8c8:	4c0d      	ldr	r4, [pc, #52]	; (800b900 <__libc_init_array+0x3c>)
 800b8ca:	1b64      	subs	r4, r4, r5
 800b8cc:	10a4      	asrs	r4, r4, #2
 800b8ce:	2600      	movs	r6, #0
 800b8d0:	42a6      	cmp	r6, r4
 800b8d2:	d109      	bne.n	800b8e8 <__libc_init_array+0x24>
 800b8d4:	4d0b      	ldr	r5, [pc, #44]	; (800b904 <__libc_init_array+0x40>)
 800b8d6:	4c0c      	ldr	r4, [pc, #48]	; (800b908 <__libc_init_array+0x44>)
 800b8d8:	f001 f86c 	bl	800c9b4 <_init>
 800b8dc:	1b64      	subs	r4, r4, r5
 800b8de:	10a4      	asrs	r4, r4, #2
 800b8e0:	2600      	movs	r6, #0
 800b8e2:	42a6      	cmp	r6, r4
 800b8e4:	d105      	bne.n	800b8f2 <__libc_init_array+0x2e>
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
 800b8e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ec:	4798      	blx	r3
 800b8ee:	3601      	adds	r6, #1
 800b8f0:	e7ee      	b.n	800b8d0 <__libc_init_array+0xc>
 800b8f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f6:	4798      	blx	r3
 800b8f8:	3601      	adds	r6, #1
 800b8fa:	e7f2      	b.n	800b8e2 <__libc_init_array+0x1e>
 800b8fc:	0800cc08 	.word	0x0800cc08
 800b900:	0800cc08 	.word	0x0800cc08
 800b904:	0800cc08 	.word	0x0800cc08
 800b908:	0800cc0c 	.word	0x0800cc0c

0800b90c <memset>:
 800b90c:	4402      	add	r2, r0
 800b90e:	4603      	mov	r3, r0
 800b910:	4293      	cmp	r3, r2
 800b912:	d100      	bne.n	800b916 <memset+0xa>
 800b914:	4770      	bx	lr
 800b916:	f803 1b01 	strb.w	r1, [r3], #1
 800b91a:	e7f9      	b.n	800b910 <memset+0x4>
 800b91c:	0000      	movs	r0, r0
	...

0800b920 <sin>:
 800b920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b922:	ec53 2b10 	vmov	r2, r3, d0
 800b926:	4828      	ldr	r0, [pc, #160]	; (800b9c8 <sin+0xa8>)
 800b928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b92c:	4281      	cmp	r1, r0
 800b92e:	dc07      	bgt.n	800b940 <sin+0x20>
 800b930:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b9c0 <sin+0xa0>
 800b934:	2000      	movs	r0, #0
 800b936:	b005      	add	sp, #20
 800b938:	f85d eb04 	ldr.w	lr, [sp], #4
 800b93c:	f000 be6c 	b.w	800c618 <__kernel_sin>
 800b940:	4822      	ldr	r0, [pc, #136]	; (800b9cc <sin+0xac>)
 800b942:	4281      	cmp	r1, r0
 800b944:	dd09      	ble.n	800b95a <sin+0x3a>
 800b946:	ee10 0a10 	vmov	r0, s0
 800b94a:	4619      	mov	r1, r3
 800b94c:	f7f4 fc60 	bl	8000210 <__aeabi_dsub>
 800b950:	ec41 0b10 	vmov	d0, r0, r1
 800b954:	b005      	add	sp, #20
 800b956:	f85d fb04 	ldr.w	pc, [sp], #4
 800b95a:	4668      	mov	r0, sp
 800b95c:	f000 f838 	bl	800b9d0 <__ieee754_rem_pio2>
 800b960:	f000 0003 	and.w	r0, r0, #3
 800b964:	2801      	cmp	r0, #1
 800b966:	d00c      	beq.n	800b982 <sin+0x62>
 800b968:	2802      	cmp	r0, #2
 800b96a:	d011      	beq.n	800b990 <sin+0x70>
 800b96c:	b9f0      	cbnz	r0, 800b9ac <sin+0x8c>
 800b96e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b972:	ed9d 0b00 	vldr	d0, [sp]
 800b976:	2001      	movs	r0, #1
 800b978:	f000 fe4e 	bl	800c618 <__kernel_sin>
 800b97c:	ec51 0b10 	vmov	r0, r1, d0
 800b980:	e7e6      	b.n	800b950 <sin+0x30>
 800b982:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b986:	ed9d 0b00 	vldr	d0, [sp]
 800b98a:	f000 fa2d 	bl	800bde8 <__kernel_cos>
 800b98e:	e7f5      	b.n	800b97c <sin+0x5c>
 800b990:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b994:	ed9d 0b00 	vldr	d0, [sp]
 800b998:	2001      	movs	r0, #1
 800b99a:	f000 fe3d 	bl	800c618 <__kernel_sin>
 800b99e:	ec53 2b10 	vmov	r2, r3, d0
 800b9a2:	ee10 0a10 	vmov	r0, s0
 800b9a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9aa:	e7d1      	b.n	800b950 <sin+0x30>
 800b9ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9b0:	ed9d 0b00 	vldr	d0, [sp]
 800b9b4:	f000 fa18 	bl	800bde8 <__kernel_cos>
 800b9b8:	e7f1      	b.n	800b99e <sin+0x7e>
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w
	...
 800b9c8:	3fe921fb 	.word	0x3fe921fb
 800b9cc:	7fefffff 	.word	0x7fefffff

0800b9d0 <__ieee754_rem_pio2>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	ed2d 8b02 	vpush	{d8}
 800b9d8:	ec55 4b10 	vmov	r4, r5, d0
 800b9dc:	4bca      	ldr	r3, [pc, #808]	; (800bd08 <__ieee754_rem_pio2+0x338>)
 800b9de:	b08b      	sub	sp, #44	; 0x2c
 800b9e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b9e4:	4598      	cmp	r8, r3
 800b9e6:	4682      	mov	sl, r0
 800b9e8:	9502      	str	r5, [sp, #8]
 800b9ea:	dc08      	bgt.n	800b9fe <__ieee754_rem_pio2+0x2e>
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	ed80 0b00 	vstr	d0, [r0]
 800b9f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b9f8:	f04f 0b00 	mov.w	fp, #0
 800b9fc:	e028      	b.n	800ba50 <__ieee754_rem_pio2+0x80>
 800b9fe:	4bc3      	ldr	r3, [pc, #780]	; (800bd0c <__ieee754_rem_pio2+0x33c>)
 800ba00:	4598      	cmp	r8, r3
 800ba02:	dc78      	bgt.n	800baf6 <__ieee754_rem_pio2+0x126>
 800ba04:	9b02      	ldr	r3, [sp, #8]
 800ba06:	4ec2      	ldr	r6, [pc, #776]	; (800bd10 <__ieee754_rem_pio2+0x340>)
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	ee10 0a10 	vmov	r0, s0
 800ba0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bcd0 <__ieee754_rem_pio2+0x300>)
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	4629      	mov	r1, r5
 800ba16:	dd39      	ble.n	800ba8c <__ieee754_rem_pio2+0xbc>
 800ba18:	f7f4 fbfa 	bl	8000210 <__aeabi_dsub>
 800ba1c:	45b0      	cmp	r8, r6
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	d01b      	beq.n	800ba5c <__ieee754_rem_pio2+0x8c>
 800ba24:	a3ac      	add	r3, pc, #688	; (adr r3, 800bcd8 <__ieee754_rem_pio2+0x308>)
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	f7f4 fbf1 	bl	8000210 <__aeabi_dsub>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	e9ca 2300 	strd	r2, r3, [sl]
 800ba36:	4620      	mov	r0, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f7f4 fbe9 	bl	8000210 <__aeabi_dsub>
 800ba3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bcd8 <__ieee754_rem_pio2+0x308>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fbe4 	bl	8000210 <__aeabi_dsub>
 800ba48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba4c:	f04f 0b01 	mov.w	fp, #1
 800ba50:	4658      	mov	r0, fp
 800ba52:	b00b      	add	sp, #44	; 0x2c
 800ba54:	ecbd 8b02 	vpop	{d8}
 800ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bce0 <__ieee754_rem_pio2+0x310>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f7f4 fbd5 	bl	8000210 <__aeabi_dsub>
 800ba66:	a3a0      	add	r3, pc, #640	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x318>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	460d      	mov	r5, r1
 800ba70:	f7f4 fbce 	bl	8000210 <__aeabi_dsub>
 800ba74:	4602      	mov	r2, r0
 800ba76:	460b      	mov	r3, r1
 800ba78:	e9ca 2300 	strd	r2, r3, [sl]
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f4 fbc6 	bl	8000210 <__aeabi_dsub>
 800ba84:	a398      	add	r3, pc, #608	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x318>)
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	e7db      	b.n	800ba44 <__ieee754_rem_pio2+0x74>
 800ba8c:	f7f4 fbc2 	bl	8000214 <__adddf3>
 800ba90:	45b0      	cmp	r8, r6
 800ba92:	4604      	mov	r4, r0
 800ba94:	460d      	mov	r5, r1
 800ba96:	d016      	beq.n	800bac6 <__ieee754_rem_pio2+0xf6>
 800ba98:	a38f      	add	r3, pc, #572	; (adr r3, 800bcd8 <__ieee754_rem_pio2+0x308>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f4 fbb9 	bl	8000214 <__adddf3>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	e9ca 2300 	strd	r2, r3, [sl]
 800baaa:	4620      	mov	r0, r4
 800baac:	4629      	mov	r1, r5
 800baae:	f7f4 fbaf 	bl	8000210 <__aeabi_dsub>
 800bab2:	a389      	add	r3, pc, #548	; (adr r3, 800bcd8 <__ieee754_rem_pio2+0x308>)
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f7f4 fbac 	bl	8000214 <__adddf3>
 800babc:	f04f 3bff 	mov.w	fp, #4294967295
 800bac0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bac4:	e7c4      	b.n	800ba50 <__ieee754_rem_pio2+0x80>
 800bac6:	a386      	add	r3, pc, #536	; (adr r3, 800bce0 <__ieee754_rem_pio2+0x310>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	f7f4 fba2 	bl	8000214 <__adddf3>
 800bad0:	a385      	add	r3, pc, #532	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x318>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	4604      	mov	r4, r0
 800bad8:	460d      	mov	r5, r1
 800bada:	f7f4 fb9b 	bl	8000214 <__adddf3>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	e9ca 2300 	strd	r2, r3, [sl]
 800bae6:	4620      	mov	r0, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f4 fb91 	bl	8000210 <__aeabi_dsub>
 800baee:	a37e      	add	r3, pc, #504	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x318>)
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	e7e0      	b.n	800bab8 <__ieee754_rem_pio2+0xe8>
 800baf6:	4b87      	ldr	r3, [pc, #540]	; (800bd14 <__ieee754_rem_pio2+0x344>)
 800baf8:	4598      	cmp	r8, r3
 800bafa:	f300 80d9 	bgt.w	800bcb0 <__ieee754_rem_pio2+0x2e0>
 800bafe:	f000 fe49 	bl	800c794 <fabs>
 800bb02:	ec55 4b10 	vmov	r4, r5, d0
 800bb06:	ee10 0a10 	vmov	r0, s0
 800bb0a:	a379      	add	r3, pc, #484	; (adr r3, 800bcf0 <__ieee754_rem_pio2+0x320>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 fd35 	bl	8000580 <__aeabi_dmul>
 800bb16:	4b80      	ldr	r3, [pc, #512]	; (800bd18 <__ieee754_rem_pio2+0x348>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f7f4 fb7b 	bl	8000214 <__adddf3>
 800bb1e:	f7f4 ffc9 	bl	8000ab4 <__aeabi_d2iz>
 800bb22:	4683      	mov	fp, r0
 800bb24:	f7f4 fcc2 	bl	80004ac <__aeabi_i2d>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	ec43 2b18 	vmov	d8, r2, r3
 800bb30:	a367      	add	r3, pc, #412	; (adr r3, 800bcd0 <__ieee754_rem_pio2+0x300>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f7f4 fd23 	bl	8000580 <__aeabi_dmul>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fb65 	bl	8000210 <__aeabi_dsub>
 800bb46:	a364      	add	r3, pc, #400	; (adr r3, 800bcd8 <__ieee754_rem_pio2+0x308>)
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	4606      	mov	r6, r0
 800bb4e:	460f      	mov	r7, r1
 800bb50:	ec51 0b18 	vmov	r0, r1, d8
 800bb54:	f7f4 fd14 	bl	8000580 <__aeabi_dmul>
 800bb58:	f1bb 0f1f 	cmp.w	fp, #31
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	460d      	mov	r5, r1
 800bb60:	dc0d      	bgt.n	800bb7e <__ieee754_rem_pio2+0x1ae>
 800bb62:	4b6e      	ldr	r3, [pc, #440]	; (800bd1c <__ieee754_rem_pio2+0x34c>)
 800bb64:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6c:	4543      	cmp	r3, r8
 800bb6e:	d006      	beq.n	800bb7e <__ieee754_rem_pio2+0x1ae>
 800bb70:	4622      	mov	r2, r4
 800bb72:	462b      	mov	r3, r5
 800bb74:	4630      	mov	r0, r6
 800bb76:	4639      	mov	r1, r7
 800bb78:	f7f4 fb4a 	bl	8000210 <__aeabi_dsub>
 800bb7c:	e00f      	b.n	800bb9e <__ieee754_rem_pio2+0x1ce>
 800bb7e:	462b      	mov	r3, r5
 800bb80:	4622      	mov	r2, r4
 800bb82:	4630      	mov	r0, r6
 800bb84:	4639      	mov	r1, r7
 800bb86:	f7f4 fb43 	bl	8000210 <__aeabi_dsub>
 800bb8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb8e:	9303      	str	r3, [sp, #12]
 800bb90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb94:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bb98:	f1b8 0f10 	cmp.w	r8, #16
 800bb9c:	dc02      	bgt.n	800bba4 <__ieee754_rem_pio2+0x1d4>
 800bb9e:	e9ca 0100 	strd	r0, r1, [sl]
 800bba2:	e039      	b.n	800bc18 <__ieee754_rem_pio2+0x248>
 800bba4:	a34e      	add	r3, pc, #312	; (adr r3, 800bce0 <__ieee754_rem_pio2+0x310>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	ec51 0b18 	vmov	r0, r1, d8
 800bbae:	f7f4 fce7 	bl	8000580 <__aeabi_dmul>
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4630      	mov	r0, r6
 800bbbc:	4639      	mov	r1, r7
 800bbbe:	f7f4 fb27 	bl	8000210 <__aeabi_dsub>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4680      	mov	r8, r0
 800bbc8:	4689      	mov	r9, r1
 800bbca:	4630      	mov	r0, r6
 800bbcc:	4639      	mov	r1, r7
 800bbce:	f7f4 fb1f 	bl	8000210 <__aeabi_dsub>
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	f7f4 fb1b 	bl	8000210 <__aeabi_dsub>
 800bbda:	a343      	add	r3, pc, #268	; (adr r3, 800bce8 <__ieee754_rem_pio2+0x318>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	ec51 0b18 	vmov	r0, r1, d8
 800bbe8:	f7f4 fcca 	bl	8000580 <__aeabi_dmul>
 800bbec:	4622      	mov	r2, r4
 800bbee:	462b      	mov	r3, r5
 800bbf0:	f7f4 fb0e 	bl	8000210 <__aeabi_dsub>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	4649      	mov	r1, r9
 800bc00:	f7f4 fb06 	bl	8000210 <__aeabi_dsub>
 800bc04:	9a03      	ldr	r2, [sp, #12]
 800bc06:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	2b31      	cmp	r3, #49	; 0x31
 800bc0e:	dc24      	bgt.n	800bc5a <__ieee754_rem_pio2+0x28a>
 800bc10:	e9ca 0100 	strd	r0, r1, [sl]
 800bc14:	4646      	mov	r6, r8
 800bc16:	464f      	mov	r7, r9
 800bc18:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	4642      	mov	r2, r8
 800bc20:	464b      	mov	r3, r9
 800bc22:	4639      	mov	r1, r7
 800bc24:	f7f4 faf4 	bl	8000210 <__aeabi_dsub>
 800bc28:	462b      	mov	r3, r5
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	f7f4 faf0 	bl	8000210 <__aeabi_dsub>
 800bc30:	9b02      	ldr	r3, [sp, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc38:	f6bf af0a 	bge.w	800ba50 <__ieee754_rem_pio2+0x80>
 800bc3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc40:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc48:	f8ca 8000 	str.w	r8, [sl]
 800bc4c:	f8ca 0008 	str.w	r0, [sl, #8]
 800bc50:	f8ca 300c 	str.w	r3, [sl, #12]
 800bc54:	f1cb 0b00 	rsb	fp, fp, #0
 800bc58:	e6fa      	b.n	800ba50 <__ieee754_rem_pio2+0x80>
 800bc5a:	a327      	add	r3, pc, #156	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x328>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	ec51 0b18 	vmov	r0, r1, d8
 800bc64:	f7f4 fc8c 	bl	8000580 <__aeabi_dmul>
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4640      	mov	r0, r8
 800bc72:	4649      	mov	r1, r9
 800bc74:	f7f4 facc 	bl	8000210 <__aeabi_dsub>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	460f      	mov	r7, r1
 800bc80:	4640      	mov	r0, r8
 800bc82:	4649      	mov	r1, r9
 800bc84:	f7f4 fac4 	bl	8000210 <__aeabi_dsub>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	f7f4 fac0 	bl	8000210 <__aeabi_dsub>
 800bc90:	a31b      	add	r3, pc, #108	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x330>)
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	4604      	mov	r4, r0
 800bc98:	460d      	mov	r5, r1
 800bc9a:	ec51 0b18 	vmov	r0, r1, d8
 800bc9e:	f7f4 fc6f 	bl	8000580 <__aeabi_dmul>
 800bca2:	4622      	mov	r2, r4
 800bca4:	462b      	mov	r3, r5
 800bca6:	f7f4 fab3 	bl	8000210 <__aeabi_dsub>
 800bcaa:	4604      	mov	r4, r0
 800bcac:	460d      	mov	r5, r1
 800bcae:	e75f      	b.n	800bb70 <__ieee754_rem_pio2+0x1a0>
 800bcb0:	4b1b      	ldr	r3, [pc, #108]	; (800bd20 <__ieee754_rem_pio2+0x350>)
 800bcb2:	4598      	cmp	r8, r3
 800bcb4:	dd36      	ble.n	800bd24 <__ieee754_rem_pio2+0x354>
 800bcb6:	ee10 2a10 	vmov	r2, s0
 800bcba:	462b      	mov	r3, r5
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f7f4 faa6 	bl	8000210 <__aeabi_dsub>
 800bcc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bcc8:	e9ca 0100 	strd	r0, r1, [sl]
 800bccc:	e694      	b.n	800b9f8 <__ieee754_rem_pio2+0x28>
 800bcce:	bf00      	nop
 800bcd0:	54400000 	.word	0x54400000
 800bcd4:	3ff921fb 	.word	0x3ff921fb
 800bcd8:	1a626331 	.word	0x1a626331
 800bcdc:	3dd0b461 	.word	0x3dd0b461
 800bce0:	1a600000 	.word	0x1a600000
 800bce4:	3dd0b461 	.word	0x3dd0b461
 800bce8:	2e037073 	.word	0x2e037073
 800bcec:	3ba3198a 	.word	0x3ba3198a
 800bcf0:	6dc9c883 	.word	0x6dc9c883
 800bcf4:	3fe45f30 	.word	0x3fe45f30
 800bcf8:	2e000000 	.word	0x2e000000
 800bcfc:	3ba3198a 	.word	0x3ba3198a
 800bd00:	252049c1 	.word	0x252049c1
 800bd04:	397b839a 	.word	0x397b839a
 800bd08:	3fe921fb 	.word	0x3fe921fb
 800bd0c:	4002d97b 	.word	0x4002d97b
 800bd10:	3ff921fb 	.word	0x3ff921fb
 800bd14:	413921fb 	.word	0x413921fb
 800bd18:	3fe00000 	.word	0x3fe00000
 800bd1c:	0800ca28 	.word	0x0800ca28
 800bd20:	7fefffff 	.word	0x7fefffff
 800bd24:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bd28:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bd2c:	ee10 0a10 	vmov	r0, s0
 800bd30:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bd34:	ee10 6a10 	vmov	r6, s0
 800bd38:	460f      	mov	r7, r1
 800bd3a:	f7f4 febb 	bl	8000ab4 <__aeabi_d2iz>
 800bd3e:	f7f4 fbb5 	bl	80004ac <__aeabi_i2d>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd4e:	f7f4 fa5f 	bl	8000210 <__aeabi_dsub>
 800bd52:	4b23      	ldr	r3, [pc, #140]	; (800bde0 <__ieee754_rem_pio2+0x410>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	f7f4 fc13 	bl	8000580 <__aeabi_dmul>
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	f7f4 fea9 	bl	8000ab4 <__aeabi_d2iz>
 800bd62:	f7f4 fba3 	bl	80004ac <__aeabi_i2d>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd72:	f7f4 fa4d 	bl	8000210 <__aeabi_dsub>
 800bd76:	4b1a      	ldr	r3, [pc, #104]	; (800bde0 <__ieee754_rem_pio2+0x410>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f7f4 fc01 	bl	8000580 <__aeabi_dmul>
 800bd7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd82:	ad04      	add	r5, sp, #16
 800bd84:	f04f 0803 	mov.w	r8, #3
 800bd88:	46a9      	mov	r9, r5
 800bd8a:	2600      	movs	r6, #0
 800bd8c:	2700      	movs	r7, #0
 800bd8e:	4632      	mov	r2, r6
 800bd90:	463b      	mov	r3, r7
 800bd92:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bd96:	46c3      	mov	fp, r8
 800bd98:	3d08      	subs	r5, #8
 800bd9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd9e:	f7f4 fe57 	bl	8000a50 <__aeabi_dcmpeq>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d1f3      	bne.n	800bd8e <__ieee754_rem_pio2+0x3be>
 800bda6:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <__ieee754_rem_pio2+0x414>)
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	2302      	movs	r3, #2
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	4622      	mov	r2, r4
 800bdb0:	465b      	mov	r3, fp
 800bdb2:	4651      	mov	r1, sl
 800bdb4:	4648      	mov	r0, r9
 800bdb6:	f000 f8df 	bl	800bf78 <__kernel_rem_pio2>
 800bdba:	9b02      	ldr	r3, [sp, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	4683      	mov	fp, r0
 800bdc0:	f6bf ae46 	bge.w	800ba50 <__ieee754_rem_pio2+0x80>
 800bdc4:	e9da 2100 	ldrd	r2, r1, [sl]
 800bdc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdcc:	e9ca 2300 	strd	r2, r3, [sl]
 800bdd0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bdd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdd8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bddc:	e73a      	b.n	800bc54 <__ieee754_rem_pio2+0x284>
 800bdde:	bf00      	nop
 800bde0:	41700000 	.word	0x41700000
 800bde4:	0800caa8 	.word	0x0800caa8

0800bde8 <__kernel_cos>:
 800bde8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	ec57 6b10 	vmov	r6, r7, d0
 800bdf0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bdf4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bdf8:	ed8d 1b00 	vstr	d1, [sp]
 800bdfc:	da07      	bge.n	800be0e <__kernel_cos+0x26>
 800bdfe:	ee10 0a10 	vmov	r0, s0
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 fe56 	bl	8000ab4 <__aeabi_d2iz>
 800be08:	2800      	cmp	r0, #0
 800be0a:	f000 8088 	beq.w	800bf1e <__kernel_cos+0x136>
 800be0e:	4632      	mov	r2, r6
 800be10:	463b      	mov	r3, r7
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fbb3 	bl	8000580 <__aeabi_dmul>
 800be1a:	4b51      	ldr	r3, [pc, #324]	; (800bf60 <__kernel_cos+0x178>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	460d      	mov	r5, r1
 800be22:	f7f4 fbad 	bl	8000580 <__aeabi_dmul>
 800be26:	a340      	add	r3, pc, #256	; (adr r3, 800bf28 <__kernel_cos+0x140>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	4682      	mov	sl, r0
 800be2e:	468b      	mov	fp, r1
 800be30:	4620      	mov	r0, r4
 800be32:	4629      	mov	r1, r5
 800be34:	f7f4 fba4 	bl	8000580 <__aeabi_dmul>
 800be38:	a33d      	add	r3, pc, #244	; (adr r3, 800bf30 <__kernel_cos+0x148>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f7f4 f9e9 	bl	8000214 <__adddf3>
 800be42:	4622      	mov	r2, r4
 800be44:	462b      	mov	r3, r5
 800be46:	f7f4 fb9b 	bl	8000580 <__aeabi_dmul>
 800be4a:	a33b      	add	r3, pc, #236	; (adr r3, 800bf38 <__kernel_cos+0x150>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f7f4 f9de 	bl	8000210 <__aeabi_dsub>
 800be54:	4622      	mov	r2, r4
 800be56:	462b      	mov	r3, r5
 800be58:	f7f4 fb92 	bl	8000580 <__aeabi_dmul>
 800be5c:	a338      	add	r3, pc, #224	; (adr r3, 800bf40 <__kernel_cos+0x158>)
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	f7f4 f9d7 	bl	8000214 <__adddf3>
 800be66:	4622      	mov	r2, r4
 800be68:	462b      	mov	r3, r5
 800be6a:	f7f4 fb89 	bl	8000580 <__aeabi_dmul>
 800be6e:	a336      	add	r3, pc, #216	; (adr r3, 800bf48 <__kernel_cos+0x160>)
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	f7f4 f9cc 	bl	8000210 <__aeabi_dsub>
 800be78:	4622      	mov	r2, r4
 800be7a:	462b      	mov	r3, r5
 800be7c:	f7f4 fb80 	bl	8000580 <__aeabi_dmul>
 800be80:	a333      	add	r3, pc, #204	; (adr r3, 800bf50 <__kernel_cos+0x168>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f7f4 f9c5 	bl	8000214 <__adddf3>
 800be8a:	4622      	mov	r2, r4
 800be8c:	462b      	mov	r3, r5
 800be8e:	f7f4 fb77 	bl	8000580 <__aeabi_dmul>
 800be92:	4622      	mov	r2, r4
 800be94:	462b      	mov	r3, r5
 800be96:	f7f4 fb73 	bl	8000580 <__aeabi_dmul>
 800be9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	4630      	mov	r0, r6
 800bea4:	4639      	mov	r1, r7
 800bea6:	f7f4 fb6b 	bl	8000580 <__aeabi_dmul>
 800beaa:	460b      	mov	r3, r1
 800beac:	4602      	mov	r2, r0
 800beae:	4629      	mov	r1, r5
 800beb0:	4620      	mov	r0, r4
 800beb2:	f7f4 f9ad 	bl	8000210 <__aeabi_dsub>
 800beb6:	4b2b      	ldr	r3, [pc, #172]	; (800bf64 <__kernel_cos+0x17c>)
 800beb8:	4598      	cmp	r8, r3
 800beba:	4606      	mov	r6, r0
 800bebc:	460f      	mov	r7, r1
 800bebe:	dc10      	bgt.n	800bee2 <__kernel_cos+0xfa>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4650      	mov	r0, sl
 800bec6:	4659      	mov	r1, fp
 800bec8:	f7f4 f9a2 	bl	8000210 <__aeabi_dsub>
 800becc:	460b      	mov	r3, r1
 800bece:	4926      	ldr	r1, [pc, #152]	; (800bf68 <__kernel_cos+0x180>)
 800bed0:	4602      	mov	r2, r0
 800bed2:	2000      	movs	r0, #0
 800bed4:	f7f4 f99c 	bl	8000210 <__aeabi_dsub>
 800bed8:	ec41 0b10 	vmov	d0, r0, r1
 800bedc:	b003      	add	sp, #12
 800bede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee2:	4b22      	ldr	r3, [pc, #136]	; (800bf6c <__kernel_cos+0x184>)
 800bee4:	4920      	ldr	r1, [pc, #128]	; (800bf68 <__kernel_cos+0x180>)
 800bee6:	4598      	cmp	r8, r3
 800bee8:	bfcc      	ite	gt
 800beea:	4d21      	ldrgt	r5, [pc, #132]	; (800bf70 <__kernel_cos+0x188>)
 800beec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bef0:	2400      	movs	r4, #0
 800bef2:	4622      	mov	r2, r4
 800bef4:	462b      	mov	r3, r5
 800bef6:	2000      	movs	r0, #0
 800bef8:	f7f4 f98a 	bl	8000210 <__aeabi_dsub>
 800befc:	4622      	mov	r2, r4
 800befe:	4680      	mov	r8, r0
 800bf00:	4689      	mov	r9, r1
 800bf02:	462b      	mov	r3, r5
 800bf04:	4650      	mov	r0, sl
 800bf06:	4659      	mov	r1, fp
 800bf08:	f7f4 f982 	bl	8000210 <__aeabi_dsub>
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	463b      	mov	r3, r7
 800bf10:	f7f4 f97e 	bl	8000210 <__aeabi_dsub>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4640      	mov	r0, r8
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	e7da      	b.n	800bed4 <__kernel_cos+0xec>
 800bf1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bf58 <__kernel_cos+0x170>
 800bf22:	e7db      	b.n	800bedc <__kernel_cos+0xf4>
 800bf24:	f3af 8000 	nop.w
 800bf28:	be8838d4 	.word	0xbe8838d4
 800bf2c:	bda8fae9 	.word	0xbda8fae9
 800bf30:	bdb4b1c4 	.word	0xbdb4b1c4
 800bf34:	3e21ee9e 	.word	0x3e21ee9e
 800bf38:	809c52ad 	.word	0x809c52ad
 800bf3c:	3e927e4f 	.word	0x3e927e4f
 800bf40:	19cb1590 	.word	0x19cb1590
 800bf44:	3efa01a0 	.word	0x3efa01a0
 800bf48:	16c15177 	.word	0x16c15177
 800bf4c:	3f56c16c 	.word	0x3f56c16c
 800bf50:	5555554c 	.word	0x5555554c
 800bf54:	3fa55555 	.word	0x3fa55555
 800bf58:	00000000 	.word	0x00000000
 800bf5c:	3ff00000 	.word	0x3ff00000
 800bf60:	3fe00000 	.word	0x3fe00000
 800bf64:	3fd33332 	.word	0x3fd33332
 800bf68:	3ff00000 	.word	0x3ff00000
 800bf6c:	3fe90000 	.word	0x3fe90000
 800bf70:	3fd20000 	.word	0x3fd20000
 800bf74:	00000000 	.word	0x00000000

0800bf78 <__kernel_rem_pio2>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	ed2d 8b02 	vpush	{d8}
 800bf80:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bf84:	f112 0f14 	cmn.w	r2, #20
 800bf88:	9308      	str	r3, [sp, #32]
 800bf8a:	9101      	str	r1, [sp, #4]
 800bf8c:	4bc4      	ldr	r3, [pc, #784]	; (800c2a0 <__kernel_rem_pio2+0x328>)
 800bf8e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bf90:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf96:	9302      	str	r3, [sp, #8]
 800bf98:	9b08      	ldr	r3, [sp, #32]
 800bf9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf9e:	bfa8      	it	ge
 800bfa0:	1ed4      	subge	r4, r2, #3
 800bfa2:	9306      	str	r3, [sp, #24]
 800bfa4:	bfb2      	itee	lt
 800bfa6:	2400      	movlt	r4, #0
 800bfa8:	2318      	movge	r3, #24
 800bfaa:	fb94 f4f3 	sdivge	r4, r4, r3
 800bfae:	f06f 0317 	mvn.w	r3, #23
 800bfb2:	fb04 3303 	mla	r3, r4, r3, r3
 800bfb6:	eb03 0a02 	add.w	sl, r3, r2
 800bfba:	9b02      	ldr	r3, [sp, #8]
 800bfbc:	9a06      	ldr	r2, [sp, #24]
 800bfbe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c290 <__kernel_rem_pio2+0x318>
 800bfc2:	eb03 0802 	add.w	r8, r3, r2
 800bfc6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bfc8:	1aa7      	subs	r7, r4, r2
 800bfca:	ae22      	add	r6, sp, #136	; 0x88
 800bfcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bfd0:	2500      	movs	r5, #0
 800bfd2:	4545      	cmp	r5, r8
 800bfd4:	dd13      	ble.n	800bffe <__kernel_rem_pio2+0x86>
 800bfd6:	9b08      	ldr	r3, [sp, #32]
 800bfd8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c290 <__kernel_rem_pio2+0x318>
 800bfdc:	aa22      	add	r2, sp, #136	; 0x88
 800bfde:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bfe2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bfe6:	f04f 0800 	mov.w	r8, #0
 800bfea:	9b02      	ldr	r3, [sp, #8]
 800bfec:	4598      	cmp	r8, r3
 800bfee:	dc2f      	bgt.n	800c050 <__kernel_rem_pio2+0xd8>
 800bff0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bff4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bff8:	462f      	mov	r7, r5
 800bffa:	2600      	movs	r6, #0
 800bffc:	e01b      	b.n	800c036 <__kernel_rem_pio2+0xbe>
 800bffe:	42ef      	cmn	r7, r5
 800c000:	d407      	bmi.n	800c012 <__kernel_rem_pio2+0x9a>
 800c002:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c006:	f7f4 fa51 	bl	80004ac <__aeabi_i2d>
 800c00a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c00e:	3501      	adds	r5, #1
 800c010:	e7df      	b.n	800bfd2 <__kernel_rem_pio2+0x5a>
 800c012:	ec51 0b18 	vmov	r0, r1, d8
 800c016:	e7f8      	b.n	800c00a <__kernel_rem_pio2+0x92>
 800c018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c01c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c020:	f7f4 faae 	bl	8000580 <__aeabi_dmul>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c02c:	f7f4 f8f2 	bl	8000214 <__adddf3>
 800c030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c034:	3601      	adds	r6, #1
 800c036:	9b06      	ldr	r3, [sp, #24]
 800c038:	429e      	cmp	r6, r3
 800c03a:	f1a7 0708 	sub.w	r7, r7, #8
 800c03e:	ddeb      	ble.n	800c018 <__kernel_rem_pio2+0xa0>
 800c040:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c044:	f108 0801 	add.w	r8, r8, #1
 800c048:	ecab 7b02 	vstmia	fp!, {d7}
 800c04c:	3508      	adds	r5, #8
 800c04e:	e7cc      	b.n	800bfea <__kernel_rem_pio2+0x72>
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	aa0e      	add	r2, sp, #56	; 0x38
 800c054:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c058:	930d      	str	r3, [sp, #52]	; 0x34
 800c05a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c05c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c060:	9c02      	ldr	r4, [sp, #8]
 800c062:	930c      	str	r3, [sp, #48]	; 0x30
 800c064:	00e3      	lsls	r3, r4, #3
 800c066:	930a      	str	r3, [sp, #40]	; 0x28
 800c068:	ab9a      	add	r3, sp, #616	; 0x268
 800c06a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c06e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c072:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c076:	ab72      	add	r3, sp, #456	; 0x1c8
 800c078:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c07c:	46c3      	mov	fp, r8
 800c07e:	46a1      	mov	r9, r4
 800c080:	f1b9 0f00 	cmp.w	r9, #0
 800c084:	f1a5 0508 	sub.w	r5, r5, #8
 800c088:	dc77      	bgt.n	800c17a <__kernel_rem_pio2+0x202>
 800c08a:	ec47 6b10 	vmov	d0, r6, r7
 800c08e:	4650      	mov	r0, sl
 800c090:	f000 fc0a 	bl	800c8a8 <scalbn>
 800c094:	ec57 6b10 	vmov	r6, r7, d0
 800c098:	2200      	movs	r2, #0
 800c09a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c09e:	ee10 0a10 	vmov	r0, s0
 800c0a2:	4639      	mov	r1, r7
 800c0a4:	f7f4 fa6c 	bl	8000580 <__aeabi_dmul>
 800c0a8:	ec41 0b10 	vmov	d0, r0, r1
 800c0ac:	f000 fb7c 	bl	800c7a8 <floor>
 800c0b0:	4b7c      	ldr	r3, [pc, #496]	; (800c2a4 <__kernel_rem_pio2+0x32c>)
 800c0b2:	ec51 0b10 	vmov	r0, r1, d0
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f7f4 fa62 	bl	8000580 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 f8a4 	bl	8000210 <__aeabi_dsub>
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	f7f4 fcf2 	bl	8000ab4 <__aeabi_d2iz>
 800c0d0:	9004      	str	r0, [sp, #16]
 800c0d2:	f7f4 f9eb 	bl	80004ac <__aeabi_i2d>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 f897 	bl	8000210 <__aeabi_dsub>
 800c0e2:	f1ba 0f00 	cmp.w	sl, #0
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	460f      	mov	r7, r1
 800c0ea:	dd6d      	ble.n	800c1c8 <__kernel_rem_pio2+0x250>
 800c0ec:	1e62      	subs	r2, r4, #1
 800c0ee:	ab0e      	add	r3, sp, #56	; 0x38
 800c0f0:	9d04      	ldr	r5, [sp, #16]
 800c0f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c0f6:	f1ca 0118 	rsb	r1, sl, #24
 800c0fa:	fa40 f301 	asr.w	r3, r0, r1
 800c0fe:	441d      	add	r5, r3
 800c100:	408b      	lsls	r3, r1
 800c102:	1ac0      	subs	r0, r0, r3
 800c104:	ab0e      	add	r3, sp, #56	; 0x38
 800c106:	9504      	str	r5, [sp, #16]
 800c108:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c10c:	f1ca 0317 	rsb	r3, sl, #23
 800c110:	fa40 fb03 	asr.w	fp, r0, r3
 800c114:	f1bb 0f00 	cmp.w	fp, #0
 800c118:	dd65      	ble.n	800c1e6 <__kernel_rem_pio2+0x26e>
 800c11a:	9b04      	ldr	r3, [sp, #16]
 800c11c:	2200      	movs	r2, #0
 800c11e:	3301      	adds	r3, #1
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	4615      	mov	r5, r2
 800c124:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c128:	4294      	cmp	r4, r2
 800c12a:	f300 809c 	bgt.w	800c266 <__kernel_rem_pio2+0x2ee>
 800c12e:	f1ba 0f00 	cmp.w	sl, #0
 800c132:	dd07      	ble.n	800c144 <__kernel_rem_pio2+0x1cc>
 800c134:	f1ba 0f01 	cmp.w	sl, #1
 800c138:	f000 80c0 	beq.w	800c2bc <__kernel_rem_pio2+0x344>
 800c13c:	f1ba 0f02 	cmp.w	sl, #2
 800c140:	f000 80c6 	beq.w	800c2d0 <__kernel_rem_pio2+0x358>
 800c144:	f1bb 0f02 	cmp.w	fp, #2
 800c148:	d14d      	bne.n	800c1e6 <__kernel_rem_pio2+0x26e>
 800c14a:	4632      	mov	r2, r6
 800c14c:	463b      	mov	r3, r7
 800c14e:	4956      	ldr	r1, [pc, #344]	; (800c2a8 <__kernel_rem_pio2+0x330>)
 800c150:	2000      	movs	r0, #0
 800c152:	f7f4 f85d 	bl	8000210 <__aeabi_dsub>
 800c156:	4606      	mov	r6, r0
 800c158:	460f      	mov	r7, r1
 800c15a:	2d00      	cmp	r5, #0
 800c15c:	d043      	beq.n	800c1e6 <__kernel_rem_pio2+0x26e>
 800c15e:	4650      	mov	r0, sl
 800c160:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c298 <__kernel_rem_pio2+0x320>
 800c164:	f000 fba0 	bl	800c8a8 <scalbn>
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	ec53 2b10 	vmov	r2, r3, d0
 800c170:	f7f4 f84e 	bl	8000210 <__aeabi_dsub>
 800c174:	4606      	mov	r6, r0
 800c176:	460f      	mov	r7, r1
 800c178:	e035      	b.n	800c1e6 <__kernel_rem_pio2+0x26e>
 800c17a:	4b4c      	ldr	r3, [pc, #304]	; (800c2ac <__kernel_rem_pio2+0x334>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	4630      	mov	r0, r6
 800c180:	4639      	mov	r1, r7
 800c182:	f7f4 f9fd 	bl	8000580 <__aeabi_dmul>
 800c186:	f7f4 fc95 	bl	8000ab4 <__aeabi_d2iz>
 800c18a:	f7f4 f98f 	bl	80004ac <__aeabi_i2d>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	ec43 2b18 	vmov	d8, r2, r3
 800c196:	4b46      	ldr	r3, [pc, #280]	; (800c2b0 <__kernel_rem_pio2+0x338>)
 800c198:	2200      	movs	r2, #0
 800c19a:	f7f4 f9f1 	bl	8000580 <__aeabi_dmul>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	f7f4 f833 	bl	8000210 <__aeabi_dsub>
 800c1aa:	f7f4 fc83 	bl	8000ab4 <__aeabi_d2iz>
 800c1ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1b2:	f84b 0b04 	str.w	r0, [fp], #4
 800c1b6:	ec51 0b18 	vmov	r0, r1, d8
 800c1ba:	f7f4 f82b 	bl	8000214 <__adddf3>
 800c1be:	f109 39ff 	add.w	r9, r9, #4294967295
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	e75b      	b.n	800c080 <__kernel_rem_pio2+0x108>
 800c1c8:	d106      	bne.n	800c1d8 <__kernel_rem_pio2+0x260>
 800c1ca:	1e63      	subs	r3, r4, #1
 800c1cc:	aa0e      	add	r2, sp, #56	; 0x38
 800c1ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c1d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c1d6:	e79d      	b.n	800c114 <__kernel_rem_pio2+0x19c>
 800c1d8:	4b36      	ldr	r3, [pc, #216]	; (800c2b4 <__kernel_rem_pio2+0x33c>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f7f4 fc56 	bl	8000a8c <__aeabi_dcmpge>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d13d      	bne.n	800c260 <__kernel_rem_pio2+0x2e8>
 800c1e4:	4683      	mov	fp, r0
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	4639      	mov	r1, r7
 800c1ee:	f7f4 fc2f 	bl	8000a50 <__aeabi_dcmpeq>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	f000 80c0 	beq.w	800c378 <__kernel_rem_pio2+0x400>
 800c1f8:	1e65      	subs	r5, r4, #1
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	9902      	ldr	r1, [sp, #8]
 800c200:	428b      	cmp	r3, r1
 800c202:	da6c      	bge.n	800c2de <__kernel_rem_pio2+0x366>
 800c204:	2a00      	cmp	r2, #0
 800c206:	f000 8089 	beq.w	800c31c <__kernel_rem_pio2+0x3a4>
 800c20a:	ab0e      	add	r3, sp, #56	; 0x38
 800c20c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c210:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 80ad 	beq.w	800c374 <__kernel_rem_pio2+0x3fc>
 800c21a:	4650      	mov	r0, sl
 800c21c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c298 <__kernel_rem_pio2+0x320>
 800c220:	f000 fb42 	bl	800c8a8 <scalbn>
 800c224:	ab9a      	add	r3, sp, #616	; 0x268
 800c226:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c22a:	ec57 6b10 	vmov	r6, r7, d0
 800c22e:	00ec      	lsls	r4, r5, #3
 800c230:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c234:	46aa      	mov	sl, r5
 800c236:	f1ba 0f00 	cmp.w	sl, #0
 800c23a:	f280 80d6 	bge.w	800c3ea <__kernel_rem_pio2+0x472>
 800c23e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c290 <__kernel_rem_pio2+0x318>
 800c242:	462e      	mov	r6, r5
 800c244:	2e00      	cmp	r6, #0
 800c246:	f2c0 8104 	blt.w	800c452 <__kernel_rem_pio2+0x4da>
 800c24a:	ab72      	add	r3, sp, #456	; 0x1c8
 800c24c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c250:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c2b8 <__kernel_rem_pio2+0x340>
 800c254:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c258:	f04f 0800 	mov.w	r8, #0
 800c25c:	1baf      	subs	r7, r5, r6
 800c25e:	e0ea      	b.n	800c436 <__kernel_rem_pio2+0x4be>
 800c260:	f04f 0b02 	mov.w	fp, #2
 800c264:	e759      	b.n	800c11a <__kernel_rem_pio2+0x1a2>
 800c266:	f8d8 3000 	ldr.w	r3, [r8]
 800c26a:	b955      	cbnz	r5, 800c282 <__kernel_rem_pio2+0x30a>
 800c26c:	b123      	cbz	r3, 800c278 <__kernel_rem_pio2+0x300>
 800c26e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c272:	f8c8 3000 	str.w	r3, [r8]
 800c276:	2301      	movs	r3, #1
 800c278:	3201      	adds	r2, #1
 800c27a:	f108 0804 	add.w	r8, r8, #4
 800c27e:	461d      	mov	r5, r3
 800c280:	e752      	b.n	800c128 <__kernel_rem_pio2+0x1b0>
 800c282:	1acb      	subs	r3, r1, r3
 800c284:	f8c8 3000 	str.w	r3, [r8]
 800c288:	462b      	mov	r3, r5
 800c28a:	e7f5      	b.n	800c278 <__kernel_rem_pio2+0x300>
 800c28c:	f3af 8000 	nop.w
	...
 800c29c:	3ff00000 	.word	0x3ff00000
 800c2a0:	0800cbf0 	.word	0x0800cbf0
 800c2a4:	40200000 	.word	0x40200000
 800c2a8:	3ff00000 	.word	0x3ff00000
 800c2ac:	3e700000 	.word	0x3e700000
 800c2b0:	41700000 	.word	0x41700000
 800c2b4:	3fe00000 	.word	0x3fe00000
 800c2b8:	0800cbb0 	.word	0x0800cbb0
 800c2bc:	1e62      	subs	r2, r4, #1
 800c2be:	ab0e      	add	r3, sp, #56	; 0x38
 800c2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c2c8:	a90e      	add	r1, sp, #56	; 0x38
 800c2ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c2ce:	e739      	b.n	800c144 <__kernel_rem_pio2+0x1cc>
 800c2d0:	1e62      	subs	r2, r4, #1
 800c2d2:	ab0e      	add	r3, sp, #56	; 0x38
 800c2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c2dc:	e7f4      	b.n	800c2c8 <__kernel_rem_pio2+0x350>
 800c2de:	a90e      	add	r1, sp, #56	; 0x38
 800c2e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	e789      	b.n	800c1fe <__kernel_rem_pio2+0x286>
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c2f0:	2900      	cmp	r1, #0
 800c2f2:	d0fa      	beq.n	800c2ea <__kernel_rem_pio2+0x372>
 800c2f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c2fa:	446a      	add	r2, sp
 800c2fc:	3a98      	subs	r2, #152	; 0x98
 800c2fe:	920a      	str	r2, [sp, #40]	; 0x28
 800c300:	9a08      	ldr	r2, [sp, #32]
 800c302:	18e3      	adds	r3, r4, r3
 800c304:	18a5      	adds	r5, r4, r2
 800c306:	aa22      	add	r2, sp, #136	; 0x88
 800c308:	f104 0801 	add.w	r8, r4, #1
 800c30c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c310:	9304      	str	r3, [sp, #16]
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	4543      	cmp	r3, r8
 800c316:	da04      	bge.n	800c322 <__kernel_rem_pio2+0x3aa>
 800c318:	461c      	mov	r4, r3
 800c31a:	e6a3      	b.n	800c064 <__kernel_rem_pio2+0xec>
 800c31c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c31e:	2301      	movs	r3, #1
 800c320:	e7e4      	b.n	800c2ec <__kernel_rem_pio2+0x374>
 800c322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c324:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c328:	f7f4 f8c0 	bl	80004ac <__aeabi_i2d>
 800c32c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c332:	46ab      	mov	fp, r5
 800c334:	461c      	mov	r4, r3
 800c336:	f04f 0900 	mov.w	r9, #0
 800c33a:	2600      	movs	r6, #0
 800c33c:	2700      	movs	r7, #0
 800c33e:	9b06      	ldr	r3, [sp, #24]
 800c340:	4599      	cmp	r9, r3
 800c342:	dd06      	ble.n	800c352 <__kernel_rem_pio2+0x3da>
 800c344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c346:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c34a:	f108 0801 	add.w	r8, r8, #1
 800c34e:	930a      	str	r3, [sp, #40]	; 0x28
 800c350:	e7df      	b.n	800c312 <__kernel_rem_pio2+0x39a>
 800c352:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c356:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c35a:	f7f4 f911 	bl	8000580 <__aeabi_dmul>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4630      	mov	r0, r6
 800c364:	4639      	mov	r1, r7
 800c366:	f7f3 ff55 	bl	8000214 <__adddf3>
 800c36a:	f109 0901 	add.w	r9, r9, #1
 800c36e:	4606      	mov	r6, r0
 800c370:	460f      	mov	r7, r1
 800c372:	e7e4      	b.n	800c33e <__kernel_rem_pio2+0x3c6>
 800c374:	3d01      	subs	r5, #1
 800c376:	e748      	b.n	800c20a <__kernel_rem_pio2+0x292>
 800c378:	ec47 6b10 	vmov	d0, r6, r7
 800c37c:	f1ca 0000 	rsb	r0, sl, #0
 800c380:	f000 fa92 	bl	800c8a8 <scalbn>
 800c384:	ec57 6b10 	vmov	r6, r7, d0
 800c388:	4ba0      	ldr	r3, [pc, #640]	; (800c60c <__kernel_rem_pio2+0x694>)
 800c38a:	ee10 0a10 	vmov	r0, s0
 800c38e:	2200      	movs	r2, #0
 800c390:	4639      	mov	r1, r7
 800c392:	f7f4 fb7b 	bl	8000a8c <__aeabi_dcmpge>
 800c396:	b1f8      	cbz	r0, 800c3d8 <__kernel_rem_pio2+0x460>
 800c398:	4b9d      	ldr	r3, [pc, #628]	; (800c610 <__kernel_rem_pio2+0x698>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	4630      	mov	r0, r6
 800c39e:	4639      	mov	r1, r7
 800c3a0:	f7f4 f8ee 	bl	8000580 <__aeabi_dmul>
 800c3a4:	f7f4 fb86 	bl	8000ab4 <__aeabi_d2iz>
 800c3a8:	4680      	mov	r8, r0
 800c3aa:	f7f4 f87f 	bl	80004ac <__aeabi_i2d>
 800c3ae:	4b97      	ldr	r3, [pc, #604]	; (800c60c <__kernel_rem_pio2+0x694>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f7f4 f8e5 	bl	8000580 <__aeabi_dmul>
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7f3 ff27 	bl	8000210 <__aeabi_dsub>
 800c3c2:	f7f4 fb77 	bl	8000ab4 <__aeabi_d2iz>
 800c3c6:	1c65      	adds	r5, r4, #1
 800c3c8:	ab0e      	add	r3, sp, #56	; 0x38
 800c3ca:	f10a 0a18 	add.w	sl, sl, #24
 800c3ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c3d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c3d6:	e720      	b.n	800c21a <__kernel_rem_pio2+0x2a2>
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 fb6a 	bl	8000ab4 <__aeabi_d2iz>
 800c3e0:	ab0e      	add	r3, sp, #56	; 0x38
 800c3e2:	4625      	mov	r5, r4
 800c3e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c3e8:	e717      	b.n	800c21a <__kernel_rem_pio2+0x2a2>
 800c3ea:	ab0e      	add	r3, sp, #56	; 0x38
 800c3ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c3f0:	f7f4 f85c 	bl	80004ac <__aeabi_i2d>
 800c3f4:	4632      	mov	r2, r6
 800c3f6:	463b      	mov	r3, r7
 800c3f8:	f7f4 f8c2 	bl	8000580 <__aeabi_dmul>
 800c3fc:	4b84      	ldr	r3, [pc, #528]	; (800c610 <__kernel_rem_pio2+0x698>)
 800c3fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c402:	2200      	movs	r2, #0
 800c404:	4630      	mov	r0, r6
 800c406:	4639      	mov	r1, r7
 800c408:	f7f4 f8ba 	bl	8000580 <__aeabi_dmul>
 800c40c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c410:	4606      	mov	r6, r0
 800c412:	460f      	mov	r7, r1
 800c414:	e70f      	b.n	800c236 <__kernel_rem_pio2+0x2be>
 800c416:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c41a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c41e:	f7f4 f8af 	bl	8000580 <__aeabi_dmul>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c42a:	f7f3 fef3 	bl	8000214 <__adddf3>
 800c42e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c432:	f108 0801 	add.w	r8, r8, #1
 800c436:	9b02      	ldr	r3, [sp, #8]
 800c438:	4598      	cmp	r8, r3
 800c43a:	dc01      	bgt.n	800c440 <__kernel_rem_pio2+0x4c8>
 800c43c:	45b8      	cmp	r8, r7
 800c43e:	ddea      	ble.n	800c416 <__kernel_rem_pio2+0x49e>
 800c440:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c444:	ab4a      	add	r3, sp, #296	; 0x128
 800c446:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c44a:	ed87 7b00 	vstr	d7, [r7]
 800c44e:	3e01      	subs	r6, #1
 800c450:	e6f8      	b.n	800c244 <__kernel_rem_pio2+0x2cc>
 800c452:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c454:	2b02      	cmp	r3, #2
 800c456:	dc0b      	bgt.n	800c470 <__kernel_rem_pio2+0x4f8>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	dc35      	bgt.n	800c4c8 <__kernel_rem_pio2+0x550>
 800c45c:	d059      	beq.n	800c512 <__kernel_rem_pio2+0x59a>
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	f003 0007 	and.w	r0, r3, #7
 800c464:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c468:	ecbd 8b02 	vpop	{d8}
 800c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c470:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c472:	2b03      	cmp	r3, #3
 800c474:	d1f3      	bne.n	800c45e <__kernel_rem_pio2+0x4e6>
 800c476:	ab4a      	add	r3, sp, #296	; 0x128
 800c478:	4423      	add	r3, r4
 800c47a:	9306      	str	r3, [sp, #24]
 800c47c:	461c      	mov	r4, r3
 800c47e:	469a      	mov	sl, r3
 800c480:	9502      	str	r5, [sp, #8]
 800c482:	9b02      	ldr	r3, [sp, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	f1aa 0a08 	sub.w	sl, sl, #8
 800c48a:	dc6b      	bgt.n	800c564 <__kernel_rem_pio2+0x5ec>
 800c48c:	46aa      	mov	sl, r5
 800c48e:	f1ba 0f01 	cmp.w	sl, #1
 800c492:	f1a4 0408 	sub.w	r4, r4, #8
 800c496:	f300 8085 	bgt.w	800c5a4 <__kernel_rem_pio2+0x62c>
 800c49a:	9c06      	ldr	r4, [sp, #24]
 800c49c:	2000      	movs	r0, #0
 800c49e:	3408      	adds	r4, #8
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	2d01      	cmp	r5, #1
 800c4a4:	f300 809d 	bgt.w	800c5e2 <__kernel_rem_pio2+0x66a>
 800c4a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c4ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c4b0:	f1bb 0f00 	cmp.w	fp, #0
 800c4b4:	f040 809b 	bne.w	800c5ee <__kernel_rem_pio2+0x676>
 800c4b8:	9b01      	ldr	r3, [sp, #4]
 800c4ba:	e9c3 5600 	strd	r5, r6, [r3]
 800c4be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c4c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c4c6:	e7ca      	b.n	800c45e <__kernel_rem_pio2+0x4e6>
 800c4c8:	3408      	adds	r4, #8
 800c4ca:	ab4a      	add	r3, sp, #296	; 0x128
 800c4cc:	441c      	add	r4, r3
 800c4ce:	462e      	mov	r6, r5
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	2e00      	cmp	r6, #0
 800c4d6:	da36      	bge.n	800c546 <__kernel_rem_pio2+0x5ce>
 800c4d8:	f1bb 0f00 	cmp.w	fp, #0
 800c4dc:	d039      	beq.n	800c552 <__kernel_rem_pio2+0x5da>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4e4:	9c01      	ldr	r4, [sp, #4]
 800c4e6:	e9c4 2300 	strd	r2, r3, [r4]
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c4f2:	f7f3 fe8d 	bl	8000210 <__aeabi_dsub>
 800c4f6:	ae4c      	add	r6, sp, #304	; 0x130
 800c4f8:	2401      	movs	r4, #1
 800c4fa:	42a5      	cmp	r5, r4
 800c4fc:	da2c      	bge.n	800c558 <__kernel_rem_pio2+0x5e0>
 800c4fe:	f1bb 0f00 	cmp.w	fp, #0
 800c502:	d002      	beq.n	800c50a <__kernel_rem_pio2+0x592>
 800c504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c508:	4619      	mov	r1, r3
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c510:	e7a5      	b.n	800c45e <__kernel_rem_pio2+0x4e6>
 800c512:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c516:	eb0d 0403 	add.w	r4, sp, r3
 800c51a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c51e:	2000      	movs	r0, #0
 800c520:	2100      	movs	r1, #0
 800c522:	2d00      	cmp	r5, #0
 800c524:	da09      	bge.n	800c53a <__kernel_rem_pio2+0x5c2>
 800c526:	f1bb 0f00 	cmp.w	fp, #0
 800c52a:	d002      	beq.n	800c532 <__kernel_rem_pio2+0x5ba>
 800c52c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c530:	4619      	mov	r1, r3
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	e9c3 0100 	strd	r0, r1, [r3]
 800c538:	e791      	b.n	800c45e <__kernel_rem_pio2+0x4e6>
 800c53a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c53e:	f7f3 fe69 	bl	8000214 <__adddf3>
 800c542:	3d01      	subs	r5, #1
 800c544:	e7ed      	b.n	800c522 <__kernel_rem_pio2+0x5aa>
 800c546:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c54a:	f7f3 fe63 	bl	8000214 <__adddf3>
 800c54e:	3e01      	subs	r6, #1
 800c550:	e7c0      	b.n	800c4d4 <__kernel_rem_pio2+0x55c>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	e7c5      	b.n	800c4e4 <__kernel_rem_pio2+0x56c>
 800c558:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c55c:	f7f3 fe5a 	bl	8000214 <__adddf3>
 800c560:	3401      	adds	r4, #1
 800c562:	e7ca      	b.n	800c4fa <__kernel_rem_pio2+0x582>
 800c564:	e9da 8900 	ldrd	r8, r9, [sl]
 800c568:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c56c:	9b02      	ldr	r3, [sp, #8]
 800c56e:	3b01      	subs	r3, #1
 800c570:	9302      	str	r3, [sp, #8]
 800c572:	4632      	mov	r2, r6
 800c574:	463b      	mov	r3, r7
 800c576:	4640      	mov	r0, r8
 800c578:	4649      	mov	r1, r9
 800c57a:	f7f3 fe4b 	bl	8000214 <__adddf3>
 800c57e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4640      	mov	r0, r8
 800c588:	4649      	mov	r1, r9
 800c58a:	f7f3 fe41 	bl	8000210 <__aeabi_dsub>
 800c58e:	4632      	mov	r2, r6
 800c590:	463b      	mov	r3, r7
 800c592:	f7f3 fe3f 	bl	8000214 <__adddf3>
 800c596:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c59a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c59e:	ed8a 7b00 	vstr	d7, [sl]
 800c5a2:	e76e      	b.n	800c482 <__kernel_rem_pio2+0x50a>
 800c5a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c5a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c5ac:	4640      	mov	r0, r8
 800c5ae:	4632      	mov	r2, r6
 800c5b0:	463b      	mov	r3, r7
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	f7f3 fe2e 	bl	8000214 <__adddf3>
 800c5b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f7f3 fe24 	bl	8000210 <__aeabi_dsub>
 800c5c8:	4632      	mov	r2, r6
 800c5ca:	463b      	mov	r3, r7
 800c5cc:	f7f3 fe22 	bl	8000214 <__adddf3>
 800c5d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5d8:	ed84 7b00 	vstr	d7, [r4]
 800c5dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5e0:	e755      	b.n	800c48e <__kernel_rem_pio2+0x516>
 800c5e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c5e6:	f7f3 fe15 	bl	8000214 <__adddf3>
 800c5ea:	3d01      	subs	r5, #1
 800c5ec:	e759      	b.n	800c4a2 <__kernel_rem_pio2+0x52a>
 800c5ee:	9b01      	ldr	r3, [sp, #4]
 800c5f0:	9a01      	ldr	r2, [sp, #4]
 800c5f2:	601d      	str	r5, [r3, #0]
 800c5f4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c5f8:	605c      	str	r4, [r3, #4]
 800c5fa:	609f      	str	r7, [r3, #8]
 800c5fc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c600:	60d3      	str	r3, [r2, #12]
 800c602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c606:	6110      	str	r0, [r2, #16]
 800c608:	6153      	str	r3, [r2, #20]
 800c60a:	e728      	b.n	800c45e <__kernel_rem_pio2+0x4e6>
 800c60c:	41700000 	.word	0x41700000
 800c610:	3e700000 	.word	0x3e700000
 800c614:	00000000 	.word	0x00000000

0800c618 <__kernel_sin>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	ed2d 8b04 	vpush	{d8-d9}
 800c620:	eeb0 8a41 	vmov.f32	s16, s2
 800c624:	eef0 8a61 	vmov.f32	s17, s3
 800c628:	ec55 4b10 	vmov	r4, r5, d0
 800c62c:	b083      	sub	sp, #12
 800c62e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c632:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c636:	9001      	str	r0, [sp, #4]
 800c638:	da06      	bge.n	800c648 <__kernel_sin+0x30>
 800c63a:	ee10 0a10 	vmov	r0, s0
 800c63e:	4629      	mov	r1, r5
 800c640:	f7f4 fa38 	bl	8000ab4 <__aeabi_d2iz>
 800c644:	2800      	cmp	r0, #0
 800c646:	d051      	beq.n	800c6ec <__kernel_sin+0xd4>
 800c648:	4622      	mov	r2, r4
 800c64a:	462b      	mov	r3, r5
 800c64c:	4620      	mov	r0, r4
 800c64e:	4629      	mov	r1, r5
 800c650:	f7f3 ff96 	bl	8000580 <__aeabi_dmul>
 800c654:	4682      	mov	sl, r0
 800c656:	468b      	mov	fp, r1
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	4620      	mov	r0, r4
 800c65e:	4629      	mov	r1, r5
 800c660:	f7f3 ff8e 	bl	8000580 <__aeabi_dmul>
 800c664:	a341      	add	r3, pc, #260	; (adr r3, 800c76c <__kernel_sin+0x154>)
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	4680      	mov	r8, r0
 800c66c:	4689      	mov	r9, r1
 800c66e:	4650      	mov	r0, sl
 800c670:	4659      	mov	r1, fp
 800c672:	f7f3 ff85 	bl	8000580 <__aeabi_dmul>
 800c676:	a33f      	add	r3, pc, #252	; (adr r3, 800c774 <__kernel_sin+0x15c>)
 800c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67c:	f7f3 fdc8 	bl	8000210 <__aeabi_dsub>
 800c680:	4652      	mov	r2, sl
 800c682:	465b      	mov	r3, fp
 800c684:	f7f3 ff7c 	bl	8000580 <__aeabi_dmul>
 800c688:	a33c      	add	r3, pc, #240	; (adr r3, 800c77c <__kernel_sin+0x164>)
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	f7f3 fdc1 	bl	8000214 <__adddf3>
 800c692:	4652      	mov	r2, sl
 800c694:	465b      	mov	r3, fp
 800c696:	f7f3 ff73 	bl	8000580 <__aeabi_dmul>
 800c69a:	a33a      	add	r3, pc, #232	; (adr r3, 800c784 <__kernel_sin+0x16c>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 fdb6 	bl	8000210 <__aeabi_dsub>
 800c6a4:	4652      	mov	r2, sl
 800c6a6:	465b      	mov	r3, fp
 800c6a8:	f7f3 ff6a 	bl	8000580 <__aeabi_dmul>
 800c6ac:	a337      	add	r3, pc, #220	; (adr r3, 800c78c <__kernel_sin+0x174>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	f7f3 fdaf 	bl	8000214 <__adddf3>
 800c6b6:	9b01      	ldr	r3, [sp, #4]
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	460f      	mov	r7, r1
 800c6bc:	b9eb      	cbnz	r3, 800c6fa <__kernel_sin+0xe2>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	f7f3 ff5b 	bl	8000580 <__aeabi_dmul>
 800c6ca:	a325      	add	r3, pc, #148	; (adr r3, 800c760 <__kernel_sin+0x148>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f3 fd9e 	bl	8000210 <__aeabi_dsub>
 800c6d4:	4642      	mov	r2, r8
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	f7f3 ff52 	bl	8000580 <__aeabi_dmul>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	f7f3 fd96 	bl	8000214 <__adddf3>
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	460d      	mov	r5, r1
 800c6ec:	ec45 4b10 	vmov	d0, r4, r5
 800c6f0:	b003      	add	sp, #12
 800c6f2:	ecbd 8b04 	vpop	{d8-d9}
 800c6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fa:	4b1b      	ldr	r3, [pc, #108]	; (800c768 <__kernel_sin+0x150>)
 800c6fc:	ec51 0b18 	vmov	r0, r1, d8
 800c700:	2200      	movs	r2, #0
 800c702:	f7f3 ff3d 	bl	8000580 <__aeabi_dmul>
 800c706:	4632      	mov	r2, r6
 800c708:	ec41 0b19 	vmov	d9, r0, r1
 800c70c:	463b      	mov	r3, r7
 800c70e:	4640      	mov	r0, r8
 800c710:	4649      	mov	r1, r9
 800c712:	f7f3 ff35 	bl	8000580 <__aeabi_dmul>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	ec51 0b19 	vmov	r0, r1, d9
 800c71e:	f7f3 fd77 	bl	8000210 <__aeabi_dsub>
 800c722:	4652      	mov	r2, sl
 800c724:	465b      	mov	r3, fp
 800c726:	f7f3 ff2b 	bl	8000580 <__aeabi_dmul>
 800c72a:	ec53 2b18 	vmov	r2, r3, d8
 800c72e:	f7f3 fd6f 	bl	8000210 <__aeabi_dsub>
 800c732:	a30b      	add	r3, pc, #44	; (adr r3, 800c760 <__kernel_sin+0x148>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	4606      	mov	r6, r0
 800c73a:	460f      	mov	r7, r1
 800c73c:	4640      	mov	r0, r8
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f3 ff1e 	bl	8000580 <__aeabi_dmul>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	4630      	mov	r0, r6
 800c74a:	4639      	mov	r1, r7
 800c74c:	f7f3 fd62 	bl	8000214 <__adddf3>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4620      	mov	r0, r4
 800c756:	4629      	mov	r1, r5
 800c758:	f7f3 fd5a 	bl	8000210 <__aeabi_dsub>
 800c75c:	e7c4      	b.n	800c6e8 <__kernel_sin+0xd0>
 800c75e:	bf00      	nop
 800c760:	55555549 	.word	0x55555549
 800c764:	3fc55555 	.word	0x3fc55555
 800c768:	3fe00000 	.word	0x3fe00000
 800c76c:	5acfd57c 	.word	0x5acfd57c
 800c770:	3de5d93a 	.word	0x3de5d93a
 800c774:	8a2b9ceb 	.word	0x8a2b9ceb
 800c778:	3e5ae5e6 	.word	0x3e5ae5e6
 800c77c:	57b1fe7d 	.word	0x57b1fe7d
 800c780:	3ec71de3 	.word	0x3ec71de3
 800c784:	19c161d5 	.word	0x19c161d5
 800c788:	3f2a01a0 	.word	0x3f2a01a0
 800c78c:	1110f8a6 	.word	0x1110f8a6
 800c790:	3f811111 	.word	0x3f811111

0800c794 <fabs>:
 800c794:	ec51 0b10 	vmov	r0, r1, d0
 800c798:	ee10 2a10 	vmov	r2, s0
 800c79c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7a0:	ec43 2b10 	vmov	d0, r2, r3
 800c7a4:	4770      	bx	lr
	...

0800c7a8 <floor>:
 800c7a8:	ec51 0b10 	vmov	r0, r1, d0
 800c7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c7b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c7b8:	2e13      	cmp	r6, #19
 800c7ba:	ee10 5a10 	vmov	r5, s0
 800c7be:	ee10 8a10 	vmov	r8, s0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	dc32      	bgt.n	800c82c <floor+0x84>
 800c7c6:	2e00      	cmp	r6, #0
 800c7c8:	da14      	bge.n	800c7f4 <floor+0x4c>
 800c7ca:	a333      	add	r3, pc, #204	; (adr r3, 800c898 <floor+0xf0>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7f3 fd20 	bl	8000214 <__adddf3>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f7f4 f962 	bl	8000aa0 <__aeabi_dcmpgt>
 800c7dc:	b138      	cbz	r0, 800c7ee <floor+0x46>
 800c7de:	2c00      	cmp	r4, #0
 800c7e0:	da57      	bge.n	800c892 <floor+0xea>
 800c7e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c7e6:	431d      	orrs	r5, r3
 800c7e8:	d001      	beq.n	800c7ee <floor+0x46>
 800c7ea:	4c2d      	ldr	r4, [pc, #180]	; (800c8a0 <floor+0xf8>)
 800c7ec:	2500      	movs	r5, #0
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	e025      	b.n	800c840 <floor+0x98>
 800c7f4:	4f2b      	ldr	r7, [pc, #172]	; (800c8a4 <floor+0xfc>)
 800c7f6:	4137      	asrs	r7, r6
 800c7f8:	ea01 0307 	and.w	r3, r1, r7
 800c7fc:	4303      	orrs	r3, r0
 800c7fe:	d01f      	beq.n	800c840 <floor+0x98>
 800c800:	a325      	add	r3, pc, #148	; (adr r3, 800c898 <floor+0xf0>)
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	f7f3 fd05 	bl	8000214 <__adddf3>
 800c80a:	2200      	movs	r2, #0
 800c80c:	2300      	movs	r3, #0
 800c80e:	f7f4 f947 	bl	8000aa0 <__aeabi_dcmpgt>
 800c812:	2800      	cmp	r0, #0
 800c814:	d0eb      	beq.n	800c7ee <floor+0x46>
 800c816:	2c00      	cmp	r4, #0
 800c818:	bfbe      	ittt	lt
 800c81a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c81e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c822:	19a4      	addlt	r4, r4, r6
 800c824:	ea24 0407 	bic.w	r4, r4, r7
 800c828:	2500      	movs	r5, #0
 800c82a:	e7e0      	b.n	800c7ee <floor+0x46>
 800c82c:	2e33      	cmp	r6, #51	; 0x33
 800c82e:	dd0b      	ble.n	800c848 <floor+0xa0>
 800c830:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c834:	d104      	bne.n	800c840 <floor+0x98>
 800c836:	ee10 2a10 	vmov	r2, s0
 800c83a:	460b      	mov	r3, r1
 800c83c:	f7f3 fcea 	bl	8000214 <__adddf3>
 800c840:	ec41 0b10 	vmov	d0, r0, r1
 800c844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c848:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c84c:	f04f 33ff 	mov.w	r3, #4294967295
 800c850:	fa23 f707 	lsr.w	r7, r3, r7
 800c854:	4207      	tst	r7, r0
 800c856:	d0f3      	beq.n	800c840 <floor+0x98>
 800c858:	a30f      	add	r3, pc, #60	; (adr r3, 800c898 <floor+0xf0>)
 800c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85e:	f7f3 fcd9 	bl	8000214 <__adddf3>
 800c862:	2200      	movs	r2, #0
 800c864:	2300      	movs	r3, #0
 800c866:	f7f4 f91b 	bl	8000aa0 <__aeabi_dcmpgt>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d0bf      	beq.n	800c7ee <floor+0x46>
 800c86e:	2c00      	cmp	r4, #0
 800c870:	da02      	bge.n	800c878 <floor+0xd0>
 800c872:	2e14      	cmp	r6, #20
 800c874:	d103      	bne.n	800c87e <floor+0xd6>
 800c876:	3401      	adds	r4, #1
 800c878:	ea25 0507 	bic.w	r5, r5, r7
 800c87c:	e7b7      	b.n	800c7ee <floor+0x46>
 800c87e:	2301      	movs	r3, #1
 800c880:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c884:	fa03 f606 	lsl.w	r6, r3, r6
 800c888:	4435      	add	r5, r6
 800c88a:	4545      	cmp	r5, r8
 800c88c:	bf38      	it	cc
 800c88e:	18e4      	addcc	r4, r4, r3
 800c890:	e7f2      	b.n	800c878 <floor+0xd0>
 800c892:	2500      	movs	r5, #0
 800c894:	462c      	mov	r4, r5
 800c896:	e7aa      	b.n	800c7ee <floor+0x46>
 800c898:	8800759c 	.word	0x8800759c
 800c89c:	7e37e43c 	.word	0x7e37e43c
 800c8a0:	bff00000 	.word	0xbff00000
 800c8a4:	000fffff 	.word	0x000fffff

0800c8a8 <scalbn>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	ec55 4b10 	vmov	r4, r5, d0
 800c8ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	b99a      	cbnz	r2, 800c8e0 <scalbn+0x38>
 800c8b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8bc:	4323      	orrs	r3, r4
 800c8be:	d036      	beq.n	800c92e <scalbn+0x86>
 800c8c0:	4b39      	ldr	r3, [pc, #228]	; (800c9a8 <scalbn+0x100>)
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	ee10 0a10 	vmov	r0, s0
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f7f3 fe59 	bl	8000580 <__aeabi_dmul>
 800c8ce:	4b37      	ldr	r3, [pc, #220]	; (800c9ac <scalbn+0x104>)
 800c8d0:	429e      	cmp	r6, r3
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	da10      	bge.n	800c8fa <scalbn+0x52>
 800c8d8:	a32b      	add	r3, pc, #172	; (adr r3, 800c988 <scalbn+0xe0>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	e03a      	b.n	800c956 <scalbn+0xae>
 800c8e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c8e4:	428a      	cmp	r2, r1
 800c8e6:	d10c      	bne.n	800c902 <scalbn+0x5a>
 800c8e8:	ee10 2a10 	vmov	r2, s0
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	f7f3 fc90 	bl	8000214 <__adddf3>
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	460d      	mov	r5, r1
 800c8f8:	e019      	b.n	800c92e <scalbn+0x86>
 800c8fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c8fe:	460b      	mov	r3, r1
 800c900:	3a36      	subs	r2, #54	; 0x36
 800c902:	4432      	add	r2, r6
 800c904:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c908:	428a      	cmp	r2, r1
 800c90a:	dd08      	ble.n	800c91e <scalbn+0x76>
 800c90c:	2d00      	cmp	r5, #0
 800c90e:	a120      	add	r1, pc, #128	; (adr r1, 800c990 <scalbn+0xe8>)
 800c910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c914:	da1c      	bge.n	800c950 <scalbn+0xa8>
 800c916:	a120      	add	r1, pc, #128	; (adr r1, 800c998 <scalbn+0xf0>)
 800c918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91c:	e018      	b.n	800c950 <scalbn+0xa8>
 800c91e:	2a00      	cmp	r2, #0
 800c920:	dd08      	ble.n	800c934 <scalbn+0x8c>
 800c922:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c92a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c92e:	ec45 4b10 	vmov	d0, r4, r5
 800c932:	bd70      	pop	{r4, r5, r6, pc}
 800c934:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c938:	da19      	bge.n	800c96e <scalbn+0xc6>
 800c93a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c93e:	429e      	cmp	r6, r3
 800c940:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c944:	dd0a      	ble.n	800c95c <scalbn+0xb4>
 800c946:	a112      	add	r1, pc, #72	; (adr r1, 800c990 <scalbn+0xe8>)
 800c948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1e2      	bne.n	800c916 <scalbn+0x6e>
 800c950:	a30f      	add	r3, pc, #60	; (adr r3, 800c990 <scalbn+0xe8>)
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	f7f3 fe13 	bl	8000580 <__aeabi_dmul>
 800c95a:	e7cb      	b.n	800c8f4 <scalbn+0x4c>
 800c95c:	a10a      	add	r1, pc, #40	; (adr r1, 800c988 <scalbn+0xe0>)
 800c95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0b8      	beq.n	800c8d8 <scalbn+0x30>
 800c966:	a10e      	add	r1, pc, #56	; (adr r1, 800c9a0 <scalbn+0xf8>)
 800c968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96c:	e7b4      	b.n	800c8d8 <scalbn+0x30>
 800c96e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c972:	3236      	adds	r2, #54	; 0x36
 800c974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c978:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c97c:	4620      	mov	r0, r4
 800c97e:	4b0c      	ldr	r3, [pc, #48]	; (800c9b0 <scalbn+0x108>)
 800c980:	2200      	movs	r2, #0
 800c982:	e7e8      	b.n	800c956 <scalbn+0xae>
 800c984:	f3af 8000 	nop.w
 800c988:	c2f8f359 	.word	0xc2f8f359
 800c98c:	01a56e1f 	.word	0x01a56e1f
 800c990:	8800759c 	.word	0x8800759c
 800c994:	7e37e43c 	.word	0x7e37e43c
 800c998:	8800759c 	.word	0x8800759c
 800c99c:	fe37e43c 	.word	0xfe37e43c
 800c9a0:	c2f8f359 	.word	0xc2f8f359
 800c9a4:	81a56e1f 	.word	0x81a56e1f
 800c9a8:	43500000 	.word	0x43500000
 800c9ac:	ffff3cb0 	.word	0xffff3cb0
 800c9b0:	3c900000 	.word	0x3c900000

0800c9b4 <_init>:
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b6:	bf00      	nop
 800c9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ba:	bc08      	pop	{r3}
 800c9bc:	469e      	mov	lr, r3
 800c9be:	4770      	bx	lr

0800c9c0 <_fini>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	bf00      	nop
 800c9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c6:	bc08      	pop	{r3}
 800c9c8:	469e      	mov	lr, r3
 800c9ca:	4770      	bx	lr
