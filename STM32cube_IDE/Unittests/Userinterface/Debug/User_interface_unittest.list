
User_interface_unittest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800bc50  0800bc50  0001bc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdac  0800bdac  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdac  0800bdac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdb4  0800bdb4  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdb4  0800bdb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdb8  0800bdb8  0001bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800bdbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006738  20000174  0800bf30  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200068ac  0800bf30  000268ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b4e  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049e2  00000000  00000000  00041cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  000466d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  00048008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b30  00000000  00000000  00049780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e630  00000000  00000000  000502b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da454  00000000  00000000  0006e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148d34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c1c  00000000  00000000  00148d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000174 	.word	0x20000174
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc38 	.word	0x0800bc38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000178 	.word	0x20000178
 800020c:	0800bc38 	.word	0x0800bc38

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <zet_blauw_licht_aan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void zet_blauw_licht_aan() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <zet_blauw_licht_aan+0x28>)
 800051e:	f000 ffd5 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2104      	movs	r1, #4
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <zet_blauw_licht_aan+0x28>)
 8000528:	f000 ffd0 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2108      	movs	r1, #8
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <zet_blauw_licht_aan+0x28>)
 8000532:	f000 ffcb 	bl	80014cc <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021400 	.word	0x40021400

08000540 <zet_groen_licht_aan>:

void zet_groen_licht_aan() {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <zet_groen_licht_aan+0x28>)
 800054a:	f000 ffbf 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2104      	movs	r1, #4
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <zet_groen_licht_aan+0x28>)
 8000554:	f000 ffba 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2108      	movs	r1, #8
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <zet_groen_licht_aan+0x28>)
 800055e:	f000 ffb5 	bl	80014cc <HAL_GPIO_WritePin>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021400 	.word	0x40021400

0800056c <zet_rood_licht_aan>:

void zet_rood_licht_aan() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <zet_rood_licht_aan+0x28>)
 8000576:	f000 ffa9 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <zet_rood_licht_aan+0x28>)
 8000580:	f000 ffa4 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2108      	movs	r1, #8
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <zet_rood_licht_aan+0x28>)
 800058a:	f000 ff9f 	bl	80014cc <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021400 	.word	0x40021400

08000598 <groen_knipperend>:

void groen_knipperend() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2102      	movs	r1, #2
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <groen_knipperend+0x24>)
 80005a2:	f000 ff93 	bl	80014cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <groen_knipperend+0x24>)
 80005ac:	f000 ff8e 	bl	80014cc <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GROENE_LED_PORT, GROENE_LED_PIN);
 80005b0:	2104      	movs	r1, #4
 80005b2:	4802      	ldr	r0, [pc, #8]	; (80005bc <groen_knipperend+0x24>)
 80005b4:	f000 ffa3 	bl	80014fe <HAL_GPIO_TogglePin>


}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021400 	.word	0x40021400

080005c0 <update_status>:

void update_status(TestStatus nieuwe_status) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
    huidig_status = nieuwe_status;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <update_status+0x1c>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	7013      	strb	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	20000280 	.word	0x20000280

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fc1e 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f850 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f94a 	bl	8000884 <MX_GPIO_Init>
  MX_I2S1_Init();
 80005f0:	f000 f8b8 	bl	8000764 <MX_I2S1_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f91c 	bl	8000830 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80005f8:	f000 f8e2 	bl	80007c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	4818      	ldr	r0, [pc, #96]	; (8000664 <main+0x84>)
 8000602:	f000 ff63 	bl	80014cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	4816      	ldr	r0, [pc, #88]	; (8000664 <main+0x84>)
 800060c:	f000 ff5e 	bl	80014cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2102      	movs	r1, #2
 8000614:	4813      	ldr	r0, [pc, #76]	; (8000664 <main+0x84>)
 8000616:	f000 ff59 	bl	80014cc <HAL_GPIO_WritePin>

  HAL_Delay(5000);
 800061a:	f241 3088 	movw	r0, #5000	; 0x1388
 800061e:	f000 fc73 	bl	8000f08 <HAL_Delay>
  update_status(STATUS_GEREED);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ffcc 	bl	80005c0 <update_status>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000628:	f007 ff16 	bl	8008458 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <main+0x88>)
 800062e:	2100      	movs	r1, #0
 8000630:	480e      	ldr	r0, [pc, #56]	; (800066c <main+0x8c>)
 8000632:	f007 ff5b 	bl	80084ec <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x90>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of KnopTASK */
  KnopTASKHandle = osThreadNew(StartKnopThread, NULL, &KnopTASK_attributes);
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x94>)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <main+0x98>)
 8000642:	f007 ff53 	bl	80084ec <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <main+0x9c>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of LedTASK */
  LedTASKHandle = osThreadNew(StartLEDThread, NULL, &LedTASK_attributes);
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <main+0xa0>)
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <main+0xa4>)
 8000652:	f007 ff4b 	bl	80084ec <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <main+0xa8>)
 800065a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f007 ff20 	bl	80084a0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x80>
 8000662:	bf00      	nop
 8000664:	40021400 	.word	0x40021400
 8000668:	0800bcc8 	.word	0x0800bcc8
 800066c:	080009f5 	.word	0x080009f5
 8000670:	20000274 	.word	0x20000274
 8000674:	0800bcec 	.word	0x0800bcec
 8000678:	08000a09 	.word	0x08000a09
 800067c:	20000278 	.word	0x20000278
 8000680:	0800bd10 	.word	0x0800bd10
 8000684:	08000a59 	.word	0x08000a59
 8000688:	2000027c 	.word	0x2000027c

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2234      	movs	r2, #52	; 0x34
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00b fa02 	bl	800baa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemClock_Config+0xd0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a28      	ldr	r2, [pc, #160]	; (800075c <SystemClock_Config+0xd0>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemClock_Config+0xd0>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a22      	ldr	r2, [pc, #136]	; (8000760 <SystemClock_Config+0xd4>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <SystemClock_Config+0xd4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	; 0xa8
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fc8f 	bl	8004038 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000720:	f000 f9c8 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000728:	2303      	movs	r3, #3
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2105      	movs	r1, #5
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fbbc 	bl	8002ec0 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074e:	f000 f9b1 	bl	8000ab4 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_I2S1_Init+0x54>)
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <MX_I2S1_Init+0x58>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2S1_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_I2S1_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2S1_Init+0x54>)
 800077e:	2203      	movs	r2, #3
 8000780:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_I2S1_Init+0x54>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_I2S1_Init+0x54>)
 800078c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000790:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2S1_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2S1_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2S1_Init+0x54>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2S1_Init+0x54>)
 80007a6:	f000 fec5 	bl	8001534 <HAL_I2S_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80007b0:	f000 f980 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000190 	.word	0x20000190
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_SPI2_Init+0x68>)
 80007c6:	4a19      	ldr	r2, [pc, #100]	; (800082c <MX_SPI2_Init+0x6c>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_SPI2_Init+0x68>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_SPI2_Init+0x68>)
 80007d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_SPI2_Init+0x68>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI2_Init+0x68>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_SPI2_Init+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI2_Init+0x68>)
 80007ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI2_Init+0x68>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_SPI2_Init+0x68>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI2_Init+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_SPI2_Init+0x68>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI2_Init+0x68>)
 800080e:	220a      	movs	r2, #10
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_SPI2_Init+0x68>)
 8000814:	f003 feae 	bl	8004574 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800081e:	f000 f949 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200001d8 	.word	0x200001d8
 800082c:	40003800 	.word	0x40003800

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART1_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000868:	f003 ff0d 	bl	8004686 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f91f 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000230 	.word	0x20000230
 8000880:	40011000 	.word	0x40011000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	4b50      	ldr	r3, [pc, #320]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a4f      	ldr	r2, [pc, #316]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a48      	ldr	r2, [pc, #288]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a41      	ldr	r2, [pc, #260]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <MX_GPIO_Init+0x15c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_GPIO_Init+0x15c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x15c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a33      	ldr	r2, [pc, #204]	; (80009e0 <MX_GPIO_Init+0x15c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_GPIO_Init+0x15c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_GPIO_Init+0x15c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <MX_GPIO_Init+0x15c>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_GPIO_Init+0x15c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	210e      	movs	r1, #14
 8000946:	4827      	ldr	r0, [pc, #156]	; (80009e4 <MX_GPIO_Init+0x160>)
 8000948:	f000 fdc0 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SYNC_Pin|DE_OUTPUT_Pin|RE_OUTPUT_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f241 0130 	movw	r1, #4144	; 0x1030
 8000952:	4825      	ldr	r0, [pc, #148]	; (80009e8 <MX_GPIO_Init+0x164>)
 8000954:	f000 fdba 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <MX_GPIO_Init+0x168>)
 8000960:	f000 fdb4 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Start_knop_Pin Pauzeer_knop_Pin Stop_knop_Pin */
  GPIO_InitStruct.Pin = Start_knop_Pin|Pauzeer_knop_Pin|Stop_knop_Pin;
 8000964:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096e:	2301      	movs	r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	481d      	ldr	r0, [pc, #116]	; (80009f0 <MX_GPIO_Init+0x16c>)
 800097a:	f000 fbfb 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blauwe_LED_Pin Groene_LED_Pin Rode_LED_Pin */
  GPIO_InitStruct.Pin = Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin;
 800097e:	230e      	movs	r3, #14
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_GPIO_Init+0x160>)
 8000996:	f000 fbed 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SYNC_Pin DE_OUTPUT_Pin RE_OUTPUT_Pin */
  GPIO_InitStruct.Pin = SPI2_SYNC_Pin|DE_OUTPUT_Pin|RE_OUTPUT_Pin;
 800099a:	f241 0330 	movw	r3, #4144	; 0x1030
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_GPIO_Init+0x164>)
 80009b4:	f000 fbde 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDAC_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 80009b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_GPIO_Init+0x168>)
 80009d2:	f000 fbcf 	bl	8001174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	; 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020800 	.word	0x40020800

080009f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009fc:	f00a faa6 	bl	800af4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f007 fe05 	bl	8008610 <osDelay>
 8000a06:	e7fb      	b.n	8000a00 <StartDefaultTask+0xc>

08000a08 <StartKnopThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKnopThread */
void StartKnopThread(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKnopThread */
  /* Infinite loop */
    for(;;) {
        switch (huidig_status) {
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <StartKnopThread+0x4c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d816      	bhi.n	8000a48 <StartKnopThread+0x40>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <StartKnopThread+0x18>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a31 	.word	0x08000a31
 8000a24:	08000a37 	.word	0x08000a37
 8000a28:	08000a3d 	.word	0x08000a3d
 8000a2c:	08000a43 	.word	0x08000a43
            case STATUS_GEREED:
                zet_blauw_licht_aan();
 8000a30:	f7ff fd70 	bl	8000514 <zet_blauw_licht_aan>
                break;
 8000a34:	e009      	b.n	8000a4a <StartKnopThread+0x42>
            case STATUS_TEST_GESTART:
                zet_groen_licht_aan();
 8000a36:	f7ff fd83 	bl	8000540 <zet_groen_licht_aan>
                break;
 8000a3a:	e006      	b.n	8000a4a <StartKnopThread+0x42>
            case STATUS_TEST_GEPAUZEERD:
                groen_knipperend();
 8000a3c:	f7ff fdac 	bl	8000598 <groen_knipperend>
                break;
 8000a40:	e003      	b.n	8000a4a <StartKnopThread+0x42>
            case STATUS_TEST_KLAAR:
                zet_rood_licht_aan();
 8000a42:	f7ff fd93 	bl	800056c <zet_rood_licht_aan>
                break;
 8000a46:	e000      	b.n	8000a4a <StartKnopThread+0x42>
            default:
                break;
 8000a48:	bf00      	nop
        }
        osDelay(100);
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f007 fde0 	bl	8008610 <osDelay>
        switch (huidig_status) {
 8000a50:	e7de      	b.n	8000a10 <StartKnopThread+0x8>
 8000a52:	bf00      	nop
 8000a54:	20000280 	.word	0x20000280

08000a58 <StartLEDThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDThread */
void StartLEDThread(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDThread */
  /* Infinite loop */

	for(;;) {
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 8000a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <StartLEDThread+0x58>)
 8000a66:	f000 fd19 	bl	800149c <HAL_GPIO_ReadPin>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d103      	bne.n	8000a78 <StartLEDThread+0x20>
		update_status(STATUS_TEST_GESTART);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f7ff fda5 	bl	80005c0 <update_status>
 8000a76:	e016      	b.n	8000aa6 <StartLEDThread+0x4e>
		} else if (HAL_GPIO_ReadPin(PAUZEER_KNOP_PORT, PAUZEER_KNOP_PIN) == GPIO_PIN_RESET) {
 8000a78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <StartLEDThread+0x58>)
 8000a7e:	f000 fd0d 	bl	800149c <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d103      	bne.n	8000a90 <StartLEDThread+0x38>
		update_status(STATUS_TEST_GEPAUZEERD);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f7ff fd99 	bl	80005c0 <update_status>
 8000a8e:	e00a      	b.n	8000aa6 <StartLEDThread+0x4e>
		} else if (HAL_GPIO_ReadPin(STOP_KNOP_PORT, STOP_KNOP_PIN) == GPIO_PIN_RESET) {
 8000a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <StartLEDThread+0x58>)
 8000a96:	f000 fd01 	bl	800149c <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <StartLEDThread+0x4e>
		update_status(STATUS_TEST_KLAAR);
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f7ff fd8d 	bl	80005c0 <update_status>
		}

	   osDelay(100);
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f007 fdb2 	bl	8008610 <osDelay>
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 8000aac:	e7d8      	b.n	8000a60 <StartLEDThread+0x8>
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x54>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <HAL_MspInit+0x54>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x54>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_MspInit+0x54>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_MspInit+0x54>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_MspInit+0x54>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	210f      	movs	r1, #15
 8000b02:	f06f 0001 	mvn.w	r0, #1
 8000b06:	f000 fafe 	bl	8001106 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0a2      	sub	sp, #136	; 0x88
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	225c      	movs	r2, #92	; 0x5c
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00a ffb3 	bl	800baa4 <memset>
  if(hi2s->Instance==SPI1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a37      	ldr	r2, [pc, #220]	; (8000c20 <HAL_I2S_MspInit+0x108>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d167      	bne.n	8000c18 <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 75;
 8000b4c:	234b      	movs	r3, #75	; 0x4b
 8000b4e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 8000b54:	2306      	movs	r3, #6
 8000b56:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000b64:	2300      	movs	r3, #0
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fac1 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8000b78:	f7ff ff9c 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000b86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_I2S_MspInit+0x10c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000bd0:	23b0      	movs	r3, #176	; 0xb0
 8000bd2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be2:	2305      	movs	r3, #5
 8000be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <HAL_I2S_MspInit+0x110>)
 8000bf0:	f000 fac0 	bl	8001174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c06:	2305      	movs	r3, #5
 8000c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <HAL_I2S_MspInit+0x114>)
 8000c14:	f000 faae 	bl	8001174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3788      	adds	r7, #136	; 0x88
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40013000 	.word	0x40013000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_SPI_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000c8a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_SPI_MspInit+0x8c>)
 8000ca8:	f000 fa64 	bl	8001174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40003800 	.word	0x40003800
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12b      	bne.n	8000d3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1a:	23c0      	movs	r3, #192	; 0xc0
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d36:	f000 fa1d 	bl	8001174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40011000 	.word	0x40011000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f8a2 	bl	8000ec8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d84:	f009 f87c 	bl	8009e80 <xTaskGetSchedulerState>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d001      	beq.n	8000d92 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d8e:	f009 fe63 	bl	800aa58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <OTG_FS_IRQHandler+0x10>)
 8000d9e:	f000 ff1d 	bl	8001bdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20006178 	.word	0x20006178

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f00a fe1d 	bl	800ba3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fbed 	bl	80005e0 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000e14:	0800bdbc 	.word	0x0800bdbc
  ldr r2, =_sbss
 8000e18:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000e1c:	200068ac 	.word	0x200068ac

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f94f 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe32 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f967 	bl	800115a <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f92f 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000284 	.word	0x20000284

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000284 	.word	0x20000284

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff29 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff3e 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff31 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e165      	b.n	800145c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f040 8154 	bne.w	8001456 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d130      	bne.n	8001228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b03      	cmp	r3, #3
 8001232:	d017      	beq.n	8001264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80ae 	beq.w	8001456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a5c      	ldr	r2, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <HAL_GPIO_Init+0x300>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001316:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x308>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x21a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_GPIO_Init+0x30c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x216>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x310>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x212>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <HAL_GPIO_Init+0x314>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x20e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_GPIO_Init+0x318>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x20a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x31c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x206>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a49      	ldr	r2, [pc, #292]	; (8001494 <HAL_GPIO_Init+0x320>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x202>
 8001372:	2306      	movs	r3, #6
 8001374:	e00c      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 8001376:	2307      	movs	r3, #7
 8001378:	e00a      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800137a:	2305      	movs	r3, #5
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800137e:	2304      	movs	r3, #4
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x21c>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	; (8001478 <HAL_GPIO_Init+0x304>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a26      	ldr	r2, [pc, #152]	; (8001498 <HAL_GPIO_Init+0x324>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <HAL_GPIO_Init+0x324>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_GPIO_Init+0x324>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_GPIO_Init+0x324>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_GPIO_Init+0x324>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f ae96 	bls.w	8001190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40021400 	.word	0x40021400
 8001494:	40021800 	.word	0x40021800
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001510:	887a      	ldrh	r2, [r7, #2]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	041a      	lsls	r2, r3, #16
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43d9      	mvns	r1, r3
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	400b      	ands	r3, r1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0e1      	b.n	800170a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a6d      	ldr	r2, [pc, #436]	; (8001714 <HAL_I2S_Init+0x1e0>)
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fad9 	bl	8000b18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800157c:	f023 030f 	bic.w	r3, r3, #15
 8001580:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2202      	movs	r2, #2
 8001588:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d06f      	beq.n	8001672 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800159a:	2310      	movs	r3, #16
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e001      	b.n	80015a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80015a0:	2320      	movs	r3, #32
 80015a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d802      	bhi.n	80015b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_I2S_Init+0x1e4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d004      	beq.n	80015c6 <HAL_I2S_Init+0x92>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_I2S_Init+0x1e8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d104      	bne.n	80015d0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f002 f8be 	bl	8003748 <HAL_RCCEx_GetPeriphCLKFreq>
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	e003      	b.n	80015d8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80015d0:	2002      	movs	r0, #2
 80015d2:	f002 f8b9 	bl	8003748 <HAL_RCCEx_GetPeriphCLKFreq>
 80015d6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e0:	d125      	bne.n	800162e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d010      	beq.n	800160c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	3305      	adds	r3, #5
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	e01f      	b.n	800164c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	fbb2 f2f3 	udiv	r2, r2, r3
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	461a      	mov	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	3305      	adds	r3, #5
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	e00e      	b.n	800164c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fbb2 f2f3 	udiv	r2, r2, r3
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	3305      	adds	r3, #5
 800164a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4a34      	ldr	r2, [pc, #208]	; (8001720 <HAL_I2S_Init+0x1ec>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	e003      	b.n	800167a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001672:	2302      	movs	r3, #2
 8001674:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d902      	bls.n	8001686 <HAL_I2S_Init+0x152>
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d907      	bls.n	8001696 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f043 0210 	orr.w	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e039      	b.n	800170a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	ea42 0103 	orr.w	r1, r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016b4:	f023 030f 	bic.w	r3, r3, #15
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6851      	ldr	r1, [r2, #4]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6892      	ldr	r2, [r2, #8]
 80016c0:	4311      	orrs	r1, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68d2      	ldr	r2, [r2, #12]
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6992      	ldr	r2, [r2, #24]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016d8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b30      	cmp	r3, #48	; 0x30
 80016e0:	d003      	beq.n	80016ea <HAL_I2S_Init+0x1b6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2bb0      	cmp	r3, #176	; 0xb0
 80016e8:	d107      	bne.n	80016fa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016f8:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800181b 	.word	0x0800181b
 8001718:	40003800 	.word	0x40003800
 800171c:	40003c00 	.word	0x40003c00
 8001720:	cccccccd 	.word	0xcccccccd

08001724 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	1c9a      	adds	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10e      	bne.n	80017b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb8 	bl	8001724 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	b292      	uxth	r2, r2
 80017d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	1c9a      	adds	r2, r3, #2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10e      	bne.n	8001812 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001802:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff93 	bl	8001738 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b04      	cmp	r3, #4
 8001834:	d13a      	bne.n	80018ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d109      	bne.n	8001854 <I2S_IRQHandler+0x3a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d102      	bne.n	8001854 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffb4 	bl	80017bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185a:	2b40      	cmp	r3, #64	; 0x40
 800185c:	d126      	bne.n	80018ac <I2S_IRQHandler+0x92>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b20      	cmp	r3, #32
 800186a:	d11f      	bne.n	80018ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800187a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff50 	bl	800174c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d136      	bne.n	8001926 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d109      	bne.n	80018d6 <I2S_IRQHandler+0xbc>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	2b80      	cmp	r3, #128	; 0x80
 80018ce:	d102      	bne.n	80018d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff45 	bl	8001760 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d122      	bne.n	8001926 <I2S_IRQHandler+0x10c>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d11b      	bne.n	8001926 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f043 0204 	orr.w	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff13 	bl	800174c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800192e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001930:	b08f      	sub	sp, #60	; 0x3c
 8001932:	af0a      	add	r7, sp, #40	; 0x28
 8001934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e116      	b.n	8001b6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f009 fce8 	bl	800b330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2203      	movs	r2, #3
 8001964:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fa57 	bl	8004e32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	687e      	ldr	r6, [r7, #4]
 800198c:	466d      	mov	r5, sp
 800198e:	f106 0410 	add.w	r4, r6, #16
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800199e:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a2:	1d33      	adds	r3, r6, #4
 80019a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f003 f92e 	bl	8004c08 <USB_CoreInit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2202      	movs	r2, #2
 80019b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0d7      	b.n	8001b6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fa45 	bl	8004e54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	e04a      	b.n	8001a66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	333d      	adds	r3, #61	; 0x3d
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	333c      	adds	r3, #60	; 0x3c
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	b298      	uxth	r0, r3
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3344      	adds	r3, #68	; 0x44
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3340      	adds	r3, #64	; 0x40
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3348      	adds	r3, #72	; 0x48
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	334c      	adds	r3, #76	; 0x4c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	3354      	adds	r3, #84	; 0x54
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	3301      	adds	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3af      	bcc.n	80019d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e044      	b.n	8001b00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	3301      	adds	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3b5      	bcc.n	8001a76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	687e      	ldr	r6, [r7, #4]
 8001b12:	466d      	mov	r5, sp
 8001b14:	f106 0410 	add.w	r4, r6, #16
 8001b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b24:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b28:	1d33      	adds	r3, r6, #4
 8001b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f003 f9dd 	bl	8004eec <USB_DevInit>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e014      	b.n	8001b6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f001 f98b 	bl	8002e78 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 fb1f 	bl	80061aa <USB_DevDisconnect>

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_PCD_Start+0x1c>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e020      	b.n	8001bd4 <HAL_PCD_Start+0x5e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d109      	bne.n	8001bb6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 f928 	bl	8004e10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 facf 	bl	8006168 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b08d      	sub	sp, #52	; 0x34
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fb8d 	bl	8006312 <USB_GetMode>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 84b7 	bne.w	800256e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 faf1 	bl	80061ec <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 84ad 	beq.w	800256c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 fade 	bl	80061ec <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d107      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f002 0202 	and.w	r2, r2, #2
 8001c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 facc 	bl	80061ec <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d161      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0210 	bic.w	r2, r2, #16
 8001c6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	0c5b      	lsrs	r3, r3, #17
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d124      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d035      	beq.n	8001d12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6a38      	ldr	r0, [r7, #32]
 8001cba:	f004 f903 	bl	8005ec4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cca:	441a      	add	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cdc:	441a      	add	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	621a      	str	r2, [r3, #32]
 8001ce2:	e016      	b.n	8001d12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	0c5b      	lsrs	r3, r3, #17
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	2b06      	cmp	r3, #6
 8001cee:	d110      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6a38      	ldr	r0, [r7, #32]
 8001cfc:	f004 f8e2 	bl	8005ec4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0c:	441a      	add	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0210 	orr.w	r2, r2, #16
 8001d20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fa60 	bl	80061ec <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d36:	f040 80a7 	bne.w	8001e88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fa65 	bl	8006212 <USB_ReadDevAllOutEpInterrupt>
 8001d48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d4a:	e099      	b.n	8001e80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 808e 	beq.w	8001e74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fa89 	bl	800627a <USB_ReadDevOutEPInterrupt>
 8001d68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d80:	461a      	mov	r2, r3
 8001d82:	2301      	movs	r3, #1
 8001d84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 feef 	bl	8002b6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00c      	beq.n	8001db2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da4:	461a      	mov	r2, r3
 8001da6:	2308      	movs	r3, #8
 8001da8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 ffc5 	bl	8002d3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2310      	movs	r3, #16
 8001dcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d030      	beq.n	8001e3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d109      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	78db      	ldrb	r3, [r3, #3]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d108      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f009 fbae 	bl	800b584 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e34:	461a      	mov	r2, r3
 8001e36:	2302      	movs	r3, #2
 8001e38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e50:	461a      	mov	r2, r3
 8001e52:	2320      	movs	r3, #32
 8001e54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3301      	adds	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f47f af62 	bne.w	8001d4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 f9ad 	bl	80061ec <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e9c:	f040 80db 	bne.w	8002056 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f004 f9ce 	bl	8006246 <USB_ReadDevAllInEpInterrupt>
 8001eaa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001eb0:	e0cd      	b.n	800204e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80c2 	beq.w	8002042 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 f9f4 	bl	80062b6 <USB_ReadDevInEPInterrupt>
 8001ece:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d057      	beq.n	8001f8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69f9      	ldr	r1, [r7, #28]
 8001ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001efa:	4013      	ands	r3, r2
 8001efc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d132      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	334c      	adds	r3, #76	; 0x4c
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4403      	add	r3, r0
 8001f38:	3348      	adds	r3, #72	; 0x48
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4419      	add	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	334c      	adds	r3, #76	; 0x4c
 8001f4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d113      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x3a2>
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3354      	adds	r3, #84	; 0x54
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d108      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f76:	461a      	mov	r2, r3
 8001f78:	2101      	movs	r1, #1
 8001f7a:	f004 f9fb 	bl	8006374 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f009 fa78 	bl	800b47a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2340      	movs	r3, #64	; 0x40
 8001fdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d023      	beq.n	8002030 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fea:	6a38      	ldr	r0, [r7, #32]
 8001fec:	f003 f8dc 	bl	80051a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3338      	adds	r3, #56	; 0x38
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	3304      	adds	r3, #4
 8002002:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	78db      	ldrb	r3, [r3, #3]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2200      	movs	r2, #0
 8002010:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f009 fac5 	bl	800b5a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800202a:	461a      	mov	r2, r3
 800202c:	2302      	movs	r3, #2
 800202e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800203a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fd08 	bl	8002a52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	f47f af2e 	bne.w	8001eb2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f004 f8c6 	bl	80061ec <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800206a:	d122      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002092:	2100      	movs	r1, #0
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f009 fc3f 	bl	800b918 <HAL_PCDEx_LPM_Callback>
 800209a:	e002      	b.n	80020a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f009 fa63 	bl	800b568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f898 	bl	80061ec <USB_ReadInterrupts>
 80020bc:	4603      	mov	r3, r0
 80020be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c6:	d112      	bne.n	80020ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d102      	bne.n	80020de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f009 fa1f 	bl	800b51c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020ec:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 f87a 	bl	80061ec <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002102:	d121      	bne.n	8002148 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002112:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d111      	bne.n	8002142 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002138:	2101      	movs	r1, #1
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f009 fbec 	bl	800b918 <HAL_PCDEx_LPM_Callback>
 8002140:	e002      	b.n	8002148 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f009 f9ea 	bl	800b51c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f004 f84d 	bl	80061ec <USB_ReadInterrupts>
 8002152:	4603      	mov	r3, r0
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215c:	f040 80b7 	bne.w	80022ce <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2110      	movs	r1, #16
 800217a:	4618      	mov	r0, r3
 800217c:	f003 f814 	bl	80051a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002184:	e046      	b.n	8002214 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002192:	461a      	mov	r2, r3
 8002194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002198:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021aa:	0151      	lsls	r1, r2, #5
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	440a      	add	r2, r1
 80021b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c6:	461a      	mov	r2, r3
 80021c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fe:	0151      	lsls	r1, r2, #5
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	440a      	add	r2, r1
 8002204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800220c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	3301      	adds	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221a:	429a      	cmp	r2, r3
 800221c:	d3b3      	bcc.n	8002186 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800222c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002230:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224a:	f043 030b 	orr.w	r3, r3, #11
 800224e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002260:	f043 030b 	orr.w	r3, r3, #11
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	e015      	b.n	8002294 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002276:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800227a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800227e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228e:	f043 030b 	orr.w	r3, r3, #11
 8002292:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022b8:	461a      	mov	r2, r3
 80022ba:	f004 f85b 	bl	8006374 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 ff8a 	bl	80061ec <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e2:	d124      	bne.n	800232e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 f820 	bl	800632e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 ffd5 	bl	80052a2 <USB_GetDevSpeed>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681c      	ldr	r4, [r3, #0]
 8002304:	f000 fec2 	bl	800308c <HAL_RCC_GetHCLKFreq>
 8002308:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4620      	mov	r0, r4
 8002314:	f002 fcda 	bl	8004ccc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f009 f8d6 	bl	800b4ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800232c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 ff5a 	bl	80061ec <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d10a      	bne.n	8002358 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f009 f8b3 	bl	800b4ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f002 0208 	and.w	r2, r2, #8
 8002356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 ff45 	bl	80061ec <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d122      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002378:	2301      	movs	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	e014      	b.n	80023a8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fb27 	bl	80029f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	3301      	adds	r3, #1
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3e5      	bcc.n	800237e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 ff18 	bl	80061ec <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023c6:	d13b      	bne.n	8002440 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c8:	2301      	movs	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	e02b      	b.n	8002426 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	3340      	adds	r3, #64	; 0x40
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d115      	bne.n	8002420 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	da12      	bge.n	8002420 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	333f      	adds	r3, #63	; 0x3f
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fae8 	bl	80029f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3301      	adds	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	429a      	cmp	r2, r3
 800242e:	d3ce      	bcc.n	80023ce <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800243e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fed1 	bl	80061ec <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002454:	d155      	bne.n	8002502 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002456:	2301      	movs	r3, #1
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	e045      	b.n	80024e8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d12e      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002484:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	da2b      	bge.n	80024e2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002496:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800249a:	429a      	cmp	r2, r3
 800249c:	d121      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024de:	6053      	str	r3, [r2, #4]
            break;
 80024e0:	e007      	b.n	80024f2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	3301      	adds	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d3b4      	bcc.n	800245c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fe70 	bl	80061ec <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d10a      	bne.n	800252e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f009 f857 	bl	800b5cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800252c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f003 fe5a 	bl	80061ec <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d115      	bne.n	800256e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f009 f847 	bl	800b5e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	e000      	b.n	800256e <HAL_PCD_IRQHandler+0x992>
      return;
 800256c:	bf00      	nop
    }
  }
}
 800256e:	3734      	adds	r7, #52	; 0x34
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_PCD_SetAddress+0x1a>
 800258a:	2302      	movs	r3, #2
 800258c:	e013      	b.n	80025b6 <HAL_PCD_SetAddress+0x42>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fdb8 	bl	800611c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	4608      	mov	r0, r1
 80025c8:	4611      	mov	r1, r2
 80025ca:	461a      	mov	r2, r3
 80025cc:	4603      	mov	r3, r0
 80025ce:	70fb      	strb	r3, [r7, #3]
 80025d0:	460b      	mov	r3, r1
 80025d2:	803b      	strh	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da0f      	bge.n	8002604 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	3338      	adds	r3, #56	; 0x38
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	705a      	strb	r2, [r3, #1]
 8002602:	e00f      	b.n	8002624 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	f003 020f 	and.w	r2, r3, #15
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	3304      	adds	r3, #4
 800261c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002630:	883a      	ldrh	r2, [r7, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	78ba      	ldrb	r2, [r7, #2]
 800263a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800264e:	78bb      	ldrb	r3, [r7, #2]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d102      	bne.n	800265a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_PCD_EP_Open+0xaa>
 8002664:	2302      	movs	r3, #2
 8002666:	e00e      	b.n	8002686 <HAL_PCD_EP_Open+0xc8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fe38 	bl	80052ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002684:	7afb      	ldrb	r3, [r7, #11]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800269a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	da0f      	bge.n	80026c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	f003 020f 	and.w	r2, r3, #15
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	3338      	adds	r3, #56	; 0x38
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	705a      	strb	r2, [r3, #1]
 80026c0:	e00f      	b.n	80026e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_PCD_EP_Close+0x6e>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e00e      	b.n	800271a <HAL_PCD_EP_Close+0x8c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	4618      	mov	r0, r3
 800270c:	f002 fe76 	bl	80053fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	460b      	mov	r3, r1
 8002730:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f003 020f 	and.w	r2, r3, #15
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2200      	movs	r2, #0
 800275c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2200      	movs	r2, #0
 8002762:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	b2da      	uxtb	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800277e:	7afb      	ldrb	r3, [r7, #11]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6979      	ldr	r1, [r7, #20]
 8002796:	f003 f955 	bl	8005a44 <USB_EP0StartXfer>
 800279a:	e008      	b.n	80027ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6979      	ldr	r1, [r7, #20]
 80027aa:	f002 ff03 	bl	80055b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 020f 	and.w	r2, r3, #15
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	460b      	mov	r3, r1
 80027f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f8:	7afb      	ldrb	r3, [r7, #11]
 80027fa:	f003 020f 	and.w	r2, r3, #15
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	3338      	adds	r3, #56	; 0x38
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2201      	movs	r2, #1
 8002826:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002828:	7afb      	ldrb	r3, [r7, #11]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	b2da      	uxtb	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002842:	7afb      	ldrb	r3, [r7, #11]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6979      	ldr	r1, [r7, #20]
 800285a:	f003 f8f3 	bl	8005a44 <USB_EP0StartXfer>
 800285e:	e008      	b.n	8002872 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	6979      	ldr	r1, [r7, #20]
 800286e:	f002 fea1 	bl	80055b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d901      	bls.n	800289a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e050      	b.n	800293c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800289a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da0f      	bge.n	80028c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	3338      	adds	r3, #56	; 0x38
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00d      	b.n	80028de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	3304      	adds	r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_PCD_EP_SetStall+0x82>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e01e      	b.n	800293c <HAL_PCD_EP_SetStall+0xc0>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68f9      	ldr	r1, [r7, #12]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fb31 	bl	8005f74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	b2d9      	uxtb	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800292c:	461a      	mov	r2, r3
 800292e:	f003 fd21 	bl	8006374 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 020f 	and.w	r2, r3, #15
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d901      	bls.n	8002962 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e042      	b.n	80029e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002966:	2b00      	cmp	r3, #0
 8002968:	da0f      	bge.n	800298a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 020f 	and.w	r2, r3, #15
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	3338      	adds	r3, #56	; 0x38
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	3304      	adds	r3, #4
 8002980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	705a      	strb	r2, [r3, #1]
 8002988:	e00f      	b.n	80029aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 020f 	and.w	r2, r3, #15
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_PCD_EP_ClrStall+0x86>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e00e      	b.n	80029e8 <HAL_PCD_EP_ClrStall+0xa4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68f9      	ldr	r1, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fb39 	bl	8006050 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da0c      	bge.n	8002a1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	3338      	adds	r3, #56	; 0x38
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	3304      	adds	r3, #4
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e00c      	b.n	8002a38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	f003 020f 	and.w	r2, r3, #15
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	3304      	adds	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68f9      	ldr	r1, [r7, #12]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 f958 	bl	8005cf4 <USB_EPStopXfer>
 8002a44:	4603      	mov	r3, r0
 8002a46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a48:	7afb      	ldrb	r3, [r7, #11]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b08a      	sub	sp, #40	; 0x28
 8002a56:	af02      	add	r7, sp, #8
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3338      	adds	r3, #56	; 0x38
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d901      	bls.n	8002a8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06c      	b.n	8002b64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d902      	bls.n	8002aa6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3303      	adds	r3, #3
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aae:	e02b      	b.n	8002b08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d902      	bls.n	8002acc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3303      	adds	r3, #3
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6919      	ldr	r1, [r3, #16]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4603      	mov	r3, r0
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f003 f9ac 	bl	8005e48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	441a      	add	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	441a      	add	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d809      	bhi.n	8002b32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d203      	bcs.n	8002b32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1be      	bne.n	8002ab0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d811      	bhi.n	8002b62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	2201      	movs	r2, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	6939      	ldr	r1, [r7, #16]
 8002b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b5e:	4013      	ands	r3, r2
 8002b60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	333c      	adds	r3, #60	; 0x3c
 8002b84:	3304      	adds	r3, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d17b      	bne.n	8002c9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4a61      	ldr	r2, [pc, #388]	; (8002d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	f240 80b9 	bls.w	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80b3 	beq.w	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	6093      	str	r3, [r2, #8]
 8002bd6:	e0a7      	b.n	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	6093      	str	r3, [r2, #8]
 8002bf4:	e098      	b.n	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 8093 	bne.w	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4a4b      	ldr	r2, [pc, #300]	; (8002d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d90f      	bls.n	8002c2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c20:	461a      	mov	r2, r3
 8002c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	e07e      	b.n	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	0159      	lsls	r1, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	1ad2      	subs	r2, r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d114      	bne.n	8002c8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c74:	461a      	mov	r2, r3
 8002c76:	2101      	movs	r1, #1
 8002c78:	f003 fb7c 	bl	8006374 <USB_EP0_OutStart>
 8002c7c:	e006      	b.n	8002c8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	441a      	add	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f008 fbd6 	bl	800b444 <HAL_PCD_DataOutStageCallback>
 8002c98:	e046      	b.n	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d124      	bne.n	8002cec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cbe:	6093      	str	r3, [r2, #8]
 8002cc0:	e032      	b.n	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2320      	movs	r3, #32
 8002cdc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f008 fbad 	bl	800b444 <HAL_PCD_DataOutStageCallback>
 8002cea:	e01d      	b.n	8002d28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d114      	bne.n	8002d1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d108      	bne.n	8002d1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d14:	461a      	mov	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	f003 fb2c 	bl	8006374 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f008 fb8e 	bl	800b444 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	4f54300a 	.word	0x4f54300a
 8002d38:	4f54310a 	.word	0x4f54310a

08002d3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	333c      	adds	r3, #60	; 0x3c
 8002d54:	3304      	adds	r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d90e      	bls.n	8002d90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f008 fb45 	bl	800b420 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d90c      	bls.n	8002db8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d108      	bne.n	8002db8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002db0:	461a      	mov	r2, r3
 8002db2:	2101      	movs	r1, #1
 8002db4:	f003 fade 	bl	8006374 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	4f54300a 	.word	0x4f54300a

08002dc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d107      	bne.n	8002df6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002de6:	883b      	ldrh	r3, [r7, #0]
 8002de8:	0419      	lsls	r1, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
 8002df4:	e028      	b.n	8002e48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	4413      	add	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e00d      	b.n	8002e26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	3340      	adds	r3, #64	; 0x40
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	3301      	adds	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d3ec      	bcc.n	8002e0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e30:	883b      	ldrh	r3, [r7, #0]
 8002e32:	0418      	lsls	r0, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	4302      	orrs	r2, r0
 8002e40:	3340      	adds	r3, #64	; 0x40
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	f043 0303 	orr.w	r3, r3, #3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cc      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d90c      	bls.n	8002efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b63      	ldr	r3, [pc, #396]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b8      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f14:	4b59      	ldr	r3, [pc, #356]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a58      	ldr	r2, [pc, #352]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a52      	ldr	r2, [pc, #328]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	494d      	ldr	r1, [pc, #308]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d044      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d119      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e067      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4934      	ldr	r1, [pc, #208]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fd ff9e 	bl	8000ef0 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fd ff9a 	bl	8000ef0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d20c      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e032      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4916      	ldr	r1, [pc, #88]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	490e      	ldr	r1, [pc, #56]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003046:	f000 fdc7 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fefe 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00
 800307c:	40023800 	.word	0x40023800
 8003080:	0800bd34 	.word	0x0800bd34
 8003084:	20000000 	.word	0x20000000
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a9b      	lsrs	r3, r3, #10
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	0800bd44 	.word	0x0800bd44

080030cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030d0:	f7ff ffdc 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0b5b      	lsrs	r3, r3, #13
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	; (80030f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	0800bd44 	.word	0x0800bd44

080030f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800312c:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800312e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003132:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	496c      	ldr	r1, [pc, #432]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800314a:	2301      	movs	r3, #1
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800315a:	4b64      	ldr	r3, [pc, #400]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003160:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	4960      	ldr	r1, [pc, #384]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003178:	2301      	movs	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d017      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003188:	4b58      	ldr	r3, [pc, #352]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800318a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4955      	ldr	r1, [pc, #340]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d101      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80031a8:	2301      	movs	r3, #1
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80031b4:	2301      	movs	r3, #1
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031c4:	4b49      	ldr	r3, [pc, #292]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	4946      	ldr	r1, [pc, #280]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e2:	d101      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80031e4:	2301      	movs	r3, #1
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80031f0:	2301      	movs	r3, #1
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 808a 	beq.w	8003316 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800321e:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a33      	ldr	r2, [pc, #204]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800322a:	f7fd fe61 	bl	8000ef0 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7fd fe5d 	bl	8000ef0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e278      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003250:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02f      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003268:	6a3a      	ldr	r2, [r7, #32]
 800326a:	429a      	cmp	r2, r3
 800326c:	d028      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326e:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003276:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d114      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003296:	f7fd fe2b 	bl	8000ef0 <HAL_GetTick>
 800329a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	e00a      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fd fe27 	bl	8000ef0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e240      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ee      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032cc:	d114      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	4902      	ldr	r1, [pc, #8]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]
 80032e8:	e00c      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470e40 	.word	0x42470e40
 80032f8:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a49      	ldr	r2, [pc, #292]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	4944      	ldr	r1, [pc, #272]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003312:	4313      	orrs	r3, r2
 8003314:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003328:	4b3f      	ldr	r3, [pc, #252]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800332a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003338:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003346:	4937      	ldr	r1, [pc, #220]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800335a:	4b32      	ldr	r3, [pc, #200]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003360:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003368:	492e      	ldr	r1, [pc, #184]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d011      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003382:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4926      	ldr	r1, [pc, #152]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339a:	d101      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	491a      	ldr	r1, [pc, #104]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d011      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	4911      	ldr	r1, [pc, #68]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ec:	d101      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80033ee:	2301      	movs	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d005      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003400:	f040 80ff 	bne.w	8003602 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800340a:	f7fd fd71 	bl	8000ef0 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003410:	e00e      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003412:	f7fd fd6d 	bl	8000ef0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d907      	bls.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e188      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003424:	40023800 	.word	0x40023800
 8003428:	424711e0 	.word	0x424711e0
 800342c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003430:	4b7e      	ldr	r3, [pc, #504]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ea      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003458:	2b00      	cmp	r3, #0
 800345a:	d028      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d124      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003464:	4b71      	ldr	r3, [pc, #452]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	3301      	adds	r3, #1
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003476:	4b6d      	ldr	r3, [pc, #436]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347c:	0e1b      	lsrs	r3, r3, #24
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	431a      	orrs	r2, r3
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	3b01      	subs	r3, #1
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	431a      	orrs	r2, r3
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	071b      	lsls	r3, r3, #28
 80034a6:	4961      	ldr	r1, [pc, #388]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d004      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d035      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d8:	d130      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	3301      	adds	r3, #1
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034ec:	4b4f      	ldr	r3, [pc, #316]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	0f1b      	lsrs	r3, r3, #28
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	019b      	lsls	r3, r3, #6
 8003504:	431a      	orrs	r2, r3
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	431a      	orrs	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	071b      	lsls	r3, r3, #28
 800351c:	4943      	ldr	r1, [pc, #268]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003524:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352a:	f023 021f 	bic.w	r2, r3, #31
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	493d      	ldr	r1, [pc, #244]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d029      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003550:	d124      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	3301      	adds	r3, #1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003564:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356a:	0f1b      	lsrs	r3, r3, #28
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	019b      	lsls	r3, r3, #6
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	3b01      	subs	r3, #1
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	431a      	orrs	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	071b      	lsls	r3, r3, #28
 8003594:	4925      	ldr	r1, [pc, #148]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d016      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	3b01      	subs	r3, #1
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	4917      	ldr	r1, [pc, #92]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fd fc88 	bl	8000ef0 <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035e4:	f7fd fc84 	bl	8000ef0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e09f      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 8095 	bne.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003610:	f7fd fc6e 	bl	8000ef0 <HAL_GetTick>
 8003614:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003616:	e00f      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003618:	f7fd fc6a 	bl	8000ef0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d908      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e085      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	42470068 	.word	0x42470068
 8003634:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003638:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003644:	d0e8      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02b      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	2b00      	cmp	r3, #0
 800366c:	d127      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	3301      	adds	r3, #1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	4928      	ldr	r1, [pc, #160]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	3b01      	subs	r3, #1
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	4922      	ldr	r1, [pc, #136]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01d      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d2:	d118      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	0e1b      	lsrs	r3, r3, #24
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	019b      	lsls	r3, r3, #6
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	3b01      	subs	r3, #1
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	4910      	ldr	r1, [pc, #64]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003706:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800370c:	f7fd fbf0 	bl	8000ef0 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003714:	f7fd fbec 	bl	8000ef0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e007      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800372e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003732:	d1ef      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3730      	adds	r7, #48	; 0x30
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	42470070 	.word	0x42470070

08003748 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	2b07      	cmp	r3, #7
 800376e:	f200 8224 	bhi.w	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	0800397b 	.word	0x0800397b
 800377c:	08003aa5 	.word	0x08003aa5
 8003780:	08003bbb 	.word	0x08003bbb
 8003784:	08003799 	.word	0x08003799
 8003788:	08003bbb 	.word	0x08003bbb
 800378c:	08003bbb 	.word	0x08003bbb
 8003790:	08003bbb 	.word	0x08003bbb
 8003794:	08003799 	.word	0x08003799
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003798:	4ba8      	ldr	r3, [pc, #672]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800379a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ae:	f000 80d6 	beq.w	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037b8:	f200 80dd 	bhi.w	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037c2:	f000 809f 	beq.w	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037cc:	f200 80d3 	bhi.w	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d6:	d05b      	beq.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037de:	f200 80ca 	bhi.w	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037e8:	f000 80b6 	beq.w	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037f2:	f200 80c0 	bhi.w	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037fc:	f000 8082 	beq.w	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003806:	f200 80b6 	bhi.w	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003816:	d03b      	beq.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003818:	e0ad      	b.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003826:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003830:	4a83      	ldr	r2, [pc, #524]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e008      	b.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800383a:	4b80      	ldr	r3, [pc, #512]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003844:	4a7f      	ldr	r2, [pc, #508]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800384c:	4b7b      	ldr	r3, [pc, #492]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	0e1b      	lsrs	r3, r3, #24
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800385a:	4b78      	ldr	r3, [pc, #480]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	fb03 f202 	mul.w	r2, r3, r2
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003874:	4b71      	ldr	r3, [pc, #452]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	61fb      	str	r3, [r7, #28]
          break;
 800388e:	e073      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003890:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800389c:	4b67      	ldr	r3, [pc, #412]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a6:	4a66      	ldr	r2, [pc, #408]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e008      	b.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80038b0:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ba:	4a62      	ldr	r2, [pc, #392]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80038c2:	4b5e      	ldr	r3, [pc, #376]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80038d0:	4b5a      	ldr	r3, [pc, #360]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	fb03 f202 	mul.w	r2, r3, r2
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	3301      	adds	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	61fb      	str	r3, [r7, #28]
          break;
 8003902:	e039      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003910:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003918:	4a49      	ldr	r2, [pc, #292]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e007      	b.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003922:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392a:	4a46      	ldr	r2, [pc, #280]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003932:	4b42      	ldr	r3, [pc, #264]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0f1b      	lsrs	r3, r3, #28
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800393e:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	fb03 f202 	mul.w	r2, r3, r2
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	61fb      	str	r3, [r7, #28]
          break;
 8003956:	e00f      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800395a:	61fb      	str	r3, [r7, #28]
          break;
 800395c:	e00c      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800396a:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800396c:	61fb      	str	r3, [r7, #28]
          break;
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003970:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003972:	61fb      	str	r3, [r7, #28]
          break;
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003976:	bf00      	nop
        }
      }
      break;
 8003978:	e11f      	b.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800397a:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003980:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800398c:	d079      	beq.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003994:	f200 8082 	bhi.w	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399e:	d03c      	beq.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a6:	d879      	bhi.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b4:	d172      	bne.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80039b6:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80039b8:	61fb      	str	r3, [r7, #28]
          break;
 80039ba:	e072      	b.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039bc:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c8:	d109      	bne.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80039ca:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e008      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e8:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0a:	0f1b      	lsrs	r3, r3, #28
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	61fb      	str	r3, [r7, #28]
          break;
 8003a18:	e043      	b.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d111      	bne.n	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e010      	b.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	007a1200 	.word	0x007a1200
 8003a48:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a4c:	4b5e      	ldr	r3, [pc, #376]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003a5c:	4b5a      	ldr	r3, [pc, #360]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003a6e:	4b56      	ldr	r3, [pc, #344]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	0f1b      	lsrs	r3, r3, #28
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	61fb      	str	r3, [r7, #28]
          break;
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a82:	4b51      	ldr	r3, [pc, #324]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8e:	d102      	bne.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003a90:	4b4f      	ldr	r3, [pc, #316]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003a92:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003a94:	e005      	b.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003a98:	61fb      	str	r3, [r7, #28]
          break;
 8003a9a:	e002      	b.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
          break;
 8003aa0:	bf00      	nop
        }
      }
      break;
 8003aa2:	e08a      	b.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003aa4:	4b48      	ldr	r3, [pc, #288]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aaa:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003ab6:	d06f      	beq.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003abe:	d878      	bhi.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac6:	d03c      	beq.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ace:	d870      	bhi.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003adc:	d169      	bne.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ade:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003ae0:	61fb      	str	r3, [r7, #28]
          break;
 8003ae2:	e069      	b.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ae4:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af0:	d109      	bne.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003af2:	4b35      	ldr	r3, [pc, #212]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afc:	4a34      	ldr	r2, [pc, #208]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e008      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b10:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1e:	099b      	lsrs	r3, r3, #6
 8003b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b2c:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b32:	0f1b      	lsrs	r3, r3, #28
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	61fb      	str	r3, [r7, #28]
          break;
 8003b40:	e03a      	b.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b42:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4e:	d108      	bne.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e007      	b.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0f1b      	lsrs	r3, r3, #28
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	61fb      	str	r3, [r7, #28]
          break;
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba4:	d102      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003ba8:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003baa:	e005      	b.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003bae:	61fb      	str	r3, [r7, #28]
          break;
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
          break;
 8003bb6:	bf00      	nop
        }
      }
      break;
 8003bb8:	bf00      	nop
    }
  }
  return frequency;
 8003bba:	69fb      	ldr	r3, [r7, #28]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3724      	adds	r7, #36	; 0x24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	007a1200 	.word	0x007a1200
 8003bd4:	00bb8000 	.word	0x00bb8000

08003bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b0ae      	sub	sp, #184	; 0xb8
 8003bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bfe:	4bcb      	ldr	r3, [pc, #812]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	f200 8206 	bhi.w	8004018 <HAL_RCC_GetSysClockFreq+0x440>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08004019 	.word	0x08004019
 8003c1c:	08004019 	.word	0x08004019
 8003c20:	08004019 	.word	0x08004019
 8003c24:	08003c51 	.word	0x08003c51
 8003c28:	08004019 	.word	0x08004019
 8003c2c:	08004019 	.word	0x08004019
 8003c30:	08004019 	.word	0x08004019
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08004019 	.word	0x08004019
 8003c3c:	08004019 	.word	0x08004019
 8003c40:	08004019 	.word	0x08004019
 8003c44:	08003e49 	.word	0x08003e49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c48:	4bb9      	ldr	r3, [pc, #740]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c4e:	e1e7      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c50:	4bb8      	ldr	r3, [pc, #736]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c56:	e1e3      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4bb4      	ldr	r3, [pc, #720]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c64:	4bb1      	ldr	r3, [pc, #708]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d071      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c70:	4bae      	ldr	r3, [pc, #696]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c7c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c96:	4622      	mov	r2, r4
 8003c98:	462b      	mov	r3, r5
 8003c9a:	f04f 0000 	mov.w	r0, #0
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	0159      	lsls	r1, r3, #5
 8003ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca8:	0150      	lsls	r0, r2, #5
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4621      	mov	r1, r4
 8003cb0:	1a51      	subs	r1, r2, r1
 8003cb2:	6439      	str	r1, [r7, #64]	; 0x40
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cba:	647b      	str	r3, [r7, #68]	; 0x44
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003cc8:	4649      	mov	r1, r9
 8003cca:	018b      	lsls	r3, r1, #6
 8003ccc:	4641      	mov	r1, r8
 8003cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	018a      	lsls	r2, r1, #6
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	1a51      	subs	r1, r2, r1
 8003cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cdc:	4649      	mov	r1, r9
 8003cde:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	00cb      	lsls	r3, r1, #3
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	00ca      	lsls	r2, r1, #3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4622      	mov	r2, r4
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	eb42 0303 	adc.w	r3, r2, r3
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d20:	4629      	mov	r1, r5
 8003d22:	024b      	lsls	r3, r1, #9
 8003d24:	4621      	mov	r1, r4
 8003d26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	024a      	lsls	r2, r1, #9
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d40:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d44:	f7fc fa64 	bl	8000210 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d52:	e067      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d54:	4b75      	ldr	r3, [pc, #468]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	099b      	lsrs	r3, r3, #6
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d6e:	2300      	movs	r3, #0
 8003d70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d76:	4622      	mov	r2, r4
 8003d78:	462b      	mov	r3, r5
 8003d7a:	f04f 0000 	mov.w	r0, #0
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	0159      	lsls	r1, r3, #5
 8003d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d88:	0150      	lsls	r0, r2, #5
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4621      	mov	r1, r4
 8003d90:	1a51      	subs	r1, r2, r1
 8003d92:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d94:	4629      	mov	r1, r5
 8003d96:	eb63 0301 	sbc.w	r3, r3, r1
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003da8:	4649      	mov	r1, r9
 8003daa:	018b      	lsls	r3, r1, #6
 8003dac:	4641      	mov	r1, r8
 8003dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db2:	4641      	mov	r1, r8
 8003db4:	018a      	lsls	r2, r1, #6
 8003db6:	4641      	mov	r1, r8
 8003db8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd6:	4692      	mov	sl, r2
 8003dd8:	469b      	mov	fp, r3
 8003dda:	4623      	mov	r3, r4
 8003ddc:	eb1a 0303 	adds.w	r3, sl, r3
 8003de0:	623b      	str	r3, [r7, #32]
 8003de2:	462b      	mov	r3, r5
 8003de4:	eb4b 0303 	adc.w	r3, fp, r3
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003df6:	4629      	mov	r1, r5
 8003df8:	028b      	lsls	r3, r1, #10
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e00:	4621      	mov	r1, r4
 8003e02:	028a      	lsls	r2, r1, #10
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e10:	677a      	str	r2, [r7, #116]	; 0x74
 8003e12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e16:	f7fc f9fb 	bl	8000210 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4613      	mov	r3, r2
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e24:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e46:	e0eb      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e48:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e54:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d06b      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e60:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	2200      	movs	r2, #0
 8003e68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	663b      	str	r3, [r7, #96]	; 0x60
 8003e74:	2300      	movs	r3, #0
 8003e76:	667b      	str	r3, [r7, #100]	; 0x64
 8003e78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	462b      	mov	r3, r5
 8003e80:	f04f 0000 	mov.w	r0, #0
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	0159      	lsls	r1, r3, #5
 8003e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8e:	0150      	lsls	r0, r2, #5
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4621      	mov	r1, r4
 8003e96:	1a51      	subs	r1, r2, r1
 8003e98:	61b9      	str	r1, [r7, #24]
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003eae:	4659      	mov	r1, fp
 8003eb0:	018b      	lsls	r3, r1, #6
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb8:	4651      	mov	r1, sl
 8003eba:	018a      	lsls	r2, r1, #6
 8003ebc:	4651      	mov	r1, sl
 8003ebe:	ebb2 0801 	subs.w	r8, r2, r1
 8003ec2:	4659      	mov	r1, fp
 8003ec4:	eb63 0901 	sbc.w	r9, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003edc:	4690      	mov	r8, r2
 8003ede:	4699      	mov	r9, r3
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	eb18 0303 	adds.w	r3, r8, r3
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	462b      	mov	r3, r5
 8003eea:	eb49 0303 	adc.w	r3, r9, r3
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003efc:	4629      	mov	r1, r5
 8003efe:	024b      	lsls	r3, r1, #9
 8003f00:	4621      	mov	r1, r4
 8003f02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f06:	4621      	mov	r1, r4
 8003f08:	024a      	lsls	r2, r1, #9
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f12:	2200      	movs	r2, #0
 8003f14:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f16:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f1c:	f7fc f978 	bl	8000210 <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4613      	mov	r3, r2
 8003f26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f2a:	e065      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x420>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	00f42400 	.word	0x00f42400
 8003f34:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f38:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	2200      	movs	r2, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	4611      	mov	r1, r2
 8003f44:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f48:	653b      	str	r3, [r7, #80]	; 0x50
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f4e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f52:	4642      	mov	r2, r8
 8003f54:	464b      	mov	r3, r9
 8003f56:	f04f 0000 	mov.w	r0, #0
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	0159      	lsls	r1, r3, #5
 8003f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f64:	0150      	lsls	r0, r2, #5
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	1a51      	subs	r1, r2, r1
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	4649      	mov	r1, r9
 8003f72:	eb63 0301 	sbc.w	r3, r3, r1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f84:	4659      	mov	r1, fp
 8003f86:	018b      	lsls	r3, r1, #6
 8003f88:	4651      	mov	r1, sl
 8003f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8e:	4651      	mov	r1, sl
 8003f90:	018a      	lsls	r2, r1, #6
 8003f92:	4651      	mov	r1, sl
 8003f94:	1a54      	subs	r4, r2, r1
 8003f96:	4659      	mov	r1, fp
 8003f98:	eb63 0501 	sbc.w	r5, r3, r1
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	00eb      	lsls	r3, r5, #3
 8003fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	18e3      	adds	r3, r4, r3
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	eb45 0303 	adc.w	r3, r5, r3
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	028b      	lsls	r3, r1, #10
 8003fce:	4621      	mov	r1, r4
 8003fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	028a      	lsls	r2, r1, #10
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fe6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fea:	f7fc f911 	bl	8000210 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	0f1b      	lsrs	r3, r3, #28
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800400a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004016:	e003      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCC_GetSysClockFreq+0x45c>)
 800401a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800401e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004024:	4618      	mov	r0, r3
 8004026:	37b8      	adds	r7, #184	; 0xb8
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800
 8004034:	00f42400 	.word	0x00f42400

08004038 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e28d      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8083 	beq.w	800415e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004058:	4b94      	ldr	r3, [pc, #592]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b04      	cmp	r3, #4
 8004062:	d019      	beq.n	8004098 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004064:	4b91      	ldr	r3, [pc, #580]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800406c:	2b08      	cmp	r3, #8
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004070:	4b8e      	ldr	r3, [pc, #568]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407c:	d00c      	beq.n	8004098 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407e:	4b8b      	ldr	r3, [pc, #556]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d112      	bne.n	80040b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408a:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004096:	d10b      	bne.n	80040b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004098:	4b84      	ldr	r3, [pc, #528]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d05b      	beq.n	800415c <HAL_RCC_OscConfig+0x124>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d157      	bne.n	800415c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e25a      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d106      	bne.n	80040c8 <HAL_RCC_OscConfig+0x90>
 80040ba:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a7b      	ldr	r2, [pc, #492]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e01d      	b.n	8004104 <HAL_RCC_OscConfig+0xcc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0xb4>
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a75      	ldr	r2, [pc, #468]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b73      	ldr	r3, [pc, #460]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a72      	ldr	r2, [pc, #456]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0xcc>
 80040ec:	4b6f      	ldr	r3, [pc, #444]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6e      	ldr	r2, [pc, #440]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a6b      	ldr	r2, [pc, #428]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80040fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d013      	beq.n	8004134 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fc fef0 	bl	8000ef0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004114:	f7fc feec 	bl	8000ef0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e21f      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	4b61      	ldr	r3, [pc, #388]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0xdc>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fc fedc 	bl	8000ef0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fc fed8 	bl	8000ef0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e20b      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x104>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d06f      	beq.n	800424a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800416a:	4b50      	ldr	r3, [pc, #320]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b00      	cmp	r3, #0
 8004174:	d017      	beq.n	80041a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004176:	4b4d      	ldr	r3, [pc, #308]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800417e:	2b08      	cmp	r3, #8
 8004180:	d105      	bne.n	800418e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004182:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d11c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419a:	4b44      	ldr	r3, [pc, #272]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d116      	bne.n	80041d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_RCC_OscConfig+0x186>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e1d3      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4937      	ldr	r1, [pc, #220]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	e03a      	b.n	800424a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCC_OscConfig+0x278>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fc fe85 	bl	8000ef0 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fc fe81 	bl	8000ef0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e1b4      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4925      	ldr	r1, [pc, #148]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
 800421c:	e015      	b.n	800424a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <HAL_RCC_OscConfig+0x278>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fc fe64 	bl	8000ef0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422c:	f7fc fe60 	bl	8000ef0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e193      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d036      	beq.n	80042c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d016      	beq.n	800428c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fc fe44 	bl	8000ef0 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800426c:	f7fc fe40 	bl	8000ef0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e173      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x234>
 800428a:	e01b      	b.n	80042c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_OscConfig+0x27c>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fc fe2d 	bl	8000ef0 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	e00e      	b.n	80042b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429a:	f7fc fe29 	bl	8000ef0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d907      	bls.n	80042b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e15c      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
 80042ac:	40023800 	.word	0x40023800
 80042b0:	42470000 	.word	0x42470000
 80042b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	4b8a      	ldr	r3, [pc, #552]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ea      	bne.n	800429a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8097 	beq.w	8004400 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b83      	ldr	r3, [pc, #524]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	4b7f      	ldr	r3, [pc, #508]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a7e      	ldr	r2, [pc, #504]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
 80042f2:	4b7c      	ldr	r3, [pc, #496]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b79      	ldr	r3, [pc, #484]	; (80044e8 <HAL_RCC_OscConfig+0x4b0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCC_OscConfig+0x4b0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	; (80044e8 <HAL_RCC_OscConfig+0x4b0>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7fc fde9 	bl	8000ef0 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fc fde5 	bl	8000ef0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e118      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCC_OscConfig+0x4b0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x31e>
 8004348:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a65      	ldr	r2, [pc, #404]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	e01c      	b.n	8004390 <HAL_RCC_OscConfig+0x358>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b05      	cmp	r3, #5
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x340>
 800435e:	4b61      	ldr	r3, [pc, #388]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a60      	ldr	r2, [pc, #384]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	4b5e      	ldr	r3, [pc, #376]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	4a5d      	ldr	r2, [pc, #372]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6713      	str	r3, [r2, #112]	; 0x70
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0x358>
 8004378:	4b5a      	ldr	r3, [pc, #360]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a59      	ldr	r2, [pc, #356]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	4b57      	ldr	r3, [pc, #348]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a56      	ldr	r2, [pc, #344]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fc fdaa 	bl	8000ef0 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fc fda6 	bl	8000ef0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0d7      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <HAL_RCC_OscConfig+0x368>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fc fd94 	bl	8000ef0 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fc fd90 	bl	8000ef0 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0c1      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e2:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ee      	bne.n	80043cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f4:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	4a3a      	ldr	r2, [pc, #232]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80ad 	beq.w	8004564 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440a:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b08      	cmp	r3, #8
 8004414:	d060      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d145      	bne.n	80044aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441e:	4b33      	ldr	r3, [pc, #204]	; (80044ec <HAL_RCC_OscConfig+0x4b4>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fc fd64 	bl	8000ef0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fc fd60 	bl	8000ef0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e093      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	071b      	lsls	r3, r3, #28
 8004476:	491b      	ldr	r1, [pc, #108]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCC_OscConfig+0x4b4>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fc fd35 	bl	8000ef0 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448a:	f7fc fd31 	bl	8000ef0 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e064      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x452>
 80044a8:	e05c      	b.n	8004564 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_RCC_OscConfig+0x4b4>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fc fd1e 	bl	8000ef0 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fc fd1a 	bl	8000ef0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e04d      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x480>
 80044d6:	e045      	b.n	8004564 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e040      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40007000 	.word	0x40007000
 80044ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <HAL_RCC_OscConfig+0x538>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d030      	beq.n	8004560 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d129      	bne.n	8004560 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d122      	bne.n	8004560 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004526:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004528:	4293      	cmp	r3, r2
 800452a:	d119      	bne.n	8004560 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d10f      	bne.n	8004560 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d107      	bne.n	8004560 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e07b      	b.n	800467e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b00      	cmp	r3, #0
 800458c:	d108      	bne.n	80045a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004596:	d009      	beq.n	80045ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	61da      	str	r2, [r3, #28]
 800459e:	e005      	b.n	80045ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fb32 	bl	8000c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	ea42 0103 	orr.w	r1, r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 0104 	and.w	r1, r3, #4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0210 	and.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800466c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e03f      	b.n	8004718 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fc fb07 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f828 	bl	8004720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004724:	b0c0      	sub	sp, #256	; 0x100
 8004726:	af00      	add	r7, sp, #0
 8004728:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	68d9      	ldr	r1, [r3, #12]
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	ea40 0301 	orr.w	r3, r0, r1
 8004748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	431a      	orrs	r2, r3
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	431a      	orrs	r2, r3
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004778:	f021 010c 	bic.w	r1, r1, #12
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004786:	430b      	orrs	r3, r1
 8004788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479a:	6999      	ldr	r1, [r3, #24]
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	ea40 0301 	orr.w	r3, r0, r1
 80047a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b8f      	ldr	r3, [pc, #572]	; (80049ec <UART_SetConfig+0x2cc>)
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d005      	beq.n	80047c0 <UART_SetConfig+0xa0>
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b8d      	ldr	r3, [pc, #564]	; (80049f0 <UART_SetConfig+0x2d0>)
 80047bc:	429a      	cmp	r2, r3
 80047be:	d104      	bne.n	80047ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047c0:	f7fe fc84 	bl	80030cc <HAL_RCC_GetPCLK2Freq>
 80047c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047c8:	e003      	b.n	80047d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ca:	f7fe fc6b 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 80047ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047dc:	f040 810c 	bne.w	80049f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	1891      	adds	r1, r2, r2
 80047f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80047fa:	415b      	adcs	r3, r3
 80047fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004802:	4621      	mov	r1, r4
 8004804:	eb12 0801 	adds.w	r8, r2, r1
 8004808:	4629      	mov	r1, r5
 800480a:	eb43 0901 	adc.w	r9, r3, r1
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800481a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800481e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004822:	4690      	mov	r8, r2
 8004824:	4699      	mov	r9, r3
 8004826:	4623      	mov	r3, r4
 8004828:	eb18 0303 	adds.w	r3, r8, r3
 800482c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004830:	462b      	mov	r3, r5
 8004832:	eb49 0303 	adc.w	r3, r9, r3
 8004836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004846:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800484a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800484e:	460b      	mov	r3, r1
 8004850:	18db      	adds	r3, r3, r3
 8004852:	653b      	str	r3, [r7, #80]	; 0x50
 8004854:	4613      	mov	r3, r2
 8004856:	eb42 0303 	adc.w	r3, r2, r3
 800485a:	657b      	str	r3, [r7, #84]	; 0x54
 800485c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004864:	f7fb fcd4 	bl	8000210 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <UART_SetConfig+0x2d4>)
 800486e:	fba3 2302 	umull	r2, r3, r3, r2
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	011c      	lsls	r4, r3, #4
 8004876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487a:	2200      	movs	r2, #0
 800487c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004880:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004888:	4642      	mov	r2, r8
 800488a:	464b      	mov	r3, r9
 800488c:	1891      	adds	r1, r2, r2
 800488e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004890:	415b      	adcs	r3, r3
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004898:	4641      	mov	r1, r8
 800489a:	eb12 0a01 	adds.w	sl, r2, r1
 800489e:	4649      	mov	r1, r9
 80048a0:	eb43 0b01 	adc.w	fp, r3, r1
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048b8:	4692      	mov	sl, r2
 80048ba:	469b      	mov	fp, r3
 80048bc:	4643      	mov	r3, r8
 80048be:	eb1a 0303 	adds.w	r3, sl, r3
 80048c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048c6:	464b      	mov	r3, r9
 80048c8:	eb4b 0303 	adc.w	r3, fp, r3
 80048cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048e4:	460b      	mov	r3, r1
 80048e6:	18db      	adds	r3, r3, r3
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ea:	4613      	mov	r3, r2
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	647b      	str	r3, [r7, #68]	; 0x44
 80048f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048fa:	f7fb fc89 	bl	8000210 <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4611      	mov	r1, r2
 8004904:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <UART_SetConfig+0x2d4>)
 8004906:	fba3 2301 	umull	r2, r3, r3, r1
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	2264      	movs	r2, #100	; 0x64
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	1acb      	subs	r3, r1, r3
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800491a:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <UART_SetConfig+0x2d4>)
 800491c:	fba3 2302 	umull	r2, r3, r3, r2
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004928:	441c      	add	r4, r3
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004934:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	1891      	adds	r1, r2, r2
 8004942:	63b9      	str	r1, [r7, #56]	; 0x38
 8004944:	415b      	adcs	r3, r3
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800494c:	4641      	mov	r1, r8
 800494e:	1851      	adds	r1, r2, r1
 8004950:	6339      	str	r1, [r7, #48]	; 0x30
 8004952:	4649      	mov	r1, r9
 8004954:	414b      	adcs	r3, r1
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004964:	4659      	mov	r1, fp
 8004966:	00cb      	lsls	r3, r1, #3
 8004968:	4651      	mov	r1, sl
 800496a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496e:	4651      	mov	r1, sl
 8004970:	00ca      	lsls	r2, r1, #3
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	4603      	mov	r3, r0
 8004978:	4642      	mov	r2, r8
 800497a:	189b      	adds	r3, r3, r2
 800497c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004980:	464b      	mov	r3, r9
 8004982:	460a      	mov	r2, r1
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004998:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800499c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049a0:	460b      	mov	r3, r1
 80049a2:	18db      	adds	r3, r3, r3
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a6:	4613      	mov	r3, r2
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049b6:	f7fb fc2b 	bl	8000210 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <UART_SetConfig+0x2d4>)
 80049c0:	fba3 1302 	umull	r1, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2164      	movs	r1, #100	; 0x64
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <UART_SetConfig+0x2d4>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f003 0207 	and.w	r2, r3, #7
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4422      	add	r2, r4
 80049e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049e8:	e105      	b.n	8004bf6 <UART_SetConfig+0x4d6>
 80049ea:	bf00      	nop
 80049ec:	40011000 	.word	0x40011000
 80049f0:	40011400 	.word	0x40011400
 80049f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	1891      	adds	r1, r2, r2
 8004a10:	6239      	str	r1, [r7, #32]
 8004a12:	415b      	adcs	r3, r3
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
 8004a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	1854      	adds	r4, r2, r1
 8004a1e:	4649      	mov	r1, r9
 8004a20:	eb43 0501 	adc.w	r5, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	00eb      	lsls	r3, r5, #3
 8004a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a32:	00e2      	lsls	r2, r4, #3
 8004a34:	4614      	mov	r4, r2
 8004a36:	461d      	mov	r5, r3
 8004a38:	4643      	mov	r3, r8
 8004a3a:	18e3      	adds	r3, r4, r3
 8004a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a40:	464b      	mov	r3, r9
 8004a42:	eb45 0303 	adc.w	r3, r5, r3
 8004a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a66:	4629      	mov	r1, r5
 8004a68:	008b      	lsls	r3, r1, #2
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a70:	4621      	mov	r1, r4
 8004a72:	008a      	lsls	r2, r1, #2
 8004a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a78:	f7fb fbca 	bl	8000210 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4b60      	ldr	r3, [pc, #384]	; (8004c04 <UART_SetConfig+0x4e4>)
 8004a82:	fba3 2302 	umull	r2, r3, r3, r2
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	011c      	lsls	r4, r3, #4
 8004a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	1891      	adds	r1, r2, r2
 8004aa2:	61b9      	str	r1, [r7, #24]
 8004aa4:	415b      	adcs	r3, r3
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aac:	4641      	mov	r1, r8
 8004aae:	1851      	adds	r1, r2, r1
 8004ab0:	6139      	str	r1, [r7, #16]
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	414b      	adcs	r3, r1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	00cb      	lsls	r3, r1, #3
 8004ac8:	4651      	mov	r1, sl
 8004aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ace:	4651      	mov	r1, sl
 8004ad0:	00ca      	lsls	r2, r1, #3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4642      	mov	r2, r8
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	460a      	mov	r2, r1
 8004ae4:	eb42 0303 	adc.w	r3, r2, r3
 8004ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004af6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b04:	4649      	mov	r1, r9
 8004b06:	008b      	lsls	r3, r1, #2
 8004b08:	4641      	mov	r1, r8
 8004b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0e:	4641      	mov	r1, r8
 8004b10:	008a      	lsls	r2, r1, #2
 8004b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b16:	f7fb fb7b 	bl	8000210 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <UART_SetConfig+0x4e4>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a34      	ldr	r2, [pc, #208]	; (8004c04 <UART_SetConfig+0x4e4>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3e:	441c      	add	r4, r3
 8004b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b44:	2200      	movs	r2, #0
 8004b46:	673b      	str	r3, [r7, #112]	; 0x70
 8004b48:	677a      	str	r2, [r7, #116]	; 0x74
 8004b4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b4e:	4642      	mov	r2, r8
 8004b50:	464b      	mov	r3, r9
 8004b52:	1891      	adds	r1, r2, r2
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	415b      	adcs	r3, r3
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b5e:	4641      	mov	r1, r8
 8004b60:	1851      	adds	r1, r2, r1
 8004b62:	6039      	str	r1, [r7, #0]
 8004b64:	4649      	mov	r1, r9
 8004b66:	414b      	adcs	r3, r1
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b76:	4659      	mov	r1, fp
 8004b78:	00cb      	lsls	r3, r1, #3
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b80:	4651      	mov	r1, sl
 8004b82:	00ca      	lsls	r2, r1, #3
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4642      	mov	r2, r8
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b90:	464b      	mov	r3, r9
 8004b92:	460a      	mov	r2, r1
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba4:	667a      	str	r2, [r7, #100]	; 0x64
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	008b      	lsls	r3, r1, #2
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	008a      	lsls	r2, r1, #2
 8004bc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bc4:	f7fb fb24 	bl	8000210 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <UART_SetConfig+0x4e4>)
 8004bce:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2164      	movs	r1, #100	; 0x64
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	3332      	adds	r3, #50	; 0x32
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <UART_SetConfig+0x4e4>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4422      	add	r2, r4
 8004bf4:	609a      	str	r2, [r3, #8]
}
 8004bf6:	bf00      	nop
 8004bf8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c02:	bf00      	nop
 8004c04:	51eb851f 	.word	0x51eb851f

08004c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c08:	b084      	sub	sp, #16
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	f107 001c 	add.w	r0, r7, #28
 8004c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d122      	bne.n	8004c66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fbe8 	bl	8006430 <USB_CoreReset>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e01a      	b.n	8004c9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 fbdc 	bl	8006430 <USB_CoreReset>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c8e:	e005      	b.n	8004c9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10b      	bne.n	8004cba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f043 0206 	orr.w	r2, r3, #6
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc6:	b004      	add	sp, #16
 8004cc8:	4770      	bx	lr
	...

08004ccc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d165      	bne.n	8004dac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	; (8004de8 <USB_SetTurnaroundTime+0x11c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d906      	bls.n	8004cf6 <USB_SetTurnaroundTime+0x2a>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a40      	ldr	r2, [pc, #256]	; (8004dec <USB_SetTurnaroundTime+0x120>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d202      	bcs.n	8004cf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004cf0:	230f      	movs	r3, #15
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e062      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <USB_SetTurnaroundTime+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d306      	bcc.n	8004d0c <USB_SetTurnaroundTime+0x40>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4a3b      	ldr	r2, [pc, #236]	; (8004df0 <USB_SetTurnaroundTime+0x124>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d202      	bcs.n	8004d0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d06:	230e      	movs	r3, #14
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e057      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4a38      	ldr	r2, [pc, #224]	; (8004df0 <USB_SetTurnaroundTime+0x124>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d306      	bcc.n	8004d22 <USB_SetTurnaroundTime+0x56>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a37      	ldr	r2, [pc, #220]	; (8004df4 <USB_SetTurnaroundTime+0x128>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d202      	bcs.n	8004d22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d1c:	230d      	movs	r3, #13
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e04c      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4a33      	ldr	r2, [pc, #204]	; (8004df4 <USB_SetTurnaroundTime+0x128>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d306      	bcc.n	8004d38 <USB_SetTurnaroundTime+0x6c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a32      	ldr	r2, [pc, #200]	; (8004df8 <USB_SetTurnaroundTime+0x12c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d802      	bhi.n	8004d38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d32:	230c      	movs	r3, #12
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e041      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <USB_SetTurnaroundTime+0x12c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d906      	bls.n	8004d4e <USB_SetTurnaroundTime+0x82>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a2e      	ldr	r2, [pc, #184]	; (8004dfc <USB_SetTurnaroundTime+0x130>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d802      	bhi.n	8004d4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d48:	230b      	movs	r3, #11
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e036      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <USB_SetTurnaroundTime+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d906      	bls.n	8004d64 <USB_SetTurnaroundTime+0x98>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <USB_SetTurnaroundTime+0x134>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d802      	bhi.n	8004d64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d5e:	230a      	movs	r3, #10
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e02b      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <USB_SetTurnaroundTime+0x134>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d906      	bls.n	8004d7a <USB_SetTurnaroundTime+0xae>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <USB_SetTurnaroundTime+0x138>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d202      	bcs.n	8004d7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d74:	2309      	movs	r3, #9
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	e020      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <USB_SetTurnaroundTime+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d306      	bcc.n	8004d90 <USB_SetTurnaroundTime+0xc4>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <USB_SetTurnaroundTime+0x13c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d802      	bhi.n	8004d90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e015      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <USB_SetTurnaroundTime+0x13c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d906      	bls.n	8004da6 <USB_SetTurnaroundTime+0xda>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <USB_SetTurnaroundTime+0x140>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d202      	bcs.n	8004da6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004da0:	2307      	movs	r3, #7
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e00a      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004da6:	2306      	movs	r3, #6
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e007      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004db2:	2309      	movs	r3, #9
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e001      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004db8:	2309      	movs	r3, #9
 8004dba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	00d8acbf 	.word	0x00d8acbf
 8004dec:	00e4e1c0 	.word	0x00e4e1c0
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	01067380 	.word	0x01067380
 8004df8:	011a499f 	.word	0x011a499f
 8004dfc:	01312cff 	.word	0x01312cff
 8004e00:	014ca43f 	.word	0x014ca43f
 8004e04:	016e3600 	.word	0x016e3600
 8004e08:	01a6ab1f 	.word	0x01a6ab1f
 8004e0c:	01e84800 	.word	0x01e84800

08004e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d115      	bne.n	8004ea2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7fc f840 	bl	8000f08 <HAL_Delay>
      ms++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 fa3f 	bl	8006312 <USB_GetMode>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d01e      	beq.n	8004ed8 <USB_SetCurrentMode+0x84>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b31      	cmp	r3, #49	; 0x31
 8004e9e:	d9f0      	bls.n	8004e82 <USB_SetCurrentMode+0x2e>
 8004ea0:	e01a      	b.n	8004ed8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d115      	bne.n	8004ed4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f7fc f827 	bl	8000f08 <HAL_Delay>
      ms++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 fa26 	bl	8006312 <USB_GetMode>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <USB_SetCurrentMode+0x84>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b31      	cmp	r3, #49	; 0x31
 8004ed0:	d9f0      	bls.n	8004eb4 <USB_SetCurrentMode+0x60>
 8004ed2:	e001      	b.n	8004ed8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e005      	b.n	8004ee4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b32      	cmp	r3, #50	; 0x32
 8004edc:	d101      	bne.n	8004ee2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eec:	b084      	sub	sp, #16
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e009      	b.n	8004f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3340      	adds	r3, #64	; 0x40
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	2200      	movs	r2, #0
 8004f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b0e      	cmp	r3, #14
 8004f24:	d9f2      	bls.n	8004f0c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11c      	bne.n	8004f66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3a:	f043 0302 	orr.w	r3, r3, #2
 8004f3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e005      	b.n	8004f72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	4619      	mov	r1, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	680b      	ldr	r3, [r1, #0]
 8004f90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10c      	bne.n	8004fb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d104      	bne.n	8004fa8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f965 	bl	8005270 <USB_SetDevSpeed>
 8004fa6:	e008      	b.n	8004fba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fa8:	2101      	movs	r1, #1
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f960 	bl	8005270 <USB_SetDevSpeed>
 8004fb0:	e003      	b.n	8004fba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f95b 	bl	8005270 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fba:	2110      	movs	r1, #16
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8f3 	bl	80051a8 <USB_FlushTxFifo>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f91f 	bl	8005210 <USB_FlushRxFifo>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e043      	b.n	800508e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501c:	d118      	bne.n	8005050 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	461a      	mov	r2, r3
 8005032:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e013      	b.n	8005062 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	461a      	mov	r2, r3
 8005048:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e008      	b.n	8005062 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	461a      	mov	r2, r3
 8005070:	2300      	movs	r3, #0
 8005072:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	461a      	mov	r2, r3
 8005082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005086:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	3301      	adds	r3, #1
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d3b7      	bcc.n	8005006 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e043      	b.n	8005124 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b2:	d118      	bne.n	80050e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	461a      	mov	r2, r3
 80050c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e013      	b.n	80050f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	461a      	mov	r2, r3
 80050de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e008      	b.n	80050f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	461a      	mov	r2, r3
 80050f4:	2300      	movs	r3, #0
 80050f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	461a      	mov	r2, r3
 8005106:	2300      	movs	r3, #0
 8005108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	461a      	mov	r2, r3
 8005118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800511c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	429a      	cmp	r2, r3
 800512a:	d3b7      	bcc.n	800509c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800513a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800514c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f043 0210 	orr.w	r2, r3, #16
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <USB_DevInit+0x2b8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f043 0208 	orr.w	r2, r3, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d107      	bne.n	8005194 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800518c:	f043 0304 	orr.w	r3, r3, #4
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005194:	7dfb      	ldrb	r3, [r7, #23]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a0:	b004      	add	sp, #16
 80051a2:	4770      	bx	lr
 80051a4:	803c3800 	.word	0x803c3800

080051a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <USB_FlushTxFifo+0x64>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e01b      	b.n	8005200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	daf2      	bge.n	80051b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	019b      	lsls	r3, r3, #6
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3301      	adds	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4a08      	ldr	r2, [pc, #32]	; (800520c <USB_FlushTxFifo+0x64>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e006      	b.n	8005200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d0f0      	beq.n	80051e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	00030d40 	.word	0x00030d40

08005210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a11      	ldr	r2, [pc, #68]	; (800526c <USB_FlushRxFifo+0x5c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e018      	b.n	8005260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	daf2      	bge.n	800521c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2210      	movs	r2, #16
 800523e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <USB_FlushRxFifo+0x5c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d0f0      	beq.n	8005240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	00030d40 	.word	0x00030d40

08005270 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
 80052c6:	e00a      	b.n	80052de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d002      	beq.n	80052d4 <USB_GetDevSpeed+0x32>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d102      	bne.n	80052da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052d4:	2302      	movs	r3, #2
 80052d6:	75fb      	strb	r3, [r7, #23]
 80052d8:	e001      	b.n	80052de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052da:	230f      	movs	r3, #15
 80052dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d13a      	bne.n	800537e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005326:	4313      	orrs	r3, r2
 8005328:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d155      	bne.n	80053ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	791b      	ldrb	r3, [r3, #4]
 800535a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800535c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	059b      	lsls	r3, r3, #22
 8005362:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005364:	4313      	orrs	r3, r2
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e036      	b.n	80053ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539c:	4313      	orrs	r3, r2
 800539e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11a      	bne.n	80053ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	791b      	ldrb	r3, [r3, #4]
 80053d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053d2:	430b      	orrs	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d161      	bne.n	80054dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542e:	d11f      	bne.n	8005470 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800544e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	b29b      	uxth	r3, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005490:	4013      	ands	r3, r2
 8005492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4013      	ands	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0159      	lsls	r1, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	440b      	add	r3, r1
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	4619      	mov	r1, r3
 80054d4:	4b35      	ldr	r3, [pc, #212]	; (80055ac <USB_DeactivateEndpoint+0x1b0>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
 80054da:	e060      	b.n	800559e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f2:	d11f      	bne.n	8005534 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005512:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005532:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	2101      	movs	r1, #1
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	43db      	mvns	r3, r3
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005554:	4013      	ands	r3, r2
 8005556:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	43db      	mvns	r3, r3
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005578:	4013      	ands	r3, r2
 800557a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	0159      	lsls	r1, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	440b      	add	r3, r1
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	4619      	mov	r1, r3
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <USB_DeactivateEndpoint+0x1b4>)
 800559a:	4013      	ands	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	ec337800 	.word	0xec337800
 80055b0:	eff37800 	.word	0xeff37800

080055b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 815c 	bne.w	800588e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d132      	bne.n	8005644 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	0cdb      	lsrs	r3, r3, #19
 800563e:	04db      	lsls	r3, r3, #19
 8005640:	6113      	str	r3, [r2, #16]
 8005642:	e074      	b.n	800572e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565e:	0cdb      	lsrs	r3, r3, #19
 8005660:	04db      	lsls	r3, r3, #19
 8005662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005682:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	440b      	add	r3, r1
 80056a0:	1e59      	subs	r1, r3, #1
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056ac:	4b9d      	ldr	r3, [pc, #628]	; (8005924 <USB_EPStartXfer+0x370>)
 80056ae:	400b      	ands	r3, r1
 80056b0:	69b9      	ldr	r1, [r7, #24]
 80056b2:	0148      	lsls	r0, r1, #5
 80056b4:	69f9      	ldr	r1, [r7, #28]
 80056b6:	4401      	add	r1, r0
 80056b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056bc:	4313      	orrs	r3, r2
 80056be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d6:	69b9      	ldr	r1, [r7, #24]
 80056d8:	0148      	lsls	r0, r1, #5
 80056da:	69f9      	ldr	r1, [r7, #28]
 80056dc:	4401      	add	r1, r0
 80056de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	791b      	ldrb	r3, [r3, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d11f      	bne.n	800572e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005708:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800570c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800572c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d14b      	bne.n	80057cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	791b      	ldrb	r3, [r3, #4]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d128      	bne.n	80057aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d110      	bne.n	800578a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	e00f      	b.n	80057aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e133      	b.n	8005a34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	791b      	ldrb	r3, [r3, #4]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d015      	beq.n	8005820 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 811b 	beq.w	8005a34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800581a:	4313      	orrs	r3, r2
 800581c:	634b      	str	r3, [r1, #52]	; 0x34
 800581e:	e109      	b.n	8005a34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e00f      	b.n	8005872 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6919      	ldr	r1, [r3, #16]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	b298      	uxth	r0, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4603      	mov	r3, r0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fade 	bl	8005e48 <USB_WritePacket>
 800588c:	e0d2      	b.n	8005a34 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a8:	0cdb      	lsrs	r3, r3, #19
 80058aa:	04db      	lsls	r3, r3, #19
 80058ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d126      	bne.n	8005928 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	0148      	lsls	r0, r1, #5
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	4401      	add	r1, r0
 80058f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058fc:	4313      	orrs	r3, r2
 80058fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591e:	6113      	str	r3, [r2, #16]
 8005920:	e03a      	b.n	8005998 <USB_EPStartXfer+0x3e4>
 8005922:	bf00      	nop
 8005924:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4413      	add	r3, r2
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	8afa      	ldrh	r2, [r7, #22]
 8005944:	fb03 f202 	mul.w	r2, r3, r2
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	8afb      	ldrh	r3, [r7, #22]
 800595c:	04d9      	lsls	r1, r3, #19
 800595e:	4b38      	ldr	r3, [pc, #224]	; (8005a40 <USB_EPStartXfer+0x48c>)
 8005960:	400b      	ands	r3, r1
 8005962:	69b9      	ldr	r1, [r7, #24]
 8005964:	0148      	lsls	r0, r1, #5
 8005966:	69f9      	ldr	r1, [r7, #28]
 8005968:	4401      	add	r1, r0
 800596a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800596e:	4313      	orrs	r3, r2
 8005970:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	0148      	lsls	r0, r1, #5
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	4401      	add	r1, r0
 8005990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005994:	4313      	orrs	r3, r2
 8005996:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10d      	bne.n	80059ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6919      	ldr	r1, [r3, #16]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	460a      	mov	r2, r1
 80059b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	791b      	ldrb	r3, [r3, #4]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d128      	bne.n	8005a14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d110      	bne.n	80059f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e00f      	b.n	8005a14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	1ff80000 	.word	0x1ff80000

08005a44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 80ce 	bne.w	8005c02 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d132      	bne.n	8005ad4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	0cdb      	lsrs	r3, r3, #19
 8005ace:	04db      	lsls	r3, r3, #19
 8005ad0:	6113      	str	r3, [r2, #16]
 8005ad2:	e04e      	b.n	8005b72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aee:	0cdb      	lsrs	r3, r3, #19
 8005af0:	04db      	lsls	r3, r3, #19
 8005af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d903      	bls.n	8005b2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b62:	6939      	ldr	r1, [r7, #16]
 8005b64:	0148      	lsls	r0, r1, #5
 8005b66:	6979      	ldr	r1, [r7, #20]
 8005b68:	4401      	add	r1, r0
 8005b6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d11e      	bne.n	8005bb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e097      	b.n	8005ce6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8083 	beq.w	8005ce6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	634b      	str	r3, [r1, #52]	; 0x34
 8005c00:	e071      	b.n	8005ce6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1c:	0cdb      	lsrs	r3, r3, #19
 8005c1e:	04db      	lsls	r3, r3, #19
 8005c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c94:	6939      	ldr	r1, [r7, #16]
 8005c96:	0148      	lsls	r0, r1, #5
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	4401      	add	r1, r0
 8005c9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d10d      	bne.n	8005cc6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6919      	ldr	r1, [r3, #16]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ce4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d14a      	bne.n	8005da8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d2a:	f040 8086 	bne.w	8005e3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d902      	bls.n	8005d8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8a:	e056      	b.n	8005e3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da4:	d0e7      	beq.n	8005d76 <USB_EPStopXfer+0x82>
 8005da6:	e048      	b.n	8005e3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc0:	d13b      	bne.n	8005e3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005de4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d902      	bls.n	8005e20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e1e:	e00c      	b.n	8005e3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e38:	d0e7      	beq.n	8005e0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4611      	mov	r1, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	460b      	mov	r3, r1
 8005e58:	71fb      	strb	r3, [r7, #7]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d123      	bne.n	8005eb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e6e:	88bb      	ldrh	r3, [r7, #4]
 8005e70:	3303      	adds	r3, #3
 8005e72:	089b      	lsrs	r3, r3, #2
 8005e74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e018      	b.n	8005eae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	031a      	lsls	r2, r3, #12
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e88:	461a      	mov	r2, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d3e2      	bcc.n	8005e7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3724      	adds	r7, #36	; 0x24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08b      	sub	sp, #44	; 0x2c
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	089b      	lsrs	r3, r3, #2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	e014      	b.n	8005f1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	3301      	adds	r3, #1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3301      	adds	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	3301      	adds	r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	3301      	adds	r3, #1
 8005f18:	623b      	str	r3, [r7, #32]
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d3e6      	bcc.n	8005ef0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f22:	8bfb      	ldrh	r3, [r7, #30]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01e      	beq.n	8005f66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	461a      	mov	r2, r3
 8005f34:	f107 0310 	add.w	r3, r7, #16
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	701a      	strb	r2, [r3, #0]
      i++;
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	3301      	adds	r3, #1
 8005f52:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	3301      	adds	r3, #1
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f5a:	8bfb      	ldrh	r3, [r7, #30]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f60:	8bfb      	ldrh	r3, [r7, #30]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1ea      	bne.n	8005f3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	372c      	adds	r7, #44	; 0x2c
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d12c      	bne.n	8005fea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db12      	blt.n	8005fc8 <USB_EPSetStall+0x54>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e02b      	b.n	8006042 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db12      	blt.n	8006022 <USB_EPSetStall+0xae>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00f      	beq.n	8006022 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006020:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006040:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d128      	bne.n	80060be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800608a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	791b      	ldrb	r3, [r3, #4]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d003      	beq.n	800609c <USB_EPClearStall+0x4c>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	791b      	ldrb	r3, [r3, #4]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d138      	bne.n	800610e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e027      	b.n	800610e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	791b      	ldrb	r3, [r3, #4]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d003      	beq.n	80060ee <USB_EPClearStall+0x9e>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	791b      	ldrb	r3, [r3, #4]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d10f      	bne.n	800610e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800610c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800613a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800613e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006156:	4313      	orrs	r3, r2
 8006158:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006196:	f023 0302 	bic.w	r3, r3, #2
 800619a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4013      	ands	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006204:	68fb      	ldr	r3, [r7, #12]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	0c1b      	lsrs	r3, r3, #16
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	b29b      	uxth	r3, r3
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	4013      	ands	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062a8:	68bb      	ldr	r3, [r7, #8]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	fa22 f303 	lsr.w	r3, r2, r3
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4013      	ands	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006304:	68bb      	ldr	r3, [r7, #8]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0301 	and.w	r3, r3, #1
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006348:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800634c:	f023 0307 	bic.w	r3, r3, #7
 8006350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	460b      	mov	r3, r1
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	333c      	adds	r3, #60	; 0x3c
 800638a:	3304      	adds	r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4a26      	ldr	r2, [pc, #152]	; (800642c <USB_EP0_OutStart+0xb8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d90a      	bls.n	80063ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a8:	d101      	bne.n	80063ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e037      	b.n	800641e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063dc:	f043 0318 	orr.w	r3, r3, #24
 80063e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d10f      	bne.n	800641c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006416:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800641a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	4f54300a 	.word	0x4f54300a

08006430 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4a13      	ldr	r2, [pc, #76]	; (8006494 <USB_CoreReset+0x64>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e01b      	b.n	8006486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	daf2      	bge.n	800643c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3301      	adds	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <USB_CoreReset+0x64>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e006      	b.n	8006486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d0f0      	beq.n	8006466 <USB_CoreReset+0x36>

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	00030d40 	.word	0x00030d40

08006498 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064a8:	f005 fa84 	bl	800b9b4 <USBD_static_malloc>
 80064ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	32b0      	adds	r2, #176	; 0xb0
 80064be:	2100      	movs	r1, #0
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e0d4      	b.n	8006672 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80064cc:	2100      	movs	r1, #0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f005 fae8 	bl	800baa4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32b0      	adds	r2, #176	; 0xb0
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32b0      	adds	r2, #176	; 0xb0
 80064ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7c1b      	ldrb	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d138      	bne.n	8006572 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006500:	4b5e      	ldr	r3, [pc, #376]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006502:	7819      	ldrb	r1, [r3, #0]
 8006504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006508:	2202      	movs	r2, #2
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f005 f8e1 	bl	800b6d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006510:	4b5a      	ldr	r3, [pc, #360]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 020f 	and.w	r2, r3, #15
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3324      	adds	r3, #36	; 0x24
 8006526:	2201      	movs	r2, #1
 8006528:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800652a:	4b55      	ldr	r3, [pc, #340]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800652c:	7819      	ldrb	r1, [r3, #0]
 800652e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006532:	2202      	movs	r2, #2
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f005 f8cc 	bl	800b6d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800653a:	4b51      	ldr	r3, [pc, #324]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006552:	2201      	movs	r2, #1
 8006554:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006556:	4b4b      	ldr	r3, [pc, #300]	; (8006684 <USBD_CDC_Init+0x1ec>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 020f 	and.w	r2, r3, #15
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	3326      	adds	r3, #38	; 0x26
 800656c:	2210      	movs	r2, #16
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	e035      	b.n	80065de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006572:	4b42      	ldr	r3, [pc, #264]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006574:	7819      	ldrb	r1, [r3, #0]
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	2202      	movs	r2, #2
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f005 f8a9 	bl	800b6d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006580:	4b3e      	ldr	r3, [pc, #248]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3324      	adds	r3, #36	; 0x24
 8006596:	2201      	movs	r2, #1
 8006598:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800659a:	4b39      	ldr	r3, [pc, #228]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	2202      	movs	r2, #2
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f005 f895 	bl	800b6d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065a8:	4b35      	ldr	r3, [pc, #212]	; (8006680 <USBD_CDC_Init+0x1e8>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 020f 	and.w	r2, r3, #15
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065c0:	2201      	movs	r2, #1
 80065c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065c4:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <USBD_CDC_Init+0x1ec>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 020f 	and.w	r2, r3, #15
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	3326      	adds	r3, #38	; 0x26
 80065da:	2210      	movs	r2, #16
 80065dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065de:	4b29      	ldr	r3, [pc, #164]	; (8006684 <USBD_CDC_Init+0x1ec>)
 80065e0:	7819      	ldrb	r1, [r3, #0]
 80065e2:	2308      	movs	r3, #8
 80065e4:	2203      	movs	r2, #3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f005 f873 	bl	800b6d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065ec:	4b25      	ldr	r3, [pc, #148]	; (8006684 <USBD_CDC_Init+0x1ec>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f003 020f 	and.w	r2, r3, #15
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	3324      	adds	r3, #36	; 0x24
 8006602:	2201      	movs	r2, #1
 8006604:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	33b0      	adds	r3, #176	; 0xb0
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800663c:	2302      	movs	r3, #2
 800663e:	e018      	b.n	8006672 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1b      	ldrb	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800664a:	7819      	ldrb	r1, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f005 f92a 	bl	800b8b0 <USBD_LL_PrepareReceive>
 800665c:	e008      	b.n	8006670 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <USBD_CDC_Init+0x1e8>)
 8006660:	7819      	ldrb	r1, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f005 f920 	bl	800b8b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000093 	.word	0x20000093
 8006680:	20000094 	.word	0x20000094
 8006684:	20000095 	.word	0x20000095

08006688 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006694:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <USBD_CDC_DeInit+0xf8>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f005 f83f 	bl	800b71e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066a0:	4b37      	ldr	r3, [pc, #220]	; (8006780 <USBD_CDC_DeInit+0xf8>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3324      	adds	r3, #36	; 0x24
 80066b6:	2200      	movs	r2, #0
 80066b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066ba:	4b32      	ldr	r3, [pc, #200]	; (8006784 <USBD_CDC_DeInit+0xfc>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f005 f82c 	bl	800b71e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066c6:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <USBD_CDC_DeInit+0xfc>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066de:	2200      	movs	r2, #0
 80066e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066e2:	4b29      	ldr	r3, [pc, #164]	; (8006788 <USBD_CDC_DeInit+0x100>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f005 f818 	bl	800b71e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066ee:	4b26      	ldr	r3, [pc, #152]	; (8006788 <USBD_CDC_DeInit+0x100>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f003 020f 	and.w	r2, r3, #15
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	2200      	movs	r2, #0
 8006706:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006708:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <USBD_CDC_DeInit+0x100>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	3326      	adds	r3, #38	; 0x26
 800671e:	2200      	movs	r2, #0
 8006720:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	32b0      	adds	r2, #176	; 0xb0
 800672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	33b0      	adds	r3, #176	; 0xb0
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	32b0      	adds	r2, #176	; 0xb0
 8006752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006756:	4618      	mov	r0, r3
 8006758:	f005 f93a 	bl	800b9d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32b0      	adds	r2, #176	; 0xb0
 8006766:	2100      	movs	r1, #0
 8006768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000093 	.word	0x20000093
 8006784:	20000094 	.word	0x20000094
 8006788:	20000095 	.word	0x20000095

0800678c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	32b0      	adds	r2, #176	; 0xb0
 80067a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0bf      	b.n	800693c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d050      	beq.n	800686a <USBD_CDC_Setup+0xde>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	f040 80af 	bne.w	800692c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	88db      	ldrh	r3, [r3, #6]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d03a      	beq.n	800684c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	da1b      	bge.n	8006818 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	33b0      	adds	r3, #176	; 0xb0
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	88d2      	ldrh	r2, [r2, #6]
 80067fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	88db      	ldrh	r3, [r3, #6]
 8006802:	2b07      	cmp	r3, #7
 8006804:	bf28      	it	cs
 8006806:	2307      	movcs	r3, #7
 8006808:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	89fa      	ldrh	r2, [r7, #14]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fd6d 	bl	80082f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006816:	e090      	b.n	800693a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	785a      	ldrb	r2, [r3, #1]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b3f      	cmp	r3, #63	; 0x3f
 8006828:	d803      	bhi.n	8006832 <USBD_CDC_Setup+0xa6>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88db      	ldrh	r3, [r3, #6]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	e000      	b.n	8006834 <USBD_CDC_Setup+0xa8>
 8006832:	2240      	movs	r2, #64	; 0x40
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800683a:	6939      	ldr	r1, [r7, #16]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006842:	461a      	mov	r2, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 fd7f 	bl	8008348 <USBD_CtlPrepareRx>
      break;
 800684a:	e076      	b.n	800693a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	33b0      	adds	r3, #176	; 0xb0
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	7850      	ldrb	r0, [r2, #1]
 8006862:	2200      	movs	r2, #0
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4798      	blx	r3
      break;
 8006868:	e067      	b.n	800693a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b0b      	cmp	r3, #11
 8006870:	d851      	bhi.n	8006916 <USBD_CDC_Setup+0x18a>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <USBD_CDC_Setup+0xec>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	080068a9 	.word	0x080068a9
 800687c:	08006925 	.word	0x08006925
 8006880:	08006917 	.word	0x08006917
 8006884:	08006917 	.word	0x08006917
 8006888:	08006917 	.word	0x08006917
 800688c:	08006917 	.word	0x08006917
 8006890:	08006917 	.word	0x08006917
 8006894:	08006917 	.word	0x08006917
 8006898:	08006917 	.word	0x08006917
 800689c:	08006917 	.word	0x08006917
 80068a0:	080068d3 	.word	0x080068d3
 80068a4:	080068fd 	.word	0x080068fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d107      	bne.n	80068c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068b4:	f107 030a 	add.w	r3, r7, #10
 80068b8:	2202      	movs	r2, #2
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 fd17 	bl	80082f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068c2:	e032      	b.n	800692a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fca1 	bl	800820e <USBD_CtlError>
            ret = USBD_FAIL;
 80068cc:	2303      	movs	r3, #3
 80068ce:	75fb      	strb	r3, [r7, #23]
          break;
 80068d0:	e02b      	b.n	800692a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d107      	bne.n	80068ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068de:	f107 030d 	add.w	r3, r7, #13
 80068e2:	2201      	movs	r2, #1
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fd02 	bl	80082f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ec:	e01d      	b.n	800692a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fc8c 	bl	800820e <USBD_CtlError>
            ret = USBD_FAIL;
 80068f6:	2303      	movs	r3, #3
 80068f8:	75fb      	strb	r3, [r7, #23]
          break;
 80068fa:	e016      	b.n	800692a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b03      	cmp	r3, #3
 8006906:	d00f      	beq.n	8006928 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fc7f 	bl	800820e <USBD_CtlError>
            ret = USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006914:	e008      	b.n	8006928 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fc78 	bl	800820e <USBD_CtlError>
          ret = USBD_FAIL;
 800691e:	2303      	movs	r3, #3
 8006920:	75fb      	strb	r3, [r7, #23]
          break;
 8006922:	e002      	b.n	800692a <USBD_CDC_Setup+0x19e>
          break;
 8006924:	bf00      	nop
 8006926:	e008      	b.n	800693a <USBD_CDC_Setup+0x1ae>
          break;
 8006928:	bf00      	nop
      }
      break;
 800692a:	e006      	b.n	800693a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fc6d 	bl	800820e <USBD_CtlError>
      ret = USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	bf00      	nop
  }

  return (uint8_t)ret;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006956:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	32b0      	adds	r2, #176	; 0xb0
 8006962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800696a:	2303      	movs	r3, #3
 800696c:	e065      	b.n	8006a3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	32b0      	adds	r2, #176	; 0xb0
 8006978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	f003 020f 	and.w	r2, r3, #15
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	3318      	adds	r3, #24
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d02f      	beq.n	80069f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	3318      	adds	r3, #24
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	f003 010f 	and.w	r1, r3, #15
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	460b      	mov	r3, r1
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	440b      	add	r3, r1
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4403      	add	r3, r0
 80069c0:	3348      	adds	r3, #72	; 0x48
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d112      	bne.n	80069f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3318      	adds	r3, #24
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069ea:	78f9      	ldrb	r1, [r7, #3]
 80069ec:	2300      	movs	r3, #0
 80069ee:	2200      	movs	r2, #0
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f004 ff3c 	bl	800b86e <USBD_LL_Transmit>
 80069f6:	e01f      	b.n	8006a38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	33b0      	adds	r3, #176	; 0xb0
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d010      	beq.n	8006a38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	33b0      	adds	r3, #176	; 0xb0
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a34:	78fa      	ldrb	r2, [r7, #3]
 8006a36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	32b0      	adds	r2, #176	; 0xb0
 8006a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	32b0      	adds	r2, #176	; 0xb0
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e01a      	b.n	8006aaa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f004 ff3a 	bl	800b8f2 <USBD_LL_GetRxDataSize>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	33b0      	adds	r3, #176	; 0xb0
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	32b0      	adds	r2, #176	; 0xb0
 8006ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e025      	b.n	8006b20 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	33b0      	adds	r3, #176	; 0xb0
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <USBD_CDC_EP0_RxReady+0x6c>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006aee:	2bff      	cmp	r3, #255	; 0xff
 8006af0:	d015      	beq.n	8006b1e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	33b0      	adds	r3, #176	; 0xb0
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b12:	b292      	uxth	r2, r2
 8006b14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	22ff      	movs	r2, #255	; 0xff
 8006b1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b30:	2182      	movs	r1, #130	; 0x82
 8006b32:	4818      	ldr	r0, [pc, #96]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b34:	f000 fd09 	bl	800754a <USBD_GetEpDesc>
 8006b38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	4815      	ldr	r0, [pc, #84]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b3e:	f000 fd04 	bl	800754a <USBD_GetEpDesc>
 8006b42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b44:	2181      	movs	r1, #129	; 0x81
 8006b46:	4813      	ldr	r0, [pc, #76]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b48:	f000 fcff 	bl	800754a <USBD_GetEpDesc>
 8006b4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2210      	movs	r2, #16
 8006b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b68:	711a      	strb	r2, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d006      	beq.n	8006b82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7c:	711a      	strb	r2, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2243      	movs	r2, #67	; 0x43
 8006b86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b88:	4b02      	ldr	r3, [pc, #8]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000050 	.word	0x20000050

08006b98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ba0:	2182      	movs	r1, #130	; 0x82
 8006ba2:	4818      	ldr	r0, [pc, #96]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ba4:	f000 fcd1 	bl	800754a <USBD_GetEpDesc>
 8006ba8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006baa:	2101      	movs	r1, #1
 8006bac:	4815      	ldr	r0, [pc, #84]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bae:	f000 fccc 	bl	800754a <USBD_GetEpDesc>
 8006bb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bb4:	2181      	movs	r1, #129	; 0x81
 8006bb6:	4813      	ldr	r0, [pc, #76]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bb8:	f000 fcc7 	bl	800754a <USBD_GetEpDesc>
 8006bbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d006      	beq.n	8006bde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	711a      	strb	r2, [r3, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f042 0202 	orr.w	r2, r2, #2
 8006bdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	711a      	strb	r2, [r3, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f042 0202 	orr.w	r2, r2, #2
 8006bf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2243      	movs	r2, #67	; 0x43
 8006bf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bf8:	4b02      	ldr	r3, [pc, #8]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000050 	.word	0x20000050

08006c08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c10:	2182      	movs	r1, #130	; 0x82
 8006c12:	4818      	ldr	r0, [pc, #96]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c14:	f000 fc99 	bl	800754a <USBD_GetEpDesc>
 8006c18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4815      	ldr	r0, [pc, #84]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c1e:	f000 fc94 	bl	800754a <USBD_GetEpDesc>
 8006c22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c24:	2181      	movs	r1, #129	; 0x81
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c28:	f000 fc8f 	bl	800754a <USBD_GetEpDesc>
 8006c2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2210      	movs	r2, #16
 8006c38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d006      	beq.n	8006c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c48:	711a      	strb	r2, [r3, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d006      	beq.n	8006c62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c5c:	711a      	strb	r2, [r3, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2243      	movs	r2, #67	; 0x43
 8006c66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c68:	4b02      	ldr	r3, [pc, #8]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000050 	.word	0x20000050

08006c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220a      	movs	r2, #10
 8006c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c86:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	2000000c 	.word	0x2000000c

08006c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e009      	b.n	8006cc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	33b0      	adds	r3, #176	; 0xb0
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	32b0      	adds	r2, #176	; 0xb0
 8006ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e008      	b.n	8006d04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	32b0      	adds	r2, #176	; 0xb0
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e004      	b.n	8006d3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	32b0      	adds	r2, #176	; 0xb0
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	32b0      	adds	r2, #176	; 0xb0
 8006d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e018      	b.n	8006dac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7c1b      	ldrb	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <USBD_CDC_ReceivePacket+0x68>)
 8006d84:	7819      	ldrb	r1, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f004 fd8d 	bl	800b8b0 <USBD_LL_PrepareReceive>
 8006d96:	e008      	b.n	8006daa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d98:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <USBD_CDC_ReceivePacket+0x68>)
 8006d9a:	7819      	ldrb	r1, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006da2:	2340      	movs	r3, #64	; 0x40
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f004 fd83 	bl	800b8b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000094 	.word	0x20000094

08006db8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e01f      	b.n	8006e10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	79fa      	ldrb	r2, [r7, #7]
 8006e02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f004 fbfd 	bl	800b604 <USBD_LL_Init>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e025      	b.n	8006e7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	32ae      	adds	r2, #174	; 0xae
 8006e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00f      	beq.n	8006e6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32ae      	adds	r2, #174	; 0xae
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	f107 020e 	add.w	r2, r7, #14
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	4602      	mov	r2, r0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f004 fc05 	bl	800b69c <USBD_LL_Start>
 8006e92:	4603      	mov	r3, r0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	4611      	mov	r1, r2
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 f932 	bl	800819a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f44:	461a      	mov	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d01a      	beq.n	8006f90 <USBD_LL_SetupStage+0x72>
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d822      	bhi.n	8006fa4 <USBD_LL_SetupStage+0x86>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <USBD_LL_SetupStage+0x4a>
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d00a      	beq.n	8006f7c <USBD_LL_SetupStage+0x5e>
 8006f66:	e01d      	b.n	8006fa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb5f 	bl	8007634 <USBD_StdDevReq>
 8006f76:	4603      	mov	r3, r0
 8006f78:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7a:	e020      	b.n	8006fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fbc7 	bl	8007718 <USBD_StdItfReq>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8e:	e016      	b.n	8006fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fc29 	bl	80077f0 <USBD_StdEPReq>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa2:	e00c      	b.n	8006fbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006faa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f004 fbd2 	bl	800b75c <USBD_LL_StallEP>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	bf00      	nop
  }

  return ret;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d16e      	bne.n	80070be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	f040 8098 	bne.w	8007124 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d913      	bls.n	8007028 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	4293      	cmp	r3, r2
 8007018:	bf28      	it	cs
 800701a:	4613      	movcs	r3, r2
 800701c:	461a      	mov	r2, r3
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f001 f9ae 	bl	8008382 <USBD_CtlContinueRx>
 8007026:	e07d      	b.n	8007124 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	2b02      	cmp	r3, #2
 8007034:	d014      	beq.n	8007060 <USBD_LL_DataOutStage+0x98>
 8007036:	2b02      	cmp	r3, #2
 8007038:	d81d      	bhi.n	8007076 <USBD_LL_DataOutStage+0xae>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <USBD_LL_DataOutStage+0x7c>
 800703e:	2b01      	cmp	r3, #1
 8007040:	d003      	beq.n	800704a <USBD_LL_DataOutStage+0x82>
 8007042:	e018      	b.n	8007076 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	75bb      	strb	r3, [r7, #22]
            break;
 8007048:	e018      	b.n	800707c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007050:	b2db      	uxtb	r3, r3
 8007052:	4619      	mov	r1, r3
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 fa5e 	bl	8007516 <USBD_CoreFindIF>
 800705a:	4603      	mov	r3, r0
 800705c:	75bb      	strb	r3, [r7, #22]
            break;
 800705e:	e00d      	b.n	800707c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007066:	b2db      	uxtb	r3, r3
 8007068:	4619      	mov	r1, r3
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fa60 	bl	8007530 <USBD_CoreFindEP>
 8007070:	4603      	mov	r3, r0
 8007072:	75bb      	strb	r3, [r7, #22]
            break;
 8007074:	e002      	b.n	800707c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	75bb      	strb	r3, [r7, #22]
            break;
 800707a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800707c:	7dbb      	ldrb	r3, [r7, #22]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d119      	bne.n	80070b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b03      	cmp	r3, #3
 800708c:	d113      	bne.n	80070b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800708e:	7dba      	ldrb	r2, [r7, #22]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	32ae      	adds	r2, #174	; 0xae
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800709e:	7dba      	ldrb	r2, [r7, #22]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80070a6:	7dba      	ldrb	r2, [r7, #22]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	32ae      	adds	r2, #174	; 0xae
 80070ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f001 f974 	bl	80083a4 <USBD_CtlSendStatus>
 80070bc:	e032      	b.n	8007124 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fa31 	bl	8007530 <USBD_CoreFindEP>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d2:	7dbb      	ldrb	r3, [r7, #22]
 80070d4:	2bff      	cmp	r3, #255	; 0xff
 80070d6:	d025      	beq.n	8007124 <USBD_LL_DataOutStage+0x15c>
 80070d8:	7dbb      	ldrb	r3, [r7, #22]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d122      	bne.n	8007124 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d117      	bne.n	800711a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070ea:	7dba      	ldrb	r2, [r7, #22]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	32ae      	adds	r2, #174	; 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00f      	beq.n	800711a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070fa:	7dba      	ldrb	r2, [r7, #22]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007102:	7dba      	ldrb	r2, [r7, #22]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	32ae      	adds	r2, #174	; 0xae
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	7afa      	ldrb	r2, [r7, #11]
 8007110:	4611      	mov	r1, r2
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	e000      	b.n	8007126 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b086      	sub	sp, #24
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	460b      	mov	r3, r1
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d16f      	bne.n	8007222 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3314      	adds	r3, #20
 8007146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800714e:	2b02      	cmp	r3, #2
 8007150:	d15a      	bne.n	8007208 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	429a      	cmp	r2, r3
 800715c:	d914      	bls.n	8007188 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	461a      	mov	r2, r3
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f001 f8d6 	bl	8008326 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800717a:	2300      	movs	r3, #0
 800717c:	2200      	movs	r2, #0
 800717e:	2100      	movs	r1, #0
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f004 fb95 	bl	800b8b0 <USBD_LL_PrepareReceive>
 8007186:	e03f      	b.n	8007208 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d11c      	bne.n	80071ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800719c:	429a      	cmp	r2, r3
 800719e:	d316      	bcc.n	80071ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d20f      	bcs.n	80071ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071ae:	2200      	movs	r2, #0
 80071b0:	2100      	movs	r1, #0
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f001 f8b7 	bl	8008326 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071c0:	2300      	movs	r3, #0
 80071c2:	2200      	movs	r2, #0
 80071c4:	2100      	movs	r1, #0
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f004 fb72 	bl	800b8b0 <USBD_LL_PrepareReceive>
 80071cc:	e01c      	b.n	8007208 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d10f      	bne.n	80071fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071fa:	2180      	movs	r1, #128	; 0x80
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f004 faad 	bl	800b75c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f001 f8e1 	bl	80083ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d03a      	beq.n	8007288 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff fe42 	bl	8006e9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007220:	e032      	b.n	8007288 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f97f 	bl	8007530 <USBD_CoreFindEP>
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	2bff      	cmp	r3, #255	; 0xff
 800723a:	d025      	beq.n	8007288 <USBD_LL_DataInStage+0x15a>
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d122      	bne.n	8007288 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d11c      	bne.n	8007288 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800724e:	7dfa      	ldrb	r2, [r7, #23]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	32ae      	adds	r2, #174	; 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d014      	beq.n	8007288 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800725e:	7dfa      	ldrb	r2, [r7, #23]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007266:	7dfa      	ldrb	r2, [r7, #23]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	32ae      	adds	r2, #174	; 0xae
 800726c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	7afa      	ldrb	r2, [r7, #11]
 8007274:	4611      	mov	r1, r2
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800727e:	7dbb      	ldrb	r3, [r7, #22]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007284:	7dbb      	ldrb	r3, [r7, #22]
 8007286:	e000      	b.n	800728a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d014      	beq.n	80072f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6852      	ldr	r2, [r2, #4]
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	4611      	mov	r1, r2
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f004 f9e7 	bl	800b6d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	2200      	movs	r2, #0
 8007318:	2180      	movs	r1, #128	; 0x80
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f004 f9d9 	bl	800b6d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2240      	movs	r2, #64	; 0x40
 800732a:	621a      	str	r2, [r3, #32]

  return ret;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2da      	uxtb	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2204      	movs	r2, #4
 8007370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b04      	cmp	r3, #4
 8007394:	d106      	bne.n	80073a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800739c:	b2da      	uxtb	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d110      	bne.n	80073e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	32ae      	adds	r2, #174	; 0xae
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007410:	2303      	movs	r3, #3
 8007412:	e01c      	b.n	800744e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b03      	cmp	r3, #3
 800741e:	d115      	bne.n	800744c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	32ae      	adds	r2, #174	; 0xae
 800742a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	32ae      	adds	r2, #174	; 0xae
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	4611      	mov	r1, r2
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	32ae      	adds	r2, #174	; 0xae
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	e01c      	b.n	80074b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b03      	cmp	r3, #3
 8007482:	d115      	bne.n	80074b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	32ae      	adds	r2, #174	; 0xae
 800748e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32ae      	adds	r2, #174	; 0xae
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	4611      	mov	r1, r2
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00e      	beq.n	800750c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6852      	ldr	r2, [r2, #4]
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	4611      	mov	r1, r2
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007508:	2303      	movs	r3, #3
 800750a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800750c:	7bfb      	ldrb	r3, [r7, #15]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	460b      	mov	r3, r1
 8007520:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007522:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800753c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	b29b      	uxth	r3, r3
 800756e:	429a      	cmp	r2, r3
 8007570:	d920      	bls.n	80075b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800757a:	e013      	b.n	80075a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800757c:	f107 030a 	add.w	r3, r7, #10
 8007580:	4619      	mov	r1, r3
 8007582:	6978      	ldr	r0, [r7, #20]
 8007584:	f000 f81b 	bl	80075be <USBD_GetNextDesc>
 8007588:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	2b05      	cmp	r3, #5
 8007590:	d108      	bne.n	80075a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	789b      	ldrb	r3, [r3, #2]
 800759a:	78fa      	ldrb	r2, [r7, #3]
 800759c:	429a      	cmp	r2, r3
 800759e:	d008      	beq.n	80075b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	885b      	ldrh	r3, [r3, #2]
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	897b      	ldrh	r3, [r7, #10]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d8e5      	bhi.n	800757c <USBD_GetEpDesc+0x32>
 80075b0:	e000      	b.n	80075b4 <USBD_GetEpDesc+0x6a>
          break;
 80075b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075b4:	693b      	ldr	r3, [r7, #16]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	881a      	ldrh	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4413      	add	r3, r2
 80075d8:	b29a      	uxth	r2, r3
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	3301      	adds	r3, #1
 800760e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007616:	8a3b      	ldrh	r3, [r7, #16]
 8007618:	021b      	lsls	r3, r3, #8
 800761a:	b21a      	sxth	r2, r3
 800761c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007620:	4313      	orrs	r3, r2
 8007622:	b21b      	sxth	r3, r3
 8007624:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007626:	89fb      	ldrh	r3, [r7, #14]
}
 8007628:	4618      	mov	r0, r3
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800764a:	2b40      	cmp	r3, #64	; 0x40
 800764c:	d005      	beq.n	800765a <USBD_StdDevReq+0x26>
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d857      	bhi.n	8007702 <USBD_StdDevReq+0xce>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00f      	beq.n	8007676 <USBD_StdDevReq+0x42>
 8007656:	2b20      	cmp	r3, #32
 8007658:	d153      	bne.n	8007702 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	32ae      	adds	r2, #174	; 0xae
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
      break;
 8007674:	e04a      	b.n	800770c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	785b      	ldrb	r3, [r3, #1]
 800767a:	2b09      	cmp	r3, #9
 800767c:	d83b      	bhi.n	80076f6 <USBD_StdDevReq+0xc2>
 800767e:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <USBD_StdDevReq+0x50>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	080076d9 	.word	0x080076d9
 8007688:	080076ed 	.word	0x080076ed
 800768c:	080076f7 	.word	0x080076f7
 8007690:	080076e3 	.word	0x080076e3
 8007694:	080076f7 	.word	0x080076f7
 8007698:	080076b7 	.word	0x080076b7
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076f7 	.word	0x080076f7
 80076a4:	080076cf 	.word	0x080076cf
 80076a8:	080076c1 	.word	0x080076c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa3c 	bl	8007b2c <USBD_GetDescriptor>
          break;
 80076b4:	e024      	b.n	8007700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fbcb 	bl	8007e54 <USBD_SetAddress>
          break;
 80076be:	e01f      	b.n	8007700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fc0a 	bl	8007edc <USBD_SetConfig>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]
          break;
 80076cc:	e018      	b.n	8007700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fcad 	bl	8008030 <USBD_GetConfig>
          break;
 80076d6:	e013      	b.n	8007700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fcde 	bl	800809c <USBD_GetStatus>
          break;
 80076e0:	e00e      	b.n	8007700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fd0d 	bl	8008104 <USBD_SetFeature>
          break;
 80076ea:	e009      	b.n	8007700 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fd31 	bl	8008156 <USBD_ClrFeature>
          break;
 80076f4:	e004      	b.n	8007700 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fd88 	bl	800820e <USBD_CtlError>
          break;
 80076fe:	bf00      	nop
      }
      break;
 8007700:	e004      	b.n	800770c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fd82 	bl	800820e <USBD_CtlError>
      break;
 800770a:	bf00      	nop
  }

  return ret;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop

08007718 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d005      	beq.n	800773e <USBD_StdItfReq+0x26>
 8007732:	2b40      	cmp	r3, #64	; 0x40
 8007734:	d852      	bhi.n	80077dc <USBD_StdItfReq+0xc4>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <USBD_StdItfReq+0x26>
 800773a:	2b20      	cmp	r3, #32
 800773c:	d14e      	bne.n	80077dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007744:	b2db      	uxtb	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	2b02      	cmp	r3, #2
 800774a:	d840      	bhi.n	80077ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	889b      	ldrh	r3, [r3, #4]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	d836      	bhi.n	80077c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	889b      	ldrh	r3, [r3, #4]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fed9 	bl	8007516 <USBD_CoreFindIF>
 8007764:	4603      	mov	r3, r0
 8007766:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2bff      	cmp	r3, #255	; 0xff
 800776c:	d01d      	beq.n	80077aa <USBD_StdItfReq+0x92>
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d11a      	bne.n	80077aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007774:	7bba      	ldrb	r2, [r7, #14]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	32ae      	adds	r2, #174	; 0xae
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00f      	beq.n	80077a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007784:	7bba      	ldrb	r2, [r7, #14]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800778c:	7bba      	ldrb	r2, [r7, #14]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32ae      	adds	r2, #174	; 0xae
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077a2:	e004      	b.n	80077ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077a8:	e001      	b.n	80077ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077aa:	2303      	movs	r3, #3
 80077ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88db      	ldrh	r3, [r3, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d110      	bne.n	80077d8 <USBD_StdItfReq+0xc0>
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10d      	bne.n	80077d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fdf1 	bl	80083a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077c2:	e009      	b.n	80077d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fd21 	bl	800820e <USBD_CtlError>
          break;
 80077cc:	e004      	b.n	80077d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fd1c 	bl	800820e <USBD_CtlError>
          break;
 80077d6:	e000      	b.n	80077da <USBD_StdItfReq+0xc2>
          break;
 80077d8:	bf00      	nop
      }
      break;
 80077da:	e004      	b.n	80077e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fd15 	bl	800820e <USBD_CtlError>
      break;
 80077e4:	bf00      	nop
  }

  return ret;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	889b      	ldrh	r3, [r3, #4]
 8007802:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d007      	beq.n	8007820 <USBD_StdEPReq+0x30>
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	f200 817f 	bhi.w	8007b14 <USBD_StdEPReq+0x324>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d02a      	beq.n	8007870 <USBD_StdEPReq+0x80>
 800781a:	2b20      	cmp	r3, #32
 800781c:	f040 817a 	bne.w	8007b14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fe83 	bl	8007530 <USBD_CoreFindEP>
 800782a:	4603      	mov	r3, r0
 800782c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800782e:	7b7b      	ldrb	r3, [r7, #13]
 8007830:	2bff      	cmp	r3, #255	; 0xff
 8007832:	f000 8174 	beq.w	8007b1e <USBD_StdEPReq+0x32e>
 8007836:	7b7b      	ldrb	r3, [r7, #13]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 8170 	bne.w	8007b1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800783e:	7b7a      	ldrb	r2, [r7, #13]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007846:	7b7a      	ldrb	r2, [r7, #13]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	32ae      	adds	r2, #174	; 0xae
 800784c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 8163 	beq.w	8007b1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007858:	7b7a      	ldrb	r2, [r7, #13]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	32ae      	adds	r2, #174	; 0xae
 800785e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800786e:	e156      	b.n	8007b1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d008      	beq.n	800788a <USBD_StdEPReq+0x9a>
 8007878:	2b03      	cmp	r3, #3
 800787a:	f300 8145 	bgt.w	8007b08 <USBD_StdEPReq+0x318>
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 809b 	beq.w	80079ba <USBD_StdEPReq+0x1ca>
 8007884:	2b01      	cmp	r3, #1
 8007886:	d03c      	beq.n	8007902 <USBD_StdEPReq+0x112>
 8007888:	e13e      	b.n	8007b08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d002      	beq.n	800789c <USBD_StdEPReq+0xac>
 8007896:	2b03      	cmp	r3, #3
 8007898:	d016      	beq.n	80078c8 <USBD_StdEPReq+0xd8>
 800789a:	e02c      	b.n	80078f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00d      	beq.n	80078be <USBD_StdEPReq+0xce>
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b80      	cmp	r3, #128	; 0x80
 80078a6:	d00a      	beq.n	80078be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f003 ff55 	bl	800b75c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078b2:	2180      	movs	r1, #128	; 0x80
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f003 ff51 	bl	800b75c <USBD_LL_StallEP>
 80078ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078bc:	e020      	b.n	8007900 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fca4 	bl	800820e <USBD_CtlError>
              break;
 80078c6:	e01b      	b.n	8007900 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	885b      	ldrh	r3, [r3, #2]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10e      	bne.n	80078ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <USBD_StdEPReq+0xfe>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d008      	beq.n	80078ee <USBD_StdEPReq+0xfe>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	88db      	ldrh	r3, [r3, #6]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f003 ff37 	bl	800b75c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fd58 	bl	80083a4 <USBD_CtlSendStatus>

              break;
 80078f4:	e004      	b.n	8007900 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc88 	bl	800820e <USBD_CtlError>
              break;
 80078fe:	bf00      	nop
          }
          break;
 8007900:	e107      	b.n	8007b12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d002      	beq.n	8007914 <USBD_StdEPReq+0x124>
 800790e:	2b03      	cmp	r3, #3
 8007910:	d016      	beq.n	8007940 <USBD_StdEPReq+0x150>
 8007912:	e04b      	b.n	80079ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00d      	beq.n	8007936 <USBD_StdEPReq+0x146>
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b80      	cmp	r3, #128	; 0x80
 800791e:	d00a      	beq.n	8007936 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f003 ff19 	bl	800b75c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800792a:	2180      	movs	r1, #128	; 0x80
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f003 ff15 	bl	800b75c <USBD_LL_StallEP>
 8007932:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007934:	e040      	b.n	80079b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc68 	bl	800820e <USBD_CtlError>
              break;
 800793e:	e03b      	b.n	80079b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	885b      	ldrh	r3, [r3, #2]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d136      	bne.n	80079b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f003 ff1f 	bl	800b79a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fd21 	bl	80083a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff fde2 	bl	8007530 <USBD_CoreFindEP>
 800796c:	4603      	mov	r3, r0
 800796e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007970:	7b7b      	ldrb	r3, [r7, #13]
 8007972:	2bff      	cmp	r3, #255	; 0xff
 8007974:	d01f      	beq.n	80079b6 <USBD_StdEPReq+0x1c6>
 8007976:	7b7b      	ldrb	r3, [r7, #13]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11c      	bne.n	80079b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800797c:	7b7a      	ldrb	r2, [r7, #13]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007984:	7b7a      	ldrb	r2, [r7, #13]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32ae      	adds	r2, #174	; 0xae
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007994:	7b7a      	ldrb	r2, [r7, #13]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	; 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079aa:	e004      	b.n	80079b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fc2d 	bl	800820e <USBD_CtlError>
              break;
 80079b4:	e000      	b.n	80079b8 <USBD_StdEPReq+0x1c8>
              break;
 80079b6:	bf00      	nop
          }
          break;
 80079b8:	e0ab      	b.n	8007b12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d002      	beq.n	80079cc <USBD_StdEPReq+0x1dc>
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d032      	beq.n	8007a30 <USBD_StdEPReq+0x240>
 80079ca:	e097      	b.n	8007afc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <USBD_StdEPReq+0x1f2>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d004      	beq.n	80079e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fc17 	bl	800820e <USBD_CtlError>
                break;
 80079e0:	e091      	b.n	8007b06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da0b      	bge.n	8007a02 <USBD_StdEPReq+0x212>
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	3310      	adds	r3, #16
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	3304      	adds	r3, #4
 8007a00:	e00b      	b.n	8007a1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	4413      	add	r3, r2
 8007a18:	3304      	adds	r3, #4
 8007a1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2202      	movs	r2, #2
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fc61 	bl	80082f0 <USBD_CtlSendData>
              break;
 8007a2e:	e06a      	b.n	8007b06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da11      	bge.n	8007a5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 020f 	and.w	r2, r3, #15
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	3324      	adds	r3, #36	; 0x24
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d117      	bne.n	8007a82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fbda 	bl	800820e <USBD_CtlError>
                  break;
 8007a5a:	e054      	b.n	8007b06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	f003 020f 	and.w	r2, r3, #15
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fbc7 	bl	800820e <USBD_CtlError>
                  break;
 8007a80:	e041      	b.n	8007b06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da0b      	bge.n	8007aa2 <USBD_StdEPReq+0x2b2>
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	3310      	adds	r3, #16
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	e00b      	b.n	8007aba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3304      	adds	r3, #4
 8007aba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <USBD_StdEPReq+0x2d8>
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b80      	cmp	r3, #128	; 0x80
 8007ac6:	d103      	bne.n	8007ad0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e00e      	b.n	8007aee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f003 fe7f 	bl	800b7d8 <USBD_LL_IsStallEP>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e002      	b.n	8007aee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2202      	movs	r2, #2
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fbfb 	bl	80082f0 <USBD_CtlSendData>
              break;
 8007afa:	e004      	b.n	8007b06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb85 	bl	800820e <USBD_CtlError>
              break;
 8007b04:	bf00      	nop
          }
          break;
 8007b06:	e004      	b.n	8007b12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fb7f 	bl	800820e <USBD_CtlError>
          break;
 8007b10:	bf00      	nop
      }
      break;
 8007b12:	e005      	b.n	8007b20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fb79 	bl	800820e <USBD_CtlError>
      break;
 8007b1c:	e000      	b.n	8007b20 <USBD_StdEPReq+0x330>
      break;
 8007b1e:	bf00      	nop
  }

  return ret;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	885b      	ldrh	r3, [r3, #2]
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2b0e      	cmp	r3, #14
 8007b4e:	f200 8152 	bhi.w	8007df6 <USBD_GetDescriptor+0x2ca>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USBD_GetDescriptor+0x2c>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007bc9 	.word	0x08007bc9
 8007b5c:	08007be1 	.word	0x08007be1
 8007b60:	08007c21 	.word	0x08007c21
 8007b64:	08007df7 	.word	0x08007df7
 8007b68:	08007df7 	.word	0x08007df7
 8007b6c:	08007d97 	.word	0x08007d97
 8007b70:	08007dc3 	.word	0x08007dc3
 8007b74:	08007df7 	.word	0x08007df7
 8007b78:	08007df7 	.word	0x08007df7
 8007b7c:	08007df7 	.word	0x08007df7
 8007b80:	08007df7 	.word	0x08007df7
 8007b84:	08007df7 	.word	0x08007df7
 8007b88:	08007df7 	.word	0x08007df7
 8007b8c:	08007df7 	.word	0x08007df7
 8007b90:	08007b95 	.word	0x08007b95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7c12      	ldrb	r2, [r2, #16]
 8007bac:	f107 0108 	add.w	r1, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bb6:	e126      	b.n	8007e06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fb27 	bl	800820e <USBD_CtlError>
        err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc6:	e11e      	b.n	8007e06 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
      break;
 8007bde:	e112      	b.n	8007e06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7c1b      	ldrb	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10d      	bne.n	8007c04 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f107 0208 	add.w	r2, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	2202      	movs	r2, #2
 8007c00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c02:	e100      	b.n	8007e06 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f107 0208 	add.w	r2, r7, #8
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	701a      	strb	r2, [r3, #0]
      break;
 8007c1e:	e0f2      	b.n	8007e06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	885b      	ldrh	r3, [r3, #2]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	f200 80ac 	bhi.w	8007d84 <USBD_GetDescriptor+0x258>
 8007c2c:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <USBD_GetDescriptor+0x108>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007c4d 	.word	0x08007c4d
 8007c38:	08007c81 	.word	0x08007c81
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007ce9 	.word	0x08007ce9
 8007c44:	08007d1d 	.word	0x08007d1d
 8007c48:	08007d51 	.word	0x08007d51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6e:	e091      	b.n	8007d94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 facb 	bl	800820e <USBD_CtlError>
            err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7e:	e089      	b.n	8007d94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e077      	b.n	8007d94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fab1 	bl	800820e <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e06f      	b.n	8007d94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e05d      	b.n	8007d94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa97 	bl	800820e <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e055      	b.n	8007d94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e043      	b.n	8007d94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa7d 	bl	800820e <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e03b      	b.n	8007d94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3e:	e029      	b.n	8007d94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa63 	bl	800820e <USBD_CtlError>
            err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4e:	e021      	b.n	8007d94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d72:	e00f      	b.n	8007d94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa49 	bl	800820e <USBD_CtlError>
            err++;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	72fb      	strb	r3, [r7, #11]
          break;
 8007d82:	e007      	b.n	8007d94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa41 	bl	800820e <USBD_CtlError>
          err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d92:	bf00      	nop
      }
      break;
 8007d94:	e037      	b.n	8007e06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7c1b      	ldrb	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d109      	bne.n	8007db2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	f107 0208 	add.w	r2, r7, #8
 8007daa:	4610      	mov	r0, r2
 8007dac:	4798      	blx	r3
 8007dae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db0:	e029      	b.n	8007e06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa2a 	bl	800820e <USBD_CtlError>
        err++;
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc0:	e021      	b.n	8007e06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7c1b      	ldrb	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10d      	bne.n	8007de6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	f107 0208 	add.w	r2, r7, #8
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4798      	blx	r3
 8007dda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	2207      	movs	r2, #7
 8007de2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de4:	e00f      	b.n	8007e06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa10 	bl	800820e <USBD_CtlError>
        err++;
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	3301      	adds	r3, #1
 8007df2:	72fb      	strb	r3, [r7, #11]
      break;
 8007df4:	e007      	b.n	8007e06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa08 	bl	800820e <USBD_CtlError>
      err++;
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	3301      	adds	r3, #1
 8007e02:	72fb      	strb	r3, [r7, #11]
      break;
 8007e04:	bf00      	nop
  }

  if (err != 0U)
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d11e      	bne.n	8007e4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	88db      	ldrh	r3, [r3, #6]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d016      	beq.n	8007e42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007e14:	893b      	ldrh	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00e      	beq.n	8007e38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88da      	ldrh	r2, [r3, #6]
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	bf28      	it	cs
 8007e24:	4613      	movcs	r3, r2
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e2a:	893b      	ldrh	r3, [r7, #8]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa5d 	bl	80082f0 <USBD_CtlSendData>
 8007e36:	e009      	b.n	8007e4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9e7 	bl	800820e <USBD_CtlError>
 8007e40:	e004      	b.n	8007e4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 faae 	bl	80083a4 <USBD_CtlSendStatus>
 8007e48:	e000      	b.n	8007e4c <USBD_GetDescriptor+0x320>
    return;
 8007e4a:	bf00      	nop
  }
}
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop

08007e54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	889b      	ldrh	r3, [r3, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d131      	bne.n	8007eca <USBD_SetAddress+0x76>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88db      	ldrh	r3, [r3, #6]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d12d      	bne.n	8007eca <USBD_SetAddress+0x76>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	885b      	ldrh	r3, [r3, #2]
 8007e72:	2b7f      	cmp	r3, #127	; 0x7f
 8007e74:	d829      	bhi.n	8007eca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d104      	bne.n	8007e98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f9bc 	bl	800820e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e96:	e01d      	b.n	8007ed4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7bfa      	ldrb	r2, [r7, #15]
 8007e9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f003 fcc3 	bl	800b830 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa7a 	bl	80083a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d004      	beq.n	8007ec0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ebe:	e009      	b.n	8007ed4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec8:	e004      	b.n	8007ed4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f99e 	bl	800820e <USBD_CtlError>
  }
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	885b      	ldrh	r3, [r3, #2]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	4b4e      	ldr	r3, [pc, #312]	; (800802c <USBD_SetConfig+0x150>)
 8007ef2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ef4:	4b4d      	ldr	r3, [pc, #308]	; (800802c <USBD_SetConfig+0x150>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d905      	bls.n	8007f08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f985 	bl	800820e <USBD_CtlError>
    return USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e08c      	b.n	8008022 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d002      	beq.n	8007f1a <USBD_SetConfig+0x3e>
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d029      	beq.n	8007f6c <USBD_SetConfig+0x90>
 8007f18:	e075      	b.n	8008006 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f1a:	4b44      	ldr	r3, [pc, #272]	; (800802c <USBD_SetConfig+0x150>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d020      	beq.n	8007f64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f22:	4b42      	ldr	r3, [pc, #264]	; (800802c <USBD_SetConfig+0x150>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f2c:	4b3f      	ldr	r3, [pc, #252]	; (800802c <USBD_SetConfig+0x150>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fe ffbd 	bl	8006eb2 <USBD_SetClassConfig>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f962 	bl	800820e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f52:	e065      	b.n	8008020 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fa25 	bl	80083a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f62:	e05d      	b.n	8008020 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa1d 	bl	80083a4 <USBD_CtlSendStatus>
      break;
 8007f6a:	e059      	b.n	8008020 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f6c:	4b2f      	ldr	r3, [pc, #188]	; (800802c <USBD_SetConfig+0x150>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d112      	bne.n	8007f9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f7c:	4b2b      	ldr	r3, [pc, #172]	; (800802c <USBD_SetConfig+0x150>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f86:	4b29      	ldr	r3, [pc, #164]	; (800802c <USBD_SetConfig+0x150>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7fe ffac 	bl	8006eea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa06 	bl	80083a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f98:	e042      	b.n	8008020 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <USBD_SetConfig+0x150>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d02a      	beq.n	8007ffe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7fe ff9a 	bl	8006eea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fb6:	4b1d      	ldr	r3, [pc, #116]	; (800802c <USBD_SetConfig+0x150>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fc0:	4b1a      	ldr	r3, [pc, #104]	; (800802c <USBD_SetConfig+0x150>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fe ff73 	bl	8006eb2 <USBD_SetClassConfig>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00f      	beq.n	8007ff6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f918 	bl	800820e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fe ff7f 	bl	8006eea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ff4:	e014      	b.n	8008020 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9d4 	bl	80083a4 <USBD_CtlSendStatus>
      break;
 8007ffc:	e010      	b.n	8008020 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f9d0 	bl	80083a4 <USBD_CtlSendStatus>
      break;
 8008004:	e00c      	b.n	8008020 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f900 	bl	800820e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800800e:	4b07      	ldr	r3, [pc, #28]	; (800802c <USBD_SetConfig+0x150>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7fe ff68 	bl	8006eea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800801a:	2303      	movs	r3, #3
 800801c:	73fb      	strb	r3, [r7, #15]
      break;
 800801e:	bf00      	nop
  }

  return ret;
 8008020:	7bfb      	ldrb	r3, [r7, #15]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000288 	.word	0x20000288

08008030 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	88db      	ldrh	r3, [r3, #6]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d004      	beq.n	800804c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f8e2 	bl	800820e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800804a:	e023      	b.n	8008094 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	dc02      	bgt.n	800805e <USBD_GetConfig+0x2e>
 8008058:	2b00      	cmp	r3, #0
 800805a:	dc03      	bgt.n	8008064 <USBD_GetConfig+0x34>
 800805c:	e015      	b.n	800808a <USBD_GetConfig+0x5a>
 800805e:	2b03      	cmp	r3, #3
 8008060:	d00b      	beq.n	800807a <USBD_GetConfig+0x4a>
 8008062:	e012      	b.n	800808a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3308      	adds	r3, #8
 800806e:	2201      	movs	r2, #1
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f93c 	bl	80082f0 <USBD_CtlSendData>
        break;
 8008078:	e00c      	b.n	8008094 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3304      	adds	r3, #4
 800807e:	2201      	movs	r2, #1
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f934 	bl	80082f0 <USBD_CtlSendData>
        break;
 8008088:	e004      	b.n	8008094 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f8be 	bl	800820e <USBD_CtlError>
        break;
 8008092:	bf00      	nop
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d81e      	bhi.n	80080f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d004      	beq.n	80080c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8a5 	bl	800820e <USBD_CtlError>
        break;
 80080c4:	e01a      	b.n	80080fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f043 0202 	orr.w	r2, r3, #2
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	330c      	adds	r3, #12
 80080e6:	2202      	movs	r2, #2
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f900 	bl	80082f0 <USBD_CtlSendData>
      break;
 80080f0:	e004      	b.n	80080fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f88a 	bl	800820e <USBD_CtlError>
      break;
 80080fa:	bf00      	nop
  }
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	885b      	ldrh	r3, [r3, #2]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d107      	bne.n	8008126 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f940 	bl	80083a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008124:	e013      	b.n	800814e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	885b      	ldrh	r3, [r3, #2]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d10b      	bne.n	8008146 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	889b      	ldrh	r3, [r3, #4]
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	b29b      	uxth	r3, r3
 8008136:	b2da      	uxtb	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f930 	bl	80083a4 <USBD_CtlSendStatus>
}
 8008144:	e003      	b.n	800814e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f860 	bl	800820e <USBD_CtlError>
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008166:	b2db      	uxtb	r3, r3
 8008168:	3b01      	subs	r3, #1
 800816a:	2b02      	cmp	r3, #2
 800816c:	d80b      	bhi.n	8008186 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	885b      	ldrh	r3, [r3, #2]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d10c      	bne.n	8008190 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f910 	bl	80083a4 <USBD_CtlSendStatus>
      }
      break;
 8008184:	e004      	b.n	8008190 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f840 	bl	800820e <USBD_CtlError>
      break;
 800818e:	e000      	b.n	8008192 <USBD_ClrFeature+0x3c>
      break;
 8008190:	bf00      	nop
  }
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3301      	adds	r3, #1
 80081b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3301      	adds	r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fa17 	bl	80075f8 <SWAPBYTE>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7ff fa0a 	bl	80075f8 <SWAPBYTE>
 80081e4:	4603      	mov	r3, r0
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff f9fd 	bl	80075f8 <SWAPBYTE>
 80081fe:	4603      	mov	r3, r0
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	80da      	strh	r2, [r3, #6]
}
 8008206:	bf00      	nop
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f003 fa9e 	bl	800b75c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008220:	2100      	movs	r1, #0
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f003 fa9a 	bl	800b75c <USBD_LL_StallEP>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d036      	beq.n	80082b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800824a:	6938      	ldr	r0, [r7, #16]
 800824c:	f000 f836 	bl	80082bc <USBD_GetLen>
 8008250:	4603      	mov	r3, r0
 8008252:	3301      	adds	r3, #1
 8008254:	b29b      	uxth	r3, r3
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	b29a      	uxth	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	4413      	add	r3, r2
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	701a      	strb	r2, [r3, #0]
  idx++;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	3301      	adds	r3, #1
 800826e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	4413      	add	r3, r2
 8008276:	2203      	movs	r2, #3
 8008278:	701a      	strb	r2, [r3, #0]
  idx++;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	3301      	adds	r3, #1
 800827e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008280:	e013      	b.n	80082aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	4413      	add	r3, r2
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	7812      	ldrb	r2, [r2, #0]
 800828c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	3301      	adds	r3, #1
 8008292:	613b      	str	r3, [r7, #16]
    idx++;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	3301      	adds	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	4413      	add	r3, r2
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	3301      	adds	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e7      	bne.n	8008282 <USBD_GetString+0x52>
 80082b2:	e000      	b.n	80082b6 <USBD_GetString+0x86>
    return;
 80082b4:	bf00      	nop
  }
}
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082cc:	e005      	b.n	80082da <USBD_GetLen+0x1e>
  {
    len++;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	3301      	adds	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f5      	bne.n	80082ce <USBD_GetLen+0x12>
  }

  return len;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2202      	movs	r2, #2
 8008300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	2100      	movs	r1, #0
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f003 faa9 	bl	800b86e <USBD_LL_Transmit>

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	2100      	movs	r1, #0
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f003 fa98 	bl	800b86e <USBD_LL_Transmit>

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2203      	movs	r2, #3
 8008358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	2100      	movs	r1, #0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f003 fa9c 	bl	800b8b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	2100      	movs	r1, #0
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f003 fa8b 	bl	800b8b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2204      	movs	r2, #4
 80083b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083b4:	2300      	movs	r3, #0
 80083b6:	2200      	movs	r2, #0
 80083b8:	2100      	movs	r1, #0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f003 fa57 	bl	800b86e <USBD_LL_Transmit>

  return USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2205      	movs	r2, #5
 80083d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083da:	2300      	movs	r3, #0
 80083dc:	2200      	movs	r2, #0
 80083de:	2100      	movs	r1, #0
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f003 fa65 	bl	800b8b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <__NVIC_SetPriority>:
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008400:	2b00      	cmp	r3, #0
 8008402:	db0a      	blt.n	800841a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	490c      	ldr	r1, [pc, #48]	; (800843c <__NVIC_SetPriority+0x4c>)
 800840a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800840e:	0112      	lsls	r2, r2, #4
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	440b      	add	r3, r1
 8008414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008418:	e00a      	b.n	8008430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	b2da      	uxtb	r2, r3
 800841e:	4908      	ldr	r1, [pc, #32]	; (8008440 <__NVIC_SetPriority+0x50>)
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	3b04      	subs	r3, #4
 8008428:	0112      	lsls	r2, r2, #4
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	440b      	add	r3, r1
 800842e:	761a      	strb	r2, [r3, #24]
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	e000e100 	.word	0xe000e100
 8008440:	e000ed00 	.word	0xe000ed00

08008444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008448:	2100      	movs	r1, #0
 800844a:	f06f 0004 	mvn.w	r0, #4
 800844e:	f7ff ffcf 	bl	80083f0 <__NVIC_SetPriority>
#endif
}
 8008452:	bf00      	nop
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800845e:	f3ef 8305 	mrs	r3, IPSR
 8008462:	603b      	str	r3, [r7, #0]
  return(result);
 8008464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800846a:	f06f 0305 	mvn.w	r3, #5
 800846e:	607b      	str	r3, [r7, #4]
 8008470:	e00c      	b.n	800848c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008472:	4b0a      	ldr	r3, [pc, #40]	; (800849c <osKernelInitialize+0x44>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800847a:	4b08      	ldr	r3, [pc, #32]	; (800849c <osKernelInitialize+0x44>)
 800847c:	2201      	movs	r2, #1
 800847e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008480:	2300      	movs	r3, #0
 8008482:	607b      	str	r3, [r7, #4]
 8008484:	e002      	b.n	800848c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008486:	f04f 33ff 	mov.w	r3, #4294967295
 800848a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800848c:	687b      	ldr	r3, [r7, #4]
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	2000028c 	.word	0x2000028c

080084a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a6:	f3ef 8305 	mrs	r3, IPSR
 80084aa:	603b      	str	r3, [r7, #0]
  return(result);
 80084ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80084b2:	f06f 0305 	mvn.w	r3, #5
 80084b6:	607b      	str	r3, [r7, #4]
 80084b8:	e010      	b.n	80084dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <osKernelStart+0x48>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d109      	bne.n	80084d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084c2:	f7ff ffbf 	bl	8008444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084c6:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <osKernelStart+0x48>)
 80084c8:	2202      	movs	r2, #2
 80084ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084cc:	f001 f87c 	bl	80095c8 <vTaskStartScheduler>
      stat = osOK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	607b      	str	r3, [r7, #4]
 80084d4:	e002      	b.n	80084dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80084d6:	f04f 33ff 	mov.w	r3, #4294967295
 80084da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084dc:	687b      	ldr	r3, [r7, #4]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	2000028c 	.word	0x2000028c

080084ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08e      	sub	sp, #56	; 0x38
 80084f0:	af04      	add	r7, sp, #16
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084fc:	f3ef 8305 	mrs	r3, IPSR
 8008500:	617b      	str	r3, [r7, #20]
  return(result);
 8008502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008504:	2b00      	cmp	r3, #0
 8008506:	d17e      	bne.n	8008606 <osThreadNew+0x11a>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d07b      	beq.n	8008606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800850e:	2380      	movs	r3, #128	; 0x80
 8008510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008512:	2318      	movs	r3, #24
 8008514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
 800851e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d045      	beq.n	80085b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <osThreadNew+0x48>
        name = attr->name;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d008      	beq.n	800855a <osThreadNew+0x6e>
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2b38      	cmp	r3, #56	; 0x38
 800854c:	d805      	bhi.n	800855a <osThreadNew+0x6e>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <osThreadNew+0x72>
        return (NULL);
 800855a:	2300      	movs	r3, #0
 800855c:	e054      	b.n	8008608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	089b      	lsrs	r3, r3, #2
 800856c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00e      	beq.n	8008594 <osThreadNew+0xa8>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	2bbb      	cmp	r3, #187	; 0xbb
 800857c:	d90a      	bls.n	8008594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008582:	2b00      	cmp	r3, #0
 8008584:	d006      	beq.n	8008594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <osThreadNew+0xa8>
        mem = 1;
 800858e:	2301      	movs	r3, #1
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	e010      	b.n	80085b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10c      	bne.n	80085b6 <osThreadNew+0xca>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d108      	bne.n	80085b6 <osThreadNew+0xca>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <osThreadNew+0xca>
          mem = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	61bb      	str	r3, [r7, #24]
 80085b0:	e001      	b.n	80085b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d110      	bne.n	80085de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085c4:	9202      	str	r2, [sp, #8]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	6a3a      	ldr	r2, [r7, #32]
 80085d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 fe0c 	bl	80091f0 <xTaskCreateStatic>
 80085d8:	4603      	mov	r3, r0
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	e013      	b.n	8008606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d110      	bne.n	8008606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	f107 0310 	add.w	r3, r7, #16
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fe57 	bl	80092aa <xTaskCreate>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d001      	beq.n	8008606 <osThreadNew+0x11a>
            hTask = NULL;
 8008602:	2300      	movs	r3, #0
 8008604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008606:	693b      	ldr	r3, [r7, #16]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3728      	adds	r7, #40	; 0x28
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008618:	f3ef 8305 	mrs	r3, IPSR
 800861c:	60bb      	str	r3, [r7, #8]
  return(result);
 800861e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <osDelay+0x1c>
    stat = osErrorISR;
 8008624:	f06f 0305 	mvn.w	r3, #5
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e007      	b.n	800863c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 ff92 	bl	8009560 <vTaskDelay>
    }
  }

  return (stat);
 800863c:	68fb      	ldr	r3, [r7, #12]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4a07      	ldr	r2, [pc, #28]	; (8008674 <vApplicationGetIdleTaskMemory+0x2c>)
 8008658:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4a06      	ldr	r2, [pc, #24]	; (8008678 <vApplicationGetIdleTaskMemory+0x30>)
 800865e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2280      	movs	r2, #128	; 0x80
 8008664:	601a      	str	r2, [r3, #0]
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20000290 	.word	0x20000290
 8008678:	2000034c 	.word	0x2000034c

0800867c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a07      	ldr	r2, [pc, #28]	; (80086a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800868c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	4a06      	ldr	r2, [pc, #24]	; (80086ac <vApplicationGetTimerTaskMemory+0x30>)
 8008692:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800869a:	601a      	str	r2, [r3, #0]
}
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	2000054c 	.word	0x2000054c
 80086ac:	20000608 	.word	0x20000608

080086b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f103 0208 	add.w	r2, r3, #8
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295
 80086c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f103 0208 	add.w	r2, r3, #8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f103 0208 	add.w	r2, r3, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d103      	bne.n	8008772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e00c      	b.n	800878c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3308      	adds	r3, #8
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e002      	b.n	8008780 <vListInsert+0x2e>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	429a      	cmp	r2, r3
 800878a:	d2f6      	bcs.n	800877a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	601a      	str	r2, [r3, #0]
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6892      	ldr	r2, [r2, #8]
 80087da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6852      	ldr	r2, [r2, #4]
 80087e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d103      	bne.n	80087f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1e5a      	subs	r2, r3, #1
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008842:	f002 f877 	bl	800a934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008852:	fb01 f303 	mul.w	r3, r1, r3
 8008856:	441a      	add	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008872:	3b01      	subs	r3, #1
 8008874:	68f9      	ldr	r1, [r7, #12]
 8008876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	441a      	add	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	22ff      	movs	r2, #255	; 0xff
 8008886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	22ff      	movs	r2, #255	; 0xff
 800888e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d114      	bne.n	80088c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01a      	beq.n	80088d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3310      	adds	r3, #16
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 f929 	bl	8009afc <xTaskRemoveFromEventList>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d012      	beq.n	80088d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088b0:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <xQueueGenericReset+0xcc>)
 80088b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	e009      	b.n	80088d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3310      	adds	r3, #16
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fef2 	bl	80086b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3324      	adds	r3, #36	; 0x24
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff feed 	bl	80086b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088d6:	f002 f85d 	bl	800a994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088da:	2301      	movs	r3, #1
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	e000ed04 	.word	0xe000ed04

080088e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08e      	sub	sp, #56	; 0x38
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <xQueueGenericCreateStatic+0x52>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <xQueueGenericCreateStatic+0x56>
 800893a:	2301      	movs	r3, #1
 800893c:	e000      	b.n	8008940 <xQueueGenericCreateStatic+0x58>
 800893e:	2300      	movs	r3, #0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	623b      	str	r3, [r7, #32]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <xQueueGenericCreateStatic+0x7e>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <xQueueGenericCreateStatic+0x82>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <xQueueGenericCreateStatic+0x84>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	61fb      	str	r3, [r7, #28]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008986:	2350      	movs	r3, #80	; 0x50
 8008988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b50      	cmp	r3, #80	; 0x50
 800898e:	d00a      	beq.n	80089a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	61bb      	str	r3, [r7, #24]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00d      	beq.n	80089ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f805 	bl	80089d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3730      	adds	r7, #48	; 0x30
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e002      	b.n	80089fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a06:	2101      	movs	r1, #1
 8008a08:	69b8      	ldr	r0, [r7, #24]
 8008a0a:	f7ff ff05 	bl	8008818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08e      	sub	sp, #56	; 0x38
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xQueueGenericSend+0x32>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <xQueueGenericSend+0x40>
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <xQueueGenericSend+0x44>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e000      	b.n	8008a66 <xQueueGenericSend+0x46>
 8008a64:	2300      	movs	r3, #0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <xQueueGenericSend+0x60>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d103      	bne.n	8008a8e <xQueueGenericSend+0x6e>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <xQueueGenericSend+0x72>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <xQueueGenericSend+0x74>
 8008a92:	2300      	movs	r3, #0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <xQueueGenericSend+0x8e>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	623b      	str	r3, [r7, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aae:	f001 f9e7 	bl	8009e80 <xTaskGetSchedulerState>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <xQueueGenericSend+0x9e>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <xQueueGenericSend+0xa2>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <xQueueGenericSend+0xa4>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <xQueueGenericSend+0xbe>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	61fb      	str	r3, [r7, #28]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ade:	f001 ff29 	bl	800a934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d302      	bcc.n	8008af4 <xQueueGenericSend+0xd4>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d129      	bne.n	8008b48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008afa:	f000 fa0b 	bl	8008f14 <prvCopyDataToQueue>
 8008afe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d010      	beq.n	8008b2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	3324      	adds	r3, #36	; 0x24
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fff5 	bl	8009afc <xTaskRemoveFromEventList>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d013      	beq.n	8008b40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b18:	4b3f      	ldr	r3, [pc, #252]	; (8008c18 <xQueueGenericSend+0x1f8>)
 8008b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	e00a      	b.n	8008b40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b30:	4b39      	ldr	r3, [pc, #228]	; (8008c18 <xQueueGenericSend+0x1f8>)
 8008b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b40:	f001 ff28 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e063      	b.n	8008c10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d103      	bne.n	8008b56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b4e:	f001 ff21 	bl	800a994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	e05c      	b.n	8008c10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b5c:	f107 0314 	add.w	r3, r7, #20
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 f82f 	bl	8009bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b66:	2301      	movs	r3, #1
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b6a:	f001 ff13 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b6e:	f000 fd9b 	bl	80096a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b72:	f001 fedf 	bl	800a934 <vPortEnterCritical>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b7c:	b25b      	sxtb	r3, r3
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b82:	d103      	bne.n	8008b8c <xQueueGenericSend+0x16c>
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b92:	b25b      	sxtb	r3, r3
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d103      	bne.n	8008ba2 <xQueueGenericSend+0x182>
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba2:	f001 fef7 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ba6:	1d3a      	adds	r2, r7, #4
 8008ba8:	f107 0314 	add.w	r3, r7, #20
 8008bac:	4611      	mov	r1, r2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 f81e 	bl	8009bf0 <xTaskCheckForTimeOut>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d124      	bne.n	8008c04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bbc:	f000 faa2 	bl	8009104 <prvIsQueueFull>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d018      	beq.n	8008bf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	3310      	adds	r3, #16
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 ff44 	bl	8009a5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bd6:	f000 fa2d 	bl	8009034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bda:	f000 fd73 	bl	80096c4 <xTaskResumeAll>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f47f af7c 	bne.w	8008ade <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <xQueueGenericSend+0x1f8>)
 8008be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	e772      	b.n	8008ade <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bfa:	f000 fa1b 	bl	8009034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bfe:	f000 fd61 	bl	80096c4 <xTaskResumeAll>
 8008c02:	e76c      	b.n	8008ade <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c06:	f000 fa15 	bl	8009034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c0a:	f000 fd5b 	bl	80096c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3738      	adds	r7, #56	; 0x38
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b090      	sub	sp, #64	; 0x40
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d103      	bne.n	8008c58 <xQueueGenericSendFromISR+0x3c>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <xQueueGenericSendFromISR+0x40>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e000      	b.n	8008c5e <xQueueGenericSendFromISR+0x42>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c74:	bf00      	nop
 8008c76:	e7fe      	b.n	8008c76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d103      	bne.n	8008c86 <xQueueGenericSendFromISR+0x6a>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <xQueueGenericSendFromISR+0x6e>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <xQueueGenericSendFromISR+0x70>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	623b      	str	r3, [r7, #32]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ca6:	f001 ff27 	bl	800aaf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008caa:	f3ef 8211 	mrs	r2, BASEPRI
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	61fa      	str	r2, [r7, #28]
 8008cc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008cc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <xQueueGenericSendFromISR+0xbc>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d12f      	bne.n	8008d38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cee:	f000 f911 	bl	8008f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d112      	bne.n	8008d22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d016      	beq.n	8008d32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	3324      	adds	r3, #36	; 0x24
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fef7 	bl	8009afc <xTaskRemoveFromEventList>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00e      	beq.n	8008d32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e007      	b.n	8008d32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d26:	3301      	adds	r3, #1
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	b25a      	sxtb	r2, r3
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d32:	2301      	movs	r3, #1
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008d36:	e001      	b.n	8008d3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3740      	adds	r7, #64	; 0x40
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08c      	sub	sp, #48	; 0x30
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d60:	2300      	movs	r3, #0
 8008d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10a      	bne.n	8008d84 <xQueueReceive+0x30>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	623b      	str	r3, [r7, #32]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <xQueueReceive+0x3e>
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <xQueueReceive+0x42>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e000      	b.n	8008d98 <xQueueReceive+0x44>
 8008d96:	2300      	movs	r3, #0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <xQueueReceive+0x5e>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	61fb      	str	r3, [r7, #28]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008db2:	f001 f865 	bl	8009e80 <xTaskGetSchedulerState>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <xQueueReceive+0x6e>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <xQueueReceive+0x72>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <xQueueReceive+0x74>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <xQueueReceive+0x8e>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	61bb      	str	r3, [r7, #24]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008de2:	f001 fda7 	bl	800a934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01f      	beq.n	8008e32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008df2:	68b9      	ldr	r1, [r7, #8]
 8008df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df6:	f000 f8f7 	bl	8008fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	1e5a      	subs	r2, r3, #1
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00f      	beq.n	8008e2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	3310      	adds	r3, #16
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fe74 	bl	8009afc <xTaskRemoveFromEventList>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e1a:	4b3d      	ldr	r3, [pc, #244]	; (8008f10 <xQueueReceive+0x1bc>)
 8008e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e2a:	f001 fdb3 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e069      	b.n	8008f06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d103      	bne.n	8008e40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e38:	f001 fdac 	bl	800a994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e062      	b.n	8008f06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e46:	f107 0310 	add.w	r3, r7, #16
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 feba 	bl	8009bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e54:	f001 fd9e 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e58:	f000 fc26 	bl	80096a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e5c:	f001 fd6a 	bl	800a934 <vPortEnterCritical>
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d103      	bne.n	8008e76 <xQueueReceive+0x122>
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e82:	d103      	bne.n	8008e8c <xQueueReceive+0x138>
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e8c:	f001 fd82 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e90:	1d3a      	adds	r2, r7, #4
 8008e92:	f107 0310 	add.w	r3, r7, #16
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 fea9 	bl	8009bf0 <xTaskCheckForTimeOut>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d123      	bne.n	8008eec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea6:	f000 f917 	bl	80090d8 <prvIsQueueEmpty>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d017      	beq.n	8008ee0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	3324      	adds	r3, #36	; 0x24
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fdcf 	bl	8009a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec0:	f000 f8b8 	bl	8009034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ec4:	f000 fbfe 	bl	80096c4 <xTaskResumeAll>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d189      	bne.n	8008de2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ece:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <xQueueReceive+0x1bc>)
 8008ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	e780      	b.n	8008de2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ee2:	f000 f8a7 	bl	8009034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ee6:	f000 fbed 	bl	80096c4 <xTaskResumeAll>
 8008eea:	e77a      	b.n	8008de2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eee:	f000 f8a1 	bl	8009034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ef2:	f000 fbe7 	bl	80096c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef8:	f000 f8ee 	bl	80090d8 <prvIsQueueEmpty>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f43f af6f 	beq.w	8008de2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3730      	adds	r7, #48	; 0x30
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10d      	bne.n	8008f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d14d      	bne.n	8008fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 ffbc 	bl	8009ebc <xTaskPriorityDisinherit>
 8008f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	609a      	str	r2, [r3, #8]
 8008f4c:	e043      	b.n	8008fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d119      	bne.n	8008f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6858      	ldr	r0, [r3, #4]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	f002 fd92 	bl	800ba88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6c:	441a      	add	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d32b      	bcc.n	8008fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	e026      	b.n	8008fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68d8      	ldr	r0, [r3, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f90:	461a      	mov	r2, r3
 8008f92:	68b9      	ldr	r1, [r7, #8]
 8008f94:	f002 fd78 	bl	800ba88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	425b      	negs	r3, r3
 8008fa2:	441a      	add	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d207      	bcs.n	8008fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbc:	425b      	negs	r3, r3
 8008fbe:	441a      	add	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d105      	bne.n	8008fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008fde:	697b      	ldr	r3, [r7, #20]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d018      	beq.n	800902c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009002:	441a      	add	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	429a      	cmp	r2, r3
 8009012:	d303      	bcc.n	800901c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68d9      	ldr	r1, [r3, #12]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	461a      	mov	r2, r3
 8009026:	6838      	ldr	r0, [r7, #0]
 8009028:	f002 fd2e 	bl	800ba88 <memcpy>
	}
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800903c:	f001 fc7a 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009048:	e011      	b.n	800906e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	d012      	beq.n	8009078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3324      	adds	r3, #36	; 0x24
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fd50 	bl	8009afc <xTaskRemoveFromEventList>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009062:	f000 fe27 	bl	8009cb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	3b01      	subs	r3, #1
 800906a:	b2db      	uxtb	r3, r3
 800906c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800906e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009072:	2b00      	cmp	r3, #0
 8009074:	dce9      	bgt.n	800904a <prvUnlockQueue+0x16>
 8009076:	e000      	b.n	800907a <prvUnlockQueue+0x46>
					break;
 8009078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	22ff      	movs	r2, #255	; 0xff
 800907e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009082:	f001 fc87 	bl	800a994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009086:	f001 fc55 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009092:	e011      	b.n	80090b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d012      	beq.n	80090c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3310      	adds	r3, #16
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 fd2b 	bl	8009afc <xTaskRemoveFromEventList>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090ac:	f000 fe02 	bl	8009cb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dce9      	bgt.n	8009094 <prvUnlockQueue+0x60>
 80090c0:	e000      	b.n	80090c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	22ff      	movs	r2, #255	; 0xff
 80090c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090cc:	f001 fc62 	bl	800a994 <vPortExitCritical>
}
 80090d0:	bf00      	nop
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090e0:	f001 fc28 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d102      	bne.n	80090f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090ec:	2301      	movs	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e001      	b.n	80090f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090f6:	f001 fc4d 	bl	800a994 <vPortExitCritical>

	return xReturn;
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800910c:	f001 fc12 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009118:	429a      	cmp	r2, r3
 800911a:	d102      	bne.n	8009122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e001      	b.n	8009126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009126:	f001 fc35 	bl	800a994 <vPortExitCritical>

	return xReturn;
 800912a:	68fb      	ldr	r3, [r7, #12]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	e014      	b.n	800916e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009144:	4a0f      	ldr	r2, [pc, #60]	; (8009184 <vQueueAddToRegistry+0x50>)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009150:	490c      	ldr	r1, [pc, #48]	; (8009184 <vQueueAddToRegistry+0x50>)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800915a:	4a0a      	ldr	r2, [pc, #40]	; (8009184 <vQueueAddToRegistry+0x50>)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	4413      	add	r3, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009166:	e006      	b.n	8009176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b07      	cmp	r3, #7
 8009172:	d9e7      	bls.n	8009144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000a08 	.word	0x20000a08

08009188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009198:	f001 fbcc 	bl	800a934 <vPortEnterCritical>
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091a2:	b25b      	sxtb	r3, r3
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d103      	bne.n	80091b2 <vQueueWaitForMessageRestricted+0x2a>
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091b8:	b25b      	sxtb	r3, r3
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d103      	bne.n	80091c8 <vQueueWaitForMessageRestricted+0x40>
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091c8:	f001 fbe4 	bl	800a994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	3324      	adds	r3, #36	; 0x24
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fc61 	bl	8009aa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091e2:	6978      	ldr	r0, [r7, #20]
 80091e4:	f7ff ff26 	bl	8009034 <prvUnlockQueue>
	}
 80091e8:	bf00      	nop
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08e      	sub	sp, #56	; 0x38
 80091f4:	af04      	add	r7, sp, #16
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	623b      	str	r3, [r7, #32]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10a      	bne.n	8009236 <xTaskCreateStatic+0x46>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	61fb      	str	r3, [r7, #28]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009236:	23bc      	movs	r3, #188	; 0xbc
 8009238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2bbc      	cmp	r3, #188	; 0xbc
 800923e:	d00a      	beq.n	8009256 <xTaskCreateStatic+0x66>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	61bb      	str	r3, [r7, #24]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	2b00      	cmp	r3, #0
 800925c:	d01e      	beq.n	800929c <xTaskCreateStatic+0xac>
 800925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009260:	2b00      	cmp	r3, #0
 8009262:	d01b      	beq.n	800929c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800926c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	2202      	movs	r2, #2
 8009272:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009276:	2300      	movs	r3, #0
 8009278:	9303      	str	r3, [sp, #12]
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	9302      	str	r3, [sp, #8]
 800927e:	f107 0314 	add.w	r3, r7, #20
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	68b9      	ldr	r1, [r7, #8]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 f850 	bl	8009334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009296:	f000 f8f3 	bl	8009480 <prvAddNewTaskToReadyList>
 800929a:	e001      	b.n	80092a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092a0:	697b      	ldr	r3, [r7, #20]
	}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3728      	adds	r7, #40	; 0x28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b08c      	sub	sp, #48	; 0x30
 80092ae:	af04      	add	r7, sp, #16
 80092b0:	60f8      	str	r0, [r7, #12]
 80092b2:	60b9      	str	r1, [r7, #8]
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4618      	mov	r0, r3
 80092c0:	f001 fc5a 	bl	800ab78 <pvPortMalloc>
 80092c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00e      	beq.n	80092ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092cc:	20bc      	movs	r0, #188	; 0xbc
 80092ce:	f001 fc53 	bl	800ab78 <pvPortMalloc>
 80092d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
 80092e0:	e005      	b.n	80092ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f001 fd14 	bl	800ad10 <vPortFree>
 80092e8:	e001      	b.n	80092ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d017      	beq.n	8009324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	2300      	movs	r3, #0
 8009300:	9303      	str	r3, [sp, #12]
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	9302      	str	r3, [sp, #8]
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f80e 	bl	8009334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009318:	69f8      	ldr	r0, [r7, #28]
 800931a:	f000 f8b1 	bl	8009480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800931e:	2301      	movs	r3, #1
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	e002      	b.n	800932a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009324:	f04f 33ff 	mov.w	r3, #4294967295
 8009328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800932a:	69bb      	ldr	r3, [r7, #24]
	}
 800932c:	4618      	mov	r0, r3
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	461a      	mov	r2, r3
 800934c:	21a5      	movs	r1, #165	; 0xa5
 800934e:	f002 fba9 	bl	800baa4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800935c:	3b01      	subs	r3, #1
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	617b      	str	r3, [r7, #20]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d01f      	beq.n	80093d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009392:	2300      	movs	r3, #0
 8009394:	61fb      	str	r3, [r7, #28]
 8009396:	e012      	b.n	80093be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	7819      	ldrb	r1, [r3, #0]
 80093a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	3334      	adds	r3, #52	; 0x34
 80093a8:	460a      	mov	r2, r1
 80093aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d006      	beq.n	80093c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	3301      	adds	r3, #1
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	2b0f      	cmp	r3, #15
 80093c2:	d9e9      	bls.n	8009398 <prvInitialiseNewTask+0x64>
 80093c4:	e000      	b.n	80093c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80093c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093d0:	e003      	b.n	80093da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	2b37      	cmp	r3, #55	; 0x37
 80093de:	d901      	bls.n	80093e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093e0:	2337      	movs	r3, #55	; 0x37
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f2:	2200      	movs	r2, #0
 80093f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	3304      	adds	r3, #4
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff f978 	bl	80086f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	3318      	adds	r3, #24
 8009404:	4618      	mov	r0, r3
 8009406:	f7ff f973 	bl	80086f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	2200      	movs	r2, #0
 800942c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	3354      	adds	r3, #84	; 0x54
 8009434:	2260      	movs	r2, #96	; 0x60
 8009436:	2100      	movs	r1, #0
 8009438:	4618      	mov	r0, r3
 800943a:	f002 fb33 	bl	800baa4 <memset>
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <prvInitialiseNewTask+0x140>)
 8009442:	659a      	str	r2, [r3, #88]	; 0x58
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	4a0c      	ldr	r2, [pc, #48]	; (8009478 <prvInitialiseNewTask+0x144>)
 8009448:	65da      	str	r2, [r3, #92]	; 0x5c
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	4a0b      	ldr	r2, [pc, #44]	; (800947c <prvInitialiseNewTask+0x148>)
 800944e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	69b8      	ldr	r0, [r7, #24]
 8009456:	f001 f941 	bl	800a6dc <pxPortInitialiseStack>
 800945a:	4602      	mov	r2, r0
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800946a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800946c:	bf00      	nop
 800946e:	3720      	adds	r7, #32
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	0800bd6c 	.word	0x0800bd6c
 8009478:	0800bd8c 	.word	0x0800bd8c
 800947c:	0800bd4c 	.word	0x0800bd4c

08009480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009488:	f001 fa54 	bl	800a934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800948c:	4b2d      	ldr	r3, [pc, #180]	; (8009544 <prvAddNewTaskToReadyList+0xc4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3301      	adds	r3, #1
 8009492:	4a2c      	ldr	r2, [pc, #176]	; (8009544 <prvAddNewTaskToReadyList+0xc4>)
 8009494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009496:	4b2c      	ldr	r3, [pc, #176]	; (8009548 <prvAddNewTaskToReadyList+0xc8>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d109      	bne.n	80094b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800949e:	4a2a      	ldr	r2, [pc, #168]	; (8009548 <prvAddNewTaskToReadyList+0xc8>)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094a4:	4b27      	ldr	r3, [pc, #156]	; (8009544 <prvAddNewTaskToReadyList+0xc4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d110      	bne.n	80094ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094ac:	f000 fc26 	bl	8009cfc <prvInitialiseTaskLists>
 80094b0:	e00d      	b.n	80094ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094b2:	4b26      	ldr	r3, [pc, #152]	; (800954c <prvAddNewTaskToReadyList+0xcc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094ba:	4b23      	ldr	r3, [pc, #140]	; (8009548 <prvAddNewTaskToReadyList+0xc8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d802      	bhi.n	80094ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094c8:	4a1f      	ldr	r2, [pc, #124]	; (8009548 <prvAddNewTaskToReadyList+0xc8>)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094ce:	4b20      	ldr	r3, [pc, #128]	; (8009550 <prvAddNewTaskToReadyList+0xd0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3301      	adds	r3, #1
 80094d4:	4a1e      	ldr	r2, [pc, #120]	; (8009550 <prvAddNewTaskToReadyList+0xd0>)
 80094d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094d8:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <prvAddNewTaskToReadyList+0xd0>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e4:	4b1b      	ldr	r3, [pc, #108]	; (8009554 <prvAddNewTaskToReadyList+0xd4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d903      	bls.n	80094f4 <prvAddNewTaskToReadyList+0x74>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	4a18      	ldr	r2, [pc, #96]	; (8009554 <prvAddNewTaskToReadyList+0xd4>)
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4a15      	ldr	r2, [pc, #84]	; (8009558 <prvAddNewTaskToReadyList+0xd8>)
 8009502:	441a      	add	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3304      	adds	r3, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7ff f8fd 	bl	800870a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009510:	f001 fa40 	bl	800a994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009514:	4b0d      	ldr	r3, [pc, #52]	; (800954c <prvAddNewTaskToReadyList+0xcc>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00e      	beq.n	800953a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <prvAddNewTaskToReadyList+0xc8>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	429a      	cmp	r2, r3
 8009528:	d207      	bcs.n	800953a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <prvAddNewTaskToReadyList+0xdc>)
 800952c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800953a:	bf00      	nop
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000f1c 	.word	0x20000f1c
 8009548:	20000a48 	.word	0x20000a48
 800954c:	20000f28 	.word	0x20000f28
 8009550:	20000f38 	.word	0x20000f38
 8009554:	20000f24 	.word	0x20000f24
 8009558:	20000a4c 	.word	0x20000a4c
 800955c:	e000ed04 	.word	0xe000ed04

08009560 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d017      	beq.n	80095a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009572:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <vTaskDelay+0x60>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <vTaskDelay+0x30>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	60bb      	str	r3, [r7, #8]
}
 800958c:	bf00      	nop
 800958e:	e7fe      	b.n	800958e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009590:	f000 f88a 	bl	80096a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fcfe 	bl	8009f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800959c:	f000 f892 	bl	80096c4 <xTaskResumeAll>
 80095a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d107      	bne.n	80095b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <vTaskDelay+0x64>)
 80095aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20000f44 	.word	0x20000f44
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	; 0x28
 80095cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095d6:	463a      	mov	r2, r7
 80095d8:	1d39      	adds	r1, r7, #4
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff f832 	bl	8008648 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	9202      	str	r2, [sp, #8]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	2300      	movs	r3, #0
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	460a      	mov	r2, r1
 80095f6:	4924      	ldr	r1, [pc, #144]	; (8009688 <vTaskStartScheduler+0xc0>)
 80095f8:	4824      	ldr	r0, [pc, #144]	; (800968c <vTaskStartScheduler+0xc4>)
 80095fa:	f7ff fdf9 	bl	80091f0 <xTaskCreateStatic>
 80095fe:	4603      	mov	r3, r0
 8009600:	4a23      	ldr	r2, [pc, #140]	; (8009690 <vTaskStartScheduler+0xc8>)
 8009602:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009604:	4b22      	ldr	r3, [pc, #136]	; (8009690 <vTaskStartScheduler+0xc8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e001      	b.n	8009616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d102      	bne.n	8009622 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800961c:	f000 fd10 	bl	800a040 <xTimerCreateTimerTask>
 8009620:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d11b      	bne.n	8009660 <vTaskStartScheduler+0x98>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	613b      	str	r3, [r7, #16]
}
 800963a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800963c:	4b15      	ldr	r3, [pc, #84]	; (8009694 <vTaskStartScheduler+0xcc>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3354      	adds	r3, #84	; 0x54
 8009642:	4a15      	ldr	r2, [pc, #84]	; (8009698 <vTaskStartScheduler+0xd0>)
 8009644:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009646:	4b15      	ldr	r3, [pc, #84]	; (800969c <vTaskStartScheduler+0xd4>)
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800964e:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <vTaskStartScheduler+0xd8>)
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009654:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <vTaskStartScheduler+0xdc>)
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800965a:	f001 f8c9 	bl	800a7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800965e:	e00e      	b.n	800967e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d10a      	bne.n	800967e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <vTaskStartScheduler+0xb4>
}
 800967e:	bf00      	nop
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	0800bc70 	.word	0x0800bc70
 800968c:	08009ccd 	.word	0x08009ccd
 8009690:	20000f40 	.word	0x20000f40
 8009694:	20000a48 	.word	0x20000a48
 8009698:	20000110 	.word	0x20000110
 800969c:	20000f3c 	.word	0x20000f3c
 80096a0:	20000f28 	.word	0x20000f28
 80096a4:	20000f20 	.word	0x20000f20

080096a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096a8:	b480      	push	{r7}
 80096aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096ac:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <vTaskSuspendAll+0x18>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	4a03      	ldr	r2, [pc, #12]	; (80096c0 <vTaskSuspendAll+0x18>)
 80096b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096b6:	bf00      	nop
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	20000f44 	.word	0x20000f44

080096c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096d2:	4b42      	ldr	r3, [pc, #264]	; (80097dc <xTaskResumeAll+0x118>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	603b      	str	r3, [r7, #0]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096f0:	f001 f920 	bl	800a934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096f4:	4b39      	ldr	r3, [pc, #228]	; (80097dc <xTaskResumeAll+0x118>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	4a38      	ldr	r2, [pc, #224]	; (80097dc <xTaskResumeAll+0x118>)
 80096fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096fe:	4b37      	ldr	r3, [pc, #220]	; (80097dc <xTaskResumeAll+0x118>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d162      	bne.n	80097cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009706:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <xTaskResumeAll+0x11c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d05e      	beq.n	80097cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800970e:	e02f      	b.n	8009770 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009710:	4b34      	ldr	r3, [pc, #208]	; (80097e4 <xTaskResumeAll+0x120>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3318      	adds	r3, #24
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff f851 	bl	80087c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3304      	adds	r3, #4
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff f84c 	bl	80087c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <xTaskResumeAll+0x124>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d903      	bls.n	8009740 <xTaskResumeAll+0x7c>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	4a2a      	ldr	r2, [pc, #168]	; (80097e8 <xTaskResumeAll+0x124>)
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a27      	ldr	r2, [pc, #156]	; (80097ec <xTaskResumeAll+0x128>)
 800974e:	441a      	add	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3304      	adds	r3, #4
 8009754:	4619      	mov	r1, r3
 8009756:	4610      	mov	r0, r2
 8009758:	f7fe ffd7 	bl	800870a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4b23      	ldr	r3, [pc, #140]	; (80097f0 <xTaskResumeAll+0x12c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	429a      	cmp	r2, r3
 8009768:	d302      	bcc.n	8009770 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800976a:	4b22      	ldr	r3, [pc, #136]	; (80097f4 <xTaskResumeAll+0x130>)
 800976c:	2201      	movs	r2, #1
 800976e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009770:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <xTaskResumeAll+0x120>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1cb      	bne.n	8009710 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800977e:	f000 fb5f 	bl	8009e40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009782:	4b1d      	ldr	r3, [pc, #116]	; (80097f8 <xTaskResumeAll+0x134>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d010      	beq.n	80097b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800978e:	f000 f847 	bl	8009820 <xTaskIncrementTick>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009798:	4b16      	ldr	r3, [pc, #88]	; (80097f4 <xTaskResumeAll+0x130>)
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1f1      	bne.n	800978e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80097aa:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <xTaskResumeAll+0x134>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097b0:	4b10      	ldr	r3, [pc, #64]	; (80097f4 <xTaskResumeAll+0x130>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d009      	beq.n	80097cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <xTaskResumeAll+0x138>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097cc:	f001 f8e2 	bl	800a994 <vPortExitCritical>

	return xAlreadyYielded;
 80097d0:	68bb      	ldr	r3, [r7, #8]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000f44 	.word	0x20000f44
 80097e0:	20000f1c 	.word	0x20000f1c
 80097e4:	20000edc 	.word	0x20000edc
 80097e8:	20000f24 	.word	0x20000f24
 80097ec:	20000a4c 	.word	0x20000a4c
 80097f0:	20000a48 	.word	0x20000a48
 80097f4:	20000f30 	.word	0x20000f30
 80097f8:	20000f2c 	.word	0x20000f2c
 80097fc:	e000ed04 	.word	0xe000ed04

08009800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <xTaskGetTickCount+0x1c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800980c:	687b      	ldr	r3, [r7, #4]
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20000f20 	.word	0x20000f20

08009820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800982a:	4b4f      	ldr	r3, [pc, #316]	; (8009968 <xTaskIncrementTick+0x148>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f040 808f 	bne.w	8009952 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009834:	4b4d      	ldr	r3, [pc, #308]	; (800996c <xTaskIncrementTick+0x14c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3301      	adds	r3, #1
 800983a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800983c:	4a4b      	ldr	r2, [pc, #300]	; (800996c <xTaskIncrementTick+0x14c>)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d120      	bne.n	800988a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009848:	4b49      	ldr	r3, [pc, #292]	; (8009970 <xTaskIncrementTick+0x150>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00a      	beq.n	8009868 <xTaskIncrementTick+0x48>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	603b      	str	r3, [r7, #0]
}
 8009864:	bf00      	nop
 8009866:	e7fe      	b.n	8009866 <xTaskIncrementTick+0x46>
 8009868:	4b41      	ldr	r3, [pc, #260]	; (8009970 <xTaskIncrementTick+0x150>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	4b41      	ldr	r3, [pc, #260]	; (8009974 <xTaskIncrementTick+0x154>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a3f      	ldr	r2, [pc, #252]	; (8009970 <xTaskIncrementTick+0x150>)
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	4a3f      	ldr	r2, [pc, #252]	; (8009974 <xTaskIncrementTick+0x154>)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	4b3e      	ldr	r3, [pc, #248]	; (8009978 <xTaskIncrementTick+0x158>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	4a3d      	ldr	r2, [pc, #244]	; (8009978 <xTaskIncrementTick+0x158>)
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	f000 fadb 	bl	8009e40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800988a:	4b3c      	ldr	r3, [pc, #240]	; (800997c <xTaskIncrementTick+0x15c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	429a      	cmp	r2, r3
 8009892:	d349      	bcc.n	8009928 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009894:	4b36      	ldr	r3, [pc, #216]	; (8009970 <xTaskIncrementTick+0x150>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d104      	bne.n	80098a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989e:	4b37      	ldr	r3, [pc, #220]	; (800997c <xTaskIncrementTick+0x15c>)
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	601a      	str	r2, [r3, #0]
					break;
 80098a6:	e03f      	b.n	8009928 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a8:	4b31      	ldr	r3, [pc, #196]	; (8009970 <xTaskIncrementTick+0x150>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d203      	bcs.n	80098c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098c0:	4a2e      	ldr	r2, [pc, #184]	; (800997c <xTaskIncrementTick+0x15c>)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098c6:	e02f      	b.n	8009928 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe ff79 	bl	80087c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	3318      	adds	r3, #24
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe ff70 	bl	80087c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	4b25      	ldr	r3, [pc, #148]	; (8009980 <xTaskIncrementTick+0x160>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d903      	bls.n	80098f8 <xTaskIncrementTick+0xd8>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	4a22      	ldr	r2, [pc, #136]	; (8009980 <xTaskIncrementTick+0x160>)
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <xTaskIncrementTick+0x164>)
 8009906:	441a      	add	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	3304      	adds	r3, #4
 800990c:	4619      	mov	r1, r3
 800990e:	4610      	mov	r0, r2
 8009910:	f7fe fefb 	bl	800870a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009918:	4b1b      	ldr	r3, [pc, #108]	; (8009988 <xTaskIncrementTick+0x168>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	429a      	cmp	r2, r3
 8009920:	d3b8      	bcc.n	8009894 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009922:	2301      	movs	r3, #1
 8009924:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009926:	e7b5      	b.n	8009894 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009928:	4b17      	ldr	r3, [pc, #92]	; (8009988 <xTaskIncrementTick+0x168>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	4915      	ldr	r1, [pc, #84]	; (8009984 <xTaskIncrementTick+0x164>)
 8009930:	4613      	mov	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d901      	bls.n	8009944 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009940:	2301      	movs	r3, #1
 8009942:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009944:	4b11      	ldr	r3, [pc, #68]	; (800998c <xTaskIncrementTick+0x16c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d007      	beq.n	800995c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e004      	b.n	800995c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009952:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <xTaskIncrementTick+0x170>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3301      	adds	r3, #1
 8009958:	4a0d      	ldr	r2, [pc, #52]	; (8009990 <xTaskIncrementTick+0x170>)
 800995a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800995c:	697b      	ldr	r3, [r7, #20]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000f44 	.word	0x20000f44
 800996c:	20000f20 	.word	0x20000f20
 8009970:	20000ed4 	.word	0x20000ed4
 8009974:	20000ed8 	.word	0x20000ed8
 8009978:	20000f34 	.word	0x20000f34
 800997c:	20000f3c 	.word	0x20000f3c
 8009980:	20000f24 	.word	0x20000f24
 8009984:	20000a4c 	.word	0x20000a4c
 8009988:	20000a48 	.word	0x20000a48
 800998c:	20000f30 	.word	0x20000f30
 8009990:	20000f2c 	.word	0x20000f2c

08009994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800999a:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <vTaskSwitchContext+0xb0>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <vTaskSwitchContext+0xb4>)
 80099a4:	2201      	movs	r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099a8:	e046      	b.n	8009a38 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80099aa:	4b27      	ldr	r3, [pc, #156]	; (8009a48 <vTaskSwitchContext+0xb4>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b0:	4b26      	ldr	r3, [pc, #152]	; (8009a4c <vTaskSwitchContext+0xb8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	e010      	b.n	80099da <vTaskSwitchContext+0x46>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	607b      	str	r3, [r7, #4]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <vTaskSwitchContext+0x3e>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	491d      	ldr	r1, [pc, #116]	; (8009a50 <vTaskSwitchContext+0xbc>)
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0e4      	beq.n	80099b8 <vTaskSwitchContext+0x24>
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4a15      	ldr	r2, [pc, #84]	; (8009a50 <vTaskSwitchContext+0xbc>)
 80099fa:	4413      	add	r3, r2
 80099fc:	60bb      	str	r3, [r7, #8]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	605a      	str	r2, [r3, #4]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	3308      	adds	r3, #8
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d104      	bne.n	8009a1e <vTaskSwitchContext+0x8a>
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	605a      	str	r2, [r3, #4]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	4a0b      	ldr	r2, [pc, #44]	; (8009a54 <vTaskSwitchContext+0xc0>)
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <vTaskSwitchContext+0xb8>)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <vTaskSwitchContext+0xc0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3354      	adds	r3, #84	; 0x54
 8009a34:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <vTaskSwitchContext+0xc4>)
 8009a36:	6013      	str	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	20000f44 	.word	0x20000f44
 8009a48:	20000f30 	.word	0x20000f30
 8009a4c:	20000f24 	.word	0x20000f24
 8009a50:	20000a4c 	.word	0x20000a4c
 8009a54:	20000a48 	.word	0x20000a48
 8009a58:	20000110 	.word	0x20000110

08009a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	60fb      	str	r3, [r7, #12]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a82:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <vTaskPlaceOnEventList+0x44>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3318      	adds	r3, #24
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fe fe61 	bl	8008752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a90:	2101      	movs	r1, #1
 8009a92:	6838      	ldr	r0, [r7, #0]
 8009a94:	f000 fa80 	bl	8009f98 <prvAddCurrentTaskToDelayedList>
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000a48 	.word	0x20000a48

08009aa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10a      	bne.n	8009acc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	617b      	str	r3, [r7, #20]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009acc:	4b0a      	ldr	r3, [pc, #40]	; (8009af8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3318      	adds	r3, #24
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7fe fe18 	bl	800870a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	f000 fa55 	bl	8009f98 <prvAddCurrentTaskToDelayedList>
	}
 8009aee:	bf00      	nop
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000a48 	.word	0x20000a48

08009afc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60fb      	str	r3, [r7, #12]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	3318      	adds	r3, #24
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe fe49 	bl	80087c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b32:	4b1e      	ldr	r3, [pc, #120]	; (8009bac <xTaskRemoveFromEventList+0xb0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d11d      	bne.n	8009b76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe fe40 	bl	80087c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b48:	4b19      	ldr	r3, [pc, #100]	; (8009bb0 <xTaskRemoveFromEventList+0xb4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d903      	bls.n	8009b58 <xTaskRemoveFromEventList+0x5c>
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b54:	4a16      	ldr	r2, [pc, #88]	; (8009bb0 <xTaskRemoveFromEventList+0xb4>)
 8009b56:	6013      	str	r3, [r2, #0]
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4a13      	ldr	r2, [pc, #76]	; (8009bb4 <xTaskRemoveFromEventList+0xb8>)
 8009b66:	441a      	add	r2, r3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f7fe fdcb 	bl	800870a <vListInsertEnd>
 8009b74:	e005      	b.n	8009b82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	3318      	adds	r3, #24
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	480e      	ldr	r0, [pc, #56]	; (8009bb8 <xTaskRemoveFromEventList+0xbc>)
 8009b7e:	f7fe fdc4 	bl	800870a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b86:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <xTaskRemoveFromEventList+0xc0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d905      	bls.n	8009b9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b94:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <xTaskRemoveFromEventList+0xc4>)
 8009b96:	2201      	movs	r2, #1
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	e001      	b.n	8009ba0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ba0:	697b      	ldr	r3, [r7, #20]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000f44 	.word	0x20000f44
 8009bb0:	20000f24 	.word	0x20000f24
 8009bb4:	20000a4c 	.word	0x20000a4c
 8009bb8:	20000edc 	.word	0x20000edc
 8009bbc:	20000a48 	.word	0x20000a48
 8009bc0:	20000f30 	.word	0x20000f30

08009bc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <vTaskInternalSetTimeOutState+0x24>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <vTaskInternalSetTimeOutState+0x28>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	605a      	str	r2, [r3, #4]
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	20000f34 	.word	0x20000f34
 8009bec:	20000f20 	.word	0x20000f20

08009bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10a      	bne.n	8009c16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	613b      	str	r3, [r7, #16]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	60fb      	str	r3, [r7, #12]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c32:	f000 fe7f 	bl	800a934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c36:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <xTaskCheckForTimeOut+0xbc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4e:	d102      	bne.n	8009c56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	e023      	b.n	8009c9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <xTaskCheckForTimeOut+0xc0>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d007      	beq.n	8009c72 <xTaskCheckForTimeOut+0x82>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d302      	bcc.n	8009c72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	e015      	b.n	8009c9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d20b      	bcs.n	8009c94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	1ad2      	subs	r2, r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7ff ff9b 	bl	8009bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61fb      	str	r3, [r7, #28]
 8009c92:	e004      	b.n	8009c9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2200      	movs	r2, #0
 8009c98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c9e:	f000 fe79 	bl	800a994 <vPortExitCritical>

	return xReturn;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000f20 	.word	0x20000f20
 8009cb0:	20000f34 	.word	0x20000f34

08009cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cb8:	4b03      	ldr	r3, [pc, #12]	; (8009cc8 <vTaskMissedYield+0x14>)
 8009cba:	2201      	movs	r2, #1
 8009cbc:	601a      	str	r2, [r3, #0]
}
 8009cbe:	bf00      	nop
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	20000f30 	.word	0x20000f30

08009ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cd4:	f000 f852 	bl	8009d7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cd8:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <prvIdleTask+0x28>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d9f9      	bls.n	8009cd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <prvIdleTask+0x2c>)
 8009ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cf0:	e7f0      	b.n	8009cd4 <prvIdleTask+0x8>
 8009cf2:	bf00      	nop
 8009cf4:	20000a4c 	.word	0x20000a4c
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d02:	2300      	movs	r3, #0
 8009d04:	607b      	str	r3, [r7, #4]
 8009d06:	e00c      	b.n	8009d22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4a12      	ldr	r2, [pc, #72]	; (8009d5c <prvInitialiseTaskLists+0x60>)
 8009d14:	4413      	add	r3, r2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fcca 	bl	80086b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	607b      	str	r3, [r7, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b37      	cmp	r3, #55	; 0x37
 8009d26:	d9ef      	bls.n	8009d08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d28:	480d      	ldr	r0, [pc, #52]	; (8009d60 <prvInitialiseTaskLists+0x64>)
 8009d2a:	f7fe fcc1 	bl	80086b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d2e:	480d      	ldr	r0, [pc, #52]	; (8009d64 <prvInitialiseTaskLists+0x68>)
 8009d30:	f7fe fcbe 	bl	80086b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d34:	480c      	ldr	r0, [pc, #48]	; (8009d68 <prvInitialiseTaskLists+0x6c>)
 8009d36:	f7fe fcbb 	bl	80086b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d3a:	480c      	ldr	r0, [pc, #48]	; (8009d6c <prvInitialiseTaskLists+0x70>)
 8009d3c:	f7fe fcb8 	bl	80086b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d40:	480b      	ldr	r0, [pc, #44]	; (8009d70 <prvInitialiseTaskLists+0x74>)
 8009d42:	f7fe fcb5 	bl	80086b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d46:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <prvInitialiseTaskLists+0x78>)
 8009d48:	4a05      	ldr	r2, [pc, #20]	; (8009d60 <prvInitialiseTaskLists+0x64>)
 8009d4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <prvInitialiseTaskLists+0x7c>)
 8009d4e:	4a05      	ldr	r2, [pc, #20]	; (8009d64 <prvInitialiseTaskLists+0x68>)
 8009d50:	601a      	str	r2, [r3, #0]
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000a4c 	.word	0x20000a4c
 8009d60:	20000eac 	.word	0x20000eac
 8009d64:	20000ec0 	.word	0x20000ec0
 8009d68:	20000edc 	.word	0x20000edc
 8009d6c:	20000ef0 	.word	0x20000ef0
 8009d70:	20000f08 	.word	0x20000f08
 8009d74:	20000ed4 	.word	0x20000ed4
 8009d78:	20000ed8 	.word	0x20000ed8

08009d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d82:	e019      	b.n	8009db8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d84:	f000 fdd6 	bl	800a934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d88:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <prvCheckTasksWaitingTermination+0x50>)
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3304      	adds	r3, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fd15 	bl	80087c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	; (8009dd0 <prvCheckTasksWaitingTermination+0x54>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	4a0b      	ldr	r2, [pc, #44]	; (8009dd0 <prvCheckTasksWaitingTermination+0x54>)
 8009da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009da4:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <prvCheckTasksWaitingTermination+0x58>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	4a0a      	ldr	r2, [pc, #40]	; (8009dd4 <prvCheckTasksWaitingTermination+0x58>)
 8009dac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dae:	f000 fdf1 	bl	800a994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f810 	bl	8009dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <prvCheckTasksWaitingTermination+0x58>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e1      	bne.n	8009d84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000ef0 	.word	0x20000ef0
 8009dd0:	20000f1c 	.word	0x20000f1c
 8009dd4:	20000f04 	.word	0x20000f04

08009dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3354      	adds	r3, #84	; 0x54
 8009de4:	4618      	mov	r0, r3
 8009de6:	f001 fe73 	bl	800bad0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d108      	bne.n	8009e06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 ff89 	bl	800ad10 <vPortFree>
				vPortFree( pxTCB );
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 ff86 	bl	800ad10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e04:	e018      	b.n	8009e38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d103      	bne.n	8009e18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 ff7d 	bl	800ad10 <vPortFree>
	}
 8009e16:	e00f      	b.n	8009e38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d00a      	beq.n	8009e38 <prvDeleteTCB+0x60>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60fb      	str	r3, [r7, #12]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <prvDeleteTCB+0x5e>
	}
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvResetNextTaskUnblockTime+0x38>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <prvResetNextTaskUnblockTime+0x3c>)
 8009e52:	f04f 32ff 	mov.w	r2, #4294967295
 8009e56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e58:	e008      	b.n	8009e6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5a:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <prvResetNextTaskUnblockTime+0x38>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	4a04      	ldr	r2, [pc, #16]	; (8009e7c <prvResetNextTaskUnblockTime+0x3c>)
 8009e6a:	6013      	str	r3, [r2, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	20000ed4 	.word	0x20000ed4
 8009e7c:	20000f3c 	.word	0x20000f3c

08009e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <xTaskGetSchedulerState+0x34>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	e008      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e94:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <xTaskGetSchedulerState+0x38>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	607b      	str	r3, [r7, #4]
 8009ea0:	e001      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ea6:	687b      	ldr	r3, [r7, #4]
	}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20000f28 	.word	0x20000f28
 8009eb8:	20000f44 	.word	0x20000f44

08009ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d056      	beq.n	8009f80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ed2:	4b2e      	ldr	r3, [pc, #184]	; (8009f8c <xTaskPriorityDisinherit+0xd0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d00a      	beq.n	8009ef2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60fb      	str	r3, [r7, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	60bb      	str	r3, [r7, #8]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d02c      	beq.n	8009f80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d128      	bne.n	8009f80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fc46 	bl	80087c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <xTaskPriorityDisinherit+0xd4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d903      	bls.n	8009f60 <xTaskPriorityDisinherit+0xa4>
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	4a0c      	ldr	r2, [pc, #48]	; (8009f90 <xTaskPriorityDisinherit+0xd4>)
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4a09      	ldr	r2, [pc, #36]	; (8009f94 <xTaskPriorityDisinherit+0xd8>)
 8009f6e:	441a      	add	r2, r3
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4619      	mov	r1, r3
 8009f76:	4610      	mov	r0, r2
 8009f78:	f7fe fbc7 	bl	800870a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f80:	697b      	ldr	r3, [r7, #20]
	}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000a48 	.word	0x20000a48
 8009f90:	20000f24 	.word	0x20000f24
 8009f94:	20000a4c 	.word	0x20000a4c

08009f98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009fa2:	4b21      	ldr	r3, [pc, #132]	; (800a028 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fa8:	4b20      	ldr	r3, [pc, #128]	; (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fc08 	bl	80087c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fba:	d10a      	bne.n	8009fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fc2:	4b1a      	ldr	r3, [pc, #104]	; (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4819      	ldr	r0, [pc, #100]	; (800a030 <prvAddCurrentTaskToDelayedList+0x98>)
 8009fcc:	f7fe fb9d 	bl	800870a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fd0:	e026      	b.n	800a020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fda:	4b14      	ldr	r3, [pc, #80]	; (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d209      	bcs.n	8009ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fea:	4b12      	ldr	r3, [pc, #72]	; (800a034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fe fbab 	bl	8008752 <vListInsert>
}
 8009ffc:	e010      	b.n	800a020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3304      	adds	r3, #4
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f7fe fba1 	bl	8008752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a010:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	d202      	bcs.n	800a020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a01a:	4a08      	ldr	r2, [pc, #32]	; (800a03c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6013      	str	r3, [r2, #0]
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000f20 	.word	0x20000f20
 800a02c:	20000a48 	.word	0x20000a48
 800a030:	20000f08 	.word	0x20000f08
 800a034:	20000ed8 	.word	0x20000ed8
 800a038:	20000ed4 	.word	0x20000ed4
 800a03c:	20000f3c 	.word	0x20000f3c

0800a040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08a      	sub	sp, #40	; 0x28
 800a044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a046:	2300      	movs	r3, #0
 800a048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a04a:	f000 fb07 	bl	800a65c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a04e:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <xTimerCreateTimerTask+0x80>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d021      	beq.n	800a09a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a05e:	1d3a      	adds	r2, r7, #4
 800a060:	f107 0108 	add.w	r1, r7, #8
 800a064:	f107 030c 	add.w	r3, r7, #12
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fb07 	bl	800867c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	9202      	str	r2, [sp, #8]
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	2302      	movs	r3, #2
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	2300      	movs	r3, #0
 800a07e:	460a      	mov	r2, r1
 800a080:	4910      	ldr	r1, [pc, #64]	; (800a0c4 <xTimerCreateTimerTask+0x84>)
 800a082:	4811      	ldr	r0, [pc, #68]	; (800a0c8 <xTimerCreateTimerTask+0x88>)
 800a084:	f7ff f8b4 	bl	80091f0 <xTaskCreateStatic>
 800a088:	4603      	mov	r3, r0
 800a08a:	4a10      	ldr	r2, [pc, #64]	; (800a0cc <xTimerCreateTimerTask+0x8c>)
 800a08c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a08e:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <xTimerCreateTimerTask+0x8c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a096:	2301      	movs	r3, #1
 800a098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	613b      	str	r3, [r7, #16]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0b6:	697b      	ldr	r3, [r7, #20]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20000f78 	.word	0x20000f78
 800a0c4:	0800bc78 	.word	0x0800bc78
 800a0c8:	0800a205 	.word	0x0800a205
 800a0cc:	20000f7c 	.word	0x20000f7c

0800a0d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08a      	sub	sp, #40	; 0x28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	623b      	str	r3, [r7, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0fe:	4b1a      	ldr	r3, [pc, #104]	; (800a168 <xTimerGenericCommand+0x98>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d02a      	beq.n	800a15c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b05      	cmp	r3, #5
 800a116:	dc18      	bgt.n	800a14a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a118:	f7ff feb2 	bl	8009e80 <xTaskGetSchedulerState>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d109      	bne.n	800a136 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a122:	4b11      	ldr	r3, [pc, #68]	; (800a168 <xTimerGenericCommand+0x98>)
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	f107 0110 	add.w	r1, r7, #16
 800a12a:	2300      	movs	r3, #0
 800a12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12e:	f7fe fc77 	bl	8008a20 <xQueueGenericSend>
 800a132:	6278      	str	r0, [r7, #36]	; 0x24
 800a134:	e012      	b.n	800a15c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <xTimerGenericCommand+0x98>)
 800a138:	6818      	ldr	r0, [r3, #0]
 800a13a:	f107 0110 	add.w	r1, r7, #16
 800a13e:	2300      	movs	r3, #0
 800a140:	2200      	movs	r2, #0
 800a142:	f7fe fc6d 	bl	8008a20 <xQueueGenericSend>
 800a146:	6278      	str	r0, [r7, #36]	; 0x24
 800a148:	e008      	b.n	800a15c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a14a:	4b07      	ldr	r3, [pc, #28]	; (800a168 <xTimerGenericCommand+0x98>)
 800a14c:	6818      	ldr	r0, [r3, #0]
 800a14e:	f107 0110 	add.w	r1, r7, #16
 800a152:	2300      	movs	r3, #0
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	f7fe fd61 	bl	8008c1c <xQueueGenericSendFromISR>
 800a15a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3728      	adds	r7, #40	; 0x28
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20000f78 	.word	0x20000f78

0800a16c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af02      	add	r7, sp, #8
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a176:	4b22      	ldr	r3, [pc, #136]	; (800a200 <prvProcessExpiredTimer+0x94>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	3304      	adds	r3, #4
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe fb1d 	bl	80087c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d022      	beq.n	800a1de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	18d1      	adds	r1, r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	6978      	ldr	r0, [r7, #20]
 800a1a6:	f000 f8d1 	bl	800a34c <prvInsertTimerInActiveList>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01f      	beq.n	800a1f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	6978      	ldr	r0, [r7, #20]
 800a1bc:	f7ff ff88 	bl	800a0d0 <xTimerGenericCommand>
 800a1c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d113      	bne.n	800a1f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	60fb      	str	r3, [r7, #12]
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e4:	f023 0301 	bic.w	r3, r3, #1
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	6978      	ldr	r0, [r7, #20]
 800a1f6:	4798      	blx	r3
}
 800a1f8:	bf00      	nop
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000f70 	.word	0x20000f70

0800a204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a20c:	f107 0308 	add.w	r3, r7, #8
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f857 	bl	800a2c4 <prvGetNextExpireTime>
 800a216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4619      	mov	r1, r3
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 f803 	bl	800a228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a222:	f000 f8d5 	bl	800a3d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a226:	e7f1      	b.n	800a20c <prvTimerTask+0x8>

0800a228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a232:	f7ff fa39 	bl	80096a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a236:	f107 0308 	add.w	r3, r7, #8
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 f866 	bl	800a30c <prvSampleTimeNow>
 800a240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d130      	bne.n	800a2aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10a      	bne.n	800a264 <prvProcessTimerOrBlockTask+0x3c>
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d806      	bhi.n	800a264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a256:	f7ff fa35 	bl	80096c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff ff85 	bl	800a16c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a262:	e024      	b.n	800a2ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d008      	beq.n	800a27c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <prvProcessTimerOrBlockTask+0x90>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <prvProcessTimerOrBlockTask+0x50>
 800a274:	2301      	movs	r3, #1
 800a276:	e000      	b.n	800a27a <prvProcessTimerOrBlockTask+0x52>
 800a278:	2300      	movs	r3, #0
 800a27a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a27c:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <prvProcessTimerOrBlockTask+0x94>)
 800a27e:	6818      	ldr	r0, [r3, #0]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	4619      	mov	r1, r3
 800a28a:	f7fe ff7d 	bl	8009188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a28e:	f7ff fa19 	bl	80096c4 <xTaskResumeAll>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a298:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <prvProcessTimerOrBlockTask+0x98>)
 800a29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	f3bf 8f6f 	isb	sy
}
 800a2a8:	e001      	b.n	800a2ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2aa:	f7ff fa0b 	bl	80096c4 <xTaskResumeAll>
}
 800a2ae:	bf00      	nop
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000f74 	.word	0x20000f74
 800a2bc:	20000f78 	.word	0x20000f78
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2cc:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <prvGetNextExpireTime+0x44>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <prvGetNextExpireTime+0x16>
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	e000      	b.n	800a2dc <prvGetNextExpireTime+0x18>
 800a2da:	2200      	movs	r2, #0
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d105      	bne.n	800a2f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2e8:	4b07      	ldr	r3, [pc, #28]	; (800a308 <prvGetNextExpireTime+0x44>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	e001      	b.n	800a2f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	20000f70 	.word	0x20000f70

0800a30c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a314:	f7ff fa74 	bl	8009800 <xTaskGetTickCount>
 800a318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a31a:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <prvSampleTimeNow+0x3c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	429a      	cmp	r2, r3
 800a322:	d205      	bcs.n	800a330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a324:	f000 f936 	bl	800a594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	e002      	b.n	800a336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a336:	4a04      	ldr	r2, [pc, #16]	; (800a348 <prvSampleTimeNow+0x3c>)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a33c:	68fb      	ldr	r3, [r7, #12]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000f80 	.word	0x20000f80

0800a34c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d812      	bhi.n	800a398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	1ad2      	subs	r2, r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d302      	bcc.n	800a386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	e01b      	b.n	800a3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a386:	4b10      	ldr	r3, [pc, #64]	; (800a3c8 <prvInsertTimerInActiveList+0x7c>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4619      	mov	r1, r3
 800a390:	4610      	mov	r0, r2
 800a392:	f7fe f9de 	bl	8008752 <vListInsert>
 800a396:	e012      	b.n	800a3be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d206      	bcs.n	800a3ae <prvInsertTimerInActiveList+0x62>
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d302      	bcc.n	800a3ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e007      	b.n	800a3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3ae:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <prvInsertTimerInActiveList+0x80>)
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	f7fe f9ca 	bl	8008752 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3be:	697b      	ldr	r3, [r7, #20]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20000f74 	.word	0x20000f74
 800a3cc:	20000f70 	.word	0x20000f70

0800a3d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08e      	sub	sp, #56	; 0x38
 800a3d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3d6:	e0ca      	b.n	800a56e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da18      	bge.n	800a410 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3de:	1d3b      	adds	r3, r7, #4
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10a      	bne.n	800a400 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	61fb      	str	r3, [r7, #28]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a406:	6850      	ldr	r0, [r2, #4]
 800a408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a40a:	6892      	ldr	r2, [r2, #8]
 800a40c:	4611      	mov	r1, r2
 800a40e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f2c0 80aa 	blt.w	800a56c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	3304      	adds	r3, #4
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe f9cb 	bl	80087c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a42e:	463b      	mov	r3, r7
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff ff6b 	bl	800a30c <prvSampleTimeNow>
 800a436:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b09      	cmp	r3, #9
 800a43c:	f200 8097 	bhi.w	800a56e <prvProcessReceivedCommands+0x19e>
 800a440:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <prvProcessReceivedCommands+0x78>)
 800a442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a446:	bf00      	nop
 800a448:	0800a471 	.word	0x0800a471
 800a44c:	0800a471 	.word	0x0800a471
 800a450:	0800a471 	.word	0x0800a471
 800a454:	0800a4e5 	.word	0x0800a4e5
 800a458:	0800a4f9 	.word	0x0800a4f9
 800a45c:	0800a543 	.word	0x0800a543
 800a460:	0800a471 	.word	0x0800a471
 800a464:	0800a471 	.word	0x0800a471
 800a468:	0800a4e5 	.word	0x0800a4e5
 800a46c:	0800a4f9 	.word	0x0800a4f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a476:	f043 0301 	orr.w	r3, r3, #1
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	18d1      	adds	r1, r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a490:	f7ff ff5c 	bl	800a34c <prvInsertTimerInActiveList>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d069      	beq.n	800a56e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d05e      	beq.n	800a56e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	441a      	add	r2, r3
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c2:	f7ff fe05 	bl	800a0d0 <xTimerGenericCommand>
 800a4c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d14f      	bne.n	800a56e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	61bb      	str	r3, [r7, #24]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4f6:	e03a      	b.n	800a56e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4fe:	f043 0301 	orr.w	r3, r3, #1
 800a502:	b2da      	uxtb	r2, r3
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	617b      	str	r3, [r7, #20]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	18d1      	adds	r1, r2, r3
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a53c:	f7ff ff06 	bl	800a34c <prvInsertTimerInActiveList>
					break;
 800a540:	e015      	b.n	800a56e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d103      	bne.n	800a558 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a552:	f000 fbdd 	bl	800ad10 <vPortFree>
 800a556:	e00a      	b.n	800a56e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a55e:	f023 0301 	bic.w	r3, r3, #1
 800a562:	b2da      	uxtb	r2, r3
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a56a:	e000      	b.n	800a56e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a56c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a56e:	4b08      	ldr	r3, [pc, #32]	; (800a590 <prvProcessReceivedCommands+0x1c0>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	1d39      	adds	r1, r7, #4
 800a574:	2200      	movs	r2, #0
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fbec 	bl	8008d54 <xQueueReceive>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f47f af2a 	bne.w	800a3d8 <prvProcessReceivedCommands+0x8>
	}
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	3730      	adds	r7, #48	; 0x30
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20000f78 	.word	0x20000f78

0800a594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a59a:	e048      	b.n	800a62e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a59c:	4b2d      	ldr	r3, [pc, #180]	; (800a654 <prvSwitchTimerLists+0xc0>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a6:	4b2b      	ldr	r3, [pc, #172]	; (800a654 <prvSwitchTimerLists+0xc0>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe f905 	bl	80087c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c8:	f003 0304 	and.w	r3, r3, #4
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d02e      	beq.n	800a62e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d90e      	bls.n	800a600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ee:	4b19      	ldr	r3, [pc, #100]	; (800a654 <prvSwitchTimerLists+0xc0>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	f7fe f8aa 	bl	8008752 <vListInsert>
 800a5fe:	e016      	b.n	800a62e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a600:	2300      	movs	r3, #0
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	2300      	movs	r3, #0
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	2100      	movs	r1, #0
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff fd60 	bl	800a0d0 <xTimerGenericCommand>
 800a610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	603b      	str	r3, [r7, #0]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <prvSwitchTimerLists+0xc0>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1b1      	bne.n	800a59c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a638:	4b06      	ldr	r3, [pc, #24]	; (800a654 <prvSwitchTimerLists+0xc0>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a63e:	4b06      	ldr	r3, [pc, #24]	; (800a658 <prvSwitchTimerLists+0xc4>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a04      	ldr	r2, [pc, #16]	; (800a654 <prvSwitchTimerLists+0xc0>)
 800a644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a646:	4a04      	ldr	r2, [pc, #16]	; (800a658 <prvSwitchTimerLists+0xc4>)
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	6013      	str	r3, [r2, #0]
}
 800a64c:	bf00      	nop
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20000f70 	.word	0x20000f70
 800a658:	20000f74 	.word	0x20000f74

0800a65c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a662:	f000 f967 	bl	800a934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <prvCheckForValidListAndQueue+0x60>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d120      	bne.n	800a6b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a66e:	4814      	ldr	r0, [pc, #80]	; (800a6c0 <prvCheckForValidListAndQueue+0x64>)
 800a670:	f7fe f81e 	bl	80086b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a674:	4813      	ldr	r0, [pc, #76]	; (800a6c4 <prvCheckForValidListAndQueue+0x68>)
 800a676:	f7fe f81b 	bl	80086b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a67a:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <prvCheckForValidListAndQueue+0x6c>)
 800a67c:	4a10      	ldr	r2, [pc, #64]	; (800a6c0 <prvCheckForValidListAndQueue+0x64>)
 800a67e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a680:	4b12      	ldr	r3, [pc, #72]	; (800a6cc <prvCheckForValidListAndQueue+0x70>)
 800a682:	4a10      	ldr	r2, [pc, #64]	; (800a6c4 <prvCheckForValidListAndQueue+0x68>)
 800a684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a686:	2300      	movs	r3, #0
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4b11      	ldr	r3, [pc, #68]	; (800a6d0 <prvCheckForValidListAndQueue+0x74>)
 800a68c:	4a11      	ldr	r2, [pc, #68]	; (800a6d4 <prvCheckForValidListAndQueue+0x78>)
 800a68e:	2110      	movs	r1, #16
 800a690:	200a      	movs	r0, #10
 800a692:	f7fe f929 	bl	80088e8 <xQueueGenericCreateStatic>
 800a696:	4603      	mov	r3, r0
 800a698:	4a08      	ldr	r2, [pc, #32]	; (800a6bc <prvCheckForValidListAndQueue+0x60>)
 800a69a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a69c:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <prvCheckForValidListAndQueue+0x60>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6a4:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <prvCheckForValidListAndQueue+0x60>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	490b      	ldr	r1, [pc, #44]	; (800a6d8 <prvCheckForValidListAndQueue+0x7c>)
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe fd42 	bl	8009134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6b0:	f000 f970 	bl	800a994 <vPortExitCritical>
}
 800a6b4:	bf00      	nop
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000f78 	.word	0x20000f78
 800a6c0:	20000f48 	.word	0x20000f48
 800a6c4:	20000f5c 	.word	0x20000f5c
 800a6c8:	20000f70 	.word	0x20000f70
 800a6cc:	20000f74 	.word	0x20000f74
 800a6d0:	20001024 	.word	0x20001024
 800a6d4:	20000f84 	.word	0x20000f84
 800a6d8:	0800bc80 	.word	0x0800bc80

0800a6dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3b04      	subs	r3, #4
 800a6ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3b04      	subs	r3, #4
 800a6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f023 0201 	bic.w	r2, r3, #1
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3b04      	subs	r3, #4
 800a70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a70c:	4a0c      	ldr	r2, [pc, #48]	; (800a740 <pxPortInitialiseStack+0x64>)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3b14      	subs	r3, #20
 800a716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3b04      	subs	r3, #4
 800a722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f06f 0202 	mvn.w	r2, #2
 800a72a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3b20      	subs	r3, #32
 800a730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a732:	68fb      	ldr	r3, [r7, #12]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	0800a745 	.word	0x0800a745

0800a744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a74e:	4b12      	ldr	r3, [pc, #72]	; (800a798 <prvTaskExitError+0x54>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a756:	d00a      	beq.n	800a76e <prvTaskExitError+0x2a>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	60fb      	str	r3, [r7, #12]
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <prvTaskExitError+0x28>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60bb      	str	r3, [r7, #8]
}
 800a780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a782:	bf00      	nop
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0fc      	beq.n	800a784 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	20000098 	.word	0x20000098
 800a79c:	00000000 	.word	0x00000000

0800a7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <pxCurrentTCBConst2>)
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	6808      	ldr	r0, [r1, #0]
 800a7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	f380 8809 	msr	PSP, r0
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8811 	msr	BASEPRI, r0
 800a7ba:	4770      	bx	lr
 800a7bc:	f3af 8000 	nop.w

0800a7c0 <pxCurrentTCBConst2>:
 800a7c0:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop

0800a7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7c8:	4808      	ldr	r0, [pc, #32]	; (800a7ec <prvPortStartFirstTask+0x24>)
 800a7ca:	6800      	ldr	r0, [r0, #0]
 800a7cc:	6800      	ldr	r0, [r0, #0]
 800a7ce:	f380 8808 	msr	MSP, r0
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8814 	msr	CONTROL, r0
 800a7da:	b662      	cpsie	i
 800a7dc:	b661      	cpsie	f
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	df00      	svc	0
 800a7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ea:	bf00      	nop
 800a7ec:	e000ed08 	.word	0xe000ed08

0800a7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7f6:	4b46      	ldr	r3, [pc, #280]	; (800a910 <xPortStartScheduler+0x120>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a46      	ldr	r2, [pc, #280]	; (800a914 <xPortStartScheduler+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d10a      	bne.n	800a816 <xPortStartScheduler+0x26>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	613b      	str	r3, [r7, #16]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a816:	4b3e      	ldr	r3, [pc, #248]	; (800a910 <xPortStartScheduler+0x120>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a3f      	ldr	r2, [pc, #252]	; (800a918 <xPortStartScheduler+0x128>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10a      	bne.n	800a836 <xPortStartScheduler+0x46>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60fb      	str	r3, [r7, #12]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a836:	4b39      	ldr	r3, [pc, #228]	; (800a91c <xPortStartScheduler+0x12c>)
 800a838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	22ff      	movs	r2, #255	; 0xff
 800a846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b31      	ldr	r3, [pc, #196]	; (800a920 <xPortStartScheduler+0x130>)
 800a85c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a85e:	4b31      	ldr	r3, [pc, #196]	; (800a924 <xPortStartScheduler+0x134>)
 800a860:	2207      	movs	r2, #7
 800a862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a864:	e009      	b.n	800a87a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a866:	4b2f      	ldr	r3, [pc, #188]	; (800a924 <xPortStartScheduler+0x134>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a2d      	ldr	r2, [pc, #180]	; (800a924 <xPortStartScheduler+0x134>)
 800a86e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d0ef      	beq.n	800a866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a886:	4b27      	ldr	r3, [pc, #156]	; (800a924 <xPortStartScheduler+0x134>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f1c3 0307 	rsb	r3, r3, #7
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d00a      	beq.n	800a8a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60bb      	str	r3, [r7, #8]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8a8:	4b1e      	ldr	r3, [pc, #120]	; (800a924 <xPortStartScheduler+0x134>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ba:	4a1a      	ldr	r2, [pc, #104]	; (800a924 <xPortStartScheduler+0x134>)
 800a8bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8c6:	4b18      	ldr	r3, [pc, #96]	; (800a928 <xPortStartScheduler+0x138>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a17      	ldr	r2, [pc, #92]	; (800a928 <xPortStartScheduler+0x138>)
 800a8cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a14      	ldr	r2, [pc, #80]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8de:	f000 f8dd 	bl	800aa9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <xPortStartScheduler+0x13c>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8e8:	f000 f8fc 	bl	800aae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <xPortStartScheduler+0x140>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	; (800a930 <xPortStartScheduler+0x140>)
 800a8f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8f8:	f7ff ff66 	bl	800a7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8fc:	f7ff f84a 	bl	8009994 <vTaskSwitchContext>
	prvTaskExitError();
 800a900:	f7ff ff20 	bl	800a744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	e000ed00 	.word	0xe000ed00
 800a914:	410fc271 	.word	0x410fc271
 800a918:	410fc270 	.word	0x410fc270
 800a91c:	e000e400 	.word	0xe000e400
 800a920:	20001074 	.word	0x20001074
 800a924:	20001078 	.word	0x20001078
 800a928:	e000ed20 	.word	0xe000ed20
 800a92c:	20000098 	.word	0x20000098
 800a930:	e000ef34 	.word	0xe000ef34

0800a934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	607b      	str	r3, [r7, #4]
}
 800a94c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a94e:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <vPortEnterCritical+0x58>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a0d      	ldr	r2, [pc, #52]	; (800a98c <vPortEnterCritical+0x58>)
 800a956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <vPortEnterCritical+0x58>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10f      	bne.n	800a980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a960:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <vPortEnterCritical+0x5c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <vPortEnterCritical+0x4c>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	603b      	str	r3, [r7, #0]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <vPortEnterCritical+0x4a>
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	20000098 	.word	0x20000098
 800a990:	e000ed04 	.word	0xe000ed04

0800a994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a99a:	4b12      	ldr	r3, [pc, #72]	; (800a9e4 <vPortExitCritical+0x50>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <vPortExitCritical+0x24>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	607b      	str	r3, [r7, #4]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9c2:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <vPortExitCritical+0x42>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f383 8811 	msr	BASEPRI, r3
}
 800a9d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	20000098 	.word	0x20000098
	...

0800a9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9f0:	f3ef 8009 	mrs	r0, PSP
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <pxCurrentTCBConst>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	f01e 0f10 	tst.w	lr, #16
 800aa00:	bf08      	it	eq
 800aa02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa14:	f380 8811 	msr	BASEPRI, r0
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f7fe ffb8 	bl	8009994 <vTaskSwitchContext>
 800aa24:	f04f 0000 	mov.w	r0, #0
 800aa28:	f380 8811 	msr	BASEPRI, r0
 800aa2c:	bc09      	pop	{r0, r3}
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	6808      	ldr	r0, [r1, #0]
 800aa32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa36:	f01e 0f10 	tst.w	lr, #16
 800aa3a:	bf08      	it	eq
 800aa3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa40:	f380 8809 	msr	PSP, r0
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst>:
 800aa50:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	607b      	str	r3, [r7, #4]
}
 800aa70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa72:	f7fe fed5 	bl	8009820 <xTaskIncrementTick>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <xPortSysTickHandler+0x40>)
 800aa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	2300      	movs	r3, #0
 800aa86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	f383 8811 	msr	BASEPRI, r3
}
 800aa8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <vPortSetupTimerInterrupt+0x38>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <vPortSetupTimerInterrupt+0x3c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <vPortSetupTimerInterrupt+0x40>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	099b      	lsrs	r3, r3, #6
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <vPortSetupTimerInterrupt+0x44>)
 800aaba:	3b01      	subs	r3, #1
 800aabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aac0:	2207      	movs	r2, #7
 800aac2:	601a      	str	r2, [r3, #0]
}
 800aac4:	bf00      	nop
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	e000e010 	.word	0xe000e010
 800aad4:	e000e018 	.word	0xe000e018
 800aad8:	20000000 	.word	0x20000000
 800aadc:	10624dd3 	.word	0x10624dd3
 800aae0:	e000e014 	.word	0xe000e014

0800aae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aaf4 <vPortEnableVFP+0x10>
 800aae8:	6801      	ldr	r1, [r0, #0]
 800aaea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aaee:	6001      	str	r1, [r0, #0]
 800aaf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aaf2:	bf00      	nop
 800aaf4:	e000ed88 	.word	0xe000ed88

0800aaf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aafe:	f3ef 8305 	mrs	r3, IPSR
 800ab02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	d914      	bls.n	800ab34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab0a:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <vPortValidateInterruptPriority+0x70>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab14:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <vPortValidateInterruptPriority+0x74>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	7afa      	ldrb	r2, [r7, #11]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d20a      	bcs.n	800ab34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab34:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <vPortValidateInterruptPriority+0x78>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <vPortValidateInterruptPriority+0x7c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d90a      	bls.n	800ab5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	603b      	str	r3, [r7, #0]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <vPortValidateInterruptPriority+0x60>
	}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	e000e3f0 	.word	0xe000e3f0
 800ab6c:	20001074 	.word	0x20001074
 800ab70:	e000ed0c 	.word	0xe000ed0c
 800ab74:	20001078 	.word	0x20001078

0800ab78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08a      	sub	sp, #40	; 0x28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab84:	f7fe fd90 	bl	80096a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab88:	4b5b      	ldr	r3, [pc, #364]	; (800acf8 <pvPortMalloc+0x180>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab90:	f000 f920 	bl	800add4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab94:	4b59      	ldr	r3, [pc, #356]	; (800acfc <pvPortMalloc+0x184>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f040 8093 	bne.w	800acc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01d      	beq.n	800abe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aba8:	2208      	movs	r2, #8
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d014      	beq.n	800abe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f023 0307 	bic.w	r3, r3, #7
 800abc0:	3308      	adds	r3, #8
 800abc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f003 0307 	and.w	r3, r3, #7
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <pvPortMalloc+0x6c>
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	617b      	str	r3, [r7, #20]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d06e      	beq.n	800acc8 <pvPortMalloc+0x150>
 800abea:	4b45      	ldr	r3, [pc, #276]	; (800ad00 <pvPortMalloc+0x188>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d869      	bhi.n	800acc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abf4:	4b43      	ldr	r3, [pc, #268]	; (800ad04 <pvPortMalloc+0x18c>)
 800abf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abf8:	4b42      	ldr	r3, [pc, #264]	; (800ad04 <pvPortMalloc+0x18c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfe:	e004      	b.n	800ac0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d903      	bls.n	800ac1c <pvPortMalloc+0xa4>
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1f1      	bne.n	800ac00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac1c:	4b36      	ldr	r3, [pc, #216]	; (800acf8 <pvPortMalloc+0x180>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d050      	beq.n	800acc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	4413      	add	r3, r2
 800ac2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	2308      	movs	r3, #8
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d91f      	bls.n	800ac88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <pvPortMalloc+0xf8>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	613b      	str	r3, [r7, #16]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	1ad2      	subs	r2, r2, r3
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac82:	69b8      	ldr	r0, [r7, #24]
 800ac84:	f000 f908 	bl	800ae98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac88:	4b1d      	ldr	r3, [pc, #116]	; (800ad00 <pvPortMalloc+0x188>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	4a1b      	ldr	r2, [pc, #108]	; (800ad00 <pvPortMalloc+0x188>)
 800ac94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <pvPortMalloc+0x188>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	4b1b      	ldr	r3, [pc, #108]	; (800ad08 <pvPortMalloc+0x190>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d203      	bcs.n	800acaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aca2:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <pvPortMalloc+0x188>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a18      	ldr	r2, [pc, #96]	; (800ad08 <pvPortMalloc+0x190>)
 800aca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	4b13      	ldr	r3, [pc, #76]	; (800acfc <pvPortMalloc+0x184>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	431a      	orrs	r2, r3
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acbe:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <pvPortMalloc+0x194>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	4a11      	ldr	r2, [pc, #68]	; (800ad0c <pvPortMalloc+0x194>)
 800acc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acc8:	f7fe fcfc 	bl	80096c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	f003 0307 	and.w	r3, r3, #7
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00a      	beq.n	800acec <pvPortMalloc+0x174>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	60fb      	str	r3, [r7, #12]
}
 800ace8:	bf00      	nop
 800acea:	e7fe      	b.n	800acea <pvPortMalloc+0x172>
	return pvReturn;
 800acec:	69fb      	ldr	r3, [r7, #28]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3728      	adds	r7, #40	; 0x28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20004c84 	.word	0x20004c84
 800acfc:	20004c98 	.word	0x20004c98
 800ad00:	20004c88 	.word	0x20004c88
 800ad04:	20004c7c 	.word	0x20004c7c
 800ad08:	20004c8c 	.word	0x20004c8c
 800ad0c:	20004c90 	.word	0x20004c90

0800ad10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d04d      	beq.n	800adbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad22:	2308      	movs	r3, #8
 800ad24:	425b      	negs	r3, r3
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	4413      	add	r3, r2
 800ad2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	4b24      	ldr	r3, [pc, #144]	; (800adc8 <vPortFree+0xb8>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <vPortFree+0x44>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60fb      	str	r3, [r7, #12]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00a      	beq.n	800ad72 <vPortFree+0x62>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	60bb      	str	r3, [r7, #8]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	4b14      	ldr	r3, [pc, #80]	; (800adc8 <vPortFree+0xb8>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01e      	beq.n	800adbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11a      	bne.n	800adbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <vPortFree+0xb8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	43db      	mvns	r3, r3
 800ad92:	401a      	ands	r2, r3
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad98:	f7fe fc86 	bl	80096a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <vPortFree+0xbc>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4413      	add	r3, r2
 800ada6:	4a09      	ldr	r2, [pc, #36]	; (800adcc <vPortFree+0xbc>)
 800ada8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f000 f874 	bl	800ae98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <vPortFree+0xc0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	4a06      	ldr	r2, [pc, #24]	; (800add0 <vPortFree+0xc0>)
 800adb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adba:	f7fe fc83 	bl	80096c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adbe:	bf00      	nop
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20004c98 	.word	0x20004c98
 800adcc:	20004c88 	.word	0x20004c88
 800add0:	20004c94 	.word	0x20004c94

0800add4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800adde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ade0:	4b27      	ldr	r3, [pc, #156]	; (800ae80 <prvHeapInit+0xac>)
 800ade2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00c      	beq.n	800ae08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3307      	adds	r3, #7
 800adf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f023 0307 	bic.w	r3, r3, #7
 800adfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	4a1f      	ldr	r2, [pc, #124]	; (800ae80 <prvHeapInit+0xac>)
 800ae04:	4413      	add	r3, r2
 800ae06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae0c:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <prvHeapInit+0xb0>)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <prvHeapInit+0xb0>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae20:	2208      	movs	r2, #8
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <prvHeapInit+0xb4>)
 800ae34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae36:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <prvHeapInit+0xb4>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae3e:	4b12      	ldr	r3, [pc, #72]	; (800ae88 <prvHeapInit+0xb4>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <prvHeapInit+0xb4>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <prvHeapInit+0xb8>)
 800ae62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <prvHeapInit+0xbc>)
 800ae6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <prvHeapInit+0xc0>)
 800ae6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae72:	601a      	str	r2, [r3, #0]
}
 800ae74:	bf00      	nop
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	2000107c 	.word	0x2000107c
 800ae84:	20004c7c 	.word	0x20004c7c
 800ae88:	20004c84 	.word	0x20004c84
 800ae8c:	20004c8c 	.word	0x20004c8c
 800ae90:	20004c88 	.word	0x20004c88
 800ae94:	20004c98 	.word	0x20004c98

0800ae98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aea0:	4b28      	ldr	r3, [pc, #160]	; (800af44 <prvInsertBlockIntoFreeList+0xac>)
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e002      	b.n	800aeac <prvInsertBlockIntoFreeList+0x14>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d8f7      	bhi.n	800aea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	4413      	add	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d108      	bne.n	800aeda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	441a      	add	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	441a      	add	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d118      	bne.n	800af20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b15      	ldr	r3, [pc, #84]	; (800af48 <prvInsertBlockIntoFreeList+0xb0>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d00d      	beq.n	800af16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	441a      	add	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e008      	b.n	800af28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af16:	4b0c      	ldr	r3, [pc, #48]	; (800af48 <prvInsertBlockIntoFreeList+0xb0>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e003      	b.n	800af28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d002      	beq.n	800af36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20004c7c 	.word	0x20004c7c
 800af48:	20004c84 	.word	0x20004c84

0800af4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af50:	2200      	movs	r2, #0
 800af52:	4912      	ldr	r1, [pc, #72]	; (800af9c <MX_USB_DEVICE_Init+0x50>)
 800af54:	4812      	ldr	r0, [pc, #72]	; (800afa0 <MX_USB_DEVICE_Init+0x54>)
 800af56:	f7fb ff2f 	bl	8006db8 <USBD_Init>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af60:	f7f5 fda8 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af64:	490f      	ldr	r1, [pc, #60]	; (800afa4 <MX_USB_DEVICE_Init+0x58>)
 800af66:	480e      	ldr	r0, [pc, #56]	; (800afa0 <MX_USB_DEVICE_Init+0x54>)
 800af68:	f7fb ff56 	bl	8006e18 <USBD_RegisterClass>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af72:	f7f5 fd9f 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af76:	490c      	ldr	r1, [pc, #48]	; (800afa8 <MX_USB_DEVICE_Init+0x5c>)
 800af78:	4809      	ldr	r0, [pc, #36]	; (800afa0 <MX_USB_DEVICE_Init+0x54>)
 800af7a:	f7fb fe8d 	bl	8006c98 <USBD_CDC_RegisterInterface>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af84:	f7f5 fd96 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af88:	4805      	ldr	r0, [pc, #20]	; (800afa0 <MX_USB_DEVICE_Init+0x54>)
 800af8a:	f7fb ff7b 	bl	8006e84 <USBD_Start>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af94:	f7f5 fd8e 	bl	8000ab4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af98:	bf00      	nop
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	200000b0 	.word	0x200000b0
 800afa0:	20004c9c 	.word	0x20004c9c
 800afa4:	20000018 	.word	0x20000018
 800afa8:	2000009c 	.word	0x2000009c

0800afac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afb0:	2200      	movs	r2, #0
 800afb2:	4905      	ldr	r1, [pc, #20]	; (800afc8 <CDC_Init_FS+0x1c>)
 800afb4:	4805      	ldr	r0, [pc, #20]	; (800afcc <CDC_Init_FS+0x20>)
 800afb6:	f7fb fe89 	bl	8006ccc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afba:	4905      	ldr	r1, [pc, #20]	; (800afd0 <CDC_Init_FS+0x24>)
 800afbc:	4803      	ldr	r0, [pc, #12]	; (800afcc <CDC_Init_FS+0x20>)
 800afbe:	f7fb fea7 	bl	8006d10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20005778 	.word	0x20005778
 800afcc:	20004c9c 	.word	0x20004c9c
 800afd0:	20004f78 	.word	0x20004f78

0800afd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800afd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800afda:	4618      	mov	r0, r3
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	6039      	str	r1, [r7, #0]
 800afee:	71fb      	strb	r3, [r7, #7]
 800aff0:	4613      	mov	r3, r2
 800aff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aff4:	79fb      	ldrb	r3, [r7, #7]
 800aff6:	2b23      	cmp	r3, #35	; 0x23
 800aff8:	d84a      	bhi.n	800b090 <CDC_Control_FS+0xac>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <CDC_Control_FS+0x1c>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b091 	.word	0x0800b091
 800b004:	0800b091 	.word	0x0800b091
 800b008:	0800b091 	.word	0x0800b091
 800b00c:	0800b091 	.word	0x0800b091
 800b010:	0800b091 	.word	0x0800b091
 800b014:	0800b091 	.word	0x0800b091
 800b018:	0800b091 	.word	0x0800b091
 800b01c:	0800b091 	.word	0x0800b091
 800b020:	0800b091 	.word	0x0800b091
 800b024:	0800b091 	.word	0x0800b091
 800b028:	0800b091 	.word	0x0800b091
 800b02c:	0800b091 	.word	0x0800b091
 800b030:	0800b091 	.word	0x0800b091
 800b034:	0800b091 	.word	0x0800b091
 800b038:	0800b091 	.word	0x0800b091
 800b03c:	0800b091 	.word	0x0800b091
 800b040:	0800b091 	.word	0x0800b091
 800b044:	0800b091 	.word	0x0800b091
 800b048:	0800b091 	.word	0x0800b091
 800b04c:	0800b091 	.word	0x0800b091
 800b050:	0800b091 	.word	0x0800b091
 800b054:	0800b091 	.word	0x0800b091
 800b058:	0800b091 	.word	0x0800b091
 800b05c:	0800b091 	.word	0x0800b091
 800b060:	0800b091 	.word	0x0800b091
 800b064:	0800b091 	.word	0x0800b091
 800b068:	0800b091 	.word	0x0800b091
 800b06c:	0800b091 	.word	0x0800b091
 800b070:	0800b091 	.word	0x0800b091
 800b074:	0800b091 	.word	0x0800b091
 800b078:	0800b091 	.word	0x0800b091
 800b07c:	0800b091 	.word	0x0800b091
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b091 	.word	0x0800b091
 800b088:	0800b091 	.word	0x0800b091
 800b08c:	0800b091 	.word	0x0800b091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b090:	bf00      	nop
  }

  return (USBD_OK);
 800b092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	4805      	ldr	r0, [pc, #20]	; (800b0c4 <CDC_Receive_FS+0x24>)
 800b0ae:	f7fb fe2f 	bl	8006d10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0b2:	4804      	ldr	r0, [pc, #16]	; (800b0c4 <CDC_Receive_FS+0x24>)
 800b0b4:	f7fb fe4a 	bl	8006d4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b0b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20004c9c 	.word	0x20004c9c

0800b0c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b0da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
	...

0800b0ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2212      	movs	r2, #18
 800b0fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0fe:	4b03      	ldr	r3, [pc, #12]	; (800b10c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	200000d0 	.word	0x200000d0

0800b110 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	4603      	mov	r3, r0
 800b118:	6039      	str	r1, [r7, #0]
 800b11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2204      	movs	r2, #4
 800b120:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b122:	4b03      	ldr	r3, [pc, #12]	; (800b130 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	200000f0 	.word	0x200000f0

0800b134 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	6039      	str	r1, [r7, #0]
 800b13e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b140:	79fb      	ldrb	r3, [r7, #7]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d105      	bne.n	800b152 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	4907      	ldr	r1, [pc, #28]	; (800b168 <USBD_FS_ProductStrDescriptor+0x34>)
 800b14a:	4808      	ldr	r0, [pc, #32]	; (800b16c <USBD_FS_ProductStrDescriptor+0x38>)
 800b14c:	f7fd f870 	bl	8008230 <USBD_GetString>
 800b150:	e004      	b.n	800b15c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	4904      	ldr	r1, [pc, #16]	; (800b168 <USBD_FS_ProductStrDescriptor+0x34>)
 800b156:	4805      	ldr	r0, [pc, #20]	; (800b16c <USBD_FS_ProductStrDescriptor+0x38>)
 800b158:	f7fd f86a 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b15c:	4b02      	ldr	r3, [pc, #8]	; (800b168 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	20005f78 	.word	0x20005f78
 800b16c:	0800bc88 	.word	0x0800bc88

0800b170 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	4904      	ldr	r1, [pc, #16]	; (800b190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b180:	4804      	ldr	r0, [pc, #16]	; (800b194 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b182:	f7fd f855 	bl	8008230 <USBD_GetString>
  return USBD_StrDesc;
 800b186:	4b02      	ldr	r3, [pc, #8]	; (800b190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	20005f78 	.word	0x20005f78
 800b194:	0800bc98 	.word	0x0800bc98

0800b198 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	6039      	str	r1, [r7, #0]
 800b1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	221a      	movs	r2, #26
 800b1a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1aa:	f000 f855 	bl	800b258 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1ae:	4b02      	ldr	r3, [pc, #8]	; (800b1b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	200000f4 	.word	0x200000f4

0800b1bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	6039      	str	r1, [r7, #0]
 800b1c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1c8:	79fb      	ldrb	r3, [r7, #7]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	4907      	ldr	r1, [pc, #28]	; (800b1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1d2:	4808      	ldr	r0, [pc, #32]	; (800b1f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1d4:	f7fd f82c 	bl	8008230 <USBD_GetString>
 800b1d8:	e004      	b.n	800b1e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	4904      	ldr	r1, [pc, #16]	; (800b1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1de:	4805      	ldr	r0, [pc, #20]	; (800b1f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1e0:	f7fd f826 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1e4:	4b02      	ldr	r3, [pc, #8]	; (800b1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20005f78 	.word	0x20005f78
 800b1f4:	0800bcac 	.word	0x0800bcac

0800b1f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	4603      	mov	r3, r0
 800b200:	6039      	str	r1, [r7, #0]
 800b202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b204:	79fb      	ldrb	r3, [r7, #7]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d105      	bne.n	800b216 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	4907      	ldr	r1, [pc, #28]	; (800b22c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b20e:	4808      	ldr	r0, [pc, #32]	; (800b230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b210:	f7fd f80e 	bl	8008230 <USBD_GetString>
 800b214:	e004      	b.n	800b220 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	4904      	ldr	r1, [pc, #16]	; (800b22c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b21a:	4805      	ldr	r0, [pc, #20]	; (800b230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b21c:	f7fd f808 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b220:	4b02      	ldr	r3, [pc, #8]	; (800b22c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20005f78 	.word	0x20005f78
 800b230:	0800bcb8 	.word	0x0800bcb8

0800b234 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	220c      	movs	r2, #12
 800b244:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b246:	4b03      	ldr	r3, [pc, #12]	; (800b254 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	200000e4 	.word	0x200000e4

0800b258 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b25e:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <Get_SerialNum+0x44>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b264:	4b0e      	ldr	r3, [pc, #56]	; (800b2a0 <Get_SerialNum+0x48>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b26a:	4b0e      	ldr	r3, [pc, #56]	; (800b2a4 <Get_SerialNum+0x4c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4413      	add	r3, r2
 800b276:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d009      	beq.n	800b292 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b27e:	2208      	movs	r2, #8
 800b280:	4909      	ldr	r1, [pc, #36]	; (800b2a8 <Get_SerialNum+0x50>)
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 f814 	bl	800b2b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b288:	2204      	movs	r2, #4
 800b28a:	4908      	ldr	r1, [pc, #32]	; (800b2ac <Get_SerialNum+0x54>)
 800b28c:	68b8      	ldr	r0, [r7, #8]
 800b28e:	f000 f80f 	bl	800b2b0 <IntToUnicode>
  }
}
 800b292:	bf00      	nop
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	1fff7a10 	.word	0x1fff7a10
 800b2a0:	1fff7a14 	.word	0x1fff7a14
 800b2a4:	1fff7a18 	.word	0x1fff7a18
 800b2a8:	200000f6 	.word	0x200000f6
 800b2ac:	20000106 	.word	0x20000106

0800b2b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	75fb      	strb	r3, [r7, #23]
 800b2c6:	e027      	b.n	800b318 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	0f1b      	lsrs	r3, r3, #28
 800b2cc:	2b09      	cmp	r3, #9
 800b2ce:	d80b      	bhi.n	800b2e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	0f1b      	lsrs	r3, r3, #28
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	4619      	mov	r1, r3
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	440b      	add	r3, r1
 800b2e0:	3230      	adds	r2, #48	; 0x30
 800b2e2:	b2d2      	uxtb	r2, r2
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	e00a      	b.n	800b2fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	0f1b      	lsrs	r3, r3, #28
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	440b      	add	r3, r1
 800b2f8:	3237      	adds	r2, #55	; 0x37
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	011b      	lsls	r3, r3, #4
 800b302:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	005b      	lsls	r3, r3, #1
 800b308:	3301      	adds	r3, #1
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	4413      	add	r3, r2
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	3301      	adds	r3, #1
 800b316:	75fb      	strb	r3, [r7, #23]
 800b318:	7dfa      	ldrb	r2, [r7, #23]
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d3d3      	bcc.n	800b2c8 <IntToUnicode+0x18>
  }
}
 800b320:	bf00      	nop
 800b322:	bf00      	nop
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
	...

0800b330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b0a0      	sub	sp, #128	; 0x80
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b338:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	605a      	str	r2, [r3, #4]
 800b342:	609a      	str	r2, [r3, #8]
 800b344:	60da      	str	r2, [r3, #12]
 800b346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b348:	f107 0310 	add.w	r3, r7, #16
 800b34c:	225c      	movs	r2, #92	; 0x5c
 800b34e:	2100      	movs	r1, #0
 800b350:	4618      	mov	r0, r3
 800b352:	f000 fba7 	bl	800baa4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b35e:	d156      	bne.n	800b40e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b360:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b364:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b366:	2300      	movs	r3, #0
 800b368:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b36a:	f107 0310 	add.w	r3, r7, #16
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f7 fec0 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b37a:	f7f5 fb9b 	bl	8000ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	4b25      	ldr	r3, [pc, #148]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b386:	4a24      	ldr	r2, [pc, #144]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b388:	f043 0301 	orr.w	r3, r3, #1
 800b38c:	6313      	str	r3, [r2, #48]	; 0x30
 800b38e:	4b22      	ldr	r3, [pc, #136]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b39a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b39e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	481b      	ldr	r0, [pc, #108]	; (800b41c <HAL_PCD_MspInit+0xec>)
 800b3b0:	f7f5 fee0 	bl	8001174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b3b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b3b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3c6:	230a      	movs	r3, #10
 800b3c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4812      	ldr	r0, [pc, #72]	; (800b41c <HAL_PCD_MspInit+0xec>)
 800b3d2:	f7f5 fecf 	bl	8001174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3d6:	4b10      	ldr	r3, [pc, #64]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3da:	4a0f      	ldr	r2, [pc, #60]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e0:	6353      	str	r3, [r2, #52]	; 0x34
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60bb      	str	r3, [r7, #8]
 800b3e6:	4b0c      	ldr	r3, [pc, #48]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	4a0b      	ldr	r2, [pc, #44]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b3ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3f0:	6453      	str	r3, [r2, #68]	; 0x44
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <HAL_PCD_MspInit+0xe8>)
 800b3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3fa:	60bb      	str	r3, [r7, #8]
 800b3fc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b3fe:	2200      	movs	r2, #0
 800b400:	2105      	movs	r1, #5
 800b402:	2043      	movs	r0, #67	; 0x43
 800b404:	f7f5 fe7f 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b408:	2043      	movs	r0, #67	; 0x43
 800b40a:	f7f5 fe98 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b40e:	bf00      	nop
 800b410:	3780      	adds	r7, #128	; 0x80
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	40023800 	.word	0x40023800
 800b41c:	40020000 	.word	0x40020000

0800b420 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b434:	4619      	mov	r1, r3
 800b436:	4610      	mov	r0, r2
 800b438:	f7fb fd71 	bl	8006f1e <USBD_LL_SetupStage>
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b456:	78fa      	ldrb	r2, [r7, #3]
 800b458:	6879      	ldr	r1, [r7, #4]
 800b45a:	4613      	mov	r3, r2
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	78fb      	ldrb	r3, [r7, #3]
 800b46c:	4619      	mov	r1, r3
 800b46e:	f7fb fdab 	bl	8006fc8 <USBD_LL_DataOutStage>
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	460b      	mov	r3, r1
 800b484:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b48c:	78fa      	ldrb	r2, [r7, #3]
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	4613      	mov	r3, r2
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	4413      	add	r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	440b      	add	r3, r1
 800b49a:	334c      	adds	r3, #76	; 0x4c
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	78fb      	ldrb	r3, [r7, #3]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	f7fb fe44 	bl	800712e <USBD_LL_DataInStage>
}
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fb ff78 	bl	80073b2 <USBD_LL_SOF>
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b084      	sub	sp, #16
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d102      	bne.n	800b4e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73fb      	strb	r3, [r7, #15]
 800b4e2:	e008      	b.n	800b4f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d102      	bne.n	800b4f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	73fb      	strb	r3, [r7, #15]
 800b4f0:	e001      	b.n	800b4f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b4f2:	f7f5 fadf 	bl	8000ab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4fc:	7bfa      	ldrb	r2, [r7, #15]
 800b4fe:	4611      	mov	r1, r2
 800b500:	4618      	mov	r0, r3
 800b502:	f7fb ff18 	bl	8007336 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fb fec0 	bl	8007292 <USBD_LL_Reset>
}
 800b512:	bf00      	nop
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
	...

0800b51c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fb ff13 	bl	8007356 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b542:	f043 0301 	orr.w	r3, r3, #1
 800b546:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a1b      	ldr	r3, [r3, #32]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <HAL_PCD_SuspendCallback+0x48>)
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	4a03      	ldr	r2, [pc, #12]	; (800b564 <HAL_PCD_SuspendCallback+0x48>)
 800b556:	f043 0306 	orr.w	r3, r3, #6
 800b55a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	e000ed00 	.word	0xe000ed00

0800b568 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b576:	4618      	mov	r0, r3
 800b578:	f7fb ff03 	bl	8007382 <USBD_LL_Resume>
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b596:	78fa      	ldrb	r2, [r7, #3]
 800b598:	4611      	mov	r1, r2
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fb ff5b 	bl	8007456 <USBD_LL_IsoOUTIncomplete>
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5ba:	78fa      	ldrb	r2, [r7, #3]
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fb ff17 	bl	80073f2 <USBD_LL_IsoINIncomplete>
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fb ff6d 	bl	80074ba <USBD_LL_DevConnected>
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fb ff6a 	bl	80074d0 <USBD_LL_DevDisconnected>
}
 800b5fc:	bf00      	nop
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d13c      	bne.n	800b68e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b614:	4a20      	ldr	r2, [pc, #128]	; (800b698 <USBD_LL_Init+0x94>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a1e      	ldr	r2, [pc, #120]	; (800b698 <USBD_LL_Init+0x94>)
 800b620:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b624:	4b1c      	ldr	r3, [pc, #112]	; (800b698 <USBD_LL_Init+0x94>)
 800b626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b62a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b62c:	4b1a      	ldr	r3, [pc, #104]	; (800b698 <USBD_LL_Init+0x94>)
 800b62e:	2206      	movs	r2, #6
 800b630:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b632:	4b19      	ldr	r3, [pc, #100]	; (800b698 <USBD_LL_Init+0x94>)
 800b634:	2202      	movs	r2, #2
 800b636:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b638:	4b17      	ldr	r3, [pc, #92]	; (800b698 <USBD_LL_Init+0x94>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b63e:	4b16      	ldr	r3, [pc, #88]	; (800b698 <USBD_LL_Init+0x94>)
 800b640:	2202      	movs	r2, #2
 800b642:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b644:	4b14      	ldr	r3, [pc, #80]	; (800b698 <USBD_LL_Init+0x94>)
 800b646:	2200      	movs	r2, #0
 800b648:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <USBD_LL_Init+0x94>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b650:	4b11      	ldr	r3, [pc, #68]	; (800b698 <USBD_LL_Init+0x94>)
 800b652:	2200      	movs	r2, #0
 800b654:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b656:	4b10      	ldr	r3, [pc, #64]	; (800b698 <USBD_LL_Init+0x94>)
 800b658:	2201      	movs	r2, #1
 800b65a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b65c:	4b0e      	ldr	r3, [pc, #56]	; (800b698 <USBD_LL_Init+0x94>)
 800b65e:	2200      	movs	r2, #0
 800b660:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b662:	480d      	ldr	r0, [pc, #52]	; (800b698 <USBD_LL_Init+0x94>)
 800b664:	f7f6 f963 	bl	800192e <HAL_PCD_Init>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b66e:	f7f5 fa21 	bl	8000ab4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b672:	2180      	movs	r1, #128	; 0x80
 800b674:	4808      	ldr	r0, [pc, #32]	; (800b698 <USBD_LL_Init+0x94>)
 800b676:	f7f7 fbee 	bl	8002e56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b67a:	2240      	movs	r2, #64	; 0x40
 800b67c:	2100      	movs	r1, #0
 800b67e:	4806      	ldr	r0, [pc, #24]	; (800b698 <USBD_LL_Init+0x94>)
 800b680:	f7f7 fba2 	bl	8002dc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b684:	2280      	movs	r2, #128	; 0x80
 800b686:	2101      	movs	r1, #1
 800b688:	4803      	ldr	r0, [pc, #12]	; (800b698 <USBD_LL_Init+0x94>)
 800b68a:	f7f7 fb9d 	bl	8002dc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20006178 	.word	0x20006178

0800b69c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7f6 fa5f 	bl	8001b76 <HAL_PCD_Start>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 f990 	bl	800b9e4 <USBD_Get_USB_Status>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	4608      	mov	r0, r1
 800b6dc:	4611      	mov	r1, r2
 800b6de:	461a      	mov	r2, r3
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	70fb      	strb	r3, [r7, #3]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	70bb      	strb	r3, [r7, #2]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6fa:	78bb      	ldrb	r3, [r7, #2]
 800b6fc:	883a      	ldrh	r2, [r7, #0]
 800b6fe:	78f9      	ldrb	r1, [r7, #3]
 800b700:	f7f6 ff5d 	bl	80025be <HAL_PCD_EP_Open>
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b708:	7bfb      	ldrb	r3, [r7, #15]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 f96a 	bl	800b9e4 <USBD_Get_USB_Status>
 800b710:	4603      	mov	r3, r0
 800b712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b714:	7bbb      	ldrb	r3, [r7, #14]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b084      	sub	sp, #16
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	460b      	mov	r3, r1
 800b728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b738:	78fa      	ldrb	r2, [r7, #3]
 800b73a:	4611      	mov	r1, r2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7f6 ffa6 	bl	800268e <HAL_PCD_EP_Close>
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b746:	7bfb      	ldrb	r3, [r7, #15]
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 f94b 	bl	800b9e4 <USBD_Get_USB_Status>
 800b74e:	4603      	mov	r3, r0
 800b750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b752:	7bbb      	ldrb	r3, [r7, #14]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b776:	78fa      	ldrb	r2, [r7, #3]
 800b778:	4611      	mov	r1, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7f7 f87e 	bl	800287c <HAL_PCD_EP_SetStall>
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	4618      	mov	r0, r3
 800b788:	f000 f92c 	bl	800b9e4 <USBD_Get_USB_Status>
 800b78c:	4603      	mov	r3, r0
 800b78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b790:	7bbb      	ldrb	r3, [r7, #14]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7b4:	78fa      	ldrb	r2, [r7, #3]
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7f7 f8c3 	bl	8002944 <HAL_PCD_EP_ClrStall>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 f90d 	bl	800b9e4 <USBD_Get_USB_Status>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	da0b      	bge.n	800b80c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b7f4:	78fb      	ldrb	r3, [r7, #3]
 800b7f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7fa:	68f9      	ldr	r1, [r7, #12]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	4413      	add	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	440b      	add	r3, r1
 800b806:	333e      	adds	r3, #62	; 0x3e
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	e00b      	b.n	800b824 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b80c:	78fb      	ldrb	r3, [r7, #3]
 800b80e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b812:	68f9      	ldr	r1, [r7, #12]
 800b814:	4613      	mov	r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4413      	add	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	440b      	add	r3, r1
 800b81e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b822:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b824:	4618      	mov	r0, r3
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b840:	2300      	movs	r3, #0
 800b842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7f6 fe90 	bl	8002574 <HAL_PCD_SetAddress>
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 f8c2 	bl	800b9e4 <USBD_Get_USB_Status>
 800b860:	4603      	mov	r3, r0
 800b862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b864:	7bbb      	ldrb	r3, [r7, #14]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b086      	sub	sp, #24
 800b872:	af00      	add	r7, sp, #0
 800b874:	60f8      	str	r0, [r7, #12]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
 800b87a:	460b      	mov	r3, r1
 800b87c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b88c:	7af9      	ldrb	r1, [r7, #11]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	f7f6 ffa9 	bl	80027e8 <HAL_PCD_EP_Transmit>
 800b896:	4603      	mov	r3, r0
 800b898:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 f8a1 	bl	800b9e4 <USBD_Get_USB_Status>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	607a      	str	r2, [r7, #4]
 800b8ba:	603b      	str	r3, [r7, #0]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b8ce:	7af9      	ldrb	r1, [r7, #11]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	f7f6 ff25 	bl	8002722 <HAL_PCD_EP_Receive>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 f880 	bl	800b9e4 <USBD_Get_USB_Status>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b082      	sub	sp, #8
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b904:	78fa      	ldrb	r2, [r7, #3]
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f7f6 ff55 	bl	80027b8 <HAL_PCD_EP_GetRxCount>
 800b90e:	4603      	mov	r3, r0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b924:	78fb      	ldrb	r3, [r7, #3]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <HAL_PCDEx_LPM_Callback+0x18>
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d01f      	beq.n	800b96e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b92e:	e03b      	b.n	800b9a8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d007      	beq.n	800b948 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b938:	f7f4 fea8 	bl	800068c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b93c:	4b1c      	ldr	r3, [pc, #112]	; (800b9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	4a1b      	ldr	r2, [pc, #108]	; (800b9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b942:	f023 0306 	bic.w	r3, r3, #6
 800b946:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6812      	ldr	r2, [r2, #0]
 800b956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b966:	4618      	mov	r0, r3
 800b968:	f7fb fd0b 	bl	8007382 <USBD_LL_Resume>
    break;
 800b96c:	e01c      	b.n	800b9a8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	6812      	ldr	r2, [r2, #0]
 800b97c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b980:	f043 0301 	orr.w	r3, r3, #1
 800b984:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fb fce2 	bl	8007356 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d005      	beq.n	800b9a6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b99a:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	4a04      	ldr	r2, [pc, #16]	; (800b9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800b9a0:	f043 0306 	orr.w	r3, r3, #6
 800b9a4:	6113      	str	r3, [r2, #16]
    break;
 800b9a6:	bf00      	nop
}
 800b9a8:	bf00      	nop
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	e000ed00 	.word	0xe000ed00

0800b9b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9bc:	4b03      	ldr	r3, [pc, #12]	; (800b9cc <USBD_static_malloc+0x18>)
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20006684 	.word	0x20006684

0800b9d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	d817      	bhi.n	800ba28 <USBD_Get_USB_Status+0x44>
 800b9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ba00 <USBD_Get_USB_Status+0x1c>)
 800b9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fe:	bf00      	nop
 800ba00:	0800ba11 	.word	0x0800ba11
 800ba04:	0800ba17 	.word	0x0800ba17
 800ba08:	0800ba1d 	.word	0x0800ba1d
 800ba0c:	0800ba23 	.word	0x0800ba23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
    break;
 800ba14:	e00b      	b.n	800ba2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba16:	2303      	movs	r3, #3
 800ba18:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1a:	e008      	b.n	800ba2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba20:	e005      	b.n	800ba2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba22:	2303      	movs	r3, #3
 800ba24:	73fb      	strb	r3, [r7, #15]
    break;
 800ba26:	e002      	b.n	800ba2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2c:	bf00      	nop
  }
  return usb_status;
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <__libc_init_array>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	4d0d      	ldr	r5, [pc, #52]	; (800ba74 <__libc_init_array+0x38>)
 800ba40:	4c0d      	ldr	r4, [pc, #52]	; (800ba78 <__libc_init_array+0x3c>)
 800ba42:	1b64      	subs	r4, r4, r5
 800ba44:	10a4      	asrs	r4, r4, #2
 800ba46:	2600      	movs	r6, #0
 800ba48:	42a6      	cmp	r6, r4
 800ba4a:	d109      	bne.n	800ba60 <__libc_init_array+0x24>
 800ba4c:	4d0b      	ldr	r5, [pc, #44]	; (800ba7c <__libc_init_array+0x40>)
 800ba4e:	4c0c      	ldr	r4, [pc, #48]	; (800ba80 <__libc_init_array+0x44>)
 800ba50:	f000 f8f2 	bl	800bc38 <_init>
 800ba54:	1b64      	subs	r4, r4, r5
 800ba56:	10a4      	asrs	r4, r4, #2
 800ba58:	2600      	movs	r6, #0
 800ba5a:	42a6      	cmp	r6, r4
 800ba5c:	d105      	bne.n	800ba6a <__libc_init_array+0x2e>
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
 800ba60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba64:	4798      	blx	r3
 800ba66:	3601      	adds	r6, #1
 800ba68:	e7ee      	b.n	800ba48 <__libc_init_array+0xc>
 800ba6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba6e:	4798      	blx	r3
 800ba70:	3601      	adds	r6, #1
 800ba72:	e7f2      	b.n	800ba5a <__libc_init_array+0x1e>
 800ba74:	0800bdb4 	.word	0x0800bdb4
 800ba78:	0800bdb4 	.word	0x0800bdb4
 800ba7c:	0800bdb4 	.word	0x0800bdb4
 800ba80:	0800bdb8 	.word	0x0800bdb8

0800ba84 <__retarget_lock_acquire_recursive>:
 800ba84:	4770      	bx	lr

0800ba86 <__retarget_lock_release_recursive>:
 800ba86:	4770      	bx	lr

0800ba88 <memcpy>:
 800ba88:	440a      	add	r2, r1
 800ba8a:	4291      	cmp	r1, r2
 800ba8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba90:	d100      	bne.n	800ba94 <memcpy+0xc>
 800ba92:	4770      	bx	lr
 800ba94:	b510      	push	{r4, lr}
 800ba96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba9e:	4291      	cmp	r1, r2
 800baa0:	d1f9      	bne.n	800ba96 <memcpy+0xe>
 800baa2:	bd10      	pop	{r4, pc}

0800baa4 <memset>:
 800baa4:	4402      	add	r2, r0
 800baa6:	4603      	mov	r3, r0
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d100      	bne.n	800baae <memset+0xa>
 800baac:	4770      	bx	lr
 800baae:	f803 1b01 	strb.w	r1, [r3], #1
 800bab2:	e7f9      	b.n	800baa8 <memset+0x4>

0800bab4 <cleanup_glue>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	6809      	ldr	r1, [r1, #0]
 800baba:	4605      	mov	r5, r0
 800babc:	b109      	cbz	r1, 800bac2 <cleanup_glue+0xe>
 800babe:	f7ff fff9 	bl	800bab4 <cleanup_glue>
 800bac2:	4621      	mov	r1, r4
 800bac4:	4628      	mov	r0, r5
 800bac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baca:	f000 b869 	b.w	800bba0 <_free_r>
	...

0800bad0 <_reclaim_reent>:
 800bad0:	4b2c      	ldr	r3, [pc, #176]	; (800bb84 <_reclaim_reent+0xb4>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4283      	cmp	r3, r0
 800bad6:	b570      	push	{r4, r5, r6, lr}
 800bad8:	4604      	mov	r4, r0
 800bada:	d051      	beq.n	800bb80 <_reclaim_reent+0xb0>
 800badc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bade:	b143      	cbz	r3, 800baf2 <_reclaim_reent+0x22>
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d14a      	bne.n	800bb7c <_reclaim_reent+0xac>
 800bae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bae8:	6819      	ldr	r1, [r3, #0]
 800baea:	b111      	cbz	r1, 800baf2 <_reclaim_reent+0x22>
 800baec:	4620      	mov	r0, r4
 800baee:	f000 f857 	bl	800bba0 <_free_r>
 800baf2:	6961      	ldr	r1, [r4, #20]
 800baf4:	b111      	cbz	r1, 800bafc <_reclaim_reent+0x2c>
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 f852 	bl	800bba0 <_free_r>
 800bafc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bafe:	b111      	cbz	r1, 800bb06 <_reclaim_reent+0x36>
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 f84d 	bl	800bba0 <_free_r>
 800bb06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb08:	b111      	cbz	r1, 800bb10 <_reclaim_reent+0x40>
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 f848 	bl	800bba0 <_free_r>
 800bb10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb12:	b111      	cbz	r1, 800bb1a <_reclaim_reent+0x4a>
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 f843 	bl	800bba0 <_free_r>
 800bb1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb1c:	b111      	cbz	r1, 800bb24 <_reclaim_reent+0x54>
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 f83e 	bl	800bba0 <_free_r>
 800bb24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb26:	b111      	cbz	r1, 800bb2e <_reclaim_reent+0x5e>
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f000 f839 	bl	800bba0 <_free_r>
 800bb2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb30:	b111      	cbz	r1, 800bb38 <_reclaim_reent+0x68>
 800bb32:	4620      	mov	r0, r4
 800bb34:	f000 f834 	bl	800bba0 <_free_r>
 800bb38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb3a:	b111      	cbz	r1, 800bb42 <_reclaim_reent+0x72>
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 f82f 	bl	800bba0 <_free_r>
 800bb42:	69a3      	ldr	r3, [r4, #24]
 800bb44:	b1e3      	cbz	r3, 800bb80 <_reclaim_reent+0xb0>
 800bb46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb48:	4620      	mov	r0, r4
 800bb4a:	4798      	blx	r3
 800bb4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb4e:	b1b9      	cbz	r1, 800bb80 <_reclaim_reent+0xb0>
 800bb50:	4620      	mov	r0, r4
 800bb52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb56:	f7ff bfad 	b.w	800bab4 <cleanup_glue>
 800bb5a:	5949      	ldr	r1, [r1, r5]
 800bb5c:	b941      	cbnz	r1, 800bb70 <_reclaim_reent+0xa0>
 800bb5e:	3504      	adds	r5, #4
 800bb60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb62:	2d80      	cmp	r5, #128	; 0x80
 800bb64:	68d9      	ldr	r1, [r3, #12]
 800bb66:	d1f8      	bne.n	800bb5a <_reclaim_reent+0x8a>
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f000 f819 	bl	800bba0 <_free_r>
 800bb6e:	e7ba      	b.n	800bae6 <_reclaim_reent+0x16>
 800bb70:	680e      	ldr	r6, [r1, #0]
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 f814 	bl	800bba0 <_free_r>
 800bb78:	4631      	mov	r1, r6
 800bb7a:	e7ef      	b.n	800bb5c <_reclaim_reent+0x8c>
 800bb7c:	2500      	movs	r5, #0
 800bb7e:	e7ef      	b.n	800bb60 <_reclaim_reent+0x90>
 800bb80:	bd70      	pop	{r4, r5, r6, pc}
 800bb82:	bf00      	nop
 800bb84:	20000110 	.word	0x20000110

0800bb88 <__malloc_lock>:
 800bb88:	4801      	ldr	r0, [pc, #4]	; (800bb90 <__malloc_lock+0x8>)
 800bb8a:	f7ff bf7b 	b.w	800ba84 <__retarget_lock_acquire_recursive>
 800bb8e:	bf00      	nop
 800bb90:	200068a4 	.word	0x200068a4

0800bb94 <__malloc_unlock>:
 800bb94:	4801      	ldr	r0, [pc, #4]	; (800bb9c <__malloc_unlock+0x8>)
 800bb96:	f7ff bf76 	b.w	800ba86 <__retarget_lock_release_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	200068a4 	.word	0x200068a4

0800bba0 <_free_r>:
 800bba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bba2:	2900      	cmp	r1, #0
 800bba4:	d044      	beq.n	800bc30 <_free_r+0x90>
 800bba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbaa:	9001      	str	r0, [sp, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f1a1 0404 	sub.w	r4, r1, #4
 800bbb2:	bfb8      	it	lt
 800bbb4:	18e4      	addlt	r4, r4, r3
 800bbb6:	f7ff ffe7 	bl	800bb88 <__malloc_lock>
 800bbba:	4a1e      	ldr	r2, [pc, #120]	; (800bc34 <_free_r+0x94>)
 800bbbc:	9801      	ldr	r0, [sp, #4]
 800bbbe:	6813      	ldr	r3, [r2, #0]
 800bbc0:	b933      	cbnz	r3, 800bbd0 <_free_r+0x30>
 800bbc2:	6063      	str	r3, [r4, #4]
 800bbc4:	6014      	str	r4, [r2, #0]
 800bbc6:	b003      	add	sp, #12
 800bbc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbcc:	f7ff bfe2 	b.w	800bb94 <__malloc_unlock>
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	d908      	bls.n	800bbe6 <_free_r+0x46>
 800bbd4:	6825      	ldr	r5, [r4, #0]
 800bbd6:	1961      	adds	r1, r4, r5
 800bbd8:	428b      	cmp	r3, r1
 800bbda:	bf01      	itttt	eq
 800bbdc:	6819      	ldreq	r1, [r3, #0]
 800bbde:	685b      	ldreq	r3, [r3, #4]
 800bbe0:	1949      	addeq	r1, r1, r5
 800bbe2:	6021      	streq	r1, [r4, #0]
 800bbe4:	e7ed      	b.n	800bbc2 <_free_r+0x22>
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	b10b      	cbz	r3, 800bbf0 <_free_r+0x50>
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	d9fa      	bls.n	800bbe6 <_free_r+0x46>
 800bbf0:	6811      	ldr	r1, [r2, #0]
 800bbf2:	1855      	adds	r5, r2, r1
 800bbf4:	42a5      	cmp	r5, r4
 800bbf6:	d10b      	bne.n	800bc10 <_free_r+0x70>
 800bbf8:	6824      	ldr	r4, [r4, #0]
 800bbfa:	4421      	add	r1, r4
 800bbfc:	1854      	adds	r4, r2, r1
 800bbfe:	42a3      	cmp	r3, r4
 800bc00:	6011      	str	r1, [r2, #0]
 800bc02:	d1e0      	bne.n	800bbc6 <_free_r+0x26>
 800bc04:	681c      	ldr	r4, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	6053      	str	r3, [r2, #4]
 800bc0a:	4421      	add	r1, r4
 800bc0c:	6011      	str	r1, [r2, #0]
 800bc0e:	e7da      	b.n	800bbc6 <_free_r+0x26>
 800bc10:	d902      	bls.n	800bc18 <_free_r+0x78>
 800bc12:	230c      	movs	r3, #12
 800bc14:	6003      	str	r3, [r0, #0]
 800bc16:	e7d6      	b.n	800bbc6 <_free_r+0x26>
 800bc18:	6825      	ldr	r5, [r4, #0]
 800bc1a:	1961      	adds	r1, r4, r5
 800bc1c:	428b      	cmp	r3, r1
 800bc1e:	bf04      	itt	eq
 800bc20:	6819      	ldreq	r1, [r3, #0]
 800bc22:	685b      	ldreq	r3, [r3, #4]
 800bc24:	6063      	str	r3, [r4, #4]
 800bc26:	bf04      	itt	eq
 800bc28:	1949      	addeq	r1, r1, r5
 800bc2a:	6021      	streq	r1, [r4, #0]
 800bc2c:	6054      	str	r4, [r2, #4]
 800bc2e:	e7ca      	b.n	800bbc6 <_free_r+0x26>
 800bc30:	b003      	add	sp, #12
 800bc32:	bd30      	pop	{r4, r5, pc}
 800bc34:	200068a8 	.word	0x200068a8

0800bc38 <_init>:
 800bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3a:	bf00      	nop
 800bc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3e:	bc08      	pop	{r3}
 800bc40:	469e      	mov	lr, r3
 800bc42:	4770      	bx	lr

0800bc44 <_fini>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr
