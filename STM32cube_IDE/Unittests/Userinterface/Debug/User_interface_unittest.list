
User_interface_unittest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800bbc0  0800bbc0  0001bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd1c  0800bd1c  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd1c  0800bd1c  0001bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd24  0800bd24  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800bd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006738  20000174  0800bea0  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200068ac  0800bea0  000268ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b55  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049e2  00000000  00000000  00041cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  000466e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00048018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b30  00000000  00000000  00049798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e65d  00000000  00000000  000502c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da47d  00000000  00000000  0006e925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148da2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c38  00000000  00000000  00148df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000174 	.word	0x20000174
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bba8 	.word	0x0800bba8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000178 	.word	0x20000178
 800020c:	0800bba8 	.word	0x0800bba8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <zet_blauw_licht_aan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void zet_blauw_licht_aan() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <zet_blauw_licht_aan+0x28>)
 800051e:	f001 f80f 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2104      	movs	r1, #4
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <zet_blauw_licht_aan+0x28>)
 8000528:	f001 f80a 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2108      	movs	r1, #8
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <zet_blauw_licht_aan+0x28>)
 8000532:	f001 f805 	bl	8001540 <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021400 	.word	0x40021400

08000540 <zet_groen_licht_aan>:

void zet_groen_licht_aan() {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <zet_groen_licht_aan+0x28>)
 800054a:	f000 fff9 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2104      	movs	r1, #4
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <zet_groen_licht_aan+0x28>)
 8000554:	f000 fff4 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2108      	movs	r1, #8
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <zet_groen_licht_aan+0x28>)
 800055e:	f000 ffef 	bl	8001540 <HAL_GPIO_WritePin>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021400 	.word	0x40021400

0800056c <zet_rood_licht_aan>:

void zet_rood_licht_aan() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <zet_rood_licht_aan+0x28>)
 8000576:	f000 ffe3 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <zet_rood_licht_aan+0x28>)
 8000580:	f000 ffde 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2108      	movs	r1, #8
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <zet_rood_licht_aan+0x28>)
 800058a:	f000 ffd9 	bl	8001540 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021400 	.word	0x40021400

08000598 <groen_knipperend>:

void groen_knipperend() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2102      	movs	r1, #2
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <groen_knipperend+0x24>)
 80005a2:	f000 ffcd 	bl	8001540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <groen_knipperend+0x24>)
 80005ac:	f000 ffc8 	bl	8001540 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GROENE_LED_PORT, GROENE_LED_PIN);
 80005b0:	2104      	movs	r1, #4
 80005b2:	4802      	ldr	r0, [pc, #8]	; (80005bc <groen_knipperend+0x24>)
 80005b4:	f000 ffdd 	bl	8001572 <HAL_GPIO_TogglePin>


}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021400 	.word	0x40021400

080005c0 <blauw_knipperend>:

void blauw_knipperend() {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2104      	movs	r1, #4
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <blauw_knipperend+0x24>)
 80005ca:	f000 ffb9 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2108      	movs	r1, #8
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <blauw_knipperend+0x24>)
 80005d4:	f000 ffb4 	bl	8001540 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN);
 80005d8:	2102      	movs	r1, #2
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <blauw_knipperend+0x24>)
 80005dc:	f000 ffc9 	bl	8001572 <HAL_GPIO_TogglePin>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021400 	.word	0x40021400

080005e8 <update_status>:

void update_status(TestStatus nieuwe_status) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
    huidig_status = nieuwe_status;
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <update_status+0x1c>)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	7013      	strb	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000280 	.word	0x20000280

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fc44 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f848 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f942 	bl	800089c <MX_GPIO_Init>
  MX_I2S1_Init();
 8000618:	f000 f8b0 	bl	800077c <MX_I2S1_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f914 	bl	8000848 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000620:	f000 f8da 	bl	80007d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	4814      	ldr	r0, [pc, #80]	; (800067c <main+0x74>)
 800062a:	f000 ff89 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <main+0x74>)
 8000634:	f000 ff84 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	480f      	ldr	r0, [pc, #60]	; (800067c <main+0x74>)
 800063e:	f000 ff7f 	bl	8001540 <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000642:	f007 febd 	bl	80083c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <main+0x78>)
 8000648:	2100      	movs	r1, #0
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <main+0x7c>)
 800064c:	f007 ff02 	bl	8008454 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <main+0x80>)
 8000654:	6013      	str	r3, [r2, #0]

  /* creation of KnopTASK */
  KnopTASKHandle = osThreadNew(StartKnopThread, NULL, &KnopTASK_attributes);
 8000656:	4a0d      	ldr	r2, [pc, #52]	; (800068c <main+0x84>)
 8000658:	2100      	movs	r1, #0
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <main+0x88>)
 800065c:	f007 fefa 	bl	8008454 <osThreadNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <main+0x8c>)
 8000664:	6013      	str	r3, [r2, #0]

  /* creation of LedTASK */
  LedTASKHandle = osThreadNew(StartLEDThread, NULL, &LedTASK_attributes);
 8000666:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <main+0x90>)
 8000668:	2100      	movs	r1, #0
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0x94>)
 800066c:	f007 fef2 	bl	8008454 <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <main+0x98>)
 8000674:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000676:	f007 fec7 	bl	8008408 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067a:	e7fe      	b.n	800067a <main+0x72>
 800067c:	40021400 	.word	0x40021400
 8000680:	0800bc38 	.word	0x0800bc38
 8000684:	08000a0d 	.word	0x08000a0d
 8000688:	20000274 	.word	0x20000274
 800068c:	0800bc5c 	.word	0x0800bc5c
 8000690:	08000a75 	.word	0x08000a75
 8000694:	20000278 	.word	0x20000278
 8000698:	0800bc80 	.word	0x0800bc80
 800069c:	08000acd 	.word	0x08000acd
 80006a0:	2000027c 	.word	0x2000027c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2234      	movs	r2, #52	; 0x34
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f00b f9ae 	bl	800ba14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <SystemClock_Config+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a28      	ldr	r2, [pc, #160]	; (8000774 <SystemClock_Config+0xd0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <SystemClock_Config+0xd4>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000708:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000714:	2306      	movs	r3, #6
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4618      	mov	r0, r3
 800072e:	f003 fc37 	bl	8003fa0 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000738:	f000 f9f6 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2105      	movs	r1, #5
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fbea 	bl	8002f34 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000766:	f000 f9df 	bl	8000b28 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_I2S1_Init+0x54>)
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <MX_I2S1_Init+0x58>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2S1_Init+0x54>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_I2S1_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2S1_Init+0x54>)
 8000796:	2203      	movs	r2, #3
 8000798:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_I2S1_Init+0x54>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_I2S1_Init+0x54>)
 80007a4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80007a8:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2S1_Init+0x54>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2S1_Init+0x54>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2S1_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2S1_Init+0x54>)
 80007be:	f000 fef3 	bl	80015a8 <HAL_I2S_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80007c8:	f000 f9ae 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000190 	.word	0x20000190
 80007d4:	40013000 	.word	0x40013000

080007d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_SPI2_Init+0x68>)
 80007de:	4a19      	ldr	r2, [pc, #100]	; (8000844 <MX_SPI2_Init+0x6c>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_SPI2_Init+0x68>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_SPI2_Init+0x68>)
 80007ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007f0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_SPI2_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI2_Init+0x68>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_SPI2_Init+0x68>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI2_Init+0x68>)
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI2_Init+0x68>)
 800080e:	2218      	movs	r2, #24
 8000810:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_SPI2_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI2_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_SPI2_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI2_Init+0x68>)
 8000826:	220a      	movs	r2, #10
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_SPI2_Init+0x68>)
 800082c:	f003 fe56 	bl	80044dc <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000836:	f000 f977 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200001d8 	.word	0x200001d8
 8000844:	40003800 	.word	0x40003800

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000880:	f003 feb5 	bl	80045ee <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f94d 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000230 	.word	0x20000230
 8000898:	40011000 	.word	0x40011000

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a4f      	ldr	r2, [pc, #316]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	4b49      	ldr	r3, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a48      	ldr	r2, [pc, #288]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b46      	ldr	r3, [pc, #280]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a41      	ldr	r2, [pc, #260]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <MX_GPIO_Init+0x15c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <MX_GPIO_Init+0x15c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <MX_GPIO_Init+0x15c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <MX_GPIO_Init+0x15c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <MX_GPIO_Init+0x15c>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <MX_GPIO_Init+0x15c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_GPIO_Init+0x15c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <MX_GPIO_Init+0x15c>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_GPIO_Init+0x15c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	210e      	movs	r1, #14
 800095e:	4827      	ldr	r0, [pc, #156]	; (80009fc <MX_GPIO_Init+0x160>)
 8000960:	f000 fdee 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SYNC_Pin|DE_OUTPUT_Pin|RE_OUTPUT_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f241 0130 	movw	r1, #4144	; 0x1030
 800096a:	4825      	ldr	r0, [pc, #148]	; (8000a00 <MX_GPIO_Init+0x164>)
 800096c:	f000 fde8 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <MX_GPIO_Init+0x168>)
 8000978:	f000 fde2 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Start_knop_Pin Pauzeer_knop_Pin Stop_knop_Pin */
  GPIO_InitStruct.Pin = Start_knop_Pin|Pauzeer_knop_Pin|Stop_knop_Pin;
 800097c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000986:	2301      	movs	r3, #1
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x16c>)
 8000992:	f000 fc29 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blauwe_LED_Pin Groene_LED_Pin Rode_LED_Pin */
  GPIO_InitStruct.Pin = Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin;
 8000996:	230e      	movs	r3, #14
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <MX_GPIO_Init+0x160>)
 80009ae:	f000 fc1b 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SYNC_Pin DE_OUTPUT_Pin RE_OUTPUT_Pin */
  GPIO_InitStruct.Pin = SPI2_SYNC_Pin|DE_OUTPUT_Pin|RE_OUTPUT_Pin;
 80009b2:	f241 0330 	movw	r3, #4144	; 0x1030
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x164>)
 80009cc:	f000 fc0c 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDAC_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_GPIO_Init+0x168>)
 80009ea:	f000 fbfd 	bl	80011e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021400 	.word	0x40021400
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020800 	.word	0x40020800

08000a0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a14:	f00a fa52 	bl	800aebc <MX_USB_DEVICE_Init>
  /* Infinite loop */
  for(;;)
  {

	  // checken of de RGB LED de juiste lichtstatus uitzendt bij elke status
	  if (huidig_status == STATUS_WACHTEN_OP_INSTELLINGEN){
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <StartDefaultTask+0x64>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d122      	bne.n	8000a66 <StartDefaultTask+0x5a>
	  osDelay(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	f007 fda8 	bl	8008578 <osDelay>
	  update_status(STATUS_GEREED);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fddd 	bl	80005e8 <update_status>
	  osDelay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a32:	f007 fda1 	bl	8008578 <osDelay>
	  update_status(STATUS_TEST_GESTART);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fdd6 	bl	80005e8 <update_status>
	  osDelay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a40:	f007 fd9a 	bl	8008578 <osDelay>
	  update_status(STATUS_TEST_GEPAUZEERD);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f7ff fdcf 	bl	80005e8 <update_status>
	  osDelay(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4e:	f007 fd93 	bl	8008578 <osDelay>
	  update_status(STATUS_TEST_VOLTOOID);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fdc8 	bl	80005e8 <update_status>
	  osDelay(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5c:	f007 fd8c 	bl	8008578 <osDelay>
	  update_status(STATUS_TEST_GESTOPT);
 8000a60:	2004      	movs	r0, #4
 8000a62:	f7ff fdc1 	bl	80005e8 <update_status>
	  }
    osDelay(1);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f007 fd86 	bl	8008578 <osDelay>
	  if (huidig_status == STATUS_WACHTEN_OP_INSTELLINGEN){
 8000a6c:	e7d4      	b.n	8000a18 <StartDefaultTask+0xc>
 8000a6e:	bf00      	nop
 8000a70:	20000280 	.word	0x20000280

08000a74 <StartKnopThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKnopThread */
void StartKnopThread(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKnopThread */
  /* Infinite loop */
    for(;;) {
        switch (huidig_status) {
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <StartKnopThread+0x54>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d81b      	bhi.n	8000abe <StartKnopThread+0x4a>
 8000a86:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <StartKnopThread+0x18>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000aa1 	.word	0x08000aa1
 8000a90:	08000aa7 	.word	0x08000aa7
 8000a94:	08000aad 	.word	0x08000aad
 8000a98:	08000ab3 	.word	0x08000ab3
 8000a9c:	08000ab9 	.word	0x08000ab9
            case STATUS_GEREED:
                zet_blauw_licht_aan();
 8000aa0:	f7ff fd38 	bl	8000514 <zet_blauw_licht_aan>
                break;
 8000aa4:	e00c      	b.n	8000ac0 <StartKnopThread+0x4c>
            case STATUS_TEST_GESTART:
                zet_groen_licht_aan();
 8000aa6:	f7ff fd4b 	bl	8000540 <zet_groen_licht_aan>
                break;
 8000aaa:	e009      	b.n	8000ac0 <StartKnopThread+0x4c>
            case STATUS_TEST_GEPAUZEERD:
                groen_knipperend();
 8000aac:	f7ff fd74 	bl	8000598 <groen_knipperend>
                break;
 8000ab0:	e006      	b.n	8000ac0 <StartKnopThread+0x4c>
            case STATUS_TEST_GESTOPT:
                zet_rood_licht_aan();
 8000ab2:	f7ff fd5b 	bl	800056c <zet_rood_licht_aan>
                break;
 8000ab6:	e003      	b.n	8000ac0 <StartKnopThread+0x4c>
	        case STATUS_TEST_VOLTOOID:
	              blauw_knipperend();  // Blauw knipperen als voltooid
 8000ab8:	f7ff fd82 	bl	80005c0 <blauw_knipperend>
	              break;
 8000abc:	e000      	b.n	8000ac0 <StartKnopThread+0x4c>
            default:
                break;
 8000abe:	bf00      	nop
        }
        osDelay(100);
 8000ac0:	2064      	movs	r0, #100	; 0x64
 8000ac2:	f007 fd59 	bl	8008578 <osDelay>
        switch (huidig_status) {
 8000ac6:	e7d9      	b.n	8000a7c <StartKnopThread+0x8>
 8000ac8:	20000280 	.word	0x20000280

08000acc <StartLEDThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDThread */
void StartLEDThread(void *argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDThread */
  /* Infinite loop */

	for(;;) {
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <StartLEDThread+0x58>)
 8000ada:	f000 fd19 	bl	8001510 <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d103      	bne.n	8000aec <StartLEDThread+0x20>
		update_status(STATUS_TEST_GESTART);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff fd7f 	bl	80005e8 <update_status>
 8000aea:	e016      	b.n	8000b1a <StartLEDThread+0x4e>
		} else if (HAL_GPIO_ReadPin(PAUZEER_KNOP_PORT, PAUZEER_KNOP_PIN) == GPIO_PIN_RESET) {
 8000aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <StartLEDThread+0x58>)
 8000af2:	f000 fd0d 	bl	8001510 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <StartLEDThread+0x38>
		update_status(STATUS_TEST_GEPAUZEERD);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f7ff fd73 	bl	80005e8 <update_status>
 8000b02:	e00a      	b.n	8000b1a <StartLEDThread+0x4e>
		} else if (HAL_GPIO_ReadPin(STOP_KNOP_PORT, STOP_KNOP_PIN) == GPIO_PIN_RESET) {
 8000b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <StartLEDThread+0x58>)
 8000b0a:	f000 fd01 	bl	8001510 <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <StartLEDThread+0x4e>
		update_status(STATUS_TEST_GESTOPT);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f7ff fd67 	bl	80005e8 <update_status>


		}

	   osDelay(100);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f007 fd2c 	bl	8008578 <osDelay>
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 8000b20:	e7d8      	b.n	8000ad4 <StartLEDThread+0x8>
 8000b22:	bf00      	nop
 8000b24:	40020800 	.word	0x40020800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_MspInit+0x54>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_MspInit+0x54>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x54>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_MspInit+0x54>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_MspInit+0x54>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x54>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	f06f 0001 	mvn.w	r0, #1
 8000b7a:	f000 fafe 	bl	800117a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0a2      	sub	sp, #136	; 0x88
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	225c      	movs	r2, #92	; 0x5c
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00a ff31 	bl	800ba14 <memset>
  if(hi2s->Instance==SPI1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a37      	ldr	r2, [pc, #220]	; (8000c94 <HAL_I2S_MspInit+0x108>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d167      	bne.n	8000c8c <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 75;
 8000bc0:	234b      	movs	r3, #75	; 0x4b
 8000bc2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fac1 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8000bec:	f7ff ff9c 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6313      	str	r3, [r2, #48]	; 0x30
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_I2S_MspInit+0x10c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000c44:	23b0      	movs	r3, #176	; 0xb0
 8000c46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c60:	4619      	mov	r1, r3
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <HAL_I2S_MspInit+0x110>)
 8000c64:	f000 fac0 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <HAL_I2S_MspInit+0x114>)
 8000c88:	f000 faae 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3788      	adds	r7, #136	; 0x88
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_SPI_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12c      	bne.n	8000d20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000cfe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d10:	2305      	movs	r3, #5
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000d1c:	f000 fa64 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40003800 	.word	0x40003800
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8e:	23c0      	movs	r3, #192	; 0xc0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0x8c>)
 8000daa:	f000 fa1d 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8a2 	bl	8000f3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000df8:	f008 fff6 	bl	8009de8 <xTaskGetSchedulerState>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d001      	beq.n	8000e06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e02:	f009 fde1 	bl	800a9c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <OTG_FS_IRQHandler+0x10>)
 8000e12:	f000 ff1d 	bl	8001c50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20006178 	.word	0x20006178

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e60:	4c0b      	ldr	r4, [pc, #44]	; (8000e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd7 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f00a fd9b 	bl	800b9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fbc7 	bl	8000608 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000e88:	0800bd2c 	.word	0x0800bd2c
  ldr r2, =_sbss
 8000e8c:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000e90:	200068ac 	.word	0x200068ac

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f94f 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe32 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f967 	bl	80011ce <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f92f 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000284 	.word	0x20000284

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000284 	.word	0x20000284

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e165      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8154 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80ae 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a5c      	ldr	r2, [pc, #368]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x304>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x308>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x30c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x310>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x314>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x318>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x20a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4a      	ldr	r2, [pc, #296]	; (8001504 <HAL_GPIO_Init+0x31c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x206>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <HAL_GPIO_Init+0x320>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x202>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	; (80014ec <HAL_GPIO_Init+0x304>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_GPIO_Init+0x324>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_GPIO_Init+0x324>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x324>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_GPIO_Init+0x324>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_GPIO_Init+0x324>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <HAL_GPIO_Init+0x324>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_GPIO_Init+0x324>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_GPIO_Init+0x324>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae96 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43d9      	mvns	r1, r3
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	400b      	ands	r3, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0e1      	b.n	800177e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a6d      	ldr	r2, [pc, #436]	; (8001788 <HAL_I2S_Init+0x1e0>)
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fad9 	bl	8000b8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015f0:	f023 030f 	bic.w	r3, r3, #15
 80015f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2202      	movs	r2, #2
 80015fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d06f      	beq.n	80016e6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800160e:	2310      	movs	r3, #16
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e001      	b.n	8001618 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001614:	2320      	movs	r3, #32
 8001616:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b20      	cmp	r3, #32
 800161e:	d802      	bhi.n	8001626 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a58      	ldr	r2, [pc, #352]	; (800178c <HAL_I2S_Init+0x1e4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d004      	beq.n	800163a <HAL_I2S_Init+0x92>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a56      	ldr	r2, [pc, #344]	; (8001790 <HAL_I2S_Init+0x1e8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d104      	bne.n	8001644 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800163a:	2001      	movs	r0, #1
 800163c:	f002 f8be 	bl	80037bc <HAL_RCCEx_GetPeriphCLKFreq>
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	e003      	b.n	800164c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001644:	2002      	movs	r0, #2
 8001646:	f002 f8b9 	bl	80037bc <HAL_RCCEx_GetPeriphCLKFreq>
 800164a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001654:	d125      	bne.n	80016a2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d010      	beq.n	8001680 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	fbb2 f2f3 	udiv	r2, r2, r3
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	3305      	adds	r3, #5
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e01f      	b.n	80016c0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	fbb2 f2f3 	udiv	r2, r2, r3
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	3305      	adds	r3, #5
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	e00e      	b.n	80016c0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	3305      	adds	r3, #5
 80016be:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4a34      	ldr	r2, [pc, #208]	; (8001794 <HAL_I2S_Init+0x1ec>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	e003      	b.n	80016ee <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d902      	bls.n	80016fa <HAL_I2S_Init+0x152>
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d907      	bls.n	800170a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f043 0210 	orr.w	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e039      	b.n	800177e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	ea42 0103 	orr.w	r1, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	430a      	orrs	r2, r1
 800171c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001728:	f023 030f 	bic.w	r3, r3, #15
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6851      	ldr	r1, [r2, #4]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6892      	ldr	r2, [r2, #8]
 8001734:	4311      	orrs	r1, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68d2      	ldr	r2, [r2, #12]
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6992      	ldr	r2, [r2, #24]
 8001740:	430a      	orrs	r2, r1
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b30      	cmp	r3, #48	; 0x30
 8001754:	d003      	beq.n	800175e <HAL_I2S_Init+0x1b6>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2bb0      	cmp	r3, #176	; 0xb0
 800175c:	d107      	bne.n	800176e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69da      	ldr	r2, [r3, #28]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800176c:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800188f 	.word	0x0800188f
 800178c:	40003800 	.word	0x40003800
 8001790:	40003c00 	.word	0x40003c00
 8001794:	cccccccd 	.word	0xcccccccd

08001798 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	1c9a      	adds	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001818:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffb8 	bl	8001798 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	b292      	uxth	r2, r2
 8001844:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	1c9a      	adds	r2, r3, #2
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001862:	b29b      	uxth	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10e      	bne.n	8001886 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001876:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff93 	bl	80017ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d13a      	bne.n	8001920 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d109      	bne.n	80018c8 <I2S_IRQHandler+0x3a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018be:	2b40      	cmp	r3, #64	; 0x40
 80018c0:	d102      	bne.n	80018c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffb4 	bl	8001830 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ce:	2b40      	cmp	r3, #64	; 0x40
 80018d0:	d126      	bne.n	8001920 <I2S_IRQHandler+0x92>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b20      	cmp	r3, #32
 80018de:	d11f      	bne.n	8001920 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff50 	bl	80017c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d136      	bne.n	800199a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b02      	cmp	r3, #2
 8001934:	d109      	bne.n	800194a <I2S_IRQHandler+0xbc>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001940:	2b80      	cmp	r3, #128	; 0x80
 8001942:	d102      	bne.n	800194a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff45 	bl	80017d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b08      	cmp	r3, #8
 8001952:	d122      	bne.n	800199a <I2S_IRQHandler+0x10c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b20      	cmp	r3, #32
 8001960:	d11b      	bne.n	800199a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001970:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	f043 0204 	orr.w	r2, r3, #4
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff13 	bl	80017c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a4:	b08f      	sub	sp, #60	; 0x3c
 80019a6:	af0a      	add	r7, sp, #40	; 0x28
 80019a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e116      	b.n	8001be2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f009 fc66 	bl	800b2a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 f9d1 	bl	8004d9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	687e      	ldr	r6, [r7, #4]
 8001a00:	466d      	mov	r5, sp
 8001a02:	f106 0410 	add.w	r4, r6, #16
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a16:	1d33      	adds	r3, r6, #4
 8001a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1a:	6838      	ldr	r0, [r7, #0]
 8001a1c:	f003 f8a8 	bl	8004b70 <USB_CoreInit>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0d7      	b.n	8001be2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 f9bf 	bl	8004dbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e04a      	b.n	8001ada <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	333d      	adds	r3, #61	; 0x3d
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	333c      	adds	r3, #60	; 0x3c
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	b298      	uxth	r0, r3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3344      	adds	r3, #68	; 0x44
 8001a80:	4602      	mov	r2, r0
 8001a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3340      	adds	r3, #64	; 0x40
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3348      	adds	r3, #72	; 0x48
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	334c      	adds	r3, #76	; 0x4c
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3354      	adds	r3, #84	; 0x54
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3af      	bcc.n	8001a44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e044      	b.n	8001b74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	3301      	adds	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3b5      	bcc.n	8001aea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	687e      	ldr	r6, [r7, #4]
 8001b86:	466d      	mov	r5, sp
 8001b88:	f106 0410 	add.w	r4, r6, #16
 8001b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9c:	1d33      	adds	r3, r6, #4
 8001b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba0:	6838      	ldr	r0, [r7, #0]
 8001ba2:	f003 f957 	bl	8004e54 <USB_DevInit>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e014      	b.n	8001be2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d102      	bne.n	8001bd6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f001 f98b 	bl	8002eec <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 fa99 	bl	8006112 <USB_DevDisconnect>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_PCD_Start+0x1c>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e020      	b.n	8001c48 <HAL_PCD_Start+0x5e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d109      	bne.n	8001c2a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d005      	beq.n	8001c2a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 f8a2 	bl	8004d78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 fa49 	bl	80060d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b08d      	sub	sp, #52	; 0x34
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 fb07 	bl	800627a <USB_GetMode>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 84b7 	bne.w	80025e2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 fa6b 	bl	8006154 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 84ad 	beq.w	80025e0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fa58 	bl	8006154 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d107      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 0202 	and.w	r2, r2, #2
 8001cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fa46 	bl	8006154 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d161      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0210 	bic.w	r2, r2, #16
 8001ce0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	0c5b      	lsrs	r3, r3, #17
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d124      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d035      	beq.n	8001d86 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	6a38      	ldr	r0, [r7, #32]
 8001d2e:	f004 f87d 	bl	8005e2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d3e:	441a      	add	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d50:	441a      	add	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	621a      	str	r2, [r3, #32]
 8001d56:	e016      	b.n	8001d86 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	0c5b      	lsrs	r3, r3, #17
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d110      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6a38      	ldr	r0, [r7, #32]
 8001d70:	f004 f85c 	bl	8005e2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	6a1a      	ldr	r2, [r3, #32]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d80:	441a      	add	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0210 	orr.w	r2, r2, #16
 8001d94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f9da 	bl	8006154 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001daa:	f040 80a7 	bne.w	8001efc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 f9df 	bl	800617a <USB_ReadDevAllOutEpInterrupt>
 8001dbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001dbe:	e099      	b.n	8001ef4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 808e 	beq.w	8001ee8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 fa03 	bl	80061e2 <USB_ReadDevOutEPInterrupt>
 8001ddc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df4:	461a      	mov	r2, r3
 8001df6:	2301      	movs	r3, #1
 8001df8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 feef 	bl	8002be0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 ffc5 	bl	8002db0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2310      	movs	r3, #16
 8001e40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d030      	beq.n	8001eae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d109      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	78db      	ldrb	r3, [r3, #3]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f009 fb2c 	bl	800b4f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2302      	movs	r3, #2
 8001eac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	3301      	adds	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f47f af62 	bne.w	8001dc0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 f927 	bl	8006154 <USB_ReadInterrupts>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f10:	f040 80db 	bne.w	80020ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f004 f948 	bl	80061ae <USB_ReadDevAllInEpInterrupt>
 8001f1e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f24:	e0cd      	b.n	80020c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80c2 	beq.w	80020b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f004 f96e 	bl	800621e <USB_ReadDevInEPInterrupt>
 8001f42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d057      	beq.n	8001ffe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	2201      	movs	r2, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69f9      	ldr	r1, [r7, #28]
 8001f6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f6e:	4013      	ands	r3, r2
 8001f70:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2301      	movs	r3, #1
 8001f82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d132      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	334c      	adds	r3, #76	; 0x4c
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4403      	add	r3, r0
 8001fac:	3348      	adds	r3, #72	; 0x48
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4419      	add	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4403      	add	r3, r0
 8001fc0:	334c      	adds	r3, #76	; 0x4c
 8001fc2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d113      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x3a2>
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3354      	adds	r3, #84	; 0x54
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d108      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fea:	461a      	mov	r2, r3
 8001fec:	2101      	movs	r1, #1
 8001fee:	f004 f975 	bl	80062dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f009 f9f6 	bl	800b3ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002014:	461a      	mov	r2, r3
 8002016:	2308      	movs	r3, #8
 8002018:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002030:	461a      	mov	r2, r3
 8002032:	2310      	movs	r3, #16
 8002034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204c:	461a      	mov	r2, r3
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800205c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800205e:	6a38      	ldr	r0, [r7, #32]
 8002060:	f003 f856 	bl	8005110 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	78db      	ldrb	r3, [r3, #3]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d108      	bne.n	8002092 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2200      	movs	r2, #0
 8002084:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f009 fa43 	bl	800b518 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209e:	461a      	mov	r2, r3
 80020a0:	2302      	movs	r3, #2
 80020a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fd08 	bl	8002ac6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f af2e 	bne.w	8001f26 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 f840 	bl	8006154 <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020de:	d122      	bne.n	8002126 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d108      	bne.n	8002110 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002106:	2100      	movs	r1, #0
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f009 fbbd 	bl	800b888 <HAL_PCDEx_LPM_Callback>
 800210e:	e002      	b.n	8002116 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f009 f9e1 	bl	800b4d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f004 f812 	bl	8006154 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800213a:	d112      	bne.n	8002162 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d102      	bne.n	8002152 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f009 f99d 	bl	800b48c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002160:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fff4 	bl	8006154 <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002176:	d121      	bne.n	80021bc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002186:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d111      	bne.n	80021b6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80021ac:	2101      	movs	r1, #1
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f009 fb6a 	bl	800b888 <HAL_PCDEx_LPM_Callback>
 80021b4:	e002      	b.n	80021bc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f009 f968 	bl	800b48c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 ffc7 	bl	8006154 <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d0:	f040 80b7 	bne.w	8002342 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2110      	movs	r1, #16
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 ff8e 	bl	8005110 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f8:	e046      	b.n	8002288 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002206:	461a      	mov	r2, r3
 8002208:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800220c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	0151      	lsls	r1, r2, #5
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	440a      	add	r2, r1
 8002224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002228:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800222c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002240:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002252:	0151      	lsls	r1, r2, #5
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	440a      	add	r2, r1
 8002258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800225c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002260:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002272:	0151      	lsls	r1, r2, #5
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	440a      	add	r2, r1
 8002278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800227c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002280:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	3301      	adds	r3, #1
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228e:	429a      	cmp	r2, r3
 8002290:	d3b3      	bcc.n	80021fa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d016      	beq.n	80022dc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022be:	f043 030b 	orr.w	r3, r3, #11
 80022c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d4:	f043 030b 	orr.w	r3, r3, #11
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	e015      	b.n	8002308 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002302:	f043 030b 	orr.w	r3, r3, #11
 8002306:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002316:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800231a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800232c:	461a      	mov	r2, r3
 800232e:	f003 ffd5 	bl	80062dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 ff04 	bl	8006154 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002356:	d124      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 ff9a 	bl	8006296 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f002 ff4f 	bl	800520a <USB_GetDevSpeed>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681c      	ldr	r4, [r3, #0]
 8002378:	f000 fec2 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 800237c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4620      	mov	r0, r4
 8002388:	f002 fc54 	bl	8004c34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f009 f854 	bl	800b43a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 fed4 	bl	8006154 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d10a      	bne.n	80023cc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f009 f831 	bl	800b41e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f002 0208 	and.w	r2, r2, #8
 80023ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 febf 	bl	8006154 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d122      	bne.n	8002426 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	e014      	b.n	800241c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d105      	bne.n	8002416 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fb27 	bl	8002a64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	3301      	adds	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	429a      	cmp	r2, r3
 8002424:	d3e5      	bcc.n	80023f2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fe92 	bl	8006154 <USB_ReadInterrupts>
 8002430:	4603      	mov	r3, r0
 8002432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243a:	d13b      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800243c:	2301      	movs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	e02b      	b.n	800249a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3340      	adds	r3, #64	; 0x40
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d115      	bne.n	8002494 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002468:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	da12      	bge.n	8002494 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	333f      	adds	r3, #63	; 0x3f
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fae8 	bl	8002a64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	3301      	adds	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3ce      	bcc.n	8002442 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fe4b 	bl	8006154 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024c8:	d155      	bne.n	8002576 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ca:	2301      	movs	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	e045      	b.n	800255c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d12e      	bne.n	8002556 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da2b      	bge.n	8002556 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800250a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800250e:	429a      	cmp	r2, r3
 8002510:	d121      	bne.n	8002556 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002552:	6053      	str	r3, [r2, #4]
            break;
 8002554:	e007      	b.n	8002566 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3301      	adds	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	429a      	cmp	r2, r3
 8002564:	d3b4      	bcc.n	80024d0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f003 fdea 	bl	8006154 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258a:	d10a      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f008 ffd5 	bl	800b53c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fdd4 	bl	8006154 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d115      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f008 ffc5 	bl	800b558 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	e000      	b.n	80025e2 <HAL_PCD_IRQHandler+0x992>
      return;
 80025e0:	bf00      	nop
    }
  }
}
 80025e2:	3734      	adds	r7, #52	; 0x34
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}

080025e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_PCD_SetAddress+0x1a>
 80025fe:	2302      	movs	r3, #2
 8002600:	e013      	b.n	800262a <HAL_PCD_SetAddress+0x42>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fd32 	bl	8006084 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	4608      	mov	r0, r1
 800263c:	4611      	mov	r1, r2
 800263e:	461a      	mov	r2, r3
 8002640:	4603      	mov	r3, r0
 8002642:	70fb      	strb	r3, [r7, #3]
 8002644:	460b      	mov	r3, r1
 8002646:	803b      	strh	r3, [r7, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da0f      	bge.n	8002678 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	3338      	adds	r3, #56	; 0x38
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	3304      	adds	r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	705a      	strb	r2, [r3, #1]
 8002676:	e00f      	b.n	8002698 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 020f 	and.w	r2, r3, #15
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026a4:	883a      	ldrh	r2, [r7, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	78ba      	ldrb	r2, [r7, #2]
 80026ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026c2:	78bb      	ldrb	r3, [r7, #2]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d102      	bne.n	80026ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_PCD_EP_Open+0xaa>
 80026d8:	2302      	movs	r3, #2
 80026da:	e00e      	b.n	80026fa <HAL_PCD_EP_Open+0xc8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68f9      	ldr	r1, [r7, #12]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fdb2 	bl	8005254 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80026f8:	7afb      	ldrb	r3, [r7, #11]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800270e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002712:	2b00      	cmp	r3, #0
 8002714:	da0f      	bge.n	8002736 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	3338      	adds	r3, #56	; 0x38
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	705a      	strb	r2, [r3, #1]
 8002734:	e00f      	b.n	8002756 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_PCD_EP_Close+0x6e>
 800276c:	2302      	movs	r3, #2
 800276e:	e00e      	b.n	800278e <HAL_PCD_EP_Close+0x8c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fdf0 	bl	8005364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	460b      	mov	r3, r1
 80027a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d8:	7afb      	ldrb	r3, [r7, #11]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027f2:	7afb      	ldrb	r3, [r7, #11]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6979      	ldr	r1, [r7, #20]
 800280a:	f003 f8cf 	bl	80059ac <USB_EP0StartXfer>
 800280e:	e008      	b.n	8002822 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6979      	ldr	r1, [r7, #20]
 800281e:	f002 fe7d 	bl	800551c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 020f 	and.w	r2, r3, #15
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	460b      	mov	r3, r1
 800286a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286c:	7afb      	ldrb	r3, [r7, #11]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3338      	adds	r3, #56	; 0x38
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2201      	movs	r2, #1
 800289a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	f003 f86d 	bl	80059ac <USB_EP0StartXfer>
 80028d2:	e008      	b.n	80028e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6979      	ldr	r1, [r7, #20]
 80028e2:	f002 fe1b 	bl	800551c <USB_EPStartXfer>
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 020f 	and.w	r2, r3, #15
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d901      	bls.n	800290e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e050      	b.n	80029b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800290e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da0f      	bge.n	8002936 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	3338      	adds	r3, #56	; 0x38
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	705a      	strb	r2, [r3, #1]
 8002934:	e00d      	b.n	8002952 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	3304      	adds	r3, #4
 800294a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_PCD_EP_SetStall+0x82>
 800296e:	2302      	movs	r3, #2
 8002970:	e01e      	b.n	80029b0 <HAL_PCD_EP_SetStall+0xc0>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 faab 	bl	8005edc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	b2d9      	uxtb	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029a0:	461a      	mov	r2, r3
 80029a2:	f003 fc9b 	bl	80062dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	f003 020f 	and.w	r2, r3, #15
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d901      	bls.n	80029d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e042      	b.n	8002a5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	da0f      	bge.n	80029fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f003 020f 	and.w	r2, r3, #15
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3338      	adds	r3, #56	; 0x38
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	705a      	strb	r2, [r3, #1]
 80029fc:	e00f      	b.n	8002a1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 020f 	and.w	r2, r3, #15
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	3304      	adds	r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_PCD_EP_ClrStall+0x86>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e00e      	b.n	8002a5c <HAL_PCD_EP_ClrStall+0xa4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 fab3 	bl	8005fb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da0c      	bge.n	8002a92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	3338      	adds	r3, #56	; 0x38
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e00c      	b.n	8002aac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 020f 	and.w	r2, r3, #15
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 f8d2 	bl	8005c5c <USB_EPStopXfer>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002abc:	7afb      	ldrb	r3, [r7, #11]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08a      	sub	sp, #40	; 0x28
 8002aca:	af02      	add	r7, sp, #8
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	3338      	adds	r3, #56	; 0x38
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	3304      	adds	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d901      	bls.n	8002afe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06c      	b.n	8002bd8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d902      	bls.n	8002b1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3303      	adds	r3, #3
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b22:	e02b      	b.n	8002b7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d902      	bls.n	8002b40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3303      	adds	r3, #3
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6919      	ldr	r1, [r3, #16]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f003 f926 	bl	8005db0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	441a      	add	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d809      	bhi.n	8002ba6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d203      	bcs.n	8002ba6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1be      	bne.n	8002b24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d811      	bhi.n	8002bd6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	2201      	movs	r2, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	333c      	adds	r3, #60	; 0x3c
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d17b      	bne.n	8002d0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	4a61      	ldr	r2, [pc, #388]	; (8002da8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	f240 80b9 	bls.w	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80b3 	beq.w	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c42:	461a      	mov	r2, r3
 8002c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c48:	6093      	str	r3, [r2, #8]
 8002c4a:	e0a7      	b.n	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c62:	461a      	mov	r2, r3
 8002c64:	2320      	movs	r3, #32
 8002c66:	6093      	str	r3, [r2, #8]
 8002c68:	e098      	b.n	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f040 8093 	bne.w	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d90f      	bls.n	8002c9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	461a      	mov	r2, r3
 8002c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9a:	6093      	str	r3, [r2, #8]
 8002c9c:	e07e      	b.n	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4413      	add	r3, r2
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	0159      	lsls	r1, r3, #5
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cca:	1ad2      	subs	r2, r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d114      	bne.n	8002d00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2101      	movs	r1, #1
 8002cec:	f003 faf6 	bl	80062dc <USB_EP0_OutStart>
 8002cf0:	e006      	b.n	8002d00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	441a      	add	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f008 fb54 	bl	800b3b4 <HAL_PCD_DataOutStageCallback>
 8002d0c:	e046      	b.n	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d124      	bne.n	8002d60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d32:	6093      	str	r3, [r2, #8]
 8002d34:	e032      	b.n	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2320      	movs	r3, #32
 8002d50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f008 fb2b 	bl	800b3b4 <HAL_PCD_DataOutStageCallback>
 8002d5e:	e01d      	b.n	8002d9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d114      	bne.n	8002d90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f003 faa6 	bl	80062dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f008 fb0c 	bl	800b3b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	4f54300a 	.word	0x4f54300a
 8002dac:	4f54310a 	.word	0x4f54310a

08002db0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	333c      	adds	r3, #60	; 0x3c
 8002dc8:	3304      	adds	r3, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d90e      	bls.n	8002e04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f008 fac3 	bl	800b390 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d90c      	bls.n	8002e2c <PCD_EP_OutSetupPacket_int+0x7c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d108      	bne.n	8002e2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e24:	461a      	mov	r2, r3
 8002e26:	2101      	movs	r1, #1
 8002e28:	f003 fa58 	bl	80062dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	4f54300a 	.word	0x4f54300a

08002e3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e5a:	883b      	ldrh	r3, [r7, #0]
 8002e5c:	0419      	lsls	r1, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
 8002e68:	e028      	b.n	8002ebc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4413      	add	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e00d      	b.n	8002e9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	3340      	adds	r3, #64	; 0x40
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4413      	add	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	3301      	adds	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3ec      	bcc.n	8002e7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ea4:	883b      	ldrh	r3, [r7, #0]
 8002ea6:	0418      	lsls	r0, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4302      	orrs	r2, r0
 8002eb4:	3340      	adds	r3, #64	; 0x40
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	f043 0303 	orr.w	r3, r3, #3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0cc      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b68      	ldr	r3, [pc, #416]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d90c      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b65      	ldr	r3, [pc, #404]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f88:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	494d      	ldr	r1, [pc, #308]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d044      	beq.n	8003054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d119      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e067      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4934      	ldr	r1, [pc, #208]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003024:	f7fd ff9e 	bl	8000f64 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fd ff9a 	bl	8000f64 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e04f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d20c      	bcs.n	800307c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e032      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4916      	ldr	r1, [pc, #88]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490e      	ldr	r1, [pc, #56]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 fdc7 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490a      	ldr	r1, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fefe 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023c00 	.word	0x40023c00
 80030f0:	40023800 	.word	0x40023800
 80030f4:	0800bca4 	.word	0x0800bca4
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_GetHCLKFreq+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000000 	.word	0x20000000

08003118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800311c:	f7ff fff0 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <HAL_RCC_GetPCLK1Freq+0x24>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	0800bcb4 	.word	0x0800bcb4

08003140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003144:	f7ff ffdc 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0b5b      	lsrs	r3, r3, #13
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4903      	ldr	r1, [pc, #12]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	0800bcb4 	.word	0x0800bcb4

08003168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	; 0x30
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80031a0:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	496c      	ldr	r1, [pc, #432]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80031be:	2301      	movs	r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d010      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80031ce:	4b64      	ldr	r3, [pc, #400]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	4960      	ldr	r1, [pc, #384]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80031ec:	2301      	movs	r3, #1
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d017      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031fc:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4955      	ldr	r1, [pc, #340]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321a:	d101      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800321c:	2301      	movs	r3, #1
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003228:	2301      	movs	r3, #1
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d017      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003238:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800323a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	4946      	ldr	r1, [pc, #280]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d101      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003258:	2301      	movs	r3, #1
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003264:	2301      	movs	r3, #1
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 808a 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a33      	ldr	r2, [pc, #204]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800329e:	f7fd fe61 	bl	8000f64 <HAL_GetTick>
 80032a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7fd fe5d 	bl	8000f64 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e278      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032cc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02f      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d028      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ea:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d114      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800330a:	f7fd fe2b 	bl	8000f64 <HAL_GetTick>
 800330e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fd fe27 	bl	8000f64 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e240      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ee      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003340:	d114      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003356:	4902      	ldr	r1, [pc, #8]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
 800335c:	e00c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000
 8003368:	42470e40 	.word	0x42470e40
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a49      	ldr	r2, [pc, #292]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800337a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	4944      	ldr	r1, [pc, #272]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003386:	4313      	orrs	r3, r2
 8003388:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800339e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	4937      	ldr	r1, [pc, #220]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033ce:	4b32      	ldr	r3, [pc, #200]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	492e      	ldr	r1, [pc, #184]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d011      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033f0:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	4926      	ldr	r1, [pc, #152]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340e:	d101      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003410:	2301      	movs	r3, #1
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003426:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	491a      	ldr	r1, [pc, #104]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003448:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003450:	4911      	ldr	r1, [pc, #68]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003462:	2301      	movs	r3, #1
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d005      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003474:	f040 80ff 	bne.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800347e:	f7fd fd71 	bl	8000f64 <HAL_GetTick>
 8003482:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003484:	e00e      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003486:	f7fd fd6d 	bl	8000f64 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d907      	bls.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e188      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003498:	40023800 	.word	0x40023800
 800349c:	424711e0 	.word	0x424711e0
 80034a0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a4:	4b7e      	ldr	r3, [pc, #504]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d028      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d124      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80034d8:	4b71      	ldr	r3, [pc, #452]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	3301      	adds	r3, #1
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034ea:	4b6d      	ldr	r3, [pc, #436]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	431a      	orrs	r2, r3
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	3b01      	subs	r3, #1
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	431a      	orrs	r2, r3
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	4961      	ldr	r1, [pc, #388]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003540:	2b00      	cmp	r3, #0
 8003542:	d035      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354c:	d130      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800354e:	4b54      	ldr	r3, [pc, #336]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	3301      	adds	r3, #1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003566:	0f1b      	lsrs	r3, r3, #28
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	019b      	lsls	r3, r3, #6
 8003578:	431a      	orrs	r2, r3
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	071b      	lsls	r3, r3, #28
 8003590:	4943      	ldr	r1, [pc, #268]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003598:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800359a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359e:	f023 021f 	bic.w	r2, r3, #31
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d029      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c4:	d124      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035de:	0f1b      	lsrs	r3, r3, #28
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	019b      	lsls	r3, r3, #6
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	431a      	orrs	r2, r3
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	071b      	lsls	r3, r3, #28
 8003608:	4925      	ldr	r1, [pc, #148]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	3b01      	subs	r3, #1
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	071b      	lsls	r3, r3, #28
 8003642:	4917      	ldr	r1, [pc, #92]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003650:	f7fd fc88 	bl	8000f64 <HAL_GetTick>
 8003654:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003658:	f7fd fc84 	bl	8000f64 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e09f      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 8095 	bne.w	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003684:	f7fd fc6e 	bl	8000f64 <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800368a:	e00f      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800368c:	f7fd fc6a 	bl	8000f64 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d908      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e085      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x642>
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	42470068 	.word	0x42470068
 80036a8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b8:	d0e8      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x566>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d127      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80036e2:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	3301      	adds	r3, #1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	431a      	orrs	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	3b01      	subs	r3, #1
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	4928      	ldr	r1, [pc, #160]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800371a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	3b01      	subs	r3, #1
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	4922      	ldr	r1, [pc, #136]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01d      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003746:	d118      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	0e1b      	lsrs	r3, r3, #24
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	019b      	lsls	r3, r3, #6
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	3b01      	subs	r3, #1
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	4910      	ldr	r1, [pc, #64]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003780:	f7fd fbf0 	bl	8000f64 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003788:	f7fd fbec 	bl	8000f64 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e007      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a6:	d1ef      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3730      	adds	r7, #48	; 0x30
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	42470070 	.word	0x42470070

080037bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	2b07      	cmp	r3, #7
 80037e2:	f200 8224 	bhi.w	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80037e6:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	080039ef 	.word	0x080039ef
 80037f0:	08003b19 	.word	0x08003b19
 80037f4:	08003c2f 	.word	0x08003c2f
 80037f8:	0800380d 	.word	0x0800380d
 80037fc:	08003c2f 	.word	0x08003c2f
 8003800:	08003c2f 	.word	0x08003c2f
 8003804:	08003c2f 	.word	0x08003c2f
 8003808:	0800380d 	.word	0x0800380d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800380c:	4ba8      	ldr	r3, [pc, #672]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800380e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003812:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003822:	f000 80d6 	beq.w	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800382c:	f200 80dd 	bhi.w	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003836:	f000 809f 	beq.w	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003840:	f200 80d3 	bhi.w	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384a:	d05b      	beq.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003852:	f200 80ca 	bhi.w	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385c:	f000 80b6 	beq.w	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003866:	f200 80c0 	bhi.w	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003870:	f000 8082 	beq.w	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800387a:	f200 80b6 	bhi.w	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388a:	d03b      	beq.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800388c:	e0ad      	b.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800388e:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800389a:	4b85      	ldr	r3, [pc, #532]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a4:	4a83      	ldr	r2, [pc, #524]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	e008      	b.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80038ae:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	4a7f      	ldr	r2, [pc, #508]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80038c0:	4b7b      	ldr	r3, [pc, #492]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	0e1b      	lsrs	r3, r3, #24
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80038ce:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	099b      	lsrs	r3, r3, #6
 80038d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	fb03 f202 	mul.w	r2, r3, r2
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80038e8:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	3301      	adds	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	61fb      	str	r3, [r7, #28]
          break;
 8003902:	e073      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003910:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800391a:	4a66      	ldr	r2, [pc, #408]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e008      	b.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003924:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392e:	4a62      	ldr	r2, [pc, #392]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003936:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393c:	0e1b      	lsrs	r3, r3, #24
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003944:	4b5a      	ldr	r3, [pc, #360]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	fb03 f202 	mul.w	r2, r3, r2
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800395e:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	3301      	adds	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	61fb      	str	r3, [r7, #28]
          break;
 8003976:	e039      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003978:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d108      	bne.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003984:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398c:	4a49      	ldr	r2, [pc, #292]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e007      	b.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003996:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800399e:	4a46      	ldr	r2, [pc, #280]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0f1b      	lsrs	r3, r3, #28
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	61fb      	str	r3, [r7, #28]
          break;
 80039ca:	e00f      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80039cc:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80039ce:	61fb      	str	r3, [r7, #28]
          break;
 80039d0:	e00c      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80039de:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80039e0:	61fb      	str	r3, [r7, #28]
          break;
 80039e2:	e003      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039e6:	61fb      	str	r3, [r7, #28]
          break;
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80039ea:	bf00      	nop
        }
      }
      break;
 80039ec:	e11f      	b.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80039ee:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003a00:	d079      	beq.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003a08:	f200 8082 	bhi.w	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a12:	d03c      	beq.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a1a:	d879      	bhi.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a28:	d172      	bne.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003a2c:	61fb      	str	r3, [r7, #28]
          break;
 8003a2e:	e072      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a30:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e008      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a52:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7e:	0f1b      	lsrs	r3, r3, #28
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	61fb      	str	r3, [r7, #28]
          break;
 8003a8c:	e043      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a9a:	d111      	bne.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e010      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	00b71b00 	.word	0x00b71b00
 8003abc:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ac0:	4b5e      	ldr	r3, [pc, #376]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac8:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003ad0:	4b5a      	ldr	r3, [pc, #360]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003ae2:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0f1b      	lsrs	r3, r3, #28
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	61fb      	str	r3, [r7, #28]
          break;
 8003af4:	e00f      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b02:	d102      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b06:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003b08:	e005      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b0c:	61fb      	str	r3, [r7, #28]
          break;
 8003b0e:	e002      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
          break;
 8003b14:	bf00      	nop
        }
      }
      break;
 8003b16:	e08a      	b.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003b18:	4b48      	ldr	r3, [pc, #288]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003b2a:	d06f      	beq.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003b32:	d878      	bhi.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b3a:	d03c      	beq.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b42:	d870      	bhi.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b50:	d169      	bne.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b52:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003b54:	61fb      	str	r3, [r7, #28]
          break;
 8003b56:	e069      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b58:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d109      	bne.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b66:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e008      	b.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b7a:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b84:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b8c:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ba0:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	0f1b      	lsrs	r3, r3, #28
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	61fb      	str	r3, [r7, #28]
          break;
 8003bb4:	e03a      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bb6:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc2:	d108      	bne.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e007      	b.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bd6:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0f1b      	lsrs	r3, r3, #28
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	61fb      	str	r3, [r7, #28]
          break;
 8003c0a:	e00f      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c18:	d102      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003c1c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c22:	61fb      	str	r3, [r7, #28]
          break;
 8003c24:	e002      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
          break;
 8003c2a:	bf00      	nop
        }
      }
      break;
 8003c2c:	bf00      	nop
    }
  }
  return frequency;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3724      	adds	r7, #36	; 0x24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	00b71b00 	.word	0x00b71b00
 8003c48:	00bb8000 	.word	0x00bb8000

08003c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b0a6      	sub	sp, #152	; 0x98
 8003c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c72:	4bc8      	ldr	r3, [pc, #800]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	f200 817e 	bhi.w	8003f7c <HAL_RCC_GetSysClockFreq+0x330>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003f7d 	.word	0x08003f7d
 8003c90:	08003f7d 	.word	0x08003f7d
 8003c94:	08003f7d 	.word	0x08003f7d
 8003c98:	08003cc5 	.word	0x08003cc5
 8003c9c:	08003f7d 	.word	0x08003f7d
 8003ca0:	08003f7d 	.word	0x08003f7d
 8003ca4:	08003f7d 	.word	0x08003f7d
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003f7d 	.word	0x08003f7d
 8003cb0:	08003f7d 	.word	0x08003f7d
 8003cb4:	08003f7d 	.word	0x08003f7d
 8003cb8:	08003e37 	.word	0x08003e37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4bb6      	ldr	r3, [pc, #728]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003cc2:	e15f      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc4:	4bb5      	ldr	r3, [pc, #724]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8003cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003cca:	e15b      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ccc:	4bb1      	ldr	r3, [pc, #708]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd8:	4bae      	ldr	r3, [pc, #696]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d031      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce4:	4bab      	ldr	r3, [pc, #684]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	2200      	movs	r2, #0
 8003cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	667b      	str	r3, [r7, #100]	; 0x64
 8003cfc:	4ba7      	ldr	r3, [pc, #668]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8003cfe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d02:	462a      	mov	r2, r5
 8003d04:	fb03 f202 	mul.w	r2, r3, r2
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	4aa2      	ldr	r2, [pc, #648]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8003d14:	4621      	mov	r1, r4
 8003d16:	fba1 1202 	umull	r1, r2, r1, r2
 8003d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003d20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003d22:	4413      	add	r3, r2
 8003d24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003d38:	f7fc fa6a 	bl	8000210 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d46:	e064      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d48:	4b92      	ldr	r3, [pc, #584]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	2200      	movs	r2, #0
 8003d50:	653b      	str	r3, [r7, #80]	; 0x50
 8003d52:	657a      	str	r2, [r7, #84]	; 0x54
 8003d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d64:	4622      	mov	r2, r4
 8003d66:	462b      	mov	r3, r5
 8003d68:	f04f 0000 	mov.w	r0, #0
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	0159      	lsls	r1, r3, #5
 8003d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d76:	0150      	lsls	r0, r2, #5
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	1a51      	subs	r1, r2, r1
 8003d80:	6139      	str	r1, [r7, #16]
 8003d82:	4629      	mov	r1, r5
 8003d84:	eb63 0301 	sbc.w	r3, r3, r1
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d96:	4659      	mov	r1, fp
 8003d98:	018b      	lsls	r3, r1, #6
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da0:	4651      	mov	r1, sl
 8003da2:	018a      	lsls	r2, r1, #6
 8003da4:	4651      	mov	r1, sl
 8003da6:	ebb2 0801 	subs.w	r8, r2, r1
 8003daa:	4659      	mov	r1, fp
 8003dac:	eb63 0901 	sbc.w	r9, r3, r1
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc4:	4690      	mov	r8, r2
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	eb18 0303 	adds.w	r3, r8, r3
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	eb49 0303 	adc.w	r3, r9, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003de4:	4629      	mov	r1, r5
 8003de6:	028b      	lsls	r3, r1, #10
 8003de8:	4621      	mov	r1, r4
 8003dea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dee:	4621      	mov	r1, r4
 8003df0:	028a      	lsls	r2, r1, #10
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfe:	647a      	str	r2, [r7, #68]	; 0x44
 8003e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e04:	f7fc fa04 	bl	8000210 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e12:	4b60      	ldr	r3, [pc, #384]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003e24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e34:	e0a6      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e36:	4b57      	ldr	r3, [pc, #348]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e42:	4b54      	ldr	r3, [pc, #336]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02a      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4e:	4b51      	ldr	r3, [pc, #324]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	2200      	movs	r2, #0
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e60:	2100      	movs	r1, #0
 8003e62:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8003e64:	fb03 f201 	mul.w	r2, r3, r1
 8003e68:	2300      	movs	r3, #0
 8003e6a:	fb00 f303 	mul.w	r3, r0, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8003e72:	fba0 1202 	umull	r1, r2, r0, r2
 8003e76:	677a      	str	r2, [r7, #116]	; 0x74
 8003e78:	460a      	mov	r2, r1
 8003e7a:	673a      	str	r2, [r7, #112]	; 0x70
 8003e7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e7e:	4413      	add	r3, r2
 8003e80:	677b      	str	r3, [r7, #116]	; 0x74
 8003e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e86:	2200      	movs	r2, #0
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e90:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003e94:	f7fc f9bc 	bl	8000210 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ea2:	e05b      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	2200      	movs	r2, #0
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	0159      	lsls	r1, r3, #5
 8003ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed2:	0150      	lsls	r0, r2, #5
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4641      	mov	r1, r8
 8003eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ede:	4649      	mov	r1, r9
 8003ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8003efc:	eb63 050b 	sbc.w	r5, r3, fp
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	00eb      	lsls	r3, r5, #3
 8003f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0e:	00e2      	lsls	r2, r4, #3
 8003f10:	4614      	mov	r4, r2
 8003f12:	461d      	mov	r5, r3
 8003f14:	4643      	mov	r3, r8
 8003f16:	18e3      	adds	r3, r4, r3
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	eb45 0303 	adc.w	r3, r5, r3
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	028b      	lsls	r3, r1, #10
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f38:	4621      	mov	r1, r4
 8003f3a:	028a      	lsls	r2, r1, #10
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f44:	2200      	movs	r2, #0
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	61fa      	str	r2, [r7, #28]
 8003f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f4e:	f7fc f95f 	bl	8000210 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4613      	mov	r3, r2
 8003f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0f1b      	lsrs	r3, r3, #28
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003f82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3798      	adds	r7, #152	; 0x98
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	00b71b00 	.word	0x00b71b00

08003fa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e28d      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8083 	beq.w	80040c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fc0:	4b94      	ldr	r3, [pc, #592]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d019      	beq.n	8004000 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fcc:	4b91      	ldr	r3, [pc, #580]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fd8:	4b8e      	ldr	r3, [pc, #568]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fe4:	d00c      	beq.n	8004000 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe6:	4b8b      	ldr	r3, [pc, #556]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d112      	bne.n	8004018 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffe:	d10b      	bne.n	8004018 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	4b84      	ldr	r3, [pc, #528]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05b      	beq.n	80040c4 <HAL_RCC_OscConfig+0x124>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d157      	bne.n	80040c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e25a      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x90>
 8004022:	4b7c      	ldr	r3, [pc, #496]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a7b      	ldr	r2, [pc, #492]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e01d      	b.n	800406c <HAL_RCC_OscConfig+0xcc>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0xb4>
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a75      	ldr	r2, [pc, #468]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b73      	ldr	r3, [pc, #460]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a72      	ldr	r2, [pc, #456]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0xcc>
 8004054:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6e      	ldr	r2, [pc, #440]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6b      	ldr	r2, [pc, #428]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fc ff76 	bl	8000f64 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800407c:	f7fc ff72 	bl	8000f64 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e21f      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b61      	ldr	r3, [pc, #388]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0xdc>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fc ff62 	bl	8000f64 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fc ff5e 	bl	8000f64 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e20b      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	4b57      	ldr	r3, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x104>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d06f      	beq.n	80041b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040d2:	4b50      	ldr	r3, [pc, #320]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d017      	beq.n	800410e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040de:	4b4d      	ldr	r3, [pc, #308]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d105      	bne.n	80040f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ea:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	d11c      	bne.n	800413c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004102:	4b44      	ldr	r3, [pc, #272]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d116      	bne.n	800413c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x186>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1d3      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4937      	ldr	r1, [pc, #220]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	e03a      	b.n	80041b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004144:	4b34      	ldr	r3, [pc, #208]	; (8004218 <HAL_RCC_OscConfig+0x278>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fc ff0b 	bl	8000f64 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004152:	f7fc ff07 	bl	8000f64 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1b4      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	4b2b      	ldr	r3, [pc, #172]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4925      	ldr	r1, [pc, #148]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <HAL_RCC_OscConfig+0x278>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fc feea 	bl	8000f64 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004194:	f7fc fee6 	bl	8000f64 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e193      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d036      	beq.n	800422c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_RCC_OscConfig+0x27c>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fc feca 	bl	8000f64 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fc fec6 	bl	8000f64 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e173      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_OscConfig+0x274>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x234>
 80041f2:	e01b      	b.n	800422c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCC_OscConfig+0x27c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fa:	f7fc feb3 	bl	8000f64 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	e00e      	b.n	8004220 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004202:	f7fc feaf 	bl	8000f64 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d907      	bls.n	8004220 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e15c      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
 8004214:	40023800 	.word	0x40023800
 8004218:	42470000 	.word	0x42470000
 800421c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	4b8a      	ldr	r3, [pc, #552]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ea      	bne.n	8004202 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8097 	beq.w	8004368 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b83      	ldr	r3, [pc, #524]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	4b7f      	ldr	r3, [pc, #508]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a7e      	ldr	r2, [pc, #504]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	4b7c      	ldr	r3, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426a:	4b79      	ldr	r3, [pc, #484]	; (8004450 <HAL_RCC_OscConfig+0x4b0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d118      	bne.n	80042a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004276:	4b76      	ldr	r3, [pc, #472]	; (8004450 <HAL_RCC_OscConfig+0x4b0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a75      	ldr	r2, [pc, #468]	; (8004450 <HAL_RCC_OscConfig+0x4b0>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004282:	f7fc fe6f 	bl	8000f64 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428a:	f7fc fe6b 	bl	8000f64 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e118      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	4b6c      	ldr	r3, [pc, #432]	; (8004450 <HAL_RCC_OscConfig+0x4b0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x31e>
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	4a65      	ldr	r2, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
 80042bc:	e01c      	b.n	80042f8 <HAL_RCC_OscConfig+0x358>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x340>
 80042c6:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a60      	ldr	r2, [pc, #384]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042cc:	f043 0304 	orr.w	r3, r3, #4
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
 80042d2:	4b5e      	ldr	r3, [pc, #376]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a5d      	ldr	r2, [pc, #372]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0x358>
 80042e0:	4b5a      	ldr	r3, [pc, #360]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	4a59      	ldr	r2, [pc, #356]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	6713      	str	r3, [r2, #112]	; 0x70
 80042ec:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a56      	ldr	r2, [pc, #344]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80042f2:	f023 0304 	bic.w	r3, r3, #4
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fc fe30 	bl	8000f64 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fc fe2c 	bl	8000f64 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0d7      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431e:	4b4b      	ldr	r3, [pc, #300]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ee      	beq.n	8004308 <HAL_RCC_OscConfig+0x368>
 800432a:	e014      	b.n	8004356 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fc fe1a 	bl	8000f64 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fc fe16 	bl	8000f64 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0c1      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	4b40      	ldr	r3, [pc, #256]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ee      	bne.n	8004334 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d105      	bne.n	8004368 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435c:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	4a3a      	ldr	r2, [pc, #232]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80ad 	beq.w	80044cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d060      	beq.n	8004440 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d145      	bne.n	8004412 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b33      	ldr	r3, [pc, #204]	; (8004454 <HAL_RCC_OscConfig+0x4b4>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fc fdea 	bl	8000f64 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004394:	f7fc fde6 	bl	8000f64 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e093      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	019b      	lsls	r3, r3, #6
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	071b      	lsls	r3, r3, #28
 80043de:	491b      	ldr	r1, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_RCC_OscConfig+0x4b4>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fc fdbb 	bl	8000f64 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fc fdb7 	bl	8000f64 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e064      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x452>
 8004410:	e05c      	b.n	80044cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x4b4>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fc fda4 	bl	8000f64 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004420:	f7fc fda0 	bl	8000f64 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e04d      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCC_OscConfig+0x4ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x480>
 800443e:	e045      	b.n	80044cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d107      	bne.n	8004458 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e040      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000
 8004454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004458:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <HAL_RCC_OscConfig+0x538>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d030      	beq.n	80044c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d129      	bne.n	80044c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d122      	bne.n	80044c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800448e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004490:	4293      	cmp	r3, r2
 8004492:	d119      	bne.n	80044c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	3b01      	subs	r3, #1
 80044a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d10f      	bne.n	80044c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07b      	b.n	80045e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d009      	beq.n	8004514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
 8004506:	e005      	b.n	8004514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fbb8 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0104 	and.w	r1, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0210 	and.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e03f      	b.n	8004680 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fc fb8d 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2224      	movs	r2, #36	; 0x24
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004630:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f828 	bl	8004688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004646:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004656:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004666:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800468c:	b0c0      	sub	sp, #256	; 0x100
 800468e:	af00      	add	r7, sp, #0
 8004690:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	68d9      	ldr	r1, [r3, #12]
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	ea40 0301 	orr.w	r3, r0, r1
 80046b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	431a      	orrs	r2, r3
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046e0:	f021 010c 	bic.w	r1, r1, #12
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ee:	430b      	orrs	r3, r1
 80046f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	6999      	ldr	r1, [r3, #24]
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	ea40 0301 	orr.w	r3, r0, r1
 800470e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b8f      	ldr	r3, [pc, #572]	; (8004954 <UART_SetConfig+0x2cc>)
 8004718:	429a      	cmp	r2, r3
 800471a:	d005      	beq.n	8004728 <UART_SetConfig+0xa0>
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b8d      	ldr	r3, [pc, #564]	; (8004958 <UART_SetConfig+0x2d0>)
 8004724:	429a      	cmp	r2, r3
 8004726:	d104      	bne.n	8004732 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe fd0a 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 800472c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004730:	e003      	b.n	800473a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004732:	f7fe fcf1 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8004736:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004744:	f040 810c 	bne.w	8004960 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474c:	2200      	movs	r2, #0
 800474e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004752:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004756:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	1891      	adds	r1, r2, r2
 8004760:	65b9      	str	r1, [r7, #88]	; 0x58
 8004762:	415b      	adcs	r3, r3
 8004764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800476a:	4621      	mov	r1, r4
 800476c:	eb12 0801 	adds.w	r8, r2, r1
 8004770:	4629      	mov	r1, r5
 8004772:	eb43 0901 	adc.w	r9, r3, r1
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800478a:	4690      	mov	r8, r2
 800478c:	4699      	mov	r9, r3
 800478e:	4623      	mov	r3, r4
 8004790:	eb18 0303 	adds.w	r3, r8, r3
 8004794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004798:	462b      	mov	r3, r5
 800479a:	eb49 0303 	adc.w	r3, r9, r3
 800479e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047b6:	460b      	mov	r3, r1
 80047b8:	18db      	adds	r3, r3, r3
 80047ba:	653b      	str	r3, [r7, #80]	; 0x50
 80047bc:	4613      	mov	r3, r2
 80047be:	eb42 0303 	adc.w	r3, r2, r3
 80047c2:	657b      	str	r3, [r7, #84]	; 0x54
 80047c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047cc:	f7fb fd20 	bl	8000210 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <UART_SetConfig+0x2d4>)
 80047d6:	fba3 2302 	umull	r2, r3, r3, r2
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	011c      	lsls	r4, r3, #4
 80047de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	1891      	adds	r1, r2, r2
 80047f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047f8:	415b      	adcs	r3, r3
 80047fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004800:	4641      	mov	r1, r8
 8004802:	eb12 0a01 	adds.w	sl, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb43 0b01 	adc.w	fp, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004818:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800481c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004820:	4692      	mov	sl, r2
 8004822:	469b      	mov	fp, r3
 8004824:	4643      	mov	r3, r8
 8004826:	eb1a 0303 	adds.w	r3, sl, r3
 800482a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800482e:	464b      	mov	r3, r9
 8004830:	eb4b 0303 	adc.w	r3, fp, r3
 8004834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004844:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004848:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800484c:	460b      	mov	r3, r1
 800484e:	18db      	adds	r3, r3, r3
 8004850:	643b      	str	r3, [r7, #64]	; 0x40
 8004852:	4613      	mov	r3, r2
 8004854:	eb42 0303 	adc.w	r3, r2, r3
 8004858:	647b      	str	r3, [r7, #68]	; 0x44
 800485a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800485e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004862:	f7fb fcd5 	bl	8000210 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4611      	mov	r1, r2
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <UART_SetConfig+0x2d4>)
 800486e:	fba3 2301 	umull	r2, r3, r3, r1
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2264      	movs	r2, #100	; 0x64
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	1acb      	subs	r3, r1, r3
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004882:	4b36      	ldr	r3, [pc, #216]	; (800495c <UART_SetConfig+0x2d4>)
 8004884:	fba3 2302 	umull	r2, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004890:	441c      	add	r4, r3
 8004892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800489c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80048ac:	415b      	adcs	r3, r3
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b4:	4641      	mov	r1, r8
 80048b6:	1851      	adds	r1, r2, r1
 80048b8:	6339      	str	r1, [r7, #48]	; 0x30
 80048ba:	4649      	mov	r1, r9
 80048bc:	414b      	adcs	r3, r1
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048cc:	4659      	mov	r1, fp
 80048ce:	00cb      	lsls	r3, r1, #3
 80048d0:	4651      	mov	r1, sl
 80048d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d6:	4651      	mov	r1, sl
 80048d8:	00ca      	lsls	r2, r1, #3
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	4642      	mov	r2, r8
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e8:	464b      	mov	r3, r9
 80048ea:	460a      	mov	r2, r1
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004900:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004908:	460b      	mov	r3, r1
 800490a:	18db      	adds	r3, r3, r3
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	4613      	mov	r3, r2
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800491a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800491e:	f7fb fc77 	bl	8000210 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <UART_SetConfig+0x2d4>)
 8004928:	fba3 1302 	umull	r1, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2164      	movs	r1, #100	; 0x64
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	3332      	adds	r3, #50	; 0x32
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <UART_SetConfig+0x2d4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 0207 	and.w	r2, r3, #7
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4422      	add	r2, r4
 800494e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004950:	e105      	b.n	8004b5e <UART_SetConfig+0x4d6>
 8004952:	bf00      	nop
 8004954:	40011000 	.word	0x40011000
 8004958:	40011400 	.word	0x40011400
 800495c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800496a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800496e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004972:	4642      	mov	r2, r8
 8004974:	464b      	mov	r3, r9
 8004976:	1891      	adds	r1, r2, r2
 8004978:	6239      	str	r1, [r7, #32]
 800497a:	415b      	adcs	r3, r3
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004982:	4641      	mov	r1, r8
 8004984:	1854      	adds	r4, r2, r1
 8004986:	4649      	mov	r1, r9
 8004988:	eb43 0501 	adc.w	r5, r3, r1
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	00eb      	lsls	r3, r5, #3
 8004996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499a:	00e2      	lsls	r2, r4, #3
 800499c:	4614      	mov	r4, r2
 800499e:	461d      	mov	r5, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	18e3      	adds	r3, r4, r3
 80049a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049a8:	464b      	mov	r3, r9
 80049aa:	eb45 0303 	adc.w	r3, r5, r3
 80049ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ce:	4629      	mov	r1, r5
 80049d0:	008b      	lsls	r3, r1, #2
 80049d2:	4621      	mov	r1, r4
 80049d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d8:	4621      	mov	r1, r4
 80049da:	008a      	lsls	r2, r1, #2
 80049dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049e0:	f7fb fc16 	bl	8000210 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4b60      	ldr	r3, [pc, #384]	; (8004b6c <UART_SetConfig+0x4e4>)
 80049ea:	fba3 2302 	umull	r2, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	011c      	lsls	r4, r3, #4
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	61b9      	str	r1, [r7, #24]
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a14:	4641      	mov	r1, r8
 8004a16:	1851      	adds	r1, r2, r1
 8004a18:	6139      	str	r1, [r7, #16]
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	00cb      	lsls	r3, r1, #3
 8004a30:	4651      	mov	r1, sl
 8004a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a36:	4651      	mov	r1, sl
 8004a38:	00ca      	lsls	r2, r1, #3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4642      	mov	r2, r8
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a48:	464b      	mov	r3, r9
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	008b      	lsls	r3, r1, #2
 8004a70:	4641      	mov	r1, r8
 8004a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a76:	4641      	mov	r1, r8
 8004a78:	008a      	lsls	r2, r1, #2
 8004a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a7e:	f7fb fbc7 	bl	8000210 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	2164      	movs	r1, #100	; 0x64
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	3332      	adds	r3, #50	; 0x32
 8004a9a:	4a34      	ldr	r2, [pc, #208]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa6:	441c      	add	r4, r3
 8004aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aac:	2200      	movs	r2, #0
 8004aae:	673b      	str	r3, [r7, #112]	; 0x70
 8004ab0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ab2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	464b      	mov	r3, r9
 8004aba:	1891      	adds	r1, r2, r2
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	415b      	adcs	r3, r3
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	1851      	adds	r1, r2, r1
 8004aca:	6039      	str	r1, [r7, #0]
 8004acc:	4649      	mov	r1, r9
 8004ace:	414b      	adcs	r3, r1
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ade:	4659      	mov	r1, fp
 8004ae0:	00cb      	lsls	r3, r1, #3
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae8:	4651      	mov	r1, sl
 8004aea:	00ca      	lsls	r2, r1, #3
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	4603      	mov	r3, r0
 8004af2:	4642      	mov	r2, r8
 8004af4:	189b      	adds	r3, r3, r2
 8004af6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af8:	464b      	mov	r3, r9
 8004afa:	460a      	mov	r2, r1
 8004afc:	eb42 0303 	adc.w	r3, r2, r3
 8004b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	008b      	lsls	r3, r1, #2
 8004b1e:	4641      	mov	r1, r8
 8004b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b24:	4641      	mov	r1, r8
 8004b26:	008a      	lsls	r2, r1, #2
 8004b28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b2c:	f7fb fb70 	bl	8000210 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004b36:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	2164      	movs	r1, #100	; 0x64
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	3332      	adds	r3, #50	; 0x32
 8004b48:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	f003 020f 	and.w	r2, r3, #15
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4422      	add	r2, r4
 8004b5c:	609a      	str	r2, [r3, #8]
}
 8004b5e:	bf00      	nop
 8004b60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b64:	46bd      	mov	sp, r7
 8004b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6a:	bf00      	nop
 8004b6c:	51eb851f 	.word	0x51eb851f

08004b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b70:	b084      	sub	sp, #16
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	f107 001c 	add.w	r0, r7, #28
 8004b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d122      	bne.n	8004bce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d105      	bne.n	8004bc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f001 fbe8 	bl	8006398 <USB_CoreReset>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	e01a      	b.n	8004c04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f001 fbdc 	bl	8006398 <USB_CoreReset>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8004bf6:	e005      	b.n	8004c04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10b      	bne.n	8004c22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f043 0206 	orr.w	r2, r3, #6
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c2e:	b004      	add	sp, #16
 8004c30:	4770      	bx	lr
	...

08004c34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d165      	bne.n	8004d14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a41      	ldr	r2, [pc, #260]	; (8004d50 <USB_SetTurnaroundTime+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d906      	bls.n	8004c5e <USB_SetTurnaroundTime+0x2a>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <USB_SetTurnaroundTime+0x120>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d202      	bcs.n	8004c5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c58:	230f      	movs	r3, #15
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e062      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a3c      	ldr	r2, [pc, #240]	; (8004d54 <USB_SetTurnaroundTime+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d306      	bcc.n	8004c74 <USB_SetTurnaroundTime+0x40>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4a3b      	ldr	r2, [pc, #236]	; (8004d58 <USB_SetTurnaroundTime+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d202      	bcs.n	8004c74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c6e:	230e      	movs	r3, #14
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e057      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <USB_SetTurnaroundTime+0x124>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d306      	bcc.n	8004c8a <USB_SetTurnaroundTime+0x56>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a37      	ldr	r2, [pc, #220]	; (8004d5c <USB_SetTurnaroundTime+0x128>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d202      	bcs.n	8004c8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c84:	230d      	movs	r3, #13
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e04c      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a33      	ldr	r2, [pc, #204]	; (8004d5c <USB_SetTurnaroundTime+0x128>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d306      	bcc.n	8004ca0 <USB_SetTurnaroundTime+0x6c>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4a32      	ldr	r2, [pc, #200]	; (8004d60 <USB_SetTurnaroundTime+0x12c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d802      	bhi.n	8004ca0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e041      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <USB_SetTurnaroundTime+0x12c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d906      	bls.n	8004cb6 <USB_SetTurnaroundTime+0x82>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4a2e      	ldr	r2, [pc, #184]	; (8004d64 <USB_SetTurnaroundTime+0x130>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d802      	bhi.n	8004cb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004cb0:	230b      	movs	r3, #11
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e036      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a2a      	ldr	r2, [pc, #168]	; (8004d64 <USB_SetTurnaroundTime+0x130>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d906      	bls.n	8004ccc <USB_SetTurnaroundTime+0x98>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4a29      	ldr	r2, [pc, #164]	; (8004d68 <USB_SetTurnaroundTime+0x134>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d802      	bhi.n	8004ccc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e02b      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <USB_SetTurnaroundTime+0x134>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d906      	bls.n	8004ce2 <USB_SetTurnaroundTime+0xae>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <USB_SetTurnaroundTime+0x138>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d202      	bcs.n	8004ce2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cdc:	2309      	movs	r3, #9
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e020      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <USB_SetTurnaroundTime+0x138>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d306      	bcc.n	8004cf8 <USB_SetTurnaroundTime+0xc4>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4a20      	ldr	r2, [pc, #128]	; (8004d70 <USB_SetTurnaroundTime+0x13c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d802      	bhi.n	8004cf8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	e015      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <USB_SetTurnaroundTime+0x13c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d906      	bls.n	8004d0e <USB_SetTurnaroundTime+0xda>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <USB_SetTurnaroundTime+0x140>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d202      	bcs.n	8004d0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d08:	2307      	movs	r3, #7
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e00a      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d0e:	2306      	movs	r3, #6
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e007      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d1a:	2309      	movs	r3, #9
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e001      	b.n	8004d24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d20:	2309      	movs	r3, #9
 8004d22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	00d8acbf 	.word	0x00d8acbf
 8004d54:	00e4e1c0 	.word	0x00e4e1c0
 8004d58:	00f42400 	.word	0x00f42400
 8004d5c:	01067380 	.word	0x01067380
 8004d60:	011a499f 	.word	0x011a499f
 8004d64:	01312cff 	.word	0x01312cff
 8004d68:	014ca43f 	.word	0x014ca43f
 8004d6c:	016e3600 	.word	0x016e3600
 8004d70:	01a6ab1f 	.word	0x01a6ab1f
 8004d74:	01e84800 	.word	0x01e84800

08004d78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 0201 	bic.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d115      	bne.n	8004e0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dea:	2001      	movs	r0, #1
 8004dec:	f7fc f8c6 	bl	8000f7c <HAL_Delay>
      ms++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3301      	adds	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f001 fa3f 	bl	800627a <USB_GetMode>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d01e      	beq.n	8004e40 <USB_SetCurrentMode+0x84>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b31      	cmp	r3, #49	; 0x31
 8004e06:	d9f0      	bls.n	8004dea <USB_SetCurrentMode+0x2e>
 8004e08:	e01a      	b.n	8004e40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d115      	bne.n	8004e3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f7fc f8ad 	bl	8000f7c <HAL_Delay>
      ms++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 fa26 	bl	800627a <USB_GetMode>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <USB_SetCurrentMode+0x84>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b31      	cmp	r3, #49	; 0x31
 8004e38:	d9f0      	bls.n	8004e1c <USB_SetCurrentMode+0x60>
 8004e3a:	e001      	b.n	8004e40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e005      	b.n	8004e4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b32      	cmp	r3, #50	; 0x32
 8004e44:	d101      	bne.n	8004e4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e54:	b084      	sub	sp, #16
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	e009      	b.n	8004e88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	3340      	adds	r3, #64	; 0x40
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	2200      	movs	r2, #0
 8004e80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3301      	adds	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b0e      	cmp	r3, #14
 8004e8c:	d9f2      	bls.n	8004e74 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11c      	bne.n	8004ece <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea2:	f043 0302 	orr.w	r3, r3, #2
 8004ea6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e005      	b.n	8004eda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	4619      	mov	r1, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	680b      	ldr	r3, [r1, #0]
 8004ef8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10c      	bne.n	8004f1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d104      	bne.n	8004f10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f06:	2100      	movs	r1, #0
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f965 	bl	80051d8 <USB_SetDevSpeed>
 8004f0e:	e008      	b.n	8004f22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f10:	2101      	movs	r1, #1
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f960 	bl	80051d8 <USB_SetDevSpeed>
 8004f18:	e003      	b.n	8004f22 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f1a:	2103      	movs	r1, #3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f95b 	bl	80051d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f22:	2110      	movs	r1, #16
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8f3 	bl	8005110 <USB_FlushTxFifo>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f91f 	bl	8005178 <USB_FlushRxFifo>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	461a      	mov	r2, r3
 8004f64:	2300      	movs	r3, #0
 8004f66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	e043      	b.n	8004ff6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f84:	d118      	bne.n	8004fb8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	e013      	b.n	8004fca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e008      	b.n	8004fca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3b7      	bcc.n	8004f6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	e043      	b.n	800508c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501a:	d118      	bne.n	800504e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e013      	b.n	8005060 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	461a      	mov	r2, r3
 8005046:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	e008      	b.n	8005060 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	461a      	mov	r2, r3
 8005080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3301      	adds	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d3b7      	bcc.n	8005004 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f043 0210 	orr.w	r2, r3, #16
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <USB_DevInit+0x2b8>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f043 0208 	orr.w	r2, r3, #8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005108:	b004      	add	sp, #16
 800510a:	4770      	bx	lr
 800510c:	803c3800 	.word	0x803c3800

08005110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a13      	ldr	r2, [pc, #76]	; (8005174 <USB_FlushTxFifo+0x64>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e01b      	b.n	8005168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	daf2      	bge.n	800511e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	019b      	lsls	r3, r3, #6
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a08      	ldr	r2, [pc, #32]	; (8005174 <USB_FlushTxFifo+0x64>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e006      	b.n	8005168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b20      	cmp	r3, #32
 8005164:	d0f0      	beq.n	8005148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	00030d40 	.word	0x00030d40

08005178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <USB_FlushRxFifo+0x5c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e018      	b.n	80051c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	daf2      	bge.n	8005184 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2210      	movs	r2, #16
 80051a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <USB_FlushRxFifo+0x5c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e006      	b.n	80051c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d0f0      	beq.n	80051a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	00030d40 	.word	0x00030d40

080051d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051f8:	4313      	orrs	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
 800522e:	e00a      	b.n	8005246 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d002      	beq.n	800523c <USB_GetDevSpeed+0x32>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b06      	cmp	r3, #6
 800523a:	d102      	bne.n	8005242 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800523c:	2302      	movs	r3, #2
 800523e:	75fb      	strb	r3, [r7, #23]
 8005240:	e001      	b.n	8005246 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005242:	230f      	movs	r3, #15
 8005244:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
}
 8005248:	4618      	mov	r0, r3
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d13a      	bne.n	80052e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	68f9      	ldr	r1, [r7, #12]
 800528a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800528e:	4313      	orrs	r3, r2
 8005290:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d155      	bne.n	8005354 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	791b      	ldrb	r3, [r3, #4]
 80052c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	059b      	lsls	r3, r3, #22
 80052ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052cc:	4313      	orrs	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e036      	b.n	8005354 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	2101      	movs	r1, #1
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005304:	4313      	orrs	r3, r2
 8005306:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d11a      	bne.n	8005354 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	791b      	ldrb	r3, [r3, #4]
 8005338:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800533a:	430b      	orrs	r3, r1
 800533c:	4313      	orrs	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005352:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d161      	bne.n	8005444 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005396:	d11f      	bne.n	80053d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	2101      	movs	r1, #1
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f8:	4013      	ands	r3, r2
 80053fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541c:	4013      	ands	r3, r2
 800541e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0159      	lsls	r1, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	440b      	add	r3, r1
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	4619      	mov	r1, r3
 800543c:	4b35      	ldr	r3, [pc, #212]	; (8005514 <USB_DeactivateEndpoint+0x1b0>)
 800543e:	4013      	ands	r3, r2
 8005440:	600b      	str	r3, [r1, #0]
 8005442:	e060      	b.n	8005506 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545a:	d11f      	bne.n	800549c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800547a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800549a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	43db      	mvns	r3, r3
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054bc:	4013      	ands	r3, r2
 80054be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2101      	movs	r1, #1
 80054d2:	fa01 f303 	lsl.w	r3, r1, r3
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	43db      	mvns	r3, r3
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e0:	4013      	ands	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0159      	lsls	r1, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	440b      	add	r3, r1
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	4619      	mov	r1, r3
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <USB_DeactivateEndpoint+0x1b4>)
 8005502:	4013      	ands	r3, r2
 8005504:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	ec337800 	.word	0xec337800
 8005518:	eff37800 	.word	0xeff37800

0800551c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 815c 	bne.w	80057f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d132      	bne.n	80055ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005564:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005568:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	440a      	add	r2, r1
 8005580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a4:	0cdb      	lsrs	r3, r3, #19
 80055a6:	04db      	lsls	r3, r3, #19
 80055a8:	6113      	str	r3, [r2, #16]
 80055aa:	e074      	b.n	8005696 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c6:	0cdb      	lsrs	r3, r3, #19
 80055c8:	04db      	lsls	r3, r3, #19
 80055ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6999      	ldr	r1, [r3, #24]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	440b      	add	r3, r1
 8005608:	1e59      	subs	r1, r3, #1
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005612:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005614:	4b9d      	ldr	r3, [pc, #628]	; (800588c <USB_EPStartXfer+0x370>)
 8005616:	400b      	ands	r3, r1
 8005618:	69b9      	ldr	r1, [r7, #24]
 800561a:	0148      	lsls	r0, r1, #5
 800561c:	69f9      	ldr	r1, [r7, #28]
 800561e:	4401      	add	r1, r0
 8005620:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005624:	4313      	orrs	r3, r2
 8005626:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563e:	69b9      	ldr	r1, [r7, #24]
 8005640:	0148      	lsls	r0, r1, #5
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	4401      	add	r1, r0
 8005646:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800564a:	4313      	orrs	r3, r2
 800564c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	791b      	ldrb	r3, [r3, #4]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d11f      	bne.n	8005696 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005674:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005694:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d14b      	bne.n	8005734 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	791b      	ldrb	r3, [r3, #4]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d128      	bne.n	8005712 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e00f      	b.n	8005712 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e133      	b.n	800599c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005752:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	791b      	ldrb	r3, [r3, #4]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d015      	beq.n	8005788 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 811b 	beq.w	800599c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	2101      	movs	r1, #1
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	69f9      	ldr	r1, [r7, #28]
 800577e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005782:	4313      	orrs	r3, r2
 8005784:	634b      	str	r3, [r1, #52]	; 0x34
 8005786:	e109      	b.n	800599c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d110      	bne.n	80057ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e00f      	b.n	80057da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6919      	ldr	r1, [r3, #16]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	b298      	uxth	r0, r3
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4603      	mov	r3, r0
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fade 	bl	8005db0 <USB_WritePacket>
 80057f4:	e0d2      	b.n	800599c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005810:	0cdb      	lsrs	r3, r3, #19
 8005812:	04db      	lsls	r3, r3, #19
 8005814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005838:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d126      	bne.n	8005890 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	0148      	lsls	r0, r1, #5
 800585c:	69f9      	ldr	r1, [r7, #28]
 800585e:	4401      	add	r1, r0
 8005860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005864:	4313      	orrs	r3, r2
 8005866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005886:	6113      	str	r3, [r2, #16]
 8005888:	e03a      	b.n	8005900 <USB_EPStartXfer+0x3e4>
 800588a:	bf00      	nop
 800588c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4413      	add	r3, r2
 800589a:	1e5a      	subs	r2, r3, #1
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	8afa      	ldrh	r2, [r7, #22]
 80058ac:	fb03 f202 	mul.w	r2, r3, r2
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	8afb      	ldrh	r3, [r7, #22]
 80058c4:	04d9      	lsls	r1, r3, #19
 80058c6:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <USB_EPStartXfer+0x48c>)
 80058c8:	400b      	ands	r3, r1
 80058ca:	69b9      	ldr	r1, [r7, #24]
 80058cc:	0148      	lsls	r0, r1, #5
 80058ce:	69f9      	ldr	r1, [r7, #28]
 80058d0:	4401      	add	r1, r0
 80058d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058d6:	4313      	orrs	r3, r2
 80058d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	0148      	lsls	r0, r1, #5
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	4401      	add	r1, r0
 80058f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058fc:	4313      	orrs	r3, r2
 80058fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d10d      	bne.n	8005922 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6919      	ldr	r1, [r3, #16]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	460a      	mov	r2, r1
 8005920:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	791b      	ldrb	r3, [r3, #4]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d128      	bne.n	800597c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d110      	bne.n	800595c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e00f      	b.n	800597c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005996:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800599a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	1ff80000 	.word	0x1ff80000

080059ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	f040 80ce 	bne.w	8005b6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d132      	bne.n	8005a3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a34:	0cdb      	lsrs	r3, r3, #19
 8005a36:	04db      	lsls	r3, r3, #19
 8005a38:	6113      	str	r3, [r2, #16]
 8005a3a:	e04e      	b.n	8005ada <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a56:	0cdb      	lsrs	r3, r3, #19
 8005a58:	04db      	lsls	r3, r3, #19
 8005a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d903      	bls.n	8005a94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aca:	6939      	ldr	r1, [r7, #16]
 8005acc:	0148      	lsls	r0, r1, #5
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	4401      	add	r1, r0
 8005ad2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d11e      	bne.n	8005b1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	461a      	mov	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	e097      	b.n	8005c4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8083 	beq.w	8005c4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	6979      	ldr	r1, [r7, #20]
 8005b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b64:	4313      	orrs	r3, r2
 8005b66:	634b      	str	r3, [r1, #52]	; 0x34
 8005b68:	e071      	b.n	8005c4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	0cdb      	lsrs	r3, r3, #19
 8005b86:	04db      	lsls	r3, r3, #19
 8005b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfc:	6939      	ldr	r1, [r7, #16]
 8005bfe:	0148      	lsls	r0, r1, #5
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	4401      	add	r1, r0
 8005c04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d10d      	bne.n	8005c2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6919      	ldr	r1, [r3, #16]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d14a      	bne.n	8005d10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c92:	f040 8086 	bne.w	8005da2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d902      	bls.n	8005cf4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf2:	e056      	b.n	8005da2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0c:	d0e7      	beq.n	8005cde <USB_EPStopXfer+0x82>
 8005d0e:	e048      	b.n	8005da2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d28:	d13b      	bne.n	8005da2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	7812      	ldrb	r2, [r2, #0]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	7812      	ldrb	r2, [r2, #0]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d902      	bls.n	8005d88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
          break;
 8005d86:	e00c      	b.n	8005da2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da0:	d0e7      	beq.n	8005d72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	; 0x24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4611      	mov	r1, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	71fb      	strb	r3, [r7, #7]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d123      	bne.n	8005e1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dd6:	88bb      	ldrh	r3, [r7, #4]
 8005dd8:	3303      	adds	r3, #3
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e018      	b.n	8005e16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	031a      	lsls	r2, r3, #12
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	461a      	mov	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3301      	adds	r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	3301      	adds	r3, #1
 8005e08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d3e2      	bcc.n	8005de4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3724      	adds	r7, #36	; 0x24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b08b      	sub	sp, #44	; 0x2c
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e52:	2300      	movs	r3, #0
 8005e54:	623b      	str	r3, [r7, #32]
 8005e56:	e014      	b.n	8005e82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	3301      	adds	r3, #1
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	3301      	adds	r3, #1
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	3301      	adds	r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	623b      	str	r3, [r7, #32]
 8005e82:	6a3a      	ldr	r2, [r7, #32]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d3e6      	bcc.n	8005e58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e8a:	8bfb      	ldrh	r3, [r7, #30]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01e      	beq.n	8005ece <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f107 0310 	add.w	r3, r7, #16
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	701a      	strb	r2, [r3, #0]
      i++;
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ec2:	8bfb      	ldrh	r3, [r7, #30]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1ea      	bne.n	8005ea4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	372c      	adds	r7, #44	; 0x2c
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d12c      	bne.n	8005f52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db12      	blt.n	8005f30 <USB_EPSetStall+0x54>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	e02b      	b.n	8005faa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	db12      	blt.n	8005f8a <USB_EPSetStall+0xae>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00f      	beq.n	8005f8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fa8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d128      	bne.n	8006026 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ff2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	791b      	ldrb	r3, [r3, #4]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d003      	beq.n	8006004 <USB_EPClearStall+0x4c>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	791b      	ldrb	r3, [r3, #4]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d138      	bne.n	8006076 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	e027      	b.n	8006076 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	440a      	add	r2, r1
 800603c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006040:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006044:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	791b      	ldrb	r3, [r3, #4]
 800604a:	2b03      	cmp	r3, #3
 800604c:	d003      	beq.n	8006056 <USB_EPClearStall+0x9e>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	791b      	ldrb	r3, [r3, #4]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d10f      	bne.n	8006076 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006074:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060b8:	68f9      	ldr	r1, [r7, #12]
 80060ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060fe:	f023 0302 	bic.w	r3, r3, #2
 8006102:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006140:	f043 0302 	orr.w	r3, r3, #2
 8006144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4013      	ands	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800616c:	68fb      	ldr	r3, [r7, #12]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	4013      	ands	r3, r2
 800619c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	0c1b      	lsrs	r3, r3, #16
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	4013      	ands	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	b29b      	uxth	r3, r3
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006210:	68bb      	ldr	r3, [r7, #8]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800621e:	b480      	push	{r7}
 8006220:	b087      	sub	sp, #28
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	fa22 f303 	lsr.w	r3, r2, r3
 800624e:	01db      	lsls	r3, r3, #7
 8006250:	b2db      	uxtb	r3, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4013      	ands	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800626c:	68bb      	ldr	r3, [r7, #8]
}
 800626e:	4618      	mov	r0, r3
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0301 	and.w	r3, r3, #1
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062b4:	f023 0307 	bic.w	r3, r3, #7
 80062b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	460b      	mov	r3, r1
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	333c      	adds	r3, #60	; 0x3c
 80062f2:	3304      	adds	r3, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4a26      	ldr	r2, [pc, #152]	; (8006394 <USB_EP0_OutStart+0xb8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d90a      	bls.n	8006316 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800630c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006310:	d101      	bne.n	8006316 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	e037      	b.n	8006386 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	461a      	mov	r2, r3
 800631e:	2300      	movs	r3, #0
 8006320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006344:	f043 0318 	orr.w	r3, r3, #24
 8006348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006358:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800635c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d10f      	bne.n	8006384 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006382:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	4f54300a 	.word	0x4f54300a

08006398 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a13      	ldr	r2, [pc, #76]	; (80063fc <USB_CoreReset+0x64>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e01b      	b.n	80063ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	daf2      	bge.n	80063a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3301      	adds	r3, #1
 80063d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a09      	ldr	r2, [pc, #36]	; (80063fc <USB_CoreReset+0x64>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e006      	b.n	80063ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d0f0      	beq.n	80063ce <USB_CoreReset+0x36>

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	00030d40 	.word	0x00030d40

08006400 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800640c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006410:	f005 fa88 	bl	800b924 <USBD_static_malloc>
 8006414:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32b0      	adds	r2, #176	; 0xb0
 8006426:	2100      	movs	r1, #0
 8006428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800642c:	2302      	movs	r3, #2
 800642e:	e0d4      	b.n	80065da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006430:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006434:	2100      	movs	r1, #0
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f005 faec 	bl	800ba14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	32b0      	adds	r2, #176	; 0xb0
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	32b0      	adds	r2, #176	; 0xb0
 8006456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	7c1b      	ldrb	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d138      	bne.n	80064da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006468:	4b5e      	ldr	r3, [pc, #376]	; (80065e4 <USBD_CDC_Init+0x1e4>)
 800646a:	7819      	ldrb	r1, [r3, #0]
 800646c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006470:	2202      	movs	r2, #2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f005 f8e5 	bl	800b642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006478:	4b5a      	ldr	r3, [pc, #360]	; (80065e4 <USBD_CDC_Init+0x1e4>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3324      	adds	r3, #36	; 0x24
 800648e:	2201      	movs	r2, #1
 8006490:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006492:	4b55      	ldr	r3, [pc, #340]	; (80065e8 <USBD_CDC_Init+0x1e8>)
 8006494:	7819      	ldrb	r1, [r3, #0]
 8006496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649a:	2202      	movs	r2, #2
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f005 f8d0 	bl	800b642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064a2:	4b51      	ldr	r3, [pc, #324]	; (80065e8 <USBD_CDC_Init+0x1e8>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f003 020f 	and.w	r2, r3, #15
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064ba:	2201      	movs	r2, #1
 80064bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064be:	4b4b      	ldr	r3, [pc, #300]	; (80065ec <USBD_CDC_Init+0x1ec>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f003 020f 	and.w	r2, r3, #15
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	4613      	mov	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	3326      	adds	r3, #38	; 0x26
 80064d4:	2210      	movs	r2, #16
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	e035      	b.n	8006546 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064da:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <USBD_CDC_Init+0x1e4>)
 80064dc:	7819      	ldrb	r1, [r3, #0]
 80064de:	2340      	movs	r3, #64	; 0x40
 80064e0:	2202      	movs	r2, #2
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f005 f8ad 	bl	800b642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064e8:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <USBD_CDC_Init+0x1e4>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f003 020f 	and.w	r2, r3, #15
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3324      	adds	r3, #36	; 0x24
 80064fe:	2201      	movs	r2, #1
 8006500:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006502:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <USBD_CDC_Init+0x1e8>)
 8006504:	7819      	ldrb	r1, [r3, #0]
 8006506:	2340      	movs	r3, #64	; 0x40
 8006508:	2202      	movs	r2, #2
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f005 f899 	bl	800b642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006510:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <USBD_CDC_Init+0x1e8>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 020f 	and.w	r2, r3, #15
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006528:	2201      	movs	r2, #1
 800652a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800652c:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <USBD_CDC_Init+0x1ec>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	3326      	adds	r3, #38	; 0x26
 8006542:	2210      	movs	r2, #16
 8006544:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006546:	4b29      	ldr	r3, [pc, #164]	; (80065ec <USBD_CDC_Init+0x1ec>)
 8006548:	7819      	ldrb	r1, [r3, #0]
 800654a:	2308      	movs	r3, #8
 800654c:	2203      	movs	r2, #3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f005 f877 	bl	800b642 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006554:	4b25      	ldr	r3, [pc, #148]	; (80065ec <USBD_CDC_Init+0x1ec>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f003 020f 	and.w	r2, r3, #15
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	2201      	movs	r2, #1
 800656c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	33b0      	adds	r3, #176	; 0xb0
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80065a4:	2302      	movs	r3, #2
 80065a6:	e018      	b.n	80065da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7c1b      	ldrb	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065b0:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <USBD_CDC_Init+0x1e8>)
 80065b2:	7819      	ldrb	r1, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f005 f92e 	bl	800b820 <USBD_LL_PrepareReceive>
 80065c4:	e008      	b.n	80065d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <USBD_CDC_Init+0x1e8>)
 80065c8:	7819      	ldrb	r1, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f005 f924 	bl	800b820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000093 	.word	0x20000093
 80065e8:	20000094 	.word	0x20000094
 80065ec:	20000095 	.word	0x20000095

080065f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80065fc:	4b3a      	ldr	r3, [pc, #232]	; (80066e8 <USBD_CDC_DeInit+0xf8>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f005 f843 	bl	800b68e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006608:	4b37      	ldr	r3, [pc, #220]	; (80066e8 <USBD_CDC_DeInit+0xf8>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	f003 020f 	and.w	r2, r3, #15
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	3324      	adds	r3, #36	; 0x24
 800661e:	2200      	movs	r2, #0
 8006620:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006622:	4b32      	ldr	r3, [pc, #200]	; (80066ec <USBD_CDC_DeInit+0xfc>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f005 f830 	bl	800b68e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800662e:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <USBD_CDC_DeInit+0xfc>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f003 020f 	and.w	r2, r3, #15
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006646:	2200      	movs	r2, #0
 8006648:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800664a:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <USBD_CDC_DeInit+0x100>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f005 f81c 	bl	800b68e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006656:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <USBD_CDC_DeInit+0x100>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	f003 020f 	and.w	r2, r3, #15
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	3324      	adds	r3, #36	; 0x24
 800666c:	2200      	movs	r2, #0
 800666e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006670:	4b1f      	ldr	r3, [pc, #124]	; (80066f0 <USBD_CDC_DeInit+0x100>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	3326      	adds	r3, #38	; 0x26
 8006686:	2200      	movs	r2, #0
 8006688:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	32b0      	adds	r2, #176	; 0xb0
 8006694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01f      	beq.n	80066dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	33b0      	adds	r3, #176	; 0xb0
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	32b0      	adds	r2, #176	; 0xb0
 80066ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066be:	4618      	mov	r0, r3
 80066c0:	f005 f93e 	bl	800b940 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32b0      	adds	r2, #176	; 0xb0
 80066ce:	2100      	movs	r1, #0
 80066d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000093 	.word	0x20000093
 80066ec:	20000094 	.word	0x20000094
 80066f0:	20000095 	.word	0x20000095

080066f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	32b0      	adds	r2, #176	; 0xb0
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006720:	2303      	movs	r3, #3
 8006722:	e0bf      	b.n	80068a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800672c:	2b00      	cmp	r3, #0
 800672e:	d050      	beq.n	80067d2 <USBD_CDC_Setup+0xde>
 8006730:	2b20      	cmp	r3, #32
 8006732:	f040 80af 	bne.w	8006894 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d03a      	beq.n	80067b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b25b      	sxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	da1b      	bge.n	8006780 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	33b0      	adds	r3, #176	; 0xb0
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800675e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	88d2      	ldrh	r2, [r2, #6]
 8006764:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	88db      	ldrh	r3, [r3, #6]
 800676a:	2b07      	cmp	r3, #7
 800676c:	bf28      	it	cs
 800676e:	2307      	movcs	r3, #7
 8006770:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	89fa      	ldrh	r2, [r7, #14]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fd6d 	bl	8008258 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800677e:	e090      	b.n	80068a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	785a      	ldrb	r2, [r3, #1]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	88db      	ldrh	r3, [r3, #6]
 800678e:	2b3f      	cmp	r3, #63	; 0x3f
 8006790:	d803      	bhi.n	800679a <USBD_CDC_Setup+0xa6>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	88db      	ldrh	r3, [r3, #6]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	e000      	b.n	800679c <USBD_CDC_Setup+0xa8>
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80067a2:	6939      	ldr	r1, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80067aa:	461a      	mov	r2, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fd7f 	bl	80082b0 <USBD_CtlPrepareRx>
      break;
 80067b2:	e076      	b.n	80068a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	33b0      	adds	r3, #176	; 0xb0
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	7850      	ldrb	r0, [r2, #1]
 80067ca:	2200      	movs	r2, #0
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	4798      	blx	r3
      break;
 80067d0:	e067      	b.n	80068a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	2b0b      	cmp	r3, #11
 80067d8:	d851      	bhi.n	800687e <USBD_CDC_Setup+0x18a>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <USBD_CDC_Setup+0xec>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006811 	.word	0x08006811
 80067e4:	0800688d 	.word	0x0800688d
 80067e8:	0800687f 	.word	0x0800687f
 80067ec:	0800687f 	.word	0x0800687f
 80067f0:	0800687f 	.word	0x0800687f
 80067f4:	0800687f 	.word	0x0800687f
 80067f8:	0800687f 	.word	0x0800687f
 80067fc:	0800687f 	.word	0x0800687f
 8006800:	0800687f 	.word	0x0800687f
 8006804:	0800687f 	.word	0x0800687f
 8006808:	0800683b 	.word	0x0800683b
 800680c:	08006865 	.word	0x08006865
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b03      	cmp	r3, #3
 800681a:	d107      	bne.n	800682c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800681c:	f107 030a 	add.w	r3, r7, #10
 8006820:	2202      	movs	r2, #2
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fd17 	bl	8008258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800682a:	e032      	b.n	8006892 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fca1 	bl	8008176 <USBD_CtlError>
            ret = USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	75fb      	strb	r3, [r7, #23]
          break;
 8006838:	e02b      	b.n	8006892 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b03      	cmp	r3, #3
 8006844:	d107      	bne.n	8006856 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006846:	f107 030d 	add.w	r3, r7, #13
 800684a:	2201      	movs	r2, #1
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 fd02 	bl	8008258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006854:	e01d      	b.n	8006892 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 fc8c 	bl	8008176 <USBD_CtlError>
            ret = USBD_FAIL;
 800685e:	2303      	movs	r3, #3
 8006860:	75fb      	strb	r3, [r7, #23]
          break;
 8006862:	e016      	b.n	8006892 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b03      	cmp	r3, #3
 800686e:	d00f      	beq.n	8006890 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fc7f 	bl	8008176 <USBD_CtlError>
            ret = USBD_FAIL;
 8006878:	2303      	movs	r3, #3
 800687a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800687c:	e008      	b.n	8006890 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fc78 	bl	8008176 <USBD_CtlError>
          ret = USBD_FAIL;
 8006886:	2303      	movs	r3, #3
 8006888:	75fb      	strb	r3, [r7, #23]
          break;
 800688a:	e002      	b.n	8006892 <USBD_CDC_Setup+0x19e>
          break;
 800688c:	bf00      	nop
 800688e:	e008      	b.n	80068a2 <USBD_CDC_Setup+0x1ae>
          break;
 8006890:	bf00      	nop
      }
      break;
 8006892:	e006      	b.n	80068a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 fc6d 	bl	8008176 <USBD_CtlError>
      ret = USBD_FAIL;
 800689c:	2303      	movs	r3, #3
 800689e:	75fb      	strb	r3, [r7, #23]
      break;
 80068a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80068be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32b0      	adds	r2, #176	; 0xb0
 80068ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e065      	b.n	80069a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	32b0      	adds	r2, #176	; 0xb0
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	f003 020f 	and.w	r2, r3, #15
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	3318      	adds	r3, #24
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d02f      	beq.n	8006960 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	3318      	adds	r3, #24
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	f003 010f 	and.w	r1, r3, #15
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	460b      	mov	r3, r1
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	440b      	add	r3, r1
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4403      	add	r3, r0
 8006928:	3348      	adds	r3, #72	; 0x48
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006936:	2b00      	cmp	r3, #0
 8006938:	d112      	bne.n	8006960 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 020f 	and.w	r2, r3, #15
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	3318      	adds	r3, #24
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006952:	78f9      	ldrb	r1, [r7, #3]
 8006954:	2300      	movs	r3, #0
 8006956:	2200      	movs	r2, #0
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f004 ff40 	bl	800b7de <USBD_LL_Transmit>
 800695e:	e01f      	b.n	80069a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	33b0      	adds	r3, #176	; 0xb0
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d010      	beq.n	80069a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	33b0      	adds	r3, #176	; 0xb0
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	32b0      	adds	r2, #176	; 0xb0
 80069c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	32b0      	adds	r2, #176	; 0xb0
 80069d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	e01a      	b.n	8006a12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f004 ff3e 	bl	800b862 <USBD_LL_GetRxDataSize>
 80069e6:	4602      	mov	r2, r0
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	33b0      	adds	r3, #176	; 0xb0
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	32b0      	adds	r2, #176	; 0xb0
 8006a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e025      	b.n	8006a88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	33b0      	adds	r3, #176	; 0xb0
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01a      	beq.n	8006a86 <USBD_CDC_EP0_RxReady+0x6c>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a56:	2bff      	cmp	r3, #255	; 0xff
 8006a58:	d015      	beq.n	8006a86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	33b0      	adds	r3, #176	; 0xb0
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a7a:	b292      	uxth	r2, r2
 8006a7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	22ff      	movs	r2, #255	; 0xff
 8006a82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a98:	2182      	movs	r1, #130	; 0x82
 8006a9a:	4818      	ldr	r0, [pc, #96]	; (8006afc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a9c:	f000 fd09 	bl	80074b2 <USBD_GetEpDesc>
 8006aa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4815      	ldr	r0, [pc, #84]	; (8006afc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aa6:	f000 fd04 	bl	80074b2 <USBD_GetEpDesc>
 8006aaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006aac:	2181      	movs	r1, #129	; 0x81
 8006aae:	4813      	ldr	r0, [pc, #76]	; (8006afc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ab0:	f000 fcff 	bl	80074b2 <USBD_GetEpDesc>
 8006ab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad0:	711a      	strb	r2, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae4:	711a      	strb	r2, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2243      	movs	r2, #67	; 0x43
 8006aee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000050 	.word	0x20000050

08006b00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b08:	2182      	movs	r1, #130	; 0x82
 8006b0a:	4818      	ldr	r0, [pc, #96]	; (8006b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b0c:	f000 fcd1 	bl	80074b2 <USBD_GetEpDesc>
 8006b10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b12:	2101      	movs	r1, #1
 8006b14:	4815      	ldr	r0, [pc, #84]	; (8006b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b16:	f000 fccc 	bl	80074b2 <USBD_GetEpDesc>
 8006b1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b1c:	2181      	movs	r1, #129	; 0x81
 8006b1e:	4813      	ldr	r0, [pc, #76]	; (8006b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b20:	f000 fcc7 	bl	80074b2 <USBD_GetEpDesc>
 8006b24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d006      	beq.n	8006b46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	711a      	strb	r2, [r3, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f042 0202 	orr.w	r2, r2, #2
 8006b44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	711a      	strb	r2, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f042 0202 	orr.w	r2, r2, #2
 8006b58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2243      	movs	r2, #67	; 0x43
 8006b5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b60:	4b02      	ldr	r3, [pc, #8]	; (8006b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000050 	.word	0x20000050

08006b70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b78:	2182      	movs	r1, #130	; 0x82
 8006b7a:	4818      	ldr	r0, [pc, #96]	; (8006bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b7c:	f000 fc99 	bl	80074b2 <USBD_GetEpDesc>
 8006b80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b82:	2101      	movs	r1, #1
 8006b84:	4815      	ldr	r0, [pc, #84]	; (8006bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b86:	f000 fc94 	bl	80074b2 <USBD_GetEpDesc>
 8006b8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b8c:	2181      	movs	r1, #129	; 0x81
 8006b8e:	4813      	ldr	r0, [pc, #76]	; (8006bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b90:	f000 fc8f 	bl	80074b2 <USBD_GetEpDesc>
 8006b94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d006      	beq.n	8006bb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb0:	711a      	strb	r2, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d006      	beq.n	8006bca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc4:	711a      	strb	r2, [r3, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2243      	movs	r2, #67	; 0x43
 8006bce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bd0:	4b02      	ldr	r3, [pc, #8]	; (8006bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000050 	.word	0x20000050

08006be0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	220a      	movs	r2, #10
 8006bec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bee:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	2000000c 	.word	0x2000000c

08006c00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e009      	b.n	8006c28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	33b0      	adds	r3, #176	; 0xb0
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	32b0      	adds	r2, #176	; 0xb0
 8006c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e008      	b.n	8006c6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	; 0xb0
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e004      	b.n	8006ca6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
	...

08006cb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	32b0      	adds	r2, #176	; 0xb0
 8006cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32b0      	adds	r2, #176	; 0xb0
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e018      	b.n	8006d14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7c1b      	ldrb	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cea:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <USBD_CDC_ReceivePacket+0x68>)
 8006cec:	7819      	ldrb	r1, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f004 fd91 	bl	800b820 <USBD_LL_PrepareReceive>
 8006cfe:	e008      	b.n	8006d12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <USBD_CDC_ReceivePacket+0x68>)
 8006d02:	7819      	ldrb	r1, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f004 fd87 	bl	800b820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000094 	.word	0x20000094

08006d20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e01f      	b.n	8006d78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	79fa      	ldrb	r2, [r7, #7]
 8006d6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f004 fc01 	bl	800b574 <USBD_LL_Init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e025      	b.n	8006de4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32ae      	adds	r2, #174	; 0xae
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00f      	beq.n	8006dd4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32ae      	adds	r2, #174	; 0xae
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	f107 020e 	add.w	r2, r7, #14
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
 8006dcc:	4602      	mov	r2, r0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f004 fc09 	bl	800b60c <USBD_LL_Start>
 8006dfa:	4603      	mov	r3, r0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f932 	bl	8008102 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006eac:	461a      	mov	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d01a      	beq.n	8006ef8 <USBD_LL_SetupStage+0x72>
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d822      	bhi.n	8006f0c <USBD_LL_SetupStage+0x86>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <USBD_LL_SetupStage+0x4a>
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d00a      	beq.n	8006ee4 <USBD_LL_SetupStage+0x5e>
 8006ece:	e01d      	b.n	8006f0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fb5f 	bl	800759c <USBD_StdDevReq>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee2:	e020      	b.n	8006f26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fbc7 	bl	8007680 <USBD_StdItfReq>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef6:	e016      	b.n	8006f26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc29 	bl	8007758 <USBD_StdEPReq>
 8006f06:	4603      	mov	r3, r0
 8006f08:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0a:	e00c      	b.n	8006f26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f004 fbd6 	bl	800b6cc <USBD_LL_StallEP>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]
      break;
 8006f24:	bf00      	nop
  }

  return ret;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d16e      	bne.n	8007026 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	f040 8098 	bne.w	800708c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d913      	bls.n	8006f90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	bf28      	it	cs
 8006f82:	4613      	movcs	r3, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f001 f9ae 	bl	80082ea <USBD_CtlContinueRx>
 8006f8e:	e07d      	b.n	800708c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d014      	beq.n	8006fc8 <USBD_LL_DataOutStage+0x98>
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d81d      	bhi.n	8006fde <USBD_LL_DataOutStage+0xae>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <USBD_LL_DataOutStage+0x7c>
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d003      	beq.n	8006fb2 <USBD_LL_DataOutStage+0x82>
 8006faa:	e018      	b.n	8006fde <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75bb      	strb	r3, [r7, #22]
            break;
 8006fb0:	e018      	b.n	8006fe4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fa5e 	bl	800747e <USBD_CoreFindIF>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	75bb      	strb	r3, [r7, #22]
            break;
 8006fc6:	e00d      	b.n	8006fe4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fa60 	bl	8007498 <USBD_CoreFindEP>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	75bb      	strb	r3, [r7, #22]
            break;
 8006fdc:	e002      	b.n	8006fe4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75bb      	strb	r3, [r7, #22]
            break;
 8006fe2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006fe4:	7dbb      	ldrb	r3, [r7, #22]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d113      	bne.n	800701e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ff6:	7dba      	ldrb	r2, [r7, #22]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	32ae      	adds	r2, #174	; 0xae
 8006ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007006:	7dba      	ldrb	r2, [r7, #22]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800700e:	7dba      	ldrb	r2, [r7, #22]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	32ae      	adds	r2, #174	; 0xae
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f001 f974 	bl	800830c <USBD_CtlSendStatus>
 8007024:	e032      	b.n	800708c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	b2db      	uxtb	r3, r3
 800702e:	4619      	mov	r1, r3
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fa31 	bl	8007498 <USBD_CoreFindEP>
 8007036:	4603      	mov	r3, r0
 8007038:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800703a:	7dbb      	ldrb	r3, [r7, #22]
 800703c:	2bff      	cmp	r3, #255	; 0xff
 800703e:	d025      	beq.n	800708c <USBD_LL_DataOutStage+0x15c>
 8007040:	7dbb      	ldrb	r3, [r7, #22]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d122      	bne.n	800708c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b03      	cmp	r3, #3
 8007050:	d117      	bne.n	8007082 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007052:	7dba      	ldrb	r2, [r7, #22]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	32ae      	adds	r2, #174	; 0xae
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00f      	beq.n	8007082 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007062:	7dba      	ldrb	r2, [r7, #22]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800706a:	7dba      	ldrb	r2, [r7, #22]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	32ae      	adds	r2, #174	; 0xae
 8007070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	7afa      	ldrb	r2, [r7, #11]
 8007078:	4611      	mov	r1, r2
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	4798      	blx	r3
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	e000      	b.n	800708e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	460b      	mov	r3, r1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d16f      	bne.n	800718a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3314      	adds	r3, #20
 80070ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d15a      	bne.n	8007170 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d914      	bls.n	80070f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	461a      	mov	r2, r3
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f001 f8d6 	bl	800828e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e2:	2300      	movs	r3, #0
 80070e4:	2200      	movs	r2, #0
 80070e6:	2100      	movs	r1, #0
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f004 fb99 	bl	800b820 <USBD_LL_PrepareReceive>
 80070ee:	e03f      	b.n	8007170 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d11c      	bne.n	8007136 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007104:	429a      	cmp	r2, r3
 8007106:	d316      	bcc.n	8007136 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007112:	429a      	cmp	r2, r3
 8007114:	d20f      	bcs.n	8007136 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007116:	2200      	movs	r2, #0
 8007118:	2100      	movs	r1, #0
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f001 f8b7 	bl	800828e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007128:	2300      	movs	r3, #0
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f004 fb76 	bl	800b820 <USBD_LL_PrepareReceive>
 8007134:	e01c      	b.n	8007170 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b03      	cmp	r3, #3
 8007140:	d10f      	bne.n	8007162 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007162:	2180      	movs	r1, #128	; 0x80
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f004 fab1 	bl	800b6cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 f8e1 	bl	8008332 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d03a      	beq.n	80071f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff fe42 	bl	8006e04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007188:	e032      	b.n	80071f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007190:	b2db      	uxtb	r3, r3
 8007192:	4619      	mov	r1, r3
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f97f 	bl	8007498 <USBD_CoreFindEP>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	2bff      	cmp	r3, #255	; 0xff
 80071a2:	d025      	beq.n	80071f0 <USBD_LL_DataInStage+0x15a>
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d122      	bne.n	80071f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d11c      	bne.n	80071f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80071b6:	7dfa      	ldrb	r2, [r7, #23]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	32ae      	adds	r2, #174	; 0xae
 80071bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d014      	beq.n	80071f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80071c6:	7dfa      	ldrb	r2, [r7, #23]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80071ce:	7dfa      	ldrb	r2, [r7, #23]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	32ae      	adds	r2, #174	; 0xae
 80071d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	7afa      	ldrb	r2, [r7, #11]
 80071dc:	4611      	mov	r1, r2
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80071e6:	7dbb      	ldrb	r3, [r7, #22]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80071ec:	7dbb      	ldrb	r3, [r7, #22]
 80071ee:	e000      	b.n	80071f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d014      	beq.n	8007260 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00e      	beq.n	8007260 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6852      	ldr	r2, [r2, #4]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	4611      	mov	r1, r2
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	2200      	movs	r2, #0
 8007264:	2100      	movs	r1, #0
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f004 f9eb 	bl	800b642 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2240      	movs	r2, #64	; 0x40
 8007278:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800727c:	2340      	movs	r3, #64	; 0x40
 800727e:	2200      	movs	r2, #0
 8007280:	2180      	movs	r1, #128	; 0x80
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f004 f9dd 	bl	800b642 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2240      	movs	r2, #64	; 0x40
 8007292:	621a      	str	r2, [r3, #32]

  return ret;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	78fa      	ldrb	r2, [r7, #3]
 80072ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2204      	movs	r2, #4
 80072d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d106      	bne.n	800730c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007304:	b2da      	uxtb	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b03      	cmp	r3, #3
 800732c:	d110      	bne.n	8007350 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	32ae      	adds	r2, #174	; 0xae
 8007370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	e01c      	b.n	80073b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b03      	cmp	r3, #3
 8007386:	d115      	bne.n	80073b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32ae      	adds	r2, #174	; 0xae
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	32ae      	adds	r2, #174	; 0xae
 80073a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	4611      	mov	r1, r2
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	32ae      	adds	r2, #174	; 0xae
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80073dc:	2303      	movs	r3, #3
 80073de:	e01c      	b.n	800741a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d115      	bne.n	8007418 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	32ae      	adds	r2, #174	; 0xae
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	32ae      	adds	r2, #174	; 0xae
 800740a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	4611      	mov	r1, r2
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6852      	ldr	r2, [r2, #4]
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	4611      	mov	r1, r2
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007470:	2303      	movs	r3, #3
 8007472:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800748a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b086      	sub	sp, #24
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d920      	bls.n	800751c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80074e2:	e013      	b.n	800750c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80074e4:	f107 030a 	add.w	r3, r7, #10
 80074e8:	4619      	mov	r1, r3
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	f000 f81b 	bl	8007526 <USBD_GetNextDesc>
 80074f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	d108      	bne.n	800750c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	789b      	ldrb	r3, [r3, #2]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	429a      	cmp	r2, r3
 8007506:	d008      	beq.n	800751a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	885b      	ldrh	r3, [r3, #2]
 8007510:	b29a      	uxth	r2, r3
 8007512:	897b      	ldrh	r3, [r7, #10]
 8007514:	429a      	cmp	r2, r3
 8007516:	d8e5      	bhi.n	80074e4 <USBD_GetEpDesc+0x32>
 8007518:	e000      	b.n	800751c <USBD_GetEpDesc+0x6a>
          break;
 800751a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800751c:	693b      	ldr	r3, [r7, #16]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007526:	b480      	push	{r7}
 8007528:	b085      	sub	sp, #20
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	881a      	ldrh	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	4413      	add	r3, r2
 8007540:	b29a      	uxth	r2, r3
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	3301      	adds	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800757e:	8a3b      	ldrh	r3, [r7, #16]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	b21a      	sxth	r2, r3
 8007584:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007588:	4313      	orrs	r3, r2
 800758a:	b21b      	sxth	r3, r3
 800758c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800758e:	89fb      	ldrh	r3, [r7, #14]
}
 8007590:	4618      	mov	r0, r3
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d005      	beq.n	80075c2 <USBD_StdDevReq+0x26>
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d857      	bhi.n	800766a <USBD_StdDevReq+0xce>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00f      	beq.n	80075de <USBD_StdDevReq+0x42>
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d153      	bne.n	800766a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32ae      	adds	r2, #174	; 0xae
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
      break;
 80075dc:	e04a      	b.n	8007674 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b09      	cmp	r3, #9
 80075e4:	d83b      	bhi.n	800765e <USBD_StdDevReq+0xc2>
 80075e6:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <USBD_StdDevReq+0x50>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007641 	.word	0x08007641
 80075f0:	08007655 	.word	0x08007655
 80075f4:	0800765f 	.word	0x0800765f
 80075f8:	0800764b 	.word	0x0800764b
 80075fc:	0800765f 	.word	0x0800765f
 8007600:	0800761f 	.word	0x0800761f
 8007604:	08007615 	.word	0x08007615
 8007608:	0800765f 	.word	0x0800765f
 800760c:	08007637 	.word	0x08007637
 8007610:	08007629 	.word	0x08007629
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa3c 	bl	8007a94 <USBD_GetDescriptor>
          break;
 800761c:	e024      	b.n	8007668 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fbcb 	bl	8007dbc <USBD_SetAddress>
          break;
 8007626:	e01f      	b.n	8007668 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fc0a 	bl	8007e44 <USBD_SetConfig>
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
          break;
 8007634:	e018      	b.n	8007668 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fcad 	bl	8007f98 <USBD_GetConfig>
          break;
 800763e:	e013      	b.n	8007668 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fcde 	bl	8008004 <USBD_GetStatus>
          break;
 8007648:	e00e      	b.n	8007668 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fd0d 	bl	800806c <USBD_SetFeature>
          break;
 8007652:	e009      	b.n	8007668 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fd31 	bl	80080be <USBD_ClrFeature>
          break;
 800765c:	e004      	b.n	8007668 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fd88 	bl	8008176 <USBD_CtlError>
          break;
 8007666:	bf00      	nop
      }
      break;
 8007668:	e004      	b.n	8007674 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fd82 	bl	8008176 <USBD_CtlError>
      break;
 8007672:	bf00      	nop
  }

  return ret;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop

08007680 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d005      	beq.n	80076a6 <USBD_StdItfReq+0x26>
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d852      	bhi.n	8007744 <USBD_StdItfReq+0xc4>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <USBD_StdItfReq+0x26>
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d14e      	bne.n	8007744 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	3b01      	subs	r3, #1
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d840      	bhi.n	8007736 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	889b      	ldrh	r3, [r3, #4]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d836      	bhi.n	800772c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	889b      	ldrh	r3, [r3, #4]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff fed9 	bl	800747e <USBD_CoreFindIF>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2bff      	cmp	r3, #255	; 0xff
 80076d4:	d01d      	beq.n	8007712 <USBD_StdItfReq+0x92>
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11a      	bne.n	8007712 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80076dc:	7bba      	ldrb	r2, [r7, #14]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32ae      	adds	r2, #174	; 0xae
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00f      	beq.n	800770c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80076ec:	7bba      	ldrb	r2, [r7, #14]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076f4:	7bba      	ldrb	r2, [r7, #14]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	32ae      	adds	r2, #174	; 0xae
 80076fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	4798      	blx	r3
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800770a:	e004      	b.n	8007716 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007710:	e001      	b.n	8007716 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007712:	2303      	movs	r3, #3
 8007714:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	88db      	ldrh	r3, [r3, #6]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d110      	bne.n	8007740 <USBD_StdItfReq+0xc0>
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10d      	bne.n	8007740 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fdf1 	bl	800830c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800772a:	e009      	b.n	8007740 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fd21 	bl	8008176 <USBD_CtlError>
          break;
 8007734:	e004      	b.n	8007740 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fd1c 	bl	8008176 <USBD_CtlError>
          break;
 800773e:	e000      	b.n	8007742 <USBD_StdItfReq+0xc2>
          break;
 8007740:	bf00      	nop
      }
      break;
 8007742:	e004      	b.n	800774e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fd15 	bl	8008176 <USBD_CtlError>
      break;
 800774c:	bf00      	nop
  }

  return ret;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	889b      	ldrh	r3, [r3, #4]
 800776a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	d007      	beq.n	8007788 <USBD_StdEPReq+0x30>
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	f200 817f 	bhi.w	8007a7c <USBD_StdEPReq+0x324>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02a      	beq.n	80077d8 <USBD_StdEPReq+0x80>
 8007782:	2b20      	cmp	r3, #32
 8007784:	f040 817a 	bne.w	8007a7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff fe83 	bl	8007498 <USBD_CoreFindEP>
 8007792:	4603      	mov	r3, r0
 8007794:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007796:	7b7b      	ldrb	r3, [r7, #13]
 8007798:	2bff      	cmp	r3, #255	; 0xff
 800779a:	f000 8174 	beq.w	8007a86 <USBD_StdEPReq+0x32e>
 800779e:	7b7b      	ldrb	r3, [r7, #13]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 8170 	bne.w	8007a86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80077a6:	7b7a      	ldrb	r2, [r7, #13]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80077ae:	7b7a      	ldrb	r2, [r7, #13]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	32ae      	adds	r2, #174	; 0xae
 80077b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8163 	beq.w	8007a86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80077c0:	7b7a      	ldrb	r2, [r7, #13]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32ae      	adds	r2, #174	; 0xae
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077d6:	e156      	b.n	8007a86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d008      	beq.n	80077f2 <USBD_StdEPReq+0x9a>
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	f300 8145 	bgt.w	8007a70 <USBD_StdEPReq+0x318>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 809b 	beq.w	8007922 <USBD_StdEPReq+0x1ca>
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d03c      	beq.n	800786a <USBD_StdEPReq+0x112>
 80077f0:	e13e      	b.n	8007a70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d002      	beq.n	8007804 <USBD_StdEPReq+0xac>
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d016      	beq.n	8007830 <USBD_StdEPReq+0xd8>
 8007802:	e02c      	b.n	800785e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00d      	beq.n	8007826 <USBD_StdEPReq+0xce>
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b80      	cmp	r3, #128	; 0x80
 800780e:	d00a      	beq.n	8007826 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f003 ff59 	bl	800b6cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800781a:	2180      	movs	r1, #128	; 0x80
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f003 ff55 	bl	800b6cc <USBD_LL_StallEP>
 8007822:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007824:	e020      	b.n	8007868 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fca4 	bl	8008176 <USBD_CtlError>
              break;
 800782e:	e01b      	b.n	8007868 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	885b      	ldrh	r3, [r3, #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10e      	bne.n	8007856 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <USBD_StdEPReq+0xfe>
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b80      	cmp	r3, #128	; 0x80
 8007842:	d008      	beq.n	8007856 <USBD_StdEPReq+0xfe>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f003 ff3b 	bl	800b6cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fd58 	bl	800830c <USBD_CtlSendStatus>

              break;
 800785c:	e004      	b.n	8007868 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc88 	bl	8008176 <USBD_CtlError>
              break;
 8007866:	bf00      	nop
          }
          break;
 8007868:	e107      	b.n	8007a7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d002      	beq.n	800787c <USBD_StdEPReq+0x124>
 8007876:	2b03      	cmp	r3, #3
 8007878:	d016      	beq.n	80078a8 <USBD_StdEPReq+0x150>
 800787a:	e04b      	b.n	8007914 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00d      	beq.n	800789e <USBD_StdEPReq+0x146>
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d00a      	beq.n	800789e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f003 ff1d 	bl	800b6cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007892:	2180      	movs	r1, #128	; 0x80
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f003 ff19 	bl	800b6cc <USBD_LL_StallEP>
 800789a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800789c:	e040      	b.n	8007920 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc68 	bl	8008176 <USBD_CtlError>
              break;
 80078a6:	e03b      	b.n	8007920 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d136      	bne.n	800791e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f003 ff23 	bl	800b70a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fd21 	bl	800830c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fde2 	bl	8007498 <USBD_CoreFindEP>
 80078d4:	4603      	mov	r3, r0
 80078d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078d8:	7b7b      	ldrb	r3, [r7, #13]
 80078da:	2bff      	cmp	r3, #255	; 0xff
 80078dc:	d01f      	beq.n	800791e <USBD_StdEPReq+0x1c6>
 80078de:	7b7b      	ldrb	r3, [r7, #13]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11c      	bne.n	800791e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80078e4:	7b7a      	ldrb	r2, [r7, #13]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80078ec:	7b7a      	ldrb	r2, [r7, #13]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	; 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d010      	beq.n	800791e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078fc:	7b7a      	ldrb	r2, [r7, #13]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	32ae      	adds	r2, #174	; 0xae
 8007902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007912:	e004      	b.n	800791e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fc2d 	bl	8008176 <USBD_CtlError>
              break;
 800791c:	e000      	b.n	8007920 <USBD_StdEPReq+0x1c8>
              break;
 800791e:	bf00      	nop
          }
          break;
 8007920:	e0ab      	b.n	8007a7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d002      	beq.n	8007934 <USBD_StdEPReq+0x1dc>
 800792e:	2b03      	cmp	r3, #3
 8007930:	d032      	beq.n	8007998 <USBD_StdEPReq+0x240>
 8007932:	e097      	b.n	8007a64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <USBD_StdEPReq+0x1f2>
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b80      	cmp	r3, #128	; 0x80
 800793e:	d004      	beq.n	800794a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fc17 	bl	8008176 <USBD_CtlError>
                break;
 8007948:	e091      	b.n	8007a6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800794a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800794e:	2b00      	cmp	r3, #0
 8007950:	da0b      	bge.n	800796a <USBD_StdEPReq+0x212>
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	3310      	adds	r3, #16
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	4413      	add	r3, r2
 8007966:	3304      	adds	r3, #4
 8007968:	e00b      	b.n	8007982 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4413      	add	r3, r2
 8007980:	3304      	adds	r3, #4
 8007982:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2202      	movs	r2, #2
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fc61 	bl	8008258 <USBD_CtlSendData>
              break;
 8007996:	e06a      	b.n	8007a6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	da11      	bge.n	80079c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	f003 020f 	and.w	r2, r3, #15
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	3324      	adds	r3, #36	; 0x24
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d117      	bne.n	80079ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fbda 	bl	8008176 <USBD_CtlError>
                  break;
 80079c2:	e054      	b.n	8007a6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 020f 	and.w	r2, r3, #15
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fbc7 	bl	8008176 <USBD_CtlError>
                  break;
 80079e8:	e041      	b.n	8007a6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da0b      	bge.n	8007a0a <USBD_StdEPReq+0x2b2>
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079f8:	4613      	mov	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	3310      	adds	r3, #16
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	3304      	adds	r3, #4
 8007a08:	e00b      	b.n	8007a22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a10:	4613      	mov	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	4413      	add	r3, r2
 8007a20:	3304      	adds	r3, #4
 8007a22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <USBD_StdEPReq+0x2d8>
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b80      	cmp	r3, #128	; 0x80
 8007a2e:	d103      	bne.n	8007a38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e00e      	b.n	8007a56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f003 fe83 	bl	800b748 <USBD_LL_IsStallEP>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e002      	b.n	8007a56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fbfb 	bl	8008258 <USBD_CtlSendData>
              break;
 8007a62:	e004      	b.n	8007a6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fb85 	bl	8008176 <USBD_CtlError>
              break;
 8007a6c:	bf00      	nop
          }
          break;
 8007a6e:	e004      	b.n	8007a7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fb7f 	bl	8008176 <USBD_CtlError>
          break;
 8007a78:	bf00      	nop
      }
      break;
 8007a7a:	e005      	b.n	8007a88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fb79 	bl	8008176 <USBD_CtlError>
      break;
 8007a84:	e000      	b.n	8007a88 <USBD_StdEPReq+0x330>
      break;
 8007a86:	bf00      	nop
  }

  return ret;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b0e      	cmp	r3, #14
 8007ab6:	f200 8152 	bhi.w	8007d5e <USBD_GetDescriptor+0x2ca>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_GetDescriptor+0x2c>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b89 	.word	0x08007b89
 8007acc:	08007d5f 	.word	0x08007d5f
 8007ad0:	08007d5f 	.word	0x08007d5f
 8007ad4:	08007cff 	.word	0x08007cff
 8007ad8:	08007d2b 	.word	0x08007d2b
 8007adc:	08007d5f 	.word	0x08007d5f
 8007ae0:	08007d5f 	.word	0x08007d5f
 8007ae4:	08007d5f 	.word	0x08007d5f
 8007ae8:	08007d5f 	.word	0x08007d5f
 8007aec:	08007d5f 	.word	0x08007d5f
 8007af0:	08007d5f 	.word	0x08007d5f
 8007af4:	08007d5f 	.word	0x08007d5f
 8007af8:	08007afd 	.word	0x08007afd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7c12      	ldrb	r2, [r2, #16]
 8007b14:	f107 0108 	add.w	r1, r7, #8
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b1e:	e126      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fb27 	bl	8008176 <USBD_CtlError>
        err++;
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007b2e:	e11e      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 0108 	add.w	r1, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
      break;
 8007b46:	e112      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7c1b      	ldrb	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10d      	bne.n	8007b6c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	f107 0208 	add.w	r2, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	2202      	movs	r2, #2
 8007b68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b6a:	e100      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	f107 0208 	add.w	r2, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	2202      	movs	r2, #2
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e0f2      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	885b      	ldrh	r3, [r3, #2]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	f200 80ac 	bhi.w	8007cec <USBD_GetDescriptor+0x258>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_GetDescriptor+0x108>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bb5 	.word	0x08007bb5
 8007ba0:	08007be9 	.word	0x08007be9
 8007ba4:	08007c1d 	.word	0x08007c1d
 8007ba8:	08007c51 	.word	0x08007c51
 8007bac:	08007c85 	.word	0x08007c85
 8007bb0:	08007cb9 	.word	0x08007cb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd6:	e091      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 facb 	bl	8008176 <USBD_CtlError>
            err++;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3301      	adds	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]
          break;
 8007be6:	e089      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	f107 0108 	add.w	r1, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0a:	e077      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fab1 	bl	8008176 <USBD_CtlError>
            err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1a:	e06f      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3e:	e05d      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa97 	bl	8008176 <USBD_CtlError>
            err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4e:	e055      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c72:	e043      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa7d 	bl	8008176 <USBD_CtlError>
            err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
          break;
 8007c82:	e03b      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca6:	e029      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa63 	bl	8008176 <USBD_CtlError>
            err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb6:	e021      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cda:	e00f      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa49 	bl	8008176 <USBD_CtlError>
            err++;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cea:	e007      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa41 	bl	8008176 <USBD_CtlError>
          err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007cfa:	bf00      	nop
      }
      break;
 8007cfc:	e037      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	7c1b      	ldrb	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d109      	bne.n	8007d1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0e:	f107 0208 	add.w	r2, r7, #8
 8007d12:	4610      	mov	r0, r2
 8007d14:	4798      	blx	r3
 8007d16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d18:	e029      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fa2a 	bl	8008176 <USBD_CtlError>
        err++;
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	3301      	adds	r3, #1
 8007d26:	72fb      	strb	r3, [r7, #11]
      break;
 8007d28:	e021      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f107 0208 	add.w	r2, r7, #8
 8007d3e:	4610      	mov	r0, r2
 8007d40:	4798      	blx	r3
 8007d42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3301      	adds	r3, #1
 8007d48:	2207      	movs	r2, #7
 8007d4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d4c:	e00f      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fa10 	bl	8008176 <USBD_CtlError>
        err++;
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d5c:	e007      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa08 	bl	8008176 <USBD_CtlError>
      err++;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6c:	bf00      	nop
  }

  if (err != 0U)
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11e      	bne.n	8007db2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	88db      	ldrh	r3, [r3, #6]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d016      	beq.n	8007daa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007d7c:	893b      	ldrh	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00e      	beq.n	8007da0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	88da      	ldrh	r2, [r3, #6]
 8007d86:	893b      	ldrh	r3, [r7, #8]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	bf28      	it	cs
 8007d8c:	4613      	movcs	r3, r2
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d92:	893b      	ldrh	r3, [r7, #8]
 8007d94:	461a      	mov	r2, r3
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa5d 	bl	8008258 <USBD_CtlSendData>
 8007d9e:	e009      	b.n	8007db4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9e7 	bl	8008176 <USBD_CtlError>
 8007da8:	e004      	b.n	8007db4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 faae 	bl	800830c <USBD_CtlSendStatus>
 8007db0:	e000      	b.n	8007db4 <USBD_GetDescriptor+0x320>
    return;
 8007db2:	bf00      	nop
  }
}
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop

08007dbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	889b      	ldrh	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d131      	bne.n	8007e32 <USBD_SetAddress+0x76>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d12d      	bne.n	8007e32 <USBD_SetAddress+0x76>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	885b      	ldrh	r3, [r3, #2]
 8007dda:	2b7f      	cmp	r3, #127	; 0x7f
 8007ddc:	d829      	bhi.n	8007e32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d104      	bne.n	8007e00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f9bc 	bl	8008176 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	e01d      	b.n	8007e3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7bfa      	ldrb	r2, [r7, #15]
 8007e04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f003 fcc7 	bl	800b7a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa7a 	bl	800830c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e26:	e009      	b.n	8007e3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e30:	e004      	b.n	8007e3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f99e 	bl	8008176 <USBD_CtlError>
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	885b      	ldrh	r3, [r3, #2]
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	4b4e      	ldr	r3, [pc, #312]	; (8007f94 <USBD_SetConfig+0x150>)
 8007e5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e5c:	4b4d      	ldr	r3, [pc, #308]	; (8007f94 <USBD_SetConfig+0x150>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d905      	bls.n	8007e70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f985 	bl	8008176 <USBD_CtlError>
    return USBD_FAIL;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e08c      	b.n	8007f8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d002      	beq.n	8007e82 <USBD_SetConfig+0x3e>
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d029      	beq.n	8007ed4 <USBD_SetConfig+0x90>
 8007e80:	e075      	b.n	8007f6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e82:	4b44      	ldr	r3, [pc, #272]	; (8007f94 <USBD_SetConfig+0x150>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d020      	beq.n	8007ecc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e8a:	4b42      	ldr	r3, [pc, #264]	; (8007f94 <USBD_SetConfig+0x150>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e94:	4b3f      	ldr	r3, [pc, #252]	; (8007f94 <USBD_SetConfig+0x150>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7fe ffbd 	bl	8006e1a <USBD_SetClassConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f962 	bl	8008176 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eba:	e065      	b.n	8007f88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa25 	bl	800830c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007eca:	e05d      	b.n	8007f88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fa1d 	bl	800830c <USBD_CtlSendStatus>
      break;
 8007ed2:	e059      	b.n	8007f88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ed4:	4b2f      	ldr	r3, [pc, #188]	; (8007f94 <USBD_SetConfig+0x150>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d112      	bne.n	8007f02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ee4:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <USBD_SetConfig+0x150>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eee:	4b29      	ldr	r3, [pc, #164]	; (8007f94 <USBD_SetConfig+0x150>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7fe ffac 	bl	8006e52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa06 	bl	800830c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f00:	e042      	b.n	8007f88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f02:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <USBD_SetConfig+0x150>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d02a      	beq.n	8007f66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fe ff9a 	bl	8006e52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <USBD_SetConfig+0x150>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f28:	4b1a      	ldr	r3, [pc, #104]	; (8007f94 <USBD_SetConfig+0x150>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fe ff73 	bl	8006e1a <USBD_SetClassConfig>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00f      	beq.n	8007f5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f918 	bl	8008176 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fe ff7f 	bl	8006e52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f5c:	e014      	b.n	8007f88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9d4 	bl	800830c <USBD_CtlSendStatus>
      break;
 8007f64:	e010      	b.n	8007f88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9d0 	bl	800830c <USBD_CtlSendStatus>
      break;
 8007f6c:	e00c      	b.n	8007f88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f900 	bl	8008176 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f76:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <USBD_SetConfig+0x150>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7fe ff68 	bl	8006e52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f82:	2303      	movs	r3, #3
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	bf00      	nop
  }

  return ret;
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000288 	.word	0x20000288

08007f98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	88db      	ldrh	r3, [r3, #6]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d004      	beq.n	8007fb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f8e2 	bl	8008176 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fb2:	e023      	b.n	8007ffc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	dc02      	bgt.n	8007fc6 <USBD_GetConfig+0x2e>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc03      	bgt.n	8007fcc <USBD_GetConfig+0x34>
 8007fc4:	e015      	b.n	8007ff2 <USBD_GetConfig+0x5a>
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d00b      	beq.n	8007fe2 <USBD_GetConfig+0x4a>
 8007fca:	e012      	b.n	8007ff2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f93c 	bl	8008258 <USBD_CtlSendData>
        break;
 8007fe0:	e00c      	b.n	8007ffc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f934 	bl	8008258 <USBD_CtlSendData>
        break;
 8007ff0:	e004      	b.n	8007ffc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f8be 	bl	8008176 <USBD_CtlError>
        break;
 8007ffa:	bf00      	nop
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008014:	b2db      	uxtb	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	2b02      	cmp	r3, #2
 800801a:	d81e      	bhi.n	800805a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	88db      	ldrh	r3, [r3, #6]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d004      	beq.n	800802e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f8a5 	bl	8008176 <USBD_CtlError>
        break;
 800802c:	e01a      	b.n	8008064 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f043 0202 	orr.w	r2, r3, #2
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	330c      	adds	r3, #12
 800804e:	2202      	movs	r2, #2
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f900 	bl	8008258 <USBD_CtlSendData>
      break;
 8008058:	e004      	b.n	8008064 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f88a 	bl	8008176 <USBD_CtlError>
      break;
 8008062:	bf00      	nop
  }
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	885b      	ldrh	r3, [r3, #2]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d107      	bne.n	800808e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f940 	bl	800830c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800808c:	e013      	b.n	80080b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	885b      	ldrh	r3, [r3, #2]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d10b      	bne.n	80080ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	889b      	ldrh	r3, [r3, #4]
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	b29b      	uxth	r3, r3
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f930 	bl	800830c <USBD_CtlSendStatus>
}
 80080ac:	e003      	b.n	80080b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f860 	bl	8008176 <USBD_CtlError>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d80b      	bhi.n	80080ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	885b      	ldrh	r3, [r3, #2]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d10c      	bne.n	80080f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f910 	bl	800830c <USBD_CtlSendStatus>
      }
      break;
 80080ec:	e004      	b.n	80080f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f840 	bl	8008176 <USBD_CtlError>
      break;
 80080f6:	e000      	b.n	80080fa <USBD_ClrFeature+0x3c>
      break;
 80080f8:	bf00      	nop
  }
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fa17 	bl	8007560 <SWAPBYTE>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fa0a 	bl	8007560 <SWAPBYTE>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7ff f9fd 	bl	8007560 <SWAPBYTE>
 8008166:	4603      	mov	r3, r0
 8008168:	461a      	mov	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	80da      	strh	r2, [r3, #6]
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008180:	2180      	movs	r1, #128	; 0x80
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f003 faa2 	bl	800b6cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f003 fa9e 	bl	800b6cc <USBD_LL_StallEP>
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d036      	beq.n	800821c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081b2:	6938      	ldr	r0, [r7, #16]
 80081b4:	f000 f836 	bl	8008224 <USBD_GetLen>
 80081b8:	4603      	mov	r3, r0
 80081ba:	3301      	adds	r3, #1
 80081bc:	b29b      	uxth	r3, r3
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	4413      	add	r3, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	3301      	adds	r3, #1
 80081d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	4413      	add	r3, r2
 80081de:	2203      	movs	r2, #3
 80081e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	3301      	adds	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081e8:	e013      	b.n	8008212 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4413      	add	r3, r2
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	7812      	ldrb	r2, [r2, #0]
 80081f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	3301      	adds	r3, #1
 80081fa:	613b      	str	r3, [r7, #16]
    idx++;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	3301      	adds	r3, #1
 8008200:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	4413      	add	r3, r2
 8008208:	2200      	movs	r2, #0
 800820a:	701a      	strb	r2, [r3, #0]
    idx++;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	3301      	adds	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e7      	bne.n	80081ea <USBD_GetString+0x52>
 800821a:	e000      	b.n	800821e <USBD_GetString+0x86>
    return;
 800821c:	bf00      	nop
  }
}
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008234:	e005      	b.n	8008242 <USBD_GetLen+0x1e>
  {
    len++;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	3301      	adds	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	3301      	adds	r3, #1
 8008240:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f5      	bne.n	8008236 <USBD_GetLen+0x12>
  }

  return len;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2202      	movs	r2, #2
 8008268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f003 faad 	bl	800b7de <USBD_LL_Transmit>

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	2100      	movs	r1, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f003 fa9c 	bl	800b7de <USBD_LL_Transmit>

  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2203      	movs	r2, #3
 80082c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	2100      	movs	r1, #0
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f003 faa0 	bl	800b820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	2100      	movs	r1, #0
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f003 fa8f 	bl	800b820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2204      	movs	r2, #4
 8008318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800831c:	2300      	movs	r3, #0
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f003 fa5b 	bl	800b7de <USBD_LL_Transmit>

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2205      	movs	r2, #5
 800833e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008342:	2300      	movs	r3, #0
 8008344:	2200      	movs	r2, #0
 8008346:	2100      	movs	r1, #0
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f003 fa69 	bl	800b820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <__NVIC_SetPriority>:
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	6039      	str	r1, [r7, #0]
 8008362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008368:	2b00      	cmp	r3, #0
 800836a:	db0a      	blt.n	8008382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	490c      	ldr	r1, [pc, #48]	; (80083a4 <__NVIC_SetPriority+0x4c>)
 8008372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008376:	0112      	lsls	r2, r2, #4
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	440b      	add	r3, r1
 800837c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008380:	e00a      	b.n	8008398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	b2da      	uxtb	r2, r3
 8008386:	4908      	ldr	r1, [pc, #32]	; (80083a8 <__NVIC_SetPriority+0x50>)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	3b04      	subs	r3, #4
 8008390:	0112      	lsls	r2, r2, #4
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	440b      	add	r3, r1
 8008396:	761a      	strb	r2, [r3, #24]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	e000e100 	.word	0xe000e100
 80083a8:	e000ed00 	.word	0xe000ed00

080083ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80083b0:	2100      	movs	r1, #0
 80083b2:	f06f 0004 	mvn.w	r0, #4
 80083b6:	f7ff ffcf 	bl	8008358 <__NVIC_SetPriority>
#endif
}
 80083ba:	bf00      	nop
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c6:	f3ef 8305 	mrs	r3, IPSR
 80083ca:	603b      	str	r3, [r7, #0]
  return(result);
 80083cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083d2:	f06f 0305 	mvn.w	r3, #5
 80083d6:	607b      	str	r3, [r7, #4]
 80083d8:	e00c      	b.n	80083f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <osKernelInitialize+0x44>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <osKernelInitialize+0x44>)
 80083e4:	2201      	movs	r2, #1
 80083e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e002      	b.n	80083f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083f4:	687b      	ldr	r3, [r7, #4]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000028c 	.word	0x2000028c

08008408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800840e:	f3ef 8305 	mrs	r3, IPSR
 8008412:	603b      	str	r3, [r7, #0]
  return(result);
 8008414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <osKernelStart+0x1a>
    stat = osErrorISR;
 800841a:	f06f 0305 	mvn.w	r3, #5
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	e010      	b.n	8008444 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008422:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <osKernelStart+0x48>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d109      	bne.n	800843e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800842a:	f7ff ffbf 	bl	80083ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800842e:	4b08      	ldr	r3, [pc, #32]	; (8008450 <osKernelStart+0x48>)
 8008430:	2202      	movs	r2, #2
 8008432:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008434:	f001 f87c 	bl	8009530 <vTaskStartScheduler>
      stat = osOK;
 8008438:	2300      	movs	r3, #0
 800843a:	607b      	str	r3, [r7, #4]
 800843c:	e002      	b.n	8008444 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008444:	687b      	ldr	r3, [r7, #4]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	2000028c 	.word	0x2000028c

08008454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008454:	b580      	push	{r7, lr}
 8008456:	b08e      	sub	sp, #56	; 0x38
 8008458:	af04      	add	r7, sp, #16
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008460:	2300      	movs	r3, #0
 8008462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008464:	f3ef 8305 	mrs	r3, IPSR
 8008468:	617b      	str	r3, [r7, #20]
  return(result);
 800846a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800846c:	2b00      	cmp	r3, #0
 800846e:	d17e      	bne.n	800856e <osThreadNew+0x11a>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d07b      	beq.n	800856e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008476:	2380      	movs	r3, #128	; 0x80
 8008478:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800847a:	2318      	movs	r3, #24
 800847c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008482:	f04f 33ff 	mov.w	r3, #4294967295
 8008486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d045      	beq.n	800851a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <osThreadNew+0x48>
        name = attr->name;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d008      	beq.n	80084c2 <osThreadNew+0x6e>
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b38      	cmp	r3, #56	; 0x38
 80084b4:	d805      	bhi.n	80084c2 <osThreadNew+0x6e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <osThreadNew+0x72>
        return (NULL);
 80084c2:	2300      	movs	r3, #0
 80084c4:	e054      	b.n	8008570 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	089b      	lsrs	r3, r3, #2
 80084d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <osThreadNew+0xa8>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	2bbb      	cmp	r3, #187	; 0xbb
 80084e4:	d90a      	bls.n	80084fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <osThreadNew+0xa8>
        mem = 1;
 80084f6:	2301      	movs	r3, #1
 80084f8:	61bb      	str	r3, [r7, #24]
 80084fa:	e010      	b.n	800851e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10c      	bne.n	800851e <osThreadNew+0xca>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d108      	bne.n	800851e <osThreadNew+0xca>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <osThreadNew+0xca>
          mem = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	e001      	b.n	800851e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d110      	bne.n	8008546 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800852c:	9202      	str	r2, [sp, #8]
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6a3a      	ldr	r2, [r7, #32]
 8008538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 fe0c 	bl	8009158 <xTaskCreateStatic>
 8008540:	4603      	mov	r3, r0
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	e013      	b.n	800856e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d110      	bne.n	800856e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	b29a      	uxth	r2, r3
 8008550:	f107 0310 	add.w	r3, r7, #16
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fe57 	bl	8009212 <xTaskCreate>
 8008564:	4603      	mov	r3, r0
 8008566:	2b01      	cmp	r3, #1
 8008568:	d001      	beq.n	800856e <osThreadNew+0x11a>
            hTask = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800856e:	693b      	ldr	r3, [r7, #16]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3728      	adds	r7, #40	; 0x28
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008580:	f3ef 8305 	mrs	r3, IPSR
 8008584:	60bb      	str	r3, [r7, #8]
  return(result);
 8008586:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <osDelay+0x1c>
    stat = osErrorISR;
 800858c:	f06f 0305 	mvn.w	r3, #5
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	e007      	b.n	80085a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 ff92 	bl	80094c8 <vTaskDelay>
    }
  }

  return (stat);
 80085a4:	68fb      	ldr	r3, [r7, #12]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a07      	ldr	r2, [pc, #28]	; (80085dc <vApplicationGetIdleTaskMemory+0x2c>)
 80085c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a06      	ldr	r2, [pc, #24]	; (80085e0 <vApplicationGetIdleTaskMemory+0x30>)
 80085c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2280      	movs	r2, #128	; 0x80
 80085cc:	601a      	str	r2, [r3, #0]
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000290 	.word	0x20000290
 80085e0:	2000034c 	.word	0x2000034c

080085e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a07      	ldr	r2, [pc, #28]	; (8008610 <vApplicationGetTimerTaskMemory+0x2c>)
 80085f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a06      	ldr	r2, [pc, #24]	; (8008614 <vApplicationGetTimerTaskMemory+0x30>)
 80085fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008602:	601a      	str	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	2000054c 	.word	0x2000054c
 8008614:	20000608 	.word	0x20000608

08008618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f103 0208 	add.w	r2, r3, #8
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f04f 32ff 	mov.w	r2, #4294967295
 8008630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f103 0208 	add.w	r2, r3, #8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f103 0208 	add.w	r2, r3, #8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d103      	bne.n	80086da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e00c      	b.n	80086f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3308      	adds	r3, #8
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	e002      	b.n	80086e8 <vListInsert+0x2e>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d2f6      	bcs.n	80086e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
}
 8008720:	bf00      	nop
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6892      	ldr	r2, [r2, #8]
 8008742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6852      	ldr	r2, [r2, #4]
 800874c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d103      	bne.n	8008760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	1e5a      	subs	r2, r3, #1
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087aa:	f002 f87b 	bl	800a8a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	441a      	add	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	3b01      	subs	r3, #1
 80087dc:	68f9      	ldr	r1, [r7, #12]
 80087de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087e0:	fb01 f303 	mul.w	r3, r1, r3
 80087e4:	441a      	add	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	22ff      	movs	r2, #255	; 0xff
 80087ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d114      	bne.n	800882a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01a      	beq.n	800883e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3310      	adds	r3, #16
 800880c:	4618      	mov	r0, r3
 800880e:	f001 f929 	bl	8009a64 <xTaskRemoveFromEventList>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d012      	beq.n	800883e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <xQueueGenericReset+0xcc>)
 800881a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	e009      	b.n	800883e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3310      	adds	r3, #16
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fef2 	bl	8008618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3324      	adds	r3, #36	; 0x24
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff feed 	bl	8008618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800883e:	f002 f861 	bl	800a904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008842:	2301      	movs	r3, #1
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08e      	sub	sp, #56	; 0x38
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <xQueueGenericCreateStatic+0x52>
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <xQueueGenericCreateStatic+0x56>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueGenericCreateStatic+0x58>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	623b      	str	r3, [r7, #32]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d102      	bne.n	80088ce <xQueueGenericCreateStatic+0x7e>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <xQueueGenericCreateStatic+0x82>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <xQueueGenericCreateStatic+0x84>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	61fb      	str	r3, [r7, #28]
}
 80088ea:	bf00      	nop
 80088ec:	e7fe      	b.n	80088ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088ee:	2350      	movs	r3, #80	; 0x50
 80088f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b50      	cmp	r3, #80	; 0x50
 80088f6:	d00a      	beq.n	800890e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	61bb      	str	r3, [r7, #24]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800890e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00d      	beq.n	8008936 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	4613      	mov	r3, r2
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 f805 	bl	8008940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008938:	4618      	mov	r0, r3
 800893a:	3730      	adds	r7, #48	; 0x30
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e002      	b.n	8008962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800896e:	2101      	movs	r1, #1
 8008970:	69b8      	ldr	r0, [r7, #24]
 8008972:	f7ff ff05 	bl	8008780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08e      	sub	sp, #56	; 0x38
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008996:	2300      	movs	r3, #0
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xQueueGenericSend+0x32>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <xQueueGenericSend+0x40>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <xQueueGenericSend+0x44>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <xQueueGenericSend+0x46>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <xQueueGenericSend+0x60>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089e4:	bf00      	nop
 80089e6:	e7fe      	b.n	80089e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d103      	bne.n	80089f6 <xQueueGenericSend+0x6e>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <xQueueGenericSend+0x72>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e000      	b.n	80089fc <xQueueGenericSend+0x74>
 80089fa:	2300      	movs	r3, #0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <xQueueGenericSend+0x8e>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	623b      	str	r3, [r7, #32]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a16:	f001 f9e7 	bl	8009de8 <xTaskGetSchedulerState>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <xQueueGenericSend+0x9e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <xQueueGenericSend+0xa2>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <xQueueGenericSend+0xa4>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <xQueueGenericSend+0xbe>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	61fb      	str	r3, [r7, #28]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a46:	f001 ff2d 	bl	800a8a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d302      	bcc.n	8008a5c <xQueueGenericSend+0xd4>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d129      	bne.n	8008ab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a62:	f000 fa0b 	bl	8008e7c <prvCopyDataToQueue>
 8008a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d010      	beq.n	8008a92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	3324      	adds	r3, #36	; 0x24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fff5 	bl	8009a64 <xTaskRemoveFromEventList>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d013      	beq.n	8008aa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a80:	4b3f      	ldr	r3, [pc, #252]	; (8008b80 <xQueueGenericSend+0x1f8>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	e00a      	b.n	8008aa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a98:	4b39      	ldr	r3, [pc, #228]	; (8008b80 <xQueueGenericSend+0x1f8>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008aa8:	f001 ff2c 	bl	800a904 <vPortExitCritical>
				return pdPASS;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e063      	b.n	8008b78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ab6:	f001 ff25 	bl	800a904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e05c      	b.n	8008b78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f001 f82f 	bl	8009b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ad2:	f001 ff17 	bl	800a904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ad6:	f000 fd9b 	bl	8009610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ada:	f001 fee3 	bl	800a8a4 <vPortEnterCritical>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ae4:	b25b      	sxtb	r3, r3
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d103      	bne.n	8008af4 <xQueueGenericSend+0x16c>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008afa:	b25b      	sxtb	r3, r3
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d103      	bne.n	8008b0a <xQueueGenericSend+0x182>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b0a:	f001 fefb 	bl	800a904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b0e:	1d3a      	adds	r2, r7, #4
 8008b10:	f107 0314 	add.w	r3, r7, #20
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 f81e 	bl	8009b58 <xTaskCheckForTimeOut>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d124      	bne.n	8008b6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b24:	f000 faa2 	bl	800906c <prvIsQueueFull>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d018      	beq.n	8008b60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	3310      	adds	r3, #16
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ff44 	bl	80099c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b3e:	f000 fa2d 	bl	8008f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b42:	f000 fd73 	bl	800962c <xTaskResumeAll>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f af7c 	bne.w	8008a46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <xQueueGenericSend+0x1f8>)
 8008b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	e772      	b.n	8008a46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b62:	f000 fa1b 	bl	8008f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b66:	f000 fd61 	bl	800962c <xTaskResumeAll>
 8008b6a:	e76c      	b.n	8008a46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b6e:	f000 fa15 	bl	8008f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b72:	f000 fd5b 	bl	800962c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3738      	adds	r7, #56	; 0x38
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b090      	sub	sp, #64	; 0x40
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <xQueueGenericSendFromISR+0x3c>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueGenericSendFromISR+0x40>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueGenericSendFromISR+0x42>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d103      	bne.n	8008bee <xQueueGenericSendFromISR+0x6a>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <xQueueGenericSendFromISR+0x6e>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <xQueueGenericSendFromISR+0x70>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	623b      	str	r3, [r7, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	e7fe      	b.n	8008c0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c0e:	f001 ff2b 	bl	800aa68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c12:	f3ef 8211 	mrs	r2, BASEPRI
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	61fa      	str	r2, [r7, #28]
 8008c28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d302      	bcc.n	8008c40 <xQueueGenericSendFromISR+0xbc>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d12f      	bne.n	8008ca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	68b9      	ldr	r1, [r7, #8]
 8008c54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c56:	f000 f911 	bl	8008e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c62:	d112      	bne.n	8008c8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d016      	beq.n	8008c9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	3324      	adds	r3, #36	; 0x24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fef7 	bl	8009a64 <xTaskRemoveFromEventList>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00e      	beq.n	8008c9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	e007      	b.n	8008c9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	b25a      	sxtb	r2, r3
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c9e:	e001      	b.n	8008ca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3740      	adds	r7, #64	; 0x40
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08c      	sub	sp, #48	; 0x30
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <xQueueReceive+0x30>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	623b      	str	r3, [r7, #32]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d103      	bne.n	8008cfa <xQueueReceive+0x3e>
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <xQueueReceive+0x42>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e000      	b.n	8008d00 <xQueueReceive+0x44>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <xQueueReceive+0x5e>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	61fb      	str	r3, [r7, #28]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d1a:	f001 f865 	bl	8009de8 <xTaskGetSchedulerState>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <xQueueReceive+0x6e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <xQueueReceive+0x72>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <xQueueReceive+0x74>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xQueueReceive+0x8e>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	61bb      	str	r3, [r7, #24]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d4a:	f001 fdab 	bl	800a8a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01f      	beq.n	8008d9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5e:	f000 f8f7 	bl	8008f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00f      	beq.n	8008d92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	3310      	adds	r3, #16
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fe74 	bl	8009a64 <xTaskRemoveFromEventList>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d82:	4b3d      	ldr	r3, [pc, #244]	; (8008e78 <xQueueReceive+0x1bc>)
 8008d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d92:	f001 fdb7 	bl	800a904 <vPortExitCritical>
				return pdPASS;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e069      	b.n	8008e6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008da0:	f001 fdb0 	bl	800a904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e062      	b.n	8008e6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dae:	f107 0310 	add.w	r3, r7, #16
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 feba 	bl	8009b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dbc:	f001 fda2 	bl	800a904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dc0:	f000 fc26 	bl	8009610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dc4:	f001 fd6e 	bl	800a8a4 <vPortEnterCritical>
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dce:	b25b      	sxtb	r3, r3
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd4:	d103      	bne.n	8008dde <xQueueReceive+0x122>
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d103      	bne.n	8008df4 <xQueueReceive+0x138>
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df4:	f001 fd86 	bl	800a904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df8:	1d3a      	adds	r2, r7, #4
 8008dfa:	f107 0310 	add.w	r3, r7, #16
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fea9 	bl	8009b58 <xTaskCheckForTimeOut>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d123      	bne.n	8008e54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e0e:	f000 f917 	bl	8009040 <prvIsQueueEmpty>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d017      	beq.n	8008e48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	3324      	adds	r3, #36	; 0x24
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fdcf 	bl	80099c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e28:	f000 f8b8 	bl	8008f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e2c:	f000 fbfe 	bl	800962c <xTaskResumeAll>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d189      	bne.n	8008d4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <xQueueReceive+0x1bc>)
 8008e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	e780      	b.n	8008d4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4a:	f000 f8a7 	bl	8008f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e4e:	f000 fbed 	bl	800962c <xTaskResumeAll>
 8008e52:	e77a      	b.n	8008d4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e56:	f000 f8a1 	bl	8008f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e5a:	f000 fbe7 	bl	800962c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e60:	f000 f8ee 	bl	8009040 <prvIsQueueEmpty>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f43f af6f 	beq.w	8008d4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3730      	adds	r7, #48	; 0x30
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d14d      	bne.n	8008f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 ffbc 	bl	8009e24 <xTaskPriorityDisinherit>
 8008eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	609a      	str	r2, [r3, #8]
 8008eb4:	e043      	b.n	8008f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d119      	bne.n	8008ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6858      	ldr	r0, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	f002 fd96 	bl	800b9f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	441a      	add	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d32b      	bcc.n	8008f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	e026      	b.n	8008f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	68d8      	ldr	r0, [r3, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	f002 fd7c 	bl	800b9f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	425b      	negs	r3, r3
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d207      	bcs.n	8008f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	425b      	negs	r3, r3
 8008f26:	441a      	add	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d105      	bne.n	8008f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f46:	697b      	ldr	r3, [r7, #20]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d018      	beq.n	8008f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	441a      	add	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d303      	bcc.n	8008f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68d9      	ldr	r1, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6838      	ldr	r0, [r7, #0]
 8008f90:	f002 fd32 	bl	800b9f8 <memcpy>
	}
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fa4:	f001 fc7e 	bl	800a8a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fb0:	e011      	b.n	8008fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d012      	beq.n	8008fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3324      	adds	r3, #36	; 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fd50 	bl	8009a64 <xTaskRemoveFromEventList>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fca:	f000 fe27 	bl	8009c1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dce9      	bgt.n	8008fb2 <prvUnlockQueue+0x16>
 8008fde:	e000      	b.n	8008fe2 <prvUnlockQueue+0x46>
					break;
 8008fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	22ff      	movs	r2, #255	; 0xff
 8008fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fea:	f001 fc8b 	bl	800a904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fee:	f001 fc59 	bl	800a8a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ffa:	e011      	b.n	8009020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d012      	beq.n	800902a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3310      	adds	r3, #16
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fd2b 	bl	8009a64 <xTaskRemoveFromEventList>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009014:	f000 fe02 	bl	8009c1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	3b01      	subs	r3, #1
 800901c:	b2db      	uxtb	r3, r3
 800901e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dce9      	bgt.n	8008ffc <prvUnlockQueue+0x60>
 8009028:	e000      	b.n	800902c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800902a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	22ff      	movs	r2, #255	; 0xff
 8009030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009034:	f001 fc66 	bl	800a904 <vPortExitCritical>
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009048:	f001 fc2c 	bl	800a8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	e001      	b.n	800905e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800905e:	f001 fc51 	bl	800a904 <vPortExitCritical>

	return xReturn;
 8009062:	68fb      	ldr	r3, [r7, #12]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009074:	f001 fc16 	bl	800a8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009080:	429a      	cmp	r2, r3
 8009082:	d102      	bne.n	800908a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e001      	b.n	800908e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800908e:	f001 fc39 	bl	800a904 <vPortExitCritical>

	return xReturn;
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e014      	b.n	80090d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090ac:	4a0f      	ldr	r2, [pc, #60]	; (80090ec <vQueueAddToRegistry+0x50>)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10b      	bne.n	80090d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090b8:	490c      	ldr	r1, [pc, #48]	; (80090ec <vQueueAddToRegistry+0x50>)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090c2:	4a0a      	ldr	r2, [pc, #40]	; (80090ec <vQueueAddToRegistry+0x50>)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090ce:	e006      	b.n	80090de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b07      	cmp	r3, #7
 80090da:	d9e7      	bls.n	80090ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000a08 	.word	0x20000a08

080090f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009100:	f001 fbd0 	bl	800a8a4 <vPortEnterCritical>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800910a:	b25b      	sxtb	r3, r3
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009110:	d103      	bne.n	800911a <vQueueWaitForMessageRestricted+0x2a>
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009120:	b25b      	sxtb	r3, r3
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d103      	bne.n	8009130 <vQueueWaitForMessageRestricted+0x40>
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009130:	f001 fbe8 	bl	800a904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	3324      	adds	r3, #36	; 0x24
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fc61 	bl	8009a0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800914a:	6978      	ldr	r0, [r7, #20]
 800914c:	f7ff ff26 	bl	8008f9c <prvUnlockQueue>
	}
 8009150:	bf00      	nop
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08e      	sub	sp, #56	; 0x38
 800915c:	af04      	add	r7, sp, #16
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xTaskCreateStatic+0x2a>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	623b      	str	r3, [r7, #32]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xTaskCreateStatic+0x46>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	61fb      	str	r3, [r7, #28]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800919e:	23bc      	movs	r3, #188	; 0xbc
 80091a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2bbc      	cmp	r3, #188	; 0xbc
 80091a6:	d00a      	beq.n	80091be <xTaskCreateStatic+0x66>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61bb      	str	r3, [r7, #24]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01e      	beq.n	8009204 <xTaskCreateStatic+0xac>
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01b      	beq.n	8009204 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091de:	2300      	movs	r3, #0
 80091e0:	9303      	str	r3, [sp, #12]
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	9302      	str	r3, [sp, #8]
 80091e6:	f107 0314 	add.w	r3, r7, #20
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f850 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091fe:	f000 f8f3 	bl	80093e8 <prvAddNewTaskToReadyList>
 8009202:	e001      	b.n	8009208 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009208:	697b      	ldr	r3, [r7, #20]
	}
 800920a:	4618      	mov	r0, r3
 800920c:	3728      	adds	r7, #40	; 0x28
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009212:	b580      	push	{r7, lr}
 8009214:	b08c      	sub	sp, #48	; 0x30
 8009216:	af04      	add	r7, sp, #16
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4618      	mov	r0, r3
 8009228:	f001 fc5e 	bl	800aae8 <pvPortMalloc>
 800922c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00e      	beq.n	8009252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009234:	20bc      	movs	r0, #188	; 0xbc
 8009236:	f001 fc57 	bl	800aae8 <pvPortMalloc>
 800923a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
 8009248:	e005      	b.n	8009256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	f001 fd18 	bl	800ac80 <vPortFree>
 8009250:	e001      	b.n	8009256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d017      	beq.n	800928c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	2300      	movs	r3, #0
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	9302      	str	r3, [sp, #8]
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f80e 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009280:	69f8      	ldr	r0, [r7, #28]
 8009282:	f000 f8b1 	bl	80093e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009286:	2301      	movs	r3, #1
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e002      	b.n	8009292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800928c:	f04f 33ff 	mov.w	r3, #4294967295
 8009290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009292:	69bb      	ldr	r3, [r7, #24]
	}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	461a      	mov	r2, r3
 80092b4:	21a5      	movs	r1, #165	; 0xa5
 80092b6:	f002 fbad 	bl	800ba14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092c4:	3b01      	subs	r3, #1
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01f      	beq.n	800933a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092fa:	2300      	movs	r3, #0
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	e012      	b.n	8009326 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	7819      	ldrb	r1, [r3, #0]
 8009308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	3334      	adds	r3, #52	; 0x34
 8009310:	460a      	mov	r2, r1
 8009312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4413      	add	r3, r2
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d006      	beq.n	800932e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	3301      	adds	r3, #1
 8009324:	61fb      	str	r3, [r7, #28]
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	2b0f      	cmp	r3, #15
 800932a:	d9e9      	bls.n	8009300 <prvInitialiseNewTask+0x64>
 800932c:	e000      	b.n	8009330 <prvInitialiseNewTask+0x94>
			{
				break;
 800932e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009338:	e003      	b.n	8009342 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	2b37      	cmp	r3, #55	; 0x37
 8009346:	d901      	bls.n	800934c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009348:	2337      	movs	r3, #55	; 0x37
 800934a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	2200      	movs	r2, #0
 800935c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	3304      	adds	r3, #4
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff f978 	bl	8008658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	3318      	adds	r3, #24
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff f973 	bl	8008658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	2200      	movs	r2, #0
 8009394:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	3354      	adds	r3, #84	; 0x54
 800939c:	2260      	movs	r2, #96	; 0x60
 800939e:	2100      	movs	r1, #0
 80093a0:	4618      	mov	r0, r3
 80093a2:	f002 fb37 	bl	800ba14 <memset>
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	4a0c      	ldr	r2, [pc, #48]	; (80093dc <prvInitialiseNewTask+0x140>)
 80093aa:	659a      	str	r2, [r3, #88]	; 0x58
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	4a0c      	ldr	r2, [pc, #48]	; (80093e0 <prvInitialiseNewTask+0x144>)
 80093b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	4a0b      	ldr	r2, [pc, #44]	; (80093e4 <prvInitialiseNewTask+0x148>)
 80093b6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	69b8      	ldr	r0, [r7, #24]
 80093be:	f001 f941 	bl	800a644 <pxPortInitialiseStack>
 80093c2:	4602      	mov	r2, r0
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093d4:	bf00      	nop
 80093d6:	3720      	adds	r7, #32
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	0800bcdc 	.word	0x0800bcdc
 80093e0:	0800bcfc 	.word	0x0800bcfc
 80093e4:	0800bcbc 	.word	0x0800bcbc

080093e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093f0:	f001 fa58 	bl	800a8a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093f4:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <prvAddNewTaskToReadyList+0xc4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	4a2c      	ldr	r2, [pc, #176]	; (80094ac <prvAddNewTaskToReadyList+0xc4>)
 80093fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093fe:	4b2c      	ldr	r3, [pc, #176]	; (80094b0 <prvAddNewTaskToReadyList+0xc8>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d109      	bne.n	800941a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009406:	4a2a      	ldr	r2, [pc, #168]	; (80094b0 <prvAddNewTaskToReadyList+0xc8>)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800940c:	4b27      	ldr	r3, [pc, #156]	; (80094ac <prvAddNewTaskToReadyList+0xc4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d110      	bne.n	8009436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009414:	f000 fc26 	bl	8009c64 <prvInitialiseTaskLists>
 8009418:	e00d      	b.n	8009436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800941a:	4b26      	ldr	r3, [pc, #152]	; (80094b4 <prvAddNewTaskToReadyList+0xcc>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009422:	4b23      	ldr	r3, [pc, #140]	; (80094b0 <prvAddNewTaskToReadyList+0xc8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	429a      	cmp	r2, r3
 800942e:	d802      	bhi.n	8009436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009430:	4a1f      	ldr	r2, [pc, #124]	; (80094b0 <prvAddNewTaskToReadyList+0xc8>)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009436:	4b20      	ldr	r3, [pc, #128]	; (80094b8 <prvAddNewTaskToReadyList+0xd0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	4a1e      	ldr	r2, [pc, #120]	; (80094b8 <prvAddNewTaskToReadyList+0xd0>)
 800943e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009440:	4b1d      	ldr	r3, [pc, #116]	; (80094b8 <prvAddNewTaskToReadyList+0xd0>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944c:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <prvAddNewTaskToReadyList+0xd4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d903      	bls.n	800945c <prvAddNewTaskToReadyList+0x74>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	4a18      	ldr	r2, [pc, #96]	; (80094bc <prvAddNewTaskToReadyList+0xd4>)
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <prvAddNewTaskToReadyList+0xd8>)
 800946a:	441a      	add	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3304      	adds	r3, #4
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f7ff f8fd 	bl	8008672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009478:	f001 fa44 	bl	800a904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800947c:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <prvAddNewTaskToReadyList+0xcc>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00e      	beq.n	80094a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009484:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <prvAddNewTaskToReadyList+0xc8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	429a      	cmp	r2, r3
 8009490:	d207      	bcs.n	80094a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009492:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <prvAddNewTaskToReadyList+0xdc>)
 8009494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000f1c 	.word	0x20000f1c
 80094b0:	20000a48 	.word	0x20000a48
 80094b4:	20000f28 	.word	0x20000f28
 80094b8:	20000f38 	.word	0x20000f38
 80094bc:	20000f24 	.word	0x20000f24
 80094c0:	20000a4c 	.word	0x20000a4c
 80094c4:	e000ed04 	.word	0xe000ed04

080094c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d017      	beq.n	800950a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094da:	4b13      	ldr	r3, [pc, #76]	; (8009528 <vTaskDelay+0x60>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00a      	beq.n	80094f8 <vTaskDelay+0x30>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	60bb      	str	r3, [r7, #8]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094f8:	f000 f88a 	bl	8009610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094fc:	2100      	movs	r1, #0
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fcfe 	bl	8009f00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009504:	f000 f892 	bl	800962c <xTaskResumeAll>
 8009508:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d107      	bne.n	8009520 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009510:	4b06      	ldr	r3, [pc, #24]	; (800952c <vTaskDelay+0x64>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20000f44 	.word	0x20000f44
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08a      	sub	sp, #40	; 0x28
 8009534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800953a:	2300      	movs	r3, #0
 800953c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800953e:	463a      	mov	r2, r7
 8009540:	1d39      	adds	r1, r7, #4
 8009542:	f107 0308 	add.w	r3, r7, #8
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff f832 	bl	80085b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	9202      	str	r2, [sp, #8]
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	2300      	movs	r3, #0
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	2300      	movs	r3, #0
 800955c:	460a      	mov	r2, r1
 800955e:	4924      	ldr	r1, [pc, #144]	; (80095f0 <vTaskStartScheduler+0xc0>)
 8009560:	4824      	ldr	r0, [pc, #144]	; (80095f4 <vTaskStartScheduler+0xc4>)
 8009562:	f7ff fdf9 	bl	8009158 <xTaskCreateStatic>
 8009566:	4603      	mov	r3, r0
 8009568:	4a23      	ldr	r2, [pc, #140]	; (80095f8 <vTaskStartScheduler+0xc8>)
 800956a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800956c:	4b22      	ldr	r3, [pc, #136]	; (80095f8 <vTaskStartScheduler+0xc8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	e001      	b.n	800957e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d102      	bne.n	800958a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009584:	f000 fd10 	bl	8009fa8 <xTimerCreateTimerTask>
 8009588:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d11b      	bne.n	80095c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	613b      	str	r3, [r7, #16]
}
 80095a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095a4:	4b15      	ldr	r3, [pc, #84]	; (80095fc <vTaskStartScheduler+0xcc>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3354      	adds	r3, #84	; 0x54
 80095aa:	4a15      	ldr	r2, [pc, #84]	; (8009600 <vTaskStartScheduler+0xd0>)
 80095ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095ae:	4b15      	ldr	r3, [pc, #84]	; (8009604 <vTaskStartScheduler+0xd4>)
 80095b0:	f04f 32ff 	mov.w	r2, #4294967295
 80095b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095b6:	4b14      	ldr	r3, [pc, #80]	; (8009608 <vTaskStartScheduler+0xd8>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095bc:	4b13      	ldr	r3, [pc, #76]	; (800960c <vTaskStartScheduler+0xdc>)
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095c2:	f001 f8cd 	bl	800a760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095c6:	e00e      	b.n	80095e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ce:	d10a      	bne.n	80095e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <vTaskStartScheduler+0xb4>
}
 80095e6:	bf00      	nop
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	0800bbe0 	.word	0x0800bbe0
 80095f4:	08009c35 	.word	0x08009c35
 80095f8:	20000f40 	.word	0x20000f40
 80095fc:	20000a48 	.word	0x20000a48
 8009600:	20000110 	.word	0x20000110
 8009604:	20000f3c 	.word	0x20000f3c
 8009608:	20000f28 	.word	0x20000f28
 800960c:	20000f20 	.word	0x20000f20

08009610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009614:	4b04      	ldr	r3, [pc, #16]	; (8009628 <vTaskSuspendAll+0x18>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	4a03      	ldr	r2, [pc, #12]	; (8009628 <vTaskSuspendAll+0x18>)
 800961c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800961e:	bf00      	nop
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	20000f44 	.word	0x20000f44

0800962c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800963a:	4b42      	ldr	r3, [pc, #264]	; (8009744 <xTaskResumeAll+0x118>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <xTaskResumeAll+0x2c>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	603b      	str	r3, [r7, #0]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009658:	f001 f924 	bl	800a8a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800965c:	4b39      	ldr	r3, [pc, #228]	; (8009744 <xTaskResumeAll+0x118>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3b01      	subs	r3, #1
 8009662:	4a38      	ldr	r2, [pc, #224]	; (8009744 <xTaskResumeAll+0x118>)
 8009664:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009666:	4b37      	ldr	r3, [pc, #220]	; (8009744 <xTaskResumeAll+0x118>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d162      	bne.n	8009734 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800966e:	4b36      	ldr	r3, [pc, #216]	; (8009748 <xTaskResumeAll+0x11c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d05e      	beq.n	8009734 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009676:	e02f      	b.n	80096d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009678:	4b34      	ldr	r3, [pc, #208]	; (800974c <xTaskResumeAll+0x120>)
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3318      	adds	r3, #24
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff f851 	bl	800872c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3304      	adds	r3, #4
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff f84c 	bl	800872c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009698:	4b2d      	ldr	r3, [pc, #180]	; (8009750 <xTaskResumeAll+0x124>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d903      	bls.n	80096a8 <xTaskResumeAll+0x7c>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	4a2a      	ldr	r2, [pc, #168]	; (8009750 <xTaskResumeAll+0x124>)
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4a27      	ldr	r2, [pc, #156]	; (8009754 <xTaskResumeAll+0x128>)
 80096b6:	441a      	add	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fe ffd7 	bl	8008672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c8:	4b23      	ldr	r3, [pc, #140]	; (8009758 <xTaskResumeAll+0x12c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d302      	bcc.n	80096d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096d2:	4b22      	ldr	r3, [pc, #136]	; (800975c <xTaskResumeAll+0x130>)
 80096d4:	2201      	movs	r2, #1
 80096d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096d8:	4b1c      	ldr	r3, [pc, #112]	; (800974c <xTaskResumeAll+0x120>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1cb      	bne.n	8009678 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096e6:	f000 fb5f 	bl	8009da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096ea:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <xTaskResumeAll+0x134>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d010      	beq.n	8009718 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096f6:	f000 f847 	bl	8009788 <xTaskIncrementTick>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009700:	4b16      	ldr	r3, [pc, #88]	; (800975c <xTaskResumeAll+0x130>)
 8009702:	2201      	movs	r2, #1
 8009704:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3b01      	subs	r3, #1
 800970a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f1      	bne.n	80096f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009712:	4b13      	ldr	r3, [pc, #76]	; (8009760 <xTaskResumeAll+0x134>)
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009718:	4b10      	ldr	r3, [pc, #64]	; (800975c <xTaskResumeAll+0x130>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009724:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <xTaskResumeAll+0x138>)
 8009726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009734:	f001 f8e6 	bl	800a904 <vPortExitCritical>

	return xAlreadyYielded;
 8009738:	68bb      	ldr	r3, [r7, #8]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000f44 	.word	0x20000f44
 8009748:	20000f1c 	.word	0x20000f1c
 800974c:	20000edc 	.word	0x20000edc
 8009750:	20000f24 	.word	0x20000f24
 8009754:	20000a4c 	.word	0x20000a4c
 8009758:	20000a48 	.word	0x20000a48
 800975c:	20000f30 	.word	0x20000f30
 8009760:	20000f2c 	.word	0x20000f2c
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800976e:	4b05      	ldr	r3, [pc, #20]	; (8009784 <xTaskGetTickCount+0x1c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009774:	687b      	ldr	r3, [r7, #4]
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000f20 	.word	0x20000f20

08009788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009792:	4b4f      	ldr	r3, [pc, #316]	; (80098d0 <xTaskIncrementTick+0x148>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f040 808f 	bne.w	80098ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800979c:	4b4d      	ldr	r3, [pc, #308]	; (80098d4 <xTaskIncrementTick+0x14c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097a4:	4a4b      	ldr	r2, [pc, #300]	; (80098d4 <xTaskIncrementTick+0x14c>)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d120      	bne.n	80097f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097b0:	4b49      	ldr	r3, [pc, #292]	; (80098d8 <xTaskIncrementTick+0x150>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	603b      	str	r3, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	e7fe      	b.n	80097ce <xTaskIncrementTick+0x46>
 80097d0:	4b41      	ldr	r3, [pc, #260]	; (80098d8 <xTaskIncrementTick+0x150>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	4b41      	ldr	r3, [pc, #260]	; (80098dc <xTaskIncrementTick+0x154>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a3f      	ldr	r2, [pc, #252]	; (80098d8 <xTaskIncrementTick+0x150>)
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	4a3f      	ldr	r2, [pc, #252]	; (80098dc <xTaskIncrementTick+0x154>)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	4b3e      	ldr	r3, [pc, #248]	; (80098e0 <xTaskIncrementTick+0x158>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	4a3d      	ldr	r2, [pc, #244]	; (80098e0 <xTaskIncrementTick+0x158>)
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	f000 fadb 	bl	8009da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097f2:	4b3c      	ldr	r3, [pc, #240]	; (80098e4 <xTaskIncrementTick+0x15c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d349      	bcc.n	8009890 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097fc:	4b36      	ldr	r3, [pc, #216]	; (80098d8 <xTaskIncrementTick+0x150>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009806:	4b37      	ldr	r3, [pc, #220]	; (80098e4 <xTaskIncrementTick+0x15c>)
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	601a      	str	r2, [r3, #0]
					break;
 800980e:	e03f      	b.n	8009890 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009810:	4b31      	ldr	r3, [pc, #196]	; (80098d8 <xTaskIncrementTick+0x150>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	429a      	cmp	r2, r3
 8009826:	d203      	bcs.n	8009830 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009828:	4a2e      	ldr	r2, [pc, #184]	; (80098e4 <xTaskIncrementTick+0x15c>)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800982e:	e02f      	b.n	8009890 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe ff79 	bl	800872c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	3318      	adds	r3, #24
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe ff70 	bl	800872c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	4b25      	ldr	r3, [pc, #148]	; (80098e8 <xTaskIncrementTick+0x160>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	d903      	bls.n	8009860 <xTaskIncrementTick+0xd8>
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a22      	ldr	r2, [pc, #136]	; (80098e8 <xTaskIncrementTick+0x160>)
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4a1f      	ldr	r2, [pc, #124]	; (80098ec <xTaskIncrementTick+0x164>)
 800986e:	441a      	add	r2, r3
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	3304      	adds	r3, #4
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7fe fefb 	bl	8008672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009880:	4b1b      	ldr	r3, [pc, #108]	; (80098f0 <xTaskIncrementTick+0x168>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009886:	429a      	cmp	r2, r3
 8009888:	d3b8      	bcc.n	80097fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800988a:	2301      	movs	r3, #1
 800988c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800988e:	e7b5      	b.n	80097fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009890:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <xTaskIncrementTick+0x168>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009896:	4915      	ldr	r1, [pc, #84]	; (80098ec <xTaskIncrementTick+0x164>)
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d901      	bls.n	80098ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098a8:	2301      	movs	r3, #1
 80098aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098ac:	4b11      	ldr	r3, [pc, #68]	; (80098f4 <xTaskIncrementTick+0x16c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e004      	b.n	80098c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098ba:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <xTaskIncrementTick+0x170>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3301      	adds	r3, #1
 80098c0:	4a0d      	ldr	r2, [pc, #52]	; (80098f8 <xTaskIncrementTick+0x170>)
 80098c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098c4:	697b      	ldr	r3, [r7, #20]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000f44 	.word	0x20000f44
 80098d4:	20000f20 	.word	0x20000f20
 80098d8:	20000ed4 	.word	0x20000ed4
 80098dc:	20000ed8 	.word	0x20000ed8
 80098e0:	20000f34 	.word	0x20000f34
 80098e4:	20000f3c 	.word	0x20000f3c
 80098e8:	20000f24 	.word	0x20000f24
 80098ec:	20000a4c 	.word	0x20000a4c
 80098f0:	20000a48 	.word	0x20000a48
 80098f4:	20000f30 	.word	0x20000f30
 80098f8:	20000f2c 	.word	0x20000f2c

080098fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009902:	4b2a      	ldr	r3, [pc, #168]	; (80099ac <vTaskSwitchContext+0xb0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800990a:	4b29      	ldr	r3, [pc, #164]	; (80099b0 <vTaskSwitchContext+0xb4>)
 800990c:	2201      	movs	r2, #1
 800990e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009910:	e046      	b.n	80099a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009912:	4b27      	ldr	r3, [pc, #156]	; (80099b0 <vTaskSwitchContext+0xb4>)
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009918:	4b26      	ldr	r3, [pc, #152]	; (80099b4 <vTaskSwitchContext+0xb8>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	e010      	b.n	8009942 <vTaskSwitchContext+0x46>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10a      	bne.n	800993c <vTaskSwitchContext+0x40>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	607b      	str	r3, [r7, #4]
}
 8009938:	bf00      	nop
 800993a:	e7fe      	b.n	800993a <vTaskSwitchContext+0x3e>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3b01      	subs	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
 8009942:	491d      	ldr	r1, [pc, #116]	; (80099b8 <vTaskSwitchContext+0xbc>)
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0e4      	beq.n	8009920 <vTaskSwitchContext+0x24>
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4a15      	ldr	r2, [pc, #84]	; (80099b8 <vTaskSwitchContext+0xbc>)
 8009962:	4413      	add	r3, r2
 8009964:	60bb      	str	r3, [r7, #8]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	605a      	str	r2, [r3, #4]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	3308      	adds	r3, #8
 8009978:	429a      	cmp	r2, r3
 800997a:	d104      	bne.n	8009986 <vTaskSwitchContext+0x8a>
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	605a      	str	r2, [r3, #4]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	4a0b      	ldr	r2, [pc, #44]	; (80099bc <vTaskSwitchContext+0xc0>)
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	4a08      	ldr	r2, [pc, #32]	; (80099b4 <vTaskSwitchContext+0xb8>)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009996:	4b09      	ldr	r3, [pc, #36]	; (80099bc <vTaskSwitchContext+0xc0>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3354      	adds	r3, #84	; 0x54
 800999c:	4a08      	ldr	r2, [pc, #32]	; (80099c0 <vTaskSwitchContext+0xc4>)
 800999e:	6013      	str	r3, [r2, #0]
}
 80099a0:	bf00      	nop
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	20000f44 	.word	0x20000f44
 80099b0:	20000f30 	.word	0x20000f30
 80099b4:	20000f24 	.word	0x20000f24
 80099b8:	20000a4c 	.word	0x20000a4c
 80099bc:	20000a48 	.word	0x20000a48
 80099c0:	20000110 	.word	0x20000110

080099c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	60fb      	str	r3, [r7, #12]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ea:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <vTaskPlaceOnEventList+0x44>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3318      	adds	r3, #24
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7fe fe61 	bl	80086ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099f8:	2101      	movs	r1, #1
 80099fa:	6838      	ldr	r0, [r7, #0]
 80099fc:	f000 fa80 	bl	8009f00 <prvAddCurrentTaskToDelayedList>
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	20000a48 	.word	0x20000a48

08009a0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	617b      	str	r3, [r7, #20]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a34:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3318      	adds	r3, #24
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7fe fe18 	bl	8008672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a48:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	68b8      	ldr	r0, [r7, #8]
 8009a52:	f000 fa55 	bl	8009f00 <prvAddCurrentTaskToDelayedList>
	}
 8009a56:	bf00      	nop
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000a48 	.word	0x20000a48

08009a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10a      	bne.n	8009a90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	60fb      	str	r3, [r7, #12]
}
 8009a8c:	bf00      	nop
 8009a8e:	e7fe      	b.n	8009a8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	3318      	adds	r3, #24
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fe49 	bl	800872c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a9a:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <xTaskRemoveFromEventList+0xb0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d11d      	bne.n	8009ade <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fe40 	bl	800872c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab0:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <xTaskRemoveFromEventList+0xb4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d903      	bls.n	8009ac0 <xTaskRemoveFromEventList+0x5c>
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	4a16      	ldr	r2, [pc, #88]	; (8009b18 <xTaskRemoveFromEventList+0xb4>)
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4a13      	ldr	r2, [pc, #76]	; (8009b1c <xTaskRemoveFromEventList+0xb8>)
 8009ace:	441a      	add	r2, r3
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	f7fe fdcb 	bl	8008672 <vListInsertEnd>
 8009adc:	e005      	b.n	8009aea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	3318      	adds	r3, #24
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	480e      	ldr	r0, [pc, #56]	; (8009b20 <xTaskRemoveFromEventList+0xbc>)
 8009ae6:	f7fe fdc4 	bl	8008672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aee:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <xTaskRemoveFromEventList+0xc0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d905      	bls.n	8009b04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009af8:	2301      	movs	r3, #1
 8009afa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009afc:	4b0a      	ldr	r3, [pc, #40]	; (8009b28 <xTaskRemoveFromEventList+0xc4>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	e001      	b.n	8009b08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b08:	697b      	ldr	r3, [r7, #20]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000f44 	.word	0x20000f44
 8009b18:	20000f24 	.word	0x20000f24
 8009b1c:	20000a4c 	.word	0x20000a4c
 8009b20:	20000edc 	.word	0x20000edc
 8009b24:	20000a48 	.word	0x20000a48
 8009b28:	20000f30 	.word	0x20000f30

08009b2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b34:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <vTaskInternalSetTimeOutState+0x24>)
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b3c:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <vTaskInternalSetTimeOutState+0x28>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	605a      	str	r2, [r3, #4]
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20000f34 	.word	0x20000f34
 8009b54:	20000f20 	.word	0x20000f20

08009b58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	613b      	str	r3, [r7, #16]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	60fb      	str	r3, [r7, #12]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b9a:	f000 fe83 	bl	800a8a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b9e:	4b1d      	ldr	r3, [pc, #116]	; (8009c14 <xTaskCheckForTimeOut+0xbc>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb6:	d102      	bne.n	8009bbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	61fb      	str	r3, [r7, #28]
 8009bbc:	e023      	b.n	8009c06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <xTaskCheckForTimeOut+0xc0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d007      	beq.n	8009bda <xTaskCheckForTimeOut+0x82>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d302      	bcc.n	8009bda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	61fb      	str	r3, [r7, #28]
 8009bd8:	e015      	b.n	8009c06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d20b      	bcs.n	8009bfc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff ff9b 	bl	8009b2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	e004      	b.n	8009c06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c02:	2301      	movs	r3, #1
 8009c04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c06:	f000 fe7d 	bl	800a904 <vPortExitCritical>

	return xReturn;
 8009c0a:	69fb      	ldr	r3, [r7, #28]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3720      	adds	r7, #32
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000f20 	.word	0x20000f20
 8009c18:	20000f34 	.word	0x20000f34

08009c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c20:	4b03      	ldr	r3, [pc, #12]	; (8009c30 <vTaskMissedYield+0x14>)
 8009c22:	2201      	movs	r2, #1
 8009c24:	601a      	str	r2, [r3, #0]
}
 8009c26:	bf00      	nop
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	20000f30 	.word	0x20000f30

08009c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c3c:	f000 f852 	bl	8009ce4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c40:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <prvIdleTask+0x28>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d9f9      	bls.n	8009c3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c48:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <prvIdleTask+0x2c>)
 8009c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c58:	e7f0      	b.n	8009c3c <prvIdleTask+0x8>
 8009c5a:	bf00      	nop
 8009c5c:	20000a4c 	.word	0x20000a4c
 8009c60:	e000ed04 	.word	0xe000ed04

08009c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	607b      	str	r3, [r7, #4]
 8009c6e:	e00c      	b.n	8009c8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4a12      	ldr	r2, [pc, #72]	; (8009cc4 <prvInitialiseTaskLists+0x60>)
 8009c7c:	4413      	add	r3, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe fcca 	bl	8008618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3301      	adds	r3, #1
 8009c88:	607b      	str	r3, [r7, #4]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b37      	cmp	r3, #55	; 0x37
 8009c8e:	d9ef      	bls.n	8009c70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c90:	480d      	ldr	r0, [pc, #52]	; (8009cc8 <prvInitialiseTaskLists+0x64>)
 8009c92:	f7fe fcc1 	bl	8008618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c96:	480d      	ldr	r0, [pc, #52]	; (8009ccc <prvInitialiseTaskLists+0x68>)
 8009c98:	f7fe fcbe 	bl	8008618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c9c:	480c      	ldr	r0, [pc, #48]	; (8009cd0 <prvInitialiseTaskLists+0x6c>)
 8009c9e:	f7fe fcbb 	bl	8008618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ca2:	480c      	ldr	r0, [pc, #48]	; (8009cd4 <prvInitialiseTaskLists+0x70>)
 8009ca4:	f7fe fcb8 	bl	8008618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ca8:	480b      	ldr	r0, [pc, #44]	; (8009cd8 <prvInitialiseTaskLists+0x74>)
 8009caa:	f7fe fcb5 	bl	8008618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cae:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <prvInitialiseTaskLists+0x78>)
 8009cb0:	4a05      	ldr	r2, [pc, #20]	; (8009cc8 <prvInitialiseTaskLists+0x64>)
 8009cb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <prvInitialiseTaskLists+0x7c>)
 8009cb6:	4a05      	ldr	r2, [pc, #20]	; (8009ccc <prvInitialiseTaskLists+0x68>)
 8009cb8:	601a      	str	r2, [r3, #0]
}
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000a4c 	.word	0x20000a4c
 8009cc8:	20000eac 	.word	0x20000eac
 8009ccc:	20000ec0 	.word	0x20000ec0
 8009cd0:	20000edc 	.word	0x20000edc
 8009cd4:	20000ef0 	.word	0x20000ef0
 8009cd8:	20000f08 	.word	0x20000f08
 8009cdc:	20000ed4 	.word	0x20000ed4
 8009ce0:	20000ed8 	.word	0x20000ed8

08009ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cea:	e019      	b.n	8009d20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cec:	f000 fdda 	bl	800a8a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf0:	4b10      	ldr	r3, [pc, #64]	; (8009d34 <prvCheckTasksWaitingTermination+0x50>)
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fe fd15 	bl	800872c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d02:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <prvCheckTasksWaitingTermination+0x54>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	4a0b      	ldr	r2, [pc, #44]	; (8009d38 <prvCheckTasksWaitingTermination+0x54>)
 8009d0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <prvCheckTasksWaitingTermination+0x58>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <prvCheckTasksWaitingTermination+0x58>)
 8009d14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d16:	f000 fdf5 	bl	800a904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f810 	bl	8009d40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d20:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <prvCheckTasksWaitingTermination+0x58>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e1      	bne.n	8009cec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000ef0 	.word	0x20000ef0
 8009d38:	20000f1c 	.word	0x20000f1c
 8009d3c:	20000f04 	.word	0x20000f04

08009d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3354      	adds	r3, #84	; 0x54
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fe77 	bl	800ba40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d108      	bne.n	8009d6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 ff8d 	bl	800ac80 <vPortFree>
				vPortFree( pxTCB );
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 ff8a 	bl	800ac80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d6c:	e018      	b.n	8009da0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d103      	bne.n	8009d80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 ff81 	bl	800ac80 <vPortFree>
	}
 8009d7e:	e00f      	b.n	8009da0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d00a      	beq.n	8009da0 <prvDeleteTCB+0x60>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60fb      	str	r3, [r7, #12]
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <prvDeleteTCB+0x5e>
	}
 8009da0:	bf00      	nop
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dae:	4b0c      	ldr	r3, [pc, #48]	; (8009de0 <prvResetNextTaskUnblockTime+0x38>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009db8:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <prvResetNextTaskUnblockTime+0x3c>)
 8009dba:	f04f 32ff 	mov.w	r2, #4294967295
 8009dbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dc0:	e008      	b.n	8009dd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc2:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <prvResetNextTaskUnblockTime+0x38>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	4a04      	ldr	r2, [pc, #16]	; (8009de4 <prvResetNextTaskUnblockTime+0x3c>)
 8009dd2:	6013      	str	r3, [r2, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	20000ed4 	.word	0x20000ed4
 8009de4:	20000f3c 	.word	0x20000f3c

08009de8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dee:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <xTaskGetSchedulerState+0x34>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009df6:	2301      	movs	r3, #1
 8009df8:	607b      	str	r3, [r7, #4]
 8009dfa:	e008      	b.n	8009e0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dfc:	4b08      	ldr	r3, [pc, #32]	; (8009e20 <xTaskGetSchedulerState+0x38>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e04:	2302      	movs	r3, #2
 8009e06:	607b      	str	r3, [r7, #4]
 8009e08:	e001      	b.n	8009e0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e0e:	687b      	ldr	r3, [r7, #4]
	}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	20000f28 	.word	0x20000f28
 8009e20:	20000f44 	.word	0x20000f44

08009e24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d056      	beq.n	8009ee8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e3a:	4b2e      	ldr	r3, [pc, #184]	; (8009ef4 <xTaskPriorityDisinherit+0xd0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d00a      	beq.n	8009e5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	60fb      	str	r3, [r7, #12]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	60bb      	str	r3, [r7, #8]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e7c:	1e5a      	subs	r2, r3, #1
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d02c      	beq.n	8009ee8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d128      	bne.n	8009ee8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fc46 	bl	800872c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb8:	4b0f      	ldr	r3, [pc, #60]	; (8009ef8 <xTaskPriorityDisinherit+0xd4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d903      	bls.n	8009ec8 <xTaskPriorityDisinherit+0xa4>
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec4:	4a0c      	ldr	r2, [pc, #48]	; (8009ef8 <xTaskPriorityDisinherit+0xd4>)
 8009ec6:	6013      	str	r3, [r2, #0]
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4a09      	ldr	r2, [pc, #36]	; (8009efc <xTaskPriorityDisinherit+0xd8>)
 8009ed6:	441a      	add	r2, r3
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	3304      	adds	r3, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f7fe fbc7 	bl	8008672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ee8:	697b      	ldr	r3, [r7, #20]
	}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20000a48 	.word	0x20000a48
 8009ef8:	20000f24 	.word	0x20000f24
 8009efc:	20000a4c 	.word	0x20000a4c

08009f00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f0a:	4b21      	ldr	r3, [pc, #132]	; (8009f90 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f10:	4b20      	ldr	r3, [pc, #128]	; (8009f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3304      	adds	r3, #4
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fc08 	bl	800872c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f22:	d10a      	bne.n	8009f3a <prvAddCurrentTaskToDelayedList+0x3a>
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f2a:	4b1a      	ldr	r3, [pc, #104]	; (8009f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	4619      	mov	r1, r3
 8009f32:	4819      	ldr	r0, [pc, #100]	; (8009f98 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f34:	f7fe fb9d 	bl	8008672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f38:	e026      	b.n	8009f88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4413      	add	r3, r2
 8009f40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f42:	4b14      	ldr	r3, [pc, #80]	; (8009f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d209      	bcs.n	8009f66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f52:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	f7fe fbab 	bl	80086ba <vListInsert>
}
 8009f64:	e010      	b.n	8009f88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f66:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7fe fba1 	bl	80086ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f78:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d202      	bcs.n	8009f88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f82:	4a08      	ldr	r2, [pc, #32]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	6013      	str	r3, [r2, #0]
}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000f20 	.word	0x20000f20
 8009f94:	20000a48 	.word	0x20000a48
 8009f98:	20000f08 	.word	0x20000f08
 8009f9c:	20000ed8 	.word	0x20000ed8
 8009fa0:	20000ed4 	.word	0x20000ed4
 8009fa4:	20000f3c 	.word	0x20000f3c

08009fa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fb2:	f000 fb07 	bl	800a5c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fb6:	4b1c      	ldr	r3, [pc, #112]	; (800a028 <xTimerCreateTimerTask+0x80>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d021      	beq.n	800a002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fc6:	1d3a      	adds	r2, r7, #4
 8009fc8:	f107 0108 	add.w	r1, r7, #8
 8009fcc:	f107 030c 	add.w	r3, r7, #12
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe fb07 	bl	80085e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	9202      	str	r2, [sp, #8]
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	460a      	mov	r2, r1
 8009fe8:	4910      	ldr	r1, [pc, #64]	; (800a02c <xTimerCreateTimerTask+0x84>)
 8009fea:	4811      	ldr	r0, [pc, #68]	; (800a030 <xTimerCreateTimerTask+0x88>)
 8009fec:	f7ff f8b4 	bl	8009158 <xTaskCreateStatic>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	4a10      	ldr	r2, [pc, #64]	; (800a034 <xTimerCreateTimerTask+0x8c>)
 8009ff4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <xTimerCreateTimerTask+0x8c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ffe:	2301      	movs	r3, #1
 800a000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	613b      	str	r3, [r7, #16]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a01e:	697b      	ldr	r3, [r7, #20]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000f78 	.word	0x20000f78
 800a02c:	0800bbe8 	.word	0x0800bbe8
 800a030:	0800a16d 	.word	0x0800a16d
 800a034:	20000f7c 	.word	0x20000f7c

0800a038 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08a      	sub	sp, #40	; 0x28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a046:	2300      	movs	r3, #0
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	623b      	str	r3, [r7, #32]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a066:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d02a      	beq.n	800a0c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b05      	cmp	r3, #5
 800a07e:	dc18      	bgt.n	800a0b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a080:	f7ff feb2 	bl	8009de8 <xTaskGetSchedulerState>
 800a084:	4603      	mov	r3, r0
 800a086:	2b02      	cmp	r3, #2
 800a088:	d109      	bne.n	800a09e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	f107 0110 	add.w	r1, r7, #16
 800a092:	2300      	movs	r3, #0
 800a094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a096:	f7fe fc77 	bl	8008988 <xQueueGenericSend>
 800a09a:	6278      	str	r0, [r7, #36]	; 0x24
 800a09c:	e012      	b.n	800a0c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a09e:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	f107 0110 	add.w	r1, r7, #16
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f7fe fc6d 	bl	8008988 <xQueueGenericSend>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24
 800a0b0:	e008      	b.n	800a0c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0b2:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <xTimerGenericCommand+0x98>)
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f107 0110 	add.w	r1, r7, #16
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	f7fe fd61 	bl	8008b84 <xQueueGenericSendFromISR>
 800a0c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3728      	adds	r7, #40	; 0x28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000f78 	.word	0x20000f78

0800a0d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0de:	4b22      	ldr	r3, [pc, #136]	; (800a168 <prvProcessExpiredTimer+0x94>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fb1d 	bl	800872c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d022      	beq.n	800a146 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	699a      	ldr	r2, [r3, #24]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	18d1      	adds	r1, r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	6978      	ldr	r0, [r7, #20]
 800a10e:	f000 f8d1 	bl	800a2b4 <prvInsertTimerInActiveList>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01f      	beq.n	800a158 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a118:	2300      	movs	r3, #0
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2300      	movs	r3, #0
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	2100      	movs	r1, #0
 800a122:	6978      	ldr	r0, [r7, #20]
 800a124:	f7ff ff88 	bl	800a038 <xTimerGenericCommand>
 800a128:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d113      	bne.n	800a158 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a14c:	f023 0301 	bic.w	r3, r3, #1
 800a150:	b2da      	uxtb	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	6978      	ldr	r0, [r7, #20]
 800a15e:	4798      	blx	r3
}
 800a160:	bf00      	nop
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000f70 	.word	0x20000f70

0800a16c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a174:	f107 0308 	add.w	r3, r7, #8
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 f857 	bl	800a22c <prvGetNextExpireTime>
 800a17e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4619      	mov	r1, r3
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 f803 	bl	800a190 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a18a:	f000 f8d5 	bl	800a338 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a18e:	e7f1      	b.n	800a174 <prvTimerTask+0x8>

0800a190 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a19a:	f7ff fa39 	bl	8009610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f866 	bl	800a274 <prvSampleTimeNow>
 800a1a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d130      	bne.n	800a212 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <prvProcessTimerOrBlockTask+0x3c>
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d806      	bhi.n	800a1cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1be:	f7ff fa35 	bl	800962c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff ff85 	bl	800a0d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ca:	e024      	b.n	800a216 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d008      	beq.n	800a1e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <prvProcessTimerOrBlockTask+0x90>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <prvProcessTimerOrBlockTask+0x50>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e000      	b.n	800a1e2 <prvProcessTimerOrBlockTask+0x52>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1e4:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <prvProcessTimerOrBlockTask+0x94>)
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f7fe ff7d 	bl	80090f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1f6:	f7ff fa19 	bl	800962c <xTaskResumeAll>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a200:	4b09      	ldr	r3, [pc, #36]	; (800a228 <prvProcessTimerOrBlockTask+0x98>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
}
 800a210:	e001      	b.n	800a216 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a212:	f7ff fa0b 	bl	800962c <xTaskResumeAll>
}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000f74 	.word	0x20000f74
 800a224:	20000f78 	.word	0x20000f78
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a234:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <prvGetNextExpireTime+0x44>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <prvGetNextExpireTime+0x16>
 800a23e:	2201      	movs	r2, #1
 800a240:	e000      	b.n	800a244 <prvGetNextExpireTime+0x18>
 800a242:	2200      	movs	r2, #0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d105      	bne.n	800a25c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <prvGetNextExpireTime+0x44>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	e001      	b.n	800a260 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a260:	68fb      	ldr	r3, [r7, #12]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	20000f70 	.word	0x20000f70

0800a274 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a27c:	f7ff fa74 	bl	8009768 <xTaskGetTickCount>
 800a280:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a282:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <prvSampleTimeNow+0x3c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d205      	bcs.n	800a298 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a28c:	f000 f936 	bl	800a4fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e002      	b.n	800a29e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a29e:	4a04      	ldr	r2, [pc, #16]	; (800a2b0 <prvSampleTimeNow+0x3c>)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000f80 	.word	0x20000f80

0800a2b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d812      	bhi.n	800a300 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d302      	bcc.n	800a2ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	e01b      	b.n	800a326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2ee:	4b10      	ldr	r3, [pc, #64]	; (800a330 <prvInsertTimerInActiveList+0x7c>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f7fe f9de 	bl	80086ba <vListInsert>
 800a2fe:	e012      	b.n	800a326 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d206      	bcs.n	800a316 <prvInsertTimerInActiveList+0x62>
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a310:	2301      	movs	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e007      	b.n	800a326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a316:	4b07      	ldr	r3, [pc, #28]	; (800a334 <prvInsertTimerInActiveList+0x80>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3304      	adds	r3, #4
 800a31e:	4619      	mov	r1, r3
 800a320:	4610      	mov	r0, r2
 800a322:	f7fe f9ca 	bl	80086ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a326:	697b      	ldr	r3, [r7, #20]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20000f74 	.word	0x20000f74
 800a334:	20000f70 	.word	0x20000f70

0800a338 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08e      	sub	sp, #56	; 0x38
 800a33c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a33e:	e0ca      	b.n	800a4d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	da18      	bge.n	800a378 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a346:	1d3b      	adds	r3, r7, #4
 800a348:	3304      	adds	r3, #4
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10a      	bne.n	800a368 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	61fb      	str	r3, [r7, #28]
}
 800a364:	bf00      	nop
 800a366:	e7fe      	b.n	800a366 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a36e:	6850      	ldr	r0, [r2, #4]
 800a370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a372:	6892      	ldr	r2, [r2, #8]
 800a374:	4611      	mov	r1, r2
 800a376:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f2c0 80aa 	blt.w	800a4d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d004      	beq.n	800a396 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	3304      	adds	r3, #4
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe f9cb 	bl	800872c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a396:	463b      	mov	r3, r7
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff ff6b 	bl	800a274 <prvSampleTimeNow>
 800a39e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b09      	cmp	r3, #9
 800a3a4:	f200 8097 	bhi.w	800a4d6 <prvProcessReceivedCommands+0x19e>
 800a3a8:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <prvProcessReceivedCommands+0x78>)
 800a3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ae:	bf00      	nop
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a3d9 	.word	0x0800a3d9
 800a3bc:	0800a44d 	.word	0x0800a44d
 800a3c0:	0800a461 	.word	0x0800a461
 800a3c4:	0800a4ab 	.word	0x0800a4ab
 800a3c8:	0800a3d9 	.word	0x0800a3d9
 800a3cc:	0800a3d9 	.word	0x0800a3d9
 800a3d0:	0800a44d 	.word	0x0800a44d
 800a3d4:	0800a461 	.word	0x0800a461
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	18d1      	adds	r1, r2, r3
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f8:	f7ff ff5c 	bl	800a2b4 <prvInsertTimerInActiveList>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d069      	beq.n	800a4d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a408:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a410:	f003 0304 	and.w	r3, r3, #4
 800a414:	2b00      	cmp	r3, #0
 800a416:	d05e      	beq.n	800a4d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	441a      	add	r2, r3
 800a420:	2300      	movs	r3, #0
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	2100      	movs	r1, #0
 800a428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42a:	f7ff fe05 	bl	800a038 <xTimerGenericCommand>
 800a42e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d14f      	bne.n	800a4d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	61bb      	str	r3, [r7, #24]
}
 800a448:	bf00      	nop
 800a44a:	e7fe      	b.n	800a44a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a452:	f023 0301 	bic.w	r3, r3, #1
 800a456:	b2da      	uxtb	r2, r3
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a45e:	e03a      	b.n	800a4d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	617b      	str	r3, [r7, #20]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	699a      	ldr	r2, [r3, #24]
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	18d1      	adds	r1, r2, r3
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4a4:	f7ff ff06 	bl	800a2b4 <prvInsertTimerInActiveList>
					break;
 800a4a8:	e015      	b.n	800a4d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a4b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ba:	f000 fbe1 	bl	800ac80 <vPortFree>
 800a4be:	e00a      	b.n	800a4d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4c6:	f023 0301 	bic.w	r3, r3, #1
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4d2:	e000      	b.n	800a4d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4d6:	4b08      	ldr	r3, [pc, #32]	; (800a4f8 <prvProcessReceivedCommands+0x1c0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	1d39      	adds	r1, r7, #4
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe fbec 	bl	8008cbc <xQueueReceive>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f47f af2a 	bne.w	800a340 <prvProcessReceivedCommands+0x8>
	}
}
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
 800a4f0:	3730      	adds	r7, #48	; 0x30
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000f78 	.word	0x20000f78

0800a4fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a502:	e048      	b.n	800a596 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a504:	4b2d      	ldr	r3, [pc, #180]	; (800a5bc <prvSwitchTimerLists+0xc0>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a50e:	4b2b      	ldr	r3, [pc, #172]	; (800a5bc <prvSwitchTimerLists+0xc0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fe f905 	bl	800872c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b00      	cmp	r3, #0
 800a536:	d02e      	beq.n	800a596 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	4413      	add	r3, r2
 800a540:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	429a      	cmp	r2, r3
 800a548:	d90e      	bls.n	800a568 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a556:	4b19      	ldr	r3, [pc, #100]	; (800a5bc <prvSwitchTimerLists+0xc0>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f7fe f8aa 	bl	80086ba <vListInsert>
 800a566:	e016      	b.n	800a596 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a568:	2300      	movs	r3, #0
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	2300      	movs	r3, #0
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	2100      	movs	r1, #0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fd60 	bl	800a038 <xTimerGenericCommand>
 800a578:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	603b      	str	r3, [r7, #0]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <prvSwitchTimerLists+0xc0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1b1      	bne.n	800a504 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5a0:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <prvSwitchTimerLists+0xc0>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5a6:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <prvSwitchTimerLists+0xc4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a04      	ldr	r2, [pc, #16]	; (800a5bc <prvSwitchTimerLists+0xc0>)
 800a5ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5ae:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <prvSwitchTimerLists+0xc4>)
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	6013      	str	r3, [r2, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000f70 	.word	0x20000f70
 800a5c0:	20000f74 	.word	0x20000f74

0800a5c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5ca:	f000 f96b 	bl	800a8a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5ce:	4b15      	ldr	r3, [pc, #84]	; (800a624 <prvCheckForValidListAndQueue+0x60>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d120      	bne.n	800a618 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5d6:	4814      	ldr	r0, [pc, #80]	; (800a628 <prvCheckForValidListAndQueue+0x64>)
 800a5d8:	f7fe f81e 	bl	8008618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5dc:	4813      	ldr	r0, [pc, #76]	; (800a62c <prvCheckForValidListAndQueue+0x68>)
 800a5de:	f7fe f81b 	bl	8008618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5e2:	4b13      	ldr	r3, [pc, #76]	; (800a630 <prvCheckForValidListAndQueue+0x6c>)
 800a5e4:	4a10      	ldr	r2, [pc, #64]	; (800a628 <prvCheckForValidListAndQueue+0x64>)
 800a5e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5e8:	4b12      	ldr	r3, [pc, #72]	; (800a634 <prvCheckForValidListAndQueue+0x70>)
 800a5ea:	4a10      	ldr	r2, [pc, #64]	; (800a62c <prvCheckForValidListAndQueue+0x68>)
 800a5ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	4b11      	ldr	r3, [pc, #68]	; (800a638 <prvCheckForValidListAndQueue+0x74>)
 800a5f4:	4a11      	ldr	r2, [pc, #68]	; (800a63c <prvCheckForValidListAndQueue+0x78>)
 800a5f6:	2110      	movs	r1, #16
 800a5f8:	200a      	movs	r0, #10
 800a5fa:	f7fe f929 	bl	8008850 <xQueueGenericCreateStatic>
 800a5fe:	4603      	mov	r3, r0
 800a600:	4a08      	ldr	r2, [pc, #32]	; (800a624 <prvCheckForValidListAndQueue+0x60>)
 800a602:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a604:	4b07      	ldr	r3, [pc, #28]	; (800a624 <prvCheckForValidListAndQueue+0x60>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <prvCheckForValidListAndQueue+0x60>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	490b      	ldr	r1, [pc, #44]	; (800a640 <prvCheckForValidListAndQueue+0x7c>)
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe fd42 	bl	800909c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a618:	f000 f974 	bl	800a904 <vPortExitCritical>
}
 800a61c:	bf00      	nop
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20000f78 	.word	0x20000f78
 800a628:	20000f48 	.word	0x20000f48
 800a62c:	20000f5c 	.word	0x20000f5c
 800a630:	20000f70 	.word	0x20000f70
 800a634:	20000f74 	.word	0x20000f74
 800a638:	20001024 	.word	0x20001024
 800a63c:	20000f84 	.word	0x20000f84
 800a640:	0800bbf0 	.word	0x0800bbf0

0800a644 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3b04      	subs	r3, #4
 800a654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a65c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3b04      	subs	r3, #4
 800a662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f023 0201 	bic.w	r2, r3, #1
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3b04      	subs	r3, #4
 800a672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a674:	4a0c      	ldr	r2, [pc, #48]	; (800a6a8 <pxPortInitialiseStack+0x64>)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3b14      	subs	r3, #20
 800a67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3b04      	subs	r3, #4
 800a68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f06f 0202 	mvn.w	r2, #2
 800a692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3b20      	subs	r3, #32
 800a698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a69a:	68fb      	ldr	r3, [r7, #12]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	0800a6ad 	.word	0x0800a6ad

0800a6ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6b6:	4b12      	ldr	r3, [pc, #72]	; (800a700 <prvTaskExitError+0x54>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6be:	d00a      	beq.n	800a6d6 <prvTaskExitError+0x2a>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	60fb      	str	r3, [r7, #12]
}
 800a6d2:	bf00      	nop
 800a6d4:	e7fe      	b.n	800a6d4 <prvTaskExitError+0x28>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	60bb      	str	r3, [r7, #8]
}
 800a6e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6ea:	bf00      	nop
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0fc      	beq.n	800a6ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	20000098 	.word	0x20000098
	...

0800a710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <pxCurrentTCBConst2>)
 800a712:	6819      	ldr	r1, [r3, #0]
 800a714:	6808      	ldr	r0, [r1, #0]
 800a716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	f380 8809 	msr	PSP, r0
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f04f 0000 	mov.w	r0, #0
 800a726:	f380 8811 	msr	BASEPRI, r0
 800a72a:	4770      	bx	lr
 800a72c:	f3af 8000 	nop.w

0800a730 <pxCurrentTCBConst2>:
 800a730:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop

0800a738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a738:	4808      	ldr	r0, [pc, #32]	; (800a75c <prvPortStartFirstTask+0x24>)
 800a73a:	6800      	ldr	r0, [r0, #0]
 800a73c:	6800      	ldr	r0, [r0, #0]
 800a73e:	f380 8808 	msr	MSP, r0
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8814 	msr	CONTROL, r0
 800a74a:	b662      	cpsie	i
 800a74c:	b661      	cpsie	f
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	df00      	svc	0
 800a758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a75a:	bf00      	nop
 800a75c:	e000ed08 	.word	0xe000ed08

0800a760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a766:	4b46      	ldr	r3, [pc, #280]	; (800a880 <xPortStartScheduler+0x120>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a46      	ldr	r2, [pc, #280]	; (800a884 <xPortStartScheduler+0x124>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10a      	bne.n	800a786 <xPortStartScheduler+0x26>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a786:	4b3e      	ldr	r3, [pc, #248]	; (800a880 <xPortStartScheduler+0x120>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a3f      	ldr	r2, [pc, #252]	; (800a888 <xPortStartScheduler+0x128>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d10a      	bne.n	800a7a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60fb      	str	r3, [r7, #12]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7a6:	4b39      	ldr	r3, [pc, #228]	; (800a88c <xPortStartScheduler+0x12c>)
 800a7a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	22ff      	movs	r2, #255	; 0xff
 800a7b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	4b31      	ldr	r3, [pc, #196]	; (800a890 <xPortStartScheduler+0x130>)
 800a7cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7ce:	4b31      	ldr	r3, [pc, #196]	; (800a894 <xPortStartScheduler+0x134>)
 800a7d0:	2207      	movs	r2, #7
 800a7d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7d4:	e009      	b.n	800a7ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a7d6:	4b2f      	ldr	r3, [pc, #188]	; (800a894 <xPortStartScheduler+0x134>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	4a2d      	ldr	r2, [pc, #180]	; (800a894 <xPortStartScheduler+0x134>)
 800a7de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f2:	2b80      	cmp	r3, #128	; 0x80
 800a7f4:	d0ef      	beq.n	800a7d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7f6:	4b27      	ldr	r3, [pc, #156]	; (800a894 <xPortStartScheduler+0x134>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f1c3 0307 	rsb	r3, r3, #7
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d00a      	beq.n	800a818 <xPortStartScheduler+0xb8>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	60bb      	str	r3, [r7, #8]
}
 800a814:	bf00      	nop
 800a816:	e7fe      	b.n	800a816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a818:	4b1e      	ldr	r3, [pc, #120]	; (800a894 <xPortStartScheduler+0x134>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	4a1d      	ldr	r2, [pc, #116]	; (800a894 <xPortStartScheduler+0x134>)
 800a820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a822:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <xPortStartScheduler+0x134>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a82a:	4a1a      	ldr	r2, [pc, #104]	; (800a894 <xPortStartScheduler+0x134>)
 800a82c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	b2da      	uxtb	r2, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a836:	4b18      	ldr	r3, [pc, #96]	; (800a898 <xPortStartScheduler+0x138>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a17      	ldr	r2, [pc, #92]	; (800a898 <xPortStartScheduler+0x138>)
 800a83c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a842:	4b15      	ldr	r3, [pc, #84]	; (800a898 <xPortStartScheduler+0x138>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a14      	ldr	r2, [pc, #80]	; (800a898 <xPortStartScheduler+0x138>)
 800a848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a84c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a84e:	f000 f8dd 	bl	800aa0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a852:	4b12      	ldr	r3, [pc, #72]	; (800a89c <xPortStartScheduler+0x13c>)
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a858:	f000 f8fc 	bl	800aa54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a85c:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <xPortStartScheduler+0x140>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a0f      	ldr	r2, [pc, #60]	; (800a8a0 <xPortStartScheduler+0x140>)
 800a862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a868:	f7ff ff66 	bl	800a738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a86c:	f7ff f846 	bl	80098fc <vTaskSwitchContext>
	prvTaskExitError();
 800a870:	f7ff ff1c 	bl	800a6ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	e000ed00 	.word	0xe000ed00
 800a884:	410fc271 	.word	0x410fc271
 800a888:	410fc270 	.word	0x410fc270
 800a88c:	e000e400 	.word	0xe000e400
 800a890:	20001074 	.word	0x20001074
 800a894:	20001078 	.word	0x20001078
 800a898:	e000ed20 	.word	0xe000ed20
 800a89c:	20000098 	.word	0x20000098
 800a8a0:	e000ef34 	.word	0xe000ef34

0800a8a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	607b      	str	r3, [r7, #4]
}
 800a8bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <vPortEnterCritical+0x58>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	4a0d      	ldr	r2, [pc, #52]	; (800a8fc <vPortEnterCritical+0x58>)
 800a8c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <vPortEnterCritical+0x58>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d10f      	bne.n	800a8f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <vPortEnterCritical+0x5c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	603b      	str	r3, [r7, #0]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <vPortEnterCritical+0x4a>
	}
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	20000098 	.word	0x20000098
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a90a:	4b12      	ldr	r3, [pc, #72]	; (800a954 <vPortExitCritical+0x50>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10a      	bne.n	800a928 <vPortExitCritical+0x24>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	607b      	str	r3, [r7, #4]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a928:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <vPortExitCritical+0x50>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	4a09      	ldr	r2, [pc, #36]	; (800a954 <vPortExitCritical+0x50>)
 800a930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a932:	4b08      	ldr	r3, [pc, #32]	; (800a954 <vPortExitCritical+0x50>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d105      	bne.n	800a946 <vPortExitCritical+0x42>
 800a93a:	2300      	movs	r3, #0
 800a93c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	f383 8811 	msr	BASEPRI, r3
}
 800a944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	20000098 	.word	0x20000098
	...

0800a960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a960:	f3ef 8009 	mrs	r0, PSP
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <pxCurrentTCBConst>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	f01e 0f10 	tst.w	lr, #16
 800a970:	bf08      	it	eq
 800a972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	6010      	str	r0, [r2, #0]
 800a97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a980:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a984:	f380 8811 	msr	BASEPRI, r0
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f7fe ffb4 	bl	80098fc <vTaskSwitchContext>
 800a994:	f04f 0000 	mov.w	r0, #0
 800a998:	f380 8811 	msr	BASEPRI, r0
 800a99c:	bc09      	pop	{r0, r3}
 800a99e:	6819      	ldr	r1, [r3, #0]
 800a9a0:	6808      	ldr	r0, [r1, #0]
 800a9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a6:	f01e 0f10 	tst.w	lr, #16
 800a9aa:	bf08      	it	eq
 800a9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9b0:	f380 8809 	msr	PSP, r0
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst>:
 800a9c0:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop

0800a9c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	607b      	str	r3, [r7, #4]
}
 800a9e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9e2:	f7fe fed1 	bl	8009788 <xTaskIncrementTick>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9ec:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <xPortSysTickHandler+0x40>)
 800a9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	f383 8811 	msr	BASEPRI, r3
}
 800a9fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	e000ed04 	.word	0xe000ed04

0800aa0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa10:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <vPortSetupTimerInterrupt+0x34>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa16:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <vPortSetupTimerInterrupt+0x38>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <vPortSetupTimerInterrupt+0x3c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a0a      	ldr	r2, [pc, #40]	; (800aa4c <vPortSetupTimerInterrupt+0x40>)
 800aa22:	fba2 2303 	umull	r2, r3, r2, r3
 800aa26:	099b      	lsrs	r3, r3, #6
 800aa28:	4a09      	ldr	r2, [pc, #36]	; (800aa50 <vPortSetupTimerInterrupt+0x44>)
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa2e:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <vPortSetupTimerInterrupt+0x34>)
 800aa30:	2207      	movs	r2, #7
 800aa32:	601a      	str	r2, [r3, #0]
}
 800aa34:	bf00      	nop
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	e000e010 	.word	0xe000e010
 800aa44:	e000e018 	.word	0xe000e018
 800aa48:	20000000 	.word	0x20000000
 800aa4c:	10624dd3 	.word	0x10624dd3
 800aa50:	e000e014 	.word	0xe000e014

0800aa54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa64 <vPortEnableVFP+0x10>
 800aa58:	6801      	ldr	r1, [r0, #0]
 800aa5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa5e:	6001      	str	r1, [r0, #0]
 800aa60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa62:	bf00      	nop
 800aa64:	e000ed88 	.word	0xe000ed88

0800aa68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa6e:	f3ef 8305 	mrs	r3, IPSR
 800aa72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2b0f      	cmp	r3, #15
 800aa78:	d914      	bls.n	800aaa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa7a:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <vPortValidateInterruptPriority+0x70>)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa84:	4b15      	ldr	r3, [pc, #84]	; (800aadc <vPortValidateInterruptPriority+0x74>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	7afa      	ldrb	r2, [r7, #11]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d20a      	bcs.n	800aaa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	607b      	str	r3, [r7, #4]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <vPortValidateInterruptPriority+0x78>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aaac:	4b0d      	ldr	r3, [pc, #52]	; (800aae4 <vPortValidateInterruptPriority+0x7c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d90a      	bls.n	800aaca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	603b      	str	r3, [r7, #0]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <vPortValidateInterruptPriority+0x60>
	}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	e000e3f0 	.word	0xe000e3f0
 800aadc:	20001074 	.word	0x20001074
 800aae0:	e000ed0c 	.word	0xe000ed0c
 800aae4:	20001078 	.word	0x20001078

0800aae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08a      	sub	sp, #40	; 0x28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aaf4:	f7fe fd8c 	bl	8009610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aaf8:	4b5b      	ldr	r3, [pc, #364]	; (800ac68 <pvPortMalloc+0x180>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab00:	f000 f920 	bl	800ad44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab04:	4b59      	ldr	r3, [pc, #356]	; (800ac6c <pvPortMalloc+0x184>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8093 	bne.w	800ac38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d01d      	beq.n	800ab54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab18:	2208      	movs	r2, #8
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d014      	beq.n	800ab54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f023 0307 	bic.w	r3, r3, #7
 800ab30:	3308      	adds	r3, #8
 800ab32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <pvPortMalloc+0x6c>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	617b      	str	r3, [r7, #20]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d06e      	beq.n	800ac38 <pvPortMalloc+0x150>
 800ab5a:	4b45      	ldr	r3, [pc, #276]	; (800ac70 <pvPortMalloc+0x188>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d869      	bhi.n	800ac38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab64:	4b43      	ldr	r3, [pc, #268]	; (800ac74 <pvPortMalloc+0x18c>)
 800ab66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab68:	4b42      	ldr	r3, [pc, #264]	; (800ac74 <pvPortMalloc+0x18c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab6e:	e004      	b.n	800ab7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d903      	bls.n	800ab8c <pvPortMalloc+0xa4>
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1f1      	bne.n	800ab70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab8c:	4b36      	ldr	r3, [pc, #216]	; (800ac68 <pvPortMalloc+0x180>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d050      	beq.n	800ac38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2208      	movs	r2, #8
 800ab9c:	4413      	add	r3, r2
 800ab9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	1ad2      	subs	r2, r2, r3
 800abb0:	2308      	movs	r3, #8
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d91f      	bls.n	800abf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4413      	add	r3, r2
 800abbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <pvPortMalloc+0xf8>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	613b      	str	r3, [r7, #16]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	1ad2      	subs	r2, r2, r3
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abf2:	69b8      	ldr	r0, [r7, #24]
 800abf4:	f000 f908 	bl	800ae08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abf8:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <pvPortMalloc+0x188>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	4a1b      	ldr	r2, [pc, #108]	; (800ac70 <pvPortMalloc+0x188>)
 800ac04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac06:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <pvPortMalloc+0x188>)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <pvPortMalloc+0x190>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d203      	bcs.n	800ac1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac12:	4b17      	ldr	r3, [pc, #92]	; (800ac70 <pvPortMalloc+0x188>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a18      	ldr	r2, [pc, #96]	; (800ac78 <pvPortMalloc+0x190>)
 800ac18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	4b13      	ldr	r3, [pc, #76]	; (800ac6c <pvPortMalloc+0x184>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac2e:	4b13      	ldr	r3, [pc, #76]	; (800ac7c <pvPortMalloc+0x194>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3301      	adds	r3, #1
 800ac34:	4a11      	ldr	r2, [pc, #68]	; (800ac7c <pvPortMalloc+0x194>)
 800ac36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac38:	f7fe fcf8 	bl	800962c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <pvPortMalloc+0x174>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	60fb      	str	r3, [r7, #12]
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <pvPortMalloc+0x172>
	return pvReturn;
 800ac5c:	69fb      	ldr	r3, [r7, #28]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3728      	adds	r7, #40	; 0x28
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20004c84 	.word	0x20004c84
 800ac6c:	20004c98 	.word	0x20004c98
 800ac70:	20004c88 	.word	0x20004c88
 800ac74:	20004c7c 	.word	0x20004c7c
 800ac78:	20004c8c 	.word	0x20004c8c
 800ac7c:	20004c90 	.word	0x20004c90

0800ac80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d04d      	beq.n	800ad2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac92:	2308      	movs	r3, #8
 800ac94:	425b      	negs	r3, r3
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	4413      	add	r3, r2
 800ac9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	4b24      	ldr	r3, [pc, #144]	; (800ad38 <vPortFree+0xb8>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4013      	ands	r3, r2
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10a      	bne.n	800acc4 <vPortFree+0x44>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	60fb      	str	r3, [r7, #12]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00a      	beq.n	800ace2 <vPortFree+0x62>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	60bb      	str	r3, [r7, #8]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	4b14      	ldr	r3, [pc, #80]	; (800ad38 <vPortFree+0xb8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4013      	ands	r3, r2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01e      	beq.n	800ad2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11a      	bne.n	800ad2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <vPortFree+0xb8>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	43db      	mvns	r3, r3
 800ad02:	401a      	ands	r2, r3
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad08:	f7fe fc82 	bl	8009610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <vPortFree+0xbc>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4413      	add	r3, r2
 800ad16:	4a09      	ldr	r2, [pc, #36]	; (800ad3c <vPortFree+0xbc>)
 800ad18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad1a:	6938      	ldr	r0, [r7, #16]
 800ad1c:	f000 f874 	bl	800ae08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad20:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <vPortFree+0xc0>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3301      	adds	r3, #1
 800ad26:	4a06      	ldr	r2, [pc, #24]	; (800ad40 <vPortFree+0xc0>)
 800ad28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad2a:	f7fe fc7f 	bl	800962c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad2e:	bf00      	nop
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20004c98 	.word	0x20004c98
 800ad3c:	20004c88 	.word	0x20004c88
 800ad40:	20004c94 	.word	0x20004c94

0800ad44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad50:	4b27      	ldr	r3, [pc, #156]	; (800adf0 <prvHeapInit+0xac>)
 800ad52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00c      	beq.n	800ad78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3307      	adds	r3, #7
 800ad62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0307 	bic.w	r3, r3, #7
 800ad6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	4a1f      	ldr	r2, [pc, #124]	; (800adf0 <prvHeapInit+0xac>)
 800ad74:	4413      	add	r3, r2
 800ad76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad7c:	4a1d      	ldr	r2, [pc, #116]	; (800adf4 <prvHeapInit+0xb0>)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad82:	4b1c      	ldr	r3, [pc, #112]	; (800adf4 <prvHeapInit+0xb0>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad90:	2208      	movs	r2, #8
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	1a9b      	subs	r3, r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 0307 	bic.w	r3, r3, #7
 800ad9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4a15      	ldr	r2, [pc, #84]	; (800adf8 <prvHeapInit+0xb4>)
 800ada4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ada6:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <prvHeapInit+0xb4>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2200      	movs	r2, #0
 800adac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adae:	4b12      	ldr	r3, [pc, #72]	; (800adf8 <prvHeapInit+0xb4>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adc4:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <prvHeapInit+0xb4>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	4a0a      	ldr	r2, [pc, #40]	; (800adfc <prvHeapInit+0xb8>)
 800add2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	4a09      	ldr	r2, [pc, #36]	; (800ae00 <prvHeapInit+0xbc>)
 800adda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800addc:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <prvHeapInit+0xc0>)
 800adde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ade2:	601a      	str	r2, [r3, #0]
}
 800ade4:	bf00      	nop
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	2000107c 	.word	0x2000107c
 800adf4:	20004c7c 	.word	0x20004c7c
 800adf8:	20004c84 	.word	0x20004c84
 800adfc:	20004c8c 	.word	0x20004c8c
 800ae00:	20004c88 	.word	0x20004c88
 800ae04:	20004c98 	.word	0x20004c98

0800ae08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae10:	4b28      	ldr	r3, [pc, #160]	; (800aeb4 <prvInsertBlockIntoFreeList+0xac>)
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	e002      	b.n	800ae1c <prvInsertBlockIntoFreeList+0x14>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d8f7      	bhi.n	800ae16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	4413      	add	r3, r2
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d108      	bne.n	800ae4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	441a      	add	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	441a      	add	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d118      	bne.n	800ae90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d00d      	beq.n	800ae86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	441a      	add	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e008      	b.n	800ae98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae86:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	e003      	b.n	800ae98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d002      	beq.n	800aea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aea6:	bf00      	nop
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20004c7c 	.word	0x20004c7c
 800aeb8:	20004c84 	.word	0x20004c84

0800aebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aec0:	2200      	movs	r2, #0
 800aec2:	4912      	ldr	r1, [pc, #72]	; (800af0c <MX_USB_DEVICE_Init+0x50>)
 800aec4:	4812      	ldr	r0, [pc, #72]	; (800af10 <MX_USB_DEVICE_Init+0x54>)
 800aec6:	f7fb ff2b 	bl	8006d20 <USBD_Init>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aed0:	f7f5 fe2a 	bl	8000b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aed4:	490f      	ldr	r1, [pc, #60]	; (800af14 <MX_USB_DEVICE_Init+0x58>)
 800aed6:	480e      	ldr	r0, [pc, #56]	; (800af10 <MX_USB_DEVICE_Init+0x54>)
 800aed8:	f7fb ff52 	bl	8006d80 <USBD_RegisterClass>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aee2:	f7f5 fe21 	bl	8000b28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aee6:	490c      	ldr	r1, [pc, #48]	; (800af18 <MX_USB_DEVICE_Init+0x5c>)
 800aee8:	4809      	ldr	r0, [pc, #36]	; (800af10 <MX_USB_DEVICE_Init+0x54>)
 800aeea:	f7fb fe89 	bl	8006c00 <USBD_CDC_RegisterInterface>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aef4:	f7f5 fe18 	bl	8000b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aef8:	4805      	ldr	r0, [pc, #20]	; (800af10 <MX_USB_DEVICE_Init+0x54>)
 800aefa:	f7fb ff77 	bl	8006dec <USBD_Start>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af04:	f7f5 fe10 	bl	8000b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af08:	bf00      	nop
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	200000b0 	.word	0x200000b0
 800af10:	20004c9c 	.word	0x20004c9c
 800af14:	20000018 	.word	0x20000018
 800af18:	2000009c 	.word	0x2000009c

0800af1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af20:	2200      	movs	r2, #0
 800af22:	4905      	ldr	r1, [pc, #20]	; (800af38 <CDC_Init_FS+0x1c>)
 800af24:	4805      	ldr	r0, [pc, #20]	; (800af3c <CDC_Init_FS+0x20>)
 800af26:	f7fb fe85 	bl	8006c34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af2a:	4905      	ldr	r1, [pc, #20]	; (800af40 <CDC_Init_FS+0x24>)
 800af2c:	4803      	ldr	r0, [pc, #12]	; (800af3c <CDC_Init_FS+0x20>)
 800af2e:	f7fb fea3 	bl	8006c78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af34:	4618      	mov	r0, r3
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20005778 	.word	0x20005778
 800af3c:	20004c9c 	.word	0x20004c9c
 800af40:	20004f78 	.word	0x20004f78

0800af44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
 800af60:	4613      	mov	r3, r2
 800af62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	2b23      	cmp	r3, #35	; 0x23
 800af68:	d84a      	bhi.n	800b000 <CDC_Control_FS+0xac>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <CDC_Control_FS+0x1c>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800b001 	.word	0x0800b001
 800af74:	0800b001 	.word	0x0800b001
 800af78:	0800b001 	.word	0x0800b001
 800af7c:	0800b001 	.word	0x0800b001
 800af80:	0800b001 	.word	0x0800b001
 800af84:	0800b001 	.word	0x0800b001
 800af88:	0800b001 	.word	0x0800b001
 800af8c:	0800b001 	.word	0x0800b001
 800af90:	0800b001 	.word	0x0800b001
 800af94:	0800b001 	.word	0x0800b001
 800af98:	0800b001 	.word	0x0800b001
 800af9c:	0800b001 	.word	0x0800b001
 800afa0:	0800b001 	.word	0x0800b001
 800afa4:	0800b001 	.word	0x0800b001
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800b001 	.word	0x0800b001
 800afb4:	0800b001 	.word	0x0800b001
 800afb8:	0800b001 	.word	0x0800b001
 800afbc:	0800b001 	.word	0x0800b001
 800afc0:	0800b001 	.word	0x0800b001
 800afc4:	0800b001 	.word	0x0800b001
 800afc8:	0800b001 	.word	0x0800b001
 800afcc:	0800b001 	.word	0x0800b001
 800afd0:	0800b001 	.word	0x0800b001
 800afd4:	0800b001 	.word	0x0800b001
 800afd8:	0800b001 	.word	0x0800b001
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b001 	.word	0x0800b001
 800afe4:	0800b001 	.word	0x0800b001
 800afe8:	0800b001 	.word	0x0800b001
 800afec:	0800b001 	.word	0x0800b001
 800aff0:	0800b001 	.word	0x0800b001
 800aff4:	0800b001 	.word	0x0800b001
 800aff8:	0800b001 	.word	0x0800b001
 800affc:	0800b001 	.word	0x0800b001
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b000:	bf00      	nop
  }

  return (USBD_OK);
 800b002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	4805      	ldr	r0, [pc, #20]	; (800b034 <CDC_Receive_FS+0x24>)
 800b01e:	f7fb fe2b 	bl	8006c78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b022:	4804      	ldr	r0, [pc, #16]	; (800b034 <CDC_Receive_FS+0x24>)
 800b024:	f7fb fe46 	bl	8006cb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b028:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20004c9c 	.word	0x20004c9c

0800b038 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	371c      	adds	r7, #28
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
	...

0800b05c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	4603      	mov	r3, r0
 800b064:	6039      	str	r1, [r7, #0]
 800b066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2212      	movs	r2, #18
 800b06c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b06e:	4b03      	ldr	r3, [pc, #12]	; (800b07c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	200000d0 	.word	0x200000d0

0800b080 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	6039      	str	r1, [r7, #0]
 800b08a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2204      	movs	r2, #4
 800b090:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b092:	4b03      	ldr	r3, [pc, #12]	; (800b0a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	200000f0 	.word	0x200000f0

0800b0a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	6039      	str	r1, [r7, #0]
 800b0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d105      	bne.n	800b0c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	4907      	ldr	r1, [pc, #28]	; (800b0d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0ba:	4808      	ldr	r0, [pc, #32]	; (800b0dc <USBD_FS_ProductStrDescriptor+0x38>)
 800b0bc:	f7fd f86c 	bl	8008198 <USBD_GetString>
 800b0c0:	e004      	b.n	800b0cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	4904      	ldr	r1, [pc, #16]	; (800b0d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0c6:	4805      	ldr	r0, [pc, #20]	; (800b0dc <USBD_FS_ProductStrDescriptor+0x38>)
 800b0c8:	f7fd f866 	bl	8008198 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0cc:	4b02      	ldr	r3, [pc, #8]	; (800b0d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20005f78 	.word	0x20005f78
 800b0dc:	0800bbf8 	.word	0x0800bbf8

0800b0e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	4904      	ldr	r1, [pc, #16]	; (800b100 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0f0:	4804      	ldr	r0, [pc, #16]	; (800b104 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0f2:	f7fd f851 	bl	8008198 <USBD_GetString>
  return USBD_StrDesc;
 800b0f6:	4b02      	ldr	r3, [pc, #8]	; (800b100 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20005f78 	.word	0x20005f78
 800b104:	0800bc08 	.word	0x0800bc08

0800b108 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	6039      	str	r1, [r7, #0]
 800b112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	221a      	movs	r2, #26
 800b118:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b11a:	f000 f855 	bl	800b1c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b11e:	4b02      	ldr	r3, [pc, #8]	; (800b128 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	200000f4 	.word	0x200000f4

0800b12c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	6039      	str	r1, [r7, #0]
 800b136:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d105      	bne.n	800b14a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	4907      	ldr	r1, [pc, #28]	; (800b160 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b142:	4808      	ldr	r0, [pc, #32]	; (800b164 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b144:	f7fd f828 	bl	8008198 <USBD_GetString>
 800b148:	e004      	b.n	800b154 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	4904      	ldr	r1, [pc, #16]	; (800b160 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b14e:	4805      	ldr	r0, [pc, #20]	; (800b164 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b150:	f7fd f822 	bl	8008198 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b154:	4b02      	ldr	r3, [pc, #8]	; (800b160 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20005f78 	.word	0x20005f78
 800b164:	0800bc1c 	.word	0x0800bc1c

0800b168 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	6039      	str	r1, [r7, #0]
 800b172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d105      	bne.n	800b186 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	4907      	ldr	r1, [pc, #28]	; (800b19c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b17e:	4808      	ldr	r0, [pc, #32]	; (800b1a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b180:	f7fd f80a 	bl	8008198 <USBD_GetString>
 800b184:	e004      	b.n	800b190 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	4904      	ldr	r1, [pc, #16]	; (800b19c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b18a:	4805      	ldr	r0, [pc, #20]	; (800b1a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b18c:	f7fd f804 	bl	8008198 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b190:	4b02      	ldr	r3, [pc, #8]	; (800b19c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20005f78 	.word	0x20005f78
 800b1a0:	0800bc28 	.word	0x0800bc28

0800b1a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	6039      	str	r1, [r7, #0]
 800b1ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	220c      	movs	r2, #12
 800b1b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b1b6:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	200000e4 	.word	0x200000e4

0800b1c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1ce:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <Get_SerialNum+0x44>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <Get_SerialNum+0x48>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1da:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <Get_SerialNum+0x4c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1ee:	2208      	movs	r2, #8
 800b1f0:	4909      	ldr	r1, [pc, #36]	; (800b218 <Get_SerialNum+0x50>)
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 f814 	bl	800b220 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1f8:	2204      	movs	r2, #4
 800b1fa:	4908      	ldr	r1, [pc, #32]	; (800b21c <Get_SerialNum+0x54>)
 800b1fc:	68b8      	ldr	r0, [r7, #8]
 800b1fe:	f000 f80f 	bl	800b220 <IntToUnicode>
  }
}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	1fff7a10 	.word	0x1fff7a10
 800b210:	1fff7a14 	.word	0x1fff7a14
 800b214:	1fff7a18 	.word	0x1fff7a18
 800b218:	200000f6 	.word	0x200000f6
 800b21c:	20000106 	.word	0x20000106

0800b220 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	4613      	mov	r3, r2
 800b22c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b232:	2300      	movs	r3, #0
 800b234:	75fb      	strb	r3, [r7, #23]
 800b236:	e027      	b.n	800b288 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	0f1b      	lsrs	r3, r3, #28
 800b23c:	2b09      	cmp	r3, #9
 800b23e:	d80b      	bhi.n	800b258 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	0f1b      	lsrs	r3, r3, #28
 800b244:	b2da      	uxtb	r2, r3
 800b246:	7dfb      	ldrb	r3, [r7, #23]
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	4619      	mov	r1, r3
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	440b      	add	r3, r1
 800b250:	3230      	adds	r2, #48	; 0x30
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	e00a      	b.n	800b26e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	0f1b      	lsrs	r3, r3, #28
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	4619      	mov	r1, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	440b      	add	r3, r1
 800b268:	3237      	adds	r2, #55	; 0x37
 800b26a:	b2d2      	uxtb	r2, r2
 800b26c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	011b      	lsls	r3, r3, #4
 800b272:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	3301      	adds	r3, #1
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	4413      	add	r3, r2
 800b27e:	2200      	movs	r2, #0
 800b280:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	3301      	adds	r3, #1
 800b286:	75fb      	strb	r3, [r7, #23]
 800b288:	7dfa      	ldrb	r2, [r7, #23]
 800b28a:	79fb      	ldrb	r3, [r7, #7]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d3d3      	bcc.n	800b238 <IntToUnicode+0x18>
  }
}
 800b290:	bf00      	nop
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b0a0      	sub	sp, #128	; 0x80
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
 800b2b0:	605a      	str	r2, [r3, #4]
 800b2b2:	609a      	str	r2, [r3, #8]
 800b2b4:	60da      	str	r2, [r3, #12]
 800b2b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b2b8:	f107 0310 	add.w	r3, r7, #16
 800b2bc:	225c      	movs	r2, #92	; 0x5c
 800b2be:	2100      	movs	r1, #0
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fba7 	bl	800ba14 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ce:	d156      	bne.n	800b37e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b2d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b2da:	f107 0310 	add.w	r3, r7, #16
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f7 ff42 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b2ea:	f7f5 fc1d 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	4b25      	ldr	r3, [pc, #148]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	4a24      	ldr	r2, [pc, #144]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b2f8:	f043 0301 	orr.w	r3, r3, #1
 800b2fc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2fe:	4b22      	ldr	r3, [pc, #136]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b30a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b30e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b310:	2300      	movs	r3, #0
 800b312:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b314:	2300      	movs	r3, #0
 800b316:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b318:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b31c:	4619      	mov	r1, r3
 800b31e:	481b      	ldr	r0, [pc, #108]	; (800b38c <HAL_PCD_MspInit+0xec>)
 800b320:	f7f5 ff62 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b324:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b328:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b32a:	2302      	movs	r3, #2
 800b32c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b332:	2303      	movs	r3, #3
 800b334:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b336:	230a      	movs	r3, #10
 800b338:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b33a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b33e:	4619      	mov	r1, r3
 800b340:	4812      	ldr	r0, [pc, #72]	; (800b38c <HAL_PCD_MspInit+0xec>)
 800b342:	f7f5 ff51 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b346:	4b10      	ldr	r3, [pc, #64]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34a:	4a0f      	ldr	r2, [pc, #60]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b350:	6353      	str	r3, [r2, #52]	; 0x34
 800b352:	2300      	movs	r3, #0
 800b354:	60bb      	str	r3, [r7, #8]
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35a:	4a0b      	ldr	r2, [pc, #44]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b35c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b360:	6453      	str	r3, [r2, #68]	; 0x44
 800b362:	4b09      	ldr	r3, [pc, #36]	; (800b388 <HAL_PCD_MspInit+0xe8>)
 800b364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b36a:	60bb      	str	r3, [r7, #8]
 800b36c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b36e:	2200      	movs	r2, #0
 800b370:	2105      	movs	r1, #5
 800b372:	2043      	movs	r0, #67	; 0x43
 800b374:	f7f5 ff01 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b378:	2043      	movs	r0, #67	; 0x43
 800b37a:	f7f5 ff1a 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b37e:	bf00      	nop
 800b380:	3780      	adds	r7, #128	; 0x80
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	40023800 	.word	0x40023800
 800b38c:	40020000 	.word	0x40020000

0800b390 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	f7fb fd6d 	bl	8006e86 <USBD_LL_SetupStage>
}
 800b3ac:	bf00      	nop
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b3c6:	78fa      	ldrb	r2, [r7, #3]
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	00db      	lsls	r3, r3, #3
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	440b      	add	r3, r1
 800b3d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f7fb fda7 	bl	8006f30 <USBD_LL_DataOutStage>
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b3fc:	78fa      	ldrb	r2, [r7, #3]
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	4613      	mov	r3, r2
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	4413      	add	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	440b      	add	r3, r1
 800b40a:	334c      	adds	r3, #76	; 0x4c
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	78fb      	ldrb	r3, [r7, #3]
 800b410:	4619      	mov	r1, r3
 800b412:	f7fb fe40 	bl	8007096 <USBD_LL_DataInStage>
}
 800b416:	bf00      	nop
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fb ff74 	bl	800731a <USBD_LL_SOF>
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b084      	sub	sp, #16
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b442:	2301      	movs	r3, #1
 800b444:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]
 800b452:	e008      	b.n	800b466 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d102      	bne.n	800b462 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b45c:	2301      	movs	r3, #1
 800b45e:	73fb      	strb	r3, [r7, #15]
 800b460:	e001      	b.n	800b466 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b462:	f7f5 fb61 	bl	8000b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b46c:	7bfa      	ldrb	r2, [r7, #15]
 800b46e:	4611      	mov	r1, r2
 800b470:	4618      	mov	r0, r3
 800b472:	f7fb ff14 	bl	800729e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fb febc 	bl	80071fa <USBD_LL_Reset>
}
 800b482:	bf00      	nop
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
	...

0800b48c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fb ff0f 	bl	80072be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	6812      	ldr	r2, [r2, #0]
 800b4ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4b2:	f043 0301 	orr.w	r3, r3, #1
 800b4b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d005      	beq.n	800b4cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4c0:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <HAL_PCD_SuspendCallback+0x48>)
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	4a03      	ldr	r2, [pc, #12]	; (800b4d4 <HAL_PCD_SuspendCallback+0x48>)
 800b4c6:	f043 0306 	orr.w	r3, r3, #6
 800b4ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	e000ed00 	.word	0xe000ed00

0800b4d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fb feff 	bl	80072ea <USBD_LL_Resume>
}
 800b4ec:	bf00      	nop
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b506:	78fa      	ldrb	r2, [r7, #3]
 800b508:	4611      	mov	r1, r2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fb ff57 	bl	80073be <USBD_LL_IsoOUTIncomplete>
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b52a:	78fa      	ldrb	r2, [r7, #3]
 800b52c:	4611      	mov	r1, r2
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fb ff13 	bl	800735a <USBD_LL_IsoINIncomplete>
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fb ff69 	bl	8007422 <USBD_LL_DevConnected>
}
 800b550:	bf00      	nop
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b566:	4618      	mov	r0, r3
 800b568:	f7fb ff66 	bl	8007438 <USBD_LL_DevDisconnected>
}
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d13c      	bne.n	800b5fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b584:	4a20      	ldr	r2, [pc, #128]	; (800b608 <USBD_LL_Init+0x94>)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a1e      	ldr	r2, [pc, #120]	; (800b608 <USBD_LL_Init+0x94>)
 800b590:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b594:	4b1c      	ldr	r3, [pc, #112]	; (800b608 <USBD_LL_Init+0x94>)
 800b596:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b59a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b59c:	4b1a      	ldr	r3, [pc, #104]	; (800b608 <USBD_LL_Init+0x94>)
 800b59e:	2206      	movs	r2, #6
 800b5a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b5a2:	4b19      	ldr	r3, [pc, #100]	; (800b608 <USBD_LL_Init+0x94>)
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b5a8:	4b17      	ldr	r3, [pc, #92]	; (800b608 <USBD_LL_Init+0x94>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5ae:	4b16      	ldr	r3, [pc, #88]	; (800b608 <USBD_LL_Init+0x94>)
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b5b4:	4b14      	ldr	r3, [pc, #80]	; (800b608 <USBD_LL_Init+0x94>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b5ba:	4b13      	ldr	r3, [pc, #76]	; (800b608 <USBD_LL_Init+0x94>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b5c0:	4b11      	ldr	r3, [pc, #68]	; (800b608 <USBD_LL_Init+0x94>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b5c6:	4b10      	ldr	r3, [pc, #64]	; (800b608 <USBD_LL_Init+0x94>)
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b5cc:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <USBD_LL_Init+0x94>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b5d2:	480d      	ldr	r0, [pc, #52]	; (800b608 <USBD_LL_Init+0x94>)
 800b5d4:	f7f6 f9e5 	bl	80019a2 <HAL_PCD_Init>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b5de:	f7f5 faa3 	bl	8000b28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b5e2:	2180      	movs	r1, #128	; 0x80
 800b5e4:	4808      	ldr	r0, [pc, #32]	; (800b608 <USBD_LL_Init+0x94>)
 800b5e6:	f7f7 fc70 	bl	8002eca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b5ea:	2240      	movs	r2, #64	; 0x40
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4806      	ldr	r0, [pc, #24]	; (800b608 <USBD_LL_Init+0x94>)
 800b5f0:	f7f7 fc24 	bl	8002e3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b5f4:	2280      	movs	r2, #128	; 0x80
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <USBD_LL_Init+0x94>)
 800b5fa:	f7f7 fc1f 	bl	8002e3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	20006178 	.word	0x20006178

0800b60c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b622:	4618      	mov	r0, r3
 800b624:	f7f6 fae1 	bl	8001bea <HAL_PCD_Start>
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 f990 	bl	800b954 <USBD_Get_USB_Status>
 800b634:	4603      	mov	r3, r0
 800b636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b638:	7bbb      	ldrb	r3, [r7, #14]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	461a      	mov	r2, r3
 800b650:	4603      	mov	r3, r0
 800b652:	70fb      	strb	r3, [r7, #3]
 800b654:	460b      	mov	r3, r1
 800b656:	70bb      	strb	r3, [r7, #2]
 800b658:	4613      	mov	r3, r2
 800b65a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b66a:	78bb      	ldrb	r3, [r7, #2]
 800b66c:	883a      	ldrh	r2, [r7, #0]
 800b66e:	78f9      	ldrb	r1, [r7, #3]
 800b670:	f7f6 ffdf 	bl	8002632 <HAL_PCD_EP_Open>
 800b674:	4603      	mov	r3, r0
 800b676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 f96a 	bl	800b954 <USBD_Get_USB_Status>
 800b680:	4603      	mov	r3, r0
 800b682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b684:	7bbb      	ldrb	r3, [r7, #14]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	460b      	mov	r3, r1
 800b698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6a8:	78fa      	ldrb	r2, [r7, #3]
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7f7 f828 	bl	8002702 <HAL_PCD_EP_Close>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 f94b 	bl	800b954 <USBD_Get_USB_Status>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6e6:	78fa      	ldrb	r2, [r7, #3]
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7f7 f900 	bl	80028f0 <HAL_PCD_EP_SetStall>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f92c 	bl	800b954 <USBD_Get_USB_Status>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b700:	7bbb      	ldrb	r3, [r7, #14]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b724:	78fa      	ldrb	r2, [r7, #3]
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f7 f945 	bl	80029b8 <HAL_PCD_EP_ClrStall>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b732:	7bfb      	ldrb	r3, [r7, #15]
 800b734:	4618      	mov	r0, r3
 800b736:	f000 f90d 	bl	800b954 <USBD_Get_USB_Status>
 800b73a:	4603      	mov	r3, r0
 800b73c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b75a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b75c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b760:	2b00      	cmp	r3, #0
 800b762:	da0b      	bge.n	800b77c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	4613      	mov	r3, r2
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	333e      	adds	r3, #62	; 0x3e
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	e00b      	b.n	800b794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b782:	68f9      	ldr	r1, [r7, #12]
 800b784:	4613      	mov	r3, r2
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	440b      	add	r3, r1
 800b78e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b792:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7ba:	78fa      	ldrb	r2, [r7, #3]
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7f6 ff12 	bl	80025e8 <HAL_PCD_SetAddress>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f8c2 	bl	800b954 <USBD_Get_USB_Status>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b086      	sub	sp, #24
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7fc:	7af9      	ldrb	r1, [r7, #11]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	f7f7 f82b 	bl	800285c <HAL_PCD_EP_Transmit>
 800b806:	4603      	mov	r3, r0
 800b808:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 f8a1 	bl	800b954 <USBD_Get_USB_Status>
 800b812:	4603      	mov	r3, r0
 800b814:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b816:	7dbb      	ldrb	r3, [r7, #22]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	607a      	str	r2, [r7, #4]
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	460b      	mov	r3, r1
 800b82e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b83e:	7af9      	ldrb	r1, [r7, #11]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	f7f6 ffa7 	bl	8002796 <HAL_PCD_EP_Receive>
 800b848:	4603      	mov	r3, r0
 800b84a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
 800b84e:	4618      	mov	r0, r3
 800b850:	f000 f880 	bl	800b954 <USBD_Get_USB_Status>
 800b854:	4603      	mov	r3, r0
 800b856:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b858:	7dbb      	ldrb	r3, [r7, #22]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b082      	sub	sp, #8
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b874:	78fa      	ldrb	r2, [r7, #3]
 800b876:	4611      	mov	r1, r2
 800b878:	4618      	mov	r0, r3
 800b87a:	f7f6 ffd7 	bl	800282c <HAL_PCD_EP_GetRxCount>
 800b87e:	4603      	mov	r3, r0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	460b      	mov	r3, r1
 800b892:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b894:	78fb      	ldrb	r3, [r7, #3]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <HAL_PCDEx_LPM_Callback+0x18>
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d01f      	beq.n	800b8de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b89e:	e03b      	b.n	800b918 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d007      	beq.n	800b8b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b8a8:	f7f4 fefc 	bl	80006a4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8ac:	4b1c      	ldr	r3, [pc, #112]	; (800b920 <HAL_PCDEx_LPM_Callback+0x98>)
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	4a1b      	ldr	r2, [pc, #108]	; (800b920 <HAL_PCDEx_LPM_Callback+0x98>)
 800b8b2:	f023 0306 	bic.w	r3, r3, #6
 800b8b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	6812      	ldr	r2, [r2, #0]
 800b8c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8ca:	f023 0301 	bic.w	r3, r3, #1
 800b8ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fb fd07 	bl	80072ea <USBD_LL_Resume>
    break;
 800b8dc:	e01c      	b.n	800b918 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	6812      	ldr	r2, [r2, #0]
 800b8ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8f0:	f043 0301 	orr.w	r3, r3, #1
 800b8f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fb fcde 	bl	80072be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b90a:	4b05      	ldr	r3, [pc, #20]	; (800b920 <HAL_PCDEx_LPM_Callback+0x98>)
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	4a04      	ldr	r2, [pc, #16]	; (800b920 <HAL_PCDEx_LPM_Callback+0x98>)
 800b910:	f043 0306 	orr.w	r3, r3, #6
 800b914:	6113      	str	r3, [r2, #16]
    break;
 800b916:	bf00      	nop
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	e000ed00 	.word	0xe000ed00

0800b924 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b92c:	4b03      	ldr	r3, [pc, #12]	; (800b93c <USBD_static_malloc+0x18>)
}
 800b92e:	4618      	mov	r0, r3
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	20006684 	.word	0x20006684

0800b940 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]

}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b962:	79fb      	ldrb	r3, [r7, #7]
 800b964:	2b03      	cmp	r3, #3
 800b966:	d817      	bhi.n	800b998 <USBD_Get_USB_Status+0x44>
 800b968:	a201      	add	r2, pc, #4	; (adr r2, 800b970 <USBD_Get_USB_Status+0x1c>)
 800b96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96e:	bf00      	nop
 800b970:	0800b981 	.word	0x0800b981
 800b974:	0800b987 	.word	0x0800b987
 800b978:	0800b98d 	.word	0x0800b98d
 800b97c:	0800b993 	.word	0x0800b993
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]
    break;
 800b984:	e00b      	b.n	800b99e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b986:	2303      	movs	r3, #3
 800b988:	73fb      	strb	r3, [r7, #15]
    break;
 800b98a:	e008      	b.n	800b99e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b98c:	2301      	movs	r3, #1
 800b98e:	73fb      	strb	r3, [r7, #15]
    break;
 800b990:	e005      	b.n	800b99e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b992:	2303      	movs	r3, #3
 800b994:	73fb      	strb	r3, [r7, #15]
    break;
 800b996:	e002      	b.n	800b99e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b998:	2303      	movs	r3, #3
 800b99a:	73fb      	strb	r3, [r7, #15]
    break;
 800b99c:	bf00      	nop
  }
  return usb_status;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <__libc_init_array>:
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	4d0d      	ldr	r5, [pc, #52]	; (800b9e4 <__libc_init_array+0x38>)
 800b9b0:	4c0d      	ldr	r4, [pc, #52]	; (800b9e8 <__libc_init_array+0x3c>)
 800b9b2:	1b64      	subs	r4, r4, r5
 800b9b4:	10a4      	asrs	r4, r4, #2
 800b9b6:	2600      	movs	r6, #0
 800b9b8:	42a6      	cmp	r6, r4
 800b9ba:	d109      	bne.n	800b9d0 <__libc_init_array+0x24>
 800b9bc:	4d0b      	ldr	r5, [pc, #44]	; (800b9ec <__libc_init_array+0x40>)
 800b9be:	4c0c      	ldr	r4, [pc, #48]	; (800b9f0 <__libc_init_array+0x44>)
 800b9c0:	f000 f8f2 	bl	800bba8 <_init>
 800b9c4:	1b64      	subs	r4, r4, r5
 800b9c6:	10a4      	asrs	r4, r4, #2
 800b9c8:	2600      	movs	r6, #0
 800b9ca:	42a6      	cmp	r6, r4
 800b9cc:	d105      	bne.n	800b9da <__libc_init_array+0x2e>
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d4:	4798      	blx	r3
 800b9d6:	3601      	adds	r6, #1
 800b9d8:	e7ee      	b.n	800b9b8 <__libc_init_array+0xc>
 800b9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9de:	4798      	blx	r3
 800b9e0:	3601      	adds	r6, #1
 800b9e2:	e7f2      	b.n	800b9ca <__libc_init_array+0x1e>
 800b9e4:	0800bd24 	.word	0x0800bd24
 800b9e8:	0800bd24 	.word	0x0800bd24
 800b9ec:	0800bd24 	.word	0x0800bd24
 800b9f0:	0800bd28 	.word	0x0800bd28

0800b9f4 <__retarget_lock_acquire_recursive>:
 800b9f4:	4770      	bx	lr

0800b9f6 <__retarget_lock_release_recursive>:
 800b9f6:	4770      	bx	lr

0800b9f8 <memcpy>:
 800b9f8:	440a      	add	r2, r1
 800b9fa:	4291      	cmp	r1, r2
 800b9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba00:	d100      	bne.n	800ba04 <memcpy+0xc>
 800ba02:	4770      	bx	lr
 800ba04:	b510      	push	{r4, lr}
 800ba06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	d1f9      	bne.n	800ba06 <memcpy+0xe>
 800ba12:	bd10      	pop	{r4, pc}

0800ba14 <memset>:
 800ba14:	4402      	add	r2, r0
 800ba16:	4603      	mov	r3, r0
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d100      	bne.n	800ba1e <memset+0xa>
 800ba1c:	4770      	bx	lr
 800ba1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba22:	e7f9      	b.n	800ba18 <memset+0x4>

0800ba24 <cleanup_glue>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	460c      	mov	r4, r1
 800ba28:	6809      	ldr	r1, [r1, #0]
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	b109      	cbz	r1, 800ba32 <cleanup_glue+0xe>
 800ba2e:	f7ff fff9 	bl	800ba24 <cleanup_glue>
 800ba32:	4621      	mov	r1, r4
 800ba34:	4628      	mov	r0, r5
 800ba36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba3a:	f000 b869 	b.w	800bb10 <_free_r>
	...

0800ba40 <_reclaim_reent>:
 800ba40:	4b2c      	ldr	r3, [pc, #176]	; (800baf4 <_reclaim_reent+0xb4>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4283      	cmp	r3, r0
 800ba46:	b570      	push	{r4, r5, r6, lr}
 800ba48:	4604      	mov	r4, r0
 800ba4a:	d051      	beq.n	800baf0 <_reclaim_reent+0xb0>
 800ba4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ba4e:	b143      	cbz	r3, 800ba62 <_reclaim_reent+0x22>
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d14a      	bne.n	800baec <_reclaim_reent+0xac>
 800ba56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba58:	6819      	ldr	r1, [r3, #0]
 800ba5a:	b111      	cbz	r1, 800ba62 <_reclaim_reent+0x22>
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 f857 	bl	800bb10 <_free_r>
 800ba62:	6961      	ldr	r1, [r4, #20]
 800ba64:	b111      	cbz	r1, 800ba6c <_reclaim_reent+0x2c>
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 f852 	bl	800bb10 <_free_r>
 800ba6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ba6e:	b111      	cbz	r1, 800ba76 <_reclaim_reent+0x36>
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 f84d 	bl	800bb10 <_free_r>
 800ba76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ba78:	b111      	cbz	r1, 800ba80 <_reclaim_reent+0x40>
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 f848 	bl	800bb10 <_free_r>
 800ba80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ba82:	b111      	cbz	r1, 800ba8a <_reclaim_reent+0x4a>
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 f843 	bl	800bb10 <_free_r>
 800ba8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ba8c:	b111      	cbz	r1, 800ba94 <_reclaim_reent+0x54>
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 f83e 	bl	800bb10 <_free_r>
 800ba94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ba96:	b111      	cbz	r1, 800ba9e <_reclaim_reent+0x5e>
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 f839 	bl	800bb10 <_free_r>
 800ba9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800baa0:	b111      	cbz	r1, 800baa8 <_reclaim_reent+0x68>
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 f834 	bl	800bb10 <_free_r>
 800baa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baaa:	b111      	cbz	r1, 800bab2 <_reclaim_reent+0x72>
 800baac:	4620      	mov	r0, r4
 800baae:	f000 f82f 	bl	800bb10 <_free_r>
 800bab2:	69a3      	ldr	r3, [r4, #24]
 800bab4:	b1e3      	cbz	r3, 800baf0 <_reclaim_reent+0xb0>
 800bab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bab8:	4620      	mov	r0, r4
 800baba:	4798      	blx	r3
 800babc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800babe:	b1b9      	cbz	r1, 800baf0 <_reclaim_reent+0xb0>
 800bac0:	4620      	mov	r0, r4
 800bac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bac6:	f7ff bfad 	b.w	800ba24 <cleanup_glue>
 800baca:	5949      	ldr	r1, [r1, r5]
 800bacc:	b941      	cbnz	r1, 800bae0 <_reclaim_reent+0xa0>
 800bace:	3504      	adds	r5, #4
 800bad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad2:	2d80      	cmp	r5, #128	; 0x80
 800bad4:	68d9      	ldr	r1, [r3, #12]
 800bad6:	d1f8      	bne.n	800baca <_reclaim_reent+0x8a>
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 f819 	bl	800bb10 <_free_r>
 800bade:	e7ba      	b.n	800ba56 <_reclaim_reent+0x16>
 800bae0:	680e      	ldr	r6, [r1, #0]
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f814 	bl	800bb10 <_free_r>
 800bae8:	4631      	mov	r1, r6
 800baea:	e7ef      	b.n	800bacc <_reclaim_reent+0x8c>
 800baec:	2500      	movs	r5, #0
 800baee:	e7ef      	b.n	800bad0 <_reclaim_reent+0x90>
 800baf0:	bd70      	pop	{r4, r5, r6, pc}
 800baf2:	bf00      	nop
 800baf4:	20000110 	.word	0x20000110

0800baf8 <__malloc_lock>:
 800baf8:	4801      	ldr	r0, [pc, #4]	; (800bb00 <__malloc_lock+0x8>)
 800bafa:	f7ff bf7b 	b.w	800b9f4 <__retarget_lock_acquire_recursive>
 800bafe:	bf00      	nop
 800bb00:	200068a4 	.word	0x200068a4

0800bb04 <__malloc_unlock>:
 800bb04:	4801      	ldr	r0, [pc, #4]	; (800bb0c <__malloc_unlock+0x8>)
 800bb06:	f7ff bf76 	b.w	800b9f6 <__retarget_lock_release_recursive>
 800bb0a:	bf00      	nop
 800bb0c:	200068a4 	.word	0x200068a4

0800bb10 <_free_r>:
 800bb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb12:	2900      	cmp	r1, #0
 800bb14:	d044      	beq.n	800bba0 <_free_r+0x90>
 800bb16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb1a:	9001      	str	r0, [sp, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb22:	bfb8      	it	lt
 800bb24:	18e4      	addlt	r4, r4, r3
 800bb26:	f7ff ffe7 	bl	800baf8 <__malloc_lock>
 800bb2a:	4a1e      	ldr	r2, [pc, #120]	; (800bba4 <_free_r+0x94>)
 800bb2c:	9801      	ldr	r0, [sp, #4]
 800bb2e:	6813      	ldr	r3, [r2, #0]
 800bb30:	b933      	cbnz	r3, 800bb40 <_free_r+0x30>
 800bb32:	6063      	str	r3, [r4, #4]
 800bb34:	6014      	str	r4, [r2, #0]
 800bb36:	b003      	add	sp, #12
 800bb38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb3c:	f7ff bfe2 	b.w	800bb04 <__malloc_unlock>
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	d908      	bls.n	800bb56 <_free_r+0x46>
 800bb44:	6825      	ldr	r5, [r4, #0]
 800bb46:	1961      	adds	r1, r4, r5
 800bb48:	428b      	cmp	r3, r1
 800bb4a:	bf01      	itttt	eq
 800bb4c:	6819      	ldreq	r1, [r3, #0]
 800bb4e:	685b      	ldreq	r3, [r3, #4]
 800bb50:	1949      	addeq	r1, r1, r5
 800bb52:	6021      	streq	r1, [r4, #0]
 800bb54:	e7ed      	b.n	800bb32 <_free_r+0x22>
 800bb56:	461a      	mov	r2, r3
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	b10b      	cbz	r3, 800bb60 <_free_r+0x50>
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d9fa      	bls.n	800bb56 <_free_r+0x46>
 800bb60:	6811      	ldr	r1, [r2, #0]
 800bb62:	1855      	adds	r5, r2, r1
 800bb64:	42a5      	cmp	r5, r4
 800bb66:	d10b      	bne.n	800bb80 <_free_r+0x70>
 800bb68:	6824      	ldr	r4, [r4, #0]
 800bb6a:	4421      	add	r1, r4
 800bb6c:	1854      	adds	r4, r2, r1
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	6011      	str	r1, [r2, #0]
 800bb72:	d1e0      	bne.n	800bb36 <_free_r+0x26>
 800bb74:	681c      	ldr	r4, [r3, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	6053      	str	r3, [r2, #4]
 800bb7a:	4421      	add	r1, r4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	e7da      	b.n	800bb36 <_free_r+0x26>
 800bb80:	d902      	bls.n	800bb88 <_free_r+0x78>
 800bb82:	230c      	movs	r3, #12
 800bb84:	6003      	str	r3, [r0, #0]
 800bb86:	e7d6      	b.n	800bb36 <_free_r+0x26>
 800bb88:	6825      	ldr	r5, [r4, #0]
 800bb8a:	1961      	adds	r1, r4, r5
 800bb8c:	428b      	cmp	r3, r1
 800bb8e:	bf04      	itt	eq
 800bb90:	6819      	ldreq	r1, [r3, #0]
 800bb92:	685b      	ldreq	r3, [r3, #4]
 800bb94:	6063      	str	r3, [r4, #4]
 800bb96:	bf04      	itt	eq
 800bb98:	1949      	addeq	r1, r1, r5
 800bb9a:	6021      	streq	r1, [r4, #0]
 800bb9c:	6054      	str	r4, [r2, #4]
 800bb9e:	e7ca      	b.n	800bb36 <_free_r+0x26>
 800bba0:	b003      	add	sp, #12
 800bba2:	bd30      	pop	{r4, r5, pc}
 800bba4:	200068a8 	.word	0x200068a8

0800bba8 <_init>:
 800bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbaa:	bf00      	nop
 800bbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbae:	bc08      	pop	{r3}
 800bbb0:	469e      	mov	lr, r3
 800bbb2:	4770      	bx	lr

0800bbb4 <_fini>:
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb6:	bf00      	nop
 800bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbba:	bc08      	pop	{r3}
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	4770      	bx	lr
