
AFS_30_GUI_code_test_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800de68  0800de68  0001de68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4d0  0800e4d0  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4d0  0800e4d0  0001e4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4d8  0800e4d8  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4d8  0800e4d8  0001e4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4dc  0800e4dc  0001e4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800e4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002260  200002e0  0800e7c0  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002540  0800e7c0  00022540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e1b  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b9  00000000  00000000  0003712b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0003a7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002597a  00000000  00000000  0003ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017206  00000000  00000000  0006240a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1070  00000000  00000000  00079610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a4  00000000  00000000  0014a6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e0 	.word	0x200002e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de4c 	.word	0x0800de4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e4 	.word	0x200002e4
 800020c:	0800de4c 	.word	0x0800de4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9aa 	b.w	8000fe4 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468e      	mov	lr, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14d      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4694      	mov	ip, r2
 8000d26:	d969      	bls.n	8000dfc <__udivmoddi4+0xe8>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b152      	cbz	r2, 8000d44 <__udivmoddi4+0x30>
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	f1c2 0120 	rsb	r1, r2, #32
 8000d36:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d42:	4094      	lsls	r4, r2
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	0c21      	lsrs	r1, r4, #16
 8000d4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d4e:	fa1f f78c 	uxth.w	r7, ip
 8000d52:	fb08 e316 	mls	r3, r8, r6, lr
 8000d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5a:	fb06 f107 	mul.w	r1, r6, r7
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 811f 	bcs.w	8000fac <__udivmoddi4+0x298>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 811c 	bls.w	8000fac <__udivmoddi4+0x298>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 f707 	mul.w	r7, r0, r7
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x92>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	f080 810a 	bcs.w	8000fb0 <__udivmoddi4+0x29c>
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	f240 8107 	bls.w	8000fb0 <__udivmoddi4+0x29c>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000daa:	1be4      	subs	r4, r4, r7
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa4>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xc2>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80ef 	beq.w	8000fa6 <__udivmoddi4+0x292>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x160>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd4>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80f9 	bhi.w	8000fda <__udivmoddi4+0x2c6>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	469e      	mov	lr, r3
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa4>
 8000df6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xec>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 8092 	bne.w	8000f2e <__udivmoddi4+0x21a>
 8000e0a:	eba1 010c 	sub.w	r1, r1, ip
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2601      	movs	r6, #1
 8000e18:	0c20      	lsrs	r0, r4, #16
 8000e1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e26:	fb0e f003 	mul.w	r0, lr, r3
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x12c>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x12a>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2c0>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x156>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x154>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2ca>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x9a>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa20 f407 	lsr.w	r4, r0, r7
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	40f9      	lsrs	r1, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	fa00 f306 	lsl.w	r3, r0, r6
 8000e96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9a:	0c20      	lsrs	r0, r4, #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eac:	4288      	cmp	r0, r1
 8000eae:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b8>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	1a09      	subs	r1, r1, r0
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000edc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee0:	458e      	cmp	lr, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1e2>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2b4>
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2b4>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efa:	fba0 9402 	umull	r9, r4, r0, r2
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46a6      	mov	lr, r4
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x2a4>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x212>
 8000f0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f12:	eb61 010e 	sbc.w	r1, r1, lr
 8000f16:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f1e:	40f1      	lsrs	r1, r6
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e9c5 7100 	strd	r7, r1, [r5]
 8000f26:	2600      	movs	r6, #0
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	f1c2 0320 	rsb	r3, r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f56:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x260>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b8>
 8000f6c:	429e      	cmp	r6, r3
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b8>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	b289      	uxth	r1, r1
 8000f78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb06 f30e 	mul.w	r3, r6, lr
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x28a>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f9a:	3e02      	subs	r6, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0x104>
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e705      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e3      	b.n	8000d78 <__udivmoddi4+0x64>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6f8      	b.n	8000da6 <__udivmoddi4+0x92>
 8000fb4:	454b      	cmp	r3, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f8>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f8>
 8000fc4:	4646      	mov	r6, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x28a>
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1e2>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b8>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	4461      	add	r1, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x12c>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e709      	b.n	8000df2 <__udivmoddi4+0xde>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x156>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <send_active_scenario_to_gui>:
/* USER CODE END PD */

/* USER CODE BEGIN 4 */

// Functie om status door te geven via USB
void send_active_scenario_to_gui(int scenario_number) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b092      	sub	sp, #72	; 0x48
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    char scenario_message[64];
    sprintf(scenario_message, "ACTIEF_SCENARIO=%d\n", scenario_number);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4906      	ldr	r1, [pc, #24]	; (8001010 <send_active_scenario_to_gui+0x28>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f009 f9ed 	bl	800a3d8 <siprintf>
    send_status_to_gui(scenario_message);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f806 	bl	8001014 <send_status_to_gui>
}
 8001008:	bf00      	nop
 800100a:	3748      	adds	r7, #72	; 0x48
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0800de88 	.word	0x0800de88

08001014 <send_status_to_gui>:


void send_status_to_gui(char* status_message) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t *)status_message, strlen(status_message));
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f8f7 	bl	8000210 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f008 faa0 	bl	800956c <CDC_Transmit_FS>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <receive_settings_and_update_status>:

// Functie om te checken of de knoppen voor starten, pauzeren of stoppen zijn ingedrukt


// Simuleer de ontvangst van instellingen en stuur statusupdates naar de GUI
void receive_settings_and_update_status(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    // Wachten op instellingen

    send_status_to_gui(WAITING_FOR_SETTINGS);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <receive_settings_and_update_status+0x10>)
 800103a:	f7ff ffeb 	bl	8001014 <send_status_to_gui>

    // Simuleer een vertraging voor het ontvangen van instellingen

    // Zodra instellingen zijn ontvangen, stuur de status "Gereed"

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	0800de9c 	.word	0x0800de9c

08001048 <run_test_procedure>:

// Functie om de volledige testprocedure te beheren
void run_test_procedure(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    // Start de testprocedure

	if (start_testprocedure== 1){
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <run_test_procedure+0x44>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d115      	bne.n	8001082 <run_test_procedure+0x3a>
		send_status_to_gui(TEST_RUNNING);
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <run_test_procedure+0x48>)
 8001058:	f7ff ffdc 	bl	8001014 <send_status_to_gui>
	    for (int scenario = 1; scenario <= 6; scenario++) {
 800105c:	2301      	movs	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	e009      	b.n	8001076 <run_test_procedure+0x2e>
	        // Stuur het actieve scenario naar de GUI
	        send_active_scenario_to_gui(scenario);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffc0 	bl	8000fe8 <send_active_scenario_to_gui>

	        // Simuleer een vertraging tijdens het draaien van dit scenario
	        HAL_Delay(5000);  // 5 seconden per scenario
 8001068:	f241 3088 	movw	r0, #5000	; 0x1388
 800106c:	f000 fef0 	bl	8001e50 <HAL_Delay>
	    for (int scenario = 1; scenario <= 6; scenario++) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3301      	adds	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b06      	cmp	r3, #6
 800107a:	ddf2      	ble.n	8001062 <run_test_procedure+0x1a>
	    }

	    // Eindig met het versturen van de voltooid-status
	    send_status_to_gui(TEST_COMPLETED);
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <run_test_procedure+0x4c>)
 800107e:	f7ff ffc9 	bl	8001014 <send_status_to_gui>

	}

    // Simuleer het uitvoeren van de test

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000918 	.word	0x20000918
 8001090:	0800deb4 	.word	0x0800deb4
 8001094:	0800dec4 	.word	0x0800dec4

08001098 <CheckReceivedData>:
void CheckReceivedData(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  // Simuleer het ontvangen van data (normaliter via USB/UART)
  if (receivedLength > 0) {
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <CheckReceivedData+0x28>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <CheckReceivedData+0x24>
    parse_received_data(receivedData);  // Verwerk de ontvangen gegevens
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <CheckReceivedData+0x2c>)
 80010a6:	f000 f80f 	bl	80010c8 <parse_received_data>
    memset(receivedData, 0, BUFFER_SIZE);  // Clear de buffer na verwerking
 80010aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ae:	2100      	movs	r1, #0
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <CheckReceivedData+0x2c>)
 80010b2:	f008 ff73 	bl	8009f9c <memset>
    receivedLength = 0;
 80010b6:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <CheckReceivedData+0x28>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
  }
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200008b4 	.word	0x200008b4
 80010c4:	200004b4 	.word	0x200004b4

080010c8 <parse_received_data>:

// Functie om de ontvangen data te parsen
void parse_received_data(char* data)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b098      	sub	sp, #96	; 0x60
 80010cc:	af16      	add	r7, sp, #88	; 0x58
 80010ce:	6078      	str	r0, [r7, #4]
    // Verwacht dataformaat: "STROOM_S1=100.000;STROOM_S2=200.000;THD_S1_RMS=50.000;..."
    // Verwacht dataformaat:
    // "STROOM_S1=100.000;STROOM_S2=200.000;STROOM_S3=300.000;THD_S1_RMS=50.000;THD_S1_3H=15;...THD_S3_13H=10;"

    sscanf(data,
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <parse_received_data+0x80>)
 80010d2:	9315      	str	r3, [sp, #84]	; 0x54
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <parse_received_data+0x84>)
 80010d6:	9314      	str	r3, [sp, #80]	; 0x50
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <parse_received_data+0x88>)
 80010da:	9313      	str	r3, [sp, #76]	; 0x4c
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <parse_received_data+0x8c>)
 80010de:	9312      	str	r3, [sp, #72]	; 0x48
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <parse_received_data+0x90>)
 80010e2:	9311      	str	r3, [sp, #68]	; 0x44
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <parse_received_data+0x94>)
 80010e6:	9310      	str	r3, [sp, #64]	; 0x40
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <parse_received_data+0x98>)
 80010ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <parse_received_data+0x9c>)
 80010ee:	930e      	str	r3, [sp, #56]	; 0x38
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <parse_received_data+0xa0>)
 80010f2:	930d      	str	r3, [sp, #52]	; 0x34
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <parse_received_data+0xa4>)
 80010f6:	930c      	str	r3, [sp, #48]	; 0x30
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <parse_received_data+0xa8>)
 80010fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <parse_received_data+0xac>)
 80010fe:	930a      	str	r3, [sp, #40]	; 0x28
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <parse_received_data+0xb0>)
 8001102:	9309      	str	r3, [sp, #36]	; 0x24
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <parse_received_data+0xb4>)
 8001106:	9308      	str	r3, [sp, #32]
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <parse_received_data+0xb8>)
 800110a:	9307      	str	r3, [sp, #28]
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <parse_received_data+0xbc>)
 800110e:	9306      	str	r3, [sp, #24]
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <parse_received_data+0xc0>)
 8001112:	9305      	str	r3, [sp, #20]
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <parse_received_data+0xc4>)
 8001116:	9304      	str	r3, [sp, #16]
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <parse_received_data+0xc8>)
 800111a:	9303      	str	r3, [sp, #12]
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <parse_received_data+0xcc>)
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <parse_received_data+0xd0>)
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <parse_received_data+0xd4>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <parse_received_data+0xd8>)
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <parse_received_data+0xdc>)
 800112c:	491e      	ldr	r1, [pc, #120]	; (80011a8 <parse_received_data+0xe0>)
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f009 f972 	bl	800a418 <siscanf>
           &thd_s1_rms, &thd_s1_3h, &thd_s1_5h, &thd_s1_7h, &thd_s1_9h, &thd_s1_11h, &thd_s1_13h,
           &thd_s2_rms, &thd_s2_3h, &thd_s2_5h, &thd_s2_7h, &thd_s2_9h, &thd_s2_11h, &thd_s2_13h,
           &thd_s3_rms, &thd_s3_3h, &thd_s3_5h, &thd_s3_7h, &thd_s3_9h, &thd_s3_11h, &thd_s3_13h);


	send_status_to_gui(READY_STATUS);
 8001134:	481d      	ldr	r0, [pc, #116]	; (80011ac <parse_received_data+0xe4>)
 8001136:	f7ff ff6d 	bl	8001014 <send_status_to_gui>
	start_testprocedure= 1;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <parse_received_data+0xe8>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000914 	.word	0x20000914
 800114c:	20000910 	.word	0x20000910
 8001150:	2000090c 	.word	0x2000090c
 8001154:	20000908 	.word	0x20000908
 8001158:	20000904 	.word	0x20000904
 800115c:	20000900 	.word	0x20000900
 8001160:	200008fc 	.word	0x200008fc
 8001164:	200008f8 	.word	0x200008f8
 8001168:	200008f4 	.word	0x200008f4
 800116c:	200008f0 	.word	0x200008f0
 8001170:	200008ec 	.word	0x200008ec
 8001174:	200008e8 	.word	0x200008e8
 8001178:	200008e4 	.word	0x200008e4
 800117c:	200008e0 	.word	0x200008e0
 8001180:	200008dc 	.word	0x200008dc
 8001184:	200008d8 	.word	0x200008d8
 8001188:	200008d4 	.word	0x200008d4
 800118c:	200008d0 	.word	0x200008d0
 8001190:	200008cc 	.word	0x200008cc
 8001194:	200008c8 	.word	0x200008c8
 8001198:	200008c4 	.word	0x200008c4
 800119c:	200008c0 	.word	0x200008c0
 80011a0:	200008bc 	.word	0x200008bc
 80011a4:	200008b8 	.word	0x200008b8
 80011a8:	0800ded0 	.word	0x0800ded0
 80011ac:	0800e014 	.word	0x0800e014
 80011b0:	20000918 	.word	0x20000918

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f000 fdd8 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f834 	bl	8001228 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011c0:	f000 f89e 	bl	8001300 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f000 f9d8 	bl	8001578 <MX_GPIO_Init>
  MX_I2S1_Init();
 80011c8:	f000 f8c2 	bl	8001350 <MX_I2S1_Init>
  MX_I2S2_Init();
 80011cc:	f000 f8ee 	bl	80013ac <MX_I2S2_Init>
  MX_I2S3_Init();
 80011d0:	f000 f91a 	bl	8001408 <MX_I2S3_Init>
  MX_SPI4_Init();
 80011d4:	f000 f946 	bl	8001464 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80011d8:	f000 f97a 	bl	80014d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80011dc:	f000 f9a2 	bl	8001524 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80011e0:	f008 f8d6 	bl	8009390 <MX_USB_DEVICE_Init>
  /////// KLOK FREQEUNTIE OP 12 MHZ zetten////


  /////// KLOK FREQEUNTIE OP 8 MHZ zetten////
  /////// KLOK FREQEUNTIE OP 8 MHZ zetten voor nucleo board////
  start_testprocedure=0;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <main+0x6c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
  while (!(HAL_GPIO_ReadPin(GPIO_PORT_VBUS, GPIO_PIN_VBUS) == GPIO_PIN_SET));
 80011ea:	bf00      	nop
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <main+0x70>)
 80011f2:	f001 f8f7 	bl	80023e4 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d1f7      	bne.n	80011ec <main+0x38>
//      // VBUS is present, USB can be initialized

 // simulatie tesprocedure met alle statussen
  HAL_Delay(2000);
 80011fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001200:	f000 fe26 	bl	8001e50 <HAL_Delay>
  receive_settings_and_update_status();
 8001204:	f7ff ff16 	bl	8001034 <receive_settings_and_update_status>
//  run_test_procedure();
//  HAL_Delay(2000);
//  send_status_to_gui(TEST_STOPPED);
//  HAL_Delay(5000);
//  send_status_to_gui(TEST_COMPLETED);
  while (!(start_testprocedure==1));
 8001208:	bf00      	nop
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <main+0x6c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1fb      	bne.n	800120a <main+0x56>
  HAL_Delay(5000);
 8001212:	f241 3088 	movw	r0, #5000	; 0x1388
 8001216:	f000 fe1b 	bl	8001e50 <HAL_Delay>
  run_test_procedure();
 800121a:	f7ff ff15 	bl	8001048 <run_test_procedure>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121e:	e7fe      	b.n	800121e <main+0x6a>
 8001220:	20000918 	.word	0x20000918
 8001224:	40020000 	.word	0x40020000

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2234      	movs	r2, #52	; 0x34
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f008 feb0 	bl	8009f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <SystemClock_Config+0xd0>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <SystemClock_Config+0xd0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <SystemClock_Config+0xd4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <SystemClock_Config+0xd4>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <SystemClock_Config+0xd4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800129c:	23a8      	movs	r3, #168	; 0xa8
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a4:	2307      	movs	r3, #7
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fe4b 	bl	8004f4c <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012bc:	f000 fa1c 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80012c4:	2303      	movs	r3, #3
 80012c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2105      	movs	r1, #5
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fd78 	bl	8003dd4 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ea:	f000 fa05 	bl	80016f8 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b098      	sub	sp, #96	; 0x60
 8001304:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	225c      	movs	r2, #92	; 0x5c
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f008 fe45 	bl	8009f9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 8001312:	2303      	movs	r3, #3
 8001314:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 75;
 8001316:	234b      	movs	r3, #75	; 0x4b
 8001318:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 800131a:	2302      	movs	r3, #2
 800131c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 800131e:	2306      	movs	r3, #6
 8001320:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001332:	2300      	movs	r3, #0
 8001334:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fe65 	bl	8004008 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001344:	f000 f9d8 	bl	80016f8 <Error_Handler>
  }
}
 8001348:	bf00      	nop
 800134a:	3760      	adds	r7, #96	; 0x60
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_I2S1_Init+0x54>)
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <MX_I2S1_Init+0x58>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_I2S1_Init+0x54>)
 800135c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001360:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_I2S1_Init+0x54>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_I2S1_Init+0x54>)
 800136a:	2203      	movs	r2, #3
 800136c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_I2S1_Init+0x54>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_I2S1_Init+0x54>)
 8001376:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800137a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_I2S1_Init+0x54>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_I2S1_Init+0x54>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_I2S1_Init+0x54>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_I2S1_Init+0x54>)
 8001390:	f001 f85a 	bl	8002448 <HAL_I2S_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 800139a:	f000 f9ad 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002fc 	.word	0x200002fc
 80013a8:	40013000 	.word	0x40013000

080013ac <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_I2S2_Init+0x54>)
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <MX_I2S2_Init+0x58>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_I2S2_Init+0x54>)
 80013b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013bc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_I2S2_Init+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_I2S2_Init+0x54>)
 80013c6:	2203      	movs	r2, #3
 80013c8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <MX_I2S2_Init+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_I2S2_Init+0x54>)
 80013d2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80013d6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_I2S2_Init+0x54>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_I2S2_Init+0x54>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_I2S2_Init+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_I2S2_Init+0x54>)
 80013ec:	f001 f82c 	bl	8002448 <HAL_I2S_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80013f6:	f000 f97f 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000344 	.word	0x20000344
 8001404:	40003800 	.word	0x40003800

08001408 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_I2S3_Init+0x54>)
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <MX_I2S3_Init+0x58>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_I2S3_Init+0x54>)
 8001414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001418:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_I2S3_Init+0x54>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_I2S3_Init+0x54>)
 8001422:	2203      	movs	r2, #3
 8001424:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_I2S3_Init+0x54>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_I2S3_Init+0x54>)
 800142e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001432:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_I2S3_Init+0x54>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_I2S3_Init+0x54>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_I2S3_Init+0x54>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_I2S3_Init+0x54>)
 8001448:	f000 fffe 	bl	8002448 <HAL_I2S_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001452:	f000 f951 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000038c 	.word	0x2000038c
 8001460:	40003c00 	.word	0x40003c00

08001464 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_SPI4_Init+0x64>)
 800146a:	4a18      	ldr	r2, [pc, #96]	; (80014cc <MX_SPI4_Init+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_SPI4_Init+0x64>)
 8001470:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001474:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_SPI4_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_SPI4_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_SPI4_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_SPI4_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_SPI4_Init+0x64>)
 8001490:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001494:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_SPI4_Init+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_SPI4_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_SPI4_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_SPI4_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_SPI4_Init+0x64>)
 80014b0:	220a      	movs	r2, #10
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_SPI4_Init+0x64>)
 80014b6:	f003 ffe7 	bl	8005488 <HAL_SPI_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80014c0:	f000 f91a 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200003d4 	.word	0x200003d4
 80014cc:	40013400 	.word	0x40013400

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART1_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART1_UART_Init+0x4c>)
 8001508:	f004 f847 	bl	800559a <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f8f1 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000042c 	.word	0x2000042c
 8001520:	40011000 	.word	0x40011000

08001524 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART3_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800155c:	f004 f81d 	bl	800559a <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 f8c7 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000470 	.word	0x20000470
 8001574:	40004800 	.word	0x40004800

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a54      	ldr	r2, [pc, #336]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	4b4e      	ldr	r3, [pc, #312]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a4d      	ldr	r2, [pc, #308]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a3f      	ldr	r2, [pc, #252]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <MX_GPIO_Init+0x170>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b32      	ldr	r3, [pc, #200]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <MX_GPIO_Init+0x170>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <MX_GPIO_Init+0x170>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <MX_GPIO_Init+0x170>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_RESET_GPIO_Port, DAC_RESET_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2108      	movs	r1, #8
 8001656:	4825      	ldr	r0, [pc, #148]	; (80016ec <MX_GPIO_Init+0x174>)
 8001658:	f000 fedc 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	211c      	movs	r1, #28
 8001660:	4823      	ldr	r0, [pc, #140]	; (80016f0 <MX_GPIO_Init+0x178>)
 8001662:	f000 fed7 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DE_OUTPUT_Pin|RE_OUTPUT_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2130      	movs	r1, #48	; 0x30
 800166a:	4822      	ldr	r0, [pc, #136]	; (80016f4 <MX_GPIO_Init+0x17c>)
 800166c:	f000 fed2 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DAC_RESET_Pin */
  GPIO_InitStruct.Pin = DAC_RESET_Pin;
 8001670:	2308      	movs	r3, #8
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DAC_RESET_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4819      	ldr	r0, [pc, #100]	; (80016ec <MX_GPIO_Init+0x174>)
 8001688:	f000 fd18 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : START_KNOP_Pin PAUZEER_KNOP_Pin STOP_KNOP_Pin */
  GPIO_InitStruct.Pin = START_KNOP_Pin|PAUZEER_KNOP_Pin|STOP_KNOP_Pin;
 800168c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_GPIO_Init+0x17c>)
 80016a2:	f000 fd0b 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RODE_LED_Pin GROENE_LED_Pin BLAUWE_LED_Pin */
  GPIO_InitStruct.Pin = RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin;
 80016a6:	231c      	movs	r3, #28
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_GPIO_Init+0x178>)
 80016be:	f000 fcfd 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DE_OUTPUT_Pin RE_OUTPUT_Pin */
  GPIO_InitStruct.Pin = DE_OUTPUT_Pin|RE_OUTPUT_Pin;
 80016c2:	2330      	movs	r3, #48	; 0x30
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_GPIO_Init+0x17c>)
 80016da:	f000 fcef 	bl	80020bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016de:	bf00      	nop
 80016e0:	3730      	adds	r7, #48	; 0x30
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40021800 	.word	0x40021800
 80016f4:	40020400 	.word	0x40020400

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_MspInit+0x4c>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	; 0x40
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a79      	ldr	r2, [pc, #484]	; (8001958 <HAL_I2S_MspInit+0x204>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_I2S_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
 800177a:	4b78      	ldr	r3, [pc, #480]	; (800195c <HAL_I2S_MspInit+0x208>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a77      	ldr	r2, [pc, #476]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b75      	ldr	r3, [pc, #468]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
 8001796:	4b71      	ldr	r3, [pc, #452]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a70      	ldr	r2, [pc, #448]	; (800195c <HAL_I2S_MspInit+0x208>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b6e      	ldr	r3, [pc, #440]	; (800195c <HAL_I2S_MspInit+0x208>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80017ae:	23b0      	movs	r3, #176	; 0xb0
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017be:	2305      	movs	r3, #5
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	4865      	ldr	r0, [pc, #404]	; (8001960 <HAL_I2S_MspInit+0x20c>)
 80017ca:	f000 fc77 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017ce:	e0bf      	b.n	8001950 <HAL_I2S_MspInit+0x1fc>
  else if(hi2s->Instance==SPI2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a63      	ldr	r2, [pc, #396]	; (8001964 <HAL_I2S_MspInit+0x210>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d169      	bne.n	80018ae <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_I2S_MspInit+0x208>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a5e      	ldr	r2, [pc, #376]	; (800195c <HAL_I2S_MspInit+0x208>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b5c      	ldr	r3, [pc, #368]	; (800195c <HAL_I2S_MspInit+0x208>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <HAL_I2S_MspInit+0x208>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a57      	ldr	r2, [pc, #348]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b55      	ldr	r3, [pc, #340]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a50      	ldr	r2, [pc, #320]	; (800195c <HAL_I2S_MspInit+0x208>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800184a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800185c:	2305      	movs	r3, #5
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001864:	4619      	mov	r1, r3
 8001866:	4840      	ldr	r0, [pc, #256]	; (8001968 <HAL_I2S_MspInit+0x214>)
 8001868:	f000 fc28 	bl	80020bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800187c:	2305      	movs	r3, #5
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	4839      	ldr	r0, [pc, #228]	; (800196c <HAL_I2S_MspInit+0x218>)
 8001888:	f000 fc18 	bl	80020bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800188c:	2302      	movs	r3, #2
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800189c:	2307      	movs	r3, #7
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a4:	4619      	mov	r1, r3
 80018a6:	4832      	ldr	r0, [pc, #200]	; (8001970 <HAL_I2S_MspInit+0x21c>)
 80018a8:	f000 fc08 	bl	80020bc <HAL_GPIO_Init>
}
 80018ac:	e050      	b.n	8001950 <HAL_I2S_MspInit+0x1fc>
  else if(hi2s->Instance==SPI3)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_I2S_MspInit+0x220>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d14b      	bne.n	8001950 <HAL_I2S_MspInit+0x1fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c6:	6413      	str	r3, [r2, #64]	; 0x40
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a1f      	ldr	r2, [pc, #124]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_I2S_MspInit+0x208>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_I2S_MspInit+0x208>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800190c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800191e:	2306      	movs	r3, #6
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <HAL_I2S_MspInit+0x20c>)
 800192a:	f000 fbc7 	bl	80020bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800192e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001940:	2306      	movs	r3, #6
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	4808      	ldr	r0, [pc, #32]	; (800196c <HAL_I2S_MspInit+0x218>)
 800194c:	f000 fbb6 	bl	80020bc <HAL_GPIO_Init>
}
 8001950:	bf00      	nop
 8001952:	3740      	adds	r7, #64	; 0x40
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40013000 	.word	0x40013000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000
 8001964:	40003800 	.word	0x40003800
 8001968:	40020400 	.word	0x40020400
 800196c:	40020800 	.word	0x40020800
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40003c00 	.word	0x40003c00

08001978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a19      	ldr	r2, [pc, #100]	; (80019fc <HAL_SPI_MspInit+0x84>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d12b      	bne.n	80019f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80019d2:	2374      	movs	r3, #116	; 0x74
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80019e2:	2305      	movs	r3, #5
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <HAL_SPI_MspInit+0x8c>)
 80019ee:	f000 fb65 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40013400 	.word	0x40013400
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a32      	ldr	r2, [pc, #200]	; (8001af0 <HAL_UART_MspInit+0xe8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d12c      	bne.n	8001a84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a62:	23c0      	movs	r3, #192	; 0xc0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a72:	2307      	movs	r3, #7
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001a7e:	f000 fb1d 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a82:	e031      	b.n	8001ae8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <HAL_UART_MspInit+0xf4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d12c      	bne.n	8001ae8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_UART_MspInit+0xec>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 8001ac6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_UART_MspInit+0xf0>)
 8001ae4:	f000 faea 	bl	80020bc <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40004800 	.word	0x40004800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 f960 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <OTG_FS_IRQHandler+0x10>)
 8001b5a:	f000 ffc9 	bl	8002af0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001e04 	.word	0x20001e04

08001b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_kill>:

int _kill(int pid, int sig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b82:	f008 f9d3 	bl	8009f2c <__errno>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_exit>:

void _exit (int status)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe7 	bl	8001b78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001baa:	e7fe      	b.n	8001baa <_exit+0x12>

08001bac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e00a      	b.n	8001bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bbe:	f3af 8000 	nop.w
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	b2ca      	uxtb	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbf0      	blt.n	8001bbe <_read+0x12>
  }

  return len;
 8001bdc:	687b      	ldr	r3, [r7, #4]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e009      	b.n	8001c0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbf1      	blt.n	8001bf8 <_write+0x12>
  }
  return len;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_close>:

int _close(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c46:	605a      	str	r2, [r3, #4]
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_isatty>:

int _isatty(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f008 f938 	bl	8009f2c <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20020000 	.word	0x20020000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	2000091c 	.word	0x2000091c
 8001cf0:	20002540 	.word	0x20002540

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d1e:	490e      	ldr	r1, [pc, #56]	; (8001d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d34:	4c0b      	ldr	r4, [pc, #44]	; (8001d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d42:	f7ff ffd7 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f008 f8f7 	bl	8009f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff fa33 	bl	80011b4 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001d5c:	0800e4e0 	.word	0x0800e4e0
  ldr r2, =_sbss
 8001d60:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001d64:	20002540 	.word	0x20002540

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94f 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fcb0 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f967 	bl	80020a2 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f92f 	bl	800204e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000920 	.word	0x20000920

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000920 	.word	0x20000920

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	; (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff29 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff3e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff31 	bl	8001efc <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffa2 	bl	8001ff4 <SysTick_Config>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e165      	b.n	80023a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 8154 	bne.w	800239e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d005      	beq.n	800210e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	2b02      	cmp	r3, #2
 800210c:	d130      	bne.n	8002170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0201 	and.w	r2, r3, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d017      	beq.n	80021ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d123      	bne.n	8002200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80ae 	beq.w	800239e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_GPIO_Init+0x300>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a5c      	ldr	r2, [pc, #368]	; (80023bc <HAL_GPIO_Init+0x300>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <HAL_GPIO_Init+0x300>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <HAL_GPIO_Init+0x304>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4f      	ldr	r2, [pc, #316]	; (80023c4 <HAL_GPIO_Init+0x308>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d025      	beq.n	80022d6 <HAL_GPIO_Init+0x21a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4e      	ldr	r2, [pc, #312]	; (80023c8 <HAL_GPIO_Init+0x30c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01f      	beq.n	80022d2 <HAL_GPIO_Init+0x216>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4d      	ldr	r2, [pc, #308]	; (80023cc <HAL_GPIO_Init+0x310>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x212>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4c      	ldr	r2, [pc, #304]	; (80023d0 <HAL_GPIO_Init+0x314>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x20e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4b      	ldr	r2, [pc, #300]	; (80023d4 <HAL_GPIO_Init+0x318>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x20a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <HAL_GPIO_Init+0x31c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x206>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a49      	ldr	r2, [pc, #292]	; (80023dc <HAL_GPIO_Init+0x320>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x202>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e00c      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022be:	2307      	movs	r3, #7
 80022c0:	e00a      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022c2:	2305      	movs	r3, #5
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4935      	ldr	r1, [pc, #212]	; (80023c0 <HAL_GPIO_Init+0x304>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f6:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <HAL_GPIO_Init+0x324>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231a:	4a31      	ldr	r2, [pc, #196]	; (80023e0 <HAL_GPIO_Init+0x324>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002320:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_GPIO_Init+0x324>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <HAL_GPIO_Init+0x324>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_GPIO_Init+0x324>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_GPIO_Init+0x324>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_GPIO_Init+0x324>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_GPIO_Init+0x324>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f ae96 	bls.w	80020d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40013c00 	.word	0x40013c00

080023e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e001      	b.n	8002406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002430:	e003      	b.n	800243a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	041a      	lsls	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0e1      	b.n	800261e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a6d      	ldr	r2, [pc, #436]	; (8002628 <HAL_I2S_Init+0x1e0>)
 8002472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff f96d 	bl	8001754 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002490:	f023 030f 	bic.w	r3, r3, #15
 8002494:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2202      	movs	r2, #2
 800249c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d06f      	beq.n	8002586 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024ae:	2310      	movs	r3, #16
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e001      	b.n	80024b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d802      	bhi.n	80024c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_I2S_Init+0x1e4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_I2S_Init+0x92>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_I2S_Init+0x1e8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d104      	bne.n	80024e4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f002 f8be 	bl	800465c <HAL_RCCEx_GetPeriphCLKFreq>
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	e003      	b.n	80024ec <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f002 f8b9 	bl	800465c <HAL_RCCEx_GetPeriphCLKFreq>
 80024ea:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d125      	bne.n	8002542 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	fbb2 f2f3 	udiv	r2, r2, r3
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	461a      	mov	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	3305      	adds	r3, #5
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e01f      	b.n	8002560 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	fbb2 f2f3 	udiv	r2, r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	461a      	mov	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	3305      	adds	r3, #5
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e00e      	b.n	8002560 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fbb2 f2f3 	udiv	r2, r2, r3
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	3305      	adds	r3, #5
 800255e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4a34      	ldr	r2, [pc, #208]	; (8002634 <HAL_I2S_Init+0x1ec>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	08db      	lsrs	r3, r3, #3
 800256a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	e003      	b.n	800258e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002586:	2302      	movs	r3, #2
 8002588:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d902      	bls.n	800259a <HAL_I2S_Init+0x152>
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d907      	bls.n	80025aa <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e039      	b.n	800261e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	ea42 0103 	orr.w	r1, r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025c8:	f023 030f 	bic.w	r3, r3, #15
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6851      	ldr	r1, [r2, #4]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6992      	ldr	r2, [r2, #24]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ec:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b30      	cmp	r3, #48	; 0x30
 80025f4:	d003      	beq.n	80025fe <HAL_I2S_Init+0x1b6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2bb0      	cmp	r3, #176	; 0xb0
 80025fc:	d107      	bne.n	800260e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800260c:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	0800272f 	.word	0x0800272f
 800262c:	40003800 	.word	0x40003800
 8002630:	40003c00 	.word	0x40003c00
 8002634:	cccccccd 	.word	0xcccccccd

08002638 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c9a      	adds	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10e      	bne.n	80026c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffb8 	bl	8002638 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	b292      	uxth	r2, r2
 80026e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	1c9a      	adds	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10e      	bne.n	8002726 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002716:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff93 	bl	800264c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b04      	cmp	r3, #4
 8002748:	d13a      	bne.n	80027c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d109      	bne.n	8002768 <I2S_IRQHandler+0x3a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d102      	bne.n	8002768 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffb4 	bl	80026d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	2b40      	cmp	r3, #64	; 0x40
 8002770:	d126      	bne.n	80027c0 <I2S_IRQHandler+0x92>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d11f      	bne.n	80027c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800278e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ff50 	bl	8002660 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d136      	bne.n	800283a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d109      	bne.n	80027ea <I2S_IRQHandler+0xbc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d102      	bne.n	80027ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff45 	bl	8002674 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d122      	bne.n	800283a <I2S_IRQHandler+0x10c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d11b      	bne.n	800283a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002810:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff13 	bl	8002660 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002844:	b08f      	sub	sp, #60	; 0x3c
 8002846:	af0a      	add	r7, sp, #40	; 0x28
 8002848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e116      	b.n	8002a82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f006 ffd6 	bl	8009820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fa57 	bl	8005d46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	687e      	ldr	r6, [r7, #4]
 80028a0:	466d      	mov	r5, sp
 80028a2:	f106 0410 	add.w	r4, r6, #16
 80028a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028b6:	1d33      	adds	r3, r6, #4
 80028b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ba:	6838      	ldr	r0, [r7, #0]
 80028bc:	f003 f92e 	bl	8005b1c <USB_CoreInit>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0d7      	b.n	8002a82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fa45 	bl	8005d68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	e04a      	b.n	800297a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	333d      	adds	r3, #61	; 0x3d
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	333c      	adds	r3, #60	; 0x3c
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	b298      	uxth	r0, r3
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3344      	adds	r3, #68	; 0x44
 8002920:	4602      	mov	r2, r0
 8002922:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3340      	adds	r3, #64	; 0x40
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3348      	adds	r3, #72	; 0x48
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334c      	adds	r3, #76	; 0x4c
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3354      	adds	r3, #84	; 0x54
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	3301      	adds	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3af      	bcc.n	80028e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e044      	b.n	8002a14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	3301      	adds	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d3b5      	bcc.n	800298a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	687e      	ldr	r6, [r7, #4]
 8002a26:	466d      	mov	r5, sp
 8002a28:	f106 0410 	add.w	r4, r6, #16
 8002a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a3c:	1d33      	adds	r3, r6, #4
 8002a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a40:	6838      	ldr	r0, [r7, #0]
 8002a42:	f003 f9dd 	bl	8005e00 <USB_DevInit>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e014      	b.n	8002a82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 f98b 	bl	8003d8c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fb1f 	bl	80070be <USB_DevDisconnect>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_Start+0x1c>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e020      	b.n	8002ae8 <HAL_PCD_Start+0x5e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d109      	bne.n	8002aca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 f928 	bl	8005d24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 facf 	bl	800707c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b08d      	sub	sp, #52	; 0x34
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fb8d 	bl	8007226 <USB_GetMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 84b7 	bne.w	8003482 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 faf1 	bl	8007100 <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 84ad 	beq.w	8003480 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fade 	bl	8007100 <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d107      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 0202 	and.w	r2, r2, #2
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 facc 	bl	8007100 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d161      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0210 	bic.w	r2, r2, #16
 8002b80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	0c5b      	lsrs	r3, r3, #17
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d124      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d035      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6a38      	ldr	r0, [r7, #32]
 8002bce:	f004 f903 	bl	8006dd8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bde:	441a      	add	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf0:	441a      	add	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
 8002bf6:	e016      	b.n	8002c26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d110      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6a38      	ldr	r0, [r7, #32]
 8002c10:	f004 f8e2 	bl	8006dd8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c20:	441a      	add	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0210 	orr.w	r2, r2, #16
 8002c34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fa60 	bl	8007100 <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c4a:	f040 80a7 	bne.w	8002d9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 fa65 	bl	8007126 <USB_ReadDevAllOutEpInterrupt>
 8002c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c5e:	e099      	b.n	8002d94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 808e 	beq.w	8002d88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 fa89 	bl	800718e <USB_ReadDevOutEPInterrupt>
 8002c7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	461a      	mov	r2, r3
 8002c96:	2301      	movs	r3, #1
 8002c98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 feef 	bl	8003a80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2308      	movs	r3, #8
 8002cbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 ffc5 	bl	8003c50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2310      	movs	r3, #16
 8002ce0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d030      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d109      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	78db      	ldrb	r3, [r3, #3]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f006 fe9c 	bl	8009a74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	2320      	movs	r3, #32
 8002d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f47f af62 	bne.w	8002c60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f004 f9ad 	bl	8007100 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db0:	f040 80db 	bne.w	8002f6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f004 f9ce 	bl	800715a <USB_ReadDevAllInEpInterrupt>
 8002dbe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dc4:	e0cd      	b.n	8002f62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80c2 	beq.w	8002f56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f004 f9f4 	bl	80071ca <USB_ReadDevInEPInterrupt>
 8002de2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d057      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69f9      	ldr	r1, [r7, #28]
 8002e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e0e:	4013      	ands	r3, r2
 8002e10:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2301      	movs	r3, #1
 8002e22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d132      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334c      	adds	r3, #76	; 0x4c
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4403      	add	r3, r0
 8002e4c:	3348      	adds	r3, #72	; 0x48
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4419      	add	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4403      	add	r3, r0
 8002e60:	334c      	adds	r3, #76	; 0x4c
 8002e62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d113      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3354      	adds	r3, #84	; 0x54
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	f004 f9fb 	bl	8007288 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f006 fd66 	bl	800996a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eec:	461a      	mov	r2, r3
 8002eee:	2340      	movs	r3, #64	; 0x40
 8002ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d023      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efe:	6a38      	ldr	r0, [r7, #32]
 8002f00:	f003 f8dc 	bl	80060bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2200      	movs	r2, #0
 8002f24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f006 fdb3 	bl	8009a98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2302      	movs	r3, #2
 8002f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fd08 	bl	8003966 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f af2e 	bne.w	8002dc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 f8c6 	bl	8007100 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7e:	d122      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f006 ff2d 	bl	8009e08 <HAL_PCDEx_LPM_Callback>
 8002fae:	e002      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f006 fd51 	bl	8009a58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 f898 	bl	8007100 <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fda:	d112      	bne.n	8003002 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f006 fd0d 	bl	8009a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003000:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f004 f87a 	bl	8007100 <USB_ReadInterrupts>
 800300c:	4603      	mov	r3, r0
 800300e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003016:	d121      	bne.n	800305c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003026:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d111      	bne.n	8003056 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800304c:	2101      	movs	r1, #1
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f006 feda 	bl	8009e08 <HAL_PCDEx_LPM_Callback>
 8003054:	e002      	b.n	800305c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f006 fcd8 	bl	8009a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f004 f84d 	bl	8007100 <USB_ReadInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	f040 80b7 	bne.w	80031e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2110      	movs	r1, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f003 f814 	bl	80060bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003094:	2300      	movs	r3, #0
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003098:	e046      	b.n	8003128 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a6:	461a      	mov	r2, r3
 80030a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030be:	0151      	lsls	r1, r2, #5
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	440a      	add	r2, r1
 80030c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	461a      	mov	r2, r3
 80030dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f2:	0151      	lsls	r1, r2, #5
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	440a      	add	r2, r1
 80030f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003100:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003112:	0151      	lsls	r1, r2, #5
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	440a      	add	r2, r1
 8003118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800311c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003120:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	3301      	adds	r3, #1
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312e:	429a      	cmp	r2, r3
 8003130:	d3b3      	bcc.n	800309a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003140:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003144:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315e:	f043 030b 	orr.w	r3, r3, #11
 8003162:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003174:	f043 030b 	orr.w	r3, r3, #11
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	e015      	b.n	80031a8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800318a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800318e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003192:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a2:	f043 030b 	orr.w	r3, r3, #11
 80031a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031cc:	461a      	mov	r2, r3
 80031ce:	f004 f85b 	bl	8007288 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 ff8a 	bl	8007100 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	d124      	bne.n	8003242 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 f820 	bl	8007242 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f002 ffd5 	bl	80061b6 <USB_GetDevSpeed>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681c      	ldr	r4, [r3, #0]
 8003218:	f000 fec2 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 800321c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	4620      	mov	r0, r4
 8003228:	f002 fcda 	bl	8005be0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f006 fbc4 	bl	80099ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003240:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f003 ff5a 	bl	8007100 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b08      	cmp	r3, #8
 8003254:	d10a      	bne.n	800326c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f006 fba1 	bl	800999e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f002 0208 	and.w	r2, r2, #8
 800326a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 ff45 	bl	8007100 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d122      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800328c:	2301      	movs	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	e014      	b.n	80032bc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d105      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fb27 	bl	8003904 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	3301      	adds	r3, #1
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3e5      	bcc.n	8003292 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 ff18 	bl	8007100 <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032da:	d13b      	bne.n	8003354 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032dc:	2301      	movs	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	e02b      	b.n	800333a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3340      	adds	r3, #64	; 0x40
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d115      	bne.n	8003334 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003308:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	da12      	bge.n	8003334 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	333f      	adds	r3, #63	; 0x3f
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800332a:	b2db      	uxtb	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fae8 	bl	8003904 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	3301      	adds	r3, #1
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	429a      	cmp	r2, r3
 8003342:	d3ce      	bcc.n	80032e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f003 fed1 	bl	8007100 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003368:	d155      	bne.n	8003416 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800336a:	2301      	movs	r3, #1
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	e045      	b.n	80033fc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d12e      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003398:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800339a:	2b00      	cmp	r3, #0
 800339c:	da2b      	bge.n	80033f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d121      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f2:	6053      	str	r3, [r2, #4]
            break;
 80033f4:	e007      	b.n	8003406 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	429a      	cmp	r2, r3
 8003404:	d3b4      	bcc.n	8003370 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f003 fe70 	bl	8007100 <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d10a      	bne.n	8003442 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f006 fb45 	bl	8009abc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f003 fe5a 	bl	8007100 <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d115      	bne.n	8003482 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f006 fb35 	bl	8009ad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	e000      	b.n	8003482 <HAL_PCD_IRQHandler+0x992>
      return;
 8003480:	bf00      	nop
    }
  }
}
 8003482:	3734      	adds	r7, #52	; 0x34
 8003484:	46bd      	mov	sp, r7
 8003486:	bd90      	pop	{r4, r7, pc}

08003488 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_PCD_SetAddress+0x1a>
 800349e:	2302      	movs	r3, #2
 80034a0:	e013      	b.n	80034ca <HAL_PCD_SetAddress+0x42>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 fdb8 	bl	8007030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	4608      	mov	r0, r1
 80034dc:	4611      	mov	r1, r2
 80034de:	461a      	mov	r2, r3
 80034e0:	4603      	mov	r3, r0
 80034e2:	70fb      	strb	r3, [r7, #3]
 80034e4:	460b      	mov	r3, r1
 80034e6:	803b      	strh	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da0f      	bge.n	8003518 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	f003 020f 	and.w	r2, r3, #15
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	3338      	adds	r3, #56	; 0x38
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	3304      	adds	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	705a      	strb	r2, [r3, #1]
 8003516:	e00f      	b.n	8003538 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 020f 	and.w	r2, r3, #15
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	3304      	adds	r3, #4
 8003530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	b2da      	uxtb	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003544:	883a      	ldrh	r2, [r7, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	78ba      	ldrb	r2, [r7, #2]
 800354e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003562:	78bb      	ldrb	r3, [r7, #2]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d102      	bne.n	800356e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_PCD_EP_Open+0xaa>
 8003578:	2302      	movs	r3, #2
 800357a:	e00e      	b.n	800359a <HAL_PCD_EP_Open+0xc8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	4618      	mov	r0, r3
 800358c:	f002 fe38 	bl	8006200 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003598:	7afb      	ldrb	r3, [r7, #11]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da0f      	bge.n	80035d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3338      	adds	r3, #56	; 0x38
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	705a      	strb	r2, [r3, #1]
 80035d4:	e00f      	b.n	80035f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 020f 	and.w	r2, r3, #15
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_PCD_EP_Close+0x6e>
 800360c:	2302      	movs	r3, #2
 800360e:	e00e      	b.n	800362e <HAL_PCD_EP_Close+0x8c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68f9      	ldr	r1, [r7, #12]
 800361e:	4618      	mov	r0, r3
 8003620:	f002 fe76 	bl	8006310 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	460b      	mov	r3, r1
 8003644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003646:	7afb      	ldrb	r3, [r7, #11]
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	3304      	adds	r3, #4
 800365e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2200      	movs	r2, #0
 8003670:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2200      	movs	r2, #0
 8003676:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003678:	7afb      	ldrb	r3, [r7, #11]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	b2da      	uxtb	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	6979      	ldr	r1, [r7, #20]
 80036aa:	f003 f955 	bl	8006958 <USB_EP0StartXfer>
 80036ae:	e008      	b.n	80036c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	6979      	ldr	r1, [r7, #20]
 80036be:	f002 ff03 	bl	80064c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	460b      	mov	r3, r1
 800370a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	3338      	adds	r3, #56	; 0x38
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2200      	movs	r2, #0
 8003734:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2201      	movs	r2, #1
 800373a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373c:	7afb      	ldrb	r3, [r7, #11]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	b2da      	uxtb	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003756:	7afb      	ldrb	r3, [r7, #11]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	f003 f8f3 	bl	8006958 <USB_EP0StartXfer>
 8003772:	e008      	b.n	8003786 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	6979      	ldr	r1, [r7, #20]
 8003782:	f002 fea1 	bl	80064c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	f003 020f 	and.w	r2, r3, #15
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d901      	bls.n	80037ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e050      	b.n	8003850 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	da0f      	bge.n	80037d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	f003 020f 	and.w	r2, r3, #15
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	3338      	adds	r3, #56	; 0x38
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	3304      	adds	r3, #4
 80037cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	705a      	strb	r2, [r3, #1]
 80037d4:	e00d      	b.n	80037f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	3304      	adds	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_PCD_EP_SetStall+0x82>
 800380e:	2302      	movs	r3, #2
 8003810:	e01e      	b.n	8003850 <HAL_PCD_EP_SetStall+0xc0>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	4618      	mov	r0, r3
 8003822:	f003 fb31 	bl	8006e88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	b2d9      	uxtb	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003840:	461a      	mov	r2, r3
 8003842:	f003 fd21 	bl	8007288 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	f003 020f 	and.w	r2, r3, #15
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d901      	bls.n	8003876 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e042      	b.n	80038fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800387a:	2b00      	cmp	r3, #0
 800387c:	da0f      	bge.n	800389e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3338      	adds	r3, #56	; 0x38
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	705a      	strb	r2, [r3, #1]
 800389c:	e00f      	b.n	80038be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_PCD_EP_ClrStall+0x86>
 80038da:	2302      	movs	r3, #2
 80038dc:	e00e      	b.n	80038fc <HAL_PCD_EP_ClrStall+0xa4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f003 fb39 	bl	8006f64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da0c      	bge.n	8003932 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	3338      	adds	r3, #56	; 0x38
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	3304      	adds	r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e00c      	b.n	800394c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	4618      	mov	r0, r3
 8003954:	f003 f958 	bl	8006c08 <USB_EPStopXfer>
 8003958:	4603      	mov	r3, r0
 800395a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800395c:	7afb      	ldrb	r3, [r7, #11]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b08a      	sub	sp, #40	; 0x28
 800396a:	af02      	add	r7, sp, #8
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	3338      	adds	r3, #56	; 0x38
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	429a      	cmp	r2, r3
 8003998:	d901      	bls.n	800399e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06c      	b.n	8003a78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d902      	bls.n	80039ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3303      	adds	r3, #3
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039c2:	e02b      	b.n	8003a1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d902      	bls.n	80039e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	3303      	adds	r3, #3
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6919      	ldr	r1, [r3, #16]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f003 f9ac 	bl	8006d5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	441a      	add	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	441a      	add	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d809      	bhi.n	8003a46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d203      	bcs.n	8003a46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1be      	bne.n	80039c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d811      	bhi.n	8003a76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	2201      	movs	r2, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	6939      	ldr	r1, [r7, #16]
 8003a6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a72:	4013      	ands	r3, r2
 8003a74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	333c      	adds	r3, #60	; 0x3c
 8003a98:	3304      	adds	r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d17b      	bne.n	8003bae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4a61      	ldr	r2, [pc, #388]	; (8003c48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	f240 80b9 	bls.w	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80b3 	beq.w	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae8:	6093      	str	r3, [r2, #8]
 8003aea:	e0a7      	b.n	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	2320      	movs	r3, #32
 8003b06:	6093      	str	r3, [r2, #8]
 8003b08:	e098      	b.n	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f040 8093 	bne.w	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d90f      	bls.n	8003b3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3a:	6093      	str	r3, [r2, #8]
 8003b3c:	e07e      	b.n	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	0159      	lsls	r1, r3, #5
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	440b      	add	r3, r1
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	1ad2      	subs	r2, r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d114      	bne.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	f003 fb7c 	bl	8007288 <USB_EP0_OutStart>
 8003b90:	e006      	b.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	441a      	add	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f005 fec4 	bl	8009934 <HAL_PCD_DataOutStageCallback>
 8003bac:	e046      	b.n	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d124      	bne.n	8003c00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	6093      	str	r3, [r2, #8]
 8003bd4:	e032      	b.n	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	2320      	movs	r3, #32
 8003bf0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f005 fe9b 	bl	8009934 <HAL_PCD_DataOutStageCallback>
 8003bfe:	e01d      	b.n	8003c3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d114      	bne.n	8003c30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d108      	bne.n	8003c30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	f003 fb2c 	bl	8007288 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f005 fe7c 	bl	8009934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	4f54300a 	.word	0x4f54300a
 8003c4c:	4f54310a 	.word	0x4f54310a

08003c50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	333c      	adds	r3, #60	; 0x3c
 8003c68:	3304      	adds	r3, #4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d90e      	bls.n	8003ca4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f005 fe33 	bl	8009910 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d90c      	bls.n	8003ccc <PCD_EP_OutSetupPacket_int+0x7c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f003 fade 	bl	8007288 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	4f54300a 	.word	0x4f54300a

08003cdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cfa:	883b      	ldrh	r3, [r7, #0]
 8003cfc:	0419      	lsls	r1, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
 8003d08:	e028      	b.n	8003d5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4413      	add	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e00d      	b.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	3340      	adds	r3, #64	; 0x40
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	3301      	adds	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d3ec      	bcc.n	8003d1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d44:	883b      	ldrh	r3, [r7, #0]
 8003d46:	0418      	lsls	r0, r3, #16
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6819      	ldr	r1, [r3, #0]
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4302      	orrs	r2, r0
 8003d54:	3340      	adds	r3, #64	; 0x40
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	f043 0303 	orr.w	r3, r3, #3
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0cc      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d90c      	bls.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0b8      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e28:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a52      	ldr	r2, [pc, #328]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4c:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	494d      	ldr	r1, [pc, #308]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d044      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d119      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e067      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b37      	ldr	r3, [pc, #220]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4934      	ldr	r1, [pc, #208]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fd ffb8 	bl	8001e38 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fd ffb4 	bl	8001e38 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e04f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d20c      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e032      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4916      	ldr	r1, [pc, #88]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	490e      	ldr	r1, [pc, #56]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f5a:	f000 fdc7 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	490a      	ldr	r1, [pc, #40]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	5ccb      	ldrb	r3, [r1, r3]
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd ff18 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023c00 	.word	0x40023c00
 8003f90:	40023800 	.word	0x40023800
 8003f94:	0800e068 	.word	0x0800e068
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000004 	.word	0x20000004

08003fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000000 	.word	0x20000000

08003fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fbc:	f7ff fff0 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0a9b      	lsrs	r3, r3, #10
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	0800e078 	.word	0x0800e078

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fe4:	f7ff ffdc 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0b5b      	lsrs	r3, r3, #13
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	0800e078 	.word	0x0800e078

08004008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	; 0x30
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d010      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004040:	4b6f      	ldr	r3, [pc, #444]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004046:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	496c      	ldr	r1, [pc, #432]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800405e:	2301      	movs	r3, #1
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d010      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800406e:	4b64      	ldr	r3, [pc, #400]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004074:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	4960      	ldr	r1, [pc, #384]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800408c:	2301      	movs	r3, #1
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d017      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800409c:	4b58      	ldr	r3, [pc, #352]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	4955      	ldr	r1, [pc, #340]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ba:	d101      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80040bc:	2301      	movs	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80040c8:	2301      	movs	r3, #1
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040d8:	4b49      	ldr	r3, [pc, #292]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	4946      	ldr	r1, [pc, #280]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f6:	d101      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004104:	2301      	movs	r3, #1
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 808a 	beq.w	800422a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b39      	ldr	r3, [pc, #228]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a38      	ldr	r2, [pc, #224]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b36      	ldr	r3, [pc, #216]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004132:	4b34      	ldr	r3, [pc, #208]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a33      	ldr	r2, [pc, #204]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800413e:	f7fd fe7b 	bl	8001e38 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004146:	f7fd fe77 	bl	8001e38 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e278      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004164:	4b26      	ldr	r3, [pc, #152]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d02f      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	429a      	cmp	r2, r3
 8004180:	d028      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004182:	4b1f      	ldr	r3, [pc, #124]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800418c:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800419e:	4b18      	ldr	r3, [pc, #96]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d114      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fd fe45 	bl	8001e38 <HAL_GetTick>
 80041ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd fe41 	bl	8001e38 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e240      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ee      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e0:	d114      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	4902      	ldr	r1, [pc, #8]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]
 80041fc:	e00c      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	40007000 	.word	0x40007000
 8004208:	42470e40 	.word	0x42470e40
 800420c:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a49      	ldr	r2, [pc, #292]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004212:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004216:	6093      	str	r3, [r2, #8]
 8004218:	4b47      	ldr	r3, [pc, #284]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800421a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004224:	4944      	ldr	r1, [pc, #272]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004226:	4313      	orrs	r3, r2
 8004228:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800423c:	4b3f      	ldr	r3, [pc, #252]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800423e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800424c:	4b3a      	ldr	r3, [pc, #232]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004252:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	4937      	ldr	r1, [pc, #220]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800426e:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004274:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	492e      	ldr	r1, [pc, #184]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d011      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004296:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	4926      	ldr	r1, [pc, #152]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ae:	d101      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80042b0:	2301      	movs	r3, #1
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	491a      	ldr	r1, [pc, #104]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d011      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	4911      	ldr	r1, [pc, #68]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004300:	d101      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004302:	2301      	movs	r3, #1
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d005      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004314:	f040 80ff 	bne.w	8004516 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800431e:	f7fd fd8b 	bl	8001e38 <HAL_GetTick>
 8004322:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004324:	e00e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004326:	f7fd fd87 	bl	8001e38 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d907      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e188      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004338:	40023800 	.word	0x40023800
 800433c:	424711e0 	.word	0x424711e0
 8004340:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004344:	4b7e      	ldr	r3, [pc, #504]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ea      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800436c:	2b00      	cmp	r3, #0
 800436e:	d028      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d124      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004378:	4b71      	ldr	r3, [pc, #452]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800437a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437e:	0c1b      	lsrs	r3, r3, #16
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	3301      	adds	r3, #1
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800438a:	4b6d      	ldr	r3, [pc, #436]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004390:	0e1b      	lsrs	r3, r3, #24
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	431a      	orrs	r2, r3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	3b01      	subs	r3, #1
 80043aa:	041b      	lsls	r3, r3, #16
 80043ac:	431a      	orrs	r2, r3
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	4961      	ldr	r1, [pc, #388]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d035      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ec:	d130      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80043ee:	4b54      	ldr	r3, [pc, #336]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	3301      	adds	r3, #1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004400:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004406:	0f1b      	lsrs	r3, r3, #28
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	019b      	lsls	r3, r3, #6
 8004418:	431a      	orrs	r2, r3
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	431a      	orrs	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	071b      	lsls	r3, r3, #28
 8004430:	4943      	ldr	r1, [pc, #268]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004438:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800443a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443e:	f023 021f 	bic.w	r2, r3, #31
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	493d      	ldr	r1, [pc, #244]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d029      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004464:	d124      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004478:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	0f1b      	lsrs	r3, r3, #28
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	019b      	lsls	r3, r3, #6
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	431a      	orrs	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	071b      	lsls	r3, r3, #28
 80044a8:	4925      	ldr	r1, [pc, #148]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d016      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	019b      	lsls	r3, r3, #6
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	3b01      	subs	r3, #1
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	4917      	ldr	r1, [pc, #92]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f0:	f7fd fca2 	bl	8001e38 <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044f8:	f7fd fc9e 	bl	8001e38 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e09f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 8095 	bne.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004524:	f7fd fc88 	bl	8001e38 <HAL_GetTick>
 8004528:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800452a:	e00f      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800452c:	f7fd fc84 	bl	8001e38 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d908      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e085      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	42470068 	.word	0x42470068
 8004548:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800454c:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004558:	d0e8      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004576:	2b00      	cmp	r3, #0
 8004578:	d02b      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	2b00      	cmp	r3, #0
 8004580:	d127      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004582:	4b34      	ldr	r3, [pc, #208]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	3301      	adds	r3, #1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	431a      	orrs	r2, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	3b01      	subs	r3, #1
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	4928      	ldr	r1, [pc, #160]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045b8:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	3b01      	subs	r3, #1
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	4922      	ldr	r1, [pc, #136]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01d      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e6:	d118      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	0e1b      	lsrs	r3, r3, #24
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	019b      	lsls	r3, r3, #6
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	3b01      	subs	r3, #1
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	4910      	ldr	r1, [pc, #64]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800461a:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004620:	f7fd fc0a 	bl	8001e38 <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004628:	f7fd fc06 	bl	8001e38 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e007      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004646:	d1ef      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3730      	adds	r7, #48	; 0x30
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	42470070 	.word	0x42470070

0800465c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	2b07      	cmp	r3, #7
 8004682:	f200 8224 	bhi.w	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	0800488f 	.word	0x0800488f
 8004690:	080049b9 	.word	0x080049b9
 8004694:	08004acf 	.word	0x08004acf
 8004698:	080046ad 	.word	0x080046ad
 800469c:	08004acf 	.word	0x08004acf
 80046a0:	08004acf 	.word	0x08004acf
 80046a4:	08004acf 	.word	0x08004acf
 80046a8:	080046ad 	.word	0x080046ad
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80046ac:	4ba8      	ldr	r3, [pc, #672]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046c2:	f000 80d6 	beq.w	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046cc:	f200 80dd 	bhi.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046d6:	f000 809f 	beq.w	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046e0:	f200 80d3 	bhi.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ea:	d05b      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f2:	f200 80ca 	bhi.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046fc:	f000 80b6 	beq.w	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004706:	f200 80c0 	bhi.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004710:	f000 8082 	beq.w	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800471a:	f200 80b6 	bhi.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800472a:	d03b      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800472c:	e0ad      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800472e:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800473a:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004744:	4a83      	ldr	r2, [pc, #524]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e008      	b.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800474e:	4b80      	ldr	r3, [pc, #512]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004758:	4a7f      	ldr	r2, [pc, #508]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004760:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	0e1b      	lsrs	r3, r3, #24
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800476e:	4b78      	ldr	r3, [pc, #480]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	099b      	lsrs	r3, r3, #6
 8004776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	fb03 f202 	mul.w	r2, r3, r2
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004788:	4b71      	ldr	r3, [pc, #452]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800478a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	3301      	adds	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	61fb      	str	r3, [r7, #28]
          break;
 80047a2:	e073      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047a4:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047b0:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ba:	4a66      	ldr	r2, [pc, #408]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e008      	b.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80047c4:	4b62      	ldr	r3, [pc, #392]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ce:	4a62      	ldr	r2, [pc, #392]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80047d6:	4b5e      	ldr	r3, [pc, #376]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047dc:	0e1b      	lsrs	r3, r3, #24
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80047e4:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	fb03 f202 	mul.w	r2, r3, r2
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80047fe:	4b54      	ldr	r3, [pc, #336]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	3301      	adds	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	61fb      	str	r3, [r7, #28]
          break;
 8004816:	e039      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004818:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d108      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004824:	4b4a      	ldr	r3, [pc, #296]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482c:	4a49      	ldr	r2, [pc, #292]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	e007      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004836:	4b46      	ldr	r3, [pc, #280]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483e:	4a46      	ldr	r2, [pc, #280]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004846:	4b42      	ldr	r3, [pc, #264]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	0f1b      	lsrs	r3, r3, #28
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8004852:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	fb03 f202 	mul.w	r2, r3, r2
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	61fb      	str	r3, [r7, #28]
          break;
 800486a:	e00f      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800486e:	61fb      	str	r3, [r7, #28]
          break;
 8004870:	e00c      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004872:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800487e:	4b35      	ldr	r3, [pc, #212]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004880:	61fb      	str	r3, [r7, #28]
          break;
 8004882:	e003      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004886:	61fb      	str	r3, [r7, #28]
          break;
 8004888:	e000      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800488a:	bf00      	nop
        }
      }
      break;
 800488c:	e11f      	b.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004894:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80048a0:	d079      	beq.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80048a8:	f200 8082 	bhi.w	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048b2:	d03c      	beq.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ba:	d879      	bhi.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c8:	d172      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80048cc:	61fb      	str	r3, [r7, #28]
          break;
 80048ce:	e072      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048d0:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048dc:	d109      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80048de:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	e008      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80048f2:	4b17      	ldr	r3, [pc, #92]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fc:	4a15      	ldr	r2, [pc, #84]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004904:	4b12      	ldr	r3, [pc, #72]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490a:	099b      	lsrs	r3, r3, #6
 800490c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004918:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	0f1b      	lsrs	r3, r3, #28
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	61fb      	str	r3, [r7, #28]
          break;
 800492c:	e043      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493a:	d111      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e010      	b.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400
 8004958:	007a1200 	.word	0x007a1200
 800495c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004960:	4b5e      	ldr	r3, [pc, #376]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004968:	4a5d      	ldr	r2, [pc, #372]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004970:	4b5a      	ldr	r3, [pc, #360]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004982:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	0f1b      	lsrs	r3, r3, #28
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	61fb      	str	r3, [r7, #28]
          break;
 8004994:	e00f      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004996:	4b51      	ldr	r3, [pc, #324]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a2:	d102      	bne.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80049a4:	4b4f      	ldr	r3, [pc, #316]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80049a6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80049a8:	e005      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80049aa:	4b4d      	ldr	r3, [pc, #308]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80049ac:	61fb      	str	r3, [r7, #28]
          break;
 80049ae:	e002      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
          break;
 80049b4:	bf00      	nop
        }
      }
      break;
 80049b6:	e08a      	b.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80049b8:	4b48      	ldr	r3, [pc, #288]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049be:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80049ca:	d06f      	beq.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80049d2:	d878      	bhi.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049da:	d03c      	beq.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e2:	d870      	bhi.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f0:	d169      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049f2:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80049f4:	61fb      	str	r3, [r7, #28]
          break;
 80049f6:	e069      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049f8:	4b38      	ldr	r3, [pc, #224]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a04:	d109      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004a06:	4b35      	ldr	r3, [pc, #212]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a10:	4a34      	ldr	r2, [pc, #208]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e008      	b.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004a1a:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a24:	4a2e      	ldr	r2, [pc, #184]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a40:	4b26      	ldr	r3, [pc, #152]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	0f1b      	lsrs	r3, r3, #28
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	61fb      	str	r3, [r7, #28]
          break;
 8004a54:	e03a      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a56:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a62:	d108      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e007      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7e:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004a86:	4b15      	ldr	r3, [pc, #84]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0f1b      	lsrs	r3, r3, #28
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	61fb      	str	r3, [r7, #28]
          break;
 8004aaa:	e00f      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004abc:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004abe:	e005      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004ac2:	61fb      	str	r3, [r7, #28]
          break;
 8004ac4:	e002      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
          break;
 8004aca:	bf00      	nop
        }
      }
      break;
 8004acc:	bf00      	nop
    }
  }
  return frequency;
 8004ace:	69fb      	ldr	r3, [r7, #28]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3724      	adds	r7, #36	; 0x24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	00f42400 	.word	0x00f42400
 8004ae4:	007a1200 	.word	0x007a1200
 8004ae8:	00bb8000 	.word	0x00bb8000

08004aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af0:	b0ae      	sub	sp, #184	; 0xb8
 8004af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b12:	4bcb      	ldr	r3, [pc, #812]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	f200 8206 	bhi.w	8004f2c <HAL_RCC_GetSysClockFreq+0x440>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004f2d 	.word	0x08004f2d
 8004b30:	08004f2d 	.word	0x08004f2d
 8004b34:	08004f2d 	.word	0x08004f2d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004f2d 	.word	0x08004f2d
 8004b40:	08004f2d 	.word	0x08004f2d
 8004b44:	08004f2d 	.word	0x08004f2d
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004f2d 	.word	0x08004f2d
 8004b50:	08004f2d 	.word	0x08004f2d
 8004b54:	08004f2d 	.word	0x08004f2d
 8004b58:	08004d5d 	.word	0x08004d5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4bb9      	ldr	r3, [pc, #740]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004b62:	e1e7      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b64:	4bb8      	ldr	r3, [pc, #736]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b6a:	e1e3      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b6c:	4bb4      	ldr	r3, [pc, #720]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b78:	4bb1      	ldr	r3, [pc, #708]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d071      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b84:	4bae      	ldr	r3, [pc, #696]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b90:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	f04f 0000 	mov.w	r0, #0
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	0159      	lsls	r1, r3, #5
 8004bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bbc:	0150      	lsls	r0, r2, #5
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	1a51      	subs	r1, r2, r1
 8004bc6:	6439      	str	r1, [r7, #64]	; 0x40
 8004bc8:	4629      	mov	r1, r5
 8004bca:	eb63 0301 	sbc.w	r3, r3, r1
 8004bce:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004bdc:	4649      	mov	r1, r9
 8004bde:	018b      	lsls	r3, r1, #6
 8004be0:	4641      	mov	r1, r8
 8004be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004be6:	4641      	mov	r1, r8
 8004be8:	018a      	lsls	r2, r1, #6
 8004bea:	4641      	mov	r1, r8
 8004bec:	1a51      	subs	r1, r2, r1
 8004bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004c04:	4649      	mov	r1, r9
 8004c06:	00cb      	lsls	r3, r1, #3
 8004c08:	4641      	mov	r1, r8
 8004c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0e:	4641      	mov	r1, r8
 8004c10:	00ca      	lsls	r2, r1, #3
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	4622      	mov	r2, r4
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1e:	462b      	mov	r3, r5
 8004c20:	460a      	mov	r2, r1
 8004c22:	eb42 0303 	adc.w	r3, r2, r3
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c34:	4629      	mov	r1, r5
 8004c36:	024b      	lsls	r3, r1, #9
 8004c38:	4621      	mov	r1, r4
 8004c3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c3e:	4621      	mov	r1, r4
 8004c40:	024a      	lsls	r2, r1, #9
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004c58:	f7fc f80e 	bl	8000c78 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4613      	mov	r3, r2
 8004c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c66:	e067      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c68:	4b75      	ldr	r3, [pc, #468]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c74:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c82:	2300      	movs	r3, #0
 8004c84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	462b      	mov	r3, r5
 8004c8e:	f04f 0000 	mov.w	r0, #0
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	0159      	lsls	r1, r3, #5
 8004c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c9c:	0150      	lsls	r0, r2, #5
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	1a51      	subs	r1, r2, r1
 8004ca6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ca8:	4629      	mov	r1, r5
 8004caa:	eb63 0301 	sbc.w	r3, r3, r1
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	018b      	lsls	r3, r1, #6
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	018a      	lsls	r2, r1, #6
 8004cca:	4641      	mov	r1, r8
 8004ccc:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cea:	4692      	mov	sl, r2
 8004cec:	469b      	mov	fp, r3
 8004cee:	4623      	mov	r3, r4
 8004cf0:	eb1a 0303 	adds.w	r3, sl, r3
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	028b      	lsls	r3, r1, #10
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d14:	4621      	mov	r1, r4
 8004d16:	028a      	lsls	r2, r1, #10
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d20:	2200      	movs	r2, #0
 8004d22:	673b      	str	r3, [r7, #112]	; 0x70
 8004d24:	677a      	str	r2, [r7, #116]	; 0x74
 8004d26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004d2a:	f7fb ffa5 	bl	8000c78 <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4613      	mov	r3, r2
 8004d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d38:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	3301      	adds	r3, #1
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d5a:	e0eb      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d5c:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d68:	4b35      	ldr	r3, [pc, #212]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d06b      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d74:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d86:	663b      	str	r3, [r7, #96]	; 0x60
 8004d88:	2300      	movs	r3, #0
 8004d8a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004d90:	4622      	mov	r2, r4
 8004d92:	462b      	mov	r3, r5
 8004d94:	f04f 0000 	mov.w	r0, #0
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	0159      	lsls	r1, r3, #5
 8004d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da2:	0150      	lsls	r0, r2, #5
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4621      	mov	r1, r4
 8004daa:	1a51      	subs	r1, r2, r1
 8004dac:	61b9      	str	r1, [r7, #24]
 8004dae:	4629      	mov	r1, r5
 8004db0:	eb63 0301 	sbc.w	r3, r3, r1
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004dc2:	4659      	mov	r1, fp
 8004dc4:	018b      	lsls	r3, r1, #6
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dcc:	4651      	mov	r1, sl
 8004dce:	018a      	lsls	r2, r1, #6
 8004dd0:	4651      	mov	r1, sl
 8004dd2:	ebb2 0801 	subs.w	r8, r2, r1
 8004dd6:	4659      	mov	r1, fp
 8004dd8:	eb63 0901 	sbc.w	r9, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004df0:	4690      	mov	r8, r2
 8004df2:	4699      	mov	r9, r3
 8004df4:	4623      	mov	r3, r4
 8004df6:	eb18 0303 	adds.w	r3, r8, r3
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	eb49 0303 	adc.w	r3, r9, r3
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e10:	4629      	mov	r1, r5
 8004e12:	024b      	lsls	r3, r1, #9
 8004e14:	4621      	mov	r1, r4
 8004e16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	024a      	lsls	r2, r1, #9
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e26:	2200      	movs	r2, #0
 8004e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004e2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e30:	f7fb ff22 	bl	8000c78 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e3e:	e065      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x420>
 8004e40:	40023800 	.word	0x40023800
 8004e44:	00f42400 	.word	0x00f42400
 8004e48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4c:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	099b      	lsrs	r3, r3, #6
 8004e52:	2200      	movs	r2, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	4611      	mov	r1, r2
 8004e58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e5e:	2300      	movs	r3, #0
 8004e60:	657b      	str	r3, [r7, #84]	; 0x54
 8004e62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004e66:	4642      	mov	r2, r8
 8004e68:	464b      	mov	r3, r9
 8004e6a:	f04f 0000 	mov.w	r0, #0
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	0159      	lsls	r1, r3, #5
 8004e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e78:	0150      	lsls	r0, r2, #5
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4641      	mov	r1, r8
 8004e80:	1a51      	subs	r1, r2, r1
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	4649      	mov	r1, r9
 8004e86:	eb63 0301 	sbc.w	r3, r3, r1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e98:	4659      	mov	r1, fp
 8004e9a:	018b      	lsls	r3, r1, #6
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ea2:	4651      	mov	r1, sl
 8004ea4:	018a      	lsls	r2, r1, #6
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	1a54      	subs	r4, r2, r1
 8004eaa:	4659      	mov	r1, fp
 8004eac:	eb63 0501 	sbc.w	r5, r3, r1
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	00eb      	lsls	r3, r5, #3
 8004eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ebe:	00e2      	lsls	r2, r4, #3
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	18e3      	adds	r3, r4, r3
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	464b      	mov	r3, r9
 8004ecc:	eb45 0303 	adc.w	r3, r5, r3
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ede:	4629      	mov	r1, r5
 8004ee0:	028b      	lsls	r3, r1, #10
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ee8:	4621      	mov	r1, r4
 8004eea:	028a      	lsls	r2, r1, #10
 8004eec:	4610      	mov	r0, r2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004efa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004efe:	f7fb febb 	bl	8000c78 <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4613      	mov	r3, r2
 8004f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	0f1b      	lsrs	r3, r3, #28
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f2a:	e003      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	37b8      	adds	r7, #184	; 0xb8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800
 8004f48:	00f42400 	.word	0x00f42400

08004f4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e28d      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8083 	beq.w	8005072 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f6c:	4b94      	ldr	r3, [pc, #592]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d019      	beq.n	8004fac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f78:	4b91      	ldr	r3, [pc, #580]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f84:	4b8e      	ldr	r3, [pc, #568]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f90:	d00c      	beq.n	8004fac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f92:	4b8b      	ldr	r3, [pc, #556]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d112      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9e:	4b88      	ldr	r3, [pc, #544]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	4b84      	ldr	r3, [pc, #528]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05b      	beq.n	8005070 <HAL_RCC_OscConfig+0x124>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d157      	bne.n	8005070 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e25a      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d106      	bne.n	8004fdc <HAL_RCC_OscConfig+0x90>
 8004fce:	4b7c      	ldr	r3, [pc, #496]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a7b      	ldr	r2, [pc, #492]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e01d      	b.n	8005018 <HAL_RCC_OscConfig+0xcc>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0xb4>
 8004fe6:	4b76      	ldr	r3, [pc, #472]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a75      	ldr	r2, [pc, #468]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b73      	ldr	r3, [pc, #460]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a72      	ldr	r2, [pc, #456]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0xcc>
 8005000:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a6e      	ldr	r2, [pc, #440]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b6c      	ldr	r3, [pc, #432]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a6b      	ldr	r2, [pc, #428]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d013      	beq.n	8005048 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fc ff0a 	bl	8001e38 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005028:	f7fc ff06 	bl	8001e38 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e21f      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	4b61      	ldr	r3, [pc, #388]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0xdc>
 8005046:	e014      	b.n	8005072 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fc fef6 	bl	8001e38 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005050:	f7fc fef2 	bl	8001e38 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e20b      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	4b57      	ldr	r3, [pc, #348]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x104>
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d06f      	beq.n	800515e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800507e:	4b50      	ldr	r3, [pc, #320]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b00      	cmp	r3, #0
 8005088:	d017      	beq.n	80050ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800508a:	4b4d      	ldr	r3, [pc, #308]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005092:	2b08      	cmp	r3, #8
 8005094:	d105      	bne.n	80050a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005096:	4b4a      	ldr	r3, [pc, #296]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d11c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b44      	ldr	r3, [pc, #272]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d116      	bne.n	80050e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_RCC_OscConfig+0x186>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e1d3      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4937      	ldr	r1, [pc, #220]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	e03a      	b.n	800515e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f0:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_RCC_OscConfig+0x278>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fc fe9f 	bl	8001e38 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050fe:	f7fc fe9b 	bl	8001e38 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e1b4      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	4b2b      	ldr	r3, [pc, #172]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4925      	ldr	r1, [pc, #148]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
 8005130:	e015      	b.n	800515e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_OscConfig+0x278>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fc fe7e 	bl	8001e38 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005140:	f7fc fe7a 	bl	8001e38 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e193      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d036      	beq.n	80051d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <HAL_RCC_OscConfig+0x27c>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fc fe5e 	bl	8001e38 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005180:	f7fc fe5a 	bl	8001e38 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e173      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x234>
 800519e:	e01b      	b.n	80051d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a6:	f7fc fe47 	bl	8001e38 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ac:	e00e      	b.n	80051cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ae:	f7fc fe43 	bl	8001e38 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d907      	bls.n	80051cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e15c      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
 80051c0:	40023800 	.word	0x40023800
 80051c4:	42470000 	.word	0x42470000
 80051c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	4b8a      	ldr	r3, [pc, #552]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ea      	bne.n	80051ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8097 	beq.w	8005314 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ea:	4b83      	ldr	r3, [pc, #524]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10f      	bne.n	8005216 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	4b7f      	ldr	r3, [pc, #508]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a7e      	ldr	r2, [pc, #504]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b7c      	ldr	r3, [pc, #496]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	4b79      	ldr	r3, [pc, #484]	; (80053fc <HAL_RCC_OscConfig+0x4b0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d118      	bne.n	8005254 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005222:	4b76      	ldr	r3, [pc, #472]	; (80053fc <HAL_RCC_OscConfig+0x4b0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a75      	ldr	r2, [pc, #468]	; (80053fc <HAL_RCC_OscConfig+0x4b0>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522e:	f7fc fe03 	bl	8001e38 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005236:	f7fc fdff 	bl	8001e38 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e118      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	4b6c      	ldr	r3, [pc, #432]	; (80053fc <HAL_RCC_OscConfig+0x4b0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <HAL_RCC_OscConfig+0x31e>
 800525c:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	4a65      	ldr	r2, [pc, #404]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6713      	str	r3, [r2, #112]	; 0x70
 8005268:	e01c      	b.n	80052a4 <HAL_RCC_OscConfig+0x358>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b05      	cmp	r3, #5
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0x340>
 8005272:	4b61      	ldr	r3, [pc, #388]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a60      	ldr	r2, [pc, #384]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005278:	f043 0304 	orr.w	r3, r3, #4
 800527c:	6713      	str	r3, [r2, #112]	; 0x70
 800527e:	4b5e      	ldr	r3, [pc, #376]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	4a5d      	ldr	r2, [pc, #372]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6713      	str	r3, [r2, #112]	; 0x70
 800528a:	e00b      	b.n	80052a4 <HAL_RCC_OscConfig+0x358>
 800528c:	4b5a      	ldr	r3, [pc, #360]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	4a59      	ldr	r2, [pc, #356]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	6713      	str	r3, [r2, #112]	; 0x70
 8005298:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 800529e:	f023 0304 	bic.w	r3, r3, #4
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fc fdc4 	bl	8001e38 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fc fdc0 	bl	8001e38 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e0d7      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ca:	4b4b      	ldr	r3, [pc, #300]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ee      	beq.n	80052b4 <HAL_RCC_OscConfig+0x368>
 80052d6:	e014      	b.n	8005302 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fc fdae 	bl	8001e38 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e0:	f7fc fdaa 	bl	8001e38 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e0c1      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f6:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1ee      	bne.n	80052e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d105      	bne.n	8005314 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005308:	4b3b      	ldr	r3, [pc, #236]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	4a3a      	ldr	r2, [pc, #232]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 800530e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80ad 	beq.w	8005478 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800531e:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b08      	cmp	r3, #8
 8005328:	d060      	beq.n	80053ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d145      	bne.n	80053be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005332:	4b33      	ldr	r3, [pc, #204]	; (8005400 <HAL_RCC_OscConfig+0x4b4>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fc fd7e 	bl	8001e38 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005340:	f7fc fd7a 	bl	8001e38 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e093      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	019b      	lsls	r3, r3, #6
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	3b01      	subs	r3, #1
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	061b      	lsls	r3, r3, #24
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	071b      	lsls	r3, r3, #28
 800538a:	491b      	ldr	r1, [pc, #108]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005390:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x4b4>)
 8005392:	2201      	movs	r2, #1
 8005394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005396:	f7fc fd4f 	bl	8001e38 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539e:	f7fc fd4b 	bl	8001e38 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e064      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x452>
 80053bc:	e05c      	b.n	8005478 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_RCC_OscConfig+0x4b4>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7fc fd38 	bl	8001e38 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fc fd34 	bl	8001e38 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e04d      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_RCC_OscConfig+0x4ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x480>
 80053ea:	e045      	b.n	8005478 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e040      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
 8005400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005404:	4b1f      	ldr	r3, [pc, #124]	; (8005484 <HAL_RCC_OscConfig+0x538>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d030      	beq.n	8005474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d129      	bne.n	8005474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d122      	bne.n	8005474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005434:	4013      	ands	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800543a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543c:	4293      	cmp	r3, r2
 800543e:	d119      	bne.n	8005474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	3b01      	subs	r3, #1
 800544e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d10f      	bne.n	8005474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d107      	bne.n	8005474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800

08005488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e07b      	b.n	8005592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d009      	beq.n	80054c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	61da      	str	r2, [r3, #28]
 80054b2:	e005      	b.n	80054c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fc fa4c 	bl	8001978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005544:	ea42 0103 	orr.w	r1, r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	f003 0104 	and.w	r1, r3, #4
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f003 0210 	and.w	r2, r3, #16
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e03f      	b.n	800562c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d106      	bne.n	80055c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7fc fa21 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2224      	movs	r2, #36	; 0x24
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f828 	bl	8005634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005602:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005612:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005638:	b0c0      	sub	sp, #256	; 0x100
 800563a:	af00      	add	r7, sp, #0
 800563c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	68d9      	ldr	r1, [r3, #12]
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	ea40 0301 	orr.w	r3, r0, r1
 800565c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	431a      	orrs	r2, r3
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	431a      	orrs	r2, r3
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800568c:	f021 010c 	bic.w	r1, r1, #12
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800569a:	430b      	orrs	r3, r1
 800569c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ae:	6999      	ldr	r1, [r3, #24]
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	ea40 0301 	orr.w	r3, r0, r1
 80056ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b8f      	ldr	r3, [pc, #572]	; (8005900 <UART_SetConfig+0x2cc>)
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d005      	beq.n	80056d4 <UART_SetConfig+0xa0>
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b8d      	ldr	r3, [pc, #564]	; (8005904 <UART_SetConfig+0x2d0>)
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d104      	bne.n	80056de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7fe fc84 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 80056d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056dc:	e003      	b.n	80056e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056de:	f7fe fc6b 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 80056e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f0:	f040 810c 	bne.w	800590c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	1891      	adds	r1, r2, r2
 800570c:	65b9      	str	r1, [r7, #88]	; 0x58
 800570e:	415b      	adcs	r3, r3
 8005710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005716:	4621      	mov	r1, r4
 8005718:	eb12 0801 	adds.w	r8, r2, r1
 800571c:	4629      	mov	r1, r5
 800571e:	eb43 0901 	adc.w	r9, r3, r1
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800572e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005736:	4690      	mov	r8, r2
 8005738:	4699      	mov	r9, r3
 800573a:	4623      	mov	r3, r4
 800573c:	eb18 0303 	adds.w	r3, r8, r3
 8005740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005744:	462b      	mov	r3, r5
 8005746:	eb49 0303 	adc.w	r3, r9, r3
 800574a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800575a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800575e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005762:	460b      	mov	r3, r1
 8005764:	18db      	adds	r3, r3, r3
 8005766:	653b      	str	r3, [r7, #80]	; 0x50
 8005768:	4613      	mov	r3, r2
 800576a:	eb42 0303 	adc.w	r3, r2, r3
 800576e:	657b      	str	r3, [r7, #84]	; 0x54
 8005770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005778:	f7fb fa7e 	bl	8000c78 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4b61      	ldr	r3, [pc, #388]	; (8005908 <UART_SetConfig+0x2d4>)
 8005782:	fba3 2302 	umull	r2, r3, r3, r2
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	011c      	lsls	r4, r3, #4
 800578a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800578e:	2200      	movs	r2, #0
 8005790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005794:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800579c:	4642      	mov	r2, r8
 800579e:	464b      	mov	r3, r9
 80057a0:	1891      	adds	r1, r2, r2
 80057a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80057a4:	415b      	adcs	r3, r3
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057ac:	4641      	mov	r1, r8
 80057ae:	eb12 0a01 	adds.w	sl, r2, r1
 80057b2:	4649      	mov	r1, r9
 80057b4:	eb43 0b01 	adc.w	fp, r3, r1
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057cc:	4692      	mov	sl, r2
 80057ce:	469b      	mov	fp, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	eb1a 0303 	adds.w	r3, sl, r3
 80057d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057da:	464b      	mov	r3, r9
 80057dc:	eb4b 0303 	adc.w	r3, fp, r3
 80057e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057f8:	460b      	mov	r3, r1
 80057fa:	18db      	adds	r3, r3, r3
 80057fc:	643b      	str	r3, [r7, #64]	; 0x40
 80057fe:	4613      	mov	r3, r2
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	647b      	str	r3, [r7, #68]	; 0x44
 8005806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800580a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800580e:	f7fb fa33 	bl	8000c78 <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4611      	mov	r1, r2
 8005818:	4b3b      	ldr	r3, [pc, #236]	; (8005908 <UART_SetConfig+0x2d4>)
 800581a:	fba3 2301 	umull	r2, r3, r3, r1
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2264      	movs	r2, #100	; 0x64
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	1acb      	subs	r3, r1, r3
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800582e:	4b36      	ldr	r3, [pc, #216]	; (8005908 <UART_SetConfig+0x2d4>)
 8005830:	fba3 2302 	umull	r2, r3, r3, r2
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800583c:	441c      	add	r4, r3
 800583e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005842:	2200      	movs	r2, #0
 8005844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005848:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800584c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	1891      	adds	r1, r2, r2
 8005856:	63b9      	str	r1, [r7, #56]	; 0x38
 8005858:	415b      	adcs	r3, r3
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800585c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005860:	4641      	mov	r1, r8
 8005862:	1851      	adds	r1, r2, r1
 8005864:	6339      	str	r1, [r7, #48]	; 0x30
 8005866:	4649      	mov	r1, r9
 8005868:	414b      	adcs	r3, r1
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005878:	4659      	mov	r1, fp
 800587a:	00cb      	lsls	r3, r1, #3
 800587c:	4651      	mov	r1, sl
 800587e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005882:	4651      	mov	r1, sl
 8005884:	00ca      	lsls	r2, r1, #3
 8005886:	4610      	mov	r0, r2
 8005888:	4619      	mov	r1, r3
 800588a:	4603      	mov	r3, r0
 800588c:	4642      	mov	r2, r8
 800588e:	189b      	adds	r3, r3, r2
 8005890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005894:	464b      	mov	r3, r9
 8005896:	460a      	mov	r2, r1
 8005898:	eb42 0303 	adc.w	r3, r2, r3
 800589c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058b4:	460b      	mov	r3, r1
 80058b6:	18db      	adds	r3, r3, r3
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ba:	4613      	mov	r3, r2
 80058bc:	eb42 0303 	adc.w	r3, r2, r3
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058ca:	f7fb f9d5 	bl	8000c78 <__aeabi_uldivmod>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <UART_SetConfig+0x2d4>)
 80058d4:	fba3 1302 	umull	r1, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	2164      	movs	r1, #100	; 0x64
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	3332      	adds	r3, #50	; 0x32
 80058e6:	4a08      	ldr	r2, [pc, #32]	; (8005908 <UART_SetConfig+0x2d4>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	f003 0207 	and.w	r2, r3, #7
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4422      	add	r2, r4
 80058fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058fc:	e105      	b.n	8005b0a <UART_SetConfig+0x4d6>
 80058fe:	bf00      	nop
 8005900:	40011000 	.word	0x40011000
 8005904:	40011400 	.word	0x40011400
 8005908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005910:	2200      	movs	r2, #0
 8005912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005916:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800591a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800591e:	4642      	mov	r2, r8
 8005920:	464b      	mov	r3, r9
 8005922:	1891      	adds	r1, r2, r2
 8005924:	6239      	str	r1, [r7, #32]
 8005926:	415b      	adcs	r3, r3
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
 800592a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800592e:	4641      	mov	r1, r8
 8005930:	1854      	adds	r4, r2, r1
 8005932:	4649      	mov	r1, r9
 8005934:	eb43 0501 	adc.w	r5, r3, r1
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	00eb      	lsls	r3, r5, #3
 8005942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005946:	00e2      	lsls	r2, r4, #3
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	4643      	mov	r3, r8
 800594e:	18e3      	adds	r3, r4, r3
 8005950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005954:	464b      	mov	r3, r9
 8005956:	eb45 0303 	adc.w	r3, r5, r3
 800595a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800596a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800597a:	4629      	mov	r1, r5
 800597c:	008b      	lsls	r3, r1, #2
 800597e:	4621      	mov	r1, r4
 8005980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005984:	4621      	mov	r1, r4
 8005986:	008a      	lsls	r2, r1, #2
 8005988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800598c:	f7fb f974 	bl	8000c78 <__aeabi_uldivmod>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4b60      	ldr	r3, [pc, #384]	; (8005b18 <UART_SetConfig+0x4e4>)
 8005996:	fba3 2302 	umull	r2, r3, r3, r2
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	011c      	lsls	r4, r3, #4
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	1891      	adds	r1, r2, r2
 80059b6:	61b9      	str	r1, [r7, #24]
 80059b8:	415b      	adcs	r3, r3
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c0:	4641      	mov	r1, r8
 80059c2:	1851      	adds	r1, r2, r1
 80059c4:	6139      	str	r1, [r7, #16]
 80059c6:	4649      	mov	r1, r9
 80059c8:	414b      	adcs	r3, r1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d8:	4659      	mov	r1, fp
 80059da:	00cb      	lsls	r3, r1, #3
 80059dc:	4651      	mov	r1, sl
 80059de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e2:	4651      	mov	r1, sl
 80059e4:	00ca      	lsls	r2, r1, #3
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	4642      	mov	r2, r8
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059f4:	464b      	mov	r3, r9
 80059f6:	460a      	mov	r2, r1
 80059f8:	eb42 0303 	adc.w	r3, r2, r3
 80059fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a18:	4649      	mov	r1, r9
 8005a1a:	008b      	lsls	r3, r1, #2
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a22:	4641      	mov	r1, r8
 8005a24:	008a      	lsls	r2, r1, #2
 8005a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a2a:	f7fb f925 	bl	8000c78 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <UART_SetConfig+0x4e4>)
 8005a34:	fba3 1302 	umull	r1, r3, r3, r2
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	2164      	movs	r1, #100	; 0x64
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	3332      	adds	r3, #50	; 0x32
 8005a46:	4a34      	ldr	r2, [pc, #208]	; (8005b18 <UART_SetConfig+0x4e4>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a52:	441c      	add	r4, r3
 8005a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a58:	2200      	movs	r2, #0
 8005a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a5c:	677a      	str	r2, [r7, #116]	; 0x74
 8005a5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a62:	4642      	mov	r2, r8
 8005a64:	464b      	mov	r3, r9
 8005a66:	1891      	adds	r1, r2, r2
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	415b      	adcs	r3, r3
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a72:	4641      	mov	r1, r8
 8005a74:	1851      	adds	r1, r2, r1
 8005a76:	6039      	str	r1, [r7, #0]
 8005a78:	4649      	mov	r1, r9
 8005a7a:	414b      	adcs	r3, r1
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a8a:	4659      	mov	r1, fp
 8005a8c:	00cb      	lsls	r3, r1, #3
 8005a8e:	4651      	mov	r1, sl
 8005a90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a94:	4651      	mov	r1, sl
 8005a96:	00ca      	lsls	r2, r1, #3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	189b      	adds	r3, r3, r2
 8005aa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ab8:	667a      	str	r2, [r7, #100]	; 0x64
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	008b      	lsls	r3, r1, #2
 8005aca:	4641      	mov	r1, r8
 8005acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	008a      	lsls	r2, r1, #2
 8005ad4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ad8:	f7fb f8ce 	bl	8000c78 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <UART_SetConfig+0x4e4>)
 8005ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	2164      	movs	r1, #100	; 0x64
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	3332      	adds	r3, #50	; 0x32
 8005af4:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <UART_SetConfig+0x4e4>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	f003 020f 	and.w	r2, r3, #15
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4422      	add	r2, r4
 8005b08:	609a      	str	r2, [r3, #8]
}
 8005b0a:	bf00      	nop
 8005b0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b10:	46bd      	mov	sp, r7
 8005b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b16:	bf00      	nop
 8005b18:	51eb851f 	.word	0x51eb851f

08005b1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	f107 001c 	add.w	r0, r7, #28
 8005b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d122      	bne.n	8005b7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d105      	bne.n	8005b6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fbe8 	bl	8007344 <USB_CoreReset>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	e01a      	b.n	8005bb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fbdc 	bl	8007344 <USB_CoreReset>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ba2:	e005      	b.n	8005bb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10b      	bne.n	8005bce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f043 0206 	orr.w	r2, r3, #6
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bda:	b004      	add	sp, #16
 8005bdc:	4770      	bx	lr
	...

08005be0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d165      	bne.n	8005cc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4a41      	ldr	r2, [pc, #260]	; (8005cfc <USB_SetTurnaroundTime+0x11c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d906      	bls.n	8005c0a <USB_SetTurnaroundTime+0x2a>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <USB_SetTurnaroundTime+0x120>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d202      	bcs.n	8005c0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c04:	230f      	movs	r3, #15
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e062      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4a3c      	ldr	r2, [pc, #240]	; (8005d00 <USB_SetTurnaroundTime+0x120>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d306      	bcc.n	8005c20 <USB_SetTurnaroundTime+0x40>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a3b      	ldr	r2, [pc, #236]	; (8005d04 <USB_SetTurnaroundTime+0x124>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d202      	bcs.n	8005c20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c1a:	230e      	movs	r3, #14
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e057      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4a38      	ldr	r2, [pc, #224]	; (8005d04 <USB_SetTurnaroundTime+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d306      	bcc.n	8005c36 <USB_SetTurnaroundTime+0x56>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a37      	ldr	r2, [pc, #220]	; (8005d08 <USB_SetTurnaroundTime+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d202      	bcs.n	8005c36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c30:	230d      	movs	r3, #13
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e04c      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4a33      	ldr	r2, [pc, #204]	; (8005d08 <USB_SetTurnaroundTime+0x128>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d306      	bcc.n	8005c4c <USB_SetTurnaroundTime+0x6c>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4a32      	ldr	r2, [pc, #200]	; (8005d0c <USB_SetTurnaroundTime+0x12c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d802      	bhi.n	8005c4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c46:	230c      	movs	r3, #12
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e041      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4a2f      	ldr	r2, [pc, #188]	; (8005d0c <USB_SetTurnaroundTime+0x12c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d906      	bls.n	8005c62 <USB_SetTurnaroundTime+0x82>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4a2e      	ldr	r2, [pc, #184]	; (8005d10 <USB_SetTurnaroundTime+0x130>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d802      	bhi.n	8005c62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c5c:	230b      	movs	r3, #11
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e036      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <USB_SetTurnaroundTime+0x130>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d906      	bls.n	8005c78 <USB_SetTurnaroundTime+0x98>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <USB_SetTurnaroundTime+0x134>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d802      	bhi.n	8005c78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c72:	230a      	movs	r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e02b      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <USB_SetTurnaroundTime+0x134>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d906      	bls.n	8005c8e <USB_SetTurnaroundTime+0xae>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4a25      	ldr	r2, [pc, #148]	; (8005d18 <USB_SetTurnaroundTime+0x138>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d202      	bcs.n	8005c8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c88:	2309      	movs	r3, #9
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e020      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <USB_SetTurnaroundTime+0x138>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d306      	bcc.n	8005ca4 <USB_SetTurnaroundTime+0xc4>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <USB_SetTurnaroundTime+0x13c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d802      	bhi.n	8005ca4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e015      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <USB_SetTurnaroundTime+0x13c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d906      	bls.n	8005cba <USB_SetTurnaroundTime+0xda>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <USB_SetTurnaroundTime+0x140>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d202      	bcs.n	8005cba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005cb4:	2307      	movs	r3, #7
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e00a      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cba:	2306      	movs	r3, #6
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e007      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cc6:	2309      	movs	r3, #9
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e001      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ccc:	2309      	movs	r3, #9
 8005cce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	00d8acbf 	.word	0x00d8acbf
 8005d00:	00e4e1c0 	.word	0x00e4e1c0
 8005d04:	00f42400 	.word	0x00f42400
 8005d08:	01067380 	.word	0x01067380
 8005d0c:	011a499f 	.word	0x011a499f
 8005d10:	01312cff 	.word	0x01312cff
 8005d14:	014ca43f 	.word	0x014ca43f
 8005d18:	016e3600 	.word	0x016e3600
 8005d1c:	01a6ab1f 	.word	0x01a6ab1f
 8005d20:	01e84800 	.word	0x01e84800

08005d24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f043 0201 	orr.w	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d115      	bne.n	8005db6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7fc f85a 	bl	8001e50 <HAL_Delay>
      ms++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 fa3f 	bl	8007226 <USB_GetMode>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d01e      	beq.n	8005dec <USB_SetCurrentMode+0x84>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b31      	cmp	r3, #49	; 0x31
 8005db2:	d9f0      	bls.n	8005d96 <USB_SetCurrentMode+0x2e>
 8005db4:	e01a      	b.n	8005dec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d115      	bne.n	8005de8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fc f841 	bl	8001e50 <HAL_Delay>
      ms++;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fa26 	bl	8007226 <USB_GetMode>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <USB_SetCurrentMode+0x84>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b31      	cmp	r3, #49	; 0x31
 8005de4:	d9f0      	bls.n	8005dc8 <USB_SetCurrentMode+0x60>
 8005de6:	e001      	b.n	8005dec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e005      	b.n	8005df8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b32      	cmp	r3, #50	; 0x32
 8005df0:	d101      	bne.n	8005df6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e00:	b084      	sub	sp, #16
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	e009      	b.n	8005e34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3340      	adds	r3, #64	; 0x40
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b0e      	cmp	r3, #14
 8005e38:	d9f2      	bls.n	8005e20 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11c      	bne.n	8005e7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4e:	f043 0302 	orr.w	r3, r3, #2
 8005e52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e005      	b.n	8005e86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	680b      	ldr	r3, [r1, #0]
 8005ea4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10c      	bne.n	8005ec6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f965 	bl	8006184 <USB_SetDevSpeed>
 8005eba:	e008      	b.n	8005ece <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f960 	bl	8006184 <USB_SetDevSpeed>
 8005ec4:	e003      	b.n	8005ece <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ec6:	2103      	movs	r1, #3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f95b 	bl	8006184 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ece:	2110      	movs	r1, #16
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f8f3 	bl	80060bc <USB_FlushTxFifo>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f91f 	bl	8006124 <USB_FlushRxFifo>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	e043      	b.n	8005fa2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f30:	d118      	bne.n	8005f64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	461a      	mov	r2, r3
 8005f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e013      	b.n	8005f76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e008      	b.n	8005f76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	461a      	mov	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	461a      	mov	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	461a      	mov	r2, r3
 8005f96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3b7      	bcc.n	8005f1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e043      	b.n	8006038 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc6:	d118      	bne.n	8005ffa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e013      	b.n	800600c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e008      	b.n	800600c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	461a      	mov	r2, r3
 800602c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3301      	adds	r3, #1
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3b7      	bcc.n	8005fb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006052:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006060:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d105      	bne.n	8006074 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f043 0210 	orr.w	r2, r3, #16
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <USB_DevInit+0x2b8>)
 800607a:	4313      	orrs	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f043 0208 	orr.w	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d107      	bne.n	80060a8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060a0:	f043 0304 	orr.w	r3, r3, #4
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b4:	b004      	add	sp, #16
 80060b6:	4770      	bx	lr
 80060b8:	803c3800 	.word	0x803c3800

080060bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a13      	ldr	r2, [pc, #76]	; (8006120 <USB_FlushTxFifo+0x64>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e01b      	b.n	8006114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	daf2      	bge.n	80060ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	019b      	lsls	r3, r3, #6
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a08      	ldr	r2, [pc, #32]	; (8006120 <USB_FlushTxFifo+0x64>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e006      	b.n	8006114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b20      	cmp	r3, #32
 8006110:	d0f0      	beq.n	80060f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	00030d40 	.word	0x00030d40

08006124 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a11      	ldr	r2, [pc, #68]	; (8006180 <USB_FlushRxFifo+0x5c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e018      	b.n	8006174 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	daf2      	bge.n	8006130 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2210      	movs	r2, #16
 8006152:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <USB_FlushRxFifo+0x5c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e006      	b.n	8006174 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b10      	cmp	r3, #16
 8006170:	d0f0      	beq.n	8006154 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	00030d40 	.word	0x00030d40

08006184 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0306 	and.w	r3, r3, #6
 80061ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
 80061da:	e00a      	b.n	80061f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d002      	beq.n	80061e8 <USB_GetDevSpeed+0x32>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b06      	cmp	r3, #6
 80061e6:	d102      	bne.n	80061ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061e8:	2302      	movs	r3, #2
 80061ea:	75fb      	strb	r3, [r7, #23]
 80061ec:	e001      	b.n	80061f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061ee:	230f      	movs	r3, #15
 80061f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d13a      	bne.n	8006292 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	b29b      	uxth	r3, r3
 8006234:	68f9      	ldr	r1, [r7, #12]
 8006236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800623a:	4313      	orrs	r3, r2
 800623c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d155      	bne.n	8006300 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006270:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	059b      	lsls	r3, r3, #22
 8006276:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006278:	4313      	orrs	r3, r2
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	e036      	b.n	8006300 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	2101      	movs	r1, #1
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11a      	bne.n	8006300 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	791b      	ldrb	r3, [r3, #4]
 80062e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062e6:	430b      	orrs	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d161      	bne.n	80063f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006342:	d11f      	bne.n	8006384 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006362:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006382:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f303 	lsl.w	r3, r1, r3
 800639a:	b29b      	uxth	r3, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a4:	4013      	ands	r3, r2
 80063a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	b29b      	uxth	r3, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c8:	4013      	ands	r3, r2
 80063ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	0159      	lsls	r1, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	440b      	add	r3, r1
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	4619      	mov	r1, r3
 80063e8:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <USB_DeactivateEndpoint+0x1b0>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]
 80063ee:	e060      	b.n	80064b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006406:	d11f      	bne.n	8006448 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006422:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006426:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006446:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	2101      	movs	r1, #1
 800645a:	fa01 f303 	lsl.w	r3, r1, r3
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	43db      	mvns	r3, r3
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006468:	4013      	ands	r3, r2
 800646a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	43db      	mvns	r3, r3
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648c:	4013      	ands	r3, r2
 800648e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	0159      	lsls	r1, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	440b      	add	r3, r1
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	4619      	mov	r1, r3
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <USB_DeactivateEndpoint+0x1b4>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	ec337800 	.word	0xec337800
 80064c4:	eff37800 	.word	0xeff37800

080064c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f040 815c 	bne.w	80067a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d132      	bne.n	8006558 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006510:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006550:	0cdb      	lsrs	r3, r3, #19
 8006552:	04db      	lsls	r3, r3, #19
 8006554:	6113      	str	r3, [r2, #16]
 8006556:	e074      	b.n	8006642 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	0cdb      	lsrs	r3, r3, #19
 8006574:	04db      	lsls	r3, r3, #19
 8006576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006592:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006596:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800659a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6999      	ldr	r1, [r3, #24]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	440b      	add	r3, r1
 80065b4:	1e59      	subs	r1, r3, #1
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80065be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065c0:	4b9d      	ldr	r3, [pc, #628]	; (8006838 <USB_EPStartXfer+0x370>)
 80065c2:	400b      	ands	r3, r1
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	0148      	lsls	r0, r1, #5
 80065c8:	69f9      	ldr	r1, [r7, #28]
 80065ca:	4401      	add	r1, r0
 80065cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065d0:	4313      	orrs	r3, r2
 80065d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ea:	69b9      	ldr	r1, [r7, #24]
 80065ec:	0148      	lsls	r0, r1, #5
 80065ee:	69f9      	ldr	r1, [r7, #28]
 80065f0:	4401      	add	r1, r0
 80065f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065f6:	4313      	orrs	r3, r2
 80065f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	791b      	ldrb	r3, [r3, #4]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d11f      	bne.n	8006642 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006620:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006640:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d14b      	bne.n	80066e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	461a      	mov	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d128      	bne.n	80066be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d110      	bne.n	800669e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e00f      	b.n	80066be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e133      	b.n	8006948 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	791b      	ldrb	r3, [r3, #4]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d015      	beq.n	8006734 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 811b 	beq.w	8006948 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	2101      	movs	r1, #1
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	69f9      	ldr	r1, [r7, #28]
 800672a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800672e:	4313      	orrs	r3, r2
 8006730:	634b      	str	r3, [r1, #52]	; 0x34
 8006732:	e109      	b.n	8006948 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d110      	bne.n	8006766 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e00f      	b.n	8006786 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6919      	ldr	r1, [r3, #16]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	b298      	uxth	r0, r3
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4603      	mov	r3, r0
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fade 	bl	8006d5c <USB_WritePacket>
 80067a0:	e0d2      	b.n	8006948 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067bc:	0cdb      	lsrs	r3, r3, #19
 80067be:	04db      	lsls	r3, r3, #19
 80067c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d126      	bne.n	800683c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006804:	69b9      	ldr	r1, [r7, #24]
 8006806:	0148      	lsls	r0, r1, #5
 8006808:	69f9      	ldr	r1, [r7, #28]
 800680a:	4401      	add	r1, r0
 800680c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006810:	4313      	orrs	r3, r2
 8006812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006832:	6113      	str	r3, [r2, #16]
 8006834:	e03a      	b.n	80068ac <USB_EPStartXfer+0x3e4>
 8006836:	bf00      	nop
 8006838:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4413      	add	r3, r2
 8006846:	1e5a      	subs	r2, r3, #1
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	8afa      	ldrh	r2, [r7, #22]
 8006858:	fb03 f202 	mul.w	r2, r3, r2
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	8afb      	ldrh	r3, [r7, #22]
 8006870:	04d9      	lsls	r1, r3, #19
 8006872:	4b38      	ldr	r3, [pc, #224]	; (8006954 <USB_EPStartXfer+0x48c>)
 8006874:	400b      	ands	r3, r1
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	0148      	lsls	r0, r1, #5
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	4401      	add	r1, r0
 800687e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800689c:	69b9      	ldr	r1, [r7, #24]
 800689e:	0148      	lsls	r0, r1, #5
 80068a0:	69f9      	ldr	r1, [r7, #28]
 80068a2:	4401      	add	r1, r0
 80068a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068a8:	4313      	orrs	r3, r2
 80068aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d10d      	bne.n	80068ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6919      	ldr	r1, [r3, #16]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	460a      	mov	r2, r1
 80068cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	791b      	ldrb	r3, [r3, #4]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d128      	bne.n	8006928 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d110      	bne.n	8006908 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e00f      	b.n	8006928 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006926:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	1ff80000 	.word	0x1ff80000

08006958 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	f040 80ce 	bne.w	8006b16 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d132      	bne.n	80069e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	0151      	lsls	r1, r2, #5
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	440a      	add	r2, r1
 80069bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e0:	0cdb      	lsrs	r3, r3, #19
 80069e2:	04db      	lsls	r3, r3, #19
 80069e4:	6113      	str	r3, [r2, #16]
 80069e6:	e04e      	b.n	8006a86 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a02:	0cdb      	lsrs	r3, r3, #19
 8006a04:	04db      	lsls	r3, r3, #19
 8006a06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a2a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d903      	bls.n	8006a40 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a76:	6939      	ldr	r1, [r7, #16]
 8006a78:	0148      	lsls	r0, r1, #5
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	4401      	add	r1, r0
 8006a7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a82:	4313      	orrs	r3, r2
 8006a84:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d11e      	bne.n	8006aca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	e097      	b.n	8006bfa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ae8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8083 	beq.w	8006bfa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	2101      	movs	r1, #1
 8006b06:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0a:	6979      	ldr	r1, [r7, #20]
 8006b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b10:	4313      	orrs	r3, r2
 8006b12:	634b      	str	r3, [r1, #52]	; 0x34
 8006b14:	e071      	b.n	8006bfa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b30:	0cdb      	lsrs	r3, r3, #19
 8006b32:	04db      	lsls	r3, r3, #19
 8006b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba8:	6939      	ldr	r1, [r7, #16]
 8006baa:	0148      	lsls	r0, r1, #5
 8006bac:	6979      	ldr	r1, [r7, #20]
 8006bae:	4401      	add	r1, r0
 8006bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d10d      	bne.n	8006bda <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6919      	ldr	r1, [r3, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d14a      	bne.n	8006cbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3e:	f040 8086 	bne.w	8006d4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	0151      	lsls	r1, r2, #5
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d902      	bls.n	8006ca0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c9e:	e056      	b.n	8006d4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb8:	d0e7      	beq.n	8006c8a <USB_EPStopXfer+0x82>
 8006cba:	e048      	b.n	8006d4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd4:	d13b      	bne.n	8006d4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	7812      	ldrb	r2, [r2, #0]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	7812      	ldrb	r2, [r2, #0]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d902      	bls.n	8006d34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
          break;
 8006d32:	e00c      	b.n	8006d4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d4c:	d0e7      	beq.n	8006d1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b089      	sub	sp, #36	; 0x24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	71fb      	strb	r3, [r7, #7]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d123      	bne.n	8006dca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d82:	88bb      	ldrh	r3, [r7, #4]
 8006d84:	3303      	adds	r3, #3
 8006d86:	089b      	lsrs	r3, r3, #2
 8006d88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e018      	b.n	8006dc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	031a      	lsls	r2, r3, #12
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	3301      	adds	r3, #1
 8006dae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d3e2      	bcc.n	8006d90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3724      	adds	r7, #36	; 0x24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b08b      	sub	sp, #44	; 0x2c
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	089b      	lsrs	r3, r3, #2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006dfe:	2300      	movs	r3, #0
 8006e00:	623b      	str	r3, [r7, #32]
 8006e02:	e014      	b.n	8006e2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	3301      	adds	r3, #1
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	3301      	adds	r3, #1
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	3301      	adds	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	3301      	adds	r3, #1
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	623b      	str	r3, [r7, #32]
 8006e2e:	6a3a      	ldr	r2, [r7, #32]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3e6      	bcc.n	8006e04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e36:	8bfb      	ldrh	r3, [r7, #30]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01e      	beq.n	8006e7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e46:	461a      	mov	r2, r3
 8006e48:	f107 0310 	add.w	r3, r7, #16
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	701a      	strb	r2, [r3, #0]
      i++;
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	3301      	adds	r3, #1
 8006e66:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e6e:	8bfb      	ldrh	r3, [r7, #30]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e74:	8bfb      	ldrh	r3, [r7, #30]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1ea      	bne.n	8006e50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	372c      	adds	r7, #44	; 0x2c
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d12c      	bne.n	8006efe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	db12      	blt.n	8006edc <USB_EPSetStall+0x54>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00f      	beq.n	8006edc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	e02b      	b.n	8006f56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	db12      	blt.n	8006f36 <USB_EPSetStall+0xae>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00f      	beq.n	8006f36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d128      	bne.n	8006fd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	791b      	ldrb	r3, [r3, #4]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d003      	beq.n	8006fb0 <USB_EPClearStall+0x4c>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	791b      	ldrb	r3, [r3, #4]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d138      	bne.n	8007022 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	e027      	b.n	8007022 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ff0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	791b      	ldrb	r3, [r3, #4]
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d003      	beq.n	8007002 <USB_EPClearStall+0x9e>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d10f      	bne.n	8007022 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007020:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800704e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007052:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007064:	68f9      	ldr	r1, [r7, #12]
 8007066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800706a:	4313      	orrs	r3, r2
 800706c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007096:	f023 0303 	bic.w	r3, r3, #3
 800709a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070aa:	f023 0302 	bic.w	r3, r3, #2
 80070ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	0c1b      	lsrs	r3, r3, #16
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	4013      	ands	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	b29b      	uxth	r3, r3
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071bc:	68bb      	ldr	r3, [r7, #8]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b087      	sub	sp, #28
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	fa22 f303 	lsr.w	r3, r2, r3
 80071fa:	01db      	lsls	r3, r3, #7
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4013      	ands	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007218:	68bb      	ldr	r3, [r7, #8]
}
 800721a:	4618      	mov	r0, r3
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	f003 0301 	and.w	r3, r3, #1
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007278:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	460b      	mov	r3, r1
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	333c      	adds	r3, #60	; 0x3c
 800729e:	3304      	adds	r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4a26      	ldr	r2, [pc, #152]	; (8007340 <USB_EP0_OutStart+0xb8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d90a      	bls.n	80072c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072bc:	d101      	bne.n	80072c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e037      	b.n	8007332 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f0:	f043 0318 	orr.w	r3, r3, #24
 80072f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007304:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007308:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10f      	bne.n	8007330 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	4f54300a 	.word	0x4f54300a

08007344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <USB_CoreReset+0x64>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e01b      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	daf2      	bge.n	8007350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f043 0201 	orr.w	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <USB_CoreReset+0x64>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d901      	bls.n	800738c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e006      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b01      	cmp	r3, #1
 8007396:	d0f0      	beq.n	800737a <USB_CoreReset+0x36>

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	00030d40 	.word	0x00030d40

080073ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073bc:	f002 fd72 	bl	8009ea4 <USBD_static_malloc>
 80073c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d109      	bne.n	80073dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	32b0      	adds	r2, #176	; 0xb0
 80073d2:	2100      	movs	r1, #0
 80073d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80073d8:	2302      	movs	r3, #2
 80073da:	e0d4      	b.n	8007586 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80073dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80073e0:	2100      	movs	r1, #0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f002 fdda 	bl	8009f9c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32b0      	adds	r2, #176	; 0xb0
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32b0      	adds	r2, #176	; 0xb0
 8007402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7c1b      	ldrb	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d138      	bne.n	8007486 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007414:	4b5e      	ldr	r3, [pc, #376]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007416:	7819      	ldrb	r1, [r3, #0]
 8007418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741c:	2202      	movs	r2, #2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f002 fbcf 	bl	8009bc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007424:	4b5a      	ldr	r3, [pc, #360]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 020f 	and.w	r2, r3, #15
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	2201      	movs	r2, #1
 800743c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800743e:	4b55      	ldr	r3, [pc, #340]	; (8007594 <USBD_CDC_Init+0x1e8>)
 8007440:	7819      	ldrb	r1, [r3, #0]
 8007442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007446:	2202      	movs	r2, #2
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f002 fbba 	bl	8009bc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800744e:	4b51      	ldr	r3, [pc, #324]	; (8007594 <USBD_CDC_Init+0x1e8>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f003 020f 	and.w	r2, r3, #15
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007466:	2201      	movs	r2, #1
 8007468:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800746a:	4b4b      	ldr	r3, [pc, #300]	; (8007598 <USBD_CDC_Init+0x1ec>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f003 020f 	and.w	r2, r3, #15
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	3326      	adds	r3, #38	; 0x26
 8007480:	2210      	movs	r2, #16
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e035      	b.n	80074f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007486:	4b42      	ldr	r3, [pc, #264]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007488:	7819      	ldrb	r1, [r3, #0]
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	2202      	movs	r2, #2
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f002 fb97 	bl	8009bc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007494:	4b3e      	ldr	r3, [pc, #248]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	2201      	movs	r2, #1
 80074ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074ae:	4b39      	ldr	r3, [pc, #228]	; (8007594 <USBD_CDC_Init+0x1e8>)
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	2202      	movs	r2, #2
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f002 fb83 	bl	8009bc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074bc:	4b35      	ldr	r3, [pc, #212]	; (8007594 <USBD_CDC_Init+0x1e8>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074d4:	2201      	movs	r2, #1
 80074d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80074d8:	4b2f      	ldr	r3, [pc, #188]	; (8007598 <USBD_CDC_Init+0x1ec>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f003 020f 	and.w	r2, r3, #15
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	3326      	adds	r3, #38	; 0x26
 80074ee:	2210      	movs	r2, #16
 80074f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074f2:	4b29      	ldr	r3, [pc, #164]	; (8007598 <USBD_CDC_Init+0x1ec>)
 80074f4:	7819      	ldrb	r1, [r3, #0]
 80074f6:	2308      	movs	r3, #8
 80074f8:	2203      	movs	r2, #3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f002 fb61 	bl	8009bc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007500:	4b25      	ldr	r3, [pc, #148]	; (8007598 <USBD_CDC_Init+0x1ec>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3324      	adds	r3, #36	; 0x24
 8007516:	2201      	movs	r2, #1
 8007518:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	33b0      	adds	r3, #176	; 0xb0
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007550:	2302      	movs	r3, #2
 8007552:	e018      	b.n	8007586 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	7c1b      	ldrb	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <USBD_CDC_Init+0x1e8>)
 800755e:	7819      	ldrb	r1, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f002 fc18 	bl	8009da0 <USBD_LL_PrepareReceive>
 8007570:	e008      	b.n	8007584 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <USBD_CDC_Init+0x1e8>)
 8007574:	7819      	ldrb	r1, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800757c:	2340      	movs	r3, #64	; 0x40
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f002 fc0e 	bl	8009da0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000093 	.word	0x20000093
 8007594:	20000094 	.word	0x20000094
 8007598:	20000095 	.word	0x20000095

0800759c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80075a8:	4b3a      	ldr	r3, [pc, #232]	; (8007694 <USBD_CDC_DeInit+0xf8>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f002 fb2d 	bl	8009c0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80075b4:	4b37      	ldr	r3, [pc, #220]	; (8007694 <USBD_CDC_DeInit+0xf8>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	f003 020f 	and.w	r2, r3, #15
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	3324      	adds	r3, #36	; 0x24
 80075ca:	2200      	movs	r2, #0
 80075cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075ce:	4b32      	ldr	r3, [pc, #200]	; (8007698 <USBD_CDC_DeInit+0xfc>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f002 fb1a 	bl	8009c0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80075da:	4b2f      	ldr	r3, [pc, #188]	; (8007698 <USBD_CDC_DeInit+0xfc>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 020f 	and.w	r2, r3, #15
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075f2:	2200      	movs	r2, #0
 80075f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80075f6:	4b29      	ldr	r3, [pc, #164]	; (800769c <USBD_CDC_DeInit+0x100>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 fb06 	bl	8009c0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007602:	4b26      	ldr	r3, [pc, #152]	; (800769c <USBD_CDC_DeInit+0x100>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	3324      	adds	r3, #36	; 0x24
 8007618:	2200      	movs	r2, #0
 800761a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800761c:	4b1f      	ldr	r3, [pc, #124]	; (800769c <USBD_CDC_DeInit+0x100>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	3326      	adds	r3, #38	; 0x26
 8007632:	2200      	movs	r2, #0
 8007634:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	32b0      	adds	r2, #176	; 0xb0
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01f      	beq.n	8007688 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	33b0      	adds	r3, #176	; 0xb0
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	32b0      	adds	r2, #176	; 0xb0
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	4618      	mov	r0, r3
 800766c:	f002 fc28 	bl	8009ec0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	32b0      	adds	r2, #176	; 0xb0
 800767a:	2100      	movs	r1, #0
 800767c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000093 	.word	0x20000093
 8007698:	20000094 	.word	0x20000094
 800769c:	20000095 	.word	0x20000095

080076a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	32b0      	adds	r2, #176	; 0xb0
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e0bf      	b.n	8007850 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d050      	beq.n	800777e <USBD_CDC_Setup+0xde>
 80076dc:	2b20      	cmp	r3, #32
 80076de:	f040 80af 	bne.w	8007840 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	88db      	ldrh	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03a      	beq.n	8007760 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b25b      	sxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da1b      	bge.n	800772c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	33b0      	adds	r3, #176	; 0xb0
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800770a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	88d2      	ldrh	r2, [r2, #6]
 8007710:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	2b07      	cmp	r3, #7
 8007718:	bf28      	it	cs
 800771a:	2307      	movcs	r3, #7
 800771c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	89fa      	ldrh	r2, [r7, #14]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 fdb3 	bl	8009290 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800772a:	e090      	b.n	800784e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785a      	ldrb	r2, [r3, #1]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88db      	ldrh	r3, [r3, #6]
 800773a:	2b3f      	cmp	r3, #63	; 0x3f
 800773c:	d803      	bhi.n	8007746 <USBD_CDC_Setup+0xa6>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	88db      	ldrh	r3, [r3, #6]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	e000      	b.n	8007748 <USBD_CDC_Setup+0xa8>
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800774e:	6939      	ldr	r1, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007756:	461a      	mov	r2, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fdc5 	bl	80092e8 <USBD_CtlPrepareRx>
      break;
 800775e:	e076      	b.n	800784e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	33b0      	adds	r3, #176	; 0xb0
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	7850      	ldrb	r0, [r2, #1]
 8007776:	2200      	movs	r2, #0
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	4798      	blx	r3
      break;
 800777c:	e067      	b.n	800784e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b0b      	cmp	r3, #11
 8007784:	d851      	bhi.n	800782a <USBD_CDC_Setup+0x18a>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <USBD_CDC_Setup+0xec>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077bd 	.word	0x080077bd
 8007790:	08007839 	.word	0x08007839
 8007794:	0800782b 	.word	0x0800782b
 8007798:	0800782b 	.word	0x0800782b
 800779c:	0800782b 	.word	0x0800782b
 80077a0:	0800782b 	.word	0x0800782b
 80077a4:	0800782b 	.word	0x0800782b
 80077a8:	0800782b 	.word	0x0800782b
 80077ac:	0800782b 	.word	0x0800782b
 80077b0:	0800782b 	.word	0x0800782b
 80077b4:	080077e7 	.word	0x080077e7
 80077b8:	08007811 	.word	0x08007811
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d107      	bne.n	80077d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077c8:	f107 030a 	add.w	r3, r7, #10
 80077cc:	2202      	movs	r2, #2
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 fd5d 	bl	8009290 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077d6:	e032      	b.n	800783e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fce7 	bl	80091ae <USBD_CtlError>
            ret = USBD_FAIL;
 80077e0:	2303      	movs	r3, #3
 80077e2:	75fb      	strb	r3, [r7, #23]
          break;
 80077e4:	e02b      	b.n	800783e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d107      	bne.n	8007802 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077f2:	f107 030d 	add.w	r3, r7, #13
 80077f6:	2201      	movs	r2, #1
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fd48 	bl	8009290 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007800:	e01d      	b.n	800783e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 fcd2 	bl	80091ae <USBD_CtlError>
            ret = USBD_FAIL;
 800780a:	2303      	movs	r3, #3
 800780c:	75fb      	strb	r3, [r7, #23]
          break;
 800780e:	e016      	b.n	800783e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d00f      	beq.n	800783c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fcc5 	bl	80091ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007828:	e008      	b.n	800783c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fcbe 	bl	80091ae <USBD_CtlError>
          ret = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	75fb      	strb	r3, [r7, #23]
          break;
 8007836:	e002      	b.n	800783e <USBD_CDC_Setup+0x19e>
          break;
 8007838:	bf00      	nop
 800783a:	e008      	b.n	800784e <USBD_CDC_Setup+0x1ae>
          break;
 800783c:	bf00      	nop
      }
      break;
 800783e:	e006      	b.n	800784e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fcb3 	bl	80091ae <USBD_CtlError>
      ret = USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	bf00      	nop
  }

  return (uint8_t)ret;
 800784e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800786a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	32b0      	adds	r2, #176	; 0xb0
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800787e:	2303      	movs	r3, #3
 8007880:	e065      	b.n	800794e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	32b0      	adds	r2, #176	; 0xb0
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	3318      	adds	r3, #24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d02f      	beq.n	800790c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	f003 020f 	and.w	r2, r3, #15
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	3318      	adds	r3, #24
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	f003 010f 	and.w	r1, r3, #15
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	460b      	mov	r3, r1
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	440b      	add	r3, r1
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4403      	add	r3, r0
 80078d4:	3348      	adds	r3, #72	; 0x48
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d112      	bne.n	800790c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3318      	adds	r3, #24
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078fe:	78f9      	ldrb	r1, [r7, #3]
 8007900:	2300      	movs	r3, #0
 8007902:	2200      	movs	r2, #0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f002 fa2a 	bl	8009d5e <USBD_LL_Transmit>
 800790a:	e01f      	b.n	800794c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	33b0      	adds	r3, #176	; 0xb0
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d010      	beq.n	800794c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	33b0      	adds	r3, #176	; 0xb0
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	32b0      	adds	r2, #176	; 0xb0
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	32b0      	adds	r2, #176	; 0xb0
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e01a      	b.n	80079be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 fa28 	bl	8009de2 <USBD_LL_GetRxDataSize>
 8007992:	4602      	mov	r2, r0
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	33b0      	adds	r3, #176	; 0xb0
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079b8:	4611      	mov	r1, r2
 80079ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	32b0      	adds	r2, #176	; 0xb0
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e025      	b.n	8007a34 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	33b0      	adds	r3, #176	; 0xb0
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01a      	beq.n	8007a32 <USBD_CDC_EP0_RxReady+0x6c>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a02:	2bff      	cmp	r3, #255	; 0xff
 8007a04:	d015      	beq.n	8007a32 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	33b0      	adds	r3, #176	; 0xb0
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a26:	b292      	uxth	r2, r2
 8007a28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	22ff      	movs	r2, #255	; 0xff
 8007a2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a44:	2182      	movs	r1, #130	; 0x82
 8007a46:	4818      	ldr	r0, [pc, #96]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a48:	f000 fd4f 	bl	80084ea <USBD_GetEpDesc>
 8007a4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4815      	ldr	r0, [pc, #84]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a52:	f000 fd4a 	bl	80084ea <USBD_GetEpDesc>
 8007a56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a58:	2181      	movs	r1, #129	; 0x81
 8007a5a:	4813      	ldr	r0, [pc, #76]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a5c:	f000 fd45 	bl	80084ea <USBD_GetEpDesc>
 8007a60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2210      	movs	r2, #16
 8007a6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d006      	beq.n	8007a82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a7c:	711a      	strb	r2, [r3, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d006      	beq.n	8007a96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a90:	711a      	strb	r2, [r3, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2243      	movs	r2, #67	; 0x43
 8007a9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a9c:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000050 	.word	0x20000050

08007aac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ab4:	2182      	movs	r1, #130	; 0x82
 8007ab6:	4818      	ldr	r0, [pc, #96]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ab8:	f000 fd17 	bl	80084ea <USBD_GetEpDesc>
 8007abc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007abe:	2101      	movs	r1, #1
 8007ac0:	4815      	ldr	r0, [pc, #84]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ac2:	f000 fd12 	bl	80084ea <USBD_GetEpDesc>
 8007ac6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ac8:	2181      	movs	r1, #129	; 0x81
 8007aca:	4813      	ldr	r0, [pc, #76]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007acc:	f000 fd0d 	bl	80084ea <USBD_GetEpDesc>
 8007ad0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2210      	movs	r2, #16
 8007adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d006      	beq.n	8007af2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	711a      	strb	r2, [r3, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f042 0202 	orr.w	r2, r2, #2
 8007af0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d006      	beq.n	8007b06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	711a      	strb	r2, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f042 0202 	orr.w	r2, r2, #2
 8007b04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2243      	movs	r2, #67	; 0x43
 8007b0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b0c:	4b02      	ldr	r3, [pc, #8]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000050 	.word	0x20000050

08007b1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b24:	2182      	movs	r1, #130	; 0x82
 8007b26:	4818      	ldr	r0, [pc, #96]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b28:	f000 fcdf 	bl	80084ea <USBD_GetEpDesc>
 8007b2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b2e:	2101      	movs	r1, #1
 8007b30:	4815      	ldr	r0, [pc, #84]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b32:	f000 fcda 	bl	80084ea <USBD_GetEpDesc>
 8007b36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b38:	2181      	movs	r1, #129	; 0x81
 8007b3a:	4813      	ldr	r0, [pc, #76]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b3c:	f000 fcd5 	bl	80084ea <USBD_GetEpDesc>
 8007b40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2210      	movs	r2, #16
 8007b4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b5c:	711a      	strb	r2, [r3, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d006      	beq.n	8007b76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b70:	711a      	strb	r2, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2243      	movs	r2, #67	; 0x43
 8007b7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000050 	.word	0x20000050

08007b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	220a      	movs	r2, #10
 8007b98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	2000000c 	.word	0x2000000c

08007bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e009      	b.n	8007bd4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	33b0      	adds	r3, #176	; 0xb0
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	32b0      	adds	r2, #176	; 0xb0
 8007bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e008      	b.n	8007c18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	32b0      	adds	r2, #176	; 0xb0
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e004      	b.n	8007c52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	32b0      	adds	r2, #176	; 0xb0
 8007c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	32b0      	adds	r2, #176	; 0xb0
 8007c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e025      	b.n	8007cde <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d11f      	bne.n	8007cdc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007ca4:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <USBD_CDC_TransmitPacket+0x88>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	f003 020f 	and.w	r2, r3, #15
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4403      	add	r3, r0
 8007cbe:	3318      	adds	r3, #24
 8007cc0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <USBD_CDC_TransmitPacket+0x88>)
 8007cc4:	7819      	ldrb	r1, [r3, #0]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f002 f843 	bl	8009d5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000093 	.word	0x20000093

08007cec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	32b0      	adds	r2, #176	; 0xb0
 8007cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	32b0      	adds	r2, #176	; 0xb0
 8007d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e018      	b.n	8007d4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7c1b      	ldrb	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d22:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <USBD_CDC_ReceivePacket+0x68>)
 8007d24:	7819      	ldrb	r1, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f002 f835 	bl	8009da0 <USBD_LL_PrepareReceive>
 8007d36:	e008      	b.n	8007d4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <USBD_CDC_ReceivePacket+0x68>)
 8007d3a:	7819      	ldrb	r1, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f002 f82b 	bl	8009da0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000094 	.word	0x20000094

08007d58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	4613      	mov	r3, r2
 8007d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e01f      	b.n	8007db0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	79fa      	ldrb	r2, [r7, #7]
 8007da2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f001 fea5 	bl	8009af4 <USBD_LL_Init>
 8007daa:	4603      	mov	r3, r0
 8007dac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e025      	b.n	8007e1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	32ae      	adds	r2, #174	; 0xae
 8007de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00f      	beq.n	8007e0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	; 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f107 020e 	add.w	r2, r7, #14
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	4602      	mov	r2, r0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 fead 	bl	8009b8c <USBD_LL_Start>
 8007e32:	4603      	mov	r3, r0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	4611      	mov	r1, r2
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 f932 	bl	800913a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d01a      	beq.n	8007f30 <USBD_LL_SetupStage+0x72>
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d822      	bhi.n	8007f44 <USBD_LL_SetupStage+0x86>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <USBD_LL_SetupStage+0x4a>
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d00a      	beq.n	8007f1c <USBD_LL_SetupStage+0x5e>
 8007f06:	e01d      	b.n	8007f44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fb5f 	bl	80085d4 <USBD_StdDevReq>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1a:	e020      	b.n	8007f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fbc7 	bl	80086b8 <USBD_StdItfReq>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2e:	e016      	b.n	8007f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fc29 	bl	8008790 <USBD_StdEPReq>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
      break;
 8007f42:	e00c      	b.n	8007f5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fe7a 	bl	8009c4c <USBD_LL_StallEP>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5c:	bf00      	nop
  }

  return ret;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	460b      	mov	r3, r1
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d16e      	bne.n	800805e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	f040 8098 	bne.w	80080c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d913      	bls.n	8007fc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	1ad2      	subs	r2, r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	bf28      	it	cs
 8007fba:	4613      	movcs	r3, r2
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f001 f9ae 	bl	8009322 <USBD_CtlContinueRx>
 8007fc6:	e07d      	b.n	80080c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d014      	beq.n	8008000 <USBD_LL_DataOutStage+0x98>
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d81d      	bhi.n	8008016 <USBD_LL_DataOutStage+0xae>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <USBD_LL_DataOutStage+0x7c>
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d003      	beq.n	8007fea <USBD_LL_DataOutStage+0x82>
 8007fe2:	e018      	b.n	8008016 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8007fe8:	e018      	b.n	800801c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fa5e 	bl	80084b6 <USBD_CoreFindIF>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8007ffe:	e00d      	b.n	800801c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008006:	b2db      	uxtb	r3, r3
 8008008:	4619      	mov	r1, r3
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fa60 	bl	80084d0 <USBD_CoreFindEP>
 8008010:	4603      	mov	r3, r0
 8008012:	75bb      	strb	r3, [r7, #22]
            break;
 8008014:	e002      	b.n	800801c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	75bb      	strb	r3, [r7, #22]
            break;
 800801a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800801c:	7dbb      	ldrb	r3, [r7, #22]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d119      	bne.n	8008056 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d113      	bne.n	8008056 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800802e:	7dba      	ldrb	r2, [r7, #22]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	32ae      	adds	r2, #174	; 0xae
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800803e:	7dba      	ldrb	r2, [r7, #22]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008046:	7dba      	ldrb	r2, [r7, #22]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	32ae      	adds	r2, #174	; 0xae
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f001 f974 	bl	8009344 <USBD_CtlSendStatus>
 800805c:	e032      	b.n	80080c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800805e:	7afb      	ldrb	r3, [r7, #11]
 8008060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008064:	b2db      	uxtb	r3, r3
 8008066:	4619      	mov	r1, r3
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fa31 	bl	80084d0 <USBD_CoreFindEP>
 800806e:	4603      	mov	r3, r0
 8008070:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008072:	7dbb      	ldrb	r3, [r7, #22]
 8008074:	2bff      	cmp	r3, #255	; 0xff
 8008076:	d025      	beq.n	80080c4 <USBD_LL_DataOutStage+0x15c>
 8008078:	7dbb      	ldrb	r3, [r7, #22]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d122      	bne.n	80080c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b03      	cmp	r3, #3
 8008088:	d117      	bne.n	80080ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800808a:	7dba      	ldrb	r2, [r7, #22]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	32ae      	adds	r2, #174	; 0xae
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00f      	beq.n	80080ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800809a:	7dba      	ldrb	r2, [r7, #22]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80080a2:	7dba      	ldrb	r2, [r7, #22]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	32ae      	adds	r2, #174	; 0xae
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	7afa      	ldrb	r2, [r7, #11]
 80080b0:	4611      	mov	r1, r2
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	4798      	blx	r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	e000      	b.n	80080c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	460b      	mov	r3, r1
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d16f      	bne.n	80081c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3314      	adds	r3, #20
 80080e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d15a      	bne.n	80081a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d914      	bls.n	8008128 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	461a      	mov	r2, r3
 8008112:	6879      	ldr	r1, [r7, #4]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f001 f8d6 	bl	80092c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 fe3d 	bl	8009da0 <USBD_LL_PrepareReceive>
 8008126:	e03f      	b.n	80081a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	d11c      	bne.n	800816e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800813c:	429a      	cmp	r2, r3
 800813e:	d316      	bcc.n	800816e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800814a:	429a      	cmp	r2, r3
 800814c:	d20f      	bcs.n	800816e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f001 f8b7 	bl	80092c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008160:	2300      	movs	r3, #0
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f001 fe1a 	bl	8009da0 <USBD_LL_PrepareReceive>
 800816c:	e01c      	b.n	80081a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b03      	cmp	r3, #3
 8008178:	d10f      	bne.n	800819a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800819a:	2180      	movs	r1, #128	; 0x80
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f001 fd55 	bl	8009c4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f001 f8e1 	bl	800936a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d03a      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7ff fe42 	bl	8007e3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081c0:	e032      	b.n	8008228 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	4619      	mov	r1, r3
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f97f 	bl	80084d0 <USBD_CoreFindEP>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	2bff      	cmp	r3, #255	; 0xff
 80081da:	d025      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d122      	bne.n	8008228 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d11c      	bne.n	8008228 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081ee:	7dfa      	ldrb	r2, [r7, #23]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	32ae      	adds	r2, #174	; 0xae
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d014      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081fe:	7dfa      	ldrb	r2, [r7, #23]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008206:	7dfa      	ldrb	r2, [r7, #23]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	32ae      	adds	r2, #174	; 0xae
 800820c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	7afa      	ldrb	r2, [r7, #11]
 8008214:	4611      	mov	r1, r2
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	4798      	blx	r3
 800821a:	4603      	mov	r3, r0
 800821c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800821e:	7dbb      	ldrb	r3, [r7, #22]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008224:	7dbb      	ldrb	r3, [r7, #22]
 8008226:	e000      	b.n	800822a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d014      	beq.n	8008298 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6852      	ldr	r2, [r2, #4]
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	4611      	mov	r1, r2
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008298:	2340      	movs	r3, #64	; 0x40
 800829a:	2200      	movs	r2, #0
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 fc8f 	bl	8009bc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2240      	movs	r2, #64	; 0x40
 80082b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082b4:	2340      	movs	r3, #64	; 0x40
 80082b6:	2200      	movs	r2, #0
 80082b8:	2180      	movs	r1, #128	; 0x80
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fc81 	bl	8009bc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2240      	movs	r2, #64	; 0x40
 80082ca:	621a      	str	r2, [r3, #32]

  return ret;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	78fa      	ldrb	r2, [r7, #3]
 80082e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008304:	b2da      	uxtb	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2204      	movs	r2, #4
 8008310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b04      	cmp	r3, #4
 8008334:	d106      	bne.n	8008344 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800833c:	b2da      	uxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b03      	cmp	r3, #3
 8008364:	d110      	bne.n	8008388 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32ae      	adds	r2, #174	; 0xae
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e01c      	b.n	80083ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d115      	bne.n	80083ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	32ae      	adds	r2, #174	; 0xae
 80083ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32ae      	adds	r2, #174	; 0xae
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	4611      	mov	r1, r2
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	32ae      	adds	r2, #174	; 0xae
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008414:	2303      	movs	r3, #3
 8008416:	e01c      	b.n	8008452 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b03      	cmp	r3, #3
 8008422:	d115      	bne.n	8008450 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	32ae      	adds	r2, #174	; 0xae
 800842e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	32ae      	adds	r2, #174	; 0xae
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	4611      	mov	r1, r2
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00e      	beq.n	80084ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6852      	ldr	r2, [r2, #4]
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	4611      	mov	r1, r2
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	b29a      	uxth	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	429a      	cmp	r2, r3
 8008510:	d920      	bls.n	8008554 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800851a:	e013      	b.n	8008544 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800851c:	f107 030a 	add.w	r3, r7, #10
 8008520:	4619      	mov	r1, r3
 8008522:	6978      	ldr	r0, [r7, #20]
 8008524:	f000 f81b 	bl	800855e <USBD_GetNextDesc>
 8008528:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b05      	cmp	r3, #5
 8008530:	d108      	bne.n	8008544 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	789b      	ldrb	r3, [r3, #2]
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	429a      	cmp	r2, r3
 800853e:	d008      	beq.n	8008552 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	885b      	ldrh	r3, [r3, #2]
 8008548:	b29a      	uxth	r2, r3
 800854a:	897b      	ldrh	r3, [r7, #10]
 800854c:	429a      	cmp	r2, r3
 800854e:	d8e5      	bhi.n	800851c <USBD_GetEpDesc+0x32>
 8008550:	e000      	b.n	8008554 <USBD_GetEpDesc+0x6a>
          break;
 8008552:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008554:	693b      	ldr	r3, [r7, #16]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	881a      	ldrh	r2, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	4413      	add	r3, r2
 8008578:	b29a      	uxth	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800858a:	68fb      	ldr	r3, [r7, #12]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	3301      	adds	r3, #1
 80085ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085b6:	8a3b      	ldrh	r3, [r7, #16]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	b21a      	sxth	r2, r3
 80085bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b21b      	sxth	r3, r3
 80085c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085c6:	89fb      	ldrh	r3, [r7, #14]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d005      	beq.n	80085fa <USBD_StdDevReq+0x26>
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d857      	bhi.n	80086a2 <USBD_StdDevReq+0xce>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00f      	beq.n	8008616 <USBD_StdDevReq+0x42>
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d153      	bne.n	80086a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	32ae      	adds	r2, #174	; 0xae
 8008604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	4798      	blx	r3
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
      break;
 8008614:	e04a      	b.n	80086ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b09      	cmp	r3, #9
 800861c:	d83b      	bhi.n	8008696 <USBD_StdDevReq+0xc2>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <USBD_StdDevReq+0x50>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	08008679 	.word	0x08008679
 8008628:	0800868d 	.word	0x0800868d
 800862c:	08008697 	.word	0x08008697
 8008630:	08008683 	.word	0x08008683
 8008634:	08008697 	.word	0x08008697
 8008638:	08008657 	.word	0x08008657
 800863c:	0800864d 	.word	0x0800864d
 8008640:	08008697 	.word	0x08008697
 8008644:	0800866f 	.word	0x0800866f
 8008648:	08008661 	.word	0x08008661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa3c 	bl	8008acc <USBD_GetDescriptor>
          break;
 8008654:	e024      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fbcb 	bl	8008df4 <USBD_SetAddress>
          break;
 800865e:	e01f      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fc0a 	bl	8008e7c <USBD_SetConfig>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
          break;
 800866c:	e018      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fcad 	bl	8008fd0 <USBD_GetConfig>
          break;
 8008676:	e013      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fcde 	bl	800903c <USBD_GetStatus>
          break;
 8008680:	e00e      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fd0d 	bl	80090a4 <USBD_SetFeature>
          break;
 800868a:	e009      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fd31 	bl	80090f6 <USBD_ClrFeature>
          break;
 8008694:	e004      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fd88 	bl	80091ae <USBD_CtlError>
          break;
 800869e:	bf00      	nop
      }
      break;
 80086a0:	e004      	b.n	80086ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fd82 	bl	80091ae <USBD_CtlError>
      break;
 80086aa:	bf00      	nop
  }

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop

080086b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086ce:	2b40      	cmp	r3, #64	; 0x40
 80086d0:	d005      	beq.n	80086de <USBD_StdItfReq+0x26>
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d852      	bhi.n	800877c <USBD_StdItfReq+0xc4>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <USBD_StdItfReq+0x26>
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d14e      	bne.n	800877c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d840      	bhi.n	800876e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	889b      	ldrh	r3, [r3, #4]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d836      	bhi.n	8008764 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	889b      	ldrh	r3, [r3, #4]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fed9 	bl	80084b6 <USBD_CoreFindIF>
 8008704:	4603      	mov	r3, r0
 8008706:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d01d      	beq.n	800874a <USBD_StdItfReq+0x92>
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11a      	bne.n	800874a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008714:	7bba      	ldrb	r2, [r7, #14]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	32ae      	adds	r2, #174	; 0xae
 800871a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00f      	beq.n	8008744 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008724:	7bba      	ldrb	r2, [r7, #14]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800872c:	7bba      	ldrb	r2, [r7, #14]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32ae      	adds	r2, #174	; 0xae
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008742:	e004      	b.n	800874e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008744:	2303      	movs	r3, #3
 8008746:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008748:	e001      	b.n	800874e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	88db      	ldrh	r3, [r3, #6]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d110      	bne.n	8008778 <USBD_StdItfReq+0xc0>
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fdf1 	bl	8009344 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008762:	e009      	b.n	8008778 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fd21 	bl	80091ae <USBD_CtlError>
          break;
 800876c:	e004      	b.n	8008778 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fd1c 	bl	80091ae <USBD_CtlError>
          break;
 8008776:	e000      	b.n	800877a <USBD_StdItfReq+0xc2>
          break;
 8008778:	bf00      	nop
      }
      break;
 800877a:	e004      	b.n	8008786 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fd15 	bl	80091ae <USBD_CtlError>
      break;
 8008784:	bf00      	nop
  }

  return ret;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	889b      	ldrh	r3, [r3, #4]
 80087a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	d007      	beq.n	80087c0 <USBD_StdEPReq+0x30>
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	f200 817f 	bhi.w	8008ab4 <USBD_StdEPReq+0x324>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d02a      	beq.n	8008810 <USBD_StdEPReq+0x80>
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	f040 817a 	bne.w	8008ab4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff fe83 	bl	80084d0 <USBD_CoreFindEP>
 80087ca:	4603      	mov	r3, r0
 80087cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087ce:	7b7b      	ldrb	r3, [r7, #13]
 80087d0:	2bff      	cmp	r3, #255	; 0xff
 80087d2:	f000 8174 	beq.w	8008abe <USBD_StdEPReq+0x32e>
 80087d6:	7b7b      	ldrb	r3, [r7, #13]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f040 8170 	bne.w	8008abe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80087de:	7b7a      	ldrb	r2, [r7, #13]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087e6:	7b7a      	ldrb	r2, [r7, #13]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	32ae      	adds	r2, #174	; 0xae
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8163 	beq.w	8008abe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087f8:	7b7a      	ldrb	r2, [r7, #13]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	32ae      	adds	r2, #174	; 0xae
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800880e:	e156      	b.n	8008abe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	2b03      	cmp	r3, #3
 8008816:	d008      	beq.n	800882a <USBD_StdEPReq+0x9a>
 8008818:	2b03      	cmp	r3, #3
 800881a:	f300 8145 	bgt.w	8008aa8 <USBD_StdEPReq+0x318>
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 809b 	beq.w	800895a <USBD_StdEPReq+0x1ca>
 8008824:	2b01      	cmp	r3, #1
 8008826:	d03c      	beq.n	80088a2 <USBD_StdEPReq+0x112>
 8008828:	e13e      	b.n	8008aa8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d002      	beq.n	800883c <USBD_StdEPReq+0xac>
 8008836:	2b03      	cmp	r3, #3
 8008838:	d016      	beq.n	8008868 <USBD_StdEPReq+0xd8>
 800883a:	e02c      	b.n	8008896 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00d      	beq.n	800885e <USBD_StdEPReq+0xce>
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b80      	cmp	r3, #128	; 0x80
 8008846:	d00a      	beq.n	800885e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 f9fd 	bl	8009c4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008852:	2180      	movs	r1, #128	; 0x80
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 f9f9 	bl	8009c4c <USBD_LL_StallEP>
 800885a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800885c:	e020      	b.n	80088a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fca4 	bl	80091ae <USBD_CtlError>
              break;
 8008866:	e01b      	b.n	80088a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	885b      	ldrh	r3, [r3, #2]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10e      	bne.n	800888e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00b      	beq.n	800888e <USBD_StdEPReq+0xfe>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	d008      	beq.n	800888e <USBD_StdEPReq+0xfe>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	88db      	ldrh	r3, [r3, #6]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d104      	bne.n	800888e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f9df 	bl	8009c4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fd58 	bl	8009344 <USBD_CtlSendStatus>

              break;
 8008894:	e004      	b.n	80088a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc88 	bl	80091ae <USBD_CtlError>
              break;
 800889e:	bf00      	nop
          }
          break;
 80088a0:	e107      	b.n	8008ab2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d002      	beq.n	80088b4 <USBD_StdEPReq+0x124>
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d016      	beq.n	80088e0 <USBD_StdEPReq+0x150>
 80088b2:	e04b      	b.n	800894c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00d      	beq.n	80088d6 <USBD_StdEPReq+0x146>
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	d00a      	beq.n	80088d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f9c1 	bl	8009c4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ca:	2180      	movs	r1, #128	; 0x80
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f9bd 	bl	8009c4c <USBD_LL_StallEP>
 80088d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088d4:	e040      	b.n	8008958 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc68 	bl	80091ae <USBD_CtlError>
              break;
 80088de:	e03b      	b.n	8008958 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d136      	bne.n	8008956 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d004      	beq.n	80088fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f9c7 	bl	8009c8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fd21 	bl	8009344 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fde2 	bl	80084d0 <USBD_CoreFindEP>
 800890c:	4603      	mov	r3, r0
 800890e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008910:	7b7b      	ldrb	r3, [r7, #13]
 8008912:	2bff      	cmp	r3, #255	; 0xff
 8008914:	d01f      	beq.n	8008956 <USBD_StdEPReq+0x1c6>
 8008916:	7b7b      	ldrb	r3, [r7, #13]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11c      	bne.n	8008956 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800891c:	7b7a      	ldrb	r2, [r7, #13]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008924:	7b7a      	ldrb	r2, [r7, #13]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32ae      	adds	r2, #174	; 0xae
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d010      	beq.n	8008956 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008934:	7b7a      	ldrb	r2, [r7, #13]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	32ae      	adds	r2, #174	; 0xae
 800893a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800894a:	e004      	b.n	8008956 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fc2d 	bl	80091ae <USBD_CtlError>
              break;
 8008954:	e000      	b.n	8008958 <USBD_StdEPReq+0x1c8>
              break;
 8008956:	bf00      	nop
          }
          break;
 8008958:	e0ab      	b.n	8008ab2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d002      	beq.n	800896c <USBD_StdEPReq+0x1dc>
 8008966:	2b03      	cmp	r3, #3
 8008968:	d032      	beq.n	80089d0 <USBD_StdEPReq+0x240>
 800896a:	e097      	b.n	8008a9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d007      	beq.n	8008982 <USBD_StdEPReq+0x1f2>
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b80      	cmp	r3, #128	; 0x80
 8008976:	d004      	beq.n	8008982 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fc17 	bl	80091ae <USBD_CtlError>
                break;
 8008980:	e091      	b.n	8008aa6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008986:	2b00      	cmp	r3, #0
 8008988:	da0b      	bge.n	80089a2 <USBD_StdEPReq+0x212>
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	3310      	adds	r3, #16
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	3304      	adds	r3, #4
 80089a0:	e00b      	b.n	80089ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a8:	4613      	mov	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	4413      	add	r3, r2
 80089b8:	3304      	adds	r3, #4
 80089ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2202      	movs	r2, #2
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc61 	bl	8009290 <USBD_CtlSendData>
              break;
 80089ce:	e06a      	b.n	8008aa6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	da11      	bge.n	80089fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	f003 020f 	and.w	r2, r3, #15
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	3324      	adds	r3, #36	; 0x24
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d117      	bne.n	8008a22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fbda 	bl	80091ae <USBD_CtlError>
                  break;
 80089fa:	e054      	b.n	8008aa6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	f003 020f 	and.w	r2, r3, #15
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fbc7 	bl	80091ae <USBD_CtlError>
                  break;
 8008a20:	e041      	b.n	8008aa6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da0b      	bge.n	8008a42 <USBD_StdEPReq+0x2b2>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	3310      	adds	r3, #16
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3304      	adds	r3, #4
 8008a40:	e00b      	b.n	8008a5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4413      	add	r3, r2
 8008a58:	3304      	adds	r3, #4
 8008a5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <USBD_StdEPReq+0x2d8>
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b80      	cmp	r3, #128	; 0x80
 8008a66:	d103      	bne.n	8008a70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	e00e      	b.n	8008a8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 f927 	bl	8009cc8 <USBD_LL_IsStallEP>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2201      	movs	r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	e002      	b.n	8008a8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2202      	movs	r2, #2
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fbfb 	bl	8009290 <USBD_CtlSendData>
              break;
 8008a9a:	e004      	b.n	8008aa6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fb85 	bl	80091ae <USBD_CtlError>
              break;
 8008aa4:	bf00      	nop
          }
          break;
 8008aa6:	e004      	b.n	8008ab2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fb7f 	bl	80091ae <USBD_CtlError>
          break;
 8008ab0:	bf00      	nop
      }
      break;
 8008ab2:	e005      	b.n	8008ac0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fb79 	bl	80091ae <USBD_CtlError>
      break;
 8008abc:	e000      	b.n	8008ac0 <USBD_StdEPReq+0x330>
      break;
 8008abe:	bf00      	nop
  }

  return ret;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	2b0e      	cmp	r3, #14
 8008aee:	f200 8152 	bhi.w	8008d96 <USBD_GetDescriptor+0x2ca>
 8008af2:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <USBD_GetDescriptor+0x2c>)
 8008af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af8:	08008b69 	.word	0x08008b69
 8008afc:	08008b81 	.word	0x08008b81
 8008b00:	08008bc1 	.word	0x08008bc1
 8008b04:	08008d97 	.word	0x08008d97
 8008b08:	08008d97 	.word	0x08008d97
 8008b0c:	08008d37 	.word	0x08008d37
 8008b10:	08008d63 	.word	0x08008d63
 8008b14:	08008d97 	.word	0x08008d97
 8008b18:	08008d97 	.word	0x08008d97
 8008b1c:	08008d97 	.word	0x08008d97
 8008b20:	08008d97 	.word	0x08008d97
 8008b24:	08008d97 	.word	0x08008d97
 8008b28:	08008d97 	.word	0x08008d97
 8008b2c:	08008d97 	.word	0x08008d97
 8008b30:	08008b35 	.word	0x08008b35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	7c12      	ldrb	r2, [r2, #16]
 8008b4c:	f107 0108 	add.w	r1, r7, #8
 8008b50:	4610      	mov	r0, r2
 8008b52:	4798      	blx	r3
 8008b54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b56:	e126      	b.n	8008da6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fb27 	bl	80091ae <USBD_CtlError>
        err++;
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	3301      	adds	r3, #1
 8008b64:	72fb      	strb	r3, [r7, #11]
      break;
 8008b66:	e11e      	b.n	8008da6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	7c12      	ldrb	r2, [r2, #16]
 8008b74:	f107 0108 	add.w	r1, r7, #8
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
 8008b7c:	60f8      	str	r0, [r7, #12]
      break;
 8008b7e:	e112      	b.n	8008da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7c1b      	ldrb	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10d      	bne.n	8008ba4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	f107 0208 	add.w	r2, r7, #8
 8008b94:	4610      	mov	r0, r2
 8008b96:	4798      	blx	r3
 8008b98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ba2:	e100      	b.n	8008da6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	f107 0208 	add.w	r2, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	2202      	movs	r2, #2
 8008bbc:	701a      	strb	r2, [r3, #0]
      break;
 8008bbe:	e0f2      	b.n	8008da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	885b      	ldrh	r3, [r3, #2]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	f200 80ac 	bhi.w	8008d24 <USBD_GetDescriptor+0x258>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <USBD_GetDescriptor+0x108>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008c21 	.word	0x08008c21
 8008bdc:	08008c55 	.word	0x08008c55
 8008be0:	08008c89 	.word	0x08008c89
 8008be4:	08008cbd 	.word	0x08008cbd
 8008be8:	08008cf1 	.word	0x08008cf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7c12      	ldrb	r2, [r2, #16]
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c0e:	e091      	b.n	8008d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 facb 	bl	80091ae <USBD_CtlError>
            err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c1e:	e089      	b.n	8008d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	7c12      	ldrb	r2, [r2, #16]
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c42:	e077      	b.n	8008d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fab1 	bl	80091ae <USBD_CtlError>
            err++;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	72fb      	strb	r3, [r7, #11]
          break;
 8008c52:	e06f      	b.n	8008d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	7c12      	ldrb	r2, [r2, #16]
 8008c6c:	f107 0108 	add.w	r1, r7, #8
 8008c70:	4610      	mov	r0, r2
 8008c72:	4798      	blx	r3
 8008c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c76:	e05d      	b.n	8008d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa97 	bl	80091ae <USBD_CtlError>
            err++;
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	3301      	adds	r3, #1
 8008c84:	72fb      	strb	r3, [r7, #11]
          break;
 8008c86:	e055      	b.n	8008d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	7c12      	ldrb	r2, [r2, #16]
 8008ca0:	f107 0108 	add.w	r1, r7, #8
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008caa:	e043      	b.n	8008d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa7d 	bl	80091ae <USBD_CtlError>
            err++;
 8008cb4:	7afb      	ldrb	r3, [r7, #11]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cba:	e03b      	b.n	8008d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	7c12      	ldrb	r2, [r2, #16]
 8008cd4:	f107 0108 	add.w	r1, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cde:	e029      	b.n	8008d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa63 	bl	80091ae <USBD_CtlError>
            err++;
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
 8008cea:	3301      	adds	r3, #1
 8008cec:	72fb      	strb	r3, [r7, #11]
          break;
 8008cee:	e021      	b.n	8008d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	7c12      	ldrb	r2, [r2, #16]
 8008d08:	f107 0108 	add.w	r1, r7, #8
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d12:	e00f      	b.n	8008d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa49 	bl	80091ae <USBD_CtlError>
            err++;
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	72fb      	strb	r3, [r7, #11]
          break;
 8008d22:	e007      	b.n	8008d34 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa41 	bl	80091ae <USBD_CtlError>
          err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d32:	bf00      	nop
      }
      break;
 8008d34:	e037      	b.n	8008da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7c1b      	ldrb	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	f107 0208 	add.w	r2, r7, #8
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	4798      	blx	r3
 8008d4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d50:	e029      	b.n	8008da6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fa2a 	bl	80091ae <USBD_CtlError>
        err++;
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d60:	e021      	b.n	8008da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7c1b      	ldrb	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f107 0208 	add.w	r2, r7, #8
 8008d76:	4610      	mov	r0, r2
 8008d78:	4798      	blx	r3
 8008d7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	2207      	movs	r2, #7
 8008d82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d84:	e00f      	b.n	8008da6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fa10 	bl	80091ae <USBD_CtlError>
        err++;
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	3301      	adds	r3, #1
 8008d92:	72fb      	strb	r3, [r7, #11]
      break;
 8008d94:	e007      	b.n	8008da6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa08 	bl	80091ae <USBD_CtlError>
      err++;
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	3301      	adds	r3, #1
 8008da2:	72fb      	strb	r3, [r7, #11]
      break;
 8008da4:	bf00      	nop
  }

  if (err != 0U)
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d11e      	bne.n	8008dea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	88db      	ldrh	r3, [r3, #6]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d016      	beq.n	8008de2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008db4:	893b      	ldrh	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00e      	beq.n	8008dd8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	88da      	ldrh	r2, [r3, #6]
 8008dbe:	893b      	ldrh	r3, [r7, #8]
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	bf28      	it	cs
 8008dc4:	4613      	movcs	r3, r2
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dca:	893b      	ldrh	r3, [r7, #8]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fa5d 	bl	8009290 <USBD_CtlSendData>
 8008dd6:	e009      	b.n	8008dec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f9e7 	bl	80091ae <USBD_CtlError>
 8008de0:	e004      	b.n	8008dec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 faae 	bl	8009344 <USBD_CtlSendStatus>
 8008de8:	e000      	b.n	8008dec <USBD_GetDescriptor+0x320>
    return;
 8008dea:	bf00      	nop
  }
}
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop

08008df4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	889b      	ldrh	r3, [r3, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d131      	bne.n	8008e6a <USBD_SetAddress+0x76>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d12d      	bne.n	8008e6a <USBD_SetAddress+0x76>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	2b7f      	cmp	r3, #127	; 0x7f
 8008e14:	d829      	bhi.n	8008e6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	885b      	ldrh	r3, [r3, #2]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d104      	bne.n	8008e38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f9bc 	bl	80091ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e36:	e01d      	b.n	8008e74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	7bfa      	ldrb	r2, [r7, #15]
 8008e3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 ff6b 	bl	8009d20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa7a 	bl	8009344 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d004      	beq.n	8008e60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5e:	e009      	b.n	8008e74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e68:	e004      	b.n	8008e74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f99e 	bl	80091ae <USBD_CtlError>
  }
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	885b      	ldrh	r3, [r3, #2]
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	4b4e      	ldr	r3, [pc, #312]	; (8008fcc <USBD_SetConfig+0x150>)
 8008e92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e94:	4b4d      	ldr	r3, [pc, #308]	; (8008fcc <USBD_SetConfig+0x150>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d905      	bls.n	8008ea8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f985 	bl	80091ae <USBD_CtlError>
    return USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e08c      	b.n	8008fc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d002      	beq.n	8008eba <USBD_SetConfig+0x3e>
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d029      	beq.n	8008f0c <USBD_SetConfig+0x90>
 8008eb8:	e075      	b.n	8008fa6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008eba:	4b44      	ldr	r3, [pc, #272]	; (8008fcc <USBD_SetConfig+0x150>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d020      	beq.n	8008f04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ec2:	4b42      	ldr	r3, [pc, #264]	; (8008fcc <USBD_SetConfig+0x150>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ecc:	4b3f      	ldr	r3, [pc, #252]	; (8008fcc <USBD_SetConfig+0x150>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7fe ffbd 	bl	8007e52 <USBD_SetClassConfig>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d008      	beq.n	8008ef4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f962 	bl	80091ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2202      	movs	r2, #2
 8008eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ef2:	e065      	b.n	8008fc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa25 	bl	8009344 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f02:	e05d      	b.n	8008fc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa1d 	bl	8009344 <USBD_CtlSendStatus>
      break;
 8008f0a:	e059      	b.n	8008fc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f0c:	4b2f      	ldr	r3, [pc, #188]	; (8008fcc <USBD_SetConfig+0x150>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d112      	bne.n	8008f3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <USBD_SetConfig+0x150>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f26:	4b29      	ldr	r3, [pc, #164]	; (8008fcc <USBD_SetConfig+0x150>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7fe ffac 	bl	8007e8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa06 	bl	8009344 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f38:	e042      	b.n	8008fc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f3a:	4b24      	ldr	r3, [pc, #144]	; (8008fcc <USBD_SetConfig+0x150>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d02a      	beq.n	8008f9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fe ff9a 	bl	8007e8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f56:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <USBD_SetConfig+0x150>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f60:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <USBD_SetConfig+0x150>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fe ff73 	bl	8007e52 <USBD_SetClassConfig>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00f      	beq.n	8008f96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f918 	bl	80091ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fe ff7f 	bl	8007e8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f94:	e014      	b.n	8008fc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f9d4 	bl	8009344 <USBD_CtlSendStatus>
      break;
 8008f9c:	e010      	b.n	8008fc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9d0 	bl	8009344 <USBD_CtlSendStatus>
      break;
 8008fa4:	e00c      	b.n	8008fc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f900 	bl	80091ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fae:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <USBD_SetConfig+0x150>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7fe ff68 	bl	8007e8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbe:	bf00      	nop
  }

  return ret;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000924 	.word	0x20000924

08008fd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	88db      	ldrh	r3, [r3, #6]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d004      	beq.n	8008fec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8e2 	bl	80091ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fea:	e023      	b.n	8009034 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	dc02      	bgt.n	8008ffe <USBD_GetConfig+0x2e>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dc03      	bgt.n	8009004 <USBD_GetConfig+0x34>
 8008ffc:	e015      	b.n	800902a <USBD_GetConfig+0x5a>
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d00b      	beq.n	800901a <USBD_GetConfig+0x4a>
 8009002:	e012      	b.n	800902a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3308      	adds	r3, #8
 800900e:	2201      	movs	r2, #1
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f93c 	bl	8009290 <USBD_CtlSendData>
        break;
 8009018:	e00c      	b.n	8009034 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	2201      	movs	r2, #1
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f934 	bl	8009290 <USBD_CtlSendData>
        break;
 8009028:	e004      	b.n	8009034 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f8be 	bl	80091ae <USBD_CtlError>
        break;
 8009032:	bf00      	nop
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	3b01      	subs	r3, #1
 8009050:	2b02      	cmp	r3, #2
 8009052:	d81e      	bhi.n	8009092 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	88db      	ldrh	r3, [r3, #6]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d004      	beq.n	8009066 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8a5 	bl	80091ae <USBD_CtlError>
        break;
 8009064:	e01a      	b.n	800909c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f043 0202 	orr.w	r2, r3, #2
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	330c      	adds	r3, #12
 8009086:	2202      	movs	r2, #2
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f900 	bl	8009290 <USBD_CtlSendData>
      break;
 8009090:	e004      	b.n	800909c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f88a 	bl	80091ae <USBD_CtlError>
      break;
 800909a:	bf00      	nop
  }
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d107      	bne.n	80090c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f940 	bl	8009344 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80090c4:	e013      	b.n	80090ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	885b      	ldrh	r3, [r3, #2]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d10b      	bne.n	80090e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	889b      	ldrh	r3, [r3, #4]
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f930 	bl	8009344 <USBD_CtlSendStatus>
}
 80090e4:	e003      	b.n	80090ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f860 	bl	80091ae <USBD_CtlError>
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009106:	b2db      	uxtb	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	2b02      	cmp	r3, #2
 800910c:	d80b      	bhi.n	8009126 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	885b      	ldrh	r3, [r3, #2]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d10c      	bne.n	8009130 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f910 	bl	8009344 <USBD_CtlSendStatus>
      }
      break;
 8009124:	e004      	b.n	8009130 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f840 	bl	80091ae <USBD_CtlError>
      break;
 800912e:	e000      	b.n	8009132 <USBD_ClrFeature+0x3c>
      break;
 8009130:	bf00      	nop
  }
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3301      	adds	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fa17 	bl	8008598 <SWAPBYTE>
 800916a:	4603      	mov	r3, r0
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff fa0a 	bl	8008598 <SWAPBYTE>
 8009184:	4603      	mov	r3, r0
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3301      	adds	r3, #1
 8009196:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff f9fd 	bl	8008598 <SWAPBYTE>
 800919e:	4603      	mov	r3, r0
 80091a0:	461a      	mov	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	80da      	strh	r2, [r3, #6]
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091b8:	2180      	movs	r1, #128	; 0x80
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fd46 	bl	8009c4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091c0:	2100      	movs	r1, #0
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fd42 	bl	8009c4c <USBD_LL_StallEP>
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d036      	beq.n	8009254 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f000 f836 	bl	800925c <USBD_GetLen>
 80091f0:	4603      	mov	r3, r0
 80091f2:	3301      	adds	r3, #1
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	4413      	add	r3, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	7812      	ldrb	r2, [r2, #0]
 8009208:	701a      	strb	r2, [r3, #0]
  idx++;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	3301      	adds	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	2203      	movs	r2, #3
 8009218:	701a      	strb	r2, [r3, #0]
  idx++;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	3301      	adds	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009220:	e013      	b.n	800924a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	4413      	add	r3, r2
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	7812      	ldrb	r2, [r2, #0]
 800922c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	3301      	adds	r3, #1
 8009232:	613b      	str	r3, [r7, #16]
    idx++;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	3301      	adds	r3, #1
 8009238:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	4413      	add	r3, r2
 8009240:	2200      	movs	r2, #0
 8009242:	701a      	strb	r2, [r3, #0]
    idx++;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	3301      	adds	r3, #1
 8009248:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e7      	bne.n	8009222 <USBD_GetString+0x52>
 8009252:	e000      	b.n	8009256 <USBD_GetString+0x86>
    return;
 8009254:	bf00      	nop
  }
}
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800926c:	e005      	b.n	800927a <USBD_GetLen+0x1e>
  {
    len++;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	3301      	adds	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	3301      	adds	r3, #1
 8009278:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f5      	bne.n	800926e <USBD_GetLen+0x12>
  }

  return len;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2202      	movs	r2, #2
 80092a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	2100      	movs	r1, #0
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fd51 	bl	8009d5e <USBD_LL_Transmit>

  return USBD_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	2100      	movs	r1, #0
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 fd40 	bl	8009d5e <USBD_LL_Transmit>

  return USBD_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2203      	movs	r2, #3
 80092f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	2100      	movs	r1, #0
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 fd44 	bl	8009da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	2100      	movs	r1, #0
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 fd33 	bl	8009da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2204      	movs	r2, #4
 8009350:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009354:	2300      	movs	r3, #0
 8009356:	2200      	movs	r2, #0
 8009358:	2100      	movs	r1, #0
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fcff 	bl	8009d5e <USBD_LL_Transmit>

  return USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2205      	movs	r2, #5
 8009376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800937a:	2300      	movs	r3, #0
 800937c:	2200      	movs	r2, #0
 800937e:	2100      	movs	r1, #0
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fd0d 	bl	8009da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009394:	2200      	movs	r2, #0
 8009396:	4912      	ldr	r1, [pc, #72]	; (80093e0 <MX_USB_DEVICE_Init+0x50>)
 8009398:	4812      	ldr	r0, [pc, #72]	; (80093e4 <MX_USB_DEVICE_Init+0x54>)
 800939a:	f7fe fcdd 	bl	8007d58 <USBD_Init>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093a4:	f7f8 f9a8 	bl	80016f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093a8:	490f      	ldr	r1, [pc, #60]	; (80093e8 <MX_USB_DEVICE_Init+0x58>)
 80093aa:	480e      	ldr	r0, [pc, #56]	; (80093e4 <MX_USB_DEVICE_Init+0x54>)
 80093ac:	f7fe fd04 	bl	8007db8 <USBD_RegisterClass>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093b6:	f7f8 f99f 	bl	80016f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093ba:	490c      	ldr	r1, [pc, #48]	; (80093ec <MX_USB_DEVICE_Init+0x5c>)
 80093bc:	4809      	ldr	r0, [pc, #36]	; (80093e4 <MX_USB_DEVICE_Init+0x54>)
 80093be:	f7fe fbf5 	bl	8007bac <USBD_CDC_RegisterInterface>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093c8:	f7f8 f996 	bl	80016f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093cc:	4805      	ldr	r0, [pc, #20]	; (80093e4 <MX_USB_DEVICE_Init+0x54>)
 80093ce:	f7fe fd29 	bl	8007e24 <USBD_Start>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093d8:	f7f8 f98e 	bl	80016f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093dc:	bf00      	nop
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	200000ac 	.word	0x200000ac
 80093e4:	20000928 	.word	0x20000928
 80093e8:	20000018 	.word	0x20000018
 80093ec:	20000098 	.word	0x20000098

080093f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093f4:	2200      	movs	r2, #0
 80093f6:	4905      	ldr	r1, [pc, #20]	; (800940c <CDC_Init_FS+0x1c>)
 80093f8:	4805      	ldr	r0, [pc, #20]	; (8009410 <CDC_Init_FS+0x20>)
 80093fa:	f7fe fbf1 	bl	8007be0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093fe:	4905      	ldr	r1, [pc, #20]	; (8009414 <CDC_Init_FS+0x24>)
 8009400:	4803      	ldr	r0, [pc, #12]	; (8009410 <CDC_Init_FS+0x20>)
 8009402:	f7fe fc0f 	bl	8007c24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009406:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009408:	4618      	mov	r0, r3
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20001404 	.word	0x20001404
 8009410:	20000928 	.word	0x20000928
 8009414:	20000c04 	.word	0x20000c04

08009418 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800941c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800941e:	4618      	mov	r0, r3
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	6039      	str	r1, [r7, #0]
 8009432:	71fb      	strb	r3, [r7, #7]
 8009434:	4613      	mov	r3, r2
 8009436:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b23      	cmp	r3, #35	; 0x23
 800943c:	d84a      	bhi.n	80094d4 <CDC_Control_FS+0xac>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <CDC_Control_FS+0x1c>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	080094d5 	.word	0x080094d5
 8009448:	080094d5 	.word	0x080094d5
 800944c:	080094d5 	.word	0x080094d5
 8009450:	080094d5 	.word	0x080094d5
 8009454:	080094d5 	.word	0x080094d5
 8009458:	080094d5 	.word	0x080094d5
 800945c:	080094d5 	.word	0x080094d5
 8009460:	080094d5 	.word	0x080094d5
 8009464:	080094d5 	.word	0x080094d5
 8009468:	080094d5 	.word	0x080094d5
 800946c:	080094d5 	.word	0x080094d5
 8009470:	080094d5 	.word	0x080094d5
 8009474:	080094d5 	.word	0x080094d5
 8009478:	080094d5 	.word	0x080094d5
 800947c:	080094d5 	.word	0x080094d5
 8009480:	080094d5 	.word	0x080094d5
 8009484:	080094d5 	.word	0x080094d5
 8009488:	080094d5 	.word	0x080094d5
 800948c:	080094d5 	.word	0x080094d5
 8009490:	080094d5 	.word	0x080094d5
 8009494:	080094d5 	.word	0x080094d5
 8009498:	080094d5 	.word	0x080094d5
 800949c:	080094d5 	.word	0x080094d5
 80094a0:	080094d5 	.word	0x080094d5
 80094a4:	080094d5 	.word	0x080094d5
 80094a8:	080094d5 	.word	0x080094d5
 80094ac:	080094d5 	.word	0x080094d5
 80094b0:	080094d5 	.word	0x080094d5
 80094b4:	080094d5 	.word	0x080094d5
 80094b8:	080094d5 	.word	0x080094d5
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094d5 	.word	0x080094d5
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094d5 	.word	0x080094d5
 80094cc:	080094d5 	.word	0x080094d5
 80094d0:	080094d5 	.word	0x080094d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094d4:	bf00      	nop
  }

  return (USBD_OK);
 80094d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <CDC_Receive_FS>:
//
//    return (USBD_OK);
//}

static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
    // Controleer of de buffer groot genoeg is voor de nieuwe data
    if (receivedLength + *Len < BUFFER_SIZE_)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <CDC_Receive_FS+0x7c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4413      	add	r3, r2
 80094f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094fc:	d21a      	bcs.n	8009534 <CDC_Receive_FS+0x50>
    {
        // Voeg de nieuwe ontvangen data toe aan de bestaande buffer
        memcpy(&receivedData[receivedLength], Buf, *Len);  // Gebruik memcpy in plaats van strncat
 80094fe:	4b18      	ldr	r3, [pc, #96]	; (8009560 <CDC_Receive_FS+0x7c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a18      	ldr	r2, [pc, #96]	; (8009564 <CDC_Receive_FS+0x80>)
 8009504:	1898      	adds	r0, r3, r2
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	f000 fd37 	bl	8009f80 <memcpy>
        receivedLength += *Len;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	4b12      	ldr	r3, [pc, #72]	; (8009560 <CDC_Receive_FS+0x7c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4413      	add	r3, r2
 800951c:	4a10      	ldr	r2, [pc, #64]	; (8009560 <CDC_Receive_FS+0x7c>)
 800951e:	6013      	str	r3, [r2, #0]

        // Controleer of er een newline of einde van bericht is ontvangen
        if (strchr((char*)receivedData, '\n') != NULL)  // '\n' wordt als einde van bericht gezien
 8009520:	210a      	movs	r1, #10
 8009522:	4810      	ldr	r0, [pc, #64]	; (8009564 <CDC_Receive_FS+0x80>)
 8009524:	f000 ffe9 	bl	800a4fa <strchr>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <CDC_Receive_FS+0x62>
        {
            // Verwerk het volledige bericht zodra het compleet is
            CheckReceivedData();
 800952e:	f7f7 fdb3 	bl	8001098 <CheckReceivedData>
 8009532:	e008      	b.n	8009546 <CDC_Receive_FS+0x62>
        }
    }
    else
    {
        // Buffer overflow, reset de buffer en geef een foutmelding
        memset(receivedData, 0, BUFFER_SIZE_);
 8009534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009538:	2100      	movs	r1, #0
 800953a:	480a      	ldr	r0, [pc, #40]	; (8009564 <CDC_Receive_FS+0x80>)
 800953c:	f000 fd2e 	bl	8009f9c <memset>
        receivedLength = 0;
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <CDC_Receive_FS+0x7c>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
    }

    // Geef de USB stack opdracht om meer data te ontvangen
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4807      	ldr	r0, [pc, #28]	; (8009568 <CDC_Receive_FS+0x84>)
 800954a:	f7fe fb6b 	bl	8007c24 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800954e:	4806      	ldr	r0, [pc, #24]	; (8009568 <CDC_Receive_FS+0x84>)
 8009550:	f7fe fbcc 	bl	8007cec <USBD_CDC_ReceivePacket>

    return (USBD_OK);
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200008b4 	.word	0x200008b4
 8009564:	200004b4 	.word	0x200004b4
 8009568:	20000928 	.word	0x20000928

0800956c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800957c:	4b0d      	ldr	r3, [pc, #52]	; (80095b4 <CDC_Transmit_FS+0x48>)
 800957e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009582:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800958e:	2301      	movs	r3, #1
 8009590:	e00b      	b.n	80095aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009592:	887b      	ldrh	r3, [r7, #2]
 8009594:	461a      	mov	r2, r3
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4806      	ldr	r0, [pc, #24]	; (80095b4 <CDC_Transmit_FS+0x48>)
 800959a:	f7fe fb21 	bl	8007be0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800959e:	4805      	ldr	r0, [pc, #20]	; (80095b4 <CDC_Transmit_FS+0x48>)
 80095a0:	f7fe fb5e 	bl	8007c60 <USBD_CDC_TransmitPacket>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20000928 	.word	0x20000928

080095b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80095ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2212      	movs	r2, #18
 80095ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095ee:	4b03      	ldr	r3, [pc, #12]	; (80095fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	200000cc 	.word	0x200000cc

08009600 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2204      	movs	r2, #4
 8009610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009612:	4b03      	ldr	r3, [pc, #12]	; (8009620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009614:	4618      	mov	r0, r3
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	200000ec 	.word	0x200000ec

08009624 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	6039      	str	r1, [r7, #0]
 800962e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d105      	bne.n	8009642 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	4907      	ldr	r1, [pc, #28]	; (8009658 <USBD_FS_ProductStrDescriptor+0x34>)
 800963a:	4808      	ldr	r0, [pc, #32]	; (800965c <USBD_FS_ProductStrDescriptor+0x38>)
 800963c:	f7ff fdc8 	bl	80091d0 <USBD_GetString>
 8009640:	e004      	b.n	800964c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	4904      	ldr	r1, [pc, #16]	; (8009658 <USBD_FS_ProductStrDescriptor+0x34>)
 8009646:	4805      	ldr	r0, [pc, #20]	; (800965c <USBD_FS_ProductStrDescriptor+0x38>)
 8009648:	f7ff fdc2 	bl	80091d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800964c:	4b02      	ldr	r3, [pc, #8]	; (8009658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20001c04 	.word	0x20001c04
 800965c:	0800e01c 	.word	0x0800e01c

08009660 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	4904      	ldr	r1, [pc, #16]	; (8009680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009670:	4804      	ldr	r0, [pc, #16]	; (8009684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009672:	f7ff fdad 	bl	80091d0 <USBD_GetString>
  return USBD_StrDesc;
 8009676:	4b02      	ldr	r3, [pc, #8]	; (8009680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20001c04 	.word	0x20001c04
 8009684:	0800e02c 	.word	0x0800e02c

08009688 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	221a      	movs	r2, #26
 8009698:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800969a:	f000 f855 	bl	8009748 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800969e:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	200000f0 	.word	0x200000f0

080096ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	4907      	ldr	r1, [pc, #28]	; (80096e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096c2:	4808      	ldr	r0, [pc, #32]	; (80096e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096c4:	f7ff fd84 	bl	80091d0 <USBD_GetString>
 80096c8:	e004      	b.n	80096d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	4904      	ldr	r1, [pc, #16]	; (80096e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096ce:	4805      	ldr	r0, [pc, #20]	; (80096e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096d0:	f7ff fd7e 	bl	80091d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20001c04 	.word	0x20001c04
 80096e4:	0800e040 	.word	0x0800e040

080096e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	6039      	str	r1, [r7, #0]
 80096f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d105      	bne.n	8009706 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	4907      	ldr	r1, [pc, #28]	; (800971c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096fe:	4808      	ldr	r0, [pc, #32]	; (8009720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009700:	f7ff fd66 	bl	80091d0 <USBD_GetString>
 8009704:	e004      	b.n	8009710 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4904      	ldr	r1, [pc, #16]	; (800971c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800970a:	4805      	ldr	r0, [pc, #20]	; (8009720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800970c:	f7ff fd60 	bl	80091d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	20001c04 	.word	0x20001c04
 8009720:	0800e04c 	.word	0x0800e04c

08009724 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	6039      	str	r1, [r7, #0]
 800972e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	220c      	movs	r2, #12
 8009734:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	200000e0 	.word	0x200000e0

08009748 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800974e:	4b0f      	ldr	r3, [pc, #60]	; (800978c <Get_SerialNum+0x44>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <Get_SerialNum+0x48>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800975a:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <Get_SerialNum+0x4c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4413      	add	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800976e:	2208      	movs	r2, #8
 8009770:	4909      	ldr	r1, [pc, #36]	; (8009798 <Get_SerialNum+0x50>)
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f814 	bl	80097a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009778:	2204      	movs	r2, #4
 800977a:	4908      	ldr	r1, [pc, #32]	; (800979c <Get_SerialNum+0x54>)
 800977c:	68b8      	ldr	r0, [r7, #8]
 800977e:	f000 f80f 	bl	80097a0 <IntToUnicode>
  }
}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	1fff7a10 	.word	0x1fff7a10
 8009790:	1fff7a14 	.word	0x1fff7a14
 8009794:	1fff7a18 	.word	0x1fff7a18
 8009798:	200000f2 	.word	0x200000f2
 800979c:	20000102 	.word	0x20000102

080097a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	4613      	mov	r3, r2
 80097ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097b2:	2300      	movs	r3, #0
 80097b4:	75fb      	strb	r3, [r7, #23]
 80097b6:	e027      	b.n	8009808 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	0f1b      	lsrs	r3, r3, #28
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d80b      	bhi.n	80097d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	0f1b      	lsrs	r3, r3, #28
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	4619      	mov	r1, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	440b      	add	r3, r1
 80097d0:	3230      	adds	r2, #48	; 0x30
 80097d2:	b2d2      	uxtb	r2, r2
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	e00a      	b.n	80097ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	0f1b      	lsrs	r3, r3, #28
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	4619      	mov	r1, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	440b      	add	r3, r1
 80097e8:	3237      	adds	r2, #55	; 0x37
 80097ea:	b2d2      	uxtb	r2, r2
 80097ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	011b      	lsls	r3, r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	3301      	adds	r3, #1
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4413      	add	r3, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	3301      	adds	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
 8009808:	7dfa      	ldrb	r2, [r7, #23]
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	429a      	cmp	r2, r3
 800980e:	d3d3      	bcc.n	80097b8 <IntToUnicode+0x18>
  }
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b0a0      	sub	sp, #128	; 0x80
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009828:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	609a      	str	r2, [r3, #8]
 8009834:	60da      	str	r2, [r3, #12]
 8009836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	225c      	movs	r2, #92	; 0x5c
 800983e:	2100      	movs	r1, #0
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fbab 	bl	8009f9c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800984e:	d156      	bne.n	80098fe <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009854:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009856:	2300      	movs	r3, #0
 8009858:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	4618      	mov	r0, r3
 8009860:	f7fa fbd2 	bl	8004008 <HAL_RCCEx_PeriphCLKConfig>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800986a:	f7f7 ff45 	bl	80016f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800986e:	2300      	movs	r3, #0
 8009870:	60fb      	str	r3, [r7, #12]
 8009872:	4b25      	ldr	r3, [pc, #148]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 8009874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009876:	4a24      	ldr	r2, [pc, #144]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 8009878:	f043 0301 	orr.w	r3, r3, #1
 800987c:	6313      	str	r3, [r2, #48]	; 0x30
 800987e:	4b22      	ldr	r3, [pc, #136]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800988a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800988e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009890:	2300      	movs	r3, #0
 8009892:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009894:	2300      	movs	r3, #0
 8009896:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800989c:	4619      	mov	r1, r3
 800989e:	481b      	ldr	r0, [pc, #108]	; (800990c <HAL_PCD_MspInit+0xec>)
 80098a0:	f7f8 fc0c 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80098a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098aa:	2302      	movs	r3, #2
 80098ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098b2:	2303      	movs	r3, #3
 80098b4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098b6:	230a      	movs	r3, #10
 80098b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80098be:	4619      	mov	r1, r3
 80098c0:	4812      	ldr	r0, [pc, #72]	; (800990c <HAL_PCD_MspInit+0xec>)
 80098c2:	f7f8 fbfb 	bl	80020bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098c6:	4b10      	ldr	r3, [pc, #64]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 80098c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ca:	4a0f      	ldr	r2, [pc, #60]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 80098cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d0:	6353      	str	r3, [r2, #52]	; 0x34
 80098d2:	2300      	movs	r3, #0
 80098d4:	60bb      	str	r3, [r7, #8]
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 80098d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098da:	4a0b      	ldr	r2, [pc, #44]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 80098dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098e0:	6453      	str	r3, [r2, #68]	; 0x44
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <HAL_PCD_MspInit+0xe8>)
 80098e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ea:	60bb      	str	r3, [r7, #8]
 80098ec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098ee:	2200      	movs	r2, #0
 80098f0:	2100      	movs	r1, #0
 80098f2:	2043      	movs	r0, #67	; 0x43
 80098f4:	f7f8 fbab 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098f8:	2043      	movs	r0, #67	; 0x43
 80098fa:	f7f8 fbc4 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098fe:	bf00      	nop
 8009900:	3780      	adds	r7, #128	; 0x80
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	40023800 	.word	0x40023800
 800990c:	40020000 	.word	0x40020000

08009910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fe fac9 	bl	8007ebe <USBD_LL_SetupStage>
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	4613      	mov	r3, r2
 800994c:	00db      	lsls	r3, r3, #3
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	4619      	mov	r1, r3
 800995e:	f7fe fb03 	bl	8007f68 <USBD_LL_DataOutStage>
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	460b      	mov	r3, r1
 8009974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	4613      	mov	r3, r2
 8009982:	00db      	lsls	r3, r3, #3
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	440b      	add	r3, r1
 800998a:	334c      	adds	r3, #76	; 0x4c
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	78fb      	ldrb	r3, [r7, #3]
 8009990:	4619      	mov	r1, r3
 8009992:	f7fe fb9c 	bl	80080ce <USBD_LL_DataInStage>
}
 8009996:	bf00      	nop
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe fcd0 	bl	8008352 <USBD_LL_SOF>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099c2:	2301      	movs	r3, #1
 80099c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]
 80099d2:	e008      	b.n	80099e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d102      	bne.n	80099e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80099dc:	2301      	movs	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
 80099e0:	e001      	b.n	80099e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80099e2:	f7f7 fe89 	bl	80016f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099ec:	7bfa      	ldrb	r2, [r7, #15]
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fc70 	bl	80082d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fc18 	bl	8008232 <USBD_LL_Reset>
}
 8009a02:	bf00      	nop
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fc6b 	bl	80082f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	6812      	ldr	r2, [r2, #0]
 8009a2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a32:	f043 0301 	orr.w	r3, r3, #1
 8009a36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a40:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <HAL_PCD_SuspendCallback+0x48>)
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	4a03      	ldr	r2, [pc, #12]	; (8009a54 <HAL_PCD_SuspendCallback+0x48>)
 8009a46:	f043 0306 	orr.w	r3, r3, #6
 8009a4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a4c:	bf00      	nop
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	e000ed00 	.word	0xe000ed00

08009a58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe fc5b 	bl	8008322 <USBD_LL_Resume>
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fcb3 	bl	80083f6 <USBD_LL_IsoOUTIncomplete>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009aaa:	78fa      	ldrb	r2, [r7, #3]
 8009aac:	4611      	mov	r1, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fc6f 	bl	8008392 <USBD_LL_IsoINIncomplete>
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fcc5 	bl	800845a <USBD_LL_DevConnected>
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fcc2 	bl	8008470 <USBD_LL_DevDisconnected>
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d13c      	bne.n	8009b7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b04:	4a20      	ldr	r2, [pc, #128]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a1e      	ldr	r2, [pc, #120]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b14:	4b1c      	ldr	r3, [pc, #112]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009b1c:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b1e:	2206      	movs	r2, #6
 8009b20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b22:	4b19      	ldr	r3, [pc, #100]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b24:	2202      	movs	r2, #2
 8009b26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b28:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b2e:	4b16      	ldr	r3, [pc, #88]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b30:	2202      	movs	r2, #2
 8009b32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b34:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b40:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009b46:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b48:	2201      	movs	r2, #1
 8009b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b4c:	4b0e      	ldr	r3, [pc, #56]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b52:	480d      	ldr	r0, [pc, #52]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b54:	f7f8 fe75 	bl	8002842 <HAL_PCD_Init>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b5e:	f7f7 fdcb 	bl	80016f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b62:	2180      	movs	r1, #128	; 0x80
 8009b64:	4808      	ldr	r0, [pc, #32]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b66:	f7fa f900 	bl	8003d6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b6a:	2240      	movs	r2, #64	; 0x40
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4806      	ldr	r0, [pc, #24]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b70:	f7fa f8b4 	bl	8003cdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b74:	2280      	movs	r2, #128	; 0x80
 8009b76:	2101      	movs	r1, #1
 8009b78:	4803      	ldr	r0, [pc, #12]	; (8009b88 <USBD_LL_Init+0x94>)
 8009b7a:	f7fa f8af 	bl	8003cdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20001e04 	.word	0x20001e04

08009b8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f8 ff71 	bl	8002a8a <HAL_PCD_Start>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f990 	bl	8009ed4 <USBD_Get_USB_Status>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	4608      	mov	r0, r1
 8009bcc:	4611      	mov	r1, r2
 8009bce:	461a      	mov	r2, r3
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	70fb      	strb	r3, [r7, #3]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70bb      	strb	r3, [r7, #2]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bea:	78bb      	ldrb	r3, [r7, #2]
 8009bec:	883a      	ldrh	r2, [r7, #0]
 8009bee:	78f9      	ldrb	r1, [r7, #3]
 8009bf0:	f7f9 fc6f 	bl	80034d2 <HAL_PCD_EP_Open>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f96a 	bl	8009ed4 <USBD_Get_USB_Status>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7f9 fcb8 	bl	80035a2 <HAL_PCD_EP_Close>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f94b 	bl	8009ed4 <USBD_Get_USB_Status>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c66:	78fa      	ldrb	r2, [r7, #3]
 8009c68:	4611      	mov	r1, r2
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7f9 fd90 	bl	8003790 <HAL_PCD_EP_SetStall>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f92c 	bl	8009ed4 <USBD_Get_USB_Status>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	460b      	mov	r3, r1
 8009c94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ca4:	78fa      	ldrb	r2, [r7, #3]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7f9 fdd5 	bl	8003858 <HAL_PCD_EP_ClrStall>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 f90d 	bl	8009ed4 <USBD_Get_USB_Status>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	da0b      	bge.n	8009cfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	4613      	mov	r3, r2
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	333e      	adds	r3, #62	; 0x3e
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	e00b      	b.n	8009d14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d02:	68f9      	ldr	r1, [r7, #12]
 8009d04:	4613      	mov	r3, r2
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009d12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7f9 fba2 	bl	8003488 <HAL_PCD_SetAddress>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f8c2 	bl	8009ed4 <USBD_Get_USB_Status>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b086      	sub	sp, #24
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	607a      	str	r2, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d7c:	7af9      	ldrb	r1, [r7, #11]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	f7f9 fcbb 	bl	80036fc <HAL_PCD_EP_Transmit>
 8009d86:	4603      	mov	r3, r0
 8009d88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 f8a1 	bl	8009ed4 <USBD_Get_USB_Status>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d96:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	607a      	str	r2, [r7, #4]
 8009daa:	603b      	str	r3, [r7, #0]
 8009dac:	460b      	mov	r3, r1
 8009dae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009dbe:	7af9      	ldrb	r1, [r7, #11]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	f7f9 fc37 	bl	8003636 <HAL_PCD_EP_Receive>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 f880 	bl	8009ed4 <USBD_Get_USB_Status>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f9 fc67 	bl	80036cc <HAL_PCD_EP_GetRxCount>
 8009dfe:	4603      	mov	r3, r0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <HAL_PCDEx_LPM_Callback+0x18>
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d01f      	beq.n	8009e5e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009e1e:	e03b      	b.n	8009e98 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009e28:	f7f7 f9fe 	bl	8001228 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ea0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	4a1b      	ldr	r2, [pc, #108]	; (8009ea0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009e32:	f023 0306 	bic.w	r3, r3, #6
 8009e36:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6812      	ldr	r2, [r2, #0]
 8009e46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e4a:	f023 0301 	bic.w	r3, r3, #1
 8009e4e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fa63 	bl	8008322 <USBD_LL_Resume>
    break;
 8009e5c:	e01c      	b.n	8009e98 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e70:	f043 0301 	orr.w	r3, r3, #1
 8009e74:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe fa3a 	bl	80082f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e8a:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	4a04      	ldr	r2, [pc, #16]	; (8009ea0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009e90:	f043 0306 	orr.w	r3, r3, #6
 8009e94:	6113      	str	r3, [r2, #16]
    break;
 8009e96:	bf00      	nop
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	e000ed00 	.word	0xe000ed00

08009ea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009eac:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <USBD_static_malloc+0x18>)
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	20002310 	.word	0x20002310

08009ec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d817      	bhi.n	8009f18 <USBD_Get_USB_Status+0x44>
 8009ee8:	a201      	add	r2, pc, #4	; (adr r2, 8009ef0 <USBD_Get_USB_Status+0x1c>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f01 	.word	0x08009f01
 8009ef4:	08009f07 	.word	0x08009f07
 8009ef8:	08009f0d 	.word	0x08009f0d
 8009efc:	08009f13 	.word	0x08009f13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73fb      	strb	r3, [r7, #15]
    break;
 8009f04:	e00b      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f06:	2303      	movs	r3, #3
 8009f08:	73fb      	strb	r3, [r7, #15]
    break;
 8009f0a:	e008      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f10:	e005      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f12:	2303      	movs	r3, #3
 8009f14:	73fb      	strb	r3, [r7, #15]
    break;
 8009f16:	e002      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1c:	bf00      	nop
  }
  return usb_status;
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <__errno>:
 8009f2c:	4b01      	ldr	r3, [pc, #4]	; (8009f34 <__errno+0x8>)
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	2000010c 	.word	0x2000010c

08009f38 <__libc_init_array>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	4d0d      	ldr	r5, [pc, #52]	; (8009f70 <__libc_init_array+0x38>)
 8009f3c:	4c0d      	ldr	r4, [pc, #52]	; (8009f74 <__libc_init_array+0x3c>)
 8009f3e:	1b64      	subs	r4, r4, r5
 8009f40:	10a4      	asrs	r4, r4, #2
 8009f42:	2600      	movs	r6, #0
 8009f44:	42a6      	cmp	r6, r4
 8009f46:	d109      	bne.n	8009f5c <__libc_init_array+0x24>
 8009f48:	4d0b      	ldr	r5, [pc, #44]	; (8009f78 <__libc_init_array+0x40>)
 8009f4a:	4c0c      	ldr	r4, [pc, #48]	; (8009f7c <__libc_init_array+0x44>)
 8009f4c:	f003 ff7e 	bl	800de4c <_init>
 8009f50:	1b64      	subs	r4, r4, r5
 8009f52:	10a4      	asrs	r4, r4, #2
 8009f54:	2600      	movs	r6, #0
 8009f56:	42a6      	cmp	r6, r4
 8009f58:	d105      	bne.n	8009f66 <__libc_init_array+0x2e>
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f60:	4798      	blx	r3
 8009f62:	3601      	adds	r6, #1
 8009f64:	e7ee      	b.n	8009f44 <__libc_init_array+0xc>
 8009f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f6a:	4798      	blx	r3
 8009f6c:	3601      	adds	r6, #1
 8009f6e:	e7f2      	b.n	8009f56 <__libc_init_array+0x1e>
 8009f70:	0800e4d8 	.word	0x0800e4d8
 8009f74:	0800e4d8 	.word	0x0800e4d8
 8009f78:	0800e4d8 	.word	0x0800e4d8
 8009f7c:	0800e4dc 	.word	0x0800e4dc

08009f80 <memcpy>:
 8009f80:	440a      	add	r2, r1
 8009f82:	4291      	cmp	r1, r2
 8009f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f88:	d100      	bne.n	8009f8c <memcpy+0xc>
 8009f8a:	4770      	bx	lr
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f96:	4291      	cmp	r1, r2
 8009f98:	d1f9      	bne.n	8009f8e <memcpy+0xe>
 8009f9a:	bd10      	pop	{r4, pc}

08009f9c <memset>:
 8009f9c:	4402      	add	r2, r0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d100      	bne.n	8009fa6 <memset+0xa>
 8009fa4:	4770      	bx	lr
 8009fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8009faa:	e7f9      	b.n	8009fa0 <memset+0x4>

08009fac <_scanf_float>:
 8009fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb0:	b087      	sub	sp, #28
 8009fb2:	4617      	mov	r7, r2
 8009fb4:	9303      	str	r3, [sp, #12]
 8009fb6:	688b      	ldr	r3, [r1, #8]
 8009fb8:	1e5a      	subs	r2, r3, #1
 8009fba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009fbe:	bf83      	ittte	hi
 8009fc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009fc4:	195b      	addhi	r3, r3, r5
 8009fc6:	9302      	strhi	r3, [sp, #8]
 8009fc8:	2300      	movls	r3, #0
 8009fca:	bf86      	itte	hi
 8009fcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009fd0:	608b      	strhi	r3, [r1, #8]
 8009fd2:	9302      	strls	r3, [sp, #8]
 8009fd4:	680b      	ldr	r3, [r1, #0]
 8009fd6:	468b      	mov	fp, r1
 8009fd8:	2500      	movs	r5, #0
 8009fda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009fde:	f84b 3b1c 	str.w	r3, [fp], #28
 8009fe2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009fe6:	4680      	mov	r8, r0
 8009fe8:	460c      	mov	r4, r1
 8009fea:	465e      	mov	r6, fp
 8009fec:	46aa      	mov	sl, r5
 8009fee:	46a9      	mov	r9, r5
 8009ff0:	9501      	str	r5, [sp, #4]
 8009ff2:	68a2      	ldr	r2, [r4, #8]
 8009ff4:	b152      	cbz	r2, 800a00c <_scanf_float+0x60>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2b4e      	cmp	r3, #78	; 0x4e
 8009ffc:	d864      	bhi.n	800a0c8 <_scanf_float+0x11c>
 8009ffe:	2b40      	cmp	r3, #64	; 0x40
 800a000:	d83c      	bhi.n	800a07c <_scanf_float+0xd0>
 800a002:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a006:	b2c8      	uxtb	r0, r1
 800a008:	280e      	cmp	r0, #14
 800a00a:	d93a      	bls.n	800a082 <_scanf_float+0xd6>
 800a00c:	f1b9 0f00 	cmp.w	r9, #0
 800a010:	d003      	beq.n	800a01a <_scanf_float+0x6e>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a01e:	f1ba 0f01 	cmp.w	sl, #1
 800a022:	f200 8113 	bhi.w	800a24c <_scanf_float+0x2a0>
 800a026:	455e      	cmp	r6, fp
 800a028:	f200 8105 	bhi.w	800a236 <_scanf_float+0x28a>
 800a02c:	2501      	movs	r5, #1
 800a02e:	4628      	mov	r0, r5
 800a030:	b007      	add	sp, #28
 800a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a036:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a03a:	2a0d      	cmp	r2, #13
 800a03c:	d8e6      	bhi.n	800a00c <_scanf_float+0x60>
 800a03e:	a101      	add	r1, pc, #4	; (adr r1, 800a044 <_scanf_float+0x98>)
 800a040:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a044:	0800a183 	.word	0x0800a183
 800a048:	0800a00d 	.word	0x0800a00d
 800a04c:	0800a00d 	.word	0x0800a00d
 800a050:	0800a00d 	.word	0x0800a00d
 800a054:	0800a1e3 	.word	0x0800a1e3
 800a058:	0800a1bb 	.word	0x0800a1bb
 800a05c:	0800a00d 	.word	0x0800a00d
 800a060:	0800a00d 	.word	0x0800a00d
 800a064:	0800a191 	.word	0x0800a191
 800a068:	0800a00d 	.word	0x0800a00d
 800a06c:	0800a00d 	.word	0x0800a00d
 800a070:	0800a00d 	.word	0x0800a00d
 800a074:	0800a00d 	.word	0x0800a00d
 800a078:	0800a149 	.word	0x0800a149
 800a07c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a080:	e7db      	b.n	800a03a <_scanf_float+0x8e>
 800a082:	290e      	cmp	r1, #14
 800a084:	d8c2      	bhi.n	800a00c <_scanf_float+0x60>
 800a086:	a001      	add	r0, pc, #4	; (adr r0, 800a08c <_scanf_float+0xe0>)
 800a088:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a08c:	0800a13b 	.word	0x0800a13b
 800a090:	0800a00d 	.word	0x0800a00d
 800a094:	0800a13b 	.word	0x0800a13b
 800a098:	0800a1cf 	.word	0x0800a1cf
 800a09c:	0800a00d 	.word	0x0800a00d
 800a0a0:	0800a0e9 	.word	0x0800a0e9
 800a0a4:	0800a125 	.word	0x0800a125
 800a0a8:	0800a125 	.word	0x0800a125
 800a0ac:	0800a125 	.word	0x0800a125
 800a0b0:	0800a125 	.word	0x0800a125
 800a0b4:	0800a125 	.word	0x0800a125
 800a0b8:	0800a125 	.word	0x0800a125
 800a0bc:	0800a125 	.word	0x0800a125
 800a0c0:	0800a125 	.word	0x0800a125
 800a0c4:	0800a125 	.word	0x0800a125
 800a0c8:	2b6e      	cmp	r3, #110	; 0x6e
 800a0ca:	d809      	bhi.n	800a0e0 <_scanf_float+0x134>
 800a0cc:	2b60      	cmp	r3, #96	; 0x60
 800a0ce:	d8b2      	bhi.n	800a036 <_scanf_float+0x8a>
 800a0d0:	2b54      	cmp	r3, #84	; 0x54
 800a0d2:	d077      	beq.n	800a1c4 <_scanf_float+0x218>
 800a0d4:	2b59      	cmp	r3, #89	; 0x59
 800a0d6:	d199      	bne.n	800a00c <_scanf_float+0x60>
 800a0d8:	2d07      	cmp	r5, #7
 800a0da:	d197      	bne.n	800a00c <_scanf_float+0x60>
 800a0dc:	2508      	movs	r5, #8
 800a0de:	e029      	b.n	800a134 <_scanf_float+0x188>
 800a0e0:	2b74      	cmp	r3, #116	; 0x74
 800a0e2:	d06f      	beq.n	800a1c4 <_scanf_float+0x218>
 800a0e4:	2b79      	cmp	r3, #121	; 0x79
 800a0e6:	e7f6      	b.n	800a0d6 <_scanf_float+0x12a>
 800a0e8:	6821      	ldr	r1, [r4, #0]
 800a0ea:	05c8      	lsls	r0, r1, #23
 800a0ec:	d51a      	bpl.n	800a124 <_scanf_float+0x178>
 800a0ee:	9b02      	ldr	r3, [sp, #8]
 800a0f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a0f4:	6021      	str	r1, [r4, #0]
 800a0f6:	f109 0901 	add.w	r9, r9, #1
 800a0fa:	b11b      	cbz	r3, 800a104 <_scanf_float+0x158>
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	3201      	adds	r2, #1
 800a100:	9302      	str	r3, [sp, #8]
 800a102:	60a2      	str	r2, [r4, #8]
 800a104:	68a3      	ldr	r3, [r4, #8]
 800a106:	3b01      	subs	r3, #1
 800a108:	60a3      	str	r3, [r4, #8]
 800a10a:	6923      	ldr	r3, [r4, #16]
 800a10c:	3301      	adds	r3, #1
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3b01      	subs	r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	607b      	str	r3, [r7, #4]
 800a118:	f340 8084 	ble.w	800a224 <_scanf_float+0x278>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	3301      	adds	r3, #1
 800a120:	603b      	str	r3, [r7, #0]
 800a122:	e766      	b.n	8009ff2 <_scanf_float+0x46>
 800a124:	eb1a 0f05 	cmn.w	sl, r5
 800a128:	f47f af70 	bne.w	800a00c <_scanf_float+0x60>
 800a12c:	6822      	ldr	r2, [r4, #0]
 800a12e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a132:	6022      	str	r2, [r4, #0]
 800a134:	f806 3b01 	strb.w	r3, [r6], #1
 800a138:	e7e4      	b.n	800a104 <_scanf_float+0x158>
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	0610      	lsls	r0, r2, #24
 800a13e:	f57f af65 	bpl.w	800a00c <_scanf_float+0x60>
 800a142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a146:	e7f4      	b.n	800a132 <_scanf_float+0x186>
 800a148:	f1ba 0f00 	cmp.w	sl, #0
 800a14c:	d10e      	bne.n	800a16c <_scanf_float+0x1c0>
 800a14e:	f1b9 0f00 	cmp.w	r9, #0
 800a152:	d10e      	bne.n	800a172 <_scanf_float+0x1c6>
 800a154:	6822      	ldr	r2, [r4, #0]
 800a156:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a15a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a15e:	d108      	bne.n	800a172 <_scanf_float+0x1c6>
 800a160:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a164:	6022      	str	r2, [r4, #0]
 800a166:	f04f 0a01 	mov.w	sl, #1
 800a16a:	e7e3      	b.n	800a134 <_scanf_float+0x188>
 800a16c:	f1ba 0f02 	cmp.w	sl, #2
 800a170:	d055      	beq.n	800a21e <_scanf_float+0x272>
 800a172:	2d01      	cmp	r5, #1
 800a174:	d002      	beq.n	800a17c <_scanf_float+0x1d0>
 800a176:	2d04      	cmp	r5, #4
 800a178:	f47f af48 	bne.w	800a00c <_scanf_float+0x60>
 800a17c:	3501      	adds	r5, #1
 800a17e:	b2ed      	uxtb	r5, r5
 800a180:	e7d8      	b.n	800a134 <_scanf_float+0x188>
 800a182:	f1ba 0f01 	cmp.w	sl, #1
 800a186:	f47f af41 	bne.w	800a00c <_scanf_float+0x60>
 800a18a:	f04f 0a02 	mov.w	sl, #2
 800a18e:	e7d1      	b.n	800a134 <_scanf_float+0x188>
 800a190:	b97d      	cbnz	r5, 800a1b2 <_scanf_float+0x206>
 800a192:	f1b9 0f00 	cmp.w	r9, #0
 800a196:	f47f af3c 	bne.w	800a012 <_scanf_float+0x66>
 800a19a:	6822      	ldr	r2, [r4, #0]
 800a19c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1a4:	f47f af39 	bne.w	800a01a <_scanf_float+0x6e>
 800a1a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1ac:	6022      	str	r2, [r4, #0]
 800a1ae:	2501      	movs	r5, #1
 800a1b0:	e7c0      	b.n	800a134 <_scanf_float+0x188>
 800a1b2:	2d03      	cmp	r5, #3
 800a1b4:	d0e2      	beq.n	800a17c <_scanf_float+0x1d0>
 800a1b6:	2d05      	cmp	r5, #5
 800a1b8:	e7de      	b.n	800a178 <_scanf_float+0x1cc>
 800a1ba:	2d02      	cmp	r5, #2
 800a1bc:	f47f af26 	bne.w	800a00c <_scanf_float+0x60>
 800a1c0:	2503      	movs	r5, #3
 800a1c2:	e7b7      	b.n	800a134 <_scanf_float+0x188>
 800a1c4:	2d06      	cmp	r5, #6
 800a1c6:	f47f af21 	bne.w	800a00c <_scanf_float+0x60>
 800a1ca:	2507      	movs	r5, #7
 800a1cc:	e7b2      	b.n	800a134 <_scanf_float+0x188>
 800a1ce:	6822      	ldr	r2, [r4, #0]
 800a1d0:	0591      	lsls	r1, r2, #22
 800a1d2:	f57f af1b 	bpl.w	800a00c <_scanf_float+0x60>
 800a1d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a1da:	6022      	str	r2, [r4, #0]
 800a1dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1e0:	e7a8      	b.n	800a134 <_scanf_float+0x188>
 800a1e2:	6822      	ldr	r2, [r4, #0]
 800a1e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a1e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a1ec:	d006      	beq.n	800a1fc <_scanf_float+0x250>
 800a1ee:	0550      	lsls	r0, r2, #21
 800a1f0:	f57f af0c 	bpl.w	800a00c <_scanf_float+0x60>
 800a1f4:	f1b9 0f00 	cmp.w	r9, #0
 800a1f8:	f43f af0f 	beq.w	800a01a <_scanf_float+0x6e>
 800a1fc:	0591      	lsls	r1, r2, #22
 800a1fe:	bf58      	it	pl
 800a200:	9901      	ldrpl	r1, [sp, #4]
 800a202:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a206:	bf58      	it	pl
 800a208:	eba9 0101 	subpl.w	r1, r9, r1
 800a20c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a210:	bf58      	it	pl
 800a212:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a216:	6022      	str	r2, [r4, #0]
 800a218:	f04f 0900 	mov.w	r9, #0
 800a21c:	e78a      	b.n	800a134 <_scanf_float+0x188>
 800a21e:	f04f 0a03 	mov.w	sl, #3
 800a222:	e787      	b.n	800a134 <_scanf_float+0x188>
 800a224:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a228:	4639      	mov	r1, r7
 800a22a:	4640      	mov	r0, r8
 800a22c:	4798      	blx	r3
 800a22e:	2800      	cmp	r0, #0
 800a230:	f43f aedf 	beq.w	8009ff2 <_scanf_float+0x46>
 800a234:	e6ea      	b.n	800a00c <_scanf_float+0x60>
 800a236:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a23a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a23e:	463a      	mov	r2, r7
 800a240:	4640      	mov	r0, r8
 800a242:	4798      	blx	r3
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	3b01      	subs	r3, #1
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	e6ec      	b.n	800a026 <_scanf_float+0x7a>
 800a24c:	1e6b      	subs	r3, r5, #1
 800a24e:	2b06      	cmp	r3, #6
 800a250:	d825      	bhi.n	800a29e <_scanf_float+0x2f2>
 800a252:	2d02      	cmp	r5, #2
 800a254:	d836      	bhi.n	800a2c4 <_scanf_float+0x318>
 800a256:	455e      	cmp	r6, fp
 800a258:	f67f aee8 	bls.w	800a02c <_scanf_float+0x80>
 800a25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a260:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a264:	463a      	mov	r2, r7
 800a266:	4640      	mov	r0, r8
 800a268:	4798      	blx	r3
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	6123      	str	r3, [r4, #16]
 800a270:	e7f1      	b.n	800a256 <_scanf_float+0x2aa>
 800a272:	9802      	ldr	r0, [sp, #8]
 800a274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a278:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a27c:	9002      	str	r0, [sp, #8]
 800a27e:	463a      	mov	r2, r7
 800a280:	4640      	mov	r0, r8
 800a282:	4798      	blx	r3
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	3b01      	subs	r3, #1
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a28e:	fa5f fa8a 	uxtb.w	sl, sl
 800a292:	f1ba 0f02 	cmp.w	sl, #2
 800a296:	d1ec      	bne.n	800a272 <_scanf_float+0x2c6>
 800a298:	3d03      	subs	r5, #3
 800a29a:	b2ed      	uxtb	r5, r5
 800a29c:	1b76      	subs	r6, r6, r5
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	05da      	lsls	r2, r3, #23
 800a2a2:	d52f      	bpl.n	800a304 <_scanf_float+0x358>
 800a2a4:	055b      	lsls	r3, r3, #21
 800a2a6:	d510      	bpl.n	800a2ca <_scanf_float+0x31e>
 800a2a8:	455e      	cmp	r6, fp
 800a2aa:	f67f aebf 	bls.w	800a02c <_scanf_float+0x80>
 800a2ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2b6:	463a      	mov	r2, r7
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4798      	blx	r3
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	e7f1      	b.n	800a2a8 <_scanf_float+0x2fc>
 800a2c4:	46aa      	mov	sl, r5
 800a2c6:	9602      	str	r6, [sp, #8]
 800a2c8:	e7df      	b.n	800a28a <_scanf_float+0x2de>
 800a2ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a2ce:	6923      	ldr	r3, [r4, #16]
 800a2d0:	2965      	cmp	r1, #101	; 0x65
 800a2d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a2da:	6123      	str	r3, [r4, #16]
 800a2dc:	d00c      	beq.n	800a2f8 <_scanf_float+0x34c>
 800a2de:	2945      	cmp	r1, #69	; 0x45
 800a2e0:	d00a      	beq.n	800a2f8 <_scanf_float+0x34c>
 800a2e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2e6:	463a      	mov	r2, r7
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	4798      	blx	r3
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	1eb5      	subs	r5, r6, #2
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2fc:	463a      	mov	r2, r7
 800a2fe:	4640      	mov	r0, r8
 800a300:	4798      	blx	r3
 800a302:	462e      	mov	r6, r5
 800a304:	6825      	ldr	r5, [r4, #0]
 800a306:	f015 0510 	ands.w	r5, r5, #16
 800a30a:	d159      	bne.n	800a3c0 <_scanf_float+0x414>
 800a30c:	7035      	strb	r5, [r6, #0]
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a318:	d11b      	bne.n	800a352 <_scanf_float+0x3a6>
 800a31a:	9b01      	ldr	r3, [sp, #4]
 800a31c:	454b      	cmp	r3, r9
 800a31e:	eba3 0209 	sub.w	r2, r3, r9
 800a322:	d123      	bne.n	800a36c <_scanf_float+0x3c0>
 800a324:	2200      	movs	r2, #0
 800a326:	4659      	mov	r1, fp
 800a328:	4640      	mov	r0, r8
 800a32a:	f000 ff17 	bl	800b15c <_strtod_r>
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	9b03      	ldr	r3, [sp, #12]
 800a332:	f012 0f02 	tst.w	r2, #2
 800a336:	ec57 6b10 	vmov	r6, r7, d0
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	d021      	beq.n	800a382 <_scanf_float+0x3d6>
 800a33e:	9903      	ldr	r1, [sp, #12]
 800a340:	1d1a      	adds	r2, r3, #4
 800a342:	600a      	str	r2, [r1, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	e9c3 6700 	strd	r6, r7, [r3]
 800a34a:	68e3      	ldr	r3, [r4, #12]
 800a34c:	3301      	adds	r3, #1
 800a34e:	60e3      	str	r3, [r4, #12]
 800a350:	e66d      	b.n	800a02e <_scanf_float+0x82>
 800a352:	9b04      	ldr	r3, [sp, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0e5      	beq.n	800a324 <_scanf_float+0x378>
 800a358:	9905      	ldr	r1, [sp, #20]
 800a35a:	230a      	movs	r3, #10
 800a35c:	462a      	mov	r2, r5
 800a35e:	3101      	adds	r1, #1
 800a360:	4640      	mov	r0, r8
 800a362:	f000 ff83 	bl	800b26c <_strtol_r>
 800a366:	9b04      	ldr	r3, [sp, #16]
 800a368:	9e05      	ldr	r6, [sp, #20]
 800a36a:	1ac2      	subs	r2, r0, r3
 800a36c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a370:	429e      	cmp	r6, r3
 800a372:	bf28      	it	cs
 800a374:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a378:	4912      	ldr	r1, [pc, #72]	; (800a3c4 <_scanf_float+0x418>)
 800a37a:	4630      	mov	r0, r6
 800a37c:	f000 f82c 	bl	800a3d8 <siprintf>
 800a380:	e7d0      	b.n	800a324 <_scanf_float+0x378>
 800a382:	9903      	ldr	r1, [sp, #12]
 800a384:	f012 0f04 	tst.w	r2, #4
 800a388:	f103 0204 	add.w	r2, r3, #4
 800a38c:	600a      	str	r2, [r1, #0]
 800a38e:	d1d9      	bne.n	800a344 <_scanf_float+0x398>
 800a390:	f8d3 8000 	ldr.w	r8, [r3]
 800a394:	ee10 2a10 	vmov	r2, s0
 800a398:	ee10 0a10 	vmov	r0, s0
 800a39c:	463b      	mov	r3, r7
 800a39e:	4639      	mov	r1, r7
 800a3a0:	f7f6 fbe4 	bl	8000b6c <__aeabi_dcmpun>
 800a3a4:	b128      	cbz	r0, 800a3b2 <_scanf_float+0x406>
 800a3a6:	4808      	ldr	r0, [pc, #32]	; (800a3c8 <_scanf_float+0x41c>)
 800a3a8:	f000 f810 	bl	800a3cc <nanf>
 800a3ac:	ed88 0a00 	vstr	s0, [r8]
 800a3b0:	e7cb      	b.n	800a34a <_scanf_float+0x39e>
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f6 fc0f 	bl	8000bd8 <__aeabi_d2f>
 800a3ba:	f8c8 0000 	str.w	r0, [r8]
 800a3be:	e7c4      	b.n	800a34a <_scanf_float+0x39e>
 800a3c0:	2500      	movs	r5, #0
 800a3c2:	e634      	b.n	800a02e <_scanf_float+0x82>
 800a3c4:	0800e084 	.word	0x0800e084
 800a3c8:	0800e46d 	.word	0x0800e46d

0800a3cc <nanf>:
 800a3cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a3d4 <nanf+0x8>
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	7fc00000 	.word	0x7fc00000

0800a3d8 <siprintf>:
 800a3d8:	b40e      	push	{r1, r2, r3}
 800a3da:	b500      	push	{lr}
 800a3dc:	b09c      	sub	sp, #112	; 0x70
 800a3de:	ab1d      	add	r3, sp, #116	; 0x74
 800a3e0:	9002      	str	r0, [sp, #8]
 800a3e2:	9006      	str	r0, [sp, #24]
 800a3e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3e8:	4809      	ldr	r0, [pc, #36]	; (800a410 <siprintf+0x38>)
 800a3ea:	9107      	str	r1, [sp, #28]
 800a3ec:	9104      	str	r1, [sp, #16]
 800a3ee:	4909      	ldr	r1, [pc, #36]	; (800a414 <siprintf+0x3c>)
 800a3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f4:	9105      	str	r1, [sp, #20]
 800a3f6:	6800      	ldr	r0, [r0, #0]
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	a902      	add	r1, sp, #8
 800a3fc:	f002 f8b6 	bl	800c56c <_svfiprintf_r>
 800a400:	9b02      	ldr	r3, [sp, #8]
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	b01c      	add	sp, #112	; 0x70
 800a408:	f85d eb04 	ldr.w	lr, [sp], #4
 800a40c:	b003      	add	sp, #12
 800a40e:	4770      	bx	lr
 800a410:	2000010c 	.word	0x2000010c
 800a414:	ffff0208 	.word	0xffff0208

0800a418 <siscanf>:
 800a418:	b40e      	push	{r1, r2, r3}
 800a41a:	b510      	push	{r4, lr}
 800a41c:	b09f      	sub	sp, #124	; 0x7c
 800a41e:	ac21      	add	r4, sp, #132	; 0x84
 800a420:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a424:	f854 2b04 	ldr.w	r2, [r4], #4
 800a428:	9201      	str	r2, [sp, #4]
 800a42a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a42e:	9004      	str	r0, [sp, #16]
 800a430:	9008      	str	r0, [sp, #32]
 800a432:	f7f5 feed 	bl	8000210 <strlen>
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <siscanf+0x50>)
 800a438:	9005      	str	r0, [sp, #20]
 800a43a:	9009      	str	r0, [sp, #36]	; 0x24
 800a43c:	930d      	str	r3, [sp, #52]	; 0x34
 800a43e:	480b      	ldr	r0, [pc, #44]	; (800a46c <siscanf+0x54>)
 800a440:	9a01      	ldr	r2, [sp, #4]
 800a442:	6800      	ldr	r0, [r0, #0]
 800a444:	9403      	str	r4, [sp, #12]
 800a446:	2300      	movs	r3, #0
 800a448:	9311      	str	r3, [sp, #68]	; 0x44
 800a44a:	9316      	str	r3, [sp, #88]	; 0x58
 800a44c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a450:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a454:	a904      	add	r1, sp, #16
 800a456:	4623      	mov	r3, r4
 800a458:	f002 f9e2 	bl	800c820 <__ssvfiscanf_r>
 800a45c:	b01f      	add	sp, #124	; 0x7c
 800a45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a462:	b003      	add	sp, #12
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	0800a493 	.word	0x0800a493
 800a46c:	2000010c 	.word	0x2000010c

0800a470 <__sread>:
 800a470:	b510      	push	{r4, lr}
 800a472:	460c      	mov	r4, r1
 800a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a478:	f002 fe30 	bl	800d0dc <_read_r>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	bfab      	itete	ge
 800a480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a482:	89a3      	ldrhlt	r3, [r4, #12]
 800a484:	181b      	addge	r3, r3, r0
 800a486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a48a:	bfac      	ite	ge
 800a48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a48e:	81a3      	strhlt	r3, [r4, #12]
 800a490:	bd10      	pop	{r4, pc}

0800a492 <__seofread>:
 800a492:	2000      	movs	r0, #0
 800a494:	4770      	bx	lr

0800a496 <__swrite>:
 800a496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49a:	461f      	mov	r7, r3
 800a49c:	898b      	ldrh	r3, [r1, #12]
 800a49e:	05db      	lsls	r3, r3, #23
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	4616      	mov	r6, r2
 800a4a6:	d505      	bpl.n	800a4b4 <__swrite+0x1e>
 800a4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f001 fa70 	bl	800b994 <_lseek_r>
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4be:	81a3      	strh	r3, [r4, #12]
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ca:	f000 bed1 	b.w	800b270 <_write_r>

0800a4ce <__sseek>:
 800a4ce:	b510      	push	{r4, lr}
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d6:	f001 fa5d 	bl	800b994 <_lseek_r>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	bf15      	itete	ne
 800a4e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4ea:	81a3      	strheq	r3, [r4, #12]
 800a4ec:	bf18      	it	ne
 800a4ee:	81a3      	strhne	r3, [r4, #12]
 800a4f0:	bd10      	pop	{r4, pc}

0800a4f2 <__sclose>:
 800a4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f6:	f000 becd 	b.w	800b294 <_close_r>

0800a4fa <strchr>:
 800a4fa:	b2c9      	uxtb	r1, r1
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a502:	b11a      	cbz	r2, 800a50c <strchr+0x12>
 800a504:	428a      	cmp	r2, r1
 800a506:	d1f9      	bne.n	800a4fc <strchr+0x2>
 800a508:	4618      	mov	r0, r3
 800a50a:	4770      	bx	lr
 800a50c:	2900      	cmp	r1, #0
 800a50e:	bf18      	it	ne
 800a510:	2300      	movne	r3, #0
 800a512:	e7f9      	b.n	800a508 <strchr+0xe>

0800a514 <sulp>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4604      	mov	r4, r0
 800a518:	460d      	mov	r5, r1
 800a51a:	ec45 4b10 	vmov	d0, r4, r5
 800a51e:	4616      	mov	r6, r2
 800a520:	f001 fdce 	bl	800c0c0 <__ulp>
 800a524:	ec51 0b10 	vmov	r0, r1, d0
 800a528:	b17e      	cbz	r6, 800a54a <sulp+0x36>
 800a52a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a52e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a532:	2b00      	cmp	r3, #0
 800a534:	dd09      	ble.n	800a54a <sulp+0x36>
 800a536:	051b      	lsls	r3, r3, #20
 800a538:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a53c:	2400      	movs	r4, #0
 800a53e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a542:	4622      	mov	r2, r4
 800a544:	462b      	mov	r3, r5
 800a546:	f7f6 f877 	bl	8000638 <__aeabi_dmul>
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	0000      	movs	r0, r0
	...

0800a550 <_strtod_l>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	ed2d 8b02 	vpush	{d8}
 800a558:	b09d      	sub	sp, #116	; 0x74
 800a55a:	461f      	mov	r7, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	9318      	str	r3, [sp, #96]	; 0x60
 800a560:	4ba2      	ldr	r3, [pc, #648]	; (800a7ec <_strtod_l+0x29c>)
 800a562:	9213      	str	r2, [sp, #76]	; 0x4c
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9305      	str	r3, [sp, #20]
 800a568:	4604      	mov	r4, r0
 800a56a:	4618      	mov	r0, r3
 800a56c:	4688      	mov	r8, r1
 800a56e:	f7f5 fe4f 	bl	8000210 <strlen>
 800a572:	f04f 0a00 	mov.w	sl, #0
 800a576:	4605      	mov	r5, r0
 800a578:	f04f 0b00 	mov.w	fp, #0
 800a57c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a582:	781a      	ldrb	r2, [r3, #0]
 800a584:	2a2b      	cmp	r2, #43	; 0x2b
 800a586:	d04e      	beq.n	800a626 <_strtod_l+0xd6>
 800a588:	d83b      	bhi.n	800a602 <_strtod_l+0xb2>
 800a58a:	2a0d      	cmp	r2, #13
 800a58c:	d834      	bhi.n	800a5f8 <_strtod_l+0xa8>
 800a58e:	2a08      	cmp	r2, #8
 800a590:	d834      	bhi.n	800a5fc <_strtod_l+0xac>
 800a592:	2a00      	cmp	r2, #0
 800a594:	d03e      	beq.n	800a614 <_strtod_l+0xc4>
 800a596:	2300      	movs	r3, #0
 800a598:	930a      	str	r3, [sp, #40]	; 0x28
 800a59a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a59c:	7833      	ldrb	r3, [r6, #0]
 800a59e:	2b30      	cmp	r3, #48	; 0x30
 800a5a0:	f040 80b0 	bne.w	800a704 <_strtod_l+0x1b4>
 800a5a4:	7873      	ldrb	r3, [r6, #1]
 800a5a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5aa:	2b58      	cmp	r3, #88	; 0x58
 800a5ac:	d168      	bne.n	800a680 <_strtod_l+0x130>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	ab18      	add	r3, sp, #96	; 0x60
 800a5b4:	9702      	str	r7, [sp, #8]
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	4a8d      	ldr	r2, [pc, #564]	; (800a7f0 <_strtod_l+0x2a0>)
 800a5ba:	ab19      	add	r3, sp, #100	; 0x64
 800a5bc:	a917      	add	r1, sp, #92	; 0x5c
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 fee0 	bl	800b384 <__gethex>
 800a5c4:	f010 0707 	ands.w	r7, r0, #7
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	d005      	beq.n	800a5d8 <_strtod_l+0x88>
 800a5cc:	2f06      	cmp	r7, #6
 800a5ce:	d12c      	bne.n	800a62a <_strtod_l+0xda>
 800a5d0:	3601      	adds	r6, #1
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f040 8590 	bne.w	800b100 <_strtod_l+0xbb0>
 800a5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e2:	b1eb      	cbz	r3, 800a620 <_strtod_l+0xd0>
 800a5e4:	4652      	mov	r2, sl
 800a5e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5ea:	ec43 2b10 	vmov	d0, r2, r3
 800a5ee:	b01d      	add	sp, #116	; 0x74
 800a5f0:	ecbd 8b02 	vpop	{d8}
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	2a20      	cmp	r2, #32
 800a5fa:	d1cc      	bne.n	800a596 <_strtod_l+0x46>
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800a600:	e7be      	b.n	800a580 <_strtod_l+0x30>
 800a602:	2a2d      	cmp	r2, #45	; 0x2d
 800a604:	d1c7      	bne.n	800a596 <_strtod_l+0x46>
 800a606:	2201      	movs	r2, #1
 800a608:	920a      	str	r2, [sp, #40]	; 0x28
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1c2      	bne.n	800a59a <_strtod_l+0x4a>
 800a614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a616:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f040 856e 	bne.w	800b0fc <_strtod_l+0xbac>
 800a620:	4652      	mov	r2, sl
 800a622:	465b      	mov	r3, fp
 800a624:	e7e1      	b.n	800a5ea <_strtod_l+0x9a>
 800a626:	2200      	movs	r2, #0
 800a628:	e7ee      	b.n	800a608 <_strtod_l+0xb8>
 800a62a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a62c:	b13a      	cbz	r2, 800a63e <_strtod_l+0xee>
 800a62e:	2135      	movs	r1, #53	; 0x35
 800a630:	a81a      	add	r0, sp, #104	; 0x68
 800a632:	f001 fe50 	bl	800c2d6 <__copybits>
 800a636:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a638:	4620      	mov	r0, r4
 800a63a:	f001 fa0f 	bl	800ba5c <_Bfree>
 800a63e:	3f01      	subs	r7, #1
 800a640:	2f04      	cmp	r7, #4
 800a642:	d806      	bhi.n	800a652 <_strtod_l+0x102>
 800a644:	e8df f007 	tbb	[pc, r7]
 800a648:	1714030a 	.word	0x1714030a
 800a64c:	0a          	.byte	0x0a
 800a64d:	00          	.byte	0x00
 800a64e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a652:	0728      	lsls	r0, r5, #28
 800a654:	d5c0      	bpl.n	800a5d8 <_strtod_l+0x88>
 800a656:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a65a:	e7bd      	b.n	800a5d8 <_strtod_l+0x88>
 800a65c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a660:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a666:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a66a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a66e:	e7f0      	b.n	800a652 <_strtod_l+0x102>
 800a670:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a7f4 <_strtod_l+0x2a4>
 800a674:	e7ed      	b.n	800a652 <_strtod_l+0x102>
 800a676:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a67a:	f04f 3aff 	mov.w	sl, #4294967295
 800a67e:	e7e8      	b.n	800a652 <_strtod_l+0x102>
 800a680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	9217      	str	r2, [sp, #92]	; 0x5c
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	2b30      	cmp	r3, #48	; 0x30
 800a68a:	d0f9      	beq.n	800a680 <_strtod_l+0x130>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0a3      	beq.n	800a5d8 <_strtod_l+0x88>
 800a690:	2301      	movs	r3, #1
 800a692:	f04f 0900 	mov.w	r9, #0
 800a696:	9304      	str	r3, [sp, #16]
 800a698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a69a:	9308      	str	r3, [sp, #32]
 800a69c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a6a0:	464f      	mov	r7, r9
 800a6a2:	220a      	movs	r2, #10
 800a6a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a6a6:	7806      	ldrb	r6, [r0, #0]
 800a6a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6ac:	b2d9      	uxtb	r1, r3
 800a6ae:	2909      	cmp	r1, #9
 800a6b0:	d92a      	bls.n	800a708 <_strtod_l+0x1b8>
 800a6b2:	9905      	ldr	r1, [sp, #20]
 800a6b4:	462a      	mov	r2, r5
 800a6b6:	f002 fd73 	bl	800d1a0 <strncmp>
 800a6ba:	b398      	cbz	r0, 800a724 <_strtod_l+0x1d4>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	4632      	mov	r2, r6
 800a6c0:	463d      	mov	r5, r7
 800a6c2:	9005      	str	r0, [sp, #20]
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2a65      	cmp	r2, #101	; 0x65
 800a6c8:	d001      	beq.n	800a6ce <_strtod_l+0x17e>
 800a6ca:	2a45      	cmp	r2, #69	; 0x45
 800a6cc:	d118      	bne.n	800a700 <_strtod_l+0x1b0>
 800a6ce:	b91d      	cbnz	r5, 800a6d8 <_strtod_l+0x188>
 800a6d0:	9a04      	ldr	r2, [sp, #16]
 800a6d2:	4302      	orrs	r2, r0
 800a6d4:	d09e      	beq.n	800a614 <_strtod_l+0xc4>
 800a6d6:	2500      	movs	r5, #0
 800a6d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a6dc:	f108 0201 	add.w	r2, r8, #1
 800a6e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a6e6:	2a2b      	cmp	r2, #43	; 0x2b
 800a6e8:	d075      	beq.n	800a7d6 <_strtod_l+0x286>
 800a6ea:	2a2d      	cmp	r2, #45	; 0x2d
 800a6ec:	d07b      	beq.n	800a7e6 <_strtod_l+0x296>
 800a6ee:	f04f 0c00 	mov.w	ip, #0
 800a6f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6f6:	2909      	cmp	r1, #9
 800a6f8:	f240 8082 	bls.w	800a800 <_strtod_l+0x2b0>
 800a6fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a700:	2600      	movs	r6, #0
 800a702:	e09d      	b.n	800a840 <_strtod_l+0x2f0>
 800a704:	2300      	movs	r3, #0
 800a706:	e7c4      	b.n	800a692 <_strtod_l+0x142>
 800a708:	2f08      	cmp	r7, #8
 800a70a:	bfd8      	it	le
 800a70c:	9907      	ldrle	r1, [sp, #28]
 800a70e:	f100 0001 	add.w	r0, r0, #1
 800a712:	bfda      	itte	le
 800a714:	fb02 3301 	mlale	r3, r2, r1, r3
 800a718:	9307      	strle	r3, [sp, #28]
 800a71a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a71e:	3701      	adds	r7, #1
 800a720:	9017      	str	r0, [sp, #92]	; 0x5c
 800a722:	e7bf      	b.n	800a6a4 <_strtod_l+0x154>
 800a724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a726:	195a      	adds	r2, r3, r5
 800a728:	9217      	str	r2, [sp, #92]	; 0x5c
 800a72a:	5d5a      	ldrb	r2, [r3, r5]
 800a72c:	2f00      	cmp	r7, #0
 800a72e:	d037      	beq.n	800a7a0 <_strtod_l+0x250>
 800a730:	9005      	str	r0, [sp, #20]
 800a732:	463d      	mov	r5, r7
 800a734:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a738:	2b09      	cmp	r3, #9
 800a73a:	d912      	bls.n	800a762 <_strtod_l+0x212>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e7c2      	b.n	800a6c6 <_strtod_l+0x176>
 800a740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	9217      	str	r2, [sp, #92]	; 0x5c
 800a746:	785a      	ldrb	r2, [r3, #1]
 800a748:	3001      	adds	r0, #1
 800a74a:	2a30      	cmp	r2, #48	; 0x30
 800a74c:	d0f8      	beq.n	800a740 <_strtod_l+0x1f0>
 800a74e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a752:	2b08      	cmp	r3, #8
 800a754:	f200 84d9 	bhi.w	800b10a <_strtod_l+0xbba>
 800a758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a75a:	9005      	str	r0, [sp, #20]
 800a75c:	2000      	movs	r0, #0
 800a75e:	9308      	str	r3, [sp, #32]
 800a760:	4605      	mov	r5, r0
 800a762:	3a30      	subs	r2, #48	; 0x30
 800a764:	f100 0301 	add.w	r3, r0, #1
 800a768:	d014      	beq.n	800a794 <_strtod_l+0x244>
 800a76a:	9905      	ldr	r1, [sp, #20]
 800a76c:	4419      	add	r1, r3
 800a76e:	9105      	str	r1, [sp, #20]
 800a770:	462b      	mov	r3, r5
 800a772:	eb00 0e05 	add.w	lr, r0, r5
 800a776:	210a      	movs	r1, #10
 800a778:	4573      	cmp	r3, lr
 800a77a:	d113      	bne.n	800a7a4 <_strtod_l+0x254>
 800a77c:	182b      	adds	r3, r5, r0
 800a77e:	2b08      	cmp	r3, #8
 800a780:	f105 0501 	add.w	r5, r5, #1
 800a784:	4405      	add	r5, r0
 800a786:	dc1c      	bgt.n	800a7c2 <_strtod_l+0x272>
 800a788:	9907      	ldr	r1, [sp, #28]
 800a78a:	230a      	movs	r3, #10
 800a78c:	fb03 2301 	mla	r3, r3, r1, r2
 800a790:	9307      	str	r3, [sp, #28]
 800a792:	2300      	movs	r3, #0
 800a794:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a796:	1c51      	adds	r1, r2, #1
 800a798:	9117      	str	r1, [sp, #92]	; 0x5c
 800a79a:	7852      	ldrb	r2, [r2, #1]
 800a79c:	4618      	mov	r0, r3
 800a79e:	e7c9      	b.n	800a734 <_strtod_l+0x1e4>
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	e7d2      	b.n	800a74a <_strtod_l+0x1fa>
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	dc04      	bgt.n	800a7b2 <_strtod_l+0x262>
 800a7a8:	9e07      	ldr	r6, [sp, #28]
 800a7aa:	434e      	muls	r6, r1
 800a7ac:	9607      	str	r6, [sp, #28]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	e7e2      	b.n	800a778 <_strtod_l+0x228>
 800a7b2:	f103 0c01 	add.w	ip, r3, #1
 800a7b6:	f1bc 0f10 	cmp.w	ip, #16
 800a7ba:	bfd8      	it	le
 800a7bc:	fb01 f909 	mulle.w	r9, r1, r9
 800a7c0:	e7f5      	b.n	800a7ae <_strtod_l+0x25e>
 800a7c2:	2d10      	cmp	r5, #16
 800a7c4:	bfdc      	itt	le
 800a7c6:	230a      	movle	r3, #10
 800a7c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800a7cc:	e7e1      	b.n	800a792 <_strtod_l+0x242>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	9305      	str	r3, [sp, #20]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e77c      	b.n	800a6d0 <_strtod_l+0x180>
 800a7d6:	f04f 0c00 	mov.w	ip, #0
 800a7da:	f108 0202 	add.w	r2, r8, #2
 800a7de:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a7e4:	e785      	b.n	800a6f2 <_strtod_l+0x1a2>
 800a7e6:	f04f 0c01 	mov.w	ip, #1
 800a7ea:	e7f6      	b.n	800a7da <_strtod_l+0x28a>
 800a7ec:	0800e260 	.word	0x0800e260
 800a7f0:	0800e098 	.word	0x0800e098
 800a7f4:	7ff00000 	.word	0x7ff00000
 800a7f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7fa:	1c51      	adds	r1, r2, #1
 800a7fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800a7fe:	7852      	ldrb	r2, [r2, #1]
 800a800:	2a30      	cmp	r2, #48	; 0x30
 800a802:	d0f9      	beq.n	800a7f8 <_strtod_l+0x2a8>
 800a804:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a808:	2908      	cmp	r1, #8
 800a80a:	f63f af79 	bhi.w	800a700 <_strtod_l+0x1b0>
 800a80e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a814:	9206      	str	r2, [sp, #24]
 800a816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a818:	1c51      	adds	r1, r2, #1
 800a81a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a81c:	7852      	ldrb	r2, [r2, #1]
 800a81e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a822:	2e09      	cmp	r6, #9
 800a824:	d937      	bls.n	800a896 <_strtod_l+0x346>
 800a826:	9e06      	ldr	r6, [sp, #24]
 800a828:	1b89      	subs	r1, r1, r6
 800a82a:	2908      	cmp	r1, #8
 800a82c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a830:	dc02      	bgt.n	800a838 <_strtod_l+0x2e8>
 800a832:	4576      	cmp	r6, lr
 800a834:	bfa8      	it	ge
 800a836:	4676      	movge	r6, lr
 800a838:	f1bc 0f00 	cmp.w	ip, #0
 800a83c:	d000      	beq.n	800a840 <_strtod_l+0x2f0>
 800a83e:	4276      	negs	r6, r6
 800a840:	2d00      	cmp	r5, #0
 800a842:	d14d      	bne.n	800a8e0 <_strtod_l+0x390>
 800a844:	9904      	ldr	r1, [sp, #16]
 800a846:	4301      	orrs	r1, r0
 800a848:	f47f aec6 	bne.w	800a5d8 <_strtod_l+0x88>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f47f aee1 	bne.w	800a614 <_strtod_l+0xc4>
 800a852:	2a69      	cmp	r2, #105	; 0x69
 800a854:	d027      	beq.n	800a8a6 <_strtod_l+0x356>
 800a856:	dc24      	bgt.n	800a8a2 <_strtod_l+0x352>
 800a858:	2a49      	cmp	r2, #73	; 0x49
 800a85a:	d024      	beq.n	800a8a6 <_strtod_l+0x356>
 800a85c:	2a4e      	cmp	r2, #78	; 0x4e
 800a85e:	f47f aed9 	bne.w	800a614 <_strtod_l+0xc4>
 800a862:	499f      	ldr	r1, [pc, #636]	; (800aae0 <_strtod_l+0x590>)
 800a864:	a817      	add	r0, sp, #92	; 0x5c
 800a866:	f000 ffe5 	bl	800b834 <__match>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f43f aed2 	beq.w	800a614 <_strtod_l+0xc4>
 800a870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b28      	cmp	r3, #40	; 0x28
 800a876:	d12d      	bne.n	800a8d4 <_strtod_l+0x384>
 800a878:	499a      	ldr	r1, [pc, #616]	; (800aae4 <_strtod_l+0x594>)
 800a87a:	aa1a      	add	r2, sp, #104	; 0x68
 800a87c:	a817      	add	r0, sp, #92	; 0x5c
 800a87e:	f000 ffed 	bl	800b85c <__hexnan>
 800a882:	2805      	cmp	r0, #5
 800a884:	d126      	bne.n	800a8d4 <_strtod_l+0x384>
 800a886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a888:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a88c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a890:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a894:	e6a0      	b.n	800a5d8 <_strtod_l+0x88>
 800a896:	210a      	movs	r1, #10
 800a898:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a89c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a8a0:	e7b9      	b.n	800a816 <_strtod_l+0x2c6>
 800a8a2:	2a6e      	cmp	r2, #110	; 0x6e
 800a8a4:	e7db      	b.n	800a85e <_strtod_l+0x30e>
 800a8a6:	4990      	ldr	r1, [pc, #576]	; (800aae8 <_strtod_l+0x598>)
 800a8a8:	a817      	add	r0, sp, #92	; 0x5c
 800a8aa:	f000 ffc3 	bl	800b834 <__match>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f aeb0 	beq.w	800a614 <_strtod_l+0xc4>
 800a8b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8b6:	498d      	ldr	r1, [pc, #564]	; (800aaec <_strtod_l+0x59c>)
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	a817      	add	r0, sp, #92	; 0x5c
 800a8bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8be:	f000 ffb9 	bl	800b834 <__match>
 800a8c2:	b910      	cbnz	r0, 800a8ca <_strtod_l+0x37a>
 800a8c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800aafc <_strtod_l+0x5ac>
 800a8ce:	f04f 0a00 	mov.w	sl, #0
 800a8d2:	e681      	b.n	800a5d8 <_strtod_l+0x88>
 800a8d4:	4886      	ldr	r0, [pc, #536]	; (800aaf0 <_strtod_l+0x5a0>)
 800a8d6:	f002 fc13 	bl	800d100 <nan>
 800a8da:	ec5b ab10 	vmov	sl, fp, d0
 800a8de:	e67b      	b.n	800a5d8 <_strtod_l+0x88>
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	9807      	ldr	r0, [sp, #28]
 800a8e4:	1af3      	subs	r3, r6, r3
 800a8e6:	2f00      	cmp	r7, #0
 800a8e8:	bf08      	it	eq
 800a8ea:	462f      	moveq	r7, r5
 800a8ec:	2d10      	cmp	r5, #16
 800a8ee:	9306      	str	r3, [sp, #24]
 800a8f0:	46a8      	mov	r8, r5
 800a8f2:	bfa8      	it	ge
 800a8f4:	f04f 0810 	movge.w	r8, #16
 800a8f8:	f7f5 fe24 	bl	8000544 <__aeabi_ui2d>
 800a8fc:	2d09      	cmp	r5, #9
 800a8fe:	4682      	mov	sl, r0
 800a900:	468b      	mov	fp, r1
 800a902:	dd13      	ble.n	800a92c <_strtod_l+0x3dc>
 800a904:	4b7b      	ldr	r3, [pc, #492]	; (800aaf4 <_strtod_l+0x5a4>)
 800a906:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a90a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a90e:	f7f5 fe93 	bl	8000638 <__aeabi_dmul>
 800a912:	4682      	mov	sl, r0
 800a914:	4648      	mov	r0, r9
 800a916:	468b      	mov	fp, r1
 800a918:	f7f5 fe14 	bl	8000544 <__aeabi_ui2d>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4650      	mov	r0, sl
 800a922:	4659      	mov	r1, fp
 800a924:	f7f5 fcd2 	bl	80002cc <__adddf3>
 800a928:	4682      	mov	sl, r0
 800a92a:	468b      	mov	fp, r1
 800a92c:	2d0f      	cmp	r5, #15
 800a92e:	dc38      	bgt.n	800a9a2 <_strtod_l+0x452>
 800a930:	9b06      	ldr	r3, [sp, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f43f ae50 	beq.w	800a5d8 <_strtod_l+0x88>
 800a938:	dd24      	ble.n	800a984 <_strtod_l+0x434>
 800a93a:	2b16      	cmp	r3, #22
 800a93c:	dc0b      	bgt.n	800a956 <_strtod_l+0x406>
 800a93e:	496d      	ldr	r1, [pc, #436]	; (800aaf4 <_strtod_l+0x5a4>)
 800a940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a944:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a948:	4652      	mov	r2, sl
 800a94a:	465b      	mov	r3, fp
 800a94c:	f7f5 fe74 	bl	8000638 <__aeabi_dmul>
 800a950:	4682      	mov	sl, r0
 800a952:	468b      	mov	fp, r1
 800a954:	e640      	b.n	800a5d8 <_strtod_l+0x88>
 800a956:	9a06      	ldr	r2, [sp, #24]
 800a958:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a95c:	4293      	cmp	r3, r2
 800a95e:	db20      	blt.n	800a9a2 <_strtod_l+0x452>
 800a960:	4c64      	ldr	r4, [pc, #400]	; (800aaf4 <_strtod_l+0x5a4>)
 800a962:	f1c5 050f 	rsb	r5, r5, #15
 800a966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a96a:	4652      	mov	r2, sl
 800a96c:	465b      	mov	r3, fp
 800a96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a972:	f7f5 fe61 	bl	8000638 <__aeabi_dmul>
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	1b5d      	subs	r5, r3, r5
 800a97a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a97e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a982:	e7e3      	b.n	800a94c <_strtod_l+0x3fc>
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	3316      	adds	r3, #22
 800a988:	db0b      	blt.n	800a9a2 <_strtod_l+0x452>
 800a98a:	9b05      	ldr	r3, [sp, #20]
 800a98c:	1b9e      	subs	r6, r3, r6
 800a98e:	4b59      	ldr	r3, [pc, #356]	; (800aaf4 <_strtod_l+0x5a4>)
 800a990:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a994:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a998:	4650      	mov	r0, sl
 800a99a:	4659      	mov	r1, fp
 800a99c:	f7f5 ff76 	bl	800088c <__aeabi_ddiv>
 800a9a0:	e7d6      	b.n	800a950 <_strtod_l+0x400>
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	eba5 0808 	sub.w	r8, r5, r8
 800a9a8:	4498      	add	r8, r3
 800a9aa:	f1b8 0f00 	cmp.w	r8, #0
 800a9ae:	dd74      	ble.n	800aa9a <_strtod_l+0x54a>
 800a9b0:	f018 030f 	ands.w	r3, r8, #15
 800a9b4:	d00a      	beq.n	800a9cc <_strtod_l+0x47c>
 800a9b6:	494f      	ldr	r1, [pc, #316]	; (800aaf4 <_strtod_l+0x5a4>)
 800a9b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9bc:	4652      	mov	r2, sl
 800a9be:	465b      	mov	r3, fp
 800a9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9c4:	f7f5 fe38 	bl	8000638 <__aeabi_dmul>
 800a9c8:	4682      	mov	sl, r0
 800a9ca:	468b      	mov	fp, r1
 800a9cc:	f038 080f 	bics.w	r8, r8, #15
 800a9d0:	d04f      	beq.n	800aa72 <_strtod_l+0x522>
 800a9d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a9d6:	dd22      	ble.n	800aa1e <_strtod_l+0x4ce>
 800a9d8:	2500      	movs	r5, #0
 800a9da:	462e      	mov	r6, r5
 800a9dc:	9507      	str	r5, [sp, #28]
 800a9de:	9505      	str	r5, [sp, #20]
 800a9e0:	2322      	movs	r3, #34	; 0x22
 800a9e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800aafc <_strtod_l+0x5ac>
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	f04f 0a00 	mov.w	sl, #0
 800a9ec:	9b07      	ldr	r3, [sp, #28]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f43f adf2 	beq.w	800a5d8 <_strtod_l+0x88>
 800a9f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f001 f830 	bl	800ba5c <_Bfree>
 800a9fc:	9905      	ldr	r1, [sp, #20]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f001 f82c 	bl	800ba5c <_Bfree>
 800aa04:	4631      	mov	r1, r6
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 f828 	bl	800ba5c <_Bfree>
 800aa0c:	9907      	ldr	r1, [sp, #28]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f001 f824 	bl	800ba5c <_Bfree>
 800aa14:	4629      	mov	r1, r5
 800aa16:	4620      	mov	r0, r4
 800aa18:	f001 f820 	bl	800ba5c <_Bfree>
 800aa1c:	e5dc      	b.n	800a5d8 <_strtod_l+0x88>
 800aa1e:	4b36      	ldr	r3, [pc, #216]	; (800aaf8 <_strtod_l+0x5a8>)
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	2300      	movs	r3, #0
 800aa24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aa28:	4650      	mov	r0, sl
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	4699      	mov	r9, r3
 800aa2e:	f1b8 0f01 	cmp.w	r8, #1
 800aa32:	dc21      	bgt.n	800aa78 <_strtod_l+0x528>
 800aa34:	b10b      	cbz	r3, 800aa3a <_strtod_l+0x4ea>
 800aa36:	4682      	mov	sl, r0
 800aa38:	468b      	mov	fp, r1
 800aa3a:	4b2f      	ldr	r3, [pc, #188]	; (800aaf8 <_strtod_l+0x5a8>)
 800aa3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aa40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aa44:	4652      	mov	r2, sl
 800aa46:	465b      	mov	r3, fp
 800aa48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa4c:	f7f5 fdf4 	bl	8000638 <__aeabi_dmul>
 800aa50:	4b2a      	ldr	r3, [pc, #168]	; (800aafc <_strtod_l+0x5ac>)
 800aa52:	460a      	mov	r2, r1
 800aa54:	400b      	ands	r3, r1
 800aa56:	492a      	ldr	r1, [pc, #168]	; (800ab00 <_strtod_l+0x5b0>)
 800aa58:	428b      	cmp	r3, r1
 800aa5a:	4682      	mov	sl, r0
 800aa5c:	d8bc      	bhi.n	800a9d8 <_strtod_l+0x488>
 800aa5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa62:	428b      	cmp	r3, r1
 800aa64:	bf86      	itte	hi
 800aa66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ab04 <_strtod_l+0x5b4>
 800aa6a:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa72:	2300      	movs	r3, #0
 800aa74:	9304      	str	r3, [sp, #16]
 800aa76:	e084      	b.n	800ab82 <_strtod_l+0x632>
 800aa78:	f018 0f01 	tst.w	r8, #1
 800aa7c:	d005      	beq.n	800aa8a <_strtod_l+0x53a>
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	f7f5 fdd8 	bl	8000638 <__aeabi_dmul>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	9a04      	ldr	r2, [sp, #16]
 800aa8c:	3208      	adds	r2, #8
 800aa8e:	f109 0901 	add.w	r9, r9, #1
 800aa92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa96:	9204      	str	r2, [sp, #16]
 800aa98:	e7c9      	b.n	800aa2e <_strtod_l+0x4de>
 800aa9a:	d0ea      	beq.n	800aa72 <_strtod_l+0x522>
 800aa9c:	f1c8 0800 	rsb	r8, r8, #0
 800aaa0:	f018 020f 	ands.w	r2, r8, #15
 800aaa4:	d00a      	beq.n	800aabc <_strtod_l+0x56c>
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <_strtod_l+0x5a4>)
 800aaa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaac:	4650      	mov	r0, sl
 800aaae:	4659      	mov	r1, fp
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f7f5 feea 	bl	800088c <__aeabi_ddiv>
 800aab8:	4682      	mov	sl, r0
 800aaba:	468b      	mov	fp, r1
 800aabc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aac0:	d0d7      	beq.n	800aa72 <_strtod_l+0x522>
 800aac2:	f1b8 0f1f 	cmp.w	r8, #31
 800aac6:	dd1f      	ble.n	800ab08 <_strtod_l+0x5b8>
 800aac8:	2500      	movs	r5, #0
 800aaca:	462e      	mov	r6, r5
 800aacc:	9507      	str	r5, [sp, #28]
 800aace:	9505      	str	r5, [sp, #20]
 800aad0:	2322      	movs	r3, #34	; 0x22
 800aad2:	f04f 0a00 	mov.w	sl, #0
 800aad6:	f04f 0b00 	mov.w	fp, #0
 800aada:	6023      	str	r3, [r4, #0]
 800aadc:	e786      	b.n	800a9ec <_strtod_l+0x49c>
 800aade:	bf00      	nop
 800aae0:	0800e092 	.word	0x0800e092
 800aae4:	0800e0ac 	.word	0x0800e0ac
 800aae8:	0800e089 	.word	0x0800e089
 800aaec:	0800e08c 	.word	0x0800e08c
 800aaf0:	0800e46d 	.word	0x0800e46d
 800aaf4:	0800e310 	.word	0x0800e310
 800aaf8:	0800e2e8 	.word	0x0800e2e8
 800aafc:	7ff00000 	.word	0x7ff00000
 800ab00:	7ca00000 	.word	0x7ca00000
 800ab04:	7fefffff 	.word	0x7fefffff
 800ab08:	f018 0310 	ands.w	r3, r8, #16
 800ab0c:	bf18      	it	ne
 800ab0e:	236a      	movne	r3, #106	; 0x6a
 800ab10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800aec0 <_strtod_l+0x970>
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	4650      	mov	r0, sl
 800ab18:	4659      	mov	r1, fp
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f018 0f01 	tst.w	r8, #1
 800ab20:	d004      	beq.n	800ab2c <_strtod_l+0x5dc>
 800ab22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab26:	f7f5 fd87 	bl	8000638 <__aeabi_dmul>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ab30:	f109 0908 	add.w	r9, r9, #8
 800ab34:	d1f2      	bne.n	800ab1c <_strtod_l+0x5cc>
 800ab36:	b10b      	cbz	r3, 800ab3c <_strtod_l+0x5ec>
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	b1c3      	cbz	r3, 800ab72 <_strtod_l+0x622>
 800ab40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ab44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	4659      	mov	r1, fp
 800ab4c:	dd11      	ble.n	800ab72 <_strtod_l+0x622>
 800ab4e:	2b1f      	cmp	r3, #31
 800ab50:	f340 8124 	ble.w	800ad9c <_strtod_l+0x84c>
 800ab54:	2b34      	cmp	r3, #52	; 0x34
 800ab56:	bfde      	ittt	le
 800ab58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ab5c:	f04f 33ff 	movle.w	r3, #4294967295
 800ab60:	fa03 f202 	lslle.w	r2, r3, r2
 800ab64:	f04f 0a00 	mov.w	sl, #0
 800ab68:	bfcc      	ite	gt
 800ab6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab6e:	ea02 0b01 	andle.w	fp, r2, r1
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	4650      	mov	r0, sl
 800ab78:	4659      	mov	r1, fp
 800ab7a:	f7f5 ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d1a2      	bne.n	800aac8 <_strtod_l+0x578>
 800ab82:	9b07      	ldr	r3, [sp, #28]
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	9908      	ldr	r1, [sp, #32]
 800ab88:	462b      	mov	r3, r5
 800ab8a:	463a      	mov	r2, r7
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 ffcd 	bl	800bb2c <__s2b>
 800ab92:	9007      	str	r0, [sp, #28]
 800ab94:	2800      	cmp	r0, #0
 800ab96:	f43f af1f 	beq.w	800a9d8 <_strtod_l+0x488>
 800ab9a:	9b05      	ldr	r3, [sp, #20]
 800ab9c:	1b9e      	subs	r6, r3, r6
 800ab9e:	9b06      	ldr	r3, [sp, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfb4      	ite	lt
 800aba4:	4633      	movlt	r3, r6
 800aba6:	2300      	movge	r3, #0
 800aba8:	930c      	str	r3, [sp, #48]	; 0x30
 800abaa:	9b06      	ldr	r3, [sp, #24]
 800abac:	2500      	movs	r5, #0
 800abae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abb2:	9312      	str	r3, [sp, #72]	; 0x48
 800abb4:	462e      	mov	r6, r5
 800abb6:	9b07      	ldr	r3, [sp, #28]
 800abb8:	4620      	mov	r0, r4
 800abba:	6859      	ldr	r1, [r3, #4]
 800abbc:	f000 ff0e 	bl	800b9dc <_Balloc>
 800abc0:	9005      	str	r0, [sp, #20]
 800abc2:	2800      	cmp	r0, #0
 800abc4:	f43f af0c 	beq.w	800a9e0 <_strtod_l+0x490>
 800abc8:	9b07      	ldr	r3, [sp, #28]
 800abca:	691a      	ldr	r2, [r3, #16]
 800abcc:	3202      	adds	r2, #2
 800abce:	f103 010c 	add.w	r1, r3, #12
 800abd2:	0092      	lsls	r2, r2, #2
 800abd4:	300c      	adds	r0, #12
 800abd6:	f7ff f9d3 	bl	8009f80 <memcpy>
 800abda:	ec4b ab10 	vmov	d0, sl, fp
 800abde:	aa1a      	add	r2, sp, #104	; 0x68
 800abe0:	a919      	add	r1, sp, #100	; 0x64
 800abe2:	4620      	mov	r0, r4
 800abe4:	f001 fae8 	bl	800c1b8 <__d2b>
 800abe8:	ec4b ab18 	vmov	d8, sl, fp
 800abec:	9018      	str	r0, [sp, #96]	; 0x60
 800abee:	2800      	cmp	r0, #0
 800abf0:	f43f aef6 	beq.w	800a9e0 <_strtod_l+0x490>
 800abf4:	2101      	movs	r1, #1
 800abf6:	4620      	mov	r0, r4
 800abf8:	f001 f832 	bl	800bc60 <__i2b>
 800abfc:	4606      	mov	r6, r0
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f43f aeee 	beq.w	800a9e0 <_strtod_l+0x490>
 800ac04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac06:	9904      	ldr	r1, [sp, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfab      	itete	ge
 800ac0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ac0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ac10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ac12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ac16:	bfac      	ite	ge
 800ac18:	eb03 0902 	addge.w	r9, r3, r2
 800ac1c:	1ad7      	sublt	r7, r2, r3
 800ac1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac20:	eba3 0801 	sub.w	r8, r3, r1
 800ac24:	4490      	add	r8, r2
 800ac26:	4ba1      	ldr	r3, [pc, #644]	; (800aeac <_strtod_l+0x95c>)
 800ac28:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac2c:	4598      	cmp	r8, r3
 800ac2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac32:	f280 80c7 	bge.w	800adc4 <_strtod_l+0x874>
 800ac36:	eba3 0308 	sub.w	r3, r3, r8
 800ac3a:	2b1f      	cmp	r3, #31
 800ac3c:	eba2 0203 	sub.w	r2, r2, r3
 800ac40:	f04f 0101 	mov.w	r1, #1
 800ac44:	f300 80b1 	bgt.w	800adaa <_strtod_l+0x85a>
 800ac48:	fa01 f303 	lsl.w	r3, r1, r3
 800ac4c:	930d      	str	r3, [sp, #52]	; 0x34
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9308      	str	r3, [sp, #32]
 800ac52:	eb09 0802 	add.w	r8, r9, r2
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	45c1      	cmp	r9, r8
 800ac5a:	4417      	add	r7, r2
 800ac5c:	441f      	add	r7, r3
 800ac5e:	464b      	mov	r3, r9
 800ac60:	bfa8      	it	ge
 800ac62:	4643      	movge	r3, r8
 800ac64:	42bb      	cmp	r3, r7
 800ac66:	bfa8      	it	ge
 800ac68:	463b      	movge	r3, r7
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	bfc2      	ittt	gt
 800ac6e:	eba8 0803 	subgt.w	r8, r8, r3
 800ac72:	1aff      	subgt	r7, r7, r3
 800ac74:	eba9 0903 	subgt.w	r9, r9, r3
 800ac78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dd17      	ble.n	800acae <_strtod_l+0x75e>
 800ac7e:	4631      	mov	r1, r6
 800ac80:	461a      	mov	r2, r3
 800ac82:	4620      	mov	r0, r4
 800ac84:	f001 f8ac 	bl	800bde0 <__pow5mult>
 800ac88:	4606      	mov	r6, r0
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f43f aea8 	beq.w	800a9e0 <_strtod_l+0x490>
 800ac90:	4601      	mov	r1, r0
 800ac92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fff9 	bl	800bc8c <__multiply>
 800ac9a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f43f ae9f 	beq.w	800a9e0 <_strtod_l+0x490>
 800aca2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 fed9 	bl	800ba5c <_Bfree>
 800acaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acac:	9318      	str	r3, [sp, #96]	; 0x60
 800acae:	f1b8 0f00 	cmp.w	r8, #0
 800acb2:	f300 808c 	bgt.w	800adce <_strtod_l+0x87e>
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	dd08      	ble.n	800acce <_strtod_l+0x77e>
 800acbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acbe:	9905      	ldr	r1, [sp, #20]
 800acc0:	4620      	mov	r0, r4
 800acc2:	f001 f88d 	bl	800bde0 <__pow5mult>
 800acc6:	9005      	str	r0, [sp, #20]
 800acc8:	2800      	cmp	r0, #0
 800acca:	f43f ae89 	beq.w	800a9e0 <_strtod_l+0x490>
 800acce:	2f00      	cmp	r7, #0
 800acd0:	dd08      	ble.n	800ace4 <_strtod_l+0x794>
 800acd2:	9905      	ldr	r1, [sp, #20]
 800acd4:	463a      	mov	r2, r7
 800acd6:	4620      	mov	r0, r4
 800acd8:	f001 f8dc 	bl	800be94 <__lshift>
 800acdc:	9005      	str	r0, [sp, #20]
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f ae7e 	beq.w	800a9e0 <_strtod_l+0x490>
 800ace4:	f1b9 0f00 	cmp.w	r9, #0
 800ace8:	dd08      	ble.n	800acfc <_strtod_l+0x7ac>
 800acea:	4631      	mov	r1, r6
 800acec:	464a      	mov	r2, r9
 800acee:	4620      	mov	r0, r4
 800acf0:	f001 f8d0 	bl	800be94 <__lshift>
 800acf4:	4606      	mov	r6, r0
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f43f ae72 	beq.w	800a9e0 <_strtod_l+0x490>
 800acfc:	9a05      	ldr	r2, [sp, #20]
 800acfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad00:	4620      	mov	r0, r4
 800ad02:	f001 f953 	bl	800bfac <__mdiff>
 800ad06:	4605      	mov	r5, r0
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f43f ae69 	beq.w	800a9e0 <_strtod_l+0x490>
 800ad0e:	68c3      	ldr	r3, [r0, #12]
 800ad10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad12:	2300      	movs	r3, #0
 800ad14:	60c3      	str	r3, [r0, #12]
 800ad16:	4631      	mov	r1, r6
 800ad18:	f001 f92c 	bl	800bf74 <__mcmp>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	da60      	bge.n	800ade2 <_strtod_l+0x892>
 800ad20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad22:	ea53 030a 	orrs.w	r3, r3, sl
 800ad26:	f040 8082 	bne.w	800ae2e <_strtod_l+0x8de>
 800ad2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d17d      	bne.n	800ae2e <_strtod_l+0x8de>
 800ad32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad36:	0d1b      	lsrs	r3, r3, #20
 800ad38:	051b      	lsls	r3, r3, #20
 800ad3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad3e:	d976      	bls.n	800ae2e <_strtod_l+0x8de>
 800ad40:	696b      	ldr	r3, [r5, #20]
 800ad42:	b913      	cbnz	r3, 800ad4a <_strtod_l+0x7fa>
 800ad44:	692b      	ldr	r3, [r5, #16]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	dd71      	ble.n	800ae2e <_strtod_l+0x8de>
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f001 f8a0 	bl	800be94 <__lshift>
 800ad54:	4631      	mov	r1, r6
 800ad56:	4605      	mov	r5, r0
 800ad58:	f001 f90c 	bl	800bf74 <__mcmp>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	dd66      	ble.n	800ae2e <_strtod_l+0x8de>
 800ad60:	9904      	ldr	r1, [sp, #16]
 800ad62:	4a53      	ldr	r2, [pc, #332]	; (800aeb0 <_strtod_l+0x960>)
 800ad64:	465b      	mov	r3, fp
 800ad66:	2900      	cmp	r1, #0
 800ad68:	f000 8081 	beq.w	800ae6e <_strtod_l+0x91e>
 800ad6c:	ea02 010b 	and.w	r1, r2, fp
 800ad70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad74:	dc7b      	bgt.n	800ae6e <_strtod_l+0x91e>
 800ad76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad7a:	f77f aea9 	ble.w	800aad0 <_strtod_l+0x580>
 800ad7e:	4b4d      	ldr	r3, [pc, #308]	; (800aeb4 <_strtod_l+0x964>)
 800ad80:	4650      	mov	r0, sl
 800ad82:	4659      	mov	r1, fp
 800ad84:	2200      	movs	r2, #0
 800ad86:	f7f5 fc57 	bl	8000638 <__aeabi_dmul>
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4303      	orrs	r3, r0
 800ad8e:	bf08      	it	eq
 800ad90:	2322      	moveq	r3, #34	; 0x22
 800ad92:	4682      	mov	sl, r0
 800ad94:	468b      	mov	fp, r1
 800ad96:	bf08      	it	eq
 800ad98:	6023      	streq	r3, [r4, #0]
 800ad9a:	e62b      	b.n	800a9f4 <_strtod_l+0x4a4>
 800ad9c:	f04f 32ff 	mov.w	r2, #4294967295
 800ada0:	fa02 f303 	lsl.w	r3, r2, r3
 800ada4:	ea03 0a0a 	and.w	sl, r3, sl
 800ada8:	e6e3      	b.n	800ab72 <_strtod_l+0x622>
 800adaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800adae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800adb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800adb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800adba:	fa01 f308 	lsl.w	r3, r1, r8
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	910d      	str	r1, [sp, #52]	; 0x34
 800adc2:	e746      	b.n	800ac52 <_strtod_l+0x702>
 800adc4:	2300      	movs	r3, #0
 800adc6:	9308      	str	r3, [sp, #32]
 800adc8:	2301      	movs	r3, #1
 800adca:	930d      	str	r3, [sp, #52]	; 0x34
 800adcc:	e741      	b.n	800ac52 <_strtod_l+0x702>
 800adce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800add0:	4642      	mov	r2, r8
 800add2:	4620      	mov	r0, r4
 800add4:	f001 f85e 	bl	800be94 <__lshift>
 800add8:	9018      	str	r0, [sp, #96]	; 0x60
 800adda:	2800      	cmp	r0, #0
 800addc:	f47f af6b 	bne.w	800acb6 <_strtod_l+0x766>
 800ade0:	e5fe      	b.n	800a9e0 <_strtod_l+0x490>
 800ade2:	465f      	mov	r7, fp
 800ade4:	d16e      	bne.n	800aec4 <_strtod_l+0x974>
 800ade6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ade8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adec:	b342      	cbz	r2, 800ae40 <_strtod_l+0x8f0>
 800adee:	4a32      	ldr	r2, [pc, #200]	; (800aeb8 <_strtod_l+0x968>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d128      	bne.n	800ae46 <_strtod_l+0x8f6>
 800adf4:	9b04      	ldr	r3, [sp, #16]
 800adf6:	4651      	mov	r1, sl
 800adf8:	b1eb      	cbz	r3, 800ae36 <_strtod_l+0x8e6>
 800adfa:	4b2d      	ldr	r3, [pc, #180]	; (800aeb0 <_strtod_l+0x960>)
 800adfc:	403b      	ands	r3, r7
 800adfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae02:	f04f 32ff 	mov.w	r2, #4294967295
 800ae06:	d819      	bhi.n	800ae3c <_strtod_l+0x8ec>
 800ae08:	0d1b      	lsrs	r3, r3, #20
 800ae0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae12:	4299      	cmp	r1, r3
 800ae14:	d117      	bne.n	800ae46 <_strtod_l+0x8f6>
 800ae16:	4b29      	ldr	r3, [pc, #164]	; (800aebc <_strtod_l+0x96c>)
 800ae18:	429f      	cmp	r7, r3
 800ae1a:	d102      	bne.n	800ae22 <_strtod_l+0x8d2>
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	f43f addf 	beq.w	800a9e0 <_strtod_l+0x490>
 800ae22:	4b23      	ldr	r3, [pc, #140]	; (800aeb0 <_strtod_l+0x960>)
 800ae24:	403b      	ands	r3, r7
 800ae26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae2a:	f04f 0a00 	mov.w	sl, #0
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1a4      	bne.n	800ad7e <_strtod_l+0x82e>
 800ae34:	e5de      	b.n	800a9f4 <_strtod_l+0x4a4>
 800ae36:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3a:	e7ea      	b.n	800ae12 <_strtod_l+0x8c2>
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	e7e8      	b.n	800ae12 <_strtod_l+0x8c2>
 800ae40:	ea53 030a 	orrs.w	r3, r3, sl
 800ae44:	d08c      	beq.n	800ad60 <_strtod_l+0x810>
 800ae46:	9b08      	ldr	r3, [sp, #32]
 800ae48:	b1db      	cbz	r3, 800ae82 <_strtod_l+0x932>
 800ae4a:	423b      	tst	r3, r7
 800ae4c:	d0ef      	beq.n	800ae2e <_strtod_l+0x8de>
 800ae4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	4650      	mov	r0, sl
 800ae54:	4659      	mov	r1, fp
 800ae56:	b1c3      	cbz	r3, 800ae8a <_strtod_l+0x93a>
 800ae58:	f7ff fb5c 	bl	800a514 <sulp>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	ec51 0b18 	vmov	r0, r1, d8
 800ae64:	f7f5 fa32 	bl	80002cc <__adddf3>
 800ae68:	4682      	mov	sl, r0
 800ae6a:	468b      	mov	fp, r1
 800ae6c:	e7df      	b.n	800ae2e <_strtod_l+0x8de>
 800ae6e:	4013      	ands	r3, r2
 800ae70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ae80:	e7d5      	b.n	800ae2e <_strtod_l+0x8de>
 800ae82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae84:	ea13 0f0a 	tst.w	r3, sl
 800ae88:	e7e0      	b.n	800ae4c <_strtod_l+0x8fc>
 800ae8a:	f7ff fb43 	bl	800a514 <sulp>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	ec51 0b18 	vmov	r0, r1, d8
 800ae96:	f7f5 fa17 	bl	80002c8 <__aeabi_dsub>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4682      	mov	sl, r0
 800aea0:	468b      	mov	fp, r1
 800aea2:	f7f5 fe31 	bl	8000b08 <__aeabi_dcmpeq>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d0c1      	beq.n	800ae2e <_strtod_l+0x8de>
 800aeaa:	e611      	b.n	800aad0 <_strtod_l+0x580>
 800aeac:	fffffc02 	.word	0xfffffc02
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	39500000 	.word	0x39500000
 800aeb8:	000fffff 	.word	0x000fffff
 800aebc:	7fefffff 	.word	0x7fefffff
 800aec0:	0800e0c0 	.word	0x0800e0c0
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	f001 f9d2 	bl	800c270 <__ratio>
 800aecc:	ec59 8b10 	vmov	r8, r9, d0
 800aed0:	ee10 0a10 	vmov	r0, s0
 800aed4:	2200      	movs	r2, #0
 800aed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7f5 fe28 	bl	8000b30 <__aeabi_dcmple>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d07a      	beq.n	800afda <_strtod_l+0xa8a>
 800aee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d04a      	beq.n	800af80 <_strtod_l+0xa30>
 800aeea:	4b95      	ldr	r3, [pc, #596]	; (800b140 <_strtod_l+0xbf0>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aef2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b140 <_strtod_l+0xbf0>
 800aef6:	f04f 0800 	mov.w	r8, #0
 800aefa:	4b92      	ldr	r3, [pc, #584]	; (800b144 <_strtod_l+0xbf4>)
 800aefc:	403b      	ands	r3, r7
 800aefe:	930d      	str	r3, [sp, #52]	; 0x34
 800af00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af02:	4b91      	ldr	r3, [pc, #580]	; (800b148 <_strtod_l+0xbf8>)
 800af04:	429a      	cmp	r2, r3
 800af06:	f040 80b0 	bne.w	800b06a <_strtod_l+0xb1a>
 800af0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af12:	ec4b ab10 	vmov	d0, sl, fp
 800af16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af1a:	f001 f8d1 	bl	800c0c0 <__ulp>
 800af1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af22:	ec53 2b10 	vmov	r2, r3, d0
 800af26:	f7f5 fb87 	bl	8000638 <__aeabi_dmul>
 800af2a:	4652      	mov	r2, sl
 800af2c:	465b      	mov	r3, fp
 800af2e:	f7f5 f9cd 	bl	80002cc <__adddf3>
 800af32:	460b      	mov	r3, r1
 800af34:	4983      	ldr	r1, [pc, #524]	; (800b144 <_strtod_l+0xbf4>)
 800af36:	4a85      	ldr	r2, [pc, #532]	; (800b14c <_strtod_l+0xbfc>)
 800af38:	4019      	ands	r1, r3
 800af3a:	4291      	cmp	r1, r2
 800af3c:	4682      	mov	sl, r0
 800af3e:	d960      	bls.n	800b002 <_strtod_l+0xab2>
 800af40:	ee18 3a90 	vmov	r3, s17
 800af44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af48:	4293      	cmp	r3, r2
 800af4a:	d104      	bne.n	800af56 <_strtod_l+0xa06>
 800af4c:	ee18 3a10 	vmov	r3, s16
 800af50:	3301      	adds	r3, #1
 800af52:	f43f ad45 	beq.w	800a9e0 <_strtod_l+0x490>
 800af56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b158 <_strtod_l+0xc08>
 800af5a:	f04f 3aff 	mov.w	sl, #4294967295
 800af5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fd7b 	bl	800ba5c <_Bfree>
 800af66:	9905      	ldr	r1, [sp, #20]
 800af68:	4620      	mov	r0, r4
 800af6a:	f000 fd77 	bl	800ba5c <_Bfree>
 800af6e:	4631      	mov	r1, r6
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fd73 	bl	800ba5c <_Bfree>
 800af76:	4629      	mov	r1, r5
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 fd6f 	bl	800ba5c <_Bfree>
 800af7e:	e61a      	b.n	800abb6 <_strtod_l+0x666>
 800af80:	f1ba 0f00 	cmp.w	sl, #0
 800af84:	d11b      	bne.n	800afbe <_strtod_l+0xa6e>
 800af86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af8a:	b9f3      	cbnz	r3, 800afca <_strtod_l+0xa7a>
 800af8c:	4b6c      	ldr	r3, [pc, #432]	; (800b140 <_strtod_l+0xbf0>)
 800af8e:	2200      	movs	r2, #0
 800af90:	4640      	mov	r0, r8
 800af92:	4649      	mov	r1, r9
 800af94:	f7f5 fdc2 	bl	8000b1c <__aeabi_dcmplt>
 800af98:	b9d0      	cbnz	r0, 800afd0 <_strtod_l+0xa80>
 800af9a:	4640      	mov	r0, r8
 800af9c:	4649      	mov	r1, r9
 800af9e:	4b6c      	ldr	r3, [pc, #432]	; (800b150 <_strtod_l+0xc00>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	f7f5 fb49 	bl	8000638 <__aeabi_dmul>
 800afa6:	4680      	mov	r8, r0
 800afa8:	4689      	mov	r9, r1
 800afaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800afb2:	9315      	str	r3, [sp, #84]	; 0x54
 800afb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800afb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800afbc:	e79d      	b.n	800aefa <_strtod_l+0x9aa>
 800afbe:	f1ba 0f01 	cmp.w	sl, #1
 800afc2:	d102      	bne.n	800afca <_strtod_l+0xa7a>
 800afc4:	2f00      	cmp	r7, #0
 800afc6:	f43f ad83 	beq.w	800aad0 <_strtod_l+0x580>
 800afca:	4b62      	ldr	r3, [pc, #392]	; (800b154 <_strtod_l+0xc04>)
 800afcc:	2200      	movs	r2, #0
 800afce:	e78e      	b.n	800aeee <_strtod_l+0x99e>
 800afd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b150 <_strtod_l+0xc00>
 800afd4:	f04f 0800 	mov.w	r8, #0
 800afd8:	e7e7      	b.n	800afaa <_strtod_l+0xa5a>
 800afda:	4b5d      	ldr	r3, [pc, #372]	; (800b150 <_strtod_l+0xc00>)
 800afdc:	4640      	mov	r0, r8
 800afde:	4649      	mov	r1, r9
 800afe0:	2200      	movs	r2, #0
 800afe2:	f7f5 fb29 	bl	8000638 <__aeabi_dmul>
 800afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe8:	4680      	mov	r8, r0
 800afea:	4689      	mov	r9, r1
 800afec:	b933      	cbnz	r3, 800affc <_strtod_l+0xaac>
 800afee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aff2:	900e      	str	r0, [sp, #56]	; 0x38
 800aff4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aff6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800affa:	e7dd      	b.n	800afb8 <_strtod_l+0xa68>
 800affc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b000:	e7f9      	b.n	800aff6 <_strtod_l+0xaa6>
 800b002:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b006:	9b04      	ldr	r3, [sp, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1a8      	bne.n	800af5e <_strtod_l+0xa0e>
 800b00c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b012:	0d1b      	lsrs	r3, r3, #20
 800b014:	051b      	lsls	r3, r3, #20
 800b016:	429a      	cmp	r2, r3
 800b018:	d1a1      	bne.n	800af5e <_strtod_l+0xa0e>
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	f7f5 fe43 	bl	8000ca8 <__aeabi_d2lz>
 800b022:	f7f5 fadb 	bl	80005dc <__aeabi_l2d>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4640      	mov	r0, r8
 800b02c:	4649      	mov	r1, r9
 800b02e:	f7f5 f94b 	bl	80002c8 <__aeabi_dsub>
 800b032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b038:	ea43 030a 	orr.w	r3, r3, sl
 800b03c:	4313      	orrs	r3, r2
 800b03e:	4680      	mov	r8, r0
 800b040:	4689      	mov	r9, r1
 800b042:	d055      	beq.n	800b0f0 <_strtod_l+0xba0>
 800b044:	a336      	add	r3, pc, #216	; (adr r3, 800b120 <_strtod_l+0xbd0>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 fd67 	bl	8000b1c <__aeabi_dcmplt>
 800b04e:	2800      	cmp	r0, #0
 800b050:	f47f acd0 	bne.w	800a9f4 <_strtod_l+0x4a4>
 800b054:	a334      	add	r3, pc, #208	; (adr r3, 800b128 <_strtod_l+0xbd8>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	4640      	mov	r0, r8
 800b05c:	4649      	mov	r1, r9
 800b05e:	f7f5 fd7b 	bl	8000b58 <__aeabi_dcmpgt>
 800b062:	2800      	cmp	r0, #0
 800b064:	f43f af7b 	beq.w	800af5e <_strtod_l+0xa0e>
 800b068:	e4c4      	b.n	800a9f4 <_strtod_l+0x4a4>
 800b06a:	9b04      	ldr	r3, [sp, #16]
 800b06c:	b333      	cbz	r3, 800b0bc <_strtod_l+0xb6c>
 800b06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b070:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b074:	d822      	bhi.n	800b0bc <_strtod_l+0xb6c>
 800b076:	a32e      	add	r3, pc, #184	; (adr r3, 800b130 <_strtod_l+0xbe0>)
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	4640      	mov	r0, r8
 800b07e:	4649      	mov	r1, r9
 800b080:	f7f5 fd56 	bl	8000b30 <__aeabi_dcmple>
 800b084:	b1a0      	cbz	r0, 800b0b0 <_strtod_l+0xb60>
 800b086:	4649      	mov	r1, r9
 800b088:	4640      	mov	r0, r8
 800b08a:	f7f5 fd85 	bl	8000b98 <__aeabi_d2uiz>
 800b08e:	2801      	cmp	r0, #1
 800b090:	bf38      	it	cc
 800b092:	2001      	movcc	r0, #1
 800b094:	f7f5 fa56 	bl	8000544 <__aeabi_ui2d>
 800b098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09a:	4680      	mov	r8, r0
 800b09c:	4689      	mov	r9, r1
 800b09e:	bb23      	cbnz	r3, 800b0ea <_strtod_l+0xb9a>
 800b0a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0a4:	9010      	str	r0, [sp, #64]	; 0x40
 800b0a6:	9311      	str	r3, [sp, #68]	; 0x44
 800b0a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b0b8:	1a9b      	subs	r3, r3, r2
 800b0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b0bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0c0:	eeb0 0a48 	vmov.f32	s0, s16
 800b0c4:	eef0 0a68 	vmov.f32	s1, s17
 800b0c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b0cc:	f000 fff8 	bl	800c0c0 <__ulp>
 800b0d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0d4:	ec53 2b10 	vmov	r2, r3, d0
 800b0d8:	f7f5 faae 	bl	8000638 <__aeabi_dmul>
 800b0dc:	ec53 2b18 	vmov	r2, r3, d8
 800b0e0:	f7f5 f8f4 	bl	80002cc <__adddf3>
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	468b      	mov	fp, r1
 800b0e8:	e78d      	b.n	800b006 <_strtod_l+0xab6>
 800b0ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b0ee:	e7db      	b.n	800b0a8 <_strtod_l+0xb58>
 800b0f0:	a311      	add	r3, pc, #68	; (adr r3, 800b138 <_strtod_l+0xbe8>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f7f5 fd11 	bl	8000b1c <__aeabi_dcmplt>
 800b0fa:	e7b2      	b.n	800b062 <_strtod_l+0xb12>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	f7ff ba6b 	b.w	800a5e0 <_strtod_l+0x90>
 800b10a:	2a65      	cmp	r2, #101	; 0x65
 800b10c:	f43f ab5f 	beq.w	800a7ce <_strtod_l+0x27e>
 800b110:	2a45      	cmp	r2, #69	; 0x45
 800b112:	f43f ab5c 	beq.w	800a7ce <_strtod_l+0x27e>
 800b116:	2301      	movs	r3, #1
 800b118:	f7ff bb94 	b.w	800a844 <_strtod_l+0x2f4>
 800b11c:	f3af 8000 	nop.w
 800b120:	94a03595 	.word	0x94a03595
 800b124:	3fdfffff 	.word	0x3fdfffff
 800b128:	35afe535 	.word	0x35afe535
 800b12c:	3fe00000 	.word	0x3fe00000
 800b130:	ffc00000 	.word	0xffc00000
 800b134:	41dfffff 	.word	0x41dfffff
 800b138:	94a03595 	.word	0x94a03595
 800b13c:	3fcfffff 	.word	0x3fcfffff
 800b140:	3ff00000 	.word	0x3ff00000
 800b144:	7ff00000 	.word	0x7ff00000
 800b148:	7fe00000 	.word	0x7fe00000
 800b14c:	7c9fffff 	.word	0x7c9fffff
 800b150:	3fe00000 	.word	0x3fe00000
 800b154:	bff00000 	.word	0xbff00000
 800b158:	7fefffff 	.word	0x7fefffff

0800b15c <_strtod_r>:
 800b15c:	4b01      	ldr	r3, [pc, #4]	; (800b164 <_strtod_r+0x8>)
 800b15e:	f7ff b9f7 	b.w	800a550 <_strtod_l>
 800b162:	bf00      	nop
 800b164:	20000174 	.word	0x20000174

0800b168 <_strtol_l.constprop.0>:
 800b168:	2b01      	cmp	r3, #1
 800b16a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b16e:	d001      	beq.n	800b174 <_strtol_l.constprop.0+0xc>
 800b170:	2b24      	cmp	r3, #36	; 0x24
 800b172:	d906      	bls.n	800b182 <_strtol_l.constprop.0+0x1a>
 800b174:	f7fe feda 	bl	8009f2c <__errno>
 800b178:	2316      	movs	r3, #22
 800b17a:	6003      	str	r3, [r0, #0]
 800b17c:	2000      	movs	r0, #0
 800b17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b182:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b268 <_strtol_l.constprop.0+0x100>
 800b186:	460d      	mov	r5, r1
 800b188:	462e      	mov	r6, r5
 800b18a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b18e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b192:	f017 0708 	ands.w	r7, r7, #8
 800b196:	d1f7      	bne.n	800b188 <_strtol_l.constprop.0+0x20>
 800b198:	2c2d      	cmp	r4, #45	; 0x2d
 800b19a:	d132      	bne.n	800b202 <_strtol_l.constprop.0+0x9a>
 800b19c:	782c      	ldrb	r4, [r5, #0]
 800b19e:	2701      	movs	r7, #1
 800b1a0:	1cb5      	adds	r5, r6, #2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d05b      	beq.n	800b25e <_strtol_l.constprop.0+0xf6>
 800b1a6:	2b10      	cmp	r3, #16
 800b1a8:	d109      	bne.n	800b1be <_strtol_l.constprop.0+0x56>
 800b1aa:	2c30      	cmp	r4, #48	; 0x30
 800b1ac:	d107      	bne.n	800b1be <_strtol_l.constprop.0+0x56>
 800b1ae:	782c      	ldrb	r4, [r5, #0]
 800b1b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b1b4:	2c58      	cmp	r4, #88	; 0x58
 800b1b6:	d14d      	bne.n	800b254 <_strtol_l.constprop.0+0xec>
 800b1b8:	786c      	ldrb	r4, [r5, #1]
 800b1ba:	2310      	movs	r3, #16
 800b1bc:	3502      	adds	r5, #2
 800b1be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b1c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1c6:	f04f 0c00 	mov.w	ip, #0
 800b1ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800b1ce:	4666      	mov	r6, ip
 800b1d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b1d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b1d8:	f1be 0f09 	cmp.w	lr, #9
 800b1dc:	d816      	bhi.n	800b20c <_strtol_l.constprop.0+0xa4>
 800b1de:	4674      	mov	r4, lr
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	dd24      	ble.n	800b22e <_strtol_l.constprop.0+0xc6>
 800b1e4:	f1bc 0f00 	cmp.w	ip, #0
 800b1e8:	db1e      	blt.n	800b228 <_strtol_l.constprop.0+0xc0>
 800b1ea:	45b1      	cmp	r9, r6
 800b1ec:	d31c      	bcc.n	800b228 <_strtol_l.constprop.0+0xc0>
 800b1ee:	d101      	bne.n	800b1f4 <_strtol_l.constprop.0+0x8c>
 800b1f0:	45a2      	cmp	sl, r4
 800b1f2:	db19      	blt.n	800b228 <_strtol_l.constprop.0+0xc0>
 800b1f4:	fb06 4603 	mla	r6, r6, r3, r4
 800b1f8:	f04f 0c01 	mov.w	ip, #1
 800b1fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b200:	e7e8      	b.n	800b1d4 <_strtol_l.constprop.0+0x6c>
 800b202:	2c2b      	cmp	r4, #43	; 0x2b
 800b204:	bf04      	itt	eq
 800b206:	782c      	ldrbeq	r4, [r5, #0]
 800b208:	1cb5      	addeq	r5, r6, #2
 800b20a:	e7ca      	b.n	800b1a2 <_strtol_l.constprop.0+0x3a>
 800b20c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b210:	f1be 0f19 	cmp.w	lr, #25
 800b214:	d801      	bhi.n	800b21a <_strtol_l.constprop.0+0xb2>
 800b216:	3c37      	subs	r4, #55	; 0x37
 800b218:	e7e2      	b.n	800b1e0 <_strtol_l.constprop.0+0x78>
 800b21a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b21e:	f1be 0f19 	cmp.w	lr, #25
 800b222:	d804      	bhi.n	800b22e <_strtol_l.constprop.0+0xc6>
 800b224:	3c57      	subs	r4, #87	; 0x57
 800b226:	e7db      	b.n	800b1e0 <_strtol_l.constprop.0+0x78>
 800b228:	f04f 3cff 	mov.w	ip, #4294967295
 800b22c:	e7e6      	b.n	800b1fc <_strtol_l.constprop.0+0x94>
 800b22e:	f1bc 0f00 	cmp.w	ip, #0
 800b232:	da05      	bge.n	800b240 <_strtol_l.constprop.0+0xd8>
 800b234:	2322      	movs	r3, #34	; 0x22
 800b236:	6003      	str	r3, [r0, #0]
 800b238:	4646      	mov	r6, r8
 800b23a:	b942      	cbnz	r2, 800b24e <_strtol_l.constprop.0+0xe6>
 800b23c:	4630      	mov	r0, r6
 800b23e:	e79e      	b.n	800b17e <_strtol_l.constprop.0+0x16>
 800b240:	b107      	cbz	r7, 800b244 <_strtol_l.constprop.0+0xdc>
 800b242:	4276      	negs	r6, r6
 800b244:	2a00      	cmp	r2, #0
 800b246:	d0f9      	beq.n	800b23c <_strtol_l.constprop.0+0xd4>
 800b248:	f1bc 0f00 	cmp.w	ip, #0
 800b24c:	d000      	beq.n	800b250 <_strtol_l.constprop.0+0xe8>
 800b24e:	1e69      	subs	r1, r5, #1
 800b250:	6011      	str	r1, [r2, #0]
 800b252:	e7f3      	b.n	800b23c <_strtol_l.constprop.0+0xd4>
 800b254:	2430      	movs	r4, #48	; 0x30
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1b1      	bne.n	800b1be <_strtol_l.constprop.0+0x56>
 800b25a:	2308      	movs	r3, #8
 800b25c:	e7af      	b.n	800b1be <_strtol_l.constprop.0+0x56>
 800b25e:	2c30      	cmp	r4, #48	; 0x30
 800b260:	d0a5      	beq.n	800b1ae <_strtol_l.constprop.0+0x46>
 800b262:	230a      	movs	r3, #10
 800b264:	e7ab      	b.n	800b1be <_strtol_l.constprop.0+0x56>
 800b266:	bf00      	nop
 800b268:	0800e0e9 	.word	0x0800e0e9

0800b26c <_strtol_r>:
 800b26c:	f7ff bf7c 	b.w	800b168 <_strtol_l.constprop.0>

0800b270 <_write_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	; (800b290 <_write_r+0x20>)
 800b274:	4604      	mov	r4, r0
 800b276:	4608      	mov	r0, r1
 800b278:	4611      	mov	r1, r2
 800b27a:	2200      	movs	r2, #0
 800b27c:	602a      	str	r2, [r5, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	f7f6 fcb1 	bl	8001be6 <_write>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d102      	bne.n	800b28e <_write_r+0x1e>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	b103      	cbz	r3, 800b28e <_write_r+0x1e>
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	20002538 	.word	0x20002538

0800b294 <_close_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d06      	ldr	r5, [pc, #24]	; (800b2b0 <_close_r+0x1c>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	f7f6 fcbd 	bl	8001c1e <_close>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_close_r+0x1a>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_close_r+0x1a>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	20002538 	.word	0x20002538

0800b2b4 <rshift>:
 800b2b4:	6903      	ldr	r3, [r0, #16]
 800b2b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2c2:	f100 0414 	add.w	r4, r0, #20
 800b2c6:	dd45      	ble.n	800b354 <rshift+0xa0>
 800b2c8:	f011 011f 	ands.w	r1, r1, #31
 800b2cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2d4:	d10c      	bne.n	800b2f0 <rshift+0x3c>
 800b2d6:	f100 0710 	add.w	r7, r0, #16
 800b2da:	4629      	mov	r1, r5
 800b2dc:	42b1      	cmp	r1, r6
 800b2de:	d334      	bcc.n	800b34a <rshift+0x96>
 800b2e0:	1a9b      	subs	r3, r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	1eea      	subs	r2, r5, #3
 800b2e6:	4296      	cmp	r6, r2
 800b2e8:	bf38      	it	cc
 800b2ea:	2300      	movcc	r3, #0
 800b2ec:	4423      	add	r3, r4
 800b2ee:	e015      	b.n	800b31c <rshift+0x68>
 800b2f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2f4:	f1c1 0820 	rsb	r8, r1, #32
 800b2f8:	40cf      	lsrs	r7, r1
 800b2fa:	f105 0e04 	add.w	lr, r5, #4
 800b2fe:	46a1      	mov	r9, r4
 800b300:	4576      	cmp	r6, lr
 800b302:	46f4      	mov	ip, lr
 800b304:	d815      	bhi.n	800b332 <rshift+0x7e>
 800b306:	1a9a      	subs	r2, r3, r2
 800b308:	0092      	lsls	r2, r2, #2
 800b30a:	3a04      	subs	r2, #4
 800b30c:	3501      	adds	r5, #1
 800b30e:	42ae      	cmp	r6, r5
 800b310:	bf38      	it	cc
 800b312:	2200      	movcc	r2, #0
 800b314:	18a3      	adds	r3, r4, r2
 800b316:	50a7      	str	r7, [r4, r2]
 800b318:	b107      	cbz	r7, 800b31c <rshift+0x68>
 800b31a:	3304      	adds	r3, #4
 800b31c:	1b1a      	subs	r2, r3, r4
 800b31e:	42a3      	cmp	r3, r4
 800b320:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b324:	bf08      	it	eq
 800b326:	2300      	moveq	r3, #0
 800b328:	6102      	str	r2, [r0, #16]
 800b32a:	bf08      	it	eq
 800b32c:	6143      	streq	r3, [r0, #20]
 800b32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b332:	f8dc c000 	ldr.w	ip, [ip]
 800b336:	fa0c fc08 	lsl.w	ip, ip, r8
 800b33a:	ea4c 0707 	orr.w	r7, ip, r7
 800b33e:	f849 7b04 	str.w	r7, [r9], #4
 800b342:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b346:	40cf      	lsrs	r7, r1
 800b348:	e7da      	b.n	800b300 <rshift+0x4c>
 800b34a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b34e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b352:	e7c3      	b.n	800b2dc <rshift+0x28>
 800b354:	4623      	mov	r3, r4
 800b356:	e7e1      	b.n	800b31c <rshift+0x68>

0800b358 <__hexdig_fun>:
 800b358:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b35c:	2b09      	cmp	r3, #9
 800b35e:	d802      	bhi.n	800b366 <__hexdig_fun+0xe>
 800b360:	3820      	subs	r0, #32
 800b362:	b2c0      	uxtb	r0, r0
 800b364:	4770      	bx	lr
 800b366:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b36a:	2b05      	cmp	r3, #5
 800b36c:	d801      	bhi.n	800b372 <__hexdig_fun+0x1a>
 800b36e:	3847      	subs	r0, #71	; 0x47
 800b370:	e7f7      	b.n	800b362 <__hexdig_fun+0xa>
 800b372:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b376:	2b05      	cmp	r3, #5
 800b378:	d801      	bhi.n	800b37e <__hexdig_fun+0x26>
 800b37a:	3827      	subs	r0, #39	; 0x27
 800b37c:	e7f1      	b.n	800b362 <__hexdig_fun+0xa>
 800b37e:	2000      	movs	r0, #0
 800b380:	4770      	bx	lr
	...

0800b384 <__gethex>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	ed2d 8b02 	vpush	{d8}
 800b38c:	b089      	sub	sp, #36	; 0x24
 800b38e:	ee08 0a10 	vmov	s16, r0
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	4bb4      	ldr	r3, [pc, #720]	; (800b668 <__gethex+0x2e4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	4618      	mov	r0, r3
 800b39c:	468b      	mov	fp, r1
 800b39e:	4690      	mov	r8, r2
 800b3a0:	f7f4 ff36 	bl	8000210 <strlen>
 800b3a4:	9b01      	ldr	r3, [sp, #4]
 800b3a6:	f8db 2000 	ldr.w	r2, [fp]
 800b3aa:	4403      	add	r3, r0
 800b3ac:	4682      	mov	sl, r0
 800b3ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3b2:	9305      	str	r3, [sp, #20]
 800b3b4:	1c93      	adds	r3, r2, #2
 800b3b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3be:	32fe      	adds	r2, #254	; 0xfe
 800b3c0:	18d1      	adds	r1, r2, r3
 800b3c2:	461f      	mov	r7, r3
 800b3c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3c8:	9100      	str	r1, [sp, #0]
 800b3ca:	2830      	cmp	r0, #48	; 0x30
 800b3cc:	d0f8      	beq.n	800b3c0 <__gethex+0x3c>
 800b3ce:	f7ff ffc3 	bl	800b358 <__hexdig_fun>
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d13a      	bne.n	800b44e <__gethex+0xca>
 800b3d8:	9901      	ldr	r1, [sp, #4]
 800b3da:	4652      	mov	r2, sl
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f001 fedf 	bl	800d1a0 <strncmp>
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d168      	bne.n	800b4ba <__gethex+0x136>
 800b3e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b3ec:	eb07 060a 	add.w	r6, r7, sl
 800b3f0:	f7ff ffb2 	bl	800b358 <__hexdig_fun>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d062      	beq.n	800b4be <__gethex+0x13a>
 800b3f8:	4633      	mov	r3, r6
 800b3fa:	7818      	ldrb	r0, [r3, #0]
 800b3fc:	2830      	cmp	r0, #48	; 0x30
 800b3fe:	461f      	mov	r7, r3
 800b400:	f103 0301 	add.w	r3, r3, #1
 800b404:	d0f9      	beq.n	800b3fa <__gethex+0x76>
 800b406:	f7ff ffa7 	bl	800b358 <__hexdig_fun>
 800b40a:	2301      	movs	r3, #1
 800b40c:	fab0 f480 	clz	r4, r0
 800b410:	0964      	lsrs	r4, r4, #5
 800b412:	4635      	mov	r5, r6
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	463a      	mov	r2, r7
 800b418:	4616      	mov	r6, r2
 800b41a:	3201      	adds	r2, #1
 800b41c:	7830      	ldrb	r0, [r6, #0]
 800b41e:	f7ff ff9b 	bl	800b358 <__hexdig_fun>
 800b422:	2800      	cmp	r0, #0
 800b424:	d1f8      	bne.n	800b418 <__gethex+0x94>
 800b426:	9901      	ldr	r1, [sp, #4]
 800b428:	4652      	mov	r2, sl
 800b42a:	4630      	mov	r0, r6
 800b42c:	f001 feb8 	bl	800d1a0 <strncmp>
 800b430:	b980      	cbnz	r0, 800b454 <__gethex+0xd0>
 800b432:	b94d      	cbnz	r5, 800b448 <__gethex+0xc4>
 800b434:	eb06 050a 	add.w	r5, r6, sl
 800b438:	462a      	mov	r2, r5
 800b43a:	4616      	mov	r6, r2
 800b43c:	3201      	adds	r2, #1
 800b43e:	7830      	ldrb	r0, [r6, #0]
 800b440:	f7ff ff8a 	bl	800b358 <__hexdig_fun>
 800b444:	2800      	cmp	r0, #0
 800b446:	d1f8      	bne.n	800b43a <__gethex+0xb6>
 800b448:	1bad      	subs	r5, r5, r6
 800b44a:	00ad      	lsls	r5, r5, #2
 800b44c:	e004      	b.n	800b458 <__gethex+0xd4>
 800b44e:	2400      	movs	r4, #0
 800b450:	4625      	mov	r5, r4
 800b452:	e7e0      	b.n	800b416 <__gethex+0x92>
 800b454:	2d00      	cmp	r5, #0
 800b456:	d1f7      	bne.n	800b448 <__gethex+0xc4>
 800b458:	7833      	ldrb	r3, [r6, #0]
 800b45a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b45e:	2b50      	cmp	r3, #80	; 0x50
 800b460:	d13b      	bne.n	800b4da <__gethex+0x156>
 800b462:	7873      	ldrb	r3, [r6, #1]
 800b464:	2b2b      	cmp	r3, #43	; 0x2b
 800b466:	d02c      	beq.n	800b4c2 <__gethex+0x13e>
 800b468:	2b2d      	cmp	r3, #45	; 0x2d
 800b46a:	d02e      	beq.n	800b4ca <__gethex+0x146>
 800b46c:	1c71      	adds	r1, r6, #1
 800b46e:	f04f 0900 	mov.w	r9, #0
 800b472:	7808      	ldrb	r0, [r1, #0]
 800b474:	f7ff ff70 	bl	800b358 <__hexdig_fun>
 800b478:	1e43      	subs	r3, r0, #1
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b18      	cmp	r3, #24
 800b47e:	d82c      	bhi.n	800b4da <__gethex+0x156>
 800b480:	f1a0 0210 	sub.w	r2, r0, #16
 800b484:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b488:	f7ff ff66 	bl	800b358 <__hexdig_fun>
 800b48c:	1e43      	subs	r3, r0, #1
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b18      	cmp	r3, #24
 800b492:	d91d      	bls.n	800b4d0 <__gethex+0x14c>
 800b494:	f1b9 0f00 	cmp.w	r9, #0
 800b498:	d000      	beq.n	800b49c <__gethex+0x118>
 800b49a:	4252      	negs	r2, r2
 800b49c:	4415      	add	r5, r2
 800b49e:	f8cb 1000 	str.w	r1, [fp]
 800b4a2:	b1e4      	cbz	r4, 800b4de <__gethex+0x15a>
 800b4a4:	9b00      	ldr	r3, [sp, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bf14      	ite	ne
 800b4aa:	2700      	movne	r7, #0
 800b4ac:	2706      	moveq	r7, #6
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	b009      	add	sp, #36	; 0x24
 800b4b2:	ecbd 8b02 	vpop	{d8}
 800b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ba:	463e      	mov	r6, r7
 800b4bc:	4625      	mov	r5, r4
 800b4be:	2401      	movs	r4, #1
 800b4c0:	e7ca      	b.n	800b458 <__gethex+0xd4>
 800b4c2:	f04f 0900 	mov.w	r9, #0
 800b4c6:	1cb1      	adds	r1, r6, #2
 800b4c8:	e7d3      	b.n	800b472 <__gethex+0xee>
 800b4ca:	f04f 0901 	mov.w	r9, #1
 800b4ce:	e7fa      	b.n	800b4c6 <__gethex+0x142>
 800b4d0:	230a      	movs	r3, #10
 800b4d2:	fb03 0202 	mla	r2, r3, r2, r0
 800b4d6:	3a10      	subs	r2, #16
 800b4d8:	e7d4      	b.n	800b484 <__gethex+0x100>
 800b4da:	4631      	mov	r1, r6
 800b4dc:	e7df      	b.n	800b49e <__gethex+0x11a>
 800b4de:	1bf3      	subs	r3, r6, r7
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	2b07      	cmp	r3, #7
 800b4e6:	dc0b      	bgt.n	800b500 <__gethex+0x17c>
 800b4e8:	ee18 0a10 	vmov	r0, s16
 800b4ec:	f000 fa76 	bl	800b9dc <_Balloc>
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	b940      	cbnz	r0, 800b506 <__gethex+0x182>
 800b4f4:	4b5d      	ldr	r3, [pc, #372]	; (800b66c <__gethex+0x2e8>)
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	21de      	movs	r1, #222	; 0xde
 800b4fa:	485d      	ldr	r0, [pc, #372]	; (800b670 <__gethex+0x2ec>)
 800b4fc:	f001 ff20 	bl	800d340 <__assert_func>
 800b500:	3101      	adds	r1, #1
 800b502:	105b      	asrs	r3, r3, #1
 800b504:	e7ee      	b.n	800b4e4 <__gethex+0x160>
 800b506:	f100 0914 	add.w	r9, r0, #20
 800b50a:	f04f 0b00 	mov.w	fp, #0
 800b50e:	f1ca 0301 	rsb	r3, sl, #1
 800b512:	f8cd 9008 	str.w	r9, [sp, #8]
 800b516:	f8cd b000 	str.w	fp, [sp]
 800b51a:	9306      	str	r3, [sp, #24]
 800b51c:	42b7      	cmp	r7, r6
 800b51e:	d340      	bcc.n	800b5a2 <__gethex+0x21e>
 800b520:	9802      	ldr	r0, [sp, #8]
 800b522:	9b00      	ldr	r3, [sp, #0]
 800b524:	f840 3b04 	str.w	r3, [r0], #4
 800b528:	eba0 0009 	sub.w	r0, r0, r9
 800b52c:	1080      	asrs	r0, r0, #2
 800b52e:	0146      	lsls	r6, r0, #5
 800b530:	6120      	str	r0, [r4, #16]
 800b532:	4618      	mov	r0, r3
 800b534:	f000 fb44 	bl	800bbc0 <__hi0bits>
 800b538:	1a30      	subs	r0, r6, r0
 800b53a:	f8d8 6000 	ldr.w	r6, [r8]
 800b53e:	42b0      	cmp	r0, r6
 800b540:	dd63      	ble.n	800b60a <__gethex+0x286>
 800b542:	1b87      	subs	r7, r0, r6
 800b544:	4639      	mov	r1, r7
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fee8 	bl	800c31c <__any_on>
 800b54c:	4682      	mov	sl, r0
 800b54e:	b1a8      	cbz	r0, 800b57c <__gethex+0x1f8>
 800b550:	1e7b      	subs	r3, r7, #1
 800b552:	1159      	asrs	r1, r3, #5
 800b554:	f003 021f 	and.w	r2, r3, #31
 800b558:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b55c:	f04f 0a01 	mov.w	sl, #1
 800b560:	fa0a f202 	lsl.w	r2, sl, r2
 800b564:	420a      	tst	r2, r1
 800b566:	d009      	beq.n	800b57c <__gethex+0x1f8>
 800b568:	4553      	cmp	r3, sl
 800b56a:	dd05      	ble.n	800b578 <__gethex+0x1f4>
 800b56c:	1eb9      	subs	r1, r7, #2
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 fed4 	bl	800c31c <__any_on>
 800b574:	2800      	cmp	r0, #0
 800b576:	d145      	bne.n	800b604 <__gethex+0x280>
 800b578:	f04f 0a02 	mov.w	sl, #2
 800b57c:	4639      	mov	r1, r7
 800b57e:	4620      	mov	r0, r4
 800b580:	f7ff fe98 	bl	800b2b4 <rshift>
 800b584:	443d      	add	r5, r7
 800b586:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b58a:	42ab      	cmp	r3, r5
 800b58c:	da4c      	bge.n	800b628 <__gethex+0x2a4>
 800b58e:	ee18 0a10 	vmov	r0, s16
 800b592:	4621      	mov	r1, r4
 800b594:	f000 fa62 	bl	800ba5c <_Bfree>
 800b598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b59a:	2300      	movs	r3, #0
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	27a3      	movs	r7, #163	; 0xa3
 800b5a0:	e785      	b.n	800b4ae <__gethex+0x12a>
 800b5a2:	1e73      	subs	r3, r6, #1
 800b5a4:	9a05      	ldr	r2, [sp, #20]
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d019      	beq.n	800b5e4 <__gethex+0x260>
 800b5b0:	f1bb 0f20 	cmp.w	fp, #32
 800b5b4:	d107      	bne.n	800b5c6 <__gethex+0x242>
 800b5b6:	9b02      	ldr	r3, [sp, #8]
 800b5b8:	9a00      	ldr	r2, [sp, #0]
 800b5ba:	f843 2b04 	str.w	r2, [r3], #4
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	469b      	mov	fp, r3
 800b5c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5ca:	f7ff fec5 	bl	800b358 <__hexdig_fun>
 800b5ce:	9b00      	ldr	r3, [sp, #0]
 800b5d0:	f000 000f 	and.w	r0, r0, #15
 800b5d4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b5d8:	4303      	orrs	r3, r0
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	f10b 0b04 	add.w	fp, fp, #4
 800b5e0:	9b03      	ldr	r3, [sp, #12]
 800b5e2:	e00d      	b.n	800b600 <__gethex+0x27c>
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	9a06      	ldr	r2, [sp, #24]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	42bb      	cmp	r3, r7
 800b5ec:	d3e0      	bcc.n	800b5b0 <__gethex+0x22c>
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	9901      	ldr	r1, [sp, #4]
 800b5f2:	9307      	str	r3, [sp, #28]
 800b5f4:	4652      	mov	r2, sl
 800b5f6:	f001 fdd3 	bl	800d1a0 <strncmp>
 800b5fa:	9b07      	ldr	r3, [sp, #28]
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d1d7      	bne.n	800b5b0 <__gethex+0x22c>
 800b600:	461e      	mov	r6, r3
 800b602:	e78b      	b.n	800b51c <__gethex+0x198>
 800b604:	f04f 0a03 	mov.w	sl, #3
 800b608:	e7b8      	b.n	800b57c <__gethex+0x1f8>
 800b60a:	da0a      	bge.n	800b622 <__gethex+0x29e>
 800b60c:	1a37      	subs	r7, r6, r0
 800b60e:	4621      	mov	r1, r4
 800b610:	ee18 0a10 	vmov	r0, s16
 800b614:	463a      	mov	r2, r7
 800b616:	f000 fc3d 	bl	800be94 <__lshift>
 800b61a:	1bed      	subs	r5, r5, r7
 800b61c:	4604      	mov	r4, r0
 800b61e:	f100 0914 	add.w	r9, r0, #20
 800b622:	f04f 0a00 	mov.w	sl, #0
 800b626:	e7ae      	b.n	800b586 <__gethex+0x202>
 800b628:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b62c:	42a8      	cmp	r0, r5
 800b62e:	dd72      	ble.n	800b716 <__gethex+0x392>
 800b630:	1b45      	subs	r5, r0, r5
 800b632:	42ae      	cmp	r6, r5
 800b634:	dc36      	bgt.n	800b6a4 <__gethex+0x320>
 800b636:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d02a      	beq.n	800b694 <__gethex+0x310>
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d02c      	beq.n	800b69c <__gethex+0x318>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d11c      	bne.n	800b680 <__gethex+0x2fc>
 800b646:	42ae      	cmp	r6, r5
 800b648:	d11a      	bne.n	800b680 <__gethex+0x2fc>
 800b64a:	2e01      	cmp	r6, #1
 800b64c:	d112      	bne.n	800b674 <__gethex+0x2f0>
 800b64e:	9a04      	ldr	r2, [sp, #16]
 800b650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b654:	6013      	str	r3, [r2, #0]
 800b656:	2301      	movs	r3, #1
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	f8c9 3000 	str.w	r3, [r9]
 800b65e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b660:	2762      	movs	r7, #98	; 0x62
 800b662:	601c      	str	r4, [r3, #0]
 800b664:	e723      	b.n	800b4ae <__gethex+0x12a>
 800b666:	bf00      	nop
 800b668:	0800e260 	.word	0x0800e260
 800b66c:	0800e1e9 	.word	0x0800e1e9
 800b670:	0800e1fa 	.word	0x0800e1fa
 800b674:	1e71      	subs	r1, r6, #1
 800b676:	4620      	mov	r0, r4
 800b678:	f000 fe50 	bl	800c31c <__any_on>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1e6      	bne.n	800b64e <__gethex+0x2ca>
 800b680:	ee18 0a10 	vmov	r0, s16
 800b684:	4621      	mov	r1, r4
 800b686:	f000 f9e9 	bl	800ba5c <_Bfree>
 800b68a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b68c:	2300      	movs	r3, #0
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	2750      	movs	r7, #80	; 0x50
 800b692:	e70c      	b.n	800b4ae <__gethex+0x12a>
 800b694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1f2      	bne.n	800b680 <__gethex+0x2fc>
 800b69a:	e7d8      	b.n	800b64e <__gethex+0x2ca>
 800b69c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1d5      	bne.n	800b64e <__gethex+0x2ca>
 800b6a2:	e7ed      	b.n	800b680 <__gethex+0x2fc>
 800b6a4:	1e6f      	subs	r7, r5, #1
 800b6a6:	f1ba 0f00 	cmp.w	sl, #0
 800b6aa:	d131      	bne.n	800b710 <__gethex+0x38c>
 800b6ac:	b127      	cbz	r7, 800b6b8 <__gethex+0x334>
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fe33 	bl	800c31c <__any_on>
 800b6b6:	4682      	mov	sl, r0
 800b6b8:	117b      	asrs	r3, r7, #5
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6c0:	f007 071f 	and.w	r7, r7, #31
 800b6c4:	fa01 f707 	lsl.w	r7, r1, r7
 800b6c8:	421f      	tst	r7, r3
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	bf18      	it	ne
 800b6d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b6d4:	1b76      	subs	r6, r6, r5
 800b6d6:	f7ff fded 	bl	800b2b4 <rshift>
 800b6da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6de:	2702      	movs	r7, #2
 800b6e0:	f1ba 0f00 	cmp.w	sl, #0
 800b6e4:	d048      	beq.n	800b778 <__gethex+0x3f4>
 800b6e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d015      	beq.n	800b71a <__gethex+0x396>
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d017      	beq.n	800b722 <__gethex+0x39e>
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d109      	bne.n	800b70a <__gethex+0x386>
 800b6f6:	f01a 0f02 	tst.w	sl, #2
 800b6fa:	d006      	beq.n	800b70a <__gethex+0x386>
 800b6fc:	f8d9 0000 	ldr.w	r0, [r9]
 800b700:	ea4a 0a00 	orr.w	sl, sl, r0
 800b704:	f01a 0f01 	tst.w	sl, #1
 800b708:	d10e      	bne.n	800b728 <__gethex+0x3a4>
 800b70a:	f047 0710 	orr.w	r7, r7, #16
 800b70e:	e033      	b.n	800b778 <__gethex+0x3f4>
 800b710:	f04f 0a01 	mov.w	sl, #1
 800b714:	e7d0      	b.n	800b6b8 <__gethex+0x334>
 800b716:	2701      	movs	r7, #1
 800b718:	e7e2      	b.n	800b6e0 <__gethex+0x35c>
 800b71a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b71c:	f1c3 0301 	rsb	r3, r3, #1
 800b720:	9315      	str	r3, [sp, #84]	; 0x54
 800b722:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b724:	2b00      	cmp	r3, #0
 800b726:	d0f0      	beq.n	800b70a <__gethex+0x386>
 800b728:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b72c:	f104 0314 	add.w	r3, r4, #20
 800b730:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b734:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b738:	f04f 0c00 	mov.w	ip, #0
 800b73c:	4618      	mov	r0, r3
 800b73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b742:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b746:	d01c      	beq.n	800b782 <__gethex+0x3fe>
 800b748:	3201      	adds	r2, #1
 800b74a:	6002      	str	r2, [r0, #0]
 800b74c:	2f02      	cmp	r7, #2
 800b74e:	f104 0314 	add.w	r3, r4, #20
 800b752:	d13f      	bne.n	800b7d4 <__gethex+0x450>
 800b754:	f8d8 2000 	ldr.w	r2, [r8]
 800b758:	3a01      	subs	r2, #1
 800b75a:	42b2      	cmp	r2, r6
 800b75c:	d10a      	bne.n	800b774 <__gethex+0x3f0>
 800b75e:	1171      	asrs	r1, r6, #5
 800b760:	2201      	movs	r2, #1
 800b762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b766:	f006 061f 	and.w	r6, r6, #31
 800b76a:	fa02 f606 	lsl.w	r6, r2, r6
 800b76e:	421e      	tst	r6, r3
 800b770:	bf18      	it	ne
 800b772:	4617      	movne	r7, r2
 800b774:	f047 0720 	orr.w	r7, r7, #32
 800b778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b77a:	601c      	str	r4, [r3, #0]
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	601d      	str	r5, [r3, #0]
 800b780:	e695      	b.n	800b4ae <__gethex+0x12a>
 800b782:	4299      	cmp	r1, r3
 800b784:	f843 cc04 	str.w	ip, [r3, #-4]
 800b788:	d8d8      	bhi.n	800b73c <__gethex+0x3b8>
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	459b      	cmp	fp, r3
 800b78e:	db19      	blt.n	800b7c4 <__gethex+0x440>
 800b790:	6861      	ldr	r1, [r4, #4]
 800b792:	ee18 0a10 	vmov	r0, s16
 800b796:	3101      	adds	r1, #1
 800b798:	f000 f920 	bl	800b9dc <_Balloc>
 800b79c:	4681      	mov	r9, r0
 800b79e:	b918      	cbnz	r0, 800b7a8 <__gethex+0x424>
 800b7a0:	4b1a      	ldr	r3, [pc, #104]	; (800b80c <__gethex+0x488>)
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	2184      	movs	r1, #132	; 0x84
 800b7a6:	e6a8      	b.n	800b4fa <__gethex+0x176>
 800b7a8:	6922      	ldr	r2, [r4, #16]
 800b7aa:	3202      	adds	r2, #2
 800b7ac:	f104 010c 	add.w	r1, r4, #12
 800b7b0:	0092      	lsls	r2, r2, #2
 800b7b2:	300c      	adds	r0, #12
 800b7b4:	f7fe fbe4 	bl	8009f80 <memcpy>
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	ee18 0a10 	vmov	r0, s16
 800b7be:	f000 f94d 	bl	800ba5c <_Bfree>
 800b7c2:	464c      	mov	r4, r9
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7cc:	6122      	str	r2, [r4, #16]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	615a      	str	r2, [r3, #20]
 800b7d2:	e7bb      	b.n	800b74c <__gethex+0x3c8>
 800b7d4:	6922      	ldr	r2, [r4, #16]
 800b7d6:	455a      	cmp	r2, fp
 800b7d8:	dd0b      	ble.n	800b7f2 <__gethex+0x46e>
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f7ff fd69 	bl	800b2b4 <rshift>
 800b7e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7e6:	3501      	adds	r5, #1
 800b7e8:	42ab      	cmp	r3, r5
 800b7ea:	f6ff aed0 	blt.w	800b58e <__gethex+0x20a>
 800b7ee:	2701      	movs	r7, #1
 800b7f0:	e7c0      	b.n	800b774 <__gethex+0x3f0>
 800b7f2:	f016 061f 	ands.w	r6, r6, #31
 800b7f6:	d0fa      	beq.n	800b7ee <__gethex+0x46a>
 800b7f8:	4453      	add	r3, sl
 800b7fa:	f1c6 0620 	rsb	r6, r6, #32
 800b7fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b802:	f000 f9dd 	bl	800bbc0 <__hi0bits>
 800b806:	42b0      	cmp	r0, r6
 800b808:	dbe7      	blt.n	800b7da <__gethex+0x456>
 800b80a:	e7f0      	b.n	800b7ee <__gethex+0x46a>
 800b80c:	0800e1e9 	.word	0x0800e1e9

0800b810 <L_shift>:
 800b810:	f1c2 0208 	rsb	r2, r2, #8
 800b814:	0092      	lsls	r2, r2, #2
 800b816:	b570      	push	{r4, r5, r6, lr}
 800b818:	f1c2 0620 	rsb	r6, r2, #32
 800b81c:	6843      	ldr	r3, [r0, #4]
 800b81e:	6804      	ldr	r4, [r0, #0]
 800b820:	fa03 f506 	lsl.w	r5, r3, r6
 800b824:	432c      	orrs	r4, r5
 800b826:	40d3      	lsrs	r3, r2
 800b828:	6004      	str	r4, [r0, #0]
 800b82a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b82e:	4288      	cmp	r0, r1
 800b830:	d3f4      	bcc.n	800b81c <L_shift+0xc>
 800b832:	bd70      	pop	{r4, r5, r6, pc}

0800b834 <__match>:
 800b834:	b530      	push	{r4, r5, lr}
 800b836:	6803      	ldr	r3, [r0, #0]
 800b838:	3301      	adds	r3, #1
 800b83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b83e:	b914      	cbnz	r4, 800b846 <__match+0x12>
 800b840:	6003      	str	r3, [r0, #0]
 800b842:	2001      	movs	r0, #1
 800b844:	bd30      	pop	{r4, r5, pc}
 800b846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b84a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b84e:	2d19      	cmp	r5, #25
 800b850:	bf98      	it	ls
 800b852:	3220      	addls	r2, #32
 800b854:	42a2      	cmp	r2, r4
 800b856:	d0f0      	beq.n	800b83a <__match+0x6>
 800b858:	2000      	movs	r0, #0
 800b85a:	e7f3      	b.n	800b844 <__match+0x10>

0800b85c <__hexnan>:
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	680b      	ldr	r3, [r1, #0]
 800b862:	115e      	asrs	r6, r3, #5
 800b864:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b868:	f013 031f 	ands.w	r3, r3, #31
 800b86c:	b087      	sub	sp, #28
 800b86e:	bf18      	it	ne
 800b870:	3604      	addne	r6, #4
 800b872:	2500      	movs	r5, #0
 800b874:	1f37      	subs	r7, r6, #4
 800b876:	4690      	mov	r8, r2
 800b878:	6802      	ldr	r2, [r0, #0]
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	4682      	mov	sl, r0
 800b87e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b882:	46b9      	mov	r9, r7
 800b884:	463c      	mov	r4, r7
 800b886:	9502      	str	r5, [sp, #8]
 800b888:	46ab      	mov	fp, r5
 800b88a:	7851      	ldrb	r1, [r2, #1]
 800b88c:	1c53      	adds	r3, r2, #1
 800b88e:	9303      	str	r3, [sp, #12]
 800b890:	b341      	cbz	r1, 800b8e4 <__hexnan+0x88>
 800b892:	4608      	mov	r0, r1
 800b894:	9205      	str	r2, [sp, #20]
 800b896:	9104      	str	r1, [sp, #16]
 800b898:	f7ff fd5e 	bl	800b358 <__hexdig_fun>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d14f      	bne.n	800b940 <__hexnan+0xe4>
 800b8a0:	9904      	ldr	r1, [sp, #16]
 800b8a2:	9a05      	ldr	r2, [sp, #20]
 800b8a4:	2920      	cmp	r1, #32
 800b8a6:	d818      	bhi.n	800b8da <__hexnan+0x7e>
 800b8a8:	9b02      	ldr	r3, [sp, #8]
 800b8aa:	459b      	cmp	fp, r3
 800b8ac:	dd13      	ble.n	800b8d6 <__hexnan+0x7a>
 800b8ae:	454c      	cmp	r4, r9
 800b8b0:	d206      	bcs.n	800b8c0 <__hexnan+0x64>
 800b8b2:	2d07      	cmp	r5, #7
 800b8b4:	dc04      	bgt.n	800b8c0 <__hexnan+0x64>
 800b8b6:	462a      	mov	r2, r5
 800b8b8:	4649      	mov	r1, r9
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f7ff ffa8 	bl	800b810 <L_shift>
 800b8c0:	4544      	cmp	r4, r8
 800b8c2:	d950      	bls.n	800b966 <__hexnan+0x10a>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f1a4 0904 	sub.w	r9, r4, #4
 800b8ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8ce:	f8cd b008 	str.w	fp, [sp, #8]
 800b8d2:	464c      	mov	r4, r9
 800b8d4:	461d      	mov	r5, r3
 800b8d6:	9a03      	ldr	r2, [sp, #12]
 800b8d8:	e7d7      	b.n	800b88a <__hexnan+0x2e>
 800b8da:	2929      	cmp	r1, #41	; 0x29
 800b8dc:	d156      	bne.n	800b98c <__hexnan+0x130>
 800b8de:	3202      	adds	r2, #2
 800b8e0:	f8ca 2000 	str.w	r2, [sl]
 800b8e4:	f1bb 0f00 	cmp.w	fp, #0
 800b8e8:	d050      	beq.n	800b98c <__hexnan+0x130>
 800b8ea:	454c      	cmp	r4, r9
 800b8ec:	d206      	bcs.n	800b8fc <__hexnan+0xa0>
 800b8ee:	2d07      	cmp	r5, #7
 800b8f0:	dc04      	bgt.n	800b8fc <__hexnan+0xa0>
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4649      	mov	r1, r9
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7ff ff8a 	bl	800b810 <L_shift>
 800b8fc:	4544      	cmp	r4, r8
 800b8fe:	d934      	bls.n	800b96a <__hexnan+0x10e>
 800b900:	f1a8 0204 	sub.w	r2, r8, #4
 800b904:	4623      	mov	r3, r4
 800b906:	f853 1b04 	ldr.w	r1, [r3], #4
 800b90a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b90e:	429f      	cmp	r7, r3
 800b910:	d2f9      	bcs.n	800b906 <__hexnan+0xaa>
 800b912:	1b3b      	subs	r3, r7, r4
 800b914:	f023 0303 	bic.w	r3, r3, #3
 800b918:	3304      	adds	r3, #4
 800b91a:	3401      	adds	r4, #1
 800b91c:	3e03      	subs	r6, #3
 800b91e:	42b4      	cmp	r4, r6
 800b920:	bf88      	it	hi
 800b922:	2304      	movhi	r3, #4
 800b924:	4443      	add	r3, r8
 800b926:	2200      	movs	r2, #0
 800b928:	f843 2b04 	str.w	r2, [r3], #4
 800b92c:	429f      	cmp	r7, r3
 800b92e:	d2fb      	bcs.n	800b928 <__hexnan+0xcc>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	b91b      	cbnz	r3, 800b93c <__hexnan+0xe0>
 800b934:	4547      	cmp	r7, r8
 800b936:	d127      	bne.n	800b988 <__hexnan+0x12c>
 800b938:	2301      	movs	r3, #1
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	2005      	movs	r0, #5
 800b93e:	e026      	b.n	800b98e <__hexnan+0x132>
 800b940:	3501      	adds	r5, #1
 800b942:	2d08      	cmp	r5, #8
 800b944:	f10b 0b01 	add.w	fp, fp, #1
 800b948:	dd06      	ble.n	800b958 <__hexnan+0xfc>
 800b94a:	4544      	cmp	r4, r8
 800b94c:	d9c3      	bls.n	800b8d6 <__hexnan+0x7a>
 800b94e:	2300      	movs	r3, #0
 800b950:	f844 3c04 	str.w	r3, [r4, #-4]
 800b954:	2501      	movs	r5, #1
 800b956:	3c04      	subs	r4, #4
 800b958:	6822      	ldr	r2, [r4, #0]
 800b95a:	f000 000f 	and.w	r0, r0, #15
 800b95e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b962:	6022      	str	r2, [r4, #0]
 800b964:	e7b7      	b.n	800b8d6 <__hexnan+0x7a>
 800b966:	2508      	movs	r5, #8
 800b968:	e7b5      	b.n	800b8d6 <__hexnan+0x7a>
 800b96a:	9b01      	ldr	r3, [sp, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0df      	beq.n	800b930 <__hexnan+0xd4>
 800b970:	f04f 32ff 	mov.w	r2, #4294967295
 800b974:	f1c3 0320 	rsb	r3, r3, #32
 800b978:	fa22 f303 	lsr.w	r3, r2, r3
 800b97c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b980:	401a      	ands	r2, r3
 800b982:	f846 2c04 	str.w	r2, [r6, #-4]
 800b986:	e7d3      	b.n	800b930 <__hexnan+0xd4>
 800b988:	3f04      	subs	r7, #4
 800b98a:	e7d1      	b.n	800b930 <__hexnan+0xd4>
 800b98c:	2004      	movs	r0, #4
 800b98e:	b007      	add	sp, #28
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b994 <_lseek_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_lseek_r+0x20>)
 800b998:	4604      	mov	r4, r0
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	2200      	movs	r2, #0
 800b9a0:	602a      	str	r2, [r5, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f7f6 f962 	bl	8001c6c <_lseek>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_lseek_r+0x1e>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_lseek_r+0x1e>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	20002538 	.word	0x20002538

0800b9b8 <__ascii_mbtowc>:
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	b901      	cbnz	r1, 800b9be <__ascii_mbtowc+0x6>
 800b9bc:	a901      	add	r1, sp, #4
 800b9be:	b142      	cbz	r2, 800b9d2 <__ascii_mbtowc+0x1a>
 800b9c0:	b14b      	cbz	r3, 800b9d6 <__ascii_mbtowc+0x1e>
 800b9c2:	7813      	ldrb	r3, [r2, #0]
 800b9c4:	600b      	str	r3, [r1, #0]
 800b9c6:	7812      	ldrb	r2, [r2, #0]
 800b9c8:	1e10      	subs	r0, r2, #0
 800b9ca:	bf18      	it	ne
 800b9cc:	2001      	movne	r0, #1
 800b9ce:	b002      	add	sp, #8
 800b9d0:	4770      	bx	lr
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	e7fb      	b.n	800b9ce <__ascii_mbtowc+0x16>
 800b9d6:	f06f 0001 	mvn.w	r0, #1
 800b9da:	e7f8      	b.n	800b9ce <__ascii_mbtowc+0x16>

0800b9dc <_Balloc>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	460d      	mov	r5, r1
 800b9e4:	b976      	cbnz	r6, 800ba04 <_Balloc+0x28>
 800b9e6:	2010      	movs	r0, #16
 800b9e8:	f001 fe94 	bl	800d714 <malloc>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	6260      	str	r0, [r4, #36]	; 0x24
 800b9f0:	b920      	cbnz	r0, 800b9fc <_Balloc+0x20>
 800b9f2:	4b18      	ldr	r3, [pc, #96]	; (800ba54 <_Balloc+0x78>)
 800b9f4:	4818      	ldr	r0, [pc, #96]	; (800ba58 <_Balloc+0x7c>)
 800b9f6:	2166      	movs	r1, #102	; 0x66
 800b9f8:	f001 fca2 	bl	800d340 <__assert_func>
 800b9fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba00:	6006      	str	r6, [r0, #0]
 800ba02:	60c6      	str	r6, [r0, #12]
 800ba04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba06:	68f3      	ldr	r3, [r6, #12]
 800ba08:	b183      	cbz	r3, 800ba2c <_Balloc+0x50>
 800ba0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba12:	b9b8      	cbnz	r0, 800ba44 <_Balloc+0x68>
 800ba14:	2101      	movs	r1, #1
 800ba16:	fa01 f605 	lsl.w	r6, r1, r5
 800ba1a:	1d72      	adds	r2, r6, #5
 800ba1c:	0092      	lsls	r2, r2, #2
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fc9d 	bl	800c35e <_calloc_r>
 800ba24:	b160      	cbz	r0, 800ba40 <_Balloc+0x64>
 800ba26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba2a:	e00e      	b.n	800ba4a <_Balloc+0x6e>
 800ba2c:	2221      	movs	r2, #33	; 0x21
 800ba2e:	2104      	movs	r1, #4
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 fc94 	bl	800c35e <_calloc_r>
 800ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba38:	60f0      	str	r0, [r6, #12]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e4      	bne.n	800ba0a <_Balloc+0x2e>
 800ba40:	2000      	movs	r0, #0
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	6802      	ldr	r2, [r0, #0]
 800ba46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba50:	e7f7      	b.n	800ba42 <_Balloc+0x66>
 800ba52:	bf00      	nop
 800ba54:	0800e274 	.word	0x0800e274
 800ba58:	0800e28b 	.word	0x0800e28b

0800ba5c <_Bfree>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba60:	4605      	mov	r5, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	b976      	cbnz	r6, 800ba84 <_Bfree+0x28>
 800ba66:	2010      	movs	r0, #16
 800ba68:	f001 fe54 	bl	800d714 <malloc>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	6268      	str	r0, [r5, #36]	; 0x24
 800ba70:	b920      	cbnz	r0, 800ba7c <_Bfree+0x20>
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <_Bfree+0x3c>)
 800ba74:	4809      	ldr	r0, [pc, #36]	; (800ba9c <_Bfree+0x40>)
 800ba76:	218a      	movs	r1, #138	; 0x8a
 800ba78:	f001 fc62 	bl	800d340 <__assert_func>
 800ba7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba80:	6006      	str	r6, [r0, #0]
 800ba82:	60c6      	str	r6, [r0, #12]
 800ba84:	b13c      	cbz	r4, 800ba96 <_Bfree+0x3a>
 800ba86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba88:	6862      	ldr	r2, [r4, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba90:	6021      	str	r1, [r4, #0]
 800ba92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	0800e274 	.word	0x0800e274
 800ba9c:	0800e28b 	.word	0x0800e28b

0800baa0 <__multadd>:
 800baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa4:	690d      	ldr	r5, [r1, #16]
 800baa6:	4607      	mov	r7, r0
 800baa8:	460c      	mov	r4, r1
 800baaa:	461e      	mov	r6, r3
 800baac:	f101 0c14 	add.w	ip, r1, #20
 800bab0:	2000      	movs	r0, #0
 800bab2:	f8dc 3000 	ldr.w	r3, [ip]
 800bab6:	b299      	uxth	r1, r3
 800bab8:	fb02 6101 	mla	r1, r2, r1, r6
 800babc:	0c1e      	lsrs	r6, r3, #16
 800babe:	0c0b      	lsrs	r3, r1, #16
 800bac0:	fb02 3306 	mla	r3, r2, r6, r3
 800bac4:	b289      	uxth	r1, r1
 800bac6:	3001      	adds	r0, #1
 800bac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bacc:	4285      	cmp	r5, r0
 800bace:	f84c 1b04 	str.w	r1, [ip], #4
 800bad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bad6:	dcec      	bgt.n	800bab2 <__multadd+0x12>
 800bad8:	b30e      	cbz	r6, 800bb1e <__multadd+0x7e>
 800bada:	68a3      	ldr	r3, [r4, #8]
 800badc:	42ab      	cmp	r3, r5
 800bade:	dc19      	bgt.n	800bb14 <__multadd+0x74>
 800bae0:	6861      	ldr	r1, [r4, #4]
 800bae2:	4638      	mov	r0, r7
 800bae4:	3101      	adds	r1, #1
 800bae6:	f7ff ff79 	bl	800b9dc <_Balloc>
 800baea:	4680      	mov	r8, r0
 800baec:	b928      	cbnz	r0, 800bafa <__multadd+0x5a>
 800baee:	4602      	mov	r2, r0
 800baf0:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <__multadd+0x84>)
 800baf2:	480d      	ldr	r0, [pc, #52]	; (800bb28 <__multadd+0x88>)
 800baf4:	21b5      	movs	r1, #181	; 0xb5
 800baf6:	f001 fc23 	bl	800d340 <__assert_func>
 800bafa:	6922      	ldr	r2, [r4, #16]
 800bafc:	3202      	adds	r2, #2
 800bafe:	f104 010c 	add.w	r1, r4, #12
 800bb02:	0092      	lsls	r2, r2, #2
 800bb04:	300c      	adds	r0, #12
 800bb06:	f7fe fa3b 	bl	8009f80 <memcpy>
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7ff ffa5 	bl	800ba5c <_Bfree>
 800bb12:	4644      	mov	r4, r8
 800bb14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb18:	3501      	adds	r5, #1
 800bb1a:	615e      	str	r6, [r3, #20]
 800bb1c:	6125      	str	r5, [r4, #16]
 800bb1e:	4620      	mov	r0, r4
 800bb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb24:	0800e1e9 	.word	0x0800e1e9
 800bb28:	0800e28b 	.word	0x0800e28b

0800bb2c <__s2b>:
 800bb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb30:	460c      	mov	r4, r1
 800bb32:	4615      	mov	r5, r2
 800bb34:	461f      	mov	r7, r3
 800bb36:	2209      	movs	r2, #9
 800bb38:	3308      	adds	r3, #8
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb40:	2100      	movs	r1, #0
 800bb42:	2201      	movs	r2, #1
 800bb44:	429a      	cmp	r2, r3
 800bb46:	db09      	blt.n	800bb5c <__s2b+0x30>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7ff ff47 	bl	800b9dc <_Balloc>
 800bb4e:	b940      	cbnz	r0, 800bb62 <__s2b+0x36>
 800bb50:	4602      	mov	r2, r0
 800bb52:	4b19      	ldr	r3, [pc, #100]	; (800bbb8 <__s2b+0x8c>)
 800bb54:	4819      	ldr	r0, [pc, #100]	; (800bbbc <__s2b+0x90>)
 800bb56:	21ce      	movs	r1, #206	; 0xce
 800bb58:	f001 fbf2 	bl	800d340 <__assert_func>
 800bb5c:	0052      	lsls	r2, r2, #1
 800bb5e:	3101      	adds	r1, #1
 800bb60:	e7f0      	b.n	800bb44 <__s2b+0x18>
 800bb62:	9b08      	ldr	r3, [sp, #32]
 800bb64:	6143      	str	r3, [r0, #20]
 800bb66:	2d09      	cmp	r5, #9
 800bb68:	f04f 0301 	mov.w	r3, #1
 800bb6c:	6103      	str	r3, [r0, #16]
 800bb6e:	dd16      	ble.n	800bb9e <__s2b+0x72>
 800bb70:	f104 0909 	add.w	r9, r4, #9
 800bb74:	46c8      	mov	r8, r9
 800bb76:	442c      	add	r4, r5
 800bb78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	3b30      	subs	r3, #48	; 0x30
 800bb80:	220a      	movs	r2, #10
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ff8c 	bl	800baa0 <__multadd>
 800bb88:	45a0      	cmp	r8, r4
 800bb8a:	d1f5      	bne.n	800bb78 <__s2b+0x4c>
 800bb8c:	f1a5 0408 	sub.w	r4, r5, #8
 800bb90:	444c      	add	r4, r9
 800bb92:	1b2d      	subs	r5, r5, r4
 800bb94:	1963      	adds	r3, r4, r5
 800bb96:	42bb      	cmp	r3, r7
 800bb98:	db04      	blt.n	800bba4 <__s2b+0x78>
 800bb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9e:	340a      	adds	r4, #10
 800bba0:	2509      	movs	r5, #9
 800bba2:	e7f6      	b.n	800bb92 <__s2b+0x66>
 800bba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bba8:	4601      	mov	r1, r0
 800bbaa:	3b30      	subs	r3, #48	; 0x30
 800bbac:	220a      	movs	r2, #10
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff ff76 	bl	800baa0 <__multadd>
 800bbb4:	e7ee      	b.n	800bb94 <__s2b+0x68>
 800bbb6:	bf00      	nop
 800bbb8:	0800e1e9 	.word	0x0800e1e9
 800bbbc:	0800e28b 	.word	0x0800e28b

0800bbc0 <__hi0bits>:
 800bbc0:	0c03      	lsrs	r3, r0, #16
 800bbc2:	041b      	lsls	r3, r3, #16
 800bbc4:	b9d3      	cbnz	r3, 800bbfc <__hi0bits+0x3c>
 800bbc6:	0400      	lsls	r0, r0, #16
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbce:	bf04      	itt	eq
 800bbd0:	0200      	lsleq	r0, r0, #8
 800bbd2:	3308      	addeq	r3, #8
 800bbd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbd8:	bf04      	itt	eq
 800bbda:	0100      	lsleq	r0, r0, #4
 800bbdc:	3304      	addeq	r3, #4
 800bbde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbe2:	bf04      	itt	eq
 800bbe4:	0080      	lsleq	r0, r0, #2
 800bbe6:	3302      	addeq	r3, #2
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	db05      	blt.n	800bbf8 <__hi0bits+0x38>
 800bbec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbf0:	f103 0301 	add.w	r3, r3, #1
 800bbf4:	bf08      	it	eq
 800bbf6:	2320      	moveq	r3, #32
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	4770      	bx	lr
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e7e4      	b.n	800bbca <__hi0bits+0xa>

0800bc00 <__lo0bits>:
 800bc00:	6803      	ldr	r3, [r0, #0]
 800bc02:	f013 0207 	ands.w	r2, r3, #7
 800bc06:	4601      	mov	r1, r0
 800bc08:	d00b      	beq.n	800bc22 <__lo0bits+0x22>
 800bc0a:	07da      	lsls	r2, r3, #31
 800bc0c:	d423      	bmi.n	800bc56 <__lo0bits+0x56>
 800bc0e:	0798      	lsls	r0, r3, #30
 800bc10:	bf49      	itett	mi
 800bc12:	085b      	lsrmi	r3, r3, #1
 800bc14:	089b      	lsrpl	r3, r3, #2
 800bc16:	2001      	movmi	r0, #1
 800bc18:	600b      	strmi	r3, [r1, #0]
 800bc1a:	bf5c      	itt	pl
 800bc1c:	600b      	strpl	r3, [r1, #0]
 800bc1e:	2002      	movpl	r0, #2
 800bc20:	4770      	bx	lr
 800bc22:	b298      	uxth	r0, r3
 800bc24:	b9a8      	cbnz	r0, 800bc52 <__lo0bits+0x52>
 800bc26:	0c1b      	lsrs	r3, r3, #16
 800bc28:	2010      	movs	r0, #16
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	b90a      	cbnz	r2, 800bc32 <__lo0bits+0x32>
 800bc2e:	3008      	adds	r0, #8
 800bc30:	0a1b      	lsrs	r3, r3, #8
 800bc32:	071a      	lsls	r2, r3, #28
 800bc34:	bf04      	itt	eq
 800bc36:	091b      	lsreq	r3, r3, #4
 800bc38:	3004      	addeq	r0, #4
 800bc3a:	079a      	lsls	r2, r3, #30
 800bc3c:	bf04      	itt	eq
 800bc3e:	089b      	lsreq	r3, r3, #2
 800bc40:	3002      	addeq	r0, #2
 800bc42:	07da      	lsls	r2, r3, #31
 800bc44:	d403      	bmi.n	800bc4e <__lo0bits+0x4e>
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	f100 0001 	add.w	r0, r0, #1
 800bc4c:	d005      	beq.n	800bc5a <__lo0bits+0x5a>
 800bc4e:	600b      	str	r3, [r1, #0]
 800bc50:	4770      	bx	lr
 800bc52:	4610      	mov	r0, r2
 800bc54:	e7e9      	b.n	800bc2a <__lo0bits+0x2a>
 800bc56:	2000      	movs	r0, #0
 800bc58:	4770      	bx	lr
 800bc5a:	2020      	movs	r0, #32
 800bc5c:	4770      	bx	lr
	...

0800bc60 <__i2b>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	460c      	mov	r4, r1
 800bc64:	2101      	movs	r1, #1
 800bc66:	f7ff feb9 	bl	800b9dc <_Balloc>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	b928      	cbnz	r0, 800bc7a <__i2b+0x1a>
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <__i2b+0x24>)
 800bc70:	4805      	ldr	r0, [pc, #20]	; (800bc88 <__i2b+0x28>)
 800bc72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc76:	f001 fb63 	bl	800d340 <__assert_func>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	6144      	str	r4, [r0, #20]
 800bc7e:	6103      	str	r3, [r0, #16]
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	bf00      	nop
 800bc84:	0800e1e9 	.word	0x0800e1e9
 800bc88:	0800e28b 	.word	0x0800e28b

0800bc8c <__multiply>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	4691      	mov	r9, r2
 800bc92:	690a      	ldr	r2, [r1, #16]
 800bc94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	bfb8      	it	lt
 800bc9c:	460b      	movlt	r3, r1
 800bc9e:	460c      	mov	r4, r1
 800bca0:	bfbc      	itt	lt
 800bca2:	464c      	movlt	r4, r9
 800bca4:	4699      	movlt	r9, r3
 800bca6:	6927      	ldr	r7, [r4, #16]
 800bca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcac:	68a3      	ldr	r3, [r4, #8]
 800bcae:	6861      	ldr	r1, [r4, #4]
 800bcb0:	eb07 060a 	add.w	r6, r7, sl
 800bcb4:	42b3      	cmp	r3, r6
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	bfb8      	it	lt
 800bcba:	3101      	addlt	r1, #1
 800bcbc:	f7ff fe8e 	bl	800b9dc <_Balloc>
 800bcc0:	b930      	cbnz	r0, 800bcd0 <__multiply+0x44>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	4b44      	ldr	r3, [pc, #272]	; (800bdd8 <__multiply+0x14c>)
 800bcc6:	4845      	ldr	r0, [pc, #276]	; (800bddc <__multiply+0x150>)
 800bcc8:	f240 115d 	movw	r1, #349	; 0x15d
 800bccc:	f001 fb38 	bl	800d340 <__assert_func>
 800bcd0:	f100 0514 	add.w	r5, r0, #20
 800bcd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcd8:	462b      	mov	r3, r5
 800bcda:	2200      	movs	r2, #0
 800bcdc:	4543      	cmp	r3, r8
 800bcde:	d321      	bcc.n	800bd24 <__multiply+0x98>
 800bce0:	f104 0314 	add.w	r3, r4, #20
 800bce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bce8:	f109 0314 	add.w	r3, r9, #20
 800bcec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcf0:	9202      	str	r2, [sp, #8]
 800bcf2:	1b3a      	subs	r2, r7, r4
 800bcf4:	3a15      	subs	r2, #21
 800bcf6:	f022 0203 	bic.w	r2, r2, #3
 800bcfa:	3204      	adds	r2, #4
 800bcfc:	f104 0115 	add.w	r1, r4, #21
 800bd00:	428f      	cmp	r7, r1
 800bd02:	bf38      	it	cc
 800bd04:	2204      	movcc	r2, #4
 800bd06:	9201      	str	r2, [sp, #4]
 800bd08:	9a02      	ldr	r2, [sp, #8]
 800bd0a:	9303      	str	r3, [sp, #12]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d80c      	bhi.n	800bd2a <__multiply+0x9e>
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	dd03      	ble.n	800bd1c <__multiply+0x90>
 800bd14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d05a      	beq.n	800bdd2 <__multiply+0x146>
 800bd1c:	6106      	str	r6, [r0, #16]
 800bd1e:	b005      	add	sp, #20
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	f843 2b04 	str.w	r2, [r3], #4
 800bd28:	e7d8      	b.n	800bcdc <__multiply+0x50>
 800bd2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd2e:	f1ba 0f00 	cmp.w	sl, #0
 800bd32:	d024      	beq.n	800bd7e <__multiply+0xf2>
 800bd34:	f104 0e14 	add.w	lr, r4, #20
 800bd38:	46a9      	mov	r9, r5
 800bd3a:	f04f 0c00 	mov.w	ip, #0
 800bd3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd42:	f8d9 1000 	ldr.w	r1, [r9]
 800bd46:	fa1f fb82 	uxth.w	fp, r2
 800bd4a:	b289      	uxth	r1, r1
 800bd4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd54:	f8d9 2000 	ldr.w	r2, [r9]
 800bd58:	4461      	add	r1, ip
 800bd5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd66:	b289      	uxth	r1, r1
 800bd68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd6c:	4577      	cmp	r7, lr
 800bd6e:	f849 1b04 	str.w	r1, [r9], #4
 800bd72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd76:	d8e2      	bhi.n	800bd3e <__multiply+0xb2>
 800bd78:	9a01      	ldr	r2, [sp, #4]
 800bd7a:	f845 c002 	str.w	ip, [r5, r2]
 800bd7e:	9a03      	ldr	r2, [sp, #12]
 800bd80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd84:	3304      	adds	r3, #4
 800bd86:	f1b9 0f00 	cmp.w	r9, #0
 800bd8a:	d020      	beq.n	800bdce <__multiply+0x142>
 800bd8c:	6829      	ldr	r1, [r5, #0]
 800bd8e:	f104 0c14 	add.w	ip, r4, #20
 800bd92:	46ae      	mov	lr, r5
 800bd94:	f04f 0a00 	mov.w	sl, #0
 800bd98:	f8bc b000 	ldrh.w	fp, [ip]
 800bd9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bda0:	fb09 220b 	mla	r2, r9, fp, r2
 800bda4:	4492      	add	sl, r2
 800bda6:	b289      	uxth	r1, r1
 800bda8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bdac:	f84e 1b04 	str.w	r1, [lr], #4
 800bdb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdb4:	f8be 1000 	ldrh.w	r1, [lr]
 800bdb8:	0c12      	lsrs	r2, r2, #16
 800bdba:	fb09 1102 	mla	r1, r9, r2, r1
 800bdbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdc2:	4567      	cmp	r7, ip
 800bdc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdc8:	d8e6      	bhi.n	800bd98 <__multiply+0x10c>
 800bdca:	9a01      	ldr	r2, [sp, #4]
 800bdcc:	50a9      	str	r1, [r5, r2]
 800bdce:	3504      	adds	r5, #4
 800bdd0:	e79a      	b.n	800bd08 <__multiply+0x7c>
 800bdd2:	3e01      	subs	r6, #1
 800bdd4:	e79c      	b.n	800bd10 <__multiply+0x84>
 800bdd6:	bf00      	nop
 800bdd8:	0800e1e9 	.word	0x0800e1e9
 800bddc:	0800e28b 	.word	0x0800e28b

0800bde0 <__pow5mult>:
 800bde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde4:	4615      	mov	r5, r2
 800bde6:	f012 0203 	ands.w	r2, r2, #3
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	d007      	beq.n	800be00 <__pow5mult+0x20>
 800bdf0:	4c25      	ldr	r4, [pc, #148]	; (800be88 <__pow5mult+0xa8>)
 800bdf2:	3a01      	subs	r2, #1
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdfa:	f7ff fe51 	bl	800baa0 <__multadd>
 800bdfe:	4607      	mov	r7, r0
 800be00:	10ad      	asrs	r5, r5, #2
 800be02:	d03d      	beq.n	800be80 <__pow5mult+0xa0>
 800be04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be06:	b97c      	cbnz	r4, 800be28 <__pow5mult+0x48>
 800be08:	2010      	movs	r0, #16
 800be0a:	f001 fc83 	bl	800d714 <malloc>
 800be0e:	4602      	mov	r2, r0
 800be10:	6270      	str	r0, [r6, #36]	; 0x24
 800be12:	b928      	cbnz	r0, 800be20 <__pow5mult+0x40>
 800be14:	4b1d      	ldr	r3, [pc, #116]	; (800be8c <__pow5mult+0xac>)
 800be16:	481e      	ldr	r0, [pc, #120]	; (800be90 <__pow5mult+0xb0>)
 800be18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be1c:	f001 fa90 	bl	800d340 <__assert_func>
 800be20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be24:	6004      	str	r4, [r0, #0]
 800be26:	60c4      	str	r4, [r0, #12]
 800be28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be30:	b94c      	cbnz	r4, 800be46 <__pow5mult+0x66>
 800be32:	f240 2171 	movw	r1, #625	; 0x271
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff ff12 	bl	800bc60 <__i2b>
 800be3c:	2300      	movs	r3, #0
 800be3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be42:	4604      	mov	r4, r0
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	f04f 0900 	mov.w	r9, #0
 800be4a:	07eb      	lsls	r3, r5, #31
 800be4c:	d50a      	bpl.n	800be64 <__pow5mult+0x84>
 800be4e:	4639      	mov	r1, r7
 800be50:	4622      	mov	r2, r4
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ff1a 	bl	800bc8c <__multiply>
 800be58:	4639      	mov	r1, r7
 800be5a:	4680      	mov	r8, r0
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff fdfd 	bl	800ba5c <_Bfree>
 800be62:	4647      	mov	r7, r8
 800be64:	106d      	asrs	r5, r5, #1
 800be66:	d00b      	beq.n	800be80 <__pow5mult+0xa0>
 800be68:	6820      	ldr	r0, [r4, #0]
 800be6a:	b938      	cbnz	r0, 800be7c <__pow5mult+0x9c>
 800be6c:	4622      	mov	r2, r4
 800be6e:	4621      	mov	r1, r4
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff ff0b 	bl	800bc8c <__multiply>
 800be76:	6020      	str	r0, [r4, #0]
 800be78:	f8c0 9000 	str.w	r9, [r0]
 800be7c:	4604      	mov	r4, r0
 800be7e:	e7e4      	b.n	800be4a <__pow5mult+0x6a>
 800be80:	4638      	mov	r0, r7
 800be82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be86:	bf00      	nop
 800be88:	0800e3d8 	.word	0x0800e3d8
 800be8c:	0800e274 	.word	0x0800e274
 800be90:	0800e28b 	.word	0x0800e28b

0800be94 <__lshift>:
 800be94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be98:	460c      	mov	r4, r1
 800be9a:	6849      	ldr	r1, [r1, #4]
 800be9c:	6923      	ldr	r3, [r4, #16]
 800be9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	4607      	mov	r7, r0
 800bea6:	4691      	mov	r9, r2
 800bea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beac:	f108 0601 	add.w	r6, r8, #1
 800beb0:	42b3      	cmp	r3, r6
 800beb2:	db0b      	blt.n	800becc <__lshift+0x38>
 800beb4:	4638      	mov	r0, r7
 800beb6:	f7ff fd91 	bl	800b9dc <_Balloc>
 800beba:	4605      	mov	r5, r0
 800bebc:	b948      	cbnz	r0, 800bed2 <__lshift+0x3e>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b2a      	ldr	r3, [pc, #168]	; (800bf6c <__lshift+0xd8>)
 800bec2:	482b      	ldr	r0, [pc, #172]	; (800bf70 <__lshift+0xdc>)
 800bec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bec8:	f001 fa3a 	bl	800d340 <__assert_func>
 800becc:	3101      	adds	r1, #1
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	e7ee      	b.n	800beb0 <__lshift+0x1c>
 800bed2:	2300      	movs	r3, #0
 800bed4:	f100 0114 	add.w	r1, r0, #20
 800bed8:	f100 0210 	add.w	r2, r0, #16
 800bedc:	4618      	mov	r0, r3
 800bede:	4553      	cmp	r3, sl
 800bee0:	db37      	blt.n	800bf52 <__lshift+0xbe>
 800bee2:	6920      	ldr	r0, [r4, #16]
 800bee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bee8:	f104 0314 	add.w	r3, r4, #20
 800beec:	f019 091f 	ands.w	r9, r9, #31
 800bef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bef8:	d02f      	beq.n	800bf5a <__lshift+0xc6>
 800befa:	f1c9 0e20 	rsb	lr, r9, #32
 800befe:	468a      	mov	sl, r1
 800bf00:	f04f 0c00 	mov.w	ip, #0
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	fa02 f209 	lsl.w	r2, r2, r9
 800bf0a:	ea42 020c 	orr.w	r2, r2, ip
 800bf0e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf16:	4298      	cmp	r0, r3
 800bf18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf1c:	d8f2      	bhi.n	800bf04 <__lshift+0x70>
 800bf1e:	1b03      	subs	r3, r0, r4
 800bf20:	3b15      	subs	r3, #21
 800bf22:	f023 0303 	bic.w	r3, r3, #3
 800bf26:	3304      	adds	r3, #4
 800bf28:	f104 0215 	add.w	r2, r4, #21
 800bf2c:	4290      	cmp	r0, r2
 800bf2e:	bf38      	it	cc
 800bf30:	2304      	movcc	r3, #4
 800bf32:	f841 c003 	str.w	ip, [r1, r3]
 800bf36:	f1bc 0f00 	cmp.w	ip, #0
 800bf3a:	d001      	beq.n	800bf40 <__lshift+0xac>
 800bf3c:	f108 0602 	add.w	r6, r8, #2
 800bf40:	3e01      	subs	r6, #1
 800bf42:	4638      	mov	r0, r7
 800bf44:	612e      	str	r6, [r5, #16]
 800bf46:	4621      	mov	r1, r4
 800bf48:	f7ff fd88 	bl	800ba5c <_Bfree>
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf52:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf56:	3301      	adds	r3, #1
 800bf58:	e7c1      	b.n	800bede <__lshift+0x4a>
 800bf5a:	3904      	subs	r1, #4
 800bf5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf60:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf64:	4298      	cmp	r0, r3
 800bf66:	d8f9      	bhi.n	800bf5c <__lshift+0xc8>
 800bf68:	e7ea      	b.n	800bf40 <__lshift+0xac>
 800bf6a:	bf00      	nop
 800bf6c:	0800e1e9 	.word	0x0800e1e9
 800bf70:	0800e28b 	.word	0x0800e28b

0800bf74 <__mcmp>:
 800bf74:	b530      	push	{r4, r5, lr}
 800bf76:	6902      	ldr	r2, [r0, #16]
 800bf78:	690c      	ldr	r4, [r1, #16]
 800bf7a:	1b12      	subs	r2, r2, r4
 800bf7c:	d10e      	bne.n	800bf9c <__mcmp+0x28>
 800bf7e:	f100 0314 	add.w	r3, r0, #20
 800bf82:	3114      	adds	r1, #20
 800bf84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf94:	42a5      	cmp	r5, r4
 800bf96:	d003      	beq.n	800bfa0 <__mcmp+0x2c>
 800bf98:	d305      	bcc.n	800bfa6 <__mcmp+0x32>
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	bd30      	pop	{r4, r5, pc}
 800bfa0:	4283      	cmp	r3, r0
 800bfa2:	d3f3      	bcc.n	800bf8c <__mcmp+0x18>
 800bfa4:	e7fa      	b.n	800bf9c <__mcmp+0x28>
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	e7f7      	b.n	800bf9c <__mcmp+0x28>

0800bfac <__mdiff>:
 800bfac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4690      	mov	r8, r2
 800bfba:	f7ff ffdb 	bl	800bf74 <__mcmp>
 800bfbe:	1e05      	subs	r5, r0, #0
 800bfc0:	d110      	bne.n	800bfe4 <__mdiff+0x38>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff fd09 	bl	800b9dc <_Balloc>
 800bfca:	b930      	cbnz	r0, 800bfda <__mdiff+0x2e>
 800bfcc:	4b3a      	ldr	r3, [pc, #232]	; (800c0b8 <__mdiff+0x10c>)
 800bfce:	4602      	mov	r2, r0
 800bfd0:	f240 2132 	movw	r1, #562	; 0x232
 800bfd4:	4839      	ldr	r0, [pc, #228]	; (800c0bc <__mdiff+0x110>)
 800bfd6:	f001 f9b3 	bl	800d340 <__assert_func>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe4:	bfa4      	itt	ge
 800bfe6:	4643      	movge	r3, r8
 800bfe8:	46a0      	movge	r8, r4
 800bfea:	4630      	mov	r0, r6
 800bfec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bff0:	bfa6      	itte	ge
 800bff2:	461c      	movge	r4, r3
 800bff4:	2500      	movge	r5, #0
 800bff6:	2501      	movlt	r5, #1
 800bff8:	f7ff fcf0 	bl	800b9dc <_Balloc>
 800bffc:	b920      	cbnz	r0, 800c008 <__mdiff+0x5c>
 800bffe:	4b2e      	ldr	r3, [pc, #184]	; (800c0b8 <__mdiff+0x10c>)
 800c000:	4602      	mov	r2, r0
 800c002:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c006:	e7e5      	b.n	800bfd4 <__mdiff+0x28>
 800c008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c00c:	6926      	ldr	r6, [r4, #16]
 800c00e:	60c5      	str	r5, [r0, #12]
 800c010:	f104 0914 	add.w	r9, r4, #20
 800c014:	f108 0514 	add.w	r5, r8, #20
 800c018:	f100 0e14 	add.w	lr, r0, #20
 800c01c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c024:	f108 0210 	add.w	r2, r8, #16
 800c028:	46f2      	mov	sl, lr
 800c02a:	2100      	movs	r1, #0
 800c02c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c034:	fa1f f883 	uxth.w	r8, r3
 800c038:	fa11 f18b 	uxtah	r1, r1, fp
 800c03c:	0c1b      	lsrs	r3, r3, #16
 800c03e:	eba1 0808 	sub.w	r8, r1, r8
 800c042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c04a:	fa1f f888 	uxth.w	r8, r8
 800c04e:	1419      	asrs	r1, r3, #16
 800c050:	454e      	cmp	r6, r9
 800c052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c056:	f84a 3b04 	str.w	r3, [sl], #4
 800c05a:	d8e7      	bhi.n	800c02c <__mdiff+0x80>
 800c05c:	1b33      	subs	r3, r6, r4
 800c05e:	3b15      	subs	r3, #21
 800c060:	f023 0303 	bic.w	r3, r3, #3
 800c064:	3304      	adds	r3, #4
 800c066:	3415      	adds	r4, #21
 800c068:	42a6      	cmp	r6, r4
 800c06a:	bf38      	it	cc
 800c06c:	2304      	movcc	r3, #4
 800c06e:	441d      	add	r5, r3
 800c070:	4473      	add	r3, lr
 800c072:	469e      	mov	lr, r3
 800c074:	462e      	mov	r6, r5
 800c076:	4566      	cmp	r6, ip
 800c078:	d30e      	bcc.n	800c098 <__mdiff+0xec>
 800c07a:	f10c 0203 	add.w	r2, ip, #3
 800c07e:	1b52      	subs	r2, r2, r5
 800c080:	f022 0203 	bic.w	r2, r2, #3
 800c084:	3d03      	subs	r5, #3
 800c086:	45ac      	cmp	ip, r5
 800c088:	bf38      	it	cc
 800c08a:	2200      	movcc	r2, #0
 800c08c:	441a      	add	r2, r3
 800c08e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c092:	b17b      	cbz	r3, 800c0b4 <__mdiff+0x108>
 800c094:	6107      	str	r7, [r0, #16]
 800c096:	e7a3      	b.n	800bfe0 <__mdiff+0x34>
 800c098:	f856 8b04 	ldr.w	r8, [r6], #4
 800c09c:	fa11 f288 	uxtah	r2, r1, r8
 800c0a0:	1414      	asrs	r4, r2, #16
 800c0a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0a6:	b292      	uxth	r2, r2
 800c0a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c0b0:	1421      	asrs	r1, r4, #16
 800c0b2:	e7e0      	b.n	800c076 <__mdiff+0xca>
 800c0b4:	3f01      	subs	r7, #1
 800c0b6:	e7ea      	b.n	800c08e <__mdiff+0xe2>
 800c0b8:	0800e1e9 	.word	0x0800e1e9
 800c0bc:	0800e28b 	.word	0x0800e28b

0800c0c0 <__ulp>:
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	ed8d 0b00 	vstr	d0, [sp]
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	4912      	ldr	r1, [pc, #72]	; (800c114 <__ulp+0x54>)
 800c0ca:	4019      	ands	r1, r3
 800c0cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c0d0:	2900      	cmp	r1, #0
 800c0d2:	dd05      	ble.n	800c0e0 <__ulp+0x20>
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	ec43 2b10 	vmov	d0, r2, r3
 800c0dc:	b002      	add	sp, #8
 800c0de:	4770      	bx	lr
 800c0e0:	4249      	negs	r1, r1
 800c0e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c0e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c0ea:	f04f 0200 	mov.w	r2, #0
 800c0ee:	f04f 0300 	mov.w	r3, #0
 800c0f2:	da04      	bge.n	800c0fe <__ulp+0x3e>
 800c0f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c0f8:	fa41 f300 	asr.w	r3, r1, r0
 800c0fc:	e7ec      	b.n	800c0d8 <__ulp+0x18>
 800c0fe:	f1a0 0114 	sub.w	r1, r0, #20
 800c102:	291e      	cmp	r1, #30
 800c104:	bfda      	itte	le
 800c106:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c10a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c10e:	2101      	movgt	r1, #1
 800c110:	460a      	mov	r2, r1
 800c112:	e7e1      	b.n	800c0d8 <__ulp+0x18>
 800c114:	7ff00000 	.word	0x7ff00000

0800c118 <__b2d>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	6905      	ldr	r5, [r0, #16]
 800c11c:	f100 0714 	add.w	r7, r0, #20
 800c120:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c124:	1f2e      	subs	r6, r5, #4
 800c126:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c12a:	4620      	mov	r0, r4
 800c12c:	f7ff fd48 	bl	800bbc0 <__hi0bits>
 800c130:	f1c0 0320 	rsb	r3, r0, #32
 800c134:	280a      	cmp	r0, #10
 800c136:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1b4 <__b2d+0x9c>
 800c13a:	600b      	str	r3, [r1, #0]
 800c13c:	dc14      	bgt.n	800c168 <__b2d+0x50>
 800c13e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c142:	fa24 f10e 	lsr.w	r1, r4, lr
 800c146:	42b7      	cmp	r7, r6
 800c148:	ea41 030c 	orr.w	r3, r1, ip
 800c14c:	bf34      	ite	cc
 800c14e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c152:	2100      	movcs	r1, #0
 800c154:	3015      	adds	r0, #21
 800c156:	fa04 f000 	lsl.w	r0, r4, r0
 800c15a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c15e:	ea40 0201 	orr.w	r2, r0, r1
 800c162:	ec43 2b10 	vmov	d0, r2, r3
 800c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c168:	42b7      	cmp	r7, r6
 800c16a:	bf3a      	itte	cc
 800c16c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c170:	f1a5 0608 	subcc.w	r6, r5, #8
 800c174:	2100      	movcs	r1, #0
 800c176:	380b      	subs	r0, #11
 800c178:	d017      	beq.n	800c1aa <__b2d+0x92>
 800c17a:	f1c0 0c20 	rsb	ip, r0, #32
 800c17e:	fa04 f500 	lsl.w	r5, r4, r0
 800c182:	42be      	cmp	r6, r7
 800c184:	fa21 f40c 	lsr.w	r4, r1, ip
 800c188:	ea45 0504 	orr.w	r5, r5, r4
 800c18c:	bf8c      	ite	hi
 800c18e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c192:	2400      	movls	r4, #0
 800c194:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c198:	fa01 f000 	lsl.w	r0, r1, r0
 800c19c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1a4:	ea40 0204 	orr.w	r2, r0, r4
 800c1a8:	e7db      	b.n	800c162 <__b2d+0x4a>
 800c1aa:	ea44 030c 	orr.w	r3, r4, ip
 800c1ae:	460a      	mov	r2, r1
 800c1b0:	e7d7      	b.n	800c162 <__b2d+0x4a>
 800c1b2:	bf00      	nop
 800c1b4:	3ff00000 	.word	0x3ff00000

0800c1b8 <__d2b>:
 800c1b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	4689      	mov	r9, r1
 800c1be:	2101      	movs	r1, #1
 800c1c0:	ec57 6b10 	vmov	r6, r7, d0
 800c1c4:	4690      	mov	r8, r2
 800c1c6:	f7ff fc09 	bl	800b9dc <_Balloc>
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	b930      	cbnz	r0, 800c1dc <__d2b+0x24>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b25      	ldr	r3, [pc, #148]	; (800c268 <__d2b+0xb0>)
 800c1d2:	4826      	ldr	r0, [pc, #152]	; (800c26c <__d2b+0xb4>)
 800c1d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1d8:	f001 f8b2 	bl	800d340 <__assert_func>
 800c1dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1e4:	bb35      	cbnz	r5, 800c234 <__d2b+0x7c>
 800c1e6:	2e00      	cmp	r6, #0
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	d028      	beq.n	800c23e <__d2b+0x86>
 800c1ec:	4668      	mov	r0, sp
 800c1ee:	9600      	str	r6, [sp, #0]
 800c1f0:	f7ff fd06 	bl	800bc00 <__lo0bits>
 800c1f4:	9900      	ldr	r1, [sp, #0]
 800c1f6:	b300      	cbz	r0, 800c23a <__d2b+0x82>
 800c1f8:	9a01      	ldr	r2, [sp, #4]
 800c1fa:	f1c0 0320 	rsb	r3, r0, #32
 800c1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c202:	430b      	orrs	r3, r1
 800c204:	40c2      	lsrs	r2, r0
 800c206:	6163      	str	r3, [r4, #20]
 800c208:	9201      	str	r2, [sp, #4]
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	61a3      	str	r3, [r4, #24]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bf14      	ite	ne
 800c212:	2202      	movne	r2, #2
 800c214:	2201      	moveq	r2, #1
 800c216:	6122      	str	r2, [r4, #16]
 800c218:	b1d5      	cbz	r5, 800c250 <__d2b+0x98>
 800c21a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c21e:	4405      	add	r5, r0
 800c220:	f8c9 5000 	str.w	r5, [r9]
 800c224:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c228:	f8c8 0000 	str.w	r0, [r8]
 800c22c:	4620      	mov	r0, r4
 800c22e:	b003      	add	sp, #12
 800c230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c238:	e7d5      	b.n	800c1e6 <__d2b+0x2e>
 800c23a:	6161      	str	r1, [r4, #20]
 800c23c:	e7e5      	b.n	800c20a <__d2b+0x52>
 800c23e:	a801      	add	r0, sp, #4
 800c240:	f7ff fcde 	bl	800bc00 <__lo0bits>
 800c244:	9b01      	ldr	r3, [sp, #4]
 800c246:	6163      	str	r3, [r4, #20]
 800c248:	2201      	movs	r2, #1
 800c24a:	6122      	str	r2, [r4, #16]
 800c24c:	3020      	adds	r0, #32
 800c24e:	e7e3      	b.n	800c218 <__d2b+0x60>
 800c250:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c254:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c258:	f8c9 0000 	str.w	r0, [r9]
 800c25c:	6918      	ldr	r0, [r3, #16]
 800c25e:	f7ff fcaf 	bl	800bbc0 <__hi0bits>
 800c262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c266:	e7df      	b.n	800c228 <__d2b+0x70>
 800c268:	0800e1e9 	.word	0x0800e1e9
 800c26c:	0800e28b 	.word	0x0800e28b

0800c270 <__ratio>:
 800c270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	4688      	mov	r8, r1
 800c276:	4669      	mov	r1, sp
 800c278:	4681      	mov	r9, r0
 800c27a:	f7ff ff4d 	bl	800c118 <__b2d>
 800c27e:	a901      	add	r1, sp, #4
 800c280:	4640      	mov	r0, r8
 800c282:	ec55 4b10 	vmov	r4, r5, d0
 800c286:	f7ff ff47 	bl	800c118 <__b2d>
 800c28a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c28e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c292:	eba3 0c02 	sub.w	ip, r3, r2
 800c296:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2a0:	ec51 0b10 	vmov	r0, r1, d0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bfd6      	itet	le
 800c2a8:	460a      	movle	r2, r1
 800c2aa:	462a      	movgt	r2, r5
 800c2ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2b0:	468b      	mov	fp, r1
 800c2b2:	462f      	mov	r7, r5
 800c2b4:	bfd4      	ite	le
 800c2b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2be:	4620      	mov	r0, r4
 800c2c0:	ee10 2a10 	vmov	r2, s0
 800c2c4:	465b      	mov	r3, fp
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	f7f4 fae0 	bl	800088c <__aeabi_ddiv>
 800c2cc:	ec41 0b10 	vmov	d0, r0, r1
 800c2d0:	b003      	add	sp, #12
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2d6 <__copybits>:
 800c2d6:	3901      	subs	r1, #1
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	1149      	asrs	r1, r1, #5
 800c2dc:	6914      	ldr	r4, [r2, #16]
 800c2de:	3101      	adds	r1, #1
 800c2e0:	f102 0314 	add.w	r3, r2, #20
 800c2e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2ec:	1f05      	subs	r5, r0, #4
 800c2ee:	42a3      	cmp	r3, r4
 800c2f0:	d30c      	bcc.n	800c30c <__copybits+0x36>
 800c2f2:	1aa3      	subs	r3, r4, r2
 800c2f4:	3b11      	subs	r3, #17
 800c2f6:	f023 0303 	bic.w	r3, r3, #3
 800c2fa:	3211      	adds	r2, #17
 800c2fc:	42a2      	cmp	r2, r4
 800c2fe:	bf88      	it	hi
 800c300:	2300      	movhi	r3, #0
 800c302:	4418      	add	r0, r3
 800c304:	2300      	movs	r3, #0
 800c306:	4288      	cmp	r0, r1
 800c308:	d305      	bcc.n	800c316 <__copybits+0x40>
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c310:	f845 6f04 	str.w	r6, [r5, #4]!
 800c314:	e7eb      	b.n	800c2ee <__copybits+0x18>
 800c316:	f840 3b04 	str.w	r3, [r0], #4
 800c31a:	e7f4      	b.n	800c306 <__copybits+0x30>

0800c31c <__any_on>:
 800c31c:	f100 0214 	add.w	r2, r0, #20
 800c320:	6900      	ldr	r0, [r0, #16]
 800c322:	114b      	asrs	r3, r1, #5
 800c324:	4298      	cmp	r0, r3
 800c326:	b510      	push	{r4, lr}
 800c328:	db11      	blt.n	800c34e <__any_on+0x32>
 800c32a:	dd0a      	ble.n	800c342 <__any_on+0x26>
 800c32c:	f011 011f 	ands.w	r1, r1, #31
 800c330:	d007      	beq.n	800c342 <__any_on+0x26>
 800c332:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c336:	fa24 f001 	lsr.w	r0, r4, r1
 800c33a:	fa00 f101 	lsl.w	r1, r0, r1
 800c33e:	428c      	cmp	r4, r1
 800c340:	d10b      	bne.n	800c35a <__any_on+0x3e>
 800c342:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c346:	4293      	cmp	r3, r2
 800c348:	d803      	bhi.n	800c352 <__any_on+0x36>
 800c34a:	2000      	movs	r0, #0
 800c34c:	bd10      	pop	{r4, pc}
 800c34e:	4603      	mov	r3, r0
 800c350:	e7f7      	b.n	800c342 <__any_on+0x26>
 800c352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c356:	2900      	cmp	r1, #0
 800c358:	d0f5      	beq.n	800c346 <__any_on+0x2a>
 800c35a:	2001      	movs	r0, #1
 800c35c:	e7f6      	b.n	800c34c <__any_on+0x30>

0800c35e <_calloc_r>:
 800c35e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c360:	fba1 2402 	umull	r2, r4, r1, r2
 800c364:	b94c      	cbnz	r4, 800c37a <_calloc_r+0x1c>
 800c366:	4611      	mov	r1, r2
 800c368:	9201      	str	r2, [sp, #4]
 800c36a:	f000 f82f 	bl	800c3cc <_malloc_r>
 800c36e:	9a01      	ldr	r2, [sp, #4]
 800c370:	4605      	mov	r5, r0
 800c372:	b930      	cbnz	r0, 800c382 <_calloc_r+0x24>
 800c374:	4628      	mov	r0, r5
 800c376:	b003      	add	sp, #12
 800c378:	bd30      	pop	{r4, r5, pc}
 800c37a:	220c      	movs	r2, #12
 800c37c:	6002      	str	r2, [r0, #0]
 800c37e:	2500      	movs	r5, #0
 800c380:	e7f8      	b.n	800c374 <_calloc_r+0x16>
 800c382:	4621      	mov	r1, r4
 800c384:	f7fd fe0a 	bl	8009f9c <memset>
 800c388:	e7f4      	b.n	800c374 <_calloc_r+0x16>
	...

0800c38c <sbrk_aligned>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	4e0e      	ldr	r6, [pc, #56]	; (800c3c8 <sbrk_aligned+0x3c>)
 800c390:	460c      	mov	r4, r1
 800c392:	6831      	ldr	r1, [r6, #0]
 800c394:	4605      	mov	r5, r0
 800c396:	b911      	cbnz	r1, 800c39e <sbrk_aligned+0x12>
 800c398:	f000 feba 	bl	800d110 <_sbrk_r>
 800c39c:	6030      	str	r0, [r6, #0]
 800c39e:	4621      	mov	r1, r4
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f000 feb5 	bl	800d110 <_sbrk_r>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d00a      	beq.n	800c3c0 <sbrk_aligned+0x34>
 800c3aa:	1cc4      	adds	r4, r0, #3
 800c3ac:	f024 0403 	bic.w	r4, r4, #3
 800c3b0:	42a0      	cmp	r0, r4
 800c3b2:	d007      	beq.n	800c3c4 <sbrk_aligned+0x38>
 800c3b4:	1a21      	subs	r1, r4, r0
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 feaa 	bl	800d110 <_sbrk_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d101      	bne.n	800c3c4 <sbrk_aligned+0x38>
 800c3c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	20002534 	.word	0x20002534

0800c3cc <_malloc_r>:
 800c3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d0:	1ccd      	adds	r5, r1, #3
 800c3d2:	f025 0503 	bic.w	r5, r5, #3
 800c3d6:	3508      	adds	r5, #8
 800c3d8:	2d0c      	cmp	r5, #12
 800c3da:	bf38      	it	cc
 800c3dc:	250c      	movcc	r5, #12
 800c3de:	2d00      	cmp	r5, #0
 800c3e0:	4607      	mov	r7, r0
 800c3e2:	db01      	blt.n	800c3e8 <_malloc_r+0x1c>
 800c3e4:	42a9      	cmp	r1, r5
 800c3e6:	d905      	bls.n	800c3f4 <_malloc_r+0x28>
 800c3e8:	230c      	movs	r3, #12
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	2600      	movs	r6, #0
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f4:	4e2e      	ldr	r6, [pc, #184]	; (800c4b0 <_malloc_r+0xe4>)
 800c3f6:	f001 f9af 	bl	800d758 <__malloc_lock>
 800c3fa:	6833      	ldr	r3, [r6, #0]
 800c3fc:	461c      	mov	r4, r3
 800c3fe:	bb34      	cbnz	r4, 800c44e <_malloc_r+0x82>
 800c400:	4629      	mov	r1, r5
 800c402:	4638      	mov	r0, r7
 800c404:	f7ff ffc2 	bl	800c38c <sbrk_aligned>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	4604      	mov	r4, r0
 800c40c:	d14d      	bne.n	800c4aa <_malloc_r+0xde>
 800c40e:	6834      	ldr	r4, [r6, #0]
 800c410:	4626      	mov	r6, r4
 800c412:	2e00      	cmp	r6, #0
 800c414:	d140      	bne.n	800c498 <_malloc_r+0xcc>
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	4631      	mov	r1, r6
 800c41a:	4638      	mov	r0, r7
 800c41c:	eb04 0803 	add.w	r8, r4, r3
 800c420:	f000 fe76 	bl	800d110 <_sbrk_r>
 800c424:	4580      	cmp	r8, r0
 800c426:	d13a      	bne.n	800c49e <_malloc_r+0xd2>
 800c428:	6821      	ldr	r1, [r4, #0]
 800c42a:	3503      	adds	r5, #3
 800c42c:	1a6d      	subs	r5, r5, r1
 800c42e:	f025 0503 	bic.w	r5, r5, #3
 800c432:	3508      	adds	r5, #8
 800c434:	2d0c      	cmp	r5, #12
 800c436:	bf38      	it	cc
 800c438:	250c      	movcc	r5, #12
 800c43a:	4629      	mov	r1, r5
 800c43c:	4638      	mov	r0, r7
 800c43e:	f7ff ffa5 	bl	800c38c <sbrk_aligned>
 800c442:	3001      	adds	r0, #1
 800c444:	d02b      	beq.n	800c49e <_malloc_r+0xd2>
 800c446:	6823      	ldr	r3, [r4, #0]
 800c448:	442b      	add	r3, r5
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	e00e      	b.n	800c46c <_malloc_r+0xa0>
 800c44e:	6822      	ldr	r2, [r4, #0]
 800c450:	1b52      	subs	r2, r2, r5
 800c452:	d41e      	bmi.n	800c492 <_malloc_r+0xc6>
 800c454:	2a0b      	cmp	r2, #11
 800c456:	d916      	bls.n	800c486 <_malloc_r+0xba>
 800c458:	1961      	adds	r1, r4, r5
 800c45a:	42a3      	cmp	r3, r4
 800c45c:	6025      	str	r5, [r4, #0]
 800c45e:	bf18      	it	ne
 800c460:	6059      	strne	r1, [r3, #4]
 800c462:	6863      	ldr	r3, [r4, #4]
 800c464:	bf08      	it	eq
 800c466:	6031      	streq	r1, [r6, #0]
 800c468:	5162      	str	r2, [r4, r5]
 800c46a:	604b      	str	r3, [r1, #4]
 800c46c:	4638      	mov	r0, r7
 800c46e:	f104 060b 	add.w	r6, r4, #11
 800c472:	f001 f977 	bl	800d764 <__malloc_unlock>
 800c476:	f026 0607 	bic.w	r6, r6, #7
 800c47a:	1d23      	adds	r3, r4, #4
 800c47c:	1af2      	subs	r2, r6, r3
 800c47e:	d0b6      	beq.n	800c3ee <_malloc_r+0x22>
 800c480:	1b9b      	subs	r3, r3, r6
 800c482:	50a3      	str	r3, [r4, r2]
 800c484:	e7b3      	b.n	800c3ee <_malloc_r+0x22>
 800c486:	6862      	ldr	r2, [r4, #4]
 800c488:	42a3      	cmp	r3, r4
 800c48a:	bf0c      	ite	eq
 800c48c:	6032      	streq	r2, [r6, #0]
 800c48e:	605a      	strne	r2, [r3, #4]
 800c490:	e7ec      	b.n	800c46c <_malloc_r+0xa0>
 800c492:	4623      	mov	r3, r4
 800c494:	6864      	ldr	r4, [r4, #4]
 800c496:	e7b2      	b.n	800c3fe <_malloc_r+0x32>
 800c498:	4634      	mov	r4, r6
 800c49a:	6876      	ldr	r6, [r6, #4]
 800c49c:	e7b9      	b.n	800c412 <_malloc_r+0x46>
 800c49e:	230c      	movs	r3, #12
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f001 f95e 	bl	800d764 <__malloc_unlock>
 800c4a8:	e7a1      	b.n	800c3ee <_malloc_r+0x22>
 800c4aa:	6025      	str	r5, [r4, #0]
 800c4ac:	e7de      	b.n	800c46c <_malloc_r+0xa0>
 800c4ae:	bf00      	nop
 800c4b0:	20002530 	.word	0x20002530

0800c4b4 <__ssputs_r>:
 800c4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b8:	688e      	ldr	r6, [r1, #8]
 800c4ba:	429e      	cmp	r6, r3
 800c4bc:	4682      	mov	sl, r0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	4690      	mov	r8, r2
 800c4c2:	461f      	mov	r7, r3
 800c4c4:	d838      	bhi.n	800c538 <__ssputs_r+0x84>
 800c4c6:	898a      	ldrh	r2, [r1, #12]
 800c4c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4cc:	d032      	beq.n	800c534 <__ssputs_r+0x80>
 800c4ce:	6825      	ldr	r5, [r4, #0]
 800c4d0:	6909      	ldr	r1, [r1, #16]
 800c4d2:	eba5 0901 	sub.w	r9, r5, r1
 800c4d6:	6965      	ldr	r5, [r4, #20]
 800c4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	444b      	add	r3, r9
 800c4e4:	106d      	asrs	r5, r5, #1
 800c4e6:	429d      	cmp	r5, r3
 800c4e8:	bf38      	it	cc
 800c4ea:	461d      	movcc	r5, r3
 800c4ec:	0553      	lsls	r3, r2, #21
 800c4ee:	d531      	bpl.n	800c554 <__ssputs_r+0xa0>
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	f7ff ff6b 	bl	800c3cc <_malloc_r>
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	b950      	cbnz	r0, 800c510 <__ssputs_r+0x5c>
 800c4fa:	230c      	movs	r3, #12
 800c4fc:	f8ca 3000 	str.w	r3, [sl]
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c506:	81a3      	strh	r3, [r4, #12]
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c510:	6921      	ldr	r1, [r4, #16]
 800c512:	464a      	mov	r2, r9
 800c514:	f7fd fd34 	bl	8009f80 <memcpy>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	6126      	str	r6, [r4, #16]
 800c526:	6165      	str	r5, [r4, #20]
 800c528:	444e      	add	r6, r9
 800c52a:	eba5 0509 	sub.w	r5, r5, r9
 800c52e:	6026      	str	r6, [r4, #0]
 800c530:	60a5      	str	r5, [r4, #8]
 800c532:	463e      	mov	r6, r7
 800c534:	42be      	cmp	r6, r7
 800c536:	d900      	bls.n	800c53a <__ssputs_r+0x86>
 800c538:	463e      	mov	r6, r7
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	4632      	mov	r2, r6
 800c53e:	4641      	mov	r1, r8
 800c540:	f001 f8f0 	bl	800d724 <memmove>
 800c544:	68a3      	ldr	r3, [r4, #8]
 800c546:	1b9b      	subs	r3, r3, r6
 800c548:	60a3      	str	r3, [r4, #8]
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	4433      	add	r3, r6
 800c54e:	6023      	str	r3, [r4, #0]
 800c550:	2000      	movs	r0, #0
 800c552:	e7db      	b.n	800c50c <__ssputs_r+0x58>
 800c554:	462a      	mov	r2, r5
 800c556:	f001 f957 	bl	800d808 <_realloc_r>
 800c55a:	4606      	mov	r6, r0
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d1e1      	bne.n	800c524 <__ssputs_r+0x70>
 800c560:	6921      	ldr	r1, [r4, #16]
 800c562:	4650      	mov	r0, sl
 800c564:	f001 f904 	bl	800d770 <_free_r>
 800c568:	e7c7      	b.n	800c4fa <__ssputs_r+0x46>
	...

0800c56c <_svfiprintf_r>:
 800c56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c570:	4698      	mov	r8, r3
 800c572:	898b      	ldrh	r3, [r1, #12]
 800c574:	061b      	lsls	r3, r3, #24
 800c576:	b09d      	sub	sp, #116	; 0x74
 800c578:	4607      	mov	r7, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	4614      	mov	r4, r2
 800c57e:	d50e      	bpl.n	800c59e <_svfiprintf_r+0x32>
 800c580:	690b      	ldr	r3, [r1, #16]
 800c582:	b963      	cbnz	r3, 800c59e <_svfiprintf_r+0x32>
 800c584:	2140      	movs	r1, #64	; 0x40
 800c586:	f7ff ff21 	bl	800c3cc <_malloc_r>
 800c58a:	6028      	str	r0, [r5, #0]
 800c58c:	6128      	str	r0, [r5, #16]
 800c58e:	b920      	cbnz	r0, 800c59a <_svfiprintf_r+0x2e>
 800c590:	230c      	movs	r3, #12
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	e0d1      	b.n	800c73e <_svfiprintf_r+0x1d2>
 800c59a:	2340      	movs	r3, #64	; 0x40
 800c59c:	616b      	str	r3, [r5, #20]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a2:	2320      	movs	r3, #32
 800c5a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ac:	2330      	movs	r3, #48	; 0x30
 800c5ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c758 <_svfiprintf_r+0x1ec>
 800c5b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5b6:	f04f 0901 	mov.w	r9, #1
 800c5ba:	4623      	mov	r3, r4
 800c5bc:	469a      	mov	sl, r3
 800c5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c2:	b10a      	cbz	r2, 800c5c8 <_svfiprintf_r+0x5c>
 800c5c4:	2a25      	cmp	r2, #37	; 0x25
 800c5c6:	d1f9      	bne.n	800c5bc <_svfiprintf_r+0x50>
 800c5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c5cc:	d00b      	beq.n	800c5e6 <_svfiprintf_r+0x7a>
 800c5ce:	465b      	mov	r3, fp
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f7ff ff6d 	bl	800c4b4 <__ssputs_r>
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f000 80aa 	beq.w	800c734 <_svfiprintf_r+0x1c8>
 800c5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5e2:	445a      	add	r2, fp
 800c5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80a2 	beq.w	800c734 <_svfiprintf_r+0x1c8>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5fa:	f10a 0a01 	add.w	sl, sl, #1
 800c5fe:	9304      	str	r3, [sp, #16]
 800c600:	9307      	str	r3, [sp, #28]
 800c602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c606:	931a      	str	r3, [sp, #104]	; 0x68
 800c608:	4654      	mov	r4, sl
 800c60a:	2205      	movs	r2, #5
 800c60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c610:	4851      	ldr	r0, [pc, #324]	; (800c758 <_svfiprintf_r+0x1ec>)
 800c612:	f7f3 fe05 	bl	8000220 <memchr>
 800c616:	9a04      	ldr	r2, [sp, #16]
 800c618:	b9d8      	cbnz	r0, 800c652 <_svfiprintf_r+0xe6>
 800c61a:	06d0      	lsls	r0, r2, #27
 800c61c:	bf44      	itt	mi
 800c61e:	2320      	movmi	r3, #32
 800c620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c624:	0711      	lsls	r1, r2, #28
 800c626:	bf44      	itt	mi
 800c628:	232b      	movmi	r3, #43	; 0x2b
 800c62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c62e:	f89a 3000 	ldrb.w	r3, [sl]
 800c632:	2b2a      	cmp	r3, #42	; 0x2a
 800c634:	d015      	beq.n	800c662 <_svfiprintf_r+0xf6>
 800c636:	9a07      	ldr	r2, [sp, #28]
 800c638:	4654      	mov	r4, sl
 800c63a:	2000      	movs	r0, #0
 800c63c:	f04f 0c0a 	mov.w	ip, #10
 800c640:	4621      	mov	r1, r4
 800c642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c646:	3b30      	subs	r3, #48	; 0x30
 800c648:	2b09      	cmp	r3, #9
 800c64a:	d94e      	bls.n	800c6ea <_svfiprintf_r+0x17e>
 800c64c:	b1b0      	cbz	r0, 800c67c <_svfiprintf_r+0x110>
 800c64e:	9207      	str	r2, [sp, #28]
 800c650:	e014      	b.n	800c67c <_svfiprintf_r+0x110>
 800c652:	eba0 0308 	sub.w	r3, r0, r8
 800c656:	fa09 f303 	lsl.w	r3, r9, r3
 800c65a:	4313      	orrs	r3, r2
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	46a2      	mov	sl, r4
 800c660:	e7d2      	b.n	800c608 <_svfiprintf_r+0x9c>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	1d19      	adds	r1, r3, #4
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	9103      	str	r1, [sp, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	bfbb      	ittet	lt
 800c66e:	425b      	neglt	r3, r3
 800c670:	f042 0202 	orrlt.w	r2, r2, #2
 800c674:	9307      	strge	r3, [sp, #28]
 800c676:	9307      	strlt	r3, [sp, #28]
 800c678:	bfb8      	it	lt
 800c67a:	9204      	strlt	r2, [sp, #16]
 800c67c:	7823      	ldrb	r3, [r4, #0]
 800c67e:	2b2e      	cmp	r3, #46	; 0x2e
 800c680:	d10c      	bne.n	800c69c <_svfiprintf_r+0x130>
 800c682:	7863      	ldrb	r3, [r4, #1]
 800c684:	2b2a      	cmp	r3, #42	; 0x2a
 800c686:	d135      	bne.n	800c6f4 <_svfiprintf_r+0x188>
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	1d1a      	adds	r2, r3, #4
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	9203      	str	r2, [sp, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	bfb8      	it	lt
 800c694:	f04f 33ff 	movlt.w	r3, #4294967295
 800c698:	3402      	adds	r4, #2
 800c69a:	9305      	str	r3, [sp, #20]
 800c69c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c768 <_svfiprintf_r+0x1fc>
 800c6a0:	7821      	ldrb	r1, [r4, #0]
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	f7f3 fdbb 	bl	8000220 <memchr>
 800c6aa:	b140      	cbz	r0, 800c6be <_svfiprintf_r+0x152>
 800c6ac:	2340      	movs	r3, #64	; 0x40
 800c6ae:	eba0 000a 	sub.w	r0, r0, sl
 800c6b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c6b6:	9b04      	ldr	r3, [sp, #16]
 800c6b8:	4303      	orrs	r3, r0
 800c6ba:	3401      	adds	r4, #1
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c2:	4826      	ldr	r0, [pc, #152]	; (800c75c <_svfiprintf_r+0x1f0>)
 800c6c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6c8:	2206      	movs	r2, #6
 800c6ca:	f7f3 fda9 	bl	8000220 <memchr>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d038      	beq.n	800c744 <_svfiprintf_r+0x1d8>
 800c6d2:	4b23      	ldr	r3, [pc, #140]	; (800c760 <_svfiprintf_r+0x1f4>)
 800c6d4:	bb1b      	cbnz	r3, 800c71e <_svfiprintf_r+0x1b2>
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	3307      	adds	r3, #7
 800c6da:	f023 0307 	bic.w	r3, r3, #7
 800c6de:	3308      	adds	r3, #8
 800c6e0:	9303      	str	r3, [sp, #12]
 800c6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e4:	4433      	add	r3, r6
 800c6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e8:	e767      	b.n	800c5ba <_svfiprintf_r+0x4e>
 800c6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	e7a5      	b.n	800c640 <_svfiprintf_r+0xd4>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	3401      	adds	r4, #1
 800c6f8:	9305      	str	r3, [sp, #20]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	f04f 0c0a 	mov.w	ip, #10
 800c700:	4620      	mov	r0, r4
 800c702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c706:	3a30      	subs	r2, #48	; 0x30
 800c708:	2a09      	cmp	r2, #9
 800c70a:	d903      	bls.n	800c714 <_svfiprintf_r+0x1a8>
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0c5      	beq.n	800c69c <_svfiprintf_r+0x130>
 800c710:	9105      	str	r1, [sp, #20]
 800c712:	e7c3      	b.n	800c69c <_svfiprintf_r+0x130>
 800c714:	fb0c 2101 	mla	r1, ip, r1, r2
 800c718:	4604      	mov	r4, r0
 800c71a:	2301      	movs	r3, #1
 800c71c:	e7f0      	b.n	800c700 <_svfiprintf_r+0x194>
 800c71e:	ab03      	add	r3, sp, #12
 800c720:	9300      	str	r3, [sp, #0]
 800c722:	462a      	mov	r2, r5
 800c724:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <_svfiprintf_r+0x1f8>)
 800c726:	a904      	add	r1, sp, #16
 800c728:	4638      	mov	r0, r7
 800c72a:	f3af 8000 	nop.w
 800c72e:	1c42      	adds	r2, r0, #1
 800c730:	4606      	mov	r6, r0
 800c732:	d1d6      	bne.n	800c6e2 <_svfiprintf_r+0x176>
 800c734:	89ab      	ldrh	r3, [r5, #12]
 800c736:	065b      	lsls	r3, r3, #25
 800c738:	f53f af2c 	bmi.w	800c594 <_svfiprintf_r+0x28>
 800c73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c73e:	b01d      	add	sp, #116	; 0x74
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c744:	ab03      	add	r3, sp, #12
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	462a      	mov	r2, r5
 800c74a:	4b06      	ldr	r3, [pc, #24]	; (800c764 <_svfiprintf_r+0x1f8>)
 800c74c:	a904      	add	r1, sp, #16
 800c74e:	4638      	mov	r0, r7
 800c750:	f000 fa4c 	bl	800cbec <_printf_i>
 800c754:	e7eb      	b.n	800c72e <_svfiprintf_r+0x1c2>
 800c756:	bf00      	nop
 800c758:	0800e3e4 	.word	0x0800e3e4
 800c75c:	0800e3ee 	.word	0x0800e3ee
 800c760:	00000000 	.word	0x00000000
 800c764:	0800c4b5 	.word	0x0800c4b5
 800c768:	0800e3ea 	.word	0x0800e3ea

0800c76c <_sungetc_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	1c4b      	adds	r3, r1, #1
 800c770:	4614      	mov	r4, r2
 800c772:	d103      	bne.n	800c77c <_sungetc_r+0x10>
 800c774:	f04f 35ff 	mov.w	r5, #4294967295
 800c778:	4628      	mov	r0, r5
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	8993      	ldrh	r3, [r2, #12]
 800c77e:	f023 0320 	bic.w	r3, r3, #32
 800c782:	8193      	strh	r3, [r2, #12]
 800c784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c786:	6852      	ldr	r2, [r2, #4]
 800c788:	b2cd      	uxtb	r5, r1
 800c78a:	b18b      	cbz	r3, 800c7b0 <_sungetc_r+0x44>
 800c78c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c78e:	4293      	cmp	r3, r2
 800c790:	dd08      	ble.n	800c7a4 <_sungetc_r+0x38>
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	1e5a      	subs	r2, r3, #1
 800c796:	6022      	str	r2, [r4, #0]
 800c798:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c79c:	6863      	ldr	r3, [r4, #4]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	6063      	str	r3, [r4, #4]
 800c7a2:	e7e9      	b.n	800c778 <_sungetc_r+0xc>
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	f000 fd83 	bl	800d2b0 <__submore>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d0f1      	beq.n	800c792 <_sungetc_r+0x26>
 800c7ae:	e7e1      	b.n	800c774 <_sungetc_r+0x8>
 800c7b0:	6921      	ldr	r1, [r4, #16]
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	b151      	cbz	r1, 800c7cc <_sungetc_r+0x60>
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	d208      	bcs.n	800c7cc <_sungetc_r+0x60>
 800c7ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c7be:	42a9      	cmp	r1, r5
 800c7c0:	d104      	bne.n	800c7cc <_sungetc_r+0x60>
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	3201      	adds	r2, #1
 800c7c6:	6023      	str	r3, [r4, #0]
 800c7c8:	6062      	str	r2, [r4, #4]
 800c7ca:	e7d5      	b.n	800c778 <_sungetc_r+0xc>
 800c7cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7da:	4623      	mov	r3, r4
 800c7dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e7dc      	b.n	800c7a0 <_sungetc_r+0x34>

0800c7e6 <__ssrefill_r>:
 800c7e6:	b510      	push	{r4, lr}
 800c7e8:	460c      	mov	r4, r1
 800c7ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c7ec:	b169      	cbz	r1, 800c80a <__ssrefill_r+0x24>
 800c7ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7f2:	4299      	cmp	r1, r3
 800c7f4:	d001      	beq.n	800c7fa <__ssrefill_r+0x14>
 800c7f6:	f000 ffbb 	bl	800d770 <_free_r>
 800c7fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7fc:	6063      	str	r3, [r4, #4]
 800c7fe:	2000      	movs	r0, #0
 800c800:	6360      	str	r0, [r4, #52]	; 0x34
 800c802:	b113      	cbz	r3, 800c80a <__ssrefill_r+0x24>
 800c804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	bd10      	pop	{r4, pc}
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	2300      	movs	r3, #0
 800c810:	6063      	str	r3, [r4, #4]
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	f043 0320 	orr.w	r3, r3, #32
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	f04f 30ff 	mov.w	r0, #4294967295
 800c81e:	e7f3      	b.n	800c808 <__ssrefill_r+0x22>

0800c820 <__ssvfiscanf_r>:
 800c820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c824:	460c      	mov	r4, r1
 800c826:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c82a:	2100      	movs	r1, #0
 800c82c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c830:	49a6      	ldr	r1, [pc, #664]	; (800cacc <__ssvfiscanf_r+0x2ac>)
 800c832:	91a0      	str	r1, [sp, #640]	; 0x280
 800c834:	f10d 0804 	add.w	r8, sp, #4
 800c838:	49a5      	ldr	r1, [pc, #660]	; (800cad0 <__ssvfiscanf_r+0x2b0>)
 800c83a:	4fa6      	ldr	r7, [pc, #664]	; (800cad4 <__ssvfiscanf_r+0x2b4>)
 800c83c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cad8 <__ssvfiscanf_r+0x2b8>
 800c840:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c844:	4606      	mov	r6, r0
 800c846:	91a1      	str	r1, [sp, #644]	; 0x284
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	7813      	ldrb	r3, [r2, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f000 815a 	beq.w	800cb06 <__ssvfiscanf_r+0x2e6>
 800c852:	5dd9      	ldrb	r1, [r3, r7]
 800c854:	f011 0108 	ands.w	r1, r1, #8
 800c858:	f102 0501 	add.w	r5, r2, #1
 800c85c:	d019      	beq.n	800c892 <__ssvfiscanf_r+0x72>
 800c85e:	6863      	ldr	r3, [r4, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	dd0f      	ble.n	800c884 <__ssvfiscanf_r+0x64>
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	781a      	ldrb	r2, [r3, #0]
 800c868:	5cba      	ldrb	r2, [r7, r2]
 800c86a:	0712      	lsls	r2, r2, #28
 800c86c:	d401      	bmi.n	800c872 <__ssvfiscanf_r+0x52>
 800c86e:	462a      	mov	r2, r5
 800c870:	e7eb      	b.n	800c84a <__ssvfiscanf_r+0x2a>
 800c872:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c874:	3201      	adds	r2, #1
 800c876:	9245      	str	r2, [sp, #276]	; 0x114
 800c878:	6862      	ldr	r2, [r4, #4]
 800c87a:	3301      	adds	r3, #1
 800c87c:	3a01      	subs	r2, #1
 800c87e:	6062      	str	r2, [r4, #4]
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	e7ec      	b.n	800c85e <__ssvfiscanf_r+0x3e>
 800c884:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c886:	4621      	mov	r1, r4
 800c888:	4630      	mov	r0, r6
 800c88a:	4798      	blx	r3
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0e9      	beq.n	800c864 <__ssvfiscanf_r+0x44>
 800c890:	e7ed      	b.n	800c86e <__ssvfiscanf_r+0x4e>
 800c892:	2b25      	cmp	r3, #37	; 0x25
 800c894:	d012      	beq.n	800c8bc <__ssvfiscanf_r+0x9c>
 800c896:	469a      	mov	sl, r3
 800c898:	6863      	ldr	r3, [r4, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f340 8091 	ble.w	800c9c2 <__ssvfiscanf_r+0x1a2>
 800c8a0:	6822      	ldr	r2, [r4, #0]
 800c8a2:	7813      	ldrb	r3, [r2, #0]
 800c8a4:	4553      	cmp	r3, sl
 800c8a6:	f040 812e 	bne.w	800cb06 <__ssvfiscanf_r+0x2e6>
 800c8aa:	6863      	ldr	r3, [r4, #4]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	6063      	str	r3, [r4, #4]
 800c8b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c8b2:	3201      	adds	r2, #1
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	6022      	str	r2, [r4, #0]
 800c8b8:	9345      	str	r3, [sp, #276]	; 0x114
 800c8ba:	e7d8      	b.n	800c86e <__ssvfiscanf_r+0x4e>
 800c8bc:	9141      	str	r1, [sp, #260]	; 0x104
 800c8be:	9143      	str	r1, [sp, #268]	; 0x10c
 800c8c0:	7853      	ldrb	r3, [r2, #1]
 800c8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c4:	bf02      	ittt	eq
 800c8c6:	2310      	moveq	r3, #16
 800c8c8:	1c95      	addeq	r5, r2, #2
 800c8ca:	9341      	streq	r3, [sp, #260]	; 0x104
 800c8cc:	220a      	movs	r2, #10
 800c8ce:	46aa      	mov	sl, r5
 800c8d0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c8d4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c8d8:	2b09      	cmp	r3, #9
 800c8da:	d91d      	bls.n	800c918 <__ssvfiscanf_r+0xf8>
 800c8dc:	487e      	ldr	r0, [pc, #504]	; (800cad8 <__ssvfiscanf_r+0x2b8>)
 800c8de:	2203      	movs	r2, #3
 800c8e0:	f7f3 fc9e 	bl	8000220 <memchr>
 800c8e4:	b140      	cbz	r0, 800c8f8 <__ssvfiscanf_r+0xd8>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	eba0 0009 	sub.w	r0, r0, r9
 800c8ec:	fa03 f000 	lsl.w	r0, r3, r0
 800c8f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8f2:	4318      	orrs	r0, r3
 800c8f4:	9041      	str	r0, [sp, #260]	; 0x104
 800c8f6:	4655      	mov	r5, sl
 800c8f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c8fc:	2b78      	cmp	r3, #120	; 0x78
 800c8fe:	d806      	bhi.n	800c90e <__ssvfiscanf_r+0xee>
 800c900:	2b57      	cmp	r3, #87	; 0x57
 800c902:	d810      	bhi.n	800c926 <__ssvfiscanf_r+0x106>
 800c904:	2b25      	cmp	r3, #37	; 0x25
 800c906:	d0c6      	beq.n	800c896 <__ssvfiscanf_r+0x76>
 800c908:	d856      	bhi.n	800c9b8 <__ssvfiscanf_r+0x198>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d064      	beq.n	800c9d8 <__ssvfiscanf_r+0x1b8>
 800c90e:	2303      	movs	r3, #3
 800c910:	9347      	str	r3, [sp, #284]	; 0x11c
 800c912:	230a      	movs	r3, #10
 800c914:	9342      	str	r3, [sp, #264]	; 0x108
 800c916:	e071      	b.n	800c9fc <__ssvfiscanf_r+0x1dc>
 800c918:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c91a:	fb02 1103 	mla	r1, r2, r3, r1
 800c91e:	3930      	subs	r1, #48	; 0x30
 800c920:	9143      	str	r1, [sp, #268]	; 0x10c
 800c922:	4655      	mov	r5, sl
 800c924:	e7d3      	b.n	800c8ce <__ssvfiscanf_r+0xae>
 800c926:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c92a:	2a20      	cmp	r2, #32
 800c92c:	d8ef      	bhi.n	800c90e <__ssvfiscanf_r+0xee>
 800c92e:	a101      	add	r1, pc, #4	; (adr r1, 800c934 <__ssvfiscanf_r+0x114>)
 800c930:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c934:	0800c9e7 	.word	0x0800c9e7
 800c938:	0800c90f 	.word	0x0800c90f
 800c93c:	0800c90f 	.word	0x0800c90f
 800c940:	0800ca45 	.word	0x0800ca45
 800c944:	0800c90f 	.word	0x0800c90f
 800c948:	0800c90f 	.word	0x0800c90f
 800c94c:	0800c90f 	.word	0x0800c90f
 800c950:	0800c90f 	.word	0x0800c90f
 800c954:	0800c90f 	.word	0x0800c90f
 800c958:	0800c90f 	.word	0x0800c90f
 800c95c:	0800c90f 	.word	0x0800c90f
 800c960:	0800ca5b 	.word	0x0800ca5b
 800c964:	0800ca31 	.word	0x0800ca31
 800c968:	0800c9bf 	.word	0x0800c9bf
 800c96c:	0800c9bf 	.word	0x0800c9bf
 800c970:	0800c9bf 	.word	0x0800c9bf
 800c974:	0800c90f 	.word	0x0800c90f
 800c978:	0800ca35 	.word	0x0800ca35
 800c97c:	0800c90f 	.word	0x0800c90f
 800c980:	0800c90f 	.word	0x0800c90f
 800c984:	0800c90f 	.word	0x0800c90f
 800c988:	0800c90f 	.word	0x0800c90f
 800c98c:	0800ca6b 	.word	0x0800ca6b
 800c990:	0800ca3d 	.word	0x0800ca3d
 800c994:	0800c9df 	.word	0x0800c9df
 800c998:	0800c90f 	.word	0x0800c90f
 800c99c:	0800c90f 	.word	0x0800c90f
 800c9a0:	0800ca67 	.word	0x0800ca67
 800c9a4:	0800c90f 	.word	0x0800c90f
 800c9a8:	0800ca31 	.word	0x0800ca31
 800c9ac:	0800c90f 	.word	0x0800c90f
 800c9b0:	0800c90f 	.word	0x0800c90f
 800c9b4:	0800c9e7 	.word	0x0800c9e7
 800c9b8:	3b45      	subs	r3, #69	; 0x45
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d8a7      	bhi.n	800c90e <__ssvfiscanf_r+0xee>
 800c9be:	2305      	movs	r3, #5
 800c9c0:	e01b      	b.n	800c9fa <__ssvfiscanf_r+0x1da>
 800c9c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	4798      	blx	r3
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	f43f af68 	beq.w	800c8a0 <__ssvfiscanf_r+0x80>
 800c9d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	f040 808d 	bne.w	800caf2 <__ssvfiscanf_r+0x2d2>
 800c9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9dc:	e08f      	b.n	800cafe <__ssvfiscanf_r+0x2de>
 800c9de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9e0:	f042 0220 	orr.w	r2, r2, #32
 800c9e4:	9241      	str	r2, [sp, #260]	; 0x104
 800c9e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9ec:	9241      	str	r2, [sp, #260]	; 0x104
 800c9ee:	2210      	movs	r2, #16
 800c9f0:	2b6f      	cmp	r3, #111	; 0x6f
 800c9f2:	9242      	str	r2, [sp, #264]	; 0x108
 800c9f4:	bf34      	ite	cc
 800c9f6:	2303      	movcc	r3, #3
 800c9f8:	2304      	movcs	r3, #4
 800c9fa:	9347      	str	r3, [sp, #284]	; 0x11c
 800c9fc:	6863      	ldr	r3, [r4, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	dd42      	ble.n	800ca88 <__ssvfiscanf_r+0x268>
 800ca02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca04:	0659      	lsls	r1, r3, #25
 800ca06:	d404      	bmi.n	800ca12 <__ssvfiscanf_r+0x1f2>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	781a      	ldrb	r2, [r3, #0]
 800ca0c:	5cba      	ldrb	r2, [r7, r2]
 800ca0e:	0712      	lsls	r2, r2, #28
 800ca10:	d441      	bmi.n	800ca96 <__ssvfiscanf_r+0x276>
 800ca12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	dc50      	bgt.n	800caba <__ssvfiscanf_r+0x29a>
 800ca18:	466b      	mov	r3, sp
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	a941      	add	r1, sp, #260	; 0x104
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f000 fa0a 	bl	800ce38 <_scanf_chars>
 800ca24:	2801      	cmp	r0, #1
 800ca26:	d06e      	beq.n	800cb06 <__ssvfiscanf_r+0x2e6>
 800ca28:	2802      	cmp	r0, #2
 800ca2a:	f47f af20 	bne.w	800c86e <__ssvfiscanf_r+0x4e>
 800ca2e:	e7cf      	b.n	800c9d0 <__ssvfiscanf_r+0x1b0>
 800ca30:	220a      	movs	r2, #10
 800ca32:	e7dd      	b.n	800c9f0 <__ssvfiscanf_r+0x1d0>
 800ca34:	2300      	movs	r3, #0
 800ca36:	9342      	str	r3, [sp, #264]	; 0x108
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e7de      	b.n	800c9fa <__ssvfiscanf_r+0x1da>
 800ca3c:	2308      	movs	r3, #8
 800ca3e:	9342      	str	r3, [sp, #264]	; 0x108
 800ca40:	2304      	movs	r3, #4
 800ca42:	e7da      	b.n	800c9fa <__ssvfiscanf_r+0x1da>
 800ca44:	4629      	mov	r1, r5
 800ca46:	4640      	mov	r0, r8
 800ca48:	f000 fb72 	bl	800d130 <__sccl>
 800ca4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca52:	9341      	str	r3, [sp, #260]	; 0x104
 800ca54:	4605      	mov	r5, r0
 800ca56:	2301      	movs	r3, #1
 800ca58:	e7cf      	b.n	800c9fa <__ssvfiscanf_r+0x1da>
 800ca5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca60:	9341      	str	r3, [sp, #260]	; 0x104
 800ca62:	2300      	movs	r3, #0
 800ca64:	e7c9      	b.n	800c9fa <__ssvfiscanf_r+0x1da>
 800ca66:	2302      	movs	r3, #2
 800ca68:	e7c7      	b.n	800c9fa <__ssvfiscanf_r+0x1da>
 800ca6a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ca6c:	06c3      	lsls	r3, r0, #27
 800ca6e:	f53f aefe 	bmi.w	800c86e <__ssvfiscanf_r+0x4e>
 800ca72:	9b00      	ldr	r3, [sp, #0]
 800ca74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca76:	1d19      	adds	r1, r3, #4
 800ca78:	9100      	str	r1, [sp, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f010 0f01 	tst.w	r0, #1
 800ca80:	bf14      	ite	ne
 800ca82:	801a      	strhne	r2, [r3, #0]
 800ca84:	601a      	streq	r2, [r3, #0]
 800ca86:	e6f2      	b.n	800c86e <__ssvfiscanf_r+0x4e>
 800ca88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	4798      	blx	r3
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d0b6      	beq.n	800ca02 <__ssvfiscanf_r+0x1e2>
 800ca94:	e79c      	b.n	800c9d0 <__ssvfiscanf_r+0x1b0>
 800ca96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca98:	3201      	adds	r2, #1
 800ca9a:	9245      	str	r2, [sp, #276]	; 0x114
 800ca9c:	6862      	ldr	r2, [r4, #4]
 800ca9e:	3a01      	subs	r2, #1
 800caa0:	2a00      	cmp	r2, #0
 800caa2:	6062      	str	r2, [r4, #4]
 800caa4:	dd02      	ble.n	800caac <__ssvfiscanf_r+0x28c>
 800caa6:	3301      	adds	r3, #1
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	e7ad      	b.n	800ca08 <__ssvfiscanf_r+0x1e8>
 800caac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800caae:	4621      	mov	r1, r4
 800cab0:	4630      	mov	r0, r6
 800cab2:	4798      	blx	r3
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d0a7      	beq.n	800ca08 <__ssvfiscanf_r+0x1e8>
 800cab8:	e78a      	b.n	800c9d0 <__ssvfiscanf_r+0x1b0>
 800caba:	2b04      	cmp	r3, #4
 800cabc:	dc0e      	bgt.n	800cadc <__ssvfiscanf_r+0x2bc>
 800cabe:	466b      	mov	r3, sp
 800cac0:	4622      	mov	r2, r4
 800cac2:	a941      	add	r1, sp, #260	; 0x104
 800cac4:	4630      	mov	r0, r6
 800cac6:	f000 fa11 	bl	800ceec <_scanf_i>
 800caca:	e7ab      	b.n	800ca24 <__ssvfiscanf_r+0x204>
 800cacc:	0800c76d 	.word	0x0800c76d
 800cad0:	0800c7e7 	.word	0x0800c7e7
 800cad4:	0800e0e9 	.word	0x0800e0e9
 800cad8:	0800e3ea 	.word	0x0800e3ea
 800cadc:	4b0b      	ldr	r3, [pc, #44]	; (800cb0c <__ssvfiscanf_r+0x2ec>)
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f43f aec5 	beq.w	800c86e <__ssvfiscanf_r+0x4e>
 800cae4:	466b      	mov	r3, sp
 800cae6:	4622      	mov	r2, r4
 800cae8:	a941      	add	r1, sp, #260	; 0x104
 800caea:	4630      	mov	r0, r6
 800caec:	f7fd fa5e 	bl	8009fac <_scanf_float>
 800caf0:	e798      	b.n	800ca24 <__ssvfiscanf_r+0x204>
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800caf8:	bf18      	it	ne
 800cafa:	f04f 30ff 	movne.w	r0, #4294967295
 800cafe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb06:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb08:	e7f9      	b.n	800cafe <__ssvfiscanf_r+0x2de>
 800cb0a:	bf00      	nop
 800cb0c:	08009fad 	.word	0x08009fad

0800cb10 <_printf_common>:
 800cb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb14:	4616      	mov	r6, r2
 800cb16:	4699      	mov	r9, r3
 800cb18:	688a      	ldr	r2, [r1, #8]
 800cb1a:	690b      	ldr	r3, [r1, #16]
 800cb1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb20:	4293      	cmp	r3, r2
 800cb22:	bfb8      	it	lt
 800cb24:	4613      	movlt	r3, r2
 800cb26:	6033      	str	r3, [r6, #0]
 800cb28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb2c:	4607      	mov	r7, r0
 800cb2e:	460c      	mov	r4, r1
 800cb30:	b10a      	cbz	r2, 800cb36 <_printf_common+0x26>
 800cb32:	3301      	adds	r3, #1
 800cb34:	6033      	str	r3, [r6, #0]
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	0699      	lsls	r1, r3, #26
 800cb3a:	bf42      	ittt	mi
 800cb3c:	6833      	ldrmi	r3, [r6, #0]
 800cb3e:	3302      	addmi	r3, #2
 800cb40:	6033      	strmi	r3, [r6, #0]
 800cb42:	6825      	ldr	r5, [r4, #0]
 800cb44:	f015 0506 	ands.w	r5, r5, #6
 800cb48:	d106      	bne.n	800cb58 <_printf_common+0x48>
 800cb4a:	f104 0a19 	add.w	sl, r4, #25
 800cb4e:	68e3      	ldr	r3, [r4, #12]
 800cb50:	6832      	ldr	r2, [r6, #0]
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	42ab      	cmp	r3, r5
 800cb56:	dc26      	bgt.n	800cba6 <_printf_common+0x96>
 800cb58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb5c:	1e13      	subs	r3, r2, #0
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	bf18      	it	ne
 800cb62:	2301      	movne	r3, #1
 800cb64:	0692      	lsls	r2, r2, #26
 800cb66:	d42b      	bmi.n	800cbc0 <_printf_common+0xb0>
 800cb68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	4638      	mov	r0, r7
 800cb70:	47c0      	blx	r8
 800cb72:	3001      	adds	r0, #1
 800cb74:	d01e      	beq.n	800cbb4 <_printf_common+0xa4>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	68e5      	ldr	r5, [r4, #12]
 800cb7a:	6832      	ldr	r2, [r6, #0]
 800cb7c:	f003 0306 	and.w	r3, r3, #6
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	bf08      	it	eq
 800cb84:	1aad      	subeq	r5, r5, r2
 800cb86:	68a3      	ldr	r3, [r4, #8]
 800cb88:	6922      	ldr	r2, [r4, #16]
 800cb8a:	bf0c      	ite	eq
 800cb8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb90:	2500      	movne	r5, #0
 800cb92:	4293      	cmp	r3, r2
 800cb94:	bfc4      	itt	gt
 800cb96:	1a9b      	subgt	r3, r3, r2
 800cb98:	18ed      	addgt	r5, r5, r3
 800cb9a:	2600      	movs	r6, #0
 800cb9c:	341a      	adds	r4, #26
 800cb9e:	42b5      	cmp	r5, r6
 800cba0:	d11a      	bne.n	800cbd8 <_printf_common+0xc8>
 800cba2:	2000      	movs	r0, #0
 800cba4:	e008      	b.n	800cbb8 <_printf_common+0xa8>
 800cba6:	2301      	movs	r3, #1
 800cba8:	4652      	mov	r2, sl
 800cbaa:	4649      	mov	r1, r9
 800cbac:	4638      	mov	r0, r7
 800cbae:	47c0      	blx	r8
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	d103      	bne.n	800cbbc <_printf_common+0xac>
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbbc:	3501      	adds	r5, #1
 800cbbe:	e7c6      	b.n	800cb4e <_printf_common+0x3e>
 800cbc0:	18e1      	adds	r1, r4, r3
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	2030      	movs	r0, #48	; 0x30
 800cbc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbca:	4422      	add	r2, r4
 800cbcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbd4:	3302      	adds	r3, #2
 800cbd6:	e7c7      	b.n	800cb68 <_printf_common+0x58>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	4622      	mov	r2, r4
 800cbdc:	4649      	mov	r1, r9
 800cbde:	4638      	mov	r0, r7
 800cbe0:	47c0      	blx	r8
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	d0e6      	beq.n	800cbb4 <_printf_common+0xa4>
 800cbe6:	3601      	adds	r6, #1
 800cbe8:	e7d9      	b.n	800cb9e <_printf_common+0x8e>
	...

0800cbec <_printf_i>:
 800cbec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf0:	7e0f      	ldrb	r7, [r1, #24]
 800cbf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cbf4:	2f78      	cmp	r7, #120	; 0x78
 800cbf6:	4691      	mov	r9, r2
 800cbf8:	4680      	mov	r8, r0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	469a      	mov	sl, r3
 800cbfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc02:	d807      	bhi.n	800cc14 <_printf_i+0x28>
 800cc04:	2f62      	cmp	r7, #98	; 0x62
 800cc06:	d80a      	bhi.n	800cc1e <_printf_i+0x32>
 800cc08:	2f00      	cmp	r7, #0
 800cc0a:	f000 80d8 	beq.w	800cdbe <_printf_i+0x1d2>
 800cc0e:	2f58      	cmp	r7, #88	; 0x58
 800cc10:	f000 80a3 	beq.w	800cd5a <_printf_i+0x16e>
 800cc14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc1c:	e03a      	b.n	800cc94 <_printf_i+0xa8>
 800cc1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc22:	2b15      	cmp	r3, #21
 800cc24:	d8f6      	bhi.n	800cc14 <_printf_i+0x28>
 800cc26:	a101      	add	r1, pc, #4	; (adr r1, 800cc2c <_printf_i+0x40>)
 800cc28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc2c:	0800cc85 	.word	0x0800cc85
 800cc30:	0800cc99 	.word	0x0800cc99
 800cc34:	0800cc15 	.word	0x0800cc15
 800cc38:	0800cc15 	.word	0x0800cc15
 800cc3c:	0800cc15 	.word	0x0800cc15
 800cc40:	0800cc15 	.word	0x0800cc15
 800cc44:	0800cc99 	.word	0x0800cc99
 800cc48:	0800cc15 	.word	0x0800cc15
 800cc4c:	0800cc15 	.word	0x0800cc15
 800cc50:	0800cc15 	.word	0x0800cc15
 800cc54:	0800cc15 	.word	0x0800cc15
 800cc58:	0800cda5 	.word	0x0800cda5
 800cc5c:	0800ccc9 	.word	0x0800ccc9
 800cc60:	0800cd87 	.word	0x0800cd87
 800cc64:	0800cc15 	.word	0x0800cc15
 800cc68:	0800cc15 	.word	0x0800cc15
 800cc6c:	0800cdc7 	.word	0x0800cdc7
 800cc70:	0800cc15 	.word	0x0800cc15
 800cc74:	0800ccc9 	.word	0x0800ccc9
 800cc78:	0800cc15 	.word	0x0800cc15
 800cc7c:	0800cc15 	.word	0x0800cc15
 800cc80:	0800cd8f 	.word	0x0800cd8f
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	1d1a      	adds	r2, r3, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	602a      	str	r2, [r5, #0]
 800cc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc94:	2301      	movs	r3, #1
 800cc96:	e0a3      	b.n	800cde0 <_printf_i+0x1f4>
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	6829      	ldr	r1, [r5, #0]
 800cc9c:	0606      	lsls	r6, r0, #24
 800cc9e:	f101 0304 	add.w	r3, r1, #4
 800cca2:	d50a      	bpl.n	800ccba <_printf_i+0xce>
 800cca4:	680e      	ldr	r6, [r1, #0]
 800cca6:	602b      	str	r3, [r5, #0]
 800cca8:	2e00      	cmp	r6, #0
 800ccaa:	da03      	bge.n	800ccb4 <_printf_i+0xc8>
 800ccac:	232d      	movs	r3, #45	; 0x2d
 800ccae:	4276      	negs	r6, r6
 800ccb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccb4:	485e      	ldr	r0, [pc, #376]	; (800ce30 <_printf_i+0x244>)
 800ccb6:	230a      	movs	r3, #10
 800ccb8:	e019      	b.n	800ccee <_printf_i+0x102>
 800ccba:	680e      	ldr	r6, [r1, #0]
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccc2:	bf18      	it	ne
 800ccc4:	b236      	sxthne	r6, r6
 800ccc6:	e7ef      	b.n	800cca8 <_printf_i+0xbc>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	6820      	ldr	r0, [r4, #0]
 800cccc:	1d19      	adds	r1, r3, #4
 800ccce:	6029      	str	r1, [r5, #0]
 800ccd0:	0601      	lsls	r1, r0, #24
 800ccd2:	d501      	bpl.n	800ccd8 <_printf_i+0xec>
 800ccd4:	681e      	ldr	r6, [r3, #0]
 800ccd6:	e002      	b.n	800ccde <_printf_i+0xf2>
 800ccd8:	0646      	lsls	r6, r0, #25
 800ccda:	d5fb      	bpl.n	800ccd4 <_printf_i+0xe8>
 800ccdc:	881e      	ldrh	r6, [r3, #0]
 800ccde:	4854      	ldr	r0, [pc, #336]	; (800ce30 <_printf_i+0x244>)
 800cce0:	2f6f      	cmp	r7, #111	; 0x6f
 800cce2:	bf0c      	ite	eq
 800cce4:	2308      	moveq	r3, #8
 800cce6:	230a      	movne	r3, #10
 800cce8:	2100      	movs	r1, #0
 800ccea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccee:	6865      	ldr	r5, [r4, #4]
 800ccf0:	60a5      	str	r5, [r4, #8]
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	bfa2      	ittt	ge
 800ccf6:	6821      	ldrge	r1, [r4, #0]
 800ccf8:	f021 0104 	bicge.w	r1, r1, #4
 800ccfc:	6021      	strge	r1, [r4, #0]
 800ccfe:	b90e      	cbnz	r6, 800cd04 <_printf_i+0x118>
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	d04d      	beq.n	800cda0 <_printf_i+0x1b4>
 800cd04:	4615      	mov	r5, r2
 800cd06:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd0a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd0e:	5dc7      	ldrb	r7, [r0, r7]
 800cd10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd14:	4637      	mov	r7, r6
 800cd16:	42bb      	cmp	r3, r7
 800cd18:	460e      	mov	r6, r1
 800cd1a:	d9f4      	bls.n	800cd06 <_printf_i+0x11a>
 800cd1c:	2b08      	cmp	r3, #8
 800cd1e:	d10b      	bne.n	800cd38 <_printf_i+0x14c>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	07de      	lsls	r6, r3, #31
 800cd24:	d508      	bpl.n	800cd38 <_printf_i+0x14c>
 800cd26:	6923      	ldr	r3, [r4, #16]
 800cd28:	6861      	ldr	r1, [r4, #4]
 800cd2a:	4299      	cmp	r1, r3
 800cd2c:	bfde      	ittt	le
 800cd2e:	2330      	movle	r3, #48	; 0x30
 800cd30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd38:	1b52      	subs	r2, r2, r5
 800cd3a:	6122      	str	r2, [r4, #16]
 800cd3c:	f8cd a000 	str.w	sl, [sp]
 800cd40:	464b      	mov	r3, r9
 800cd42:	aa03      	add	r2, sp, #12
 800cd44:	4621      	mov	r1, r4
 800cd46:	4640      	mov	r0, r8
 800cd48:	f7ff fee2 	bl	800cb10 <_printf_common>
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d14c      	bne.n	800cdea <_printf_i+0x1fe>
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	b004      	add	sp, #16
 800cd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5a:	4835      	ldr	r0, [pc, #212]	; (800ce30 <_printf_i+0x244>)
 800cd5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd60:	6829      	ldr	r1, [r5, #0]
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd68:	6029      	str	r1, [r5, #0]
 800cd6a:	061d      	lsls	r5, r3, #24
 800cd6c:	d514      	bpl.n	800cd98 <_printf_i+0x1ac>
 800cd6e:	07df      	lsls	r7, r3, #31
 800cd70:	bf44      	itt	mi
 800cd72:	f043 0320 	orrmi.w	r3, r3, #32
 800cd76:	6023      	strmi	r3, [r4, #0]
 800cd78:	b91e      	cbnz	r6, 800cd82 <_printf_i+0x196>
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	f023 0320 	bic.w	r3, r3, #32
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	2310      	movs	r3, #16
 800cd84:	e7b0      	b.n	800cce8 <_printf_i+0xfc>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	f043 0320 	orr.w	r3, r3, #32
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	2378      	movs	r3, #120	; 0x78
 800cd90:	4828      	ldr	r0, [pc, #160]	; (800ce34 <_printf_i+0x248>)
 800cd92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd96:	e7e3      	b.n	800cd60 <_printf_i+0x174>
 800cd98:	0659      	lsls	r1, r3, #25
 800cd9a:	bf48      	it	mi
 800cd9c:	b2b6      	uxthmi	r6, r6
 800cd9e:	e7e6      	b.n	800cd6e <_printf_i+0x182>
 800cda0:	4615      	mov	r5, r2
 800cda2:	e7bb      	b.n	800cd1c <_printf_i+0x130>
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	6826      	ldr	r6, [r4, #0]
 800cda8:	6961      	ldr	r1, [r4, #20]
 800cdaa:	1d18      	adds	r0, r3, #4
 800cdac:	6028      	str	r0, [r5, #0]
 800cdae:	0635      	lsls	r5, r6, #24
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	d501      	bpl.n	800cdb8 <_printf_i+0x1cc>
 800cdb4:	6019      	str	r1, [r3, #0]
 800cdb6:	e002      	b.n	800cdbe <_printf_i+0x1d2>
 800cdb8:	0670      	lsls	r0, r6, #25
 800cdba:	d5fb      	bpl.n	800cdb4 <_printf_i+0x1c8>
 800cdbc:	8019      	strh	r1, [r3, #0]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	6123      	str	r3, [r4, #16]
 800cdc2:	4615      	mov	r5, r2
 800cdc4:	e7ba      	b.n	800cd3c <_printf_i+0x150>
 800cdc6:	682b      	ldr	r3, [r5, #0]
 800cdc8:	1d1a      	adds	r2, r3, #4
 800cdca:	602a      	str	r2, [r5, #0]
 800cdcc:	681d      	ldr	r5, [r3, #0]
 800cdce:	6862      	ldr	r2, [r4, #4]
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f7f3 fa24 	bl	8000220 <memchr>
 800cdd8:	b108      	cbz	r0, 800cdde <_printf_i+0x1f2>
 800cdda:	1b40      	subs	r0, r0, r5
 800cddc:	6060      	str	r0, [r4, #4]
 800cdde:	6863      	ldr	r3, [r4, #4]
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	2300      	movs	r3, #0
 800cde4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cde8:	e7a8      	b.n	800cd3c <_printf_i+0x150>
 800cdea:	6923      	ldr	r3, [r4, #16]
 800cdec:	462a      	mov	r2, r5
 800cdee:	4649      	mov	r1, r9
 800cdf0:	4640      	mov	r0, r8
 800cdf2:	47d0      	blx	sl
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	d0ab      	beq.n	800cd50 <_printf_i+0x164>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	079b      	lsls	r3, r3, #30
 800cdfc:	d413      	bmi.n	800ce26 <_printf_i+0x23a>
 800cdfe:	68e0      	ldr	r0, [r4, #12]
 800ce00:	9b03      	ldr	r3, [sp, #12]
 800ce02:	4298      	cmp	r0, r3
 800ce04:	bfb8      	it	lt
 800ce06:	4618      	movlt	r0, r3
 800ce08:	e7a4      	b.n	800cd54 <_printf_i+0x168>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	4649      	mov	r1, r9
 800ce10:	4640      	mov	r0, r8
 800ce12:	47d0      	blx	sl
 800ce14:	3001      	adds	r0, #1
 800ce16:	d09b      	beq.n	800cd50 <_printf_i+0x164>
 800ce18:	3501      	adds	r5, #1
 800ce1a:	68e3      	ldr	r3, [r4, #12]
 800ce1c:	9903      	ldr	r1, [sp, #12]
 800ce1e:	1a5b      	subs	r3, r3, r1
 800ce20:	42ab      	cmp	r3, r5
 800ce22:	dcf2      	bgt.n	800ce0a <_printf_i+0x21e>
 800ce24:	e7eb      	b.n	800cdfe <_printf_i+0x212>
 800ce26:	2500      	movs	r5, #0
 800ce28:	f104 0619 	add.w	r6, r4, #25
 800ce2c:	e7f5      	b.n	800ce1a <_printf_i+0x22e>
 800ce2e:	bf00      	nop
 800ce30:	0800e3f5 	.word	0x0800e3f5
 800ce34:	0800e406 	.word	0x0800e406

0800ce38 <_scanf_chars>:
 800ce38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce3c:	4615      	mov	r5, r2
 800ce3e:	688a      	ldr	r2, [r1, #8]
 800ce40:	4680      	mov	r8, r0
 800ce42:	460c      	mov	r4, r1
 800ce44:	b932      	cbnz	r2, 800ce54 <_scanf_chars+0x1c>
 800ce46:	698a      	ldr	r2, [r1, #24]
 800ce48:	2a00      	cmp	r2, #0
 800ce4a:	bf0c      	ite	eq
 800ce4c:	2201      	moveq	r2, #1
 800ce4e:	f04f 32ff 	movne.w	r2, #4294967295
 800ce52:	608a      	str	r2, [r1, #8]
 800ce54:	6822      	ldr	r2, [r4, #0]
 800ce56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cee8 <_scanf_chars+0xb0>
 800ce5a:	06d1      	lsls	r1, r2, #27
 800ce5c:	bf5f      	itttt	pl
 800ce5e:	681a      	ldrpl	r2, [r3, #0]
 800ce60:	1d11      	addpl	r1, r2, #4
 800ce62:	6019      	strpl	r1, [r3, #0]
 800ce64:	6816      	ldrpl	r6, [r2, #0]
 800ce66:	2700      	movs	r7, #0
 800ce68:	69a0      	ldr	r0, [r4, #24]
 800ce6a:	b188      	cbz	r0, 800ce90 <_scanf_chars+0x58>
 800ce6c:	2801      	cmp	r0, #1
 800ce6e:	d107      	bne.n	800ce80 <_scanf_chars+0x48>
 800ce70:	682a      	ldr	r2, [r5, #0]
 800ce72:	7811      	ldrb	r1, [r2, #0]
 800ce74:	6962      	ldr	r2, [r4, #20]
 800ce76:	5c52      	ldrb	r2, [r2, r1]
 800ce78:	b952      	cbnz	r2, 800ce90 <_scanf_chars+0x58>
 800ce7a:	2f00      	cmp	r7, #0
 800ce7c:	d031      	beq.n	800cee2 <_scanf_chars+0xaa>
 800ce7e:	e022      	b.n	800cec6 <_scanf_chars+0x8e>
 800ce80:	2802      	cmp	r0, #2
 800ce82:	d120      	bne.n	800cec6 <_scanf_chars+0x8e>
 800ce84:	682b      	ldr	r3, [r5, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ce8c:	071b      	lsls	r3, r3, #28
 800ce8e:	d41a      	bmi.n	800cec6 <_scanf_chars+0x8e>
 800ce90:	6823      	ldr	r3, [r4, #0]
 800ce92:	06da      	lsls	r2, r3, #27
 800ce94:	bf5e      	ittt	pl
 800ce96:	682b      	ldrpl	r3, [r5, #0]
 800ce98:	781b      	ldrbpl	r3, [r3, #0]
 800ce9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ce9e:	682a      	ldr	r2, [r5, #0]
 800cea0:	686b      	ldr	r3, [r5, #4]
 800cea2:	3201      	adds	r2, #1
 800cea4:	602a      	str	r2, [r5, #0]
 800cea6:	68a2      	ldr	r2, [r4, #8]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	3a01      	subs	r2, #1
 800ceac:	606b      	str	r3, [r5, #4]
 800ceae:	3701      	adds	r7, #1
 800ceb0:	60a2      	str	r2, [r4, #8]
 800ceb2:	b142      	cbz	r2, 800cec6 <_scanf_chars+0x8e>
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	dcd7      	bgt.n	800ce68 <_scanf_chars+0x30>
 800ceb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cebc:	4629      	mov	r1, r5
 800cebe:	4640      	mov	r0, r8
 800cec0:	4798      	blx	r3
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d0d0      	beq.n	800ce68 <_scanf_chars+0x30>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	f013 0310 	ands.w	r3, r3, #16
 800cecc:	d105      	bne.n	800ceda <_scanf_chars+0xa2>
 800cece:	68e2      	ldr	r2, [r4, #12]
 800ced0:	3201      	adds	r2, #1
 800ced2:	60e2      	str	r2, [r4, #12]
 800ced4:	69a2      	ldr	r2, [r4, #24]
 800ced6:	b102      	cbz	r2, 800ceda <_scanf_chars+0xa2>
 800ced8:	7033      	strb	r3, [r6, #0]
 800ceda:	6923      	ldr	r3, [r4, #16]
 800cedc:	443b      	add	r3, r7
 800cede:	6123      	str	r3, [r4, #16]
 800cee0:	2000      	movs	r0, #0
 800cee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee6:	bf00      	nop
 800cee8:	0800e0e9 	.word	0x0800e0e9

0800ceec <_scanf_i>:
 800ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef0:	4698      	mov	r8, r3
 800cef2:	4b76      	ldr	r3, [pc, #472]	; (800d0cc <_scanf_i+0x1e0>)
 800cef4:	460c      	mov	r4, r1
 800cef6:	4682      	mov	sl, r0
 800cef8:	4616      	mov	r6, r2
 800cefa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cefe:	b087      	sub	sp, #28
 800cf00:	ab03      	add	r3, sp, #12
 800cf02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf06:	4b72      	ldr	r3, [pc, #456]	; (800d0d0 <_scanf_i+0x1e4>)
 800cf08:	69a1      	ldr	r1, [r4, #24]
 800cf0a:	4a72      	ldr	r2, [pc, #456]	; (800d0d4 <_scanf_i+0x1e8>)
 800cf0c:	2903      	cmp	r1, #3
 800cf0e:	bf18      	it	ne
 800cf10:	461a      	movne	r2, r3
 800cf12:	68a3      	ldr	r3, [r4, #8]
 800cf14:	9201      	str	r2, [sp, #4]
 800cf16:	1e5a      	subs	r2, r3, #1
 800cf18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf1c:	bf88      	it	hi
 800cf1e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf22:	4627      	mov	r7, r4
 800cf24:	bf82      	ittt	hi
 800cf26:	eb03 0905 	addhi.w	r9, r3, r5
 800cf2a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf2e:	60a3      	strhi	r3, [r4, #8]
 800cf30:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cf34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cf38:	bf98      	it	ls
 800cf3a:	f04f 0900 	movls.w	r9, #0
 800cf3e:	6023      	str	r3, [r4, #0]
 800cf40:	463d      	mov	r5, r7
 800cf42:	f04f 0b00 	mov.w	fp, #0
 800cf46:	6831      	ldr	r1, [r6, #0]
 800cf48:	ab03      	add	r3, sp, #12
 800cf4a:	7809      	ldrb	r1, [r1, #0]
 800cf4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cf50:	2202      	movs	r2, #2
 800cf52:	f7f3 f965 	bl	8000220 <memchr>
 800cf56:	b328      	cbz	r0, 800cfa4 <_scanf_i+0xb8>
 800cf58:	f1bb 0f01 	cmp.w	fp, #1
 800cf5c:	d159      	bne.n	800d012 <_scanf_i+0x126>
 800cf5e:	6862      	ldr	r2, [r4, #4]
 800cf60:	b92a      	cbnz	r2, 800cf6e <_scanf_i+0x82>
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	2308      	movs	r3, #8
 800cf66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf6a:	6063      	str	r3, [r4, #4]
 800cf6c:	6022      	str	r2, [r4, #0]
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf74:	6022      	str	r2, [r4, #0]
 800cf76:	68a2      	ldr	r2, [r4, #8]
 800cf78:	1e51      	subs	r1, r2, #1
 800cf7a:	60a1      	str	r1, [r4, #8]
 800cf7c:	b192      	cbz	r2, 800cfa4 <_scanf_i+0xb8>
 800cf7e:	6832      	ldr	r2, [r6, #0]
 800cf80:	1c51      	adds	r1, r2, #1
 800cf82:	6031      	str	r1, [r6, #0]
 800cf84:	7812      	ldrb	r2, [r2, #0]
 800cf86:	f805 2b01 	strb.w	r2, [r5], #1
 800cf8a:	6872      	ldr	r2, [r6, #4]
 800cf8c:	3a01      	subs	r2, #1
 800cf8e:	2a00      	cmp	r2, #0
 800cf90:	6072      	str	r2, [r6, #4]
 800cf92:	dc07      	bgt.n	800cfa4 <_scanf_i+0xb8>
 800cf94:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4650      	mov	r0, sl
 800cf9c:	4790      	blx	r2
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f040 8085 	bne.w	800d0ae <_scanf_i+0x1c2>
 800cfa4:	f10b 0b01 	add.w	fp, fp, #1
 800cfa8:	f1bb 0f03 	cmp.w	fp, #3
 800cfac:	d1cb      	bne.n	800cf46 <_scanf_i+0x5a>
 800cfae:	6863      	ldr	r3, [r4, #4]
 800cfb0:	b90b      	cbnz	r3, 800cfb6 <_scanf_i+0xca>
 800cfb2:	230a      	movs	r3, #10
 800cfb4:	6063      	str	r3, [r4, #4]
 800cfb6:	6863      	ldr	r3, [r4, #4]
 800cfb8:	4947      	ldr	r1, [pc, #284]	; (800d0d8 <_scanf_i+0x1ec>)
 800cfba:	6960      	ldr	r0, [r4, #20]
 800cfbc:	1ac9      	subs	r1, r1, r3
 800cfbe:	f000 f8b7 	bl	800d130 <__sccl>
 800cfc2:	f04f 0b00 	mov.w	fp, #0
 800cfc6:	68a3      	ldr	r3, [r4, #8]
 800cfc8:	6822      	ldr	r2, [r4, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d03d      	beq.n	800d04a <_scanf_i+0x15e>
 800cfce:	6831      	ldr	r1, [r6, #0]
 800cfd0:	6960      	ldr	r0, [r4, #20]
 800cfd2:	f891 c000 	ldrb.w	ip, [r1]
 800cfd6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d035      	beq.n	800d04a <_scanf_i+0x15e>
 800cfde:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cfe2:	d124      	bne.n	800d02e <_scanf_i+0x142>
 800cfe4:	0510      	lsls	r0, r2, #20
 800cfe6:	d522      	bpl.n	800d02e <_scanf_i+0x142>
 800cfe8:	f10b 0b01 	add.w	fp, fp, #1
 800cfec:	f1b9 0f00 	cmp.w	r9, #0
 800cff0:	d003      	beq.n	800cffa <_scanf_i+0x10e>
 800cff2:	3301      	adds	r3, #1
 800cff4:	f109 39ff 	add.w	r9, r9, #4294967295
 800cff8:	60a3      	str	r3, [r4, #8]
 800cffa:	6873      	ldr	r3, [r6, #4]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	6073      	str	r3, [r6, #4]
 800d002:	dd1b      	ble.n	800d03c <_scanf_i+0x150>
 800d004:	6833      	ldr	r3, [r6, #0]
 800d006:	3301      	adds	r3, #1
 800d008:	6033      	str	r3, [r6, #0]
 800d00a:	68a3      	ldr	r3, [r4, #8]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	60a3      	str	r3, [r4, #8]
 800d010:	e7d9      	b.n	800cfc6 <_scanf_i+0xda>
 800d012:	f1bb 0f02 	cmp.w	fp, #2
 800d016:	d1ae      	bne.n	800cf76 <_scanf_i+0x8a>
 800d018:	6822      	ldr	r2, [r4, #0]
 800d01a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d01e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d022:	d1bf      	bne.n	800cfa4 <_scanf_i+0xb8>
 800d024:	2310      	movs	r3, #16
 800d026:	6063      	str	r3, [r4, #4]
 800d028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d02c:	e7a2      	b.n	800cf74 <_scanf_i+0x88>
 800d02e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d032:	6022      	str	r2, [r4, #0]
 800d034:	780b      	ldrb	r3, [r1, #0]
 800d036:	f805 3b01 	strb.w	r3, [r5], #1
 800d03a:	e7de      	b.n	800cffa <_scanf_i+0x10e>
 800d03c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d040:	4631      	mov	r1, r6
 800d042:	4650      	mov	r0, sl
 800d044:	4798      	blx	r3
 800d046:	2800      	cmp	r0, #0
 800d048:	d0df      	beq.n	800d00a <_scanf_i+0x11e>
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	05db      	lsls	r3, r3, #23
 800d04e:	d50d      	bpl.n	800d06c <_scanf_i+0x180>
 800d050:	42bd      	cmp	r5, r7
 800d052:	d909      	bls.n	800d068 <_scanf_i+0x17c>
 800d054:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d05c:	4632      	mov	r2, r6
 800d05e:	4650      	mov	r0, sl
 800d060:	4798      	blx	r3
 800d062:	f105 39ff 	add.w	r9, r5, #4294967295
 800d066:	464d      	mov	r5, r9
 800d068:	42bd      	cmp	r5, r7
 800d06a:	d02d      	beq.n	800d0c8 <_scanf_i+0x1dc>
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	f012 0210 	ands.w	r2, r2, #16
 800d072:	d113      	bne.n	800d09c <_scanf_i+0x1b0>
 800d074:	702a      	strb	r2, [r5, #0]
 800d076:	6863      	ldr	r3, [r4, #4]
 800d078:	9e01      	ldr	r6, [sp, #4]
 800d07a:	4639      	mov	r1, r7
 800d07c:	4650      	mov	r0, sl
 800d07e:	47b0      	blx	r6
 800d080:	6821      	ldr	r1, [r4, #0]
 800d082:	f8d8 3000 	ldr.w	r3, [r8]
 800d086:	f011 0f20 	tst.w	r1, #32
 800d08a:	d013      	beq.n	800d0b4 <_scanf_i+0x1c8>
 800d08c:	1d1a      	adds	r2, r3, #4
 800d08e:	f8c8 2000 	str.w	r2, [r8]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6018      	str	r0, [r3, #0]
 800d096:	68e3      	ldr	r3, [r4, #12]
 800d098:	3301      	adds	r3, #1
 800d09a:	60e3      	str	r3, [r4, #12]
 800d09c:	1bed      	subs	r5, r5, r7
 800d09e:	44ab      	add	fp, r5
 800d0a0:	6925      	ldr	r5, [r4, #16]
 800d0a2:	445d      	add	r5, fp
 800d0a4:	6125      	str	r5, [r4, #16]
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	b007      	add	sp, #28
 800d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	f04f 0b00 	mov.w	fp, #0
 800d0b2:	e7ca      	b.n	800d04a <_scanf_i+0x15e>
 800d0b4:	1d1a      	adds	r2, r3, #4
 800d0b6:	f8c8 2000 	str.w	r2, [r8]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f011 0f01 	tst.w	r1, #1
 800d0c0:	bf14      	ite	ne
 800d0c2:	8018      	strhne	r0, [r3, #0]
 800d0c4:	6018      	streq	r0, [r3, #0]
 800d0c6:	e7e6      	b.n	800d096 <_scanf_i+0x1aa>
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	e7ed      	b.n	800d0a8 <_scanf_i+0x1bc>
 800d0cc:	0800e05c 	.word	0x0800e05c
 800d0d0:	0800d2ad 	.word	0x0800d2ad
 800d0d4:	0800b26d 	.word	0x0800b26d
 800d0d8:	0800e430 	.word	0x0800e430

0800d0dc <_read_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	; (800d0fc <_read_r+0x20>)
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	4608      	mov	r0, r1
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	602a      	str	r2, [r5, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f7f4 fd5e 	bl	8001bac <_read>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_read_r+0x1e>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_read_r+0x1e>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20002538 	.word	0x20002538

0800d100 <nan>:
 800d100:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d108 <nan+0x8>
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	00000000 	.word	0x00000000
 800d10c:	7ff80000 	.word	0x7ff80000

0800d110 <_sbrk_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4d06      	ldr	r5, [pc, #24]	; (800d12c <_sbrk_r+0x1c>)
 800d114:	2300      	movs	r3, #0
 800d116:	4604      	mov	r4, r0
 800d118:	4608      	mov	r0, r1
 800d11a:	602b      	str	r3, [r5, #0]
 800d11c:	f7f4 fdb4 	bl	8001c88 <_sbrk>
 800d120:	1c43      	adds	r3, r0, #1
 800d122:	d102      	bne.n	800d12a <_sbrk_r+0x1a>
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	b103      	cbz	r3, 800d12a <_sbrk_r+0x1a>
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	bd38      	pop	{r3, r4, r5, pc}
 800d12c:	20002538 	.word	0x20002538

0800d130 <__sccl>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	780b      	ldrb	r3, [r1, #0]
 800d134:	4604      	mov	r4, r0
 800d136:	2b5e      	cmp	r3, #94	; 0x5e
 800d138:	bf0b      	itete	eq
 800d13a:	784b      	ldrbeq	r3, [r1, #1]
 800d13c:	1c48      	addne	r0, r1, #1
 800d13e:	1c88      	addeq	r0, r1, #2
 800d140:	2200      	movne	r2, #0
 800d142:	bf08      	it	eq
 800d144:	2201      	moveq	r2, #1
 800d146:	1e61      	subs	r1, r4, #1
 800d148:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d14c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d150:	42a9      	cmp	r1, r5
 800d152:	d1fb      	bne.n	800d14c <__sccl+0x1c>
 800d154:	b90b      	cbnz	r3, 800d15a <__sccl+0x2a>
 800d156:	3801      	subs	r0, #1
 800d158:	bd70      	pop	{r4, r5, r6, pc}
 800d15a:	f082 0201 	eor.w	r2, r2, #1
 800d15e:	54e2      	strb	r2, [r4, r3]
 800d160:	4605      	mov	r5, r0
 800d162:	4628      	mov	r0, r5
 800d164:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d168:	292d      	cmp	r1, #45	; 0x2d
 800d16a:	d006      	beq.n	800d17a <__sccl+0x4a>
 800d16c:	295d      	cmp	r1, #93	; 0x5d
 800d16e:	d0f3      	beq.n	800d158 <__sccl+0x28>
 800d170:	b909      	cbnz	r1, 800d176 <__sccl+0x46>
 800d172:	4628      	mov	r0, r5
 800d174:	e7f0      	b.n	800d158 <__sccl+0x28>
 800d176:	460b      	mov	r3, r1
 800d178:	e7f1      	b.n	800d15e <__sccl+0x2e>
 800d17a:	786e      	ldrb	r6, [r5, #1]
 800d17c:	2e5d      	cmp	r6, #93	; 0x5d
 800d17e:	d0fa      	beq.n	800d176 <__sccl+0x46>
 800d180:	42b3      	cmp	r3, r6
 800d182:	dcf8      	bgt.n	800d176 <__sccl+0x46>
 800d184:	3502      	adds	r5, #2
 800d186:	4619      	mov	r1, r3
 800d188:	3101      	adds	r1, #1
 800d18a:	428e      	cmp	r6, r1
 800d18c:	5462      	strb	r2, [r4, r1]
 800d18e:	dcfb      	bgt.n	800d188 <__sccl+0x58>
 800d190:	1af1      	subs	r1, r6, r3
 800d192:	3901      	subs	r1, #1
 800d194:	1c58      	adds	r0, r3, #1
 800d196:	42b3      	cmp	r3, r6
 800d198:	bfa8      	it	ge
 800d19a:	2100      	movge	r1, #0
 800d19c:	1843      	adds	r3, r0, r1
 800d19e:	e7e0      	b.n	800d162 <__sccl+0x32>

0800d1a0 <strncmp>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	b17a      	cbz	r2, 800d1c4 <strncmp+0x24>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	3901      	subs	r1, #1
 800d1a8:	1884      	adds	r4, r0, r2
 800d1aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d1ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d1b2:	4290      	cmp	r0, r2
 800d1b4:	d101      	bne.n	800d1ba <strncmp+0x1a>
 800d1b6:	42a3      	cmp	r3, r4
 800d1b8:	d101      	bne.n	800d1be <strncmp+0x1e>
 800d1ba:	1a80      	subs	r0, r0, r2
 800d1bc:	bd10      	pop	{r4, pc}
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d1f3      	bne.n	800d1aa <strncmp+0xa>
 800d1c2:	e7fa      	b.n	800d1ba <strncmp+0x1a>
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	e7f9      	b.n	800d1bc <strncmp+0x1c>

0800d1c8 <_strtoul_l.constprop.0>:
 800d1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1cc:	4f36      	ldr	r7, [pc, #216]	; (800d2a8 <_strtoul_l.constprop.0+0xe0>)
 800d1ce:	4686      	mov	lr, r0
 800d1d0:	460d      	mov	r5, r1
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1d8:	5de6      	ldrb	r6, [r4, r7]
 800d1da:	f016 0608 	ands.w	r6, r6, #8
 800d1de:	d1f8      	bne.n	800d1d2 <_strtoul_l.constprop.0+0xa>
 800d1e0:	2c2d      	cmp	r4, #45	; 0x2d
 800d1e2:	d12f      	bne.n	800d244 <_strtoul_l.constprop.0+0x7c>
 800d1e4:	782c      	ldrb	r4, [r5, #0]
 800d1e6:	2601      	movs	r6, #1
 800d1e8:	1c85      	adds	r5, r0, #2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d057      	beq.n	800d29e <_strtoul_l.constprop.0+0xd6>
 800d1ee:	2b10      	cmp	r3, #16
 800d1f0:	d109      	bne.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d1f2:	2c30      	cmp	r4, #48	; 0x30
 800d1f4:	d107      	bne.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d1f6:	7828      	ldrb	r0, [r5, #0]
 800d1f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d1fc:	2858      	cmp	r0, #88	; 0x58
 800d1fe:	d149      	bne.n	800d294 <_strtoul_l.constprop.0+0xcc>
 800d200:	786c      	ldrb	r4, [r5, #1]
 800d202:	2310      	movs	r3, #16
 800d204:	3502      	adds	r5, #2
 800d206:	f04f 38ff 	mov.w	r8, #4294967295
 800d20a:	2700      	movs	r7, #0
 800d20c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d210:	fb03 f908 	mul.w	r9, r3, r8
 800d214:	ea6f 0909 	mvn.w	r9, r9
 800d218:	4638      	mov	r0, r7
 800d21a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d21e:	f1bc 0f09 	cmp.w	ip, #9
 800d222:	d814      	bhi.n	800d24e <_strtoul_l.constprop.0+0x86>
 800d224:	4664      	mov	r4, ip
 800d226:	42a3      	cmp	r3, r4
 800d228:	dd22      	ble.n	800d270 <_strtoul_l.constprop.0+0xa8>
 800d22a:	2f00      	cmp	r7, #0
 800d22c:	db1d      	blt.n	800d26a <_strtoul_l.constprop.0+0xa2>
 800d22e:	4580      	cmp	r8, r0
 800d230:	d31b      	bcc.n	800d26a <_strtoul_l.constprop.0+0xa2>
 800d232:	d101      	bne.n	800d238 <_strtoul_l.constprop.0+0x70>
 800d234:	45a1      	cmp	r9, r4
 800d236:	db18      	blt.n	800d26a <_strtoul_l.constprop.0+0xa2>
 800d238:	fb00 4003 	mla	r0, r0, r3, r4
 800d23c:	2701      	movs	r7, #1
 800d23e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d242:	e7ea      	b.n	800d21a <_strtoul_l.constprop.0+0x52>
 800d244:	2c2b      	cmp	r4, #43	; 0x2b
 800d246:	bf04      	itt	eq
 800d248:	782c      	ldrbeq	r4, [r5, #0]
 800d24a:	1c85      	addeq	r5, r0, #2
 800d24c:	e7cd      	b.n	800d1ea <_strtoul_l.constprop.0+0x22>
 800d24e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d252:	f1bc 0f19 	cmp.w	ip, #25
 800d256:	d801      	bhi.n	800d25c <_strtoul_l.constprop.0+0x94>
 800d258:	3c37      	subs	r4, #55	; 0x37
 800d25a:	e7e4      	b.n	800d226 <_strtoul_l.constprop.0+0x5e>
 800d25c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d260:	f1bc 0f19 	cmp.w	ip, #25
 800d264:	d804      	bhi.n	800d270 <_strtoul_l.constprop.0+0xa8>
 800d266:	3c57      	subs	r4, #87	; 0x57
 800d268:	e7dd      	b.n	800d226 <_strtoul_l.constprop.0+0x5e>
 800d26a:	f04f 37ff 	mov.w	r7, #4294967295
 800d26e:	e7e6      	b.n	800d23e <_strtoul_l.constprop.0+0x76>
 800d270:	2f00      	cmp	r7, #0
 800d272:	da07      	bge.n	800d284 <_strtoul_l.constprop.0+0xbc>
 800d274:	2322      	movs	r3, #34	; 0x22
 800d276:	f8ce 3000 	str.w	r3, [lr]
 800d27a:	f04f 30ff 	mov.w	r0, #4294967295
 800d27e:	b932      	cbnz	r2, 800d28e <_strtoul_l.constprop.0+0xc6>
 800d280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d284:	b106      	cbz	r6, 800d288 <_strtoul_l.constprop.0+0xc0>
 800d286:	4240      	negs	r0, r0
 800d288:	2a00      	cmp	r2, #0
 800d28a:	d0f9      	beq.n	800d280 <_strtoul_l.constprop.0+0xb8>
 800d28c:	b107      	cbz	r7, 800d290 <_strtoul_l.constprop.0+0xc8>
 800d28e:	1e69      	subs	r1, r5, #1
 800d290:	6011      	str	r1, [r2, #0]
 800d292:	e7f5      	b.n	800d280 <_strtoul_l.constprop.0+0xb8>
 800d294:	2430      	movs	r4, #48	; 0x30
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1b5      	bne.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d29a:	2308      	movs	r3, #8
 800d29c:	e7b3      	b.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d29e:	2c30      	cmp	r4, #48	; 0x30
 800d2a0:	d0a9      	beq.n	800d1f6 <_strtoul_l.constprop.0+0x2e>
 800d2a2:	230a      	movs	r3, #10
 800d2a4:	e7af      	b.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d2a6:	bf00      	nop
 800d2a8:	0800e0e9 	.word	0x0800e0e9

0800d2ac <_strtoul_r>:
 800d2ac:	f7ff bf8c 	b.w	800d1c8 <_strtoul_l.constprop.0>

0800d2b0 <__submore>:
 800d2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d2b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2bc:	4299      	cmp	r1, r3
 800d2be:	d11d      	bne.n	800d2fc <__submore+0x4c>
 800d2c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d2c4:	f7ff f882 	bl	800c3cc <_malloc_r>
 800d2c8:	b918      	cbnz	r0, 800d2d2 <__submore+0x22>
 800d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d6:	63a3      	str	r3, [r4, #56]	; 0x38
 800d2d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d2dc:	6360      	str	r0, [r4, #52]	; 0x34
 800d2de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d2e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d2e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d2ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d2ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d2f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d2f6:	6020      	str	r0, [r4, #0]
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e7e8      	b.n	800d2ce <__submore+0x1e>
 800d2fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d2fe:	0077      	lsls	r7, r6, #1
 800d300:	463a      	mov	r2, r7
 800d302:	f000 fa81 	bl	800d808 <_realloc_r>
 800d306:	4605      	mov	r5, r0
 800d308:	2800      	cmp	r0, #0
 800d30a:	d0de      	beq.n	800d2ca <__submore+0x1a>
 800d30c:	eb00 0806 	add.w	r8, r0, r6
 800d310:	4601      	mov	r1, r0
 800d312:	4632      	mov	r2, r6
 800d314:	4640      	mov	r0, r8
 800d316:	f7fc fe33 	bl	8009f80 <memcpy>
 800d31a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d31e:	f8c4 8000 	str.w	r8, [r4]
 800d322:	e7e9      	b.n	800d2f8 <__submore+0x48>

0800d324 <__ascii_wctomb>:
 800d324:	b149      	cbz	r1, 800d33a <__ascii_wctomb+0x16>
 800d326:	2aff      	cmp	r2, #255	; 0xff
 800d328:	bf85      	ittet	hi
 800d32a:	238a      	movhi	r3, #138	; 0x8a
 800d32c:	6003      	strhi	r3, [r0, #0]
 800d32e:	700a      	strbls	r2, [r1, #0]
 800d330:	f04f 30ff 	movhi.w	r0, #4294967295
 800d334:	bf98      	it	ls
 800d336:	2001      	movls	r0, #1
 800d338:	4770      	bx	lr
 800d33a:	4608      	mov	r0, r1
 800d33c:	4770      	bx	lr
	...

0800d340 <__assert_func>:
 800d340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d342:	4614      	mov	r4, r2
 800d344:	461a      	mov	r2, r3
 800d346:	4b09      	ldr	r3, [pc, #36]	; (800d36c <__assert_func+0x2c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4605      	mov	r5, r0
 800d34c:	68d8      	ldr	r0, [r3, #12]
 800d34e:	b14c      	cbz	r4, 800d364 <__assert_func+0x24>
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <__assert_func+0x30>)
 800d352:	9100      	str	r1, [sp, #0]
 800d354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d358:	4906      	ldr	r1, [pc, #24]	; (800d374 <__assert_func+0x34>)
 800d35a:	462b      	mov	r3, r5
 800d35c:	f000 f9a6 	bl	800d6ac <fiprintf>
 800d360:	f000 fc9a 	bl	800dc98 <abort>
 800d364:	4b04      	ldr	r3, [pc, #16]	; (800d378 <__assert_func+0x38>)
 800d366:	461c      	mov	r4, r3
 800d368:	e7f3      	b.n	800d352 <__assert_func+0x12>
 800d36a:	bf00      	nop
 800d36c:	2000010c 	.word	0x2000010c
 800d370:	0800e432 	.word	0x0800e432
 800d374:	0800e43f 	.word	0x0800e43f
 800d378:	0800e46d 	.word	0x0800e46d

0800d37c <__sflush_r>:
 800d37c:	898a      	ldrh	r2, [r1, #12]
 800d37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d382:	4605      	mov	r5, r0
 800d384:	0710      	lsls	r0, r2, #28
 800d386:	460c      	mov	r4, r1
 800d388:	d458      	bmi.n	800d43c <__sflush_r+0xc0>
 800d38a:	684b      	ldr	r3, [r1, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	dc05      	bgt.n	800d39c <__sflush_r+0x20>
 800d390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d392:	2b00      	cmp	r3, #0
 800d394:	dc02      	bgt.n	800d39c <__sflush_r+0x20>
 800d396:	2000      	movs	r0, #0
 800d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d39e:	2e00      	cmp	r6, #0
 800d3a0:	d0f9      	beq.n	800d396 <__sflush_r+0x1a>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3a8:	682f      	ldr	r7, [r5, #0]
 800d3aa:	602b      	str	r3, [r5, #0]
 800d3ac:	d032      	beq.n	800d414 <__sflush_r+0x98>
 800d3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	075a      	lsls	r2, r3, #29
 800d3b4:	d505      	bpl.n	800d3c2 <__sflush_r+0x46>
 800d3b6:	6863      	ldr	r3, [r4, #4]
 800d3b8:	1ac0      	subs	r0, r0, r3
 800d3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3bc:	b10b      	cbz	r3, 800d3c2 <__sflush_r+0x46>
 800d3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3c0:	1ac0      	subs	r0, r0, r3
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3c8:	6a21      	ldr	r1, [r4, #32]
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	47b0      	blx	r6
 800d3ce:	1c43      	adds	r3, r0, #1
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	d106      	bne.n	800d3e2 <__sflush_r+0x66>
 800d3d4:	6829      	ldr	r1, [r5, #0]
 800d3d6:	291d      	cmp	r1, #29
 800d3d8:	d82c      	bhi.n	800d434 <__sflush_r+0xb8>
 800d3da:	4a2a      	ldr	r2, [pc, #168]	; (800d484 <__sflush_r+0x108>)
 800d3dc:	40ca      	lsrs	r2, r1
 800d3de:	07d6      	lsls	r6, r2, #31
 800d3e0:	d528      	bpl.n	800d434 <__sflush_r+0xb8>
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	6062      	str	r2, [r4, #4]
 800d3e6:	04d9      	lsls	r1, r3, #19
 800d3e8:	6922      	ldr	r2, [r4, #16]
 800d3ea:	6022      	str	r2, [r4, #0]
 800d3ec:	d504      	bpl.n	800d3f8 <__sflush_r+0x7c>
 800d3ee:	1c42      	adds	r2, r0, #1
 800d3f0:	d101      	bne.n	800d3f6 <__sflush_r+0x7a>
 800d3f2:	682b      	ldr	r3, [r5, #0]
 800d3f4:	b903      	cbnz	r3, 800d3f8 <__sflush_r+0x7c>
 800d3f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3fa:	602f      	str	r7, [r5, #0]
 800d3fc:	2900      	cmp	r1, #0
 800d3fe:	d0ca      	beq.n	800d396 <__sflush_r+0x1a>
 800d400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d404:	4299      	cmp	r1, r3
 800d406:	d002      	beq.n	800d40e <__sflush_r+0x92>
 800d408:	4628      	mov	r0, r5
 800d40a:	f000 f9b1 	bl	800d770 <_free_r>
 800d40e:	2000      	movs	r0, #0
 800d410:	6360      	str	r0, [r4, #52]	; 0x34
 800d412:	e7c1      	b.n	800d398 <__sflush_r+0x1c>
 800d414:	6a21      	ldr	r1, [r4, #32]
 800d416:	2301      	movs	r3, #1
 800d418:	4628      	mov	r0, r5
 800d41a:	47b0      	blx	r6
 800d41c:	1c41      	adds	r1, r0, #1
 800d41e:	d1c7      	bne.n	800d3b0 <__sflush_r+0x34>
 800d420:	682b      	ldr	r3, [r5, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d0c4      	beq.n	800d3b0 <__sflush_r+0x34>
 800d426:	2b1d      	cmp	r3, #29
 800d428:	d001      	beq.n	800d42e <__sflush_r+0xb2>
 800d42a:	2b16      	cmp	r3, #22
 800d42c:	d101      	bne.n	800d432 <__sflush_r+0xb6>
 800d42e:	602f      	str	r7, [r5, #0]
 800d430:	e7b1      	b.n	800d396 <__sflush_r+0x1a>
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d438:	81a3      	strh	r3, [r4, #12]
 800d43a:	e7ad      	b.n	800d398 <__sflush_r+0x1c>
 800d43c:	690f      	ldr	r7, [r1, #16]
 800d43e:	2f00      	cmp	r7, #0
 800d440:	d0a9      	beq.n	800d396 <__sflush_r+0x1a>
 800d442:	0793      	lsls	r3, r2, #30
 800d444:	680e      	ldr	r6, [r1, #0]
 800d446:	bf08      	it	eq
 800d448:	694b      	ldreq	r3, [r1, #20]
 800d44a:	600f      	str	r7, [r1, #0]
 800d44c:	bf18      	it	ne
 800d44e:	2300      	movne	r3, #0
 800d450:	eba6 0807 	sub.w	r8, r6, r7
 800d454:	608b      	str	r3, [r1, #8]
 800d456:	f1b8 0f00 	cmp.w	r8, #0
 800d45a:	dd9c      	ble.n	800d396 <__sflush_r+0x1a>
 800d45c:	6a21      	ldr	r1, [r4, #32]
 800d45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d460:	4643      	mov	r3, r8
 800d462:	463a      	mov	r2, r7
 800d464:	4628      	mov	r0, r5
 800d466:	47b0      	blx	r6
 800d468:	2800      	cmp	r0, #0
 800d46a:	dc06      	bgt.n	800d47a <__sflush_r+0xfe>
 800d46c:	89a3      	ldrh	r3, [r4, #12]
 800d46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d472:	81a3      	strh	r3, [r4, #12]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	e78e      	b.n	800d398 <__sflush_r+0x1c>
 800d47a:	4407      	add	r7, r0
 800d47c:	eba8 0800 	sub.w	r8, r8, r0
 800d480:	e7e9      	b.n	800d456 <__sflush_r+0xda>
 800d482:	bf00      	nop
 800d484:	20400001 	.word	0x20400001

0800d488 <_fflush_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	690b      	ldr	r3, [r1, #16]
 800d48c:	4605      	mov	r5, r0
 800d48e:	460c      	mov	r4, r1
 800d490:	b913      	cbnz	r3, 800d498 <_fflush_r+0x10>
 800d492:	2500      	movs	r5, #0
 800d494:	4628      	mov	r0, r5
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	b118      	cbz	r0, 800d4a2 <_fflush_r+0x1a>
 800d49a:	6983      	ldr	r3, [r0, #24]
 800d49c:	b90b      	cbnz	r3, 800d4a2 <_fflush_r+0x1a>
 800d49e:	f000 f887 	bl	800d5b0 <__sinit>
 800d4a2:	4b14      	ldr	r3, [pc, #80]	; (800d4f4 <_fflush_r+0x6c>)
 800d4a4:	429c      	cmp	r4, r3
 800d4a6:	d11b      	bne.n	800d4e0 <_fflush_r+0x58>
 800d4a8:	686c      	ldr	r4, [r5, #4]
 800d4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d0ef      	beq.n	800d492 <_fflush_r+0xa>
 800d4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4b4:	07d0      	lsls	r0, r2, #31
 800d4b6:	d404      	bmi.n	800d4c2 <_fflush_r+0x3a>
 800d4b8:	0599      	lsls	r1, r3, #22
 800d4ba:	d402      	bmi.n	800d4c2 <_fflush_r+0x3a>
 800d4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4be:	f000 f927 	bl	800d710 <__retarget_lock_acquire_recursive>
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f7ff ff59 	bl	800d37c <__sflush_r>
 800d4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4cc:	07da      	lsls	r2, r3, #31
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	d4e0      	bmi.n	800d494 <_fflush_r+0xc>
 800d4d2:	89a3      	ldrh	r3, [r4, #12]
 800d4d4:	059b      	lsls	r3, r3, #22
 800d4d6:	d4dd      	bmi.n	800d494 <_fflush_r+0xc>
 800d4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4da:	f000 f91a 	bl	800d712 <__retarget_lock_release_recursive>
 800d4de:	e7d9      	b.n	800d494 <_fflush_r+0xc>
 800d4e0:	4b05      	ldr	r3, [pc, #20]	; (800d4f8 <_fflush_r+0x70>)
 800d4e2:	429c      	cmp	r4, r3
 800d4e4:	d101      	bne.n	800d4ea <_fflush_r+0x62>
 800d4e6:	68ac      	ldr	r4, [r5, #8]
 800d4e8:	e7df      	b.n	800d4aa <_fflush_r+0x22>
 800d4ea:	4b04      	ldr	r3, [pc, #16]	; (800d4fc <_fflush_r+0x74>)
 800d4ec:	429c      	cmp	r4, r3
 800d4ee:	bf08      	it	eq
 800d4f0:	68ec      	ldreq	r4, [r5, #12]
 800d4f2:	e7da      	b.n	800d4aa <_fflush_r+0x22>
 800d4f4:	0800e490 	.word	0x0800e490
 800d4f8:	0800e4b0 	.word	0x0800e4b0
 800d4fc:	0800e470 	.word	0x0800e470

0800d500 <std>:
 800d500:	2300      	movs	r3, #0
 800d502:	b510      	push	{r4, lr}
 800d504:	4604      	mov	r4, r0
 800d506:	e9c0 3300 	strd	r3, r3, [r0]
 800d50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d50e:	6083      	str	r3, [r0, #8]
 800d510:	8181      	strh	r1, [r0, #12]
 800d512:	6643      	str	r3, [r0, #100]	; 0x64
 800d514:	81c2      	strh	r2, [r0, #14]
 800d516:	6183      	str	r3, [r0, #24]
 800d518:	4619      	mov	r1, r3
 800d51a:	2208      	movs	r2, #8
 800d51c:	305c      	adds	r0, #92	; 0x5c
 800d51e:	f7fc fd3d 	bl	8009f9c <memset>
 800d522:	4b05      	ldr	r3, [pc, #20]	; (800d538 <std+0x38>)
 800d524:	6263      	str	r3, [r4, #36]	; 0x24
 800d526:	4b05      	ldr	r3, [pc, #20]	; (800d53c <std+0x3c>)
 800d528:	62a3      	str	r3, [r4, #40]	; 0x28
 800d52a:	4b05      	ldr	r3, [pc, #20]	; (800d540 <std+0x40>)
 800d52c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d52e:	4b05      	ldr	r3, [pc, #20]	; (800d544 <std+0x44>)
 800d530:	6224      	str	r4, [r4, #32]
 800d532:	6323      	str	r3, [r4, #48]	; 0x30
 800d534:	bd10      	pop	{r4, pc}
 800d536:	bf00      	nop
 800d538:	0800a471 	.word	0x0800a471
 800d53c:	0800a497 	.word	0x0800a497
 800d540:	0800a4cf 	.word	0x0800a4cf
 800d544:	0800a4f3 	.word	0x0800a4f3

0800d548 <_cleanup_r>:
 800d548:	4901      	ldr	r1, [pc, #4]	; (800d550 <_cleanup_r+0x8>)
 800d54a:	f000 b8c1 	b.w	800d6d0 <_fwalk_reent>
 800d54e:	bf00      	nop
 800d550:	0800d489 	.word	0x0800d489

0800d554 <__sfmoreglue>:
 800d554:	b570      	push	{r4, r5, r6, lr}
 800d556:	2268      	movs	r2, #104	; 0x68
 800d558:	1e4d      	subs	r5, r1, #1
 800d55a:	4355      	muls	r5, r2
 800d55c:	460e      	mov	r6, r1
 800d55e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d562:	f7fe ff33 	bl	800c3cc <_malloc_r>
 800d566:	4604      	mov	r4, r0
 800d568:	b140      	cbz	r0, 800d57c <__sfmoreglue+0x28>
 800d56a:	2100      	movs	r1, #0
 800d56c:	e9c0 1600 	strd	r1, r6, [r0]
 800d570:	300c      	adds	r0, #12
 800d572:	60a0      	str	r0, [r4, #8]
 800d574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d578:	f7fc fd10 	bl	8009f9c <memset>
 800d57c:	4620      	mov	r0, r4
 800d57e:	bd70      	pop	{r4, r5, r6, pc}

0800d580 <__sfp_lock_acquire>:
 800d580:	4801      	ldr	r0, [pc, #4]	; (800d588 <__sfp_lock_acquire+0x8>)
 800d582:	f000 b8c5 	b.w	800d710 <__retarget_lock_acquire_recursive>
 800d586:	bf00      	nop
 800d588:	2000253d 	.word	0x2000253d

0800d58c <__sfp_lock_release>:
 800d58c:	4801      	ldr	r0, [pc, #4]	; (800d594 <__sfp_lock_release+0x8>)
 800d58e:	f000 b8c0 	b.w	800d712 <__retarget_lock_release_recursive>
 800d592:	bf00      	nop
 800d594:	2000253d 	.word	0x2000253d

0800d598 <__sinit_lock_acquire>:
 800d598:	4801      	ldr	r0, [pc, #4]	; (800d5a0 <__sinit_lock_acquire+0x8>)
 800d59a:	f000 b8b9 	b.w	800d710 <__retarget_lock_acquire_recursive>
 800d59e:	bf00      	nop
 800d5a0:	2000253e 	.word	0x2000253e

0800d5a4 <__sinit_lock_release>:
 800d5a4:	4801      	ldr	r0, [pc, #4]	; (800d5ac <__sinit_lock_release+0x8>)
 800d5a6:	f000 b8b4 	b.w	800d712 <__retarget_lock_release_recursive>
 800d5aa:	bf00      	nop
 800d5ac:	2000253e 	.word	0x2000253e

0800d5b0 <__sinit>:
 800d5b0:	b510      	push	{r4, lr}
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	f7ff fff0 	bl	800d598 <__sinit_lock_acquire>
 800d5b8:	69a3      	ldr	r3, [r4, #24]
 800d5ba:	b11b      	cbz	r3, 800d5c4 <__sinit+0x14>
 800d5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5c0:	f7ff bff0 	b.w	800d5a4 <__sinit_lock_release>
 800d5c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d5ca:	4b13      	ldr	r3, [pc, #76]	; (800d618 <__sinit+0x68>)
 800d5cc:	4a13      	ldr	r2, [pc, #76]	; (800d61c <__sinit+0x6c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5d2:	42a3      	cmp	r3, r4
 800d5d4:	bf04      	itt	eq
 800d5d6:	2301      	moveq	r3, #1
 800d5d8:	61a3      	streq	r3, [r4, #24]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f000 f820 	bl	800d620 <__sfp>
 800d5e0:	6060      	str	r0, [r4, #4]
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f000 f81c 	bl	800d620 <__sfp>
 800d5e8:	60a0      	str	r0, [r4, #8]
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f000 f818 	bl	800d620 <__sfp>
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	60e0      	str	r0, [r4, #12]
 800d5f4:	2104      	movs	r1, #4
 800d5f6:	6860      	ldr	r0, [r4, #4]
 800d5f8:	f7ff ff82 	bl	800d500 <std>
 800d5fc:	68a0      	ldr	r0, [r4, #8]
 800d5fe:	2201      	movs	r2, #1
 800d600:	2109      	movs	r1, #9
 800d602:	f7ff ff7d 	bl	800d500 <std>
 800d606:	68e0      	ldr	r0, [r4, #12]
 800d608:	2202      	movs	r2, #2
 800d60a:	2112      	movs	r1, #18
 800d60c:	f7ff ff78 	bl	800d500 <std>
 800d610:	2301      	movs	r3, #1
 800d612:	61a3      	str	r3, [r4, #24]
 800d614:	e7d2      	b.n	800d5bc <__sinit+0xc>
 800d616:	bf00      	nop
 800d618:	0800e080 	.word	0x0800e080
 800d61c:	0800d549 	.word	0x0800d549

0800d620 <__sfp>:
 800d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d622:	4607      	mov	r7, r0
 800d624:	f7ff ffac 	bl	800d580 <__sfp_lock_acquire>
 800d628:	4b1e      	ldr	r3, [pc, #120]	; (800d6a4 <__sfp+0x84>)
 800d62a:	681e      	ldr	r6, [r3, #0]
 800d62c:	69b3      	ldr	r3, [r6, #24]
 800d62e:	b913      	cbnz	r3, 800d636 <__sfp+0x16>
 800d630:	4630      	mov	r0, r6
 800d632:	f7ff ffbd 	bl	800d5b0 <__sinit>
 800d636:	3648      	adds	r6, #72	; 0x48
 800d638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	d503      	bpl.n	800d648 <__sfp+0x28>
 800d640:	6833      	ldr	r3, [r6, #0]
 800d642:	b30b      	cbz	r3, 800d688 <__sfp+0x68>
 800d644:	6836      	ldr	r6, [r6, #0]
 800d646:	e7f7      	b.n	800d638 <__sfp+0x18>
 800d648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d64c:	b9d5      	cbnz	r5, 800d684 <__sfp+0x64>
 800d64e:	4b16      	ldr	r3, [pc, #88]	; (800d6a8 <__sfp+0x88>)
 800d650:	60e3      	str	r3, [r4, #12]
 800d652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d656:	6665      	str	r5, [r4, #100]	; 0x64
 800d658:	f000 f859 	bl	800d70e <__retarget_lock_init_recursive>
 800d65c:	f7ff ff96 	bl	800d58c <__sfp_lock_release>
 800d660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d668:	6025      	str	r5, [r4, #0]
 800d66a:	61a5      	str	r5, [r4, #24]
 800d66c:	2208      	movs	r2, #8
 800d66e:	4629      	mov	r1, r5
 800d670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d674:	f7fc fc92 	bl	8009f9c <memset>
 800d678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d67c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d680:	4620      	mov	r0, r4
 800d682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d684:	3468      	adds	r4, #104	; 0x68
 800d686:	e7d9      	b.n	800d63c <__sfp+0x1c>
 800d688:	2104      	movs	r1, #4
 800d68a:	4638      	mov	r0, r7
 800d68c:	f7ff ff62 	bl	800d554 <__sfmoreglue>
 800d690:	4604      	mov	r4, r0
 800d692:	6030      	str	r0, [r6, #0]
 800d694:	2800      	cmp	r0, #0
 800d696:	d1d5      	bne.n	800d644 <__sfp+0x24>
 800d698:	f7ff ff78 	bl	800d58c <__sfp_lock_release>
 800d69c:	230c      	movs	r3, #12
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	e7ee      	b.n	800d680 <__sfp+0x60>
 800d6a2:	bf00      	nop
 800d6a4:	0800e080 	.word	0x0800e080
 800d6a8:	ffff0001 	.word	0xffff0001

0800d6ac <fiprintf>:
 800d6ac:	b40e      	push	{r1, r2, r3}
 800d6ae:	b503      	push	{r0, r1, lr}
 800d6b0:	4601      	mov	r1, r0
 800d6b2:	ab03      	add	r3, sp, #12
 800d6b4:	4805      	ldr	r0, [pc, #20]	; (800d6cc <fiprintf+0x20>)
 800d6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6ba:	6800      	ldr	r0, [r0, #0]
 800d6bc:	9301      	str	r3, [sp, #4]
 800d6be:	f000 f8fb 	bl	800d8b8 <_vfiprintf_r>
 800d6c2:	b002      	add	sp, #8
 800d6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6c8:	b003      	add	sp, #12
 800d6ca:	4770      	bx	lr
 800d6cc:	2000010c 	.word	0x2000010c

0800d6d0 <_fwalk_reent>:
 800d6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	4688      	mov	r8, r1
 800d6d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6dc:	2700      	movs	r7, #0
 800d6de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6e2:	f1b9 0901 	subs.w	r9, r9, #1
 800d6e6:	d505      	bpl.n	800d6f4 <_fwalk_reent+0x24>
 800d6e8:	6824      	ldr	r4, [r4, #0]
 800d6ea:	2c00      	cmp	r4, #0
 800d6ec:	d1f7      	bne.n	800d6de <_fwalk_reent+0xe>
 800d6ee:	4638      	mov	r0, r7
 800d6f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6f4:	89ab      	ldrh	r3, [r5, #12]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d907      	bls.n	800d70a <_fwalk_reent+0x3a>
 800d6fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6fe:	3301      	adds	r3, #1
 800d700:	d003      	beq.n	800d70a <_fwalk_reent+0x3a>
 800d702:	4629      	mov	r1, r5
 800d704:	4630      	mov	r0, r6
 800d706:	47c0      	blx	r8
 800d708:	4307      	orrs	r7, r0
 800d70a:	3568      	adds	r5, #104	; 0x68
 800d70c:	e7e9      	b.n	800d6e2 <_fwalk_reent+0x12>

0800d70e <__retarget_lock_init_recursive>:
 800d70e:	4770      	bx	lr

0800d710 <__retarget_lock_acquire_recursive>:
 800d710:	4770      	bx	lr

0800d712 <__retarget_lock_release_recursive>:
 800d712:	4770      	bx	lr

0800d714 <malloc>:
 800d714:	4b02      	ldr	r3, [pc, #8]	; (800d720 <malloc+0xc>)
 800d716:	4601      	mov	r1, r0
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	f7fe be57 	b.w	800c3cc <_malloc_r>
 800d71e:	bf00      	nop
 800d720:	2000010c 	.word	0x2000010c

0800d724 <memmove>:
 800d724:	4288      	cmp	r0, r1
 800d726:	b510      	push	{r4, lr}
 800d728:	eb01 0402 	add.w	r4, r1, r2
 800d72c:	d902      	bls.n	800d734 <memmove+0x10>
 800d72e:	4284      	cmp	r4, r0
 800d730:	4623      	mov	r3, r4
 800d732:	d807      	bhi.n	800d744 <memmove+0x20>
 800d734:	1e43      	subs	r3, r0, #1
 800d736:	42a1      	cmp	r1, r4
 800d738:	d008      	beq.n	800d74c <memmove+0x28>
 800d73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d73e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d742:	e7f8      	b.n	800d736 <memmove+0x12>
 800d744:	4402      	add	r2, r0
 800d746:	4601      	mov	r1, r0
 800d748:	428a      	cmp	r2, r1
 800d74a:	d100      	bne.n	800d74e <memmove+0x2a>
 800d74c:	bd10      	pop	{r4, pc}
 800d74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d756:	e7f7      	b.n	800d748 <memmove+0x24>

0800d758 <__malloc_lock>:
 800d758:	4801      	ldr	r0, [pc, #4]	; (800d760 <__malloc_lock+0x8>)
 800d75a:	f7ff bfd9 	b.w	800d710 <__retarget_lock_acquire_recursive>
 800d75e:	bf00      	nop
 800d760:	2000253c 	.word	0x2000253c

0800d764 <__malloc_unlock>:
 800d764:	4801      	ldr	r0, [pc, #4]	; (800d76c <__malloc_unlock+0x8>)
 800d766:	f7ff bfd4 	b.w	800d712 <__retarget_lock_release_recursive>
 800d76a:	bf00      	nop
 800d76c:	2000253c 	.word	0x2000253c

0800d770 <_free_r>:
 800d770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d772:	2900      	cmp	r1, #0
 800d774:	d044      	beq.n	800d800 <_free_r+0x90>
 800d776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d77a:	9001      	str	r0, [sp, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f1a1 0404 	sub.w	r4, r1, #4
 800d782:	bfb8      	it	lt
 800d784:	18e4      	addlt	r4, r4, r3
 800d786:	f7ff ffe7 	bl	800d758 <__malloc_lock>
 800d78a:	4a1e      	ldr	r2, [pc, #120]	; (800d804 <_free_r+0x94>)
 800d78c:	9801      	ldr	r0, [sp, #4]
 800d78e:	6813      	ldr	r3, [r2, #0]
 800d790:	b933      	cbnz	r3, 800d7a0 <_free_r+0x30>
 800d792:	6063      	str	r3, [r4, #4]
 800d794:	6014      	str	r4, [r2, #0]
 800d796:	b003      	add	sp, #12
 800d798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d79c:	f7ff bfe2 	b.w	800d764 <__malloc_unlock>
 800d7a0:	42a3      	cmp	r3, r4
 800d7a2:	d908      	bls.n	800d7b6 <_free_r+0x46>
 800d7a4:	6825      	ldr	r5, [r4, #0]
 800d7a6:	1961      	adds	r1, r4, r5
 800d7a8:	428b      	cmp	r3, r1
 800d7aa:	bf01      	itttt	eq
 800d7ac:	6819      	ldreq	r1, [r3, #0]
 800d7ae:	685b      	ldreq	r3, [r3, #4]
 800d7b0:	1949      	addeq	r1, r1, r5
 800d7b2:	6021      	streq	r1, [r4, #0]
 800d7b4:	e7ed      	b.n	800d792 <_free_r+0x22>
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	b10b      	cbz	r3, 800d7c0 <_free_r+0x50>
 800d7bc:	42a3      	cmp	r3, r4
 800d7be:	d9fa      	bls.n	800d7b6 <_free_r+0x46>
 800d7c0:	6811      	ldr	r1, [r2, #0]
 800d7c2:	1855      	adds	r5, r2, r1
 800d7c4:	42a5      	cmp	r5, r4
 800d7c6:	d10b      	bne.n	800d7e0 <_free_r+0x70>
 800d7c8:	6824      	ldr	r4, [r4, #0]
 800d7ca:	4421      	add	r1, r4
 800d7cc:	1854      	adds	r4, r2, r1
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	6011      	str	r1, [r2, #0]
 800d7d2:	d1e0      	bne.n	800d796 <_free_r+0x26>
 800d7d4:	681c      	ldr	r4, [r3, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	6053      	str	r3, [r2, #4]
 800d7da:	4421      	add	r1, r4
 800d7dc:	6011      	str	r1, [r2, #0]
 800d7de:	e7da      	b.n	800d796 <_free_r+0x26>
 800d7e0:	d902      	bls.n	800d7e8 <_free_r+0x78>
 800d7e2:	230c      	movs	r3, #12
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	e7d6      	b.n	800d796 <_free_r+0x26>
 800d7e8:	6825      	ldr	r5, [r4, #0]
 800d7ea:	1961      	adds	r1, r4, r5
 800d7ec:	428b      	cmp	r3, r1
 800d7ee:	bf04      	itt	eq
 800d7f0:	6819      	ldreq	r1, [r3, #0]
 800d7f2:	685b      	ldreq	r3, [r3, #4]
 800d7f4:	6063      	str	r3, [r4, #4]
 800d7f6:	bf04      	itt	eq
 800d7f8:	1949      	addeq	r1, r1, r5
 800d7fa:	6021      	streq	r1, [r4, #0]
 800d7fc:	6054      	str	r4, [r2, #4]
 800d7fe:	e7ca      	b.n	800d796 <_free_r+0x26>
 800d800:	b003      	add	sp, #12
 800d802:	bd30      	pop	{r4, r5, pc}
 800d804:	20002530 	.word	0x20002530

0800d808 <_realloc_r>:
 800d808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d80c:	4680      	mov	r8, r0
 800d80e:	4614      	mov	r4, r2
 800d810:	460e      	mov	r6, r1
 800d812:	b921      	cbnz	r1, 800d81e <_realloc_r+0x16>
 800d814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d818:	4611      	mov	r1, r2
 800d81a:	f7fe bdd7 	b.w	800c3cc <_malloc_r>
 800d81e:	b92a      	cbnz	r2, 800d82c <_realloc_r+0x24>
 800d820:	f7ff ffa6 	bl	800d770 <_free_r>
 800d824:	4625      	mov	r5, r4
 800d826:	4628      	mov	r0, r5
 800d828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d82c:	f000 faa0 	bl	800dd70 <_malloc_usable_size_r>
 800d830:	4284      	cmp	r4, r0
 800d832:	4607      	mov	r7, r0
 800d834:	d802      	bhi.n	800d83c <_realloc_r+0x34>
 800d836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d83a:	d812      	bhi.n	800d862 <_realloc_r+0x5a>
 800d83c:	4621      	mov	r1, r4
 800d83e:	4640      	mov	r0, r8
 800d840:	f7fe fdc4 	bl	800c3cc <_malloc_r>
 800d844:	4605      	mov	r5, r0
 800d846:	2800      	cmp	r0, #0
 800d848:	d0ed      	beq.n	800d826 <_realloc_r+0x1e>
 800d84a:	42bc      	cmp	r4, r7
 800d84c:	4622      	mov	r2, r4
 800d84e:	4631      	mov	r1, r6
 800d850:	bf28      	it	cs
 800d852:	463a      	movcs	r2, r7
 800d854:	f7fc fb94 	bl	8009f80 <memcpy>
 800d858:	4631      	mov	r1, r6
 800d85a:	4640      	mov	r0, r8
 800d85c:	f7ff ff88 	bl	800d770 <_free_r>
 800d860:	e7e1      	b.n	800d826 <_realloc_r+0x1e>
 800d862:	4635      	mov	r5, r6
 800d864:	e7df      	b.n	800d826 <_realloc_r+0x1e>

0800d866 <__sfputc_r>:
 800d866:	6893      	ldr	r3, [r2, #8]
 800d868:	3b01      	subs	r3, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	b410      	push	{r4}
 800d86e:	6093      	str	r3, [r2, #8]
 800d870:	da08      	bge.n	800d884 <__sfputc_r+0x1e>
 800d872:	6994      	ldr	r4, [r2, #24]
 800d874:	42a3      	cmp	r3, r4
 800d876:	db01      	blt.n	800d87c <__sfputc_r+0x16>
 800d878:	290a      	cmp	r1, #10
 800d87a:	d103      	bne.n	800d884 <__sfputc_r+0x1e>
 800d87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d880:	f000 b94a 	b.w	800db18 <__swbuf_r>
 800d884:	6813      	ldr	r3, [r2, #0]
 800d886:	1c58      	adds	r0, r3, #1
 800d888:	6010      	str	r0, [r2, #0]
 800d88a:	7019      	strb	r1, [r3, #0]
 800d88c:	4608      	mov	r0, r1
 800d88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <__sfputs_r>:
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	4614      	mov	r4, r2
 800d89c:	18d5      	adds	r5, r2, r3
 800d89e:	42ac      	cmp	r4, r5
 800d8a0:	d101      	bne.n	800d8a6 <__sfputs_r+0x12>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e007      	b.n	800d8b6 <__sfputs_r+0x22>
 800d8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8aa:	463a      	mov	r2, r7
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f7ff ffda 	bl	800d866 <__sfputc_r>
 800d8b2:	1c43      	adds	r3, r0, #1
 800d8b4:	d1f3      	bne.n	800d89e <__sfputs_r+0xa>
 800d8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8b8 <_vfiprintf_r>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	460d      	mov	r5, r1
 800d8be:	b09d      	sub	sp, #116	; 0x74
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	4698      	mov	r8, r3
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	b118      	cbz	r0, 800d8d0 <_vfiprintf_r+0x18>
 800d8c8:	6983      	ldr	r3, [r0, #24]
 800d8ca:	b90b      	cbnz	r3, 800d8d0 <_vfiprintf_r+0x18>
 800d8cc:	f7ff fe70 	bl	800d5b0 <__sinit>
 800d8d0:	4b89      	ldr	r3, [pc, #548]	; (800daf8 <_vfiprintf_r+0x240>)
 800d8d2:	429d      	cmp	r5, r3
 800d8d4:	d11b      	bne.n	800d90e <_vfiprintf_r+0x56>
 800d8d6:	6875      	ldr	r5, [r6, #4]
 800d8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8da:	07d9      	lsls	r1, r3, #31
 800d8dc:	d405      	bmi.n	800d8ea <_vfiprintf_r+0x32>
 800d8de:	89ab      	ldrh	r3, [r5, #12]
 800d8e0:	059a      	lsls	r2, r3, #22
 800d8e2:	d402      	bmi.n	800d8ea <_vfiprintf_r+0x32>
 800d8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8e6:	f7ff ff13 	bl	800d710 <__retarget_lock_acquire_recursive>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	071b      	lsls	r3, r3, #28
 800d8ee:	d501      	bpl.n	800d8f4 <_vfiprintf_r+0x3c>
 800d8f0:	692b      	ldr	r3, [r5, #16]
 800d8f2:	b9eb      	cbnz	r3, 800d930 <_vfiprintf_r+0x78>
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f000 f960 	bl	800dbbc <__swsetup_r>
 800d8fc:	b1c0      	cbz	r0, 800d930 <_vfiprintf_r+0x78>
 800d8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d900:	07dc      	lsls	r4, r3, #31
 800d902:	d50e      	bpl.n	800d922 <_vfiprintf_r+0x6a>
 800d904:	f04f 30ff 	mov.w	r0, #4294967295
 800d908:	b01d      	add	sp, #116	; 0x74
 800d90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90e:	4b7b      	ldr	r3, [pc, #492]	; (800dafc <_vfiprintf_r+0x244>)
 800d910:	429d      	cmp	r5, r3
 800d912:	d101      	bne.n	800d918 <_vfiprintf_r+0x60>
 800d914:	68b5      	ldr	r5, [r6, #8]
 800d916:	e7df      	b.n	800d8d8 <_vfiprintf_r+0x20>
 800d918:	4b79      	ldr	r3, [pc, #484]	; (800db00 <_vfiprintf_r+0x248>)
 800d91a:	429d      	cmp	r5, r3
 800d91c:	bf08      	it	eq
 800d91e:	68f5      	ldreq	r5, [r6, #12]
 800d920:	e7da      	b.n	800d8d8 <_vfiprintf_r+0x20>
 800d922:	89ab      	ldrh	r3, [r5, #12]
 800d924:	0598      	lsls	r0, r3, #22
 800d926:	d4ed      	bmi.n	800d904 <_vfiprintf_r+0x4c>
 800d928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d92a:	f7ff fef2 	bl	800d712 <__retarget_lock_release_recursive>
 800d92e:	e7e9      	b.n	800d904 <_vfiprintf_r+0x4c>
 800d930:	2300      	movs	r3, #0
 800d932:	9309      	str	r3, [sp, #36]	; 0x24
 800d934:	2320      	movs	r3, #32
 800d936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d93e:	2330      	movs	r3, #48	; 0x30
 800d940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db04 <_vfiprintf_r+0x24c>
 800d944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d948:	f04f 0901 	mov.w	r9, #1
 800d94c:	4623      	mov	r3, r4
 800d94e:	469a      	mov	sl, r3
 800d950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d954:	b10a      	cbz	r2, 800d95a <_vfiprintf_r+0xa2>
 800d956:	2a25      	cmp	r2, #37	; 0x25
 800d958:	d1f9      	bne.n	800d94e <_vfiprintf_r+0x96>
 800d95a:	ebba 0b04 	subs.w	fp, sl, r4
 800d95e:	d00b      	beq.n	800d978 <_vfiprintf_r+0xc0>
 800d960:	465b      	mov	r3, fp
 800d962:	4622      	mov	r2, r4
 800d964:	4629      	mov	r1, r5
 800d966:	4630      	mov	r0, r6
 800d968:	f7ff ff94 	bl	800d894 <__sfputs_r>
 800d96c:	3001      	adds	r0, #1
 800d96e:	f000 80aa 	beq.w	800dac6 <_vfiprintf_r+0x20e>
 800d972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d974:	445a      	add	r2, fp
 800d976:	9209      	str	r2, [sp, #36]	; 0x24
 800d978:	f89a 3000 	ldrb.w	r3, [sl]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f000 80a2 	beq.w	800dac6 <_vfiprintf_r+0x20e>
 800d982:	2300      	movs	r3, #0
 800d984:	f04f 32ff 	mov.w	r2, #4294967295
 800d988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d98c:	f10a 0a01 	add.w	sl, sl, #1
 800d990:	9304      	str	r3, [sp, #16]
 800d992:	9307      	str	r3, [sp, #28]
 800d994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d998:	931a      	str	r3, [sp, #104]	; 0x68
 800d99a:	4654      	mov	r4, sl
 800d99c:	2205      	movs	r2, #5
 800d99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a2:	4858      	ldr	r0, [pc, #352]	; (800db04 <_vfiprintf_r+0x24c>)
 800d9a4:	f7f2 fc3c 	bl	8000220 <memchr>
 800d9a8:	9a04      	ldr	r2, [sp, #16]
 800d9aa:	b9d8      	cbnz	r0, 800d9e4 <_vfiprintf_r+0x12c>
 800d9ac:	06d1      	lsls	r1, r2, #27
 800d9ae:	bf44      	itt	mi
 800d9b0:	2320      	movmi	r3, #32
 800d9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9b6:	0713      	lsls	r3, r2, #28
 800d9b8:	bf44      	itt	mi
 800d9ba:	232b      	movmi	r3, #43	; 0x2b
 800d9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d9c6:	d015      	beq.n	800d9f4 <_vfiprintf_r+0x13c>
 800d9c8:	9a07      	ldr	r2, [sp, #28]
 800d9ca:	4654      	mov	r4, sl
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	f04f 0c0a 	mov.w	ip, #10
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9d8:	3b30      	subs	r3, #48	; 0x30
 800d9da:	2b09      	cmp	r3, #9
 800d9dc:	d94e      	bls.n	800da7c <_vfiprintf_r+0x1c4>
 800d9de:	b1b0      	cbz	r0, 800da0e <_vfiprintf_r+0x156>
 800d9e0:	9207      	str	r2, [sp, #28]
 800d9e2:	e014      	b.n	800da0e <_vfiprintf_r+0x156>
 800d9e4:	eba0 0308 	sub.w	r3, r0, r8
 800d9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	9304      	str	r3, [sp, #16]
 800d9f0:	46a2      	mov	sl, r4
 800d9f2:	e7d2      	b.n	800d99a <_vfiprintf_r+0xe2>
 800d9f4:	9b03      	ldr	r3, [sp, #12]
 800d9f6:	1d19      	adds	r1, r3, #4
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	9103      	str	r1, [sp, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	bfbb      	ittet	lt
 800da00:	425b      	neglt	r3, r3
 800da02:	f042 0202 	orrlt.w	r2, r2, #2
 800da06:	9307      	strge	r3, [sp, #28]
 800da08:	9307      	strlt	r3, [sp, #28]
 800da0a:	bfb8      	it	lt
 800da0c:	9204      	strlt	r2, [sp, #16]
 800da0e:	7823      	ldrb	r3, [r4, #0]
 800da10:	2b2e      	cmp	r3, #46	; 0x2e
 800da12:	d10c      	bne.n	800da2e <_vfiprintf_r+0x176>
 800da14:	7863      	ldrb	r3, [r4, #1]
 800da16:	2b2a      	cmp	r3, #42	; 0x2a
 800da18:	d135      	bne.n	800da86 <_vfiprintf_r+0x1ce>
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	1d1a      	adds	r2, r3, #4
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	9203      	str	r2, [sp, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfb8      	it	lt
 800da26:	f04f 33ff 	movlt.w	r3, #4294967295
 800da2a:	3402      	adds	r4, #2
 800da2c:	9305      	str	r3, [sp, #20]
 800da2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db14 <_vfiprintf_r+0x25c>
 800da32:	7821      	ldrb	r1, [r4, #0]
 800da34:	2203      	movs	r2, #3
 800da36:	4650      	mov	r0, sl
 800da38:	f7f2 fbf2 	bl	8000220 <memchr>
 800da3c:	b140      	cbz	r0, 800da50 <_vfiprintf_r+0x198>
 800da3e:	2340      	movs	r3, #64	; 0x40
 800da40:	eba0 000a 	sub.w	r0, r0, sl
 800da44:	fa03 f000 	lsl.w	r0, r3, r0
 800da48:	9b04      	ldr	r3, [sp, #16]
 800da4a:	4303      	orrs	r3, r0
 800da4c:	3401      	adds	r4, #1
 800da4e:	9304      	str	r3, [sp, #16]
 800da50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da54:	482c      	ldr	r0, [pc, #176]	; (800db08 <_vfiprintf_r+0x250>)
 800da56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da5a:	2206      	movs	r2, #6
 800da5c:	f7f2 fbe0 	bl	8000220 <memchr>
 800da60:	2800      	cmp	r0, #0
 800da62:	d03f      	beq.n	800dae4 <_vfiprintf_r+0x22c>
 800da64:	4b29      	ldr	r3, [pc, #164]	; (800db0c <_vfiprintf_r+0x254>)
 800da66:	bb1b      	cbnz	r3, 800dab0 <_vfiprintf_r+0x1f8>
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	3307      	adds	r3, #7
 800da6c:	f023 0307 	bic.w	r3, r3, #7
 800da70:	3308      	adds	r3, #8
 800da72:	9303      	str	r3, [sp, #12]
 800da74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da76:	443b      	add	r3, r7
 800da78:	9309      	str	r3, [sp, #36]	; 0x24
 800da7a:	e767      	b.n	800d94c <_vfiprintf_r+0x94>
 800da7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800da80:	460c      	mov	r4, r1
 800da82:	2001      	movs	r0, #1
 800da84:	e7a5      	b.n	800d9d2 <_vfiprintf_r+0x11a>
 800da86:	2300      	movs	r3, #0
 800da88:	3401      	adds	r4, #1
 800da8a:	9305      	str	r3, [sp, #20]
 800da8c:	4619      	mov	r1, r3
 800da8e:	f04f 0c0a 	mov.w	ip, #10
 800da92:	4620      	mov	r0, r4
 800da94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da98:	3a30      	subs	r2, #48	; 0x30
 800da9a:	2a09      	cmp	r2, #9
 800da9c:	d903      	bls.n	800daa6 <_vfiprintf_r+0x1ee>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d0c5      	beq.n	800da2e <_vfiprintf_r+0x176>
 800daa2:	9105      	str	r1, [sp, #20]
 800daa4:	e7c3      	b.n	800da2e <_vfiprintf_r+0x176>
 800daa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800daaa:	4604      	mov	r4, r0
 800daac:	2301      	movs	r3, #1
 800daae:	e7f0      	b.n	800da92 <_vfiprintf_r+0x1da>
 800dab0:	ab03      	add	r3, sp, #12
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	462a      	mov	r2, r5
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <_vfiprintf_r+0x258>)
 800dab8:	a904      	add	r1, sp, #16
 800daba:	4630      	mov	r0, r6
 800dabc:	f3af 8000 	nop.w
 800dac0:	4607      	mov	r7, r0
 800dac2:	1c78      	adds	r0, r7, #1
 800dac4:	d1d6      	bne.n	800da74 <_vfiprintf_r+0x1bc>
 800dac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dac8:	07d9      	lsls	r1, r3, #31
 800daca:	d405      	bmi.n	800dad8 <_vfiprintf_r+0x220>
 800dacc:	89ab      	ldrh	r3, [r5, #12]
 800dace:	059a      	lsls	r2, r3, #22
 800dad0:	d402      	bmi.n	800dad8 <_vfiprintf_r+0x220>
 800dad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dad4:	f7ff fe1d 	bl	800d712 <__retarget_lock_release_recursive>
 800dad8:	89ab      	ldrh	r3, [r5, #12]
 800dada:	065b      	lsls	r3, r3, #25
 800dadc:	f53f af12 	bmi.w	800d904 <_vfiprintf_r+0x4c>
 800dae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dae2:	e711      	b.n	800d908 <_vfiprintf_r+0x50>
 800dae4:	ab03      	add	r3, sp, #12
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	462a      	mov	r2, r5
 800daea:	4b09      	ldr	r3, [pc, #36]	; (800db10 <_vfiprintf_r+0x258>)
 800daec:	a904      	add	r1, sp, #16
 800daee:	4630      	mov	r0, r6
 800daf0:	f7ff f87c 	bl	800cbec <_printf_i>
 800daf4:	e7e4      	b.n	800dac0 <_vfiprintf_r+0x208>
 800daf6:	bf00      	nop
 800daf8:	0800e490 	.word	0x0800e490
 800dafc:	0800e4b0 	.word	0x0800e4b0
 800db00:	0800e470 	.word	0x0800e470
 800db04:	0800e3e4 	.word	0x0800e3e4
 800db08:	0800e3ee 	.word	0x0800e3ee
 800db0c:	00000000 	.word	0x00000000
 800db10:	0800d895 	.word	0x0800d895
 800db14:	0800e3ea 	.word	0x0800e3ea

0800db18 <__swbuf_r>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	460e      	mov	r6, r1
 800db1c:	4614      	mov	r4, r2
 800db1e:	4605      	mov	r5, r0
 800db20:	b118      	cbz	r0, 800db2a <__swbuf_r+0x12>
 800db22:	6983      	ldr	r3, [r0, #24]
 800db24:	b90b      	cbnz	r3, 800db2a <__swbuf_r+0x12>
 800db26:	f7ff fd43 	bl	800d5b0 <__sinit>
 800db2a:	4b21      	ldr	r3, [pc, #132]	; (800dbb0 <__swbuf_r+0x98>)
 800db2c:	429c      	cmp	r4, r3
 800db2e:	d12b      	bne.n	800db88 <__swbuf_r+0x70>
 800db30:	686c      	ldr	r4, [r5, #4]
 800db32:	69a3      	ldr	r3, [r4, #24]
 800db34:	60a3      	str	r3, [r4, #8]
 800db36:	89a3      	ldrh	r3, [r4, #12]
 800db38:	071a      	lsls	r2, r3, #28
 800db3a:	d52f      	bpl.n	800db9c <__swbuf_r+0x84>
 800db3c:	6923      	ldr	r3, [r4, #16]
 800db3e:	b36b      	cbz	r3, 800db9c <__swbuf_r+0x84>
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	1ac0      	subs	r0, r0, r3
 800db46:	6963      	ldr	r3, [r4, #20]
 800db48:	b2f6      	uxtb	r6, r6
 800db4a:	4283      	cmp	r3, r0
 800db4c:	4637      	mov	r7, r6
 800db4e:	dc04      	bgt.n	800db5a <__swbuf_r+0x42>
 800db50:	4621      	mov	r1, r4
 800db52:	4628      	mov	r0, r5
 800db54:	f7ff fc98 	bl	800d488 <_fflush_r>
 800db58:	bb30      	cbnz	r0, 800dba8 <__swbuf_r+0x90>
 800db5a:	68a3      	ldr	r3, [r4, #8]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	60a3      	str	r3, [r4, #8]
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	6022      	str	r2, [r4, #0]
 800db66:	701e      	strb	r6, [r3, #0]
 800db68:	6963      	ldr	r3, [r4, #20]
 800db6a:	3001      	adds	r0, #1
 800db6c:	4283      	cmp	r3, r0
 800db6e:	d004      	beq.n	800db7a <__swbuf_r+0x62>
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	07db      	lsls	r3, r3, #31
 800db74:	d506      	bpl.n	800db84 <__swbuf_r+0x6c>
 800db76:	2e0a      	cmp	r6, #10
 800db78:	d104      	bne.n	800db84 <__swbuf_r+0x6c>
 800db7a:	4621      	mov	r1, r4
 800db7c:	4628      	mov	r0, r5
 800db7e:	f7ff fc83 	bl	800d488 <_fflush_r>
 800db82:	b988      	cbnz	r0, 800dba8 <__swbuf_r+0x90>
 800db84:	4638      	mov	r0, r7
 800db86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db88:	4b0a      	ldr	r3, [pc, #40]	; (800dbb4 <__swbuf_r+0x9c>)
 800db8a:	429c      	cmp	r4, r3
 800db8c:	d101      	bne.n	800db92 <__swbuf_r+0x7a>
 800db8e:	68ac      	ldr	r4, [r5, #8]
 800db90:	e7cf      	b.n	800db32 <__swbuf_r+0x1a>
 800db92:	4b09      	ldr	r3, [pc, #36]	; (800dbb8 <__swbuf_r+0xa0>)
 800db94:	429c      	cmp	r4, r3
 800db96:	bf08      	it	eq
 800db98:	68ec      	ldreq	r4, [r5, #12]
 800db9a:	e7ca      	b.n	800db32 <__swbuf_r+0x1a>
 800db9c:	4621      	mov	r1, r4
 800db9e:	4628      	mov	r0, r5
 800dba0:	f000 f80c 	bl	800dbbc <__swsetup_r>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d0cb      	beq.n	800db40 <__swbuf_r+0x28>
 800dba8:	f04f 37ff 	mov.w	r7, #4294967295
 800dbac:	e7ea      	b.n	800db84 <__swbuf_r+0x6c>
 800dbae:	bf00      	nop
 800dbb0:	0800e490 	.word	0x0800e490
 800dbb4:	0800e4b0 	.word	0x0800e4b0
 800dbb8:	0800e470 	.word	0x0800e470

0800dbbc <__swsetup_r>:
 800dbbc:	4b32      	ldr	r3, [pc, #200]	; (800dc88 <__swsetup_r+0xcc>)
 800dbbe:	b570      	push	{r4, r5, r6, lr}
 800dbc0:	681d      	ldr	r5, [r3, #0]
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	b125      	cbz	r5, 800dbd2 <__swsetup_r+0x16>
 800dbc8:	69ab      	ldr	r3, [r5, #24]
 800dbca:	b913      	cbnz	r3, 800dbd2 <__swsetup_r+0x16>
 800dbcc:	4628      	mov	r0, r5
 800dbce:	f7ff fcef 	bl	800d5b0 <__sinit>
 800dbd2:	4b2e      	ldr	r3, [pc, #184]	; (800dc8c <__swsetup_r+0xd0>)
 800dbd4:	429c      	cmp	r4, r3
 800dbd6:	d10f      	bne.n	800dbf8 <__swsetup_r+0x3c>
 800dbd8:	686c      	ldr	r4, [r5, #4]
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbe0:	0719      	lsls	r1, r3, #28
 800dbe2:	d42c      	bmi.n	800dc3e <__swsetup_r+0x82>
 800dbe4:	06dd      	lsls	r5, r3, #27
 800dbe6:	d411      	bmi.n	800dc0c <__swsetup_r+0x50>
 800dbe8:	2309      	movs	r3, #9
 800dbea:	6033      	str	r3, [r6, #0]
 800dbec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbf0:	81a3      	strh	r3, [r4, #12]
 800dbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf6:	e03e      	b.n	800dc76 <__swsetup_r+0xba>
 800dbf8:	4b25      	ldr	r3, [pc, #148]	; (800dc90 <__swsetup_r+0xd4>)
 800dbfa:	429c      	cmp	r4, r3
 800dbfc:	d101      	bne.n	800dc02 <__swsetup_r+0x46>
 800dbfe:	68ac      	ldr	r4, [r5, #8]
 800dc00:	e7eb      	b.n	800dbda <__swsetup_r+0x1e>
 800dc02:	4b24      	ldr	r3, [pc, #144]	; (800dc94 <__swsetup_r+0xd8>)
 800dc04:	429c      	cmp	r4, r3
 800dc06:	bf08      	it	eq
 800dc08:	68ec      	ldreq	r4, [r5, #12]
 800dc0a:	e7e6      	b.n	800dbda <__swsetup_r+0x1e>
 800dc0c:	0758      	lsls	r0, r3, #29
 800dc0e:	d512      	bpl.n	800dc36 <__swsetup_r+0x7a>
 800dc10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc12:	b141      	cbz	r1, 800dc26 <__swsetup_r+0x6a>
 800dc14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc18:	4299      	cmp	r1, r3
 800dc1a:	d002      	beq.n	800dc22 <__swsetup_r+0x66>
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	f7ff fda7 	bl	800d770 <_free_r>
 800dc22:	2300      	movs	r3, #0
 800dc24:	6363      	str	r3, [r4, #52]	; 0x34
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc2c:	81a3      	strh	r3, [r4, #12]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6063      	str	r3, [r4, #4]
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	89a3      	ldrh	r3, [r4, #12]
 800dc38:	f043 0308 	orr.w	r3, r3, #8
 800dc3c:	81a3      	strh	r3, [r4, #12]
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	b94b      	cbnz	r3, 800dc56 <__swsetup_r+0x9a>
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc4c:	d003      	beq.n	800dc56 <__swsetup_r+0x9a>
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4630      	mov	r0, r6
 800dc52:	f000 f84d 	bl	800dcf0 <__smakebuf_r>
 800dc56:	89a0      	ldrh	r0, [r4, #12]
 800dc58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc5c:	f010 0301 	ands.w	r3, r0, #1
 800dc60:	d00a      	beq.n	800dc78 <__swsetup_r+0xbc>
 800dc62:	2300      	movs	r3, #0
 800dc64:	60a3      	str	r3, [r4, #8]
 800dc66:	6963      	ldr	r3, [r4, #20]
 800dc68:	425b      	negs	r3, r3
 800dc6a:	61a3      	str	r3, [r4, #24]
 800dc6c:	6923      	ldr	r3, [r4, #16]
 800dc6e:	b943      	cbnz	r3, 800dc82 <__swsetup_r+0xc6>
 800dc70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc74:	d1ba      	bne.n	800dbec <__swsetup_r+0x30>
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	0781      	lsls	r1, r0, #30
 800dc7a:	bf58      	it	pl
 800dc7c:	6963      	ldrpl	r3, [r4, #20]
 800dc7e:	60a3      	str	r3, [r4, #8]
 800dc80:	e7f4      	b.n	800dc6c <__swsetup_r+0xb0>
 800dc82:	2000      	movs	r0, #0
 800dc84:	e7f7      	b.n	800dc76 <__swsetup_r+0xba>
 800dc86:	bf00      	nop
 800dc88:	2000010c 	.word	0x2000010c
 800dc8c:	0800e490 	.word	0x0800e490
 800dc90:	0800e4b0 	.word	0x0800e4b0
 800dc94:	0800e470 	.word	0x0800e470

0800dc98 <abort>:
 800dc98:	b508      	push	{r3, lr}
 800dc9a:	2006      	movs	r0, #6
 800dc9c:	f000 f898 	bl	800ddd0 <raise>
 800dca0:	2001      	movs	r0, #1
 800dca2:	f7f3 ff79 	bl	8001b98 <_exit>

0800dca6 <__swhatbuf_r>:
 800dca6:	b570      	push	{r4, r5, r6, lr}
 800dca8:	460e      	mov	r6, r1
 800dcaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcae:	2900      	cmp	r1, #0
 800dcb0:	b096      	sub	sp, #88	; 0x58
 800dcb2:	4614      	mov	r4, r2
 800dcb4:	461d      	mov	r5, r3
 800dcb6:	da08      	bge.n	800dcca <__swhatbuf_r+0x24>
 800dcb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	602a      	str	r2, [r5, #0]
 800dcc0:	061a      	lsls	r2, r3, #24
 800dcc2:	d410      	bmi.n	800dce6 <__swhatbuf_r+0x40>
 800dcc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcc8:	e00e      	b.n	800dce8 <__swhatbuf_r+0x42>
 800dcca:	466a      	mov	r2, sp
 800dccc:	f000 f89c 	bl	800de08 <_fstat_r>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	dbf1      	blt.n	800dcb8 <__swhatbuf_r+0x12>
 800dcd4:	9a01      	ldr	r2, [sp, #4]
 800dcd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcde:	425a      	negs	r2, r3
 800dce0:	415a      	adcs	r2, r3
 800dce2:	602a      	str	r2, [r5, #0]
 800dce4:	e7ee      	b.n	800dcc4 <__swhatbuf_r+0x1e>
 800dce6:	2340      	movs	r3, #64	; 0x40
 800dce8:	2000      	movs	r0, #0
 800dcea:	6023      	str	r3, [r4, #0]
 800dcec:	b016      	add	sp, #88	; 0x58
 800dcee:	bd70      	pop	{r4, r5, r6, pc}

0800dcf0 <__smakebuf_r>:
 800dcf0:	898b      	ldrh	r3, [r1, #12]
 800dcf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcf4:	079d      	lsls	r5, r3, #30
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	d507      	bpl.n	800dd0c <__smakebuf_r+0x1c>
 800dcfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	6123      	str	r3, [r4, #16]
 800dd04:	2301      	movs	r3, #1
 800dd06:	6163      	str	r3, [r4, #20]
 800dd08:	b002      	add	sp, #8
 800dd0a:	bd70      	pop	{r4, r5, r6, pc}
 800dd0c:	ab01      	add	r3, sp, #4
 800dd0e:	466a      	mov	r2, sp
 800dd10:	f7ff ffc9 	bl	800dca6 <__swhatbuf_r>
 800dd14:	9900      	ldr	r1, [sp, #0]
 800dd16:	4605      	mov	r5, r0
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f7fe fb57 	bl	800c3cc <_malloc_r>
 800dd1e:	b948      	cbnz	r0, 800dd34 <__smakebuf_r+0x44>
 800dd20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd24:	059a      	lsls	r2, r3, #22
 800dd26:	d4ef      	bmi.n	800dd08 <__smakebuf_r+0x18>
 800dd28:	f023 0303 	bic.w	r3, r3, #3
 800dd2c:	f043 0302 	orr.w	r3, r3, #2
 800dd30:	81a3      	strh	r3, [r4, #12]
 800dd32:	e7e3      	b.n	800dcfc <__smakebuf_r+0xc>
 800dd34:	4b0d      	ldr	r3, [pc, #52]	; (800dd6c <__smakebuf_r+0x7c>)
 800dd36:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd38:	89a3      	ldrh	r3, [r4, #12]
 800dd3a:	6020      	str	r0, [r4, #0]
 800dd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd40:	81a3      	strh	r3, [r4, #12]
 800dd42:	9b00      	ldr	r3, [sp, #0]
 800dd44:	6163      	str	r3, [r4, #20]
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	6120      	str	r0, [r4, #16]
 800dd4a:	b15b      	cbz	r3, 800dd64 <__smakebuf_r+0x74>
 800dd4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd50:	4630      	mov	r0, r6
 800dd52:	f000 f86b 	bl	800de2c <_isatty_r>
 800dd56:	b128      	cbz	r0, 800dd64 <__smakebuf_r+0x74>
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	f023 0303 	bic.w	r3, r3, #3
 800dd5e:	f043 0301 	orr.w	r3, r3, #1
 800dd62:	81a3      	strh	r3, [r4, #12]
 800dd64:	89a0      	ldrh	r0, [r4, #12]
 800dd66:	4305      	orrs	r5, r0
 800dd68:	81a5      	strh	r5, [r4, #12]
 800dd6a:	e7cd      	b.n	800dd08 <__smakebuf_r+0x18>
 800dd6c:	0800d549 	.word	0x0800d549

0800dd70 <_malloc_usable_size_r>:
 800dd70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd74:	1f18      	subs	r0, r3, #4
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	bfbc      	itt	lt
 800dd7a:	580b      	ldrlt	r3, [r1, r0]
 800dd7c:	18c0      	addlt	r0, r0, r3
 800dd7e:	4770      	bx	lr

0800dd80 <_raise_r>:
 800dd80:	291f      	cmp	r1, #31
 800dd82:	b538      	push	{r3, r4, r5, lr}
 800dd84:	4604      	mov	r4, r0
 800dd86:	460d      	mov	r5, r1
 800dd88:	d904      	bls.n	800dd94 <_raise_r+0x14>
 800dd8a:	2316      	movs	r3, #22
 800dd8c:	6003      	str	r3, [r0, #0]
 800dd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd92:	bd38      	pop	{r3, r4, r5, pc}
 800dd94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd96:	b112      	cbz	r2, 800dd9e <_raise_r+0x1e>
 800dd98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd9c:	b94b      	cbnz	r3, 800ddb2 <_raise_r+0x32>
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 f830 	bl	800de04 <_getpid_r>
 800dda4:	462a      	mov	r2, r5
 800dda6:	4601      	mov	r1, r0
 800dda8:	4620      	mov	r0, r4
 800ddaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddae:	f000 b817 	b.w	800dde0 <_kill_r>
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d00a      	beq.n	800ddcc <_raise_r+0x4c>
 800ddb6:	1c59      	adds	r1, r3, #1
 800ddb8:	d103      	bne.n	800ddc2 <_raise_r+0x42>
 800ddba:	2316      	movs	r3, #22
 800ddbc:	6003      	str	r3, [r0, #0]
 800ddbe:	2001      	movs	r0, #1
 800ddc0:	e7e7      	b.n	800dd92 <_raise_r+0x12>
 800ddc2:	2400      	movs	r4, #0
 800ddc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ddc8:	4628      	mov	r0, r5
 800ddca:	4798      	blx	r3
 800ddcc:	2000      	movs	r0, #0
 800ddce:	e7e0      	b.n	800dd92 <_raise_r+0x12>

0800ddd0 <raise>:
 800ddd0:	4b02      	ldr	r3, [pc, #8]	; (800dddc <raise+0xc>)
 800ddd2:	4601      	mov	r1, r0
 800ddd4:	6818      	ldr	r0, [r3, #0]
 800ddd6:	f7ff bfd3 	b.w	800dd80 <_raise_r>
 800ddda:	bf00      	nop
 800dddc:	2000010c 	.word	0x2000010c

0800dde0 <_kill_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d07      	ldr	r5, [pc, #28]	; (800de00 <_kill_r+0x20>)
 800dde4:	2300      	movs	r3, #0
 800dde6:	4604      	mov	r4, r0
 800dde8:	4608      	mov	r0, r1
 800ddea:	4611      	mov	r1, r2
 800ddec:	602b      	str	r3, [r5, #0]
 800ddee:	f7f3 fec3 	bl	8001b78 <_kill>
 800ddf2:	1c43      	adds	r3, r0, #1
 800ddf4:	d102      	bne.n	800ddfc <_kill_r+0x1c>
 800ddf6:	682b      	ldr	r3, [r5, #0]
 800ddf8:	b103      	cbz	r3, 800ddfc <_kill_r+0x1c>
 800ddfa:	6023      	str	r3, [r4, #0]
 800ddfc:	bd38      	pop	{r3, r4, r5, pc}
 800ddfe:	bf00      	nop
 800de00:	20002538 	.word	0x20002538

0800de04 <_getpid_r>:
 800de04:	f7f3 beb0 	b.w	8001b68 <_getpid>

0800de08 <_fstat_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4d07      	ldr	r5, [pc, #28]	; (800de28 <_fstat_r+0x20>)
 800de0c:	2300      	movs	r3, #0
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	4611      	mov	r1, r2
 800de14:	602b      	str	r3, [r5, #0]
 800de16:	f7f3 ff0e 	bl	8001c36 <_fstat>
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	d102      	bne.n	800de24 <_fstat_r+0x1c>
 800de1e:	682b      	ldr	r3, [r5, #0]
 800de20:	b103      	cbz	r3, 800de24 <_fstat_r+0x1c>
 800de22:	6023      	str	r3, [r4, #0]
 800de24:	bd38      	pop	{r3, r4, r5, pc}
 800de26:	bf00      	nop
 800de28:	20002538 	.word	0x20002538

0800de2c <_isatty_r>:
 800de2c:	b538      	push	{r3, r4, r5, lr}
 800de2e:	4d06      	ldr	r5, [pc, #24]	; (800de48 <_isatty_r+0x1c>)
 800de30:	2300      	movs	r3, #0
 800de32:	4604      	mov	r4, r0
 800de34:	4608      	mov	r0, r1
 800de36:	602b      	str	r3, [r5, #0]
 800de38:	f7f3 ff0d 	bl	8001c56 <_isatty>
 800de3c:	1c43      	adds	r3, r0, #1
 800de3e:	d102      	bne.n	800de46 <_isatty_r+0x1a>
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	b103      	cbz	r3, 800de46 <_isatty_r+0x1a>
 800de44:	6023      	str	r3, [r4, #0]
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	20002538 	.word	0x20002538

0800de4c <_init>:
 800de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4e:	bf00      	nop
 800de50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de52:	bc08      	pop	{r3}
 800de54:	469e      	mov	lr, r3
 800de56:	4770      	bx	lr

0800de58 <_fini>:
 800de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5a:	bf00      	nop
 800de5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de5e:	bc08      	pop	{r3}
 800de60:	469e      	mov	lr, r3
 800de62:	4770      	bx	lr
