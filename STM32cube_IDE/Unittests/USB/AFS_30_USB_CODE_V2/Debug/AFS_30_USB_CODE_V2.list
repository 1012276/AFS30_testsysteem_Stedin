
AFS_30_USB_CODE_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009084  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009248  08009248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092e0  080092e0  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080092e0  080092e0  000192e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092e8  080092e8  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ec  080092ec  000192ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080092f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e4c  20000110  08009400  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f5c  08009400  00021f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001631a  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342a  00000000  00000000  0003645a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c06  00000000  00000000  0003b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164ad  00000000  00000000  00060576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf6c1  00000000  00000000  00076a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001460e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c4  00000000  00000000  00146134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000110 	.word	0x20000110
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009230 	.word	0x08009230

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000114 	.word	0x20000114
 8000200:	08009230 	.word	0x08009230

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <CheckReceivedData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CheckReceivedData(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* Check if the received data contains the target string */
  if (strstr(receivedData, "Hello world, USB is working") != NULL) {
 800051c:	4908      	ldr	r1, [pc, #32]	; (8000540 <CheckReceivedData+0x28>)
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <CheckReceivedData+0x2c>)
 8000520:	f008 fe6f 	bl	8009202 <strstr>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d007      	beq.n	800053a <CheckReceivedData+0x22>

    /* Clear the buffer after matching */
    memset(receivedData, '\0', sizeof(receivedData));
 800052a:	2264      	movs	r2, #100	; 0x64
 800052c:	2100      	movs	r1, #0
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <CheckReceivedData+0x2c>)
 8000530:	f008 fe52 	bl	80091d8 <memset>
    receivedLength = 0;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <CheckReceivedData+0x30>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
  }

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	08009268 	.word	0x08009268
 8000544:	200002e4 	.word	0x200002e4
 8000548:	20000348 	.word	0x20000348

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fd0f 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f831 	bl	80005bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800055a:	f000 f89b 	bl	8000694 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f9d5 	bl	800090c <MX_GPIO_Init>
  MX_I2S1_Init();
 8000562:	f000 f8bf 	bl	80006e4 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000566:	f000 f8eb 	bl	8000740 <MX_I2S2_Init>
  MX_I2S3_Init();
 800056a:	f000 f917 	bl	800079c <MX_I2S3_Init>
  MX_SPI4_Init();
 800056e:	f000 f943 	bl	80007f8 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000572:	f000 f977 	bl	8000864 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000576:	f000 f99f 	bl	80008b8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800057a:	f007 fff5 	bl	8008568 <MX_USB_DEVICE_Init>


  /////// KLOK FREQEUNTIE OP 8 MHZ zetten////
  /////// KLOK FREQEUNTIE OP 8 MHZ zetten voor nucleo board////

  for (int var = 0; var <12; ++var) {
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	e012      	b.n	80005aa <main+0x5e>
 	    CDC_Transmit_FS((uint8_t *)data,strlen (data));
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <main+0x6c>)
 8000586:	681c      	ldr	r4, [r3, #0]
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <main+0x6c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe39 	bl	8000204 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	4619      	mov	r1, r3
 8000596:	4620      	mov	r0, r4
 8000598:	f008 f928 	bl	80087ec <CDC_Transmit_FS>
 	    HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f000 fd5a 	bl	8001058 <HAL_Delay>
  for (int var = 0; var <12; ++var) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b0b      	cmp	r3, #11
 80005ae:	dde9      	ble.n	8000584 <main+0x38>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CheckReceivedData();
 80005b0:	f7ff ffb2 	bl	8000518 <CheckReceivedData>
 80005b4:	e7fc      	b.n	80005b0 <main+0x64>
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f008 fe04 	bl	80091d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a28      	ldr	r2, [pc, #160]	; (800068c <SystemClock_Config+0xd0>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xd4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xd4>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fd6d 	bl	8004124 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 fa1c 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000658:	2303      	movs	r3, #3
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fc9a 	bl	8002fac <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800067e:	f000 fa05 	bl	8000a8c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b098      	sub	sp, #96	; 0x60
 8000698:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	225c      	movs	r2, #92	; 0x5c
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f008 fd99 	bl	80091d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_I2S_APB2;
 80006a6:	2303      	movs	r3, #3
 80006a8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 75;
 80006aa:	234b      	movs	r3, #75	; 0x4b
 80006ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 80006b2:	2306      	movs	r3, #6
 80006b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80006c2:	2300      	movs	r3, #0
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fd87 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80006d8:	f000 f9d8 	bl	8000a8c <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3760      	adds	r7, #96	; 0x60
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2S1_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_I2S1_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2S1_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2S1_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2S1_Init+0x54>)
 80006fe:	2203      	movs	r2, #3
 8000700:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_I2S1_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_I2S1_Init+0x54>)
 800070a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800070e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2S1_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_I2S1_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2S1_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2S1_Init+0x54>)
 8000724:	f000 ff7c 	bl	8001620 <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 f9ad 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000012c 	.word	0x2000012c
 800073c:	40013000 	.word	0x40013000

08000740 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_I2S2_Init+0x54>)
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <MX_I2S2_Init+0x58>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2S2_Init+0x54>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_I2S2_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2S2_Init+0x54>)
 800075a:	2203      	movs	r2, #3
 800075c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_I2S2_Init+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_I2S2_Init+0x54>)
 8000766:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800076a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2S2_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_I2S2_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2S2_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_I2S2_Init+0x54>)
 8000780:	f000 ff4e 	bl	8001620 <HAL_I2S_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800078a:	f000 f97f 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000174 	.word	0x20000174
 8000798:	40003800 	.word	0x40003800

0800079c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <MX_I2S3_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007c2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80007c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007dc:	f000 ff20 	bl	8001620 <HAL_I2S_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007e6:	f000 f951 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001bc 	.word	0x200001bc
 80007f4:	40003c00 	.word	0x40003c00

080007f8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI4_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_SPI4_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_SPI4_Init+0x64>)
 8000804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI4_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI4_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI4_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI4_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI4_Init+0x64>)
 8000824:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000828:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI4_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI4_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI4_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI4_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI4_Init+0x64>)
 8000844:	220a      	movs	r2, #10
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI4_Init+0x64>)
 800084a:	f003 ff09 	bl	8004660 <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 f91a 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000204 	.word	0x20000204
 8000860:	40013400 	.word	0x40013400

08000864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART1_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800089c:	f003 ff69 	bl	8004772 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f8f1 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000025c 	.word	0x2000025c
 80008b4:	40011000 	.word	0x40011000

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART3_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f003 ff3f 	bl	8004772 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f8c7 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200002a0 	.word	0x200002a0
 8000908:	40004800 	.word	0x40004800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a54      	ldr	r2, [pc, #336]	; (8000a7c <MX_GPIO_Init+0x170>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b52      	ldr	r3, [pc, #328]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b4e      	ldr	r3, [pc, #312]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b47      	ldr	r3, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a46      	ldr	r2, [pc, #280]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b44      	ldr	r3, [pc, #272]	; (8000a7c <MX_GPIO_Init+0x170>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b40      	ldr	r3, [pc, #256]	; (8000a7c <MX_GPIO_Init+0x170>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a3f      	ldr	r2, [pc, #252]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <MX_GPIO_Init+0x170>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a38      	ldr	r2, [pc, #224]	; (8000a7c <MX_GPIO_Init+0x170>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2a      	ldr	r2, [pc, #168]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_GPIO_Init+0x170>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_RESET_GPIO_Port, DAC_RESET_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2108      	movs	r1, #8
 80009ea:	4825      	ldr	r0, [pc, #148]	; (8000a80 <MX_GPIO_Init+0x174>)
 80009ec:	f000 fdfe 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	211c      	movs	r1, #28
 80009f4:	4823      	ldr	r0, [pc, #140]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009f6:	f000 fdf9 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DE_OUTPUT_Pin|RE_OUTPUT_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2130      	movs	r1, #48	; 0x30
 80009fe:	4822      	ldr	r0, [pc, #136]	; (8000a88 <MX_GPIO_Init+0x17c>)
 8000a00:	f000 fdf4 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DAC_RESET_Pin */
  GPIO_InitStruct.Pin = DAC_RESET_Pin;
 8000a04:	2308      	movs	r3, #8
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DAC_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4819      	ldr	r0, [pc, #100]	; (8000a80 <MX_GPIO_Init+0x174>)
 8000a1c:	f000 fc52 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_KNOP_Pin PAUZEER_KNOP_Pin STOP_KNOP_Pin */
  GPIO_InitStruct.Pin = START_KNOP_Pin|PAUZEER_KNOP_Pin|STOP_KNOP_Pin;
 8000a20:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4814      	ldr	r0, [pc, #80]	; (8000a88 <MX_GPIO_Init+0x17c>)
 8000a36:	f000 fc45 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RODE_LED_Pin GROENE_LED_Pin BLAUWE_LED_Pin */
  GPIO_InitStruct.Pin = RODE_LED_Pin|GROENE_LED_Pin|BLAUWE_LED_Pin;
 8000a3a:	231c      	movs	r3, #28
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000a52:	f000 fc37 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DE_OUTPUT_Pin RE_OUTPUT_Pin */
  GPIO_InitStruct.Pin = DE_OUTPUT_Pin|RE_OUTPUT_Pin;
 8000a56:	2330      	movs	r3, #48	; 0x30
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_GPIO_Init+0x17c>)
 8000a6e:	f000 fc29 	bl	80012c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40020400 	.word	0x40020400

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b090      	sub	sp, #64	; 0x40
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a79      	ldr	r2, [pc, #484]	; (8000cec <HAL_I2S_MspInit+0x204>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_I2S_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b0e:	4b78      	ldr	r3, [pc, #480]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a77      	ldr	r2, [pc, #476]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b75      	ldr	r3, [pc, #468]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
 8000b2a:	4b71      	ldr	r3, [pc, #452]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a70      	ldr	r2, [pc, #448]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b6e      	ldr	r3, [pc, #440]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000b42:	23b0      	movs	r3, #176	; 0xb0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b52:	2305      	movs	r3, #5
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4865      	ldr	r0, [pc, #404]	; (8000cf4 <HAL_I2S_MspInit+0x20c>)
 8000b5e:	f000 fbb1 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b62:	e0bf      	b.n	8000ce4 <HAL_I2S_MspInit+0x1fc>
  else if(hi2s->Instance==SPI2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a63      	ldr	r2, [pc, #396]	; (8000cf8 <HAL_I2S_MspInit+0x210>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d169      	bne.n	8000c42 <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
 8000b72:	4b5f      	ldr	r3, [pc, #380]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a5e      	ldr	r2, [pc, #376]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b5c      	ldr	r3, [pc, #368]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	623b      	str	r3, [r7, #32]
 8000b88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	4b58      	ldr	r3, [pc, #352]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a57      	ldr	r2, [pc, #348]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b55      	ldr	r3, [pc, #340]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a50      	ldr	r2, [pc, #320]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b4e      	ldr	r3, [pc, #312]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b4a      	ldr	r3, [pc, #296]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a49      	ldr	r2, [pc, #292]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4840      	ldr	r0, [pc, #256]	; (8000cfc <HAL_I2S_MspInit+0x214>)
 8000bfc:	f000 fb62 	bl	80012c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c10:	2305      	movs	r3, #5
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4839      	ldr	r0, [pc, #228]	; (8000d00 <HAL_I2S_MspInit+0x218>)
 8000c1c:	f000 fb52 	bl	80012c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000c30:	2307      	movs	r3, #7
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4832      	ldr	r0, [pc, #200]	; (8000d04 <HAL_I2S_MspInit+0x21c>)
 8000c3c:	f000 fb42 	bl	80012c4 <HAL_GPIO_Init>
}
 8000c40:	e050      	b.n	8000ce4 <HAL_I2S_MspInit+0x1fc>
  else if(hi2s->Instance==SPI3)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <HAL_I2S_MspInit+0x220>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d14b      	bne.n	8000ce4 <HAL_I2S_MspInit+0x1fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_I2S_MspInit+0x208>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <HAL_I2S_MspInit+0x20c>)
 8000cbe:	f000 fb01 	bl	80012c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <HAL_I2S_MspInit+0x218>)
 8000ce0:	f000 faf0 	bl	80012c4 <HAL_GPIO_Init>
}
 8000ce4:	bf00      	nop
 8000ce6:	3740      	adds	r7, #64	; 0x40
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40013000 	.word	0x40013000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40003800 	.word	0x40003800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40003c00 	.word	0x40003c00

08000d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_SPI_MspInit+0x84>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12b      	bne.n	8000d86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d66:	2374      	movs	r3, #116	; 0x74
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d76:	2305      	movs	r3, #5
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d82:	f000 fa9f 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40013400 	.word	0x40013400
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <HAL_UART_MspInit+0xe8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12c      	bne.n	8000e18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a30      	ldr	r2, [pc, #192]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df6:	23c0      	movs	r3, #192	; 0xc0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e06:	2307      	movs	r3, #7
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481e      	ldr	r0, [pc, #120]	; (8000e8c <HAL_UART_MspInit+0xf0>)
 8000e12:	f000 fa57 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e16:	e031      	b.n	8000e7c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_UART_MspInit+0xf4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_UART_MspInit+0xec>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 8000e5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_UART_MspInit+0xf0>)
 8000e78:	f000 fa24 	bl	80012c4 <HAL_GPIO_Init>
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	; 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40011000 	.word	0x40011000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	40004800 	.word	0x40004800

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f89a 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <OTG_FS_IRQHandler+0x10>)
 8000eee:	f000 feeb 	bl	8001cc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20001830 	.word	0x20001830

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	; (8000f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4a:	f7ff ffd7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f008 f91f 	bl	8009190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fafb 	bl	800054c <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000f64:	080092f0 	.word	0x080092f0
  ldr r2, =_sbss
 8000f68:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000f6c:	20001f5c 	.word	0x20001f5c

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f94f 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fd76 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f967 	bl	80012aa <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f92f 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000008 	.word	0x20000008

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000000c 	.word	0x2000000c
 800103c:	2000034c 	.word	0x2000034c

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000034c 	.word	0x2000034c

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_Delay+0x44>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000000c 	.word	0x2000000c

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db0b      	blt.n	800112e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <__NVIC_EnableIRQ+0x38>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff29 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff3e 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff31 	bl	8001104 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa2 	bl	80011fc <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e165      	b.n	80015ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8154 	bne.w	80015a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	2b02      	cmp	r3, #2
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80ae 	beq.w	80015a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <HAL_GPIO_Init+0x300>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a5c      	ldr	r2, [pc, #368]	; (80015c4 <HAL_GPIO_Init+0x300>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b5a      	ldr	r3, [pc, #360]	; (80015c4 <HAL_GPIO_Init+0x300>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001466:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_GPIO_Init+0x304>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x308>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d025      	beq.n	80014de <HAL_GPIO_Init+0x21a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01f      	beq.n	80014da <HAL_GPIO_Init+0x216>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x310>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x212>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x314>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x318>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x20a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4a      	ldr	r2, [pc, #296]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x206>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a49      	ldr	r2, [pc, #292]	; (80015e4 <HAL_GPIO_Init+0x320>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x202>
 80014c2:	2306      	movs	r3, #6
 80014c4:	e00c      	b.n	80014e0 <HAL_GPIO_Init+0x21c>
 80014c6:	2307      	movs	r3, #7
 80014c8:	e00a      	b.n	80014e0 <HAL_GPIO_Init+0x21c>
 80014ca:	2305      	movs	r3, #5
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x21c>
 80014ce:	2304      	movs	r3, #4
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x21c>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x21c>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x21c>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x21c>
 80014de:	2300      	movs	r3, #0
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f002 0203 	and.w	r2, r2, #3
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x304>)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_GPIO_Init+0x324>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a26      	ldr	r2, [pc, #152]	; (80015e8 <HAL_GPIO_Init+0x324>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_GPIO_Init+0x324>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_GPIO_Init+0x324>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	f67f ae96 	bls.w	80012e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40021400 	.word	0x40021400
 80015e4:	40021800 	.word	0x40021800
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0e1      	b.n	80017f6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a6d      	ldr	r2, [pc, #436]	; (8001800 <HAL_I2S_Init+0x1e0>)
 800164a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fa4b 	bl	8000ae8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2202      	movs	r2, #2
 8001656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001668:	f023 030f 	bic.w	r3, r3, #15
 800166c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2202      	movs	r2, #2
 8001674:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d06f      	beq.n	800175e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001686:	2310      	movs	r3, #16
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e001      	b.n	8001690 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800168c:	2320      	movs	r3, #32
 800168e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b20      	cmp	r3, #32
 8001696:	d802      	bhi.n	800169e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_I2S_Init+0x1e4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d004      	beq.n	80016b2 <HAL_I2S_Init+0x92>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a56      	ldr	r2, [pc, #344]	; (8001808 <HAL_I2S_Init+0x1e8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d104      	bne.n	80016bc <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f002 f8be 	bl	8003834 <HAL_RCCEx_GetPeriphCLKFreq>
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	e003      	b.n	80016c4 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80016bc:	2002      	movs	r0, #2
 80016be:	f002 f8b9 	bl	8003834 <HAL_RCCEx_GetPeriphCLKFreq>
 80016c2:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016cc:	d125      	bne.n	800171a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	3305      	adds	r3, #5
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e01f      	b.n	8001738 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	3305      	adds	r3, #5
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	e00e      	b.n	8001738 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	3305      	adds	r3, #5
 8001736:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4a34      	ldr	r2, [pc, #208]	; (800180c <HAL_I2S_Init+0x1ec>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	e003      	b.n	8001766 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800175e:	2302      	movs	r3, #2
 8001760:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d902      	bls.n	8001772 <HAL_I2S_Init+0x152>
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d907      	bls.n	8001782 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f043 0210 	orr.w	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e039      	b.n	80017f6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	ea42 0103 	orr.w	r1, r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	430a      	orrs	r2, r1
 8001794:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017a0:	f023 030f 	bic.w	r3, r3, #15
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6851      	ldr	r1, [r2, #4]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6892      	ldr	r2, [r2, #8]
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68d2      	ldr	r2, [r2, #12]
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6992      	ldr	r2, [r2, #24]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c4:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b30      	cmp	r3, #48	; 0x30
 80017cc:	d003      	beq.n	80017d6 <HAL_I2S_Init+0x1b6>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2bb0      	cmp	r3, #176	; 0xb0
 80017d4:	d107      	bne.n	80017e6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017e4:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	08001907 	.word	0x08001907
 8001804:	40003800 	.word	0x40003800
 8001808:	40003c00 	.word	0x40003c00
 800180c:	cccccccd 	.word	0xcccccccd

08001810 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	1c9a      	adds	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10e      	bne.n	80018a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001890:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffb8 	bl	8001810 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	b292      	uxth	r2, r2
 80018bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	1c9a      	adds	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff93 	bl	8001824 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b04      	cmp	r3, #4
 8001920:	d13a      	bne.n	8001998 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d109      	bne.n	8001940 <I2S_IRQHandler+0x3a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	2b40      	cmp	r3, #64	; 0x40
 8001938:	d102      	bne.n	8001940 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffb4 	bl	80018a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d126      	bne.n	8001998 <I2S_IRQHandler+0x92>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	2b20      	cmp	r3, #32
 8001956:	d11f      	bne.n	8001998 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001966:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ff50 	bl	8001838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d136      	bne.n	8001a12 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d109      	bne.n	80019c2 <I2S_IRQHandler+0xbc>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b80      	cmp	r3, #128	; 0x80
 80019ba:	d102      	bne.n	80019c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff45 	bl	800184c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d122      	bne.n	8001a12 <I2S_IRQHandler+0x10c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d11b      	bne.n	8001a12 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f043 0204 	orr.w	r2, r3, #4
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff13 	bl	8001838 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1c:	b08f      	sub	sp, #60	; 0x3c
 8001a1e:	af0a      	add	r7, sp, #40	; 0x28
 8001a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e116      	b.n	8001c5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f007 f82a 	bl	8008aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fa57 	bl	8004f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	687e      	ldr	r6, [r7, #4]
 8001a78:	466d      	mov	r5, sp
 8001a7a:	f106 0410 	add.w	r4, r6, #16
 8001a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a8e:	1d33      	adds	r3, r6, #4
 8001a90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a92:	6838      	ldr	r0, [r7, #0]
 8001a94:	f003 f92e 	bl	8004cf4 <USB_CoreInit>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0d7      	b.n	8001c5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fa45 	bl	8004f40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e04a      	b.n	8001b52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	333d      	adds	r3, #61	; 0x3d
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	333c      	adds	r3, #60	; 0x3c
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	b298      	uxth	r0, r3
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	3344      	adds	r3, #68	; 0x44
 8001af8:	4602      	mov	r2, r0
 8001afa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	3340      	adds	r3, #64	; 0x40
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3348      	adds	r3, #72	; 0x48
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	334c      	adds	r3, #76	; 0x4c
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	3354      	adds	r3, #84	; 0x54
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d3af      	bcc.n	8001abc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e044      	b.n	8001bec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	3301      	adds	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3b5      	bcc.n	8001b62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	687e      	ldr	r6, [r7, #4]
 8001bfe:	466d      	mov	r5, sp
 8001c00:	f106 0410 	add.w	r4, r6, #16
 8001c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c14:	1d33      	adds	r3, r6, #4
 8001c16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c18:	6838      	ldr	r0, [r7, #0]
 8001c1a:	f003 f9dd 	bl	8004fd8 <USB_DevInit>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e014      	b.n	8001c5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d102      	bne.n	8001c4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f001 f98b 	bl	8002f64 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fb1f 	bl	8006296 <USB_DevDisconnect>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_Start+0x1c>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e020      	b.n	8001cc0 <HAL_PCD_Start+0x5e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d109      	bne.n	8001ca2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d005      	beq.n	8001ca2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 f928 	bl	8004efc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 facf 	bl	8006254 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b08d      	sub	sp, #52	; 0x34
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fb8d 	bl	80063fe <USB_GetMode>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 84b7 	bne.w	800265a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 faf1 	bl	80062d8 <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 84ad 	beq.w	8002658 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fade 	bl	80062d8 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d107      	bne.n	8001d36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f002 0202 	and.w	r2, r2, #2
 8001d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 facc 	bl	80062d8 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d161      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0210 	bic.w	r2, r2, #16
 8001d58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	0c5b      	lsrs	r3, r3, #17
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d124      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d035      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	6a38      	ldr	r0, [r7, #32]
 8001da6:	f004 f903 	bl	8005fb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db6:	441a      	add	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dc8:	441a      	add	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	621a      	str	r2, [r3, #32]
 8001dce:	e016      	b.n	8001dfe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	0c5b      	lsrs	r3, r3, #17
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d110      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001de2:	2208      	movs	r2, #8
 8001de4:	4619      	mov	r1, r3
 8001de6:	6a38      	ldr	r0, [r7, #32]
 8001de8:	f004 f8e2 	bl	8005fb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001df8:	441a      	add	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0210 	orr.w	r2, r2, #16
 8001e0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f004 fa60 	bl	80062d8 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e22:	f040 80a7 	bne.w	8001f74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 fa65 	bl	80062fe <USB_ReadDevAllOutEpInterrupt>
 8001e34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e36:	e099      	b.n	8001f6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 808e 	beq.w	8001f60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 fa89 	bl	8006366 <USB_ReadDevOutEPInterrupt>
 8001e54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00c      	beq.n	8001e7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2301      	movs	r3, #1
 8001e70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 feef 	bl	8002c58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00c      	beq.n	8001e9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e90:	461a      	mov	r2, r3
 8001e92:	2308      	movs	r3, #8
 8001e94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 ffc5 	bl	8002e28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d030      	beq.n	8001f26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d109      	bne.n	8001ee4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	78db      	ldrb	r3, [r3, #3]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f006 fee2 	bl	8008cd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f20:	461a      	mov	r2, r3
 8001f22:	2302      	movs	r3, #2
 8001f24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2320      	movs	r3, #32
 8001f40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f af62 	bne.w	8001e38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 f9ad 	bl	80062d8 <USB_ReadInterrupts>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f88:	f040 80db 	bne.w	8002142 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 f9ce 	bl	8006332 <USB_ReadDevAllInEpInterrupt>
 8001f96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f9c:	e0cd      	b.n	800213a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80c2 	beq.w	800212e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 f9f4 	bl	80063a2 <USB_ReadDevInEPInterrupt>
 8001fba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d057      	beq.n	8002076 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	2201      	movs	r2, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69f9      	ldr	r1, [r7, #28]
 8001fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d132      	bne.n	800206a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	334c      	adds	r3, #76	; 0x4c
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4403      	add	r3, r0
 8002024:	3348      	adds	r3, #72	; 0x48
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4419      	add	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4403      	add	r3, r0
 8002038:	334c      	adds	r3, #76	; 0x4c
 800203a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	2b00      	cmp	r3, #0
 8002040:	d113      	bne.n	800206a <HAL_PCD_IRQHandler+0x3a2>
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3354      	adds	r3, #84	; 0x54
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d108      	bne.n	800206a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002062:	461a      	mov	r2, r3
 8002064:	2101      	movs	r1, #1
 8002066:	f004 f9fb 	bl	8006460 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f006 fdac 	bl	8008bce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800208c:	461a      	mov	r2, r3
 800208e:	2308      	movs	r3, #8
 8002090:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a8:	461a      	mov	r2, r3
 80020aa:	2310      	movs	r3, #16
 80020ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c4:	461a      	mov	r2, r3
 80020c6:	2340      	movs	r3, #64	; 0x40
 80020c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d023      	beq.n	800211c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80020d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d6:	6a38      	ldr	r0, [r7, #32]
 80020d8:	f003 f8dc 	bl	8005294 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80020dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	3338      	adds	r3, #56	; 0x38
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	78db      	ldrb	r3, [r3, #3]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d108      	bne.n	800210a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2200      	movs	r2, #0
 80020fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f006 fdf9 	bl	8008cfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002116:	461a      	mov	r2, r3
 8002118:	2302      	movs	r3, #2
 800211a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fd08 	bl	8002b3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f af2e 	bne.w	8001f9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f004 f8c6 	bl	80062d8 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002156:	d122      	bne.n	800219e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f006 ff73 	bl	800906c <HAL_PCDEx_LPM_Callback>
 8002186:	e002      	b.n	800218e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f006 fd97 	bl	8008cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800219c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f898 	bl	80062d8 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021b2:	d112      	bne.n	80021da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d102      	bne.n	80021ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f006 fd53 	bl	8008c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021d8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 f87a 	bl	80062d8 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ee:	d121      	bne.n	8002234 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80021fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d111      	bne.n	800222e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	f003 020f 	and.w	r2, r3, #15
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002224:	2101      	movs	r1, #1
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f006 ff20 	bl	800906c <HAL_PCDEx_LPM_Callback>
 800222c:	e002      	b.n	8002234 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 fd1e 	bl	8008c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f004 f84d 	bl	80062d8 <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002248:	f040 80b7 	bne.w	80023ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2110      	movs	r1, #16
 8002266:	4618      	mov	r0, r3
 8002268:	f003 f814 	bl	8005294 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002270:	e046      	b.n	8002300 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227e:	461a      	mov	r2, r3
 8002280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002284:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	4413      	add	r3, r2
 800228e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002296:	0151      	lsls	r1, r2, #5
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	440a      	add	r2, r1
 800229c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b2:	461a      	mov	r2, r3
 80022b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ca:	0151      	lsls	r1, r2, #5
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	440a      	add	r2, r1
 80022d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ea:	0151      	lsls	r1, r2, #5
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	440a      	add	r2, r1
 80022f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	3301      	adds	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002306:	429a      	cmp	r2, r3
 8002308:	d3b3      	bcc.n	8002272 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002318:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800231c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002336:	f043 030b 	orr.w	r3, r3, #11
 800233a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234c:	f043 030b 	orr.w	r3, r3, #11
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	e015      	b.n	8002380 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002366:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800236a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237a:	f043 030b 	orr.w	r3, r3, #11
 800237e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002392:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023a4:	461a      	mov	r2, r3
 80023a6:	f004 f85b 	bl	8006460 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 ff8a 	bl	80062d8 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	d124      	bne.n	800241a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f820 	bl	800641a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 ffd5 	bl	800538e <USB_GetDevSpeed>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681c      	ldr	r4, [r3, #0]
 80023f0:	f000 fec2 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80023f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	4620      	mov	r0, r4
 8002400:	f002 fcda 	bl	8004db8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f006 fc0a 	bl	8008c1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002418:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 ff5a 	bl	80062d8 <USB_ReadInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d10a      	bne.n	8002444 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f006 fbe7 	bl	8008c02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f002 0208 	and.w	r2, r2, #8
 8002442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f003 ff45 	bl	80062d8 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d122      	bne.n	800249e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002464:	2301      	movs	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
 8002468:	e014      	b.n	8002494 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fb27 	bl	8002adc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	429a      	cmp	r2, r3
 800249c:	d3e5      	bcc.n	800246a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 ff18 	bl	80062d8 <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024b2:	d13b      	bne.n	800252c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b4:	2301      	movs	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	e02b      	b.n	8002512 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3340      	adds	r3, #64	; 0x40
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d115      	bne.n	800250c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da12      	bge.n	800250c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	333f      	adds	r3, #63	; 0x3f
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fae8 	bl	8002adc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	3301      	adds	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	429a      	cmp	r2, r3
 800251a:	d3ce      	bcc.n	80024ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800252a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fed1 	bl	80062d8 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002540:	d155      	bne.n	80025ee <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002542:	2301      	movs	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	e045      	b.n	80025d4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d12e      	bne.n	80025ce <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002570:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	da2b      	bge.n	80025ce <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002582:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002586:	429a      	cmp	r2, r3
 8002588:	d121      	bne.n	80025ce <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ca:	6053      	str	r3, [r2, #4]
            break;
 80025cc:	e007      	b.n	80025de <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	3301      	adds	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3b4      	bcc.n	8002548 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fe70 	bl	80062d8 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d10a      	bne.n	800261a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f006 fb8b 	bl	8008d20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fe5a 	bl	80062d8 <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d115      	bne.n	800265a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f006 fb7b 	bl	8008d3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	e000      	b.n	800265a <HAL_PCD_IRQHandler+0x992>
      return;
 8002658:	bf00      	nop
    }
  }
}
 800265a:	3734      	adds	r7, #52	; 0x34
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}

08002660 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_PCD_SetAddress+0x1a>
 8002676:	2302      	movs	r3, #2
 8002678:	e013      	b.n	80026a2 <HAL_PCD_SetAddress+0x42>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fdb8 	bl	8006208 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	4608      	mov	r0, r1
 80026b4:	4611      	mov	r1, r2
 80026b6:	461a      	mov	r2, r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	70fb      	strb	r3, [r7, #3]
 80026bc:	460b      	mov	r3, r1
 80026be:	803b      	strh	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da0f      	bge.n	80026f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 020f 	and.w	r2, r3, #15
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	3338      	adds	r3, #56	; 0x38
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	705a      	strb	r2, [r3, #1]
 80026ee:	e00f      	b.n	8002710 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	b2da      	uxtb	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800271c:	883a      	ldrh	r2, [r7, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	78ba      	ldrb	r2, [r7, #2]
 8002726:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800273a:	78bb      	ldrb	r3, [r7, #2]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d102      	bne.n	8002746 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_PCD_EP_Open+0xaa>
 8002750:	2302      	movs	r3, #2
 8002752:	e00e      	b.n	8002772 <HAL_PCD_EP_Open+0xc8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fe38 	bl	80053d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002770:	7afb      	ldrb	r3, [r7, #11]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800278a:	2b00      	cmp	r3, #0
 800278c:	da0f      	bge.n	80027ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	3338      	adds	r3, #56	; 0x38
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	3304      	adds	r3, #4
 80027a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	705a      	strb	r2, [r3, #1]
 80027ac:	e00f      	b.n	80027ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_PCD_EP_Close+0x6e>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e00e      	b.n	8002806 <HAL_PCD_EP_Close+0x8c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fe76 	bl	80054e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	460b      	mov	r3, r1
 800281c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800281e:	7afb      	ldrb	r3, [r7, #11]
 8002820:	f003 020f 	and.w	r2, r3, #15
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2200      	movs	r2, #0
 8002848:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	b2da      	uxtb	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	6979      	ldr	r1, [r7, #20]
 8002882:	f003 f955 	bl	8005b30 <USB_EP0StartXfer>
 8002886:	e008      	b.n	800289a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	6979      	ldr	r1, [r7, #20]
 8002896:	f002 ff03 	bl	80056a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	460b      	mov	r3, r1
 80028e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e4:	7afb      	ldrb	r3, [r7, #11]
 80028e6:	f003 020f 	and.w	r2, r3, #15
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	3338      	adds	r3, #56	; 0x38
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2201      	movs	r2, #1
 8002912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	b2da      	uxtb	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d102      	bne.n	800292e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	f003 f8f3 	bl	8005b30 <USB_EP0StartXfer>
 800294a:	e008      	b.n	800295e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	6979      	ldr	r1, [r7, #20]
 800295a:	f002 fea1 	bl	80056a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d901      	bls.n	8002986 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e050      	b.n	8002a28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	da0f      	bge.n	80029ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3338      	adds	r3, #56	; 0x38
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	705a      	strb	r2, [r3, #1]
 80029ac:	e00d      	b.n	80029ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	3304      	adds	r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_PCD_EP_SetStall+0x82>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e01e      	b.n	8002a28 <HAL_PCD_EP_SetStall+0xc0>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fb31 	bl	8006060 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	b2d9      	uxtb	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f003 fd21 	bl	8006460 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	f003 020f 	and.w	r2, r3, #15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d901      	bls.n	8002a4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e042      	b.n	8002ad4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da0f      	bge.n	8002a76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	f003 020f 	and.w	r2, r3, #15
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	3338      	adds	r3, #56	; 0x38
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	705a      	strb	r2, [r3, #1]
 8002a74:	e00f      	b.n	8002a96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_PCD_EP_ClrStall+0x86>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e00e      	b.n	8002ad4 <HAL_PCD_EP_ClrStall+0xa4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fb39 	bl	800613c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da0c      	bge.n	8002b0a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	3338      	adds	r3, #56	; 0x38
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	3304      	adds	r3, #4
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e00c      	b.n	8002b24 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 f958 	bl	8005de0 <USB_EPStopXfer>
 8002b30:	4603      	mov	r3, r0
 8002b32:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b34:	7afb      	ldrb	r3, [r7, #11]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b08a      	sub	sp, #40	; 0x28
 8002b42:	af02      	add	r7, sp, #8
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	3338      	adds	r3, #56	; 0x38
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d901      	bls.n	8002b76 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06c      	b.n	8002c50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d902      	bls.n	8002b92 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3303      	adds	r3, #3
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b9a:	e02b      	b.n	8002bf4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d902      	bls.n	8002bb8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3303      	adds	r3, #3
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6919      	ldr	r1, [r3, #16]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f003 f9ac 	bl	8005f34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	441a      	add	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1a      	ldr	r2, [r3, #32]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	441a      	add	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d809      	bhi.n	8002c1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d203      	bcs.n	8002c1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1be      	bne.n	8002b9c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d811      	bhi.n	8002c4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	2201      	movs	r2, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	6939      	ldr	r1, [r7, #16]
 8002c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	333c      	adds	r3, #60	; 0x3c
 8002c70:	3304      	adds	r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d17b      	bne.n	8002d86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	4a61      	ldr	r2, [pc, #388]	; (8002e20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	f240 80b9 	bls.w	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80b3 	beq.w	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc0:	6093      	str	r3, [r2, #8]
 8002cc2:	e0a7      	b.n	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2320      	movs	r3, #32
 8002cde:	6093      	str	r3, [r2, #8]
 8002ce0:	e098      	b.n	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 8093 	bne.w	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d90f      	bls.n	8002d16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d12:	6093      	str	r3, [r2, #8]
 8002d14:	e07e      	b.n	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	440b      	add	r3, r1
 8002d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	1ad2      	subs	r2, r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d114      	bne.n	8002d78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d60:	461a      	mov	r2, r3
 8002d62:	2101      	movs	r1, #1
 8002d64:	f003 fb7c 	bl	8006460 <USB_EP0_OutStart>
 8002d68:	e006      	b.n	8002d78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	441a      	add	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f005 ff0a 	bl	8008b98 <HAL_PCD_DataOutStageCallback>
 8002d84:	e046      	b.n	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d124      	bne.n	8002dd8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da4:	461a      	mov	r2, r3
 8002da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002daa:	6093      	str	r3, [r2, #8]
 8002dac:	e032      	b.n	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f005 fee1 	bl	8008b98 <HAL_PCD_DataOutStageCallback>
 8002dd6:	e01d      	b.n	8002e14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d114      	bne.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d108      	bne.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e00:	461a      	mov	r2, r3
 8002e02:	2100      	movs	r1, #0
 8002e04:	f003 fb2c 	bl	8006460 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f005 fec2 	bl	8008b98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	4f54300a 	.word	0x4f54300a
 8002e24:	4f54310a 	.word	0x4f54310a

08002e28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	333c      	adds	r3, #60	; 0x3c
 8002e40:	3304      	adds	r3, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d90e      	bls.n	8002e7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	461a      	mov	r2, r3
 8002e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f005 fe79 	bl	8008b74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d90c      	bls.n	8002ea4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d108      	bne.n	8002ea4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	f003 fade 	bl	8006460 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	4f54300a 	.word	0x4f54300a

08002eb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ed2:	883b      	ldrh	r3, [r7, #0]
 8002ed4:	0419      	lsls	r1, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee0:	e028      	b.n	8002f34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e00d      	b.n	8002f12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3340      	adds	r3, #64	; 0x40
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3ec      	bcc.n	8002ef6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f1c:	883b      	ldrh	r3, [r7, #0]
 8002f1e:	0418      	lsls	r0, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4302      	orrs	r2, r0
 8002f2c:	3340      	adds	r3, #64	; 0x40
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	f043 0303 	orr.w	r3, r3, #3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0cc      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d90c      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b63      	ldr	r3, [pc, #396]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b8      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003000:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a58      	ldr	r2, [pc, #352]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a52      	ldr	r2, [pc, #328]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	494d      	ldr	r1, [pc, #308]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d044      	beq.n	80030cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d119      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d003      	beq.n	800306a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003066:	2b03      	cmp	r3, #3
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e067      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4934      	ldr	r1, [pc, #208]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800309c:	f7fd ffd0 	bl	8001040 <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7fd ffcc 	bl	8001040 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e04f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 020c 	and.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1eb      	bne.n	80030a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d20c      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e032      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4916      	ldr	r1, [pc, #88]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	490e      	ldr	r1, [pc, #56]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003132:	f000 fdc7 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003136:	4602      	mov	r2, r0
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	490a      	ldr	r1, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	5ccb      	ldrb	r3, [r1, r3]
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd ff30 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023c00 	.word	0x40023c00
 8003168:	40023800 	.word	0x40023800
 800316c:	080092c8 	.word	0x080092c8
 8003170:	20000004 	.word	0x20000004
 8003174:	20000008 	.word	0x20000008

08003178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a9b      	lsrs	r3, r3, #10
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	080092d8 	.word	0x080092d8

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031bc:	f7ff ffdc 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0b5b      	lsrs	r3, r3, #13
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	080092d8 	.word	0x080092d8

080031e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003218:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800321a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800321e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	496c      	ldr	r1, [pc, #432]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003236:	2301      	movs	r3, #1
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003246:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	4960      	ldr	r1, [pc, #384]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003264:	2301      	movs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d017      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003274:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4955      	ldr	r1, [pc, #340]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003292:	d101      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003294:	2301      	movs	r3, #1
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032b0:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4946      	ldr	r1, [pc, #280]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ce:	d101      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80032dc:	2301      	movs	r3, #1
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 808a 	beq.w	8003402 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800330a:	4b34      	ldr	r3, [pc, #208]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a33      	ldr	r2, [pc, #204]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003316:	f7fd fe93 	bl	8001040 <HAL_GetTick>
 800331a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fd fe8f 	bl	8001040 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e278      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003330:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003344:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02f      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	429a      	cmp	r2, r3
 8003358:	d028      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003362:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d114      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003382:	f7fd fe5d 	bl	8001040 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fd fe59 	bl	8001040 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e240      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ee      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b8:	d114      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	4902      	ldr	r1, [pc, #8]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]
 80033d4:	e00c      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42470e40 	.word	0x42470e40
 80033e4:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a49      	ldr	r2, [pc, #292]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ee:	6093      	str	r3, [r2, #8]
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	4944      	ldr	r1, [pc, #272]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003414:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003416:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	4937      	ldr	r1, [pc, #220]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003454:	492e      	ldr	r1, [pc, #184]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d011      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003468:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	4926      	ldr	r1, [pc, #152]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003486:	d101      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	491a      	ldr	r1, [pc, #104]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d011      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	4911      	ldr	r1, [pc, #68]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80034da:	2301      	movs	r3, #1
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d005      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ec:	f040 80ff 	bne.w	80036ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034f6:	f7fd fda3 	bl	8001040 <HAL_GetTick>
 80034fa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fc:	e00e      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034fe:	f7fd fd9f 	bl	8001040 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d907      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e188      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003510:	40023800 	.word	0x40023800
 8003514:	424711e0 	.word	0x424711e0
 8003518:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800351c:	4b7e      	ldr	r3, [pc, #504]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ea      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003544:	2b00      	cmp	r3, #0
 8003546:	d028      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d124      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003550:	4b71      	ldr	r3, [pc, #452]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	3301      	adds	r3, #1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003562:	4b6d      	ldr	r3, [pc, #436]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003568:	0e1b      	lsrs	r3, r3, #24
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	4961      	ldr	r1, [pc, #388]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d035      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c4:	d130      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035c6:	4b54      	ldr	r3, [pc, #336]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035d8:	4b4f      	ldr	r3, [pc, #316]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035de:	0f1b      	lsrs	r3, r3, #28
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	019b      	lsls	r3, r3, #6
 80035f0:	431a      	orrs	r2, r3
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	3b01      	subs	r3, #1
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	071b      	lsls	r3, r3, #28
 8003608:	4943      	ldr	r1, [pc, #268]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003610:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003616:	f023 021f 	bic.w	r2, r3, #31
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	493d      	ldr	r1, [pc, #244]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d029      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363c:	d124      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003650:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	0f1b      	lsrs	r3, r3, #28
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	019b      	lsls	r3, r3, #6
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	3b01      	subs	r3, #1
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	431a      	orrs	r2, r3
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	431a      	orrs	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	071b      	lsls	r3, r3, #28
 8003680:	4925      	ldr	r1, [pc, #148]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003690:	2b00      	cmp	r3, #0
 8003692:	d016      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	3b01      	subs	r3, #1
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	071b      	lsls	r3, r3, #28
 80036ba:	4917      	ldr	r1, [pc, #92]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036c8:	f7fd fcba 	bl	8001040 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036d0:	f7fd fcb6 	bl	8001040 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e09f      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 8095 	bne.w	8003820 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fd fca0 	bl	8001040 <HAL_GetTick>
 8003700:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003702:	e00f      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003704:	f7fd fc9c 	bl	8001040 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d908      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e085      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	42470068 	.word	0x42470068
 8003720:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003730:	d0e8      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02b      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	2b00      	cmp	r3, #0
 8003758:	d127      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	431a      	orrs	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	3b01      	subs	r3, #1
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	061b      	lsls	r3, r3, #24
 8003788:	4928      	ldr	r1, [pc, #160]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003790:	4b26      	ldr	r3, [pc, #152]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003796:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	3b01      	subs	r3, #1
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	4922      	ldr	r1, [pc, #136]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01d      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037be:	d118      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	0e1b      	lsrs	r3, r3, #24
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	019b      	lsls	r3, r3, #6
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	4910      	ldr	r1, [pc, #64]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037f8:	f7fd fc22 	bl	8001040 <HAL_GetTick>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003800:	f7fd fc1e 	bl	8001040 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e007      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800381a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800381e:	d1ef      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3730      	adds	r7, #48	; 0x30
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	42470070 	.word	0x42470070

08003834 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	2b07      	cmp	r3, #7
 800385a:	f200 8224 	bhi.w	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003a67 	.word	0x08003a67
 8003868:	08003b91 	.word	0x08003b91
 800386c:	08003ca7 	.word	0x08003ca7
 8003870:	08003885 	.word	0x08003885
 8003874:	08003ca7 	.word	0x08003ca7
 8003878:	08003ca7 	.word	0x08003ca7
 800387c:	08003ca7 	.word	0x08003ca7
 8003880:	08003885 	.word	0x08003885
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003884:	4ba8      	ldr	r3, [pc, #672]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800388a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800389a:	f000 80d6 	beq.w	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038a4:	f200 80dd 	bhi.w	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ae:	f000 809f 	beq.w	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038b8:	f200 80d3 	bhi.w	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c2:	d05b      	beq.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ca:	f200 80ca 	bhi.w	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038d4:	f000 80b6 	beq.w	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038de:	f200 80c0 	bhi.w	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038e8:	f000 8082 	beq.w	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038f2:	f200 80b6 	bhi.w	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003902:	d03b      	beq.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003904:	e0ad      	b.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003906:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003912:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800391c:	4a83      	ldr	r2, [pc, #524]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e008      	b.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003926:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	4a7f      	ldr	r2, [pc, #508]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003938:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	0e1b      	lsrs	r3, r3, #24
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003946:	4b78      	ldr	r3, [pc, #480]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	fb03 f202 	mul.w	r2, r3, r2
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003960:	4b71      	ldr	r3, [pc, #452]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	3301      	adds	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	61fb      	str	r3, [r7, #28]
          break;
 800397a:	e073      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003988:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003992:	4a66      	ldr	r2, [pc, #408]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	e008      	b.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800399c:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800399e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a6:	4a62      	ldr	r2, [pc, #392]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80039ae:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b4:	0e1b      	lsrs	r3, r3, #24
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80039bc:	4b5a      	ldr	r3, [pc, #360]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	fb03 f202 	mul.w	r2, r3, r2
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80039d6:	4b54      	ldr	r3, [pc, #336]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	3301      	adds	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	61fb      	str	r3, [r7, #28]
          break;
 80039ee:	e039      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80039f0:	4b4d      	ldr	r3, [pc, #308]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d108      	bne.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039fc:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a04:	4a49      	ldr	r2, [pc, #292]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	e007      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a16:	4a46      	ldr	r2, [pc, #280]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003a1e:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0f1b      	lsrs	r3, r3, #28
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	61fb      	str	r3, [r7, #28]
          break;
 8003a42:	e00f      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a44:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003a46:	61fb      	str	r3, [r7, #28]
          break;
 8003a48:	e00c      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003a56:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003a58:	61fb      	str	r3, [r7, #28]
          break;
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003a5e:	61fb      	str	r3, [r7, #28]
          break;
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003a62:	bf00      	nop
        }
      }
      break;
 8003a64:	e11f      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a6c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003a78:	d079      	beq.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003a80:	f200 8082 	bhi.w	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a8a:	d03c      	beq.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a92:	d879      	bhi.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aa0:	d172      	bne.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003aa4:	61fb      	str	r3, [r7, #28]
          break;
 8003aa6:	e072      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab4:	d109      	bne.n	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e008      	b.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003aca:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad4:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af6:	0f1b      	lsrs	r3, r3, #28
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	61fb      	str	r3, [r7, #28]
          break;
 8003b04:	e043      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b12:	d111      	bne.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e010      	b.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200
 8003b34:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b38:	4b5e      	ldr	r3, [pc, #376]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b40:	4a5d      	ldr	r2, [pc, #372]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003b48:	4b5a      	ldr	r3, [pc, #360]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003b5a:	4b56      	ldr	r3, [pc, #344]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	0f1b      	lsrs	r3, r3, #28
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	61fb      	str	r3, [r7, #28]
          break;
 8003b6c:	e00f      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b6e:	4b51      	ldr	r3, [pc, #324]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003b7e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003b80:	e005      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003b82:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003b84:	61fb      	str	r3, [r7, #28]
          break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
          break;
 8003b8c:	bf00      	nop
        }
      }
      break;
 8003b8e:	e08a      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003b90:	4b48      	ldr	r3, [pc, #288]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b96:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003ba2:	d06f      	beq.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003baa:	d878      	bhi.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb2:	d03c      	beq.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bba:	d870      	bhi.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d006      	beq.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc8:	d169      	bne.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003bcc:	61fb      	str	r3, [r7, #28]
          break;
 8003bce:	e069      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bd0:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003bde:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be8:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e008      	b.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c18:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1e:	0f1b      	lsrs	r3, r3, #28
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
          break;
 8003c2c:	e03a      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c2e:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3a:	d108      	bne.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	e007      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0f1b      	lsrs	r3, r3, #28
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	61fb      	str	r3, [r7, #28]
          break;
 8003c82:	e00f      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c90:	d102      	bne.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003c94:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003c9a:	61fb      	str	r3, [r7, #28]
          break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
          break;
 8003ca2:	bf00      	nop
        }
      }
      break;
 8003ca4:	bf00      	nop
    }
  }
  return frequency;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3724      	adds	r7, #36	; 0x24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	007a1200 	.word	0x007a1200
 8003cc0:	00bb8000 	.word	0x00bb8000

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b0ae      	sub	sp, #184	; 0xb8
 8003cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cea:	4bcb      	ldr	r3, [pc, #812]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	f200 8206 	bhi.w	8004104 <HAL_RCC_GetSysClockFreq+0x440>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08004105 	.word	0x08004105
 8003d08:	08004105 	.word	0x08004105
 8003d0c:	08004105 	.word	0x08004105
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08004105 	.word	0x08004105
 8003d18:	08004105 	.word	0x08004105
 8003d1c:	08004105 	.word	0x08004105
 8003d20:	08003d45 	.word	0x08003d45
 8003d24:	08004105 	.word	0x08004105
 8003d28:	08004105 	.word	0x08004105
 8003d2c:	08004105 	.word	0x08004105
 8003d30:	08003f35 	.word	0x08003f35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4bb9      	ldr	r3, [pc, #740]	; (800401c <HAL_RCC_GetSysClockFreq+0x358>)
 8003d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d3a:	e1e7      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3c:	4bb8      	ldr	r3, [pc, #736]	; (8004020 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d42:	e1e3      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d44:	4bb4      	ldr	r3, [pc, #720]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d50:	4bb1      	ldr	r3, [pc, #708]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d071      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5c:	4bae      	ldr	r3, [pc, #696]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f04f 0000 	mov.w	r0, #0
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	0159      	lsls	r1, r3, #5
 8003d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d94:	0150      	lsls	r0, r2, #5
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	1a51      	subs	r1, r2, r1
 8003d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003da0:	4629      	mov	r1, r5
 8003da2:	eb63 0301 	sbc.w	r3, r3, r1
 8003da6:	647b      	str	r3, [r7, #68]	; 0x44
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003db4:	4649      	mov	r1, r9
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	4641      	mov	r1, r8
 8003dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	018a      	lsls	r2, r1, #6
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	1a51      	subs	r1, r2, r1
 8003dc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dc8:	4649      	mov	r1, r9
 8003dca:	eb63 0301 	sbc.w	r3, r3, r1
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ddc:	4649      	mov	r1, r9
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4641      	mov	r1, r8
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4622      	mov	r2, r4
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
 8003df6:	462b      	mov	r3, r5
 8003df8:	460a      	mov	r2, r1
 8003dfa:	eb42 0303 	adc.w	r3, r2, r3
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	024b      	lsls	r3, r1, #9
 8003e10:	4621      	mov	r1, r4
 8003e12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e16:	4621      	mov	r1, r4
 8003e18:	024a      	lsls	r2, r1, #9
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e30:	f7fc f9f0 	bl	8000214 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e3e:	e067      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e40:	4b75      	ldr	r3, [pc, #468]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e74:	0150      	lsls	r0, r2, #5
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	1a51      	subs	r1, r2, r1
 8003e7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e80:	4629      	mov	r1, r5
 8003e82:	eb63 0301 	sbc.w	r3, r3, r1
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e94:	4649      	mov	r1, r9
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	4641      	mov	r1, r8
 8003e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	018a      	lsls	r2, r1, #6
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec2:	4692      	mov	sl, r2
 8003ec4:	469b      	mov	fp, r3
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	eb1a 0303 	adds.w	r3, sl, r3
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	462b      	mov	r3, r5
 8003ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	028b      	lsls	r3, r1, #10
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eec:	4621      	mov	r1, r4
 8003eee:	028a      	lsls	r2, r1, #10
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ef8:	2200      	movs	r2, #0
 8003efa:	673b      	str	r3, [r7, #112]	; 0x70
 8003efc:	677a      	str	r2, [r7, #116]	; 0x74
 8003efe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f02:	f7fc f987 	bl	8000214 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f10:	4b41      	ldr	r3, [pc, #260]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f32:	e0eb      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4b38      	ldr	r3, [pc, #224]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f40:	4b35      	ldr	r3, [pc, #212]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d06b      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4c:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	2200      	movs	r2, #0
 8003f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f60:	2300      	movs	r3, #0
 8003f62:	667b      	str	r3, [r7, #100]	; 0x64
 8003f64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f68:	4622      	mov	r2, r4
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	f04f 0000 	mov.w	r0, #0
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	0159      	lsls	r1, r3, #5
 8003f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7a:	0150      	lsls	r0, r2, #5
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4621      	mov	r1, r4
 8003f82:	1a51      	subs	r1, r2, r1
 8003f84:	61b9      	str	r1, [r7, #24]
 8003f86:	4629      	mov	r1, r5
 8003f88:	eb63 0301 	sbc.w	r3, r3, r1
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f9a:	4659      	mov	r1, fp
 8003f9c:	018b      	lsls	r3, r1, #6
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	018a      	lsls	r2, r1, #6
 8003fa8:	4651      	mov	r1, sl
 8003faa:	ebb2 0801 	subs.w	r8, r2, r1
 8003fae:	4659      	mov	r1, fp
 8003fb0:	eb63 0901 	sbc.w	r9, r3, r1
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc8:	4690      	mov	r8, r2
 8003fca:	4699      	mov	r9, r3
 8003fcc:	4623      	mov	r3, r4
 8003fce:	eb18 0303 	adds.w	r3, r8, r3
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	eb49 0303 	adc.w	r3, r9, r3
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fe8:	4629      	mov	r1, r5
 8003fea:	024b      	lsls	r3, r1, #9
 8003fec:	4621      	mov	r1, r4
 8003fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	024a      	lsls	r2, r1, #9
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ffe:	2200      	movs	r2, #0
 8004000:	65bb      	str	r3, [r7, #88]	; 0x58
 8004002:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004004:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004008:	f7fc f904 	bl	8000214 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004016:	e065      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x420>
 8004018:	40023800 	.word	0x40023800
 800401c:	00f42400 	.word	0x00f42400
 8004020:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004024:	4b3d      	ldr	r3, [pc, #244]	; (800411c <HAL_RCC_GetSysClockFreq+0x458>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	2200      	movs	r2, #0
 800402c:	4618      	mov	r0, r3
 800402e:	4611      	mov	r1, r2
 8004030:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004034:	653b      	str	r3, [r7, #80]	; 0x50
 8004036:	2300      	movs	r3, #0
 8004038:	657b      	str	r3, [r7, #84]	; 0x54
 800403a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800403e:	4642      	mov	r2, r8
 8004040:	464b      	mov	r3, r9
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4641      	mov	r1, r8
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	4649      	mov	r1, r9
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004070:	4659      	mov	r1, fp
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4651      	mov	r1, sl
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4651      	mov	r1, sl
 8004080:	1a54      	subs	r4, r2, r1
 8004082:	4659      	mov	r1, fp
 8004084:	eb63 0501 	sbc.w	r5, r3, r1
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	00eb      	lsls	r3, r5, #3
 8004092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004096:	00e2      	lsls	r2, r4, #3
 8004098:	4614      	mov	r4, r2
 800409a:	461d      	mov	r5, r3
 800409c:	4643      	mov	r3, r8
 800409e:	18e3      	adds	r3, r4, r3
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	464b      	mov	r3, r9
 80040a4:	eb45 0303 	adc.w	r3, r5, r3
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040b6:	4629      	mov	r1, r5
 80040b8:	028b      	lsls	r3, r1, #10
 80040ba:	4621      	mov	r1, r4
 80040bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c0:	4621      	mov	r1, r4
 80040c2:	028a      	lsls	r2, r1, #10
 80040c4:	4610      	mov	r0, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040cc:	2200      	movs	r2, #0
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80040d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040d6:	f7fc f89d 	bl	8000214 <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4613      	mov	r3, r2
 80040e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_RCC_GetSysClockFreq+0x458>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0f1b      	lsrs	r3, r3, #28
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80040f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004102:	e003      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800410a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004110:	4618      	mov	r0, r3
 8004112:	37b8      	adds	r7, #184	; 0xb8
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	00f42400 	.word	0x00f42400

08004124 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e28d      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8083 	beq.w	800424a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004144:	4b94      	ldr	r3, [pc, #592]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b04      	cmp	r3, #4
 800414e:	d019      	beq.n	8004184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004150:	4b91      	ldr	r3, [pc, #580]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004158:	2b08      	cmp	r3, #8
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800415c:	4b8e      	ldr	r3, [pc, #568]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004168:	d00c      	beq.n	8004184 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416a:	4b8b      	ldr	r3, [pc, #556]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d112      	bne.n	800419c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004176:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004182:	d10b      	bne.n	800419c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	4b84      	ldr	r3, [pc, #528]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05b      	beq.n	8004248 <HAL_RCC_OscConfig+0x124>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d157      	bne.n	8004248 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e25a      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d106      	bne.n	80041b4 <HAL_RCC_OscConfig+0x90>
 80041a6:	4b7c      	ldr	r3, [pc, #496]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7b      	ldr	r2, [pc, #492]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e01d      	b.n	80041f0 <HAL_RCC_OscConfig+0xcc>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0xb4>
 80041be:	4b76      	ldr	r3, [pc, #472]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a75      	ldr	r2, [pc, #468]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b73      	ldr	r3, [pc, #460]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a72      	ldr	r2, [pc, #456]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e00b      	b.n	80041f0 <HAL_RCC_OscConfig+0xcc>
 80041d8:	4b6f      	ldr	r3, [pc, #444]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6b      	ldr	r2, [pc, #428]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fc ff22 	bl	8001040 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fc ff1e 	bl	8001040 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e21f      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b61      	ldr	r3, [pc, #388]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0xdc>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fc ff0e 	bl	8001040 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fc ff0a 	bl	8001040 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e20b      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	4b57      	ldr	r3, [pc, #348]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x104>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d06f      	beq.n	8004336 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004256:	4b50      	ldr	r3, [pc, #320]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004262:	4b4d      	ldr	r3, [pc, #308]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800426a:	2b08      	cmp	r3, #8
 800426c:	d105      	bne.n	800427a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800426e:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d11c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b44      	ldr	r3, [pc, #272]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_RCC_OscConfig+0x186>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1d3      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4937      	ldr	r1, [pc, #220]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	e03a      	b.n	8004336 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_OscConfig+0x278>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fc feb7 	bl	8001040 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d6:	f7fc feb3 	bl	8001040 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e1b4      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4925      	ldr	r1, [pc, #148]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x278>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fc fe96 	bl	8001040 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004318:	f7fc fe92 	bl	8001040 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e193      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d036      	beq.n	80043b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fc fe76 	bl	8001040 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004358:	f7fc fe72 	bl	8001040 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e173      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 800436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x234>
 8004376:	e01b      	b.n	80043b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fc fe5f 	bl	8001040 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	e00e      	b.n	80043a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004386:	f7fc fe5b 	bl	8001040 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d907      	bls.n	80043a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e15c      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
 8004398:	40023800 	.word	0x40023800
 800439c:	42470000 	.word	0x42470000
 80043a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a4:	4b8a      	ldr	r3, [pc, #552]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ea      	bne.n	8004386 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8097 	beq.w	80044ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c2:	4b83      	ldr	r3, [pc, #524]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	4b7f      	ldr	r3, [pc, #508]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a7e      	ldr	r2, [pc, #504]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b7c      	ldr	r3, [pc, #496]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	4b79      	ldr	r3, [pc, #484]	; (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d118      	bne.n	800442c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fa:	4b76      	ldr	r3, [pc, #472]	; (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004406:	f7fc fe1b 	bl	8001040 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fc fe17 	bl	8001040 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e118      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	4b6c      	ldr	r3, [pc, #432]	; (80045d4 <HAL_RCC_OscConfig+0x4b0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x31e>
 8004434:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	4a65      	ldr	r2, [pc, #404]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
 8004440:	e01c      	b.n	800447c <HAL_RCC_OscConfig+0x358>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x340>
 800444a:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a60      	ldr	r2, [pc, #384]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	4b5e      	ldr	r3, [pc, #376]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a5d      	ldr	r2, [pc, #372]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0x358>
 8004464:	4b5a      	ldr	r3, [pc, #360]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a59      	ldr	r2, [pc, #356]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	6713      	str	r3, [r2, #112]	; 0x70
 8004470:	4b57      	ldr	r3, [pc, #348]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a56      	ldr	r2, [pc, #344]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004476:	f023 0304 	bic.w	r3, r3, #4
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fc fddc 	bl	8001040 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fc fdd8 	bl	8001040 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	; 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0d7      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ee      	beq.n	800448c <HAL_RCC_OscConfig+0x368>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fc fdc6 	bl	8001040 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fc fdc2 	bl	8001040 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0c1      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ce:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ee      	bne.n	80044b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b3b      	ldr	r3, [pc, #236]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	4a3a      	ldr	r2, [pc, #232]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80ad 	beq.w	8004650 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d060      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d145      	bne.n	8004596 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450a:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <HAL_RCC_OscConfig+0x4b4>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fc fd96 	bl	8001040 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004518:	f7fc fd92 	bl	8001040 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e093      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	3b01      	subs	r3, #1
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	071b      	lsls	r3, r3, #28
 8004562:	491b      	ldr	r1, [pc, #108]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x4b4>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fc fd67 	bl	8001040 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004576:	f7fc fd63 	bl	8001040 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e064      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x452>
 8004594:	e05c      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <HAL_RCC_OscConfig+0x4b4>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fc fd50 	bl	8001040 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fc fd4c 	bl	8001040 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e04d      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x480>
 80045c2:	e045      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e040      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40007000 	.word	0x40007000
 80045d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045dc:	4b1f      	ldr	r3, [pc, #124]	; (800465c <HAL_RCC_OscConfig+0x538>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d030      	beq.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d129      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	429a      	cmp	r2, r3
 8004604:	d122      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004614:	4293      	cmp	r3, r2
 8004616:	d119      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	3b01      	subs	r3, #1
 8004626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d10f      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d107      	bne.n	800464c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800

08004660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e07b      	b.n	800476a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004682:	d009      	beq.n	8004698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	61da      	str	r2, [r3, #28]
 800468a:	e005      	b.n	8004698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fb2a 	bl	8000d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	f003 0104 	and.w	r1, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0210 	and.w	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004758:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e03f      	b.n	8004804 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fc faff 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f828 	bl	800480c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800480c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004810:	b0c0      	sub	sp, #256	; 0x100
 8004812:	af00      	add	r7, sp, #0
 8004814:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	68d9      	ldr	r1, [r3, #12]
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	ea40 0301 	orr.w	r3, r0, r1
 8004834:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	431a      	orrs	r2, r3
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004864:	f021 010c 	bic.w	r1, r1, #12
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004872:	430b      	orrs	r3, r1
 8004874:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	6999      	ldr	r1, [r3, #24]
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	ea40 0301 	orr.w	r3, r0, r1
 8004892:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b8f      	ldr	r3, [pc, #572]	; (8004ad8 <UART_SetConfig+0x2cc>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d005      	beq.n	80048ac <UART_SetConfig+0xa0>
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b8d      	ldr	r3, [pc, #564]	; (8004adc <UART_SetConfig+0x2d0>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d104      	bne.n	80048b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7fe fc84 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 80048b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048b4:	e003      	b.n	80048be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048b6:	f7fe fc6b 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80048ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c8:	f040 810c 	bne.w	8004ae4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048de:	4622      	mov	r2, r4
 80048e0:	462b      	mov	r3, r5
 80048e2:	1891      	adds	r1, r2, r2
 80048e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80048e6:	415b      	adcs	r3, r3
 80048e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048ee:	4621      	mov	r1, r4
 80048f0:	eb12 0801 	adds.w	r8, r2, r1
 80048f4:	4629      	mov	r1, r5
 80048f6:	eb43 0901 	adc.w	r9, r3, r1
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800490e:	4690      	mov	r8, r2
 8004910:	4699      	mov	r9, r3
 8004912:	4623      	mov	r3, r4
 8004914:	eb18 0303 	adds.w	r3, r8, r3
 8004918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800491c:	462b      	mov	r3, r5
 800491e:	eb49 0303 	adc.w	r3, r9, r3
 8004922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004932:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004936:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800493a:	460b      	mov	r3, r1
 800493c:	18db      	adds	r3, r3, r3
 800493e:	653b      	str	r3, [r7, #80]	; 0x50
 8004940:	4613      	mov	r3, r2
 8004942:	eb42 0303 	adc.w	r3, r2, r3
 8004946:	657b      	str	r3, [r7, #84]	; 0x54
 8004948:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800494c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004950:	f7fb fc60 	bl	8000214 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4b61      	ldr	r3, [pc, #388]	; (8004ae0 <UART_SetConfig+0x2d4>)
 800495a:	fba3 2302 	umull	r2, r3, r3, r2
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	011c      	lsls	r4, r3, #4
 8004962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800496c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004970:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	1891      	adds	r1, r2, r2
 800497a:	64b9      	str	r1, [r7, #72]	; 0x48
 800497c:	415b      	adcs	r3, r3
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004984:	4641      	mov	r1, r8
 8004986:	eb12 0a01 	adds.w	sl, r2, r1
 800498a:	4649      	mov	r1, r9
 800498c:	eb43 0b01 	adc.w	fp, r3, r1
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800499c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a4:	4692      	mov	sl, r2
 80049a6:	469b      	mov	fp, r3
 80049a8:	4643      	mov	r3, r8
 80049aa:	eb1a 0303 	adds.w	r3, sl, r3
 80049ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b2:	464b      	mov	r3, r9
 80049b4:	eb4b 0303 	adc.w	r3, fp, r3
 80049b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049d0:	460b      	mov	r3, r1
 80049d2:	18db      	adds	r3, r3, r3
 80049d4:	643b      	str	r3, [r7, #64]	; 0x40
 80049d6:	4613      	mov	r3, r2
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44
 80049de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049e6:	f7fb fc15 	bl	8000214 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <UART_SetConfig+0x2d4>)
 80049f2:	fba3 2301 	umull	r2, r3, r3, r1
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2264      	movs	r2, #100	; 0x64
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	1acb      	subs	r3, r1, r3
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a06:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <UART_SetConfig+0x2d4>)
 8004a08:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a14:	441c      	add	r4, r3
 8004a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a30:	415b      	adcs	r3, r3
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a38:	4641      	mov	r1, r8
 8004a3a:	1851      	adds	r1, r2, r1
 8004a3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a3e:	4649      	mov	r1, r9
 8004a40:	414b      	adcs	r3, r1
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a50:	4659      	mov	r1, fp
 8004a52:	00cb      	lsls	r3, r1, #3
 8004a54:	4651      	mov	r1, sl
 8004a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	00ca      	lsls	r2, r1, #3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	4642      	mov	r2, r8
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	460a      	mov	r2, r1
 8004a70:	eb42 0303 	adc.w	r3, r2, r3
 8004a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	18db      	adds	r3, r3, r3
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a92:	4613      	mov	r3, r2
 8004a94:	eb42 0303 	adc.w	r3, r2, r3
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004aa2:	f7fb fbb7 	bl	8000214 <__aeabi_uldivmod>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <UART_SetConfig+0x2d4>)
 8004aac:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	2164      	movs	r1, #100	; 0x64
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	3332      	adds	r3, #50	; 0x32
 8004abe:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <UART_SetConfig+0x2d4>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f003 0207 	and.w	r2, r3, #7
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4422      	add	r2, r4
 8004ad2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ad4:	e105      	b.n	8004ce2 <UART_SetConfig+0x4d6>
 8004ad6:	bf00      	nop
 8004ad8:	40011000 	.word	0x40011000
 8004adc:	40011400 	.word	0x40011400
 8004ae0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004af2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004af6:	4642      	mov	r2, r8
 8004af8:	464b      	mov	r3, r9
 8004afa:	1891      	adds	r1, r2, r2
 8004afc:	6239      	str	r1, [r7, #32]
 8004afe:	415b      	adcs	r3, r3
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b06:	4641      	mov	r1, r8
 8004b08:	1854      	adds	r4, r2, r1
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	eb43 0501 	adc.w	r5, r3, r1
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	00eb      	lsls	r3, r5, #3
 8004b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b1e:	00e2      	lsls	r2, r4, #3
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	4643      	mov	r3, r8
 8004b26:	18e3      	adds	r3, r4, r3
 8004b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	eb45 0303 	adc.w	r3, r5, r3
 8004b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b52:	4629      	mov	r1, r5
 8004b54:	008b      	lsls	r3, r1, #2
 8004b56:	4621      	mov	r1, r4
 8004b58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	008a      	lsls	r2, r1, #2
 8004b60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b64:	f7fb fb56 	bl	8000214 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4b60      	ldr	r3, [pc, #384]	; (8004cf0 <UART_SetConfig+0x4e4>)
 8004b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	011c      	lsls	r4, r3, #4
 8004b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	1891      	adds	r1, r2, r2
 8004b8e:	61b9      	str	r1, [r7, #24]
 8004b90:	415b      	adcs	r3, r3
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b98:	4641      	mov	r1, r8
 8004b9a:	1851      	adds	r1, r2, r1
 8004b9c:	6139      	str	r1, [r7, #16]
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	414b      	adcs	r3, r1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	00cb      	lsls	r3, r1, #3
 8004bb4:	4651      	mov	r1, sl
 8004bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bba:	4651      	mov	r1, sl
 8004bbc:	00ca      	lsls	r2, r1, #3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bcc:	464b      	mov	r3, r9
 8004bce:	460a      	mov	r2, r1
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	008b      	lsls	r3, r1, #2
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	008a      	lsls	r2, r1, #2
 8004bfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c02:	f7fb fb07 	bl	8000214 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <UART_SetConfig+0x4e4>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	; 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	3332      	adds	r3, #50	; 0x32
 8004c1e:	4a34      	ldr	r2, [pc, #208]	; (8004cf0 <UART_SetConfig+0x4e4>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c2a:	441c      	add	r4, r3
 8004c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c30:	2200      	movs	r2, #0
 8004c32:	673b      	str	r3, [r7, #112]	; 0x70
 8004c34:	677a      	str	r2, [r7, #116]	; 0x74
 8004c36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	464b      	mov	r3, r9
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	415b      	adcs	r3, r3
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	1851      	adds	r1, r2, r1
 8004c4e:	6039      	str	r1, [r7, #0]
 8004c50:	4649      	mov	r1, r9
 8004c52:	414b      	adcs	r3, r1
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c62:	4659      	mov	r1, fp
 8004c64:	00cb      	lsls	r3, r1, #3
 8004c66:	4651      	mov	r1, sl
 8004c68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	00ca      	lsls	r2, r1, #3
 8004c70:	4610      	mov	r0, r2
 8004c72:	4619      	mov	r1, r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	4642      	mov	r2, r8
 8004c78:	189b      	adds	r3, r3, r2
 8004c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	460a      	mov	r2, r1
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c90:	667a      	str	r2, [r7, #100]	; 0x64
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	008b      	lsls	r3, r1, #2
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca8:	4641      	mov	r1, r8
 8004caa:	008a      	lsls	r2, r1, #2
 8004cac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cb0:	f7fb fab0 	bl	8000214 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <UART_SetConfig+0x4e4>)
 8004cba:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2164      	movs	r1, #100	; 0x64
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	3332      	adds	r3, #50	; 0x32
 8004ccc:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <UART_SetConfig+0x4e4>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	f003 020f 	and.w	r2, r3, #15
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4422      	add	r2, r4
 8004ce0:	609a      	str	r2, [r3, #8]
}
 8004ce2:	bf00      	nop
 8004ce4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cee:	bf00      	nop
 8004cf0:	51eb851f 	.word	0x51eb851f

08004cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	f107 001c 	add.w	r0, r7, #28
 8004d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d122      	bne.n	8004d52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f001 fbe8 	bl	800651c <USB_CoreReset>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e01a      	b.n	8004d88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 fbdc 	bl	800651c <USB_CoreReset>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
 8004d7a:	e005      	b.n	8004d88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10b      	bne.n	8004da6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f043 0206 	orr.w	r2, r3, #6
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db2:	b004      	add	sp, #16
 8004db4:	4770      	bx	lr
	...

08004db8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d165      	bne.n	8004e98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a41      	ldr	r2, [pc, #260]	; (8004ed4 <USB_SetTurnaroundTime+0x11c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d906      	bls.n	8004de2 <USB_SetTurnaroundTime+0x2a>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	; (8004ed8 <USB_SetTurnaroundTime+0x120>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d202      	bcs.n	8004de2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ddc:	230f      	movs	r3, #15
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e062      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <USB_SetTurnaroundTime+0x120>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d306      	bcc.n	8004df8 <USB_SetTurnaroundTime+0x40>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <USB_SetTurnaroundTime+0x124>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d202      	bcs.n	8004df8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004df2:	230e      	movs	r3, #14
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e057      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4a38      	ldr	r2, [pc, #224]	; (8004edc <USB_SetTurnaroundTime+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d306      	bcc.n	8004e0e <USB_SetTurnaroundTime+0x56>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4a37      	ldr	r2, [pc, #220]	; (8004ee0 <USB_SetTurnaroundTime+0x128>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d202      	bcs.n	8004e0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e08:	230d      	movs	r3, #13
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e04c      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4a33      	ldr	r2, [pc, #204]	; (8004ee0 <USB_SetTurnaroundTime+0x128>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d306      	bcc.n	8004e24 <USB_SetTurnaroundTime+0x6c>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a32      	ldr	r2, [pc, #200]	; (8004ee4 <USB_SetTurnaroundTime+0x12c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d802      	bhi.n	8004e24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e1e:	230c      	movs	r3, #12
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e041      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a2f      	ldr	r2, [pc, #188]	; (8004ee4 <USB_SetTurnaroundTime+0x12c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d906      	bls.n	8004e3a <USB_SetTurnaroundTime+0x82>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a2e      	ldr	r2, [pc, #184]	; (8004ee8 <USB_SetTurnaroundTime+0x130>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d802      	bhi.n	8004e3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e34:	230b      	movs	r3, #11
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e036      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <USB_SetTurnaroundTime+0x130>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d906      	bls.n	8004e50 <USB_SetTurnaroundTime+0x98>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a29      	ldr	r2, [pc, #164]	; (8004eec <USB_SetTurnaroundTime+0x134>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d802      	bhi.n	8004e50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e4a:	230a      	movs	r3, #10
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e02b      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4a26      	ldr	r2, [pc, #152]	; (8004eec <USB_SetTurnaroundTime+0x134>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d906      	bls.n	8004e66 <USB_SetTurnaroundTime+0xae>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <USB_SetTurnaroundTime+0x138>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d202      	bcs.n	8004e66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e60:	2309      	movs	r3, #9
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e020      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <USB_SetTurnaroundTime+0x138>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d306      	bcc.n	8004e7c <USB_SetTurnaroundTime+0xc4>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <USB_SetTurnaroundTime+0x13c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d802      	bhi.n	8004e7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e76:	2308      	movs	r3, #8
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e015      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <USB_SetTurnaroundTime+0x13c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d906      	bls.n	8004e92 <USB_SetTurnaroundTime+0xda>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <USB_SetTurnaroundTime+0x140>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d202      	bcs.n	8004e92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e8c:	2307      	movs	r3, #7
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e00a      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e92:	2306      	movs	r3, #6
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	e007      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e9e:	2309      	movs	r3, #9
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e001      	b.n	8004ea8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ea4:	2309      	movs	r3, #9
 8004ea6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	029b      	lsls	r3, r3, #10
 8004ebc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	00d8acbf 	.word	0x00d8acbf
 8004ed8:	00e4e1c0 	.word	0x00e4e1c0
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	01067380 	.word	0x01067380
 8004ee4:	011a499f 	.word	0x011a499f
 8004ee8:	01312cff 	.word	0x01312cff
 8004eec:	014ca43f 	.word	0x014ca43f
 8004ef0:	016e3600 	.word	0x016e3600
 8004ef4:	01a6ab1f 	.word	0x01a6ab1f
 8004ef8:	01e84800 	.word	0x01e84800

08004efc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f043 0201 	orr.w	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d115      	bne.n	8004f8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f6e:	2001      	movs	r0, #1
 8004f70:	f7fc f872 	bl	8001058 <HAL_Delay>
      ms++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f001 fa3f 	bl	80063fe <USB_GetMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d01e      	beq.n	8004fc4 <USB_SetCurrentMode+0x84>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b31      	cmp	r3, #49	; 0x31
 8004f8a:	d9f0      	bls.n	8004f6e <USB_SetCurrentMode+0x2e>
 8004f8c:	e01a      	b.n	8004fc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d115      	bne.n	8004fc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	f7fc f859 	bl	8001058 <HAL_Delay>
      ms++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 fa26 	bl	80063fe <USB_GetMode>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <USB_SetCurrentMode+0x84>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b31      	cmp	r3, #49	; 0x31
 8004fbc:	d9f0      	bls.n	8004fa0 <USB_SetCurrentMode+0x60>
 8004fbe:	e001      	b.n	8004fc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e005      	b.n	8004fd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b32      	cmp	r3, #50	; 0x32
 8004fc8:	d101      	bne.n	8004fce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd8:	b084      	sub	sp, #16
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	e009      	b.n	800500c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3340      	adds	r3, #64	; 0x40
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b0e      	cmp	r3, #14
 8005010:	d9f2      	bls.n	8004ff8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11c      	bne.n	8005052 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005026:	f043 0302 	orr.w	r3, r3, #2
 800502a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e005      	b.n	800505e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005064:	461a      	mov	r2, r3
 8005066:	2300      	movs	r3, #0
 8005068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005070:	4619      	mov	r1, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005078:	461a      	mov	r2, r3
 800507a:	680b      	ldr	r3, [r1, #0]
 800507c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10c      	bne.n	800509e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800508a:	2100      	movs	r1, #0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f965 	bl	800535c <USB_SetDevSpeed>
 8005092:	e008      	b.n	80050a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005094:	2101      	movs	r1, #1
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f960 	bl	800535c <USB_SetDevSpeed>
 800509c:	e003      	b.n	80050a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800509e:	2103      	movs	r1, #3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f95b 	bl	800535c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050a6:	2110      	movs	r1, #16
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f8f3 	bl	8005294 <USB_FlushTxFifo>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f91f 	bl	80052fc <USB_FlushRxFifo>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	461a      	mov	r2, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e043      	b.n	800517a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005108:	d118      	bne.n	800513c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	461a      	mov	r2, r3
 800511e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e013      	b.n	800514e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	461a      	mov	r2, r3
 8005134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e008      	b.n	800514e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516c:	461a      	mov	r2, r3
 800516e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	3301      	adds	r3, #1
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	429a      	cmp	r2, r3
 8005180:	d3b7      	bcc.n	80050f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	e043      	b.n	8005210 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800519e:	d118      	bne.n	80051d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	461a      	mov	r2, r3
 80051b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e013      	b.n	80051e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e008      	b.n	80051e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	461a      	mov	r2, r3
 80051e0:	2300      	movs	r3, #0
 80051e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	461a      	mov	r2, r3
 80051f2:	2300      	movs	r3, #0
 80051f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	461a      	mov	r2, r3
 8005204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3301      	adds	r3, #1
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d3b7      	bcc.n	8005188 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800522a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f043 0210 	orr.w	r2, r3, #16
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <USB_DevInit+0x2b8>)
 8005252:	4313      	orrs	r3, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f043 0208 	orr.w	r2, r3, #8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005278:	f043 0304 	orr.w	r3, r3, #4
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800528c:	b004      	add	sp, #16
 800528e:	4770      	bx	lr
 8005290:	803c3800 	.word	0x803c3800

08005294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <USB_FlushTxFifo+0x64>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e01b      	b.n	80052ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	daf2      	bge.n	80052a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	019b      	lsls	r3, r3, #6
 80052c4:	f043 0220 	orr.w	r2, r3, #32
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <USB_FlushTxFifo+0x64>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e006      	b.n	80052ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d0f0      	beq.n	80052cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	00030d40 	.word	0x00030d40

080052fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a11      	ldr	r2, [pc, #68]	; (8005358 <USB_FlushRxFifo+0x5c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e018      	b.n	800534c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	daf2      	bge.n	8005308 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2210      	movs	r2, #16
 800532a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a08      	ldr	r2, [pc, #32]	; (8005358 <USB_FlushRxFifo+0x5c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e006      	b.n	800534c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d0f0      	beq.n	800532c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	00030d40 	.word	0x00030d40

0800535c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	68f9      	ldr	r1, [r7, #12]
 8005378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800537c:	4313      	orrs	r3, r2
 800537e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800538e:	b480      	push	{r7}
 8005390:	b087      	sub	sp, #28
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0306 	and.w	r3, r3, #6
 80053a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]
 80053b2:	e00a      	b.n	80053ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d002      	beq.n	80053c0 <USB_GetDevSpeed+0x32>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b06      	cmp	r3, #6
 80053be:	d102      	bne.n	80053c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053c0:	2302      	movs	r3, #2
 80053c2:	75fb      	strb	r3, [r7, #23]
 80053c4:	e001      	b.n	80053ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053c6:	230f      	movs	r3, #15
 80053c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d13a      	bne.n	800546a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	2101      	movs	r1, #1
 8005406:	fa01 f303 	lsl.w	r3, r1, r3
 800540a:	b29b      	uxth	r3, r3
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005412:	4313      	orrs	r3, r2
 8005414:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d155      	bne.n	80054d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005448:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	059b      	lsls	r3, r3, #22
 800544e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005450:	4313      	orrs	r3, r2
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	440a      	add	r2, r1
 800545a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e036      	b.n	80054d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	2101      	movs	r1, #1
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	68f9      	ldr	r1, [r7, #12]
 8005484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005488:	4313      	orrs	r3, r2
 800548a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d11a      	bne.n	80054d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	791b      	ldrb	r3, [r3, #4]
 80054bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054be:	430b      	orrs	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d161      	bne.n	80055c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551a:	d11f      	bne.n	800555c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800553a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800555a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	b29b      	uxth	r3, r3
 8005574:	43db      	mvns	r3, r3
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557c:	4013      	ands	r3, r2
 800557e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	2101      	movs	r1, #1
 8005592:	fa01 f303 	lsl.w	r3, r1, r3
 8005596:	b29b      	uxth	r3, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a0:	4013      	ands	r3, r2
 80055a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	0159      	lsls	r1, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	440b      	add	r3, r1
 80055ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055be:	4619      	mov	r1, r3
 80055c0:	4b35      	ldr	r3, [pc, #212]	; (8005698 <USB_DeactivateEndpoint+0x1b0>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	600b      	str	r3, [r1, #0]
 80055c6:	e060      	b.n	800568a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055de:	d11f      	bne.n	8005620 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800561e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	43db      	mvns	r3, r3
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005640:	4013      	ands	r3, r2
 8005642:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	2101      	movs	r1, #1
 8005656:	fa01 f303 	lsl.w	r3, r1, r3
 800565a:	041b      	lsls	r3, r3, #16
 800565c:	43db      	mvns	r3, r3
 800565e:	68f9      	ldr	r1, [r7, #12]
 8005660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005664:	4013      	ands	r3, r2
 8005666:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	0159      	lsls	r1, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	440b      	add	r3, r1
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	4619      	mov	r1, r3
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <USB_DeactivateEndpoint+0x1b4>)
 8005686:	4013      	ands	r3, r2
 8005688:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	ec337800 	.word	0xec337800
 800569c:	eff37800 	.word	0xeff37800

080056a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	f040 815c 	bne.w	800597a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d132      	bne.n	8005730 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005708:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800570c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005728:	0cdb      	lsrs	r3, r3, #19
 800572a:	04db      	lsls	r3, r3, #19
 800572c:	6113      	str	r3, [r2, #16]
 800572e:	e074      	b.n	800581a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574a:	0cdb      	lsrs	r3, r3, #19
 800574c:	04db      	lsls	r3, r3, #19
 800574e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800576e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6999      	ldr	r1, [r3, #24]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	440b      	add	r3, r1
 800578c:	1e59      	subs	r1, r3, #1
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	fbb1 f3f3 	udiv	r3, r1, r3
 8005796:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005798:	4b9d      	ldr	r3, [pc, #628]	; (8005a10 <USB_EPStartXfer+0x370>)
 800579a:	400b      	ands	r3, r1
 800579c:	69b9      	ldr	r1, [r7, #24]
 800579e:	0148      	lsls	r0, r1, #5
 80057a0:	69f9      	ldr	r1, [r7, #28]
 80057a2:	4401      	add	r1, r0
 80057a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057a8:	4313      	orrs	r3, r2
 80057aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c2:	69b9      	ldr	r1, [r7, #24]
 80057c4:	0148      	lsls	r0, r1, #5
 80057c6:	69f9      	ldr	r1, [r7, #28]
 80057c8:	4401      	add	r1, r0
 80057ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057ce:	4313      	orrs	r3, r2
 80057d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	791b      	ldrb	r3, [r3, #4]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d11f      	bne.n	800581a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005818:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d14b      	bne.n	80058b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	461a      	mov	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	791b      	ldrb	r3, [r3, #4]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d128      	bne.n	8005896 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d110      	bne.n	8005876 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e00f      	b.n	8005896 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005894:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e133      	b.n	8005b20 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	791b      	ldrb	r3, [r3, #4]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d015      	beq.n	800590c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 811b 	beq.w	8005b20 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	2101      	movs	r1, #1
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005906:	4313      	orrs	r3, r2
 8005908:	634b      	str	r3, [r1, #52]	; 0x34
 800590a:	e109      	b.n	8005b20 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d110      	bne.n	800593e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e00f      	b.n	800595e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6919      	ldr	r1, [r3, #16]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781a      	ldrb	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	b298      	uxth	r0, r3
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4603      	mov	r3, r0
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fade 	bl	8005f34 <USB_WritePacket>
 8005978:	e0d2      	b.n	8005b20 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005994:	0cdb      	lsrs	r3, r3, #19
 8005996:	04db      	lsls	r3, r3, #19
 8005998:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d126      	bne.n	8005a14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059dc:	69b9      	ldr	r1, [r7, #24]
 80059de:	0148      	lsls	r0, r1, #5
 80059e0:	69f9      	ldr	r1, [r7, #28]
 80059e2:	4401      	add	r1, r0
 80059e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059e8:	4313      	orrs	r3, r2
 80059ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0a:	6113      	str	r3, [r2, #16]
 8005a0c:	e03a      	b.n	8005a84 <USB_EPStartXfer+0x3e4>
 8005a0e:	bf00      	nop
 8005a10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	1e5a      	subs	r2, r3, #1
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	8afa      	ldrh	r2, [r7, #22]
 8005a30:	fb03 f202 	mul.w	r2, r3, r2
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	8afb      	ldrh	r3, [r7, #22]
 8005a48:	04d9      	lsls	r1, r3, #19
 8005a4a:	4b38      	ldr	r3, [pc, #224]	; (8005b2c <USB_EPStartXfer+0x48c>)
 8005a4c:	400b      	ands	r3, r1
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	0148      	lsls	r0, r1, #5
 8005a52:	69f9      	ldr	r1, [r7, #28]
 8005a54:	4401      	add	r1, r0
 8005a56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	0148      	lsls	r0, r1, #5
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a80:	4313      	orrs	r3, r2
 8005a82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d10d      	bne.n	8005aa6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6919      	ldr	r1, [r3, #16]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	460a      	mov	r2, r1
 8005aa4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d128      	bne.n	8005b00 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e00f      	b.n	8005b00 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	1ff80000 	.word	0x1ff80000

08005b30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	f040 80ce 	bne.w	8005cee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d132      	bne.n	8005bc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb8:	0cdb      	lsrs	r3, r3, #19
 8005bba:	04db      	lsls	r3, r3, #19
 8005bbc:	6113      	str	r3, [r2, #16]
 8005bbe:	e04e      	b.n	8005c5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	0cdb      	lsrs	r3, r3, #19
 8005bdc:	04db      	lsls	r3, r3, #19
 8005bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d903      	bls.n	8005c18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4e:	6939      	ldr	r1, [r7, #16]
 8005c50:	0148      	lsls	r0, r1, #5
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	4401      	add	r1, r0
 8005c56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d11e      	bne.n	8005ca2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e097      	b.n	8005dd2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8083 	beq.w	8005dd2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	6979      	ldr	r1, [r7, #20]
 8005ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	634b      	str	r3, [r1, #52]	; 0x34
 8005cec:	e071      	b.n	8005dd2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d08:	0cdb      	lsrs	r3, r3, #19
 8005d0a:	04db      	lsls	r3, r3, #19
 8005d0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d80:	6939      	ldr	r1, [r7, #16]
 8005d82:	0148      	lsls	r0, r1, #5
 8005d84:	6979      	ldr	r1, [r7, #20]
 8005d86:	4401      	add	r1, r0
 8005d88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d10d      	bne.n	8005db2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6919      	ldr	r1, [r3, #16]
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	460a      	mov	r2, r1
 8005db0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d14a      	bne.n	8005e94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e16:	f040 8086 	bne.w	8005f26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d902      	bls.n	8005e78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
          break;
 8005e76:	e056      	b.n	8005f26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e90:	d0e7      	beq.n	8005e62 <USB_EPStopXfer+0x82>
 8005e92:	e048      	b.n	8005f26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eac:	d13b      	bne.n	8005f26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ed0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d902      	bls.n	8005f0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
          break;
 8005f0a:	e00c      	b.n	8005f26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f24:	d0e7      	beq.n	8005ef6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b089      	sub	sp, #36	; 0x24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4611      	mov	r1, r2
 8005f40:	461a      	mov	r2, r3
 8005f42:	460b      	mov	r3, r1
 8005f44:	71fb      	strb	r3, [r7, #7]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d123      	bne.n	8005fa2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f5a:	88bb      	ldrh	r3, [r7, #4]
 8005f5c:	3303      	adds	r3, #3
 8005f5e:	089b      	lsrs	r3, r3, #2
 8005f60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	61bb      	str	r3, [r7, #24]
 8005f66:	e018      	b.n	8005f9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	031a      	lsls	r2, r3, #12
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f74:	461a      	mov	r2, r3
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	3301      	adds	r3, #1
 8005f86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	3301      	adds	r3, #1
 8005f92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	3301      	adds	r3, #1
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d3e2      	bcc.n	8005f68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3724      	adds	r7, #36	; 0x24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b08b      	sub	sp, #44	; 0x2c
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	e014      	b.n	8006006 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	3301      	adds	r3, #1
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	3301      	adds	r3, #1
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	6a3a      	ldr	r2, [r7, #32]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	429a      	cmp	r2, r3
 800600c:	d3e6      	bcc.n	8005fdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800600e:	8bfb      	ldrh	r3, [r7, #30]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01e      	beq.n	8006052 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601e:	461a      	mov	r2, r3
 8006020:	f107 0310 	add.w	r3, r7, #16
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
 8006034:	b2da      	uxtb	r2, r3
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	701a      	strb	r2, [r3, #0]
      i++;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	3301      	adds	r3, #1
 800603e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	3301      	adds	r3, #1
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006046:	8bfb      	ldrh	r3, [r7, #30]
 8006048:	3b01      	subs	r3, #1
 800604a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800604c:	8bfb      	ldrh	r3, [r7, #30]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1ea      	bne.n	8006028 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006054:	4618      	mov	r0, r3
 8006056:	372c      	adds	r7, #44	; 0x2c
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d12c      	bne.n	80060d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	db12      	blt.n	80060b4 <USB_EPSetStall+0x54>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00f      	beq.n	80060b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	e02b      	b.n	800612e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	db12      	blt.n	800610e <USB_EPSetStall+0xae>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00f      	beq.n	800610e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800610c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800612c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d128      	bne.n	80061aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006176:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	791b      	ldrb	r3, [r3, #4]
 800617c:	2b03      	cmp	r3, #3
 800617e:	d003      	beq.n	8006188 <USB_EPClearStall+0x4c>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	791b      	ldrb	r3, [r3, #4]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d138      	bne.n	80061fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e027      	b.n	80061fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	791b      	ldrb	r3, [r3, #4]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d003      	beq.n	80061da <USB_EPClearStall+0x9e>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	791b      	ldrb	r3, [r3, #4]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d10f      	bne.n	80061fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006226:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800622a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006242:	4313      	orrs	r3, r2
 8006244:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006282:	f023 0302 	bic.w	r3, r3, #2
 8006286:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062b0:	f023 0303 	bic.w	r3, r3, #3
 80062b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c4:	f043 0302 	orr.w	r3, r3, #2
 80062c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4013      	ands	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	0c1b      	lsrs	r3, r3, #16
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	4013      	ands	r3, r2
 8006354:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	b29b      	uxth	r3, r3
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4013      	ands	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006394:	68bb      	ldr	r3, [r7, #8]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	01db      	lsls	r3, r3, #7
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4013      	ands	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063f0:	68bb      	ldr	r3, [r7, #8]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f003 0301 	and.w	r3, r3, #1
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006434:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006438:	f023 0307 	bic.w	r3, r3, #7
 800643c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800644c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	460b      	mov	r3, r1
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	333c      	adds	r3, #60	; 0x3c
 8006476:	3304      	adds	r3, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4a26      	ldr	r2, [pc, #152]	; (8006518 <USB_EP0_OutStart+0xb8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d90a      	bls.n	800649a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006494:	d101      	bne.n	800649a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e037      	b.n	800650a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	461a      	mov	r2, r3
 80064a2:	2300      	movs	r3, #0
 80064a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f043 0318 	orr.w	r3, r3, #24
 80064cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10f      	bne.n	8006508 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006502:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006506:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	4f54300a 	.word	0x4f54300a

0800651c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a13      	ldr	r2, [pc, #76]	; (8006580 <USB_CoreReset+0x64>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e01b      	b.n	8006572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	daf2      	bge.n	8006528 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f043 0201 	orr.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <USB_CoreReset+0x64>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e006      	b.n	8006572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	d0f0      	beq.n	8006552 <USB_CoreReset+0x36>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	00030d40 	.word	0x00030d40

08006584 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006590:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006594:	f002 fdb8 	bl	8009108 <USBD_static_malloc>
 8006598:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d109      	bne.n	80065b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	32b0      	adds	r2, #176	; 0xb0
 80065aa:	2100      	movs	r1, #0
 80065ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065b0:	2302      	movs	r3, #2
 80065b2:	e0d4      	b.n	800675e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80065b8:	2100      	movs	r1, #0
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f002 fe0c 	bl	80091d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	32b0      	adds	r2, #176	; 0xb0
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32b0      	adds	r2, #176	; 0xb0
 80065da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	7c1b      	ldrb	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d138      	bne.n	800665e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065ec:	4b5e      	ldr	r3, [pc, #376]	; (8006768 <USBD_CDC_Init+0x1e4>)
 80065ee:	7819      	ldrb	r1, [r3, #0]
 80065f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f4:	2202      	movs	r2, #2
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f002 fc15 	bl	8008e26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065fc:	4b5a      	ldr	r3, [pc, #360]	; (8006768 <USBD_CDC_Init+0x1e4>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	3324      	adds	r3, #36	; 0x24
 8006612:	2201      	movs	r2, #1
 8006614:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006616:	4b55      	ldr	r3, [pc, #340]	; (800676c <USBD_CDC_Init+0x1e8>)
 8006618:	7819      	ldrb	r1, [r3, #0]
 800661a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800661e:	2202      	movs	r2, #2
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f002 fc00 	bl	8008e26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006626:	4b51      	ldr	r3, [pc, #324]	; (800676c <USBD_CDC_Init+0x1e8>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	f003 020f 	and.w	r2, r3, #15
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800663e:	2201      	movs	r2, #1
 8006640:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006642:	4b4b      	ldr	r3, [pc, #300]	; (8006770 <USBD_CDC_Init+0x1ec>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	f003 020f 	and.w	r2, r3, #15
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	3326      	adds	r3, #38	; 0x26
 8006658:	2210      	movs	r2, #16
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e035      	b.n	80066ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800665e:	4b42      	ldr	r3, [pc, #264]	; (8006768 <USBD_CDC_Init+0x1e4>)
 8006660:	7819      	ldrb	r1, [r3, #0]
 8006662:	2340      	movs	r3, #64	; 0x40
 8006664:	2202      	movs	r2, #2
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 fbdd 	bl	8008e26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800666c:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <USBD_CDC_Init+0x1e4>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	3324      	adds	r3, #36	; 0x24
 8006682:	2201      	movs	r2, #1
 8006684:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006686:	4b39      	ldr	r3, [pc, #228]	; (800676c <USBD_CDC_Init+0x1e8>)
 8006688:	7819      	ldrb	r1, [r3, #0]
 800668a:	2340      	movs	r3, #64	; 0x40
 800668c:	2202      	movs	r2, #2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f002 fbc9 	bl	8008e26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006694:	4b35      	ldr	r3, [pc, #212]	; (800676c <USBD_CDC_Init+0x1e8>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066ac:	2201      	movs	r2, #1
 80066ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066b0:	4b2f      	ldr	r3, [pc, #188]	; (8006770 <USBD_CDC_Init+0x1ec>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3326      	adds	r3, #38	; 0x26
 80066c6:	2210      	movs	r2, #16
 80066c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066ca:	4b29      	ldr	r3, [pc, #164]	; (8006770 <USBD_CDC_Init+0x1ec>)
 80066cc:	7819      	ldrb	r1, [r3, #0]
 80066ce:	2308      	movs	r3, #8
 80066d0:	2203      	movs	r2, #3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f002 fba7 	bl	8008e26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066d8:	4b25      	ldr	r3, [pc, #148]	; (8006770 <USBD_CDC_Init+0x1ec>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	3324      	adds	r3, #36	; 0x24
 80066ee:	2201      	movs	r2, #1
 80066f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	33b0      	adds	r3, #176	; 0xb0
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006728:	2302      	movs	r3, #2
 800672a:	e018      	b.n	800675e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7c1b      	ldrb	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <USBD_CDC_Init+0x1e8>)
 8006736:	7819      	ldrb	r1, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800673e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f002 fc5e 	bl	8009004 <USBD_LL_PrepareReceive>
 8006748:	e008      	b.n	800675c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800674a:	4b08      	ldr	r3, [pc, #32]	; (800676c <USBD_CDC_Init+0x1e8>)
 800674c:	7819      	ldrb	r1, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006754:	2340      	movs	r3, #64	; 0x40
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f002 fc54 	bl	8009004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000097 	.word	0x20000097
 800676c:	20000098 	.word	0x20000098
 8006770:	20000099 	.word	0x20000099

08006774 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006780:	4b3a      	ldr	r3, [pc, #232]	; (800686c <USBD_CDC_DeInit+0xf8>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f002 fb73 	bl	8008e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800678c:	4b37      	ldr	r3, [pc, #220]	; (800686c <USBD_CDC_DeInit+0xf8>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	2200      	movs	r2, #0
 80067a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067a6:	4b32      	ldr	r3, [pc, #200]	; (8006870 <USBD_CDC_DeInit+0xfc>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f002 fb60 	bl	8008e72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067b2:	4b2f      	ldr	r3, [pc, #188]	; (8006870 <USBD_CDC_DeInit+0xfc>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	f003 020f 	and.w	r2, r3, #15
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067ca:	2200      	movs	r2, #0
 80067cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <USBD_CDC_DeInit+0x100>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f002 fb4c 	bl	8008e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067da:	4b26      	ldr	r3, [pc, #152]	; (8006874 <USBD_CDC_DeInit+0x100>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	f003 020f 	and.w	r2, r3, #15
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	3324      	adds	r3, #36	; 0x24
 80067f0:	2200      	movs	r2, #0
 80067f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067f4:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <USBD_CDC_DeInit+0x100>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 020f 	and.w	r2, r3, #15
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	3326      	adds	r3, #38	; 0x26
 800680a:	2200      	movs	r2, #0
 800680c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	32b0      	adds	r2, #176	; 0xb0
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01f      	beq.n	8006860 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	33b0      	adds	r3, #176	; 0xb0
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	32b0      	adds	r2, #176	; 0xb0
 800683e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006842:	4618      	mov	r0, r3
 8006844:	f002 fc6e 	bl	8009124 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32b0      	adds	r2, #176	; 0xb0
 8006852:	2100      	movs	r1, #0
 8006854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000097 	.word	0x20000097
 8006870:	20000098 	.word	0x20000098
 8006874:	20000099 	.word	0x20000099

08006878 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	32b0      	adds	r2, #176	; 0xb0
 800688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006890:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0bf      	b.n	8006a28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d050      	beq.n	8006956 <USBD_CDC_Setup+0xde>
 80068b4:	2b20      	cmp	r3, #32
 80068b6:	f040 80af 	bne.w	8006a18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d03a      	beq.n	8006938 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b25b      	sxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da1b      	bge.n	8006904 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	33b0      	adds	r3, #176	; 0xb0
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	88d2      	ldrh	r2, [r2, #6]
 80068e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	88db      	ldrh	r3, [r3, #6]
 80068ee:	2b07      	cmp	r3, #7
 80068f0:	bf28      	it	cs
 80068f2:	2307      	movcs	r3, #7
 80068f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	89fa      	ldrh	r2, [r7, #14]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 fdb3 	bl	8008468 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006902:	e090      	b.n	8006a26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	785a      	ldrb	r2, [r3, #1]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	88db      	ldrh	r3, [r3, #6]
 8006912:	2b3f      	cmp	r3, #63	; 0x3f
 8006914:	d803      	bhi.n	800691e <USBD_CDC_Setup+0xa6>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88db      	ldrh	r3, [r3, #6]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	e000      	b.n	8006920 <USBD_CDC_Setup+0xa8>
 800691e:	2240      	movs	r2, #64	; 0x40
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006926:	6939      	ldr	r1, [r7, #16]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800692e:	461a      	mov	r2, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fdc5 	bl	80084c0 <USBD_CtlPrepareRx>
      break;
 8006936:	e076      	b.n	8006a26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	33b0      	adds	r3, #176	; 0xb0
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	7850      	ldrb	r0, [r2, #1]
 800694e:	2200      	movs	r2, #0
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	4798      	blx	r3
      break;
 8006954:	e067      	b.n	8006a26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b0b      	cmp	r3, #11
 800695c:	d851      	bhi.n	8006a02 <USBD_CDC_Setup+0x18a>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <USBD_CDC_Setup+0xec>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006995 	.word	0x08006995
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a03 	.word	0x08006a03
 8006970:	08006a03 	.word	0x08006a03
 8006974:	08006a03 	.word	0x08006a03
 8006978:	08006a03 	.word	0x08006a03
 800697c:	08006a03 	.word	0x08006a03
 8006980:	08006a03 	.word	0x08006a03
 8006984:	08006a03 	.word	0x08006a03
 8006988:	08006a03 	.word	0x08006a03
 800698c:	080069bf 	.word	0x080069bf
 8006990:	080069e9 	.word	0x080069e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b03      	cmp	r3, #3
 800699e:	d107      	bne.n	80069b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069a0:	f107 030a 	add.w	r3, r7, #10
 80069a4:	2202      	movs	r2, #2
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fd5d 	bl	8008468 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069ae:	e032      	b.n	8006a16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fce7 	bl	8008386 <USBD_CtlError>
            ret = USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	75fb      	strb	r3, [r7, #23]
          break;
 80069bc:	e02b      	b.n	8006a16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d107      	bne.n	80069da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069ca:	f107 030d 	add.w	r3, r7, #13
 80069ce:	2201      	movs	r2, #1
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fd48 	bl	8008468 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069d8:	e01d      	b.n	8006a16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fcd2 	bl	8008386 <USBD_CtlError>
            ret = USBD_FAIL;
 80069e2:	2303      	movs	r3, #3
 80069e4:	75fb      	strb	r3, [r7, #23]
          break;
 80069e6:	e016      	b.n	8006a16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d00f      	beq.n	8006a14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 fcc5 	bl	8008386 <USBD_CtlError>
            ret = USBD_FAIL;
 80069fc:	2303      	movs	r3, #3
 80069fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a00:	e008      	b.n	8006a14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fcbe 	bl	8008386 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a0e:	e002      	b.n	8006a16 <USBD_CDC_Setup+0x19e>
          break;
 8006a10:	bf00      	nop
 8006a12:	e008      	b.n	8006a26 <USBD_CDC_Setup+0x1ae>
          break;
 8006a14:	bf00      	nop
      }
      break;
 8006a16:	e006      	b.n	8006a26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fcb3 	bl	8008386 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a20:	2303      	movs	r3, #3
 8006a22:	75fb      	strb	r3, [r7, #23]
      break;
 8006a24:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32b0      	adds	r2, #176	; 0xb0
 8006a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e065      	b.n	8006b26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	32b0      	adds	r2, #176	; 0xb0
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	f003 020f 	and.w	r2, r3, #15
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	3318      	adds	r3, #24
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02f      	beq.n	8006ae4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	f003 020f 	and.w	r2, r3, #15
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	3318      	adds	r3, #24
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	f003 010f 	and.w	r1, r3, #15
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	440b      	add	r3, r1
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	3348      	adds	r3, #72	; 0x48
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d112      	bne.n	8006ae4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ad6:	78f9      	ldrb	r1, [r7, #3]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2200      	movs	r2, #0
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f002 fa70 	bl	8008fc2 <USBD_LL_Transmit>
 8006ae2:	e01f      	b.n	8006b24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	33b0      	adds	r3, #176	; 0xb0
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d010      	beq.n	8006b24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	33b0      	adds	r3, #176	; 0xb0
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	32b0      	adds	r2, #176	; 0xb0
 8006b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	32b0      	adds	r2, #176	; 0xb0
 8006b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e01a      	b.n	8006b96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f002 fa6e 	bl	8009046 <USBD_LL_GetRxDataSize>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	33b0      	adds	r3, #176	; 0xb0
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b90:	4611      	mov	r1, r2
 8006b92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	32b0      	adds	r2, #176	; 0xb0
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e025      	b.n	8006c0c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	33b0      	adds	r3, #176	; 0xb0
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01a      	beq.n	8006c0a <USBD_CDC_EP0_RxReady+0x6c>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bda:	2bff      	cmp	r3, #255	; 0xff
 8006bdc:	d015      	beq.n	8006c0a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	33b0      	adds	r3, #176	; 0xb0
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bf6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	22ff      	movs	r2, #255	; 0xff
 8006c06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c1c:	2182      	movs	r1, #130	; 0x82
 8006c1e:	4818      	ldr	r0, [pc, #96]	; (8006c80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c20:	f000 fd4f 	bl	80076c2 <USBD_GetEpDesc>
 8006c24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c26:	2101      	movs	r1, #1
 8006c28:	4815      	ldr	r0, [pc, #84]	; (8006c80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c2a:	f000 fd4a 	bl	80076c2 <USBD_GetEpDesc>
 8006c2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c30:	2181      	movs	r1, #129	; 0x81
 8006c32:	4813      	ldr	r0, [pc, #76]	; (8006c80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c34:	f000 fd45 	bl	80076c2 <USBD_GetEpDesc>
 8006c38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2210      	movs	r2, #16
 8006c44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d006      	beq.n	8006c5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c54:	711a      	strb	r2, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c68:	711a      	strb	r2, [r3, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2243      	movs	r2, #67	; 0x43
 8006c72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c74:	4b02      	ldr	r3, [pc, #8]	; (8006c80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000054 	.word	0x20000054

08006c84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c8c:	2182      	movs	r1, #130	; 0x82
 8006c8e:	4818      	ldr	r0, [pc, #96]	; (8006cf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c90:	f000 fd17 	bl	80076c2 <USBD_GetEpDesc>
 8006c94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c96:	2101      	movs	r1, #1
 8006c98:	4815      	ldr	r0, [pc, #84]	; (8006cf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c9a:	f000 fd12 	bl	80076c2 <USBD_GetEpDesc>
 8006c9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ca0:	2181      	movs	r1, #129	; 0x81
 8006ca2:	4813      	ldr	r0, [pc, #76]	; (8006cf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ca4:	f000 fd0d 	bl	80076c2 <USBD_GetEpDesc>
 8006ca8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2210      	movs	r2, #16
 8006cb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	711a      	strb	r2, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f042 0202 	orr.w	r2, r2, #2
 8006cc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	711a      	strb	r2, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f042 0202 	orr.w	r2, r2, #2
 8006cdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2243      	movs	r2, #67	; 0x43
 8006ce2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ce4:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000054 	.word	0x20000054

08006cf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cfc:	2182      	movs	r1, #130	; 0x82
 8006cfe:	4818      	ldr	r0, [pc, #96]	; (8006d60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d00:	f000 fcdf 	bl	80076c2 <USBD_GetEpDesc>
 8006d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d06:	2101      	movs	r1, #1
 8006d08:	4815      	ldr	r0, [pc, #84]	; (8006d60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d0a:	f000 fcda 	bl	80076c2 <USBD_GetEpDesc>
 8006d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d10:	2181      	movs	r1, #129	; 0x81
 8006d12:	4813      	ldr	r0, [pc, #76]	; (8006d60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d14:	f000 fcd5 	bl	80076c2 <USBD_GetEpDesc>
 8006d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2210      	movs	r2, #16
 8006d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d34:	711a      	strb	r2, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d48:	711a      	strb	r2, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2243      	movs	r2, #67	; 0x43
 8006d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000054 	.word	0x20000054

08006d64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	220a      	movs	r2, #10
 8006d70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d72:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	20000010 	.word	0x20000010

08006d84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e009      	b.n	8006dac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	33b0      	adds	r3, #176	; 0xb0
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	32b0      	adds	r2, #176	; 0xb0
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e008      	b.n	8006df0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	32b0      	adds	r2, #176	; 0xb0
 8006e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e004      	b.n	8006e2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	32b0      	adds	r2, #176	; 0xb0
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e50:	2301      	movs	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	32b0      	adds	r2, #176	; 0xb0
 8006e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e025      	b.n	8006eb6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11f      	bne.n	8006eb4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <USBD_CDC_TransmitPacket+0x88>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 020f 	and.w	r2, r3, #15
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4403      	add	r3, r0
 8006e96:	3318      	adds	r3, #24
 8006e98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <USBD_CDC_TransmitPacket+0x88>)
 8006e9c:	7819      	ldrb	r1, [r3, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 f889 	bl	8008fc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000097 	.word	0x20000097

08006ec4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	32b0      	adds	r2, #176	; 0xb0
 8006ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32b0      	adds	r2, #176	; 0xb0
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e018      	b.n	8006f24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	7c1b      	ldrb	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <USBD_CDC_ReceivePacket+0x68>)
 8006efc:	7819      	ldrb	r1, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f002 f87b 	bl	8009004 <USBD_LL_PrepareReceive>
 8006f0e:	e008      	b.n	8006f22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f10:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <USBD_CDC_ReceivePacket+0x68>)
 8006f12:	7819      	ldrb	r1, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f1a:	2340      	movs	r3, #64	; 0x40
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f002 f871 	bl	8009004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000098 	.word	0x20000098

08006f30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e01f      	b.n	8006f88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	79fa      	ldrb	r2, [r7, #7]
 8006f7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f001 feeb 	bl	8008d58 <USBD_LL_Init>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e025      	b.n	8006ff4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	32ae      	adds	r2, #174	; 0xae
 8006fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00f      	beq.n	8006fe4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	32ae      	adds	r2, #174	; 0xae
 8006fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	f107 020e 	add.w	r2, r7, #14
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	4602      	mov	r2, r0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fef3 	bl	8008df0 <USBD_LL_Start>
 800700a:	4603      	mov	r3, r0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d009      	beq.n	8007058 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	4611      	mov	r1, r2
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	4611      	mov	r1, r2
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 f932 	bl	8008312 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d01a      	beq.n	8007108 <USBD_LL_SetupStage+0x72>
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d822      	bhi.n	800711c <USBD_LL_SetupStage+0x86>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <USBD_LL_SetupStage+0x4a>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d00a      	beq.n	80070f4 <USBD_LL_SetupStage+0x5e>
 80070de:	e01d      	b.n	800711c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb5f 	bl	80077ac <USBD_StdDevReq>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
      break;
 80070f2:	e020      	b.n	8007136 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fbc7 	bl	8007890 <USBD_StdItfReq>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	e016      	b.n	8007136 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc29 	bl	8007968 <USBD_StdEPReq>
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
      break;
 800711a:	e00c      	b.n	8007136 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007122:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007126:	b2db      	uxtb	r3, r3
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fec0 	bl	8008eb0 <USBD_LL_StallEP>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
      break;
 8007134:	bf00      	nop
  }

  return ret;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	460b      	mov	r3, r1
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007152:	7afb      	ldrb	r3, [r7, #11]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d16e      	bne.n	8007236 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800715e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007166:	2b03      	cmp	r3, #3
 8007168:	f040 8098 	bne.w	800729c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	429a      	cmp	r2, r3
 8007176:	d913      	bls.n	80071a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	1ad2      	subs	r2, r2, r3
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	4293      	cmp	r3, r2
 8007190:	bf28      	it	cs
 8007192:	4613      	movcs	r3, r2
 8007194:	461a      	mov	r2, r3
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 f9ae 	bl	80084fa <USBD_CtlContinueRx>
 800719e:	e07d      	b.n	800729c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d014      	beq.n	80071d8 <USBD_LL_DataOutStage+0x98>
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d81d      	bhi.n	80071ee <USBD_LL_DataOutStage+0xae>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <USBD_LL_DataOutStage+0x7c>
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d003      	beq.n	80071c2 <USBD_LL_DataOutStage+0x82>
 80071ba:	e018      	b.n	80071ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	75bb      	strb	r3, [r7, #22]
            break;
 80071c0:	e018      	b.n	80071f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fa5e 	bl	800768e <USBD_CoreFindIF>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75bb      	strb	r3, [r7, #22]
            break;
 80071d6:	e00d      	b.n	80071f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	4619      	mov	r1, r3
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fa60 	bl	80076a8 <USBD_CoreFindEP>
 80071e8:	4603      	mov	r3, r0
 80071ea:	75bb      	strb	r3, [r7, #22]
            break;
 80071ec:	e002      	b.n	80071f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75bb      	strb	r3, [r7, #22]
            break;
 80071f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071f4:	7dbb      	ldrb	r3, [r7, #22]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d119      	bne.n	800722e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b03      	cmp	r3, #3
 8007204:	d113      	bne.n	800722e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007206:	7dba      	ldrb	r2, [r7, #22]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	32ae      	adds	r2, #174	; 0xae
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007216:	7dba      	ldrb	r2, [r7, #22]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800721e:	7dba      	ldrb	r2, [r7, #22]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	32ae      	adds	r2, #174	; 0xae
 8007224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f001 f974 	bl	800851c <USBD_CtlSendStatus>
 8007234:	e032      	b.n	800729c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723c:	b2db      	uxtb	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fa31 	bl	80076a8 <USBD_CoreFindEP>
 8007246:	4603      	mov	r3, r0
 8007248:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800724a:	7dbb      	ldrb	r3, [r7, #22]
 800724c:	2bff      	cmp	r3, #255	; 0xff
 800724e:	d025      	beq.n	800729c <USBD_LL_DataOutStage+0x15c>
 8007250:	7dbb      	ldrb	r3, [r7, #22]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d122      	bne.n	800729c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b03      	cmp	r3, #3
 8007260:	d117      	bne.n	8007292 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007262:	7dba      	ldrb	r2, [r7, #22]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	32ae      	adds	r2, #174	; 0xae
 8007268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00f      	beq.n	8007292 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007272:	7dba      	ldrb	r2, [r7, #22]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800727a:	7dba      	ldrb	r2, [r7, #22]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	32ae      	adds	r2, #174	; 0xae
 8007280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	7afa      	ldrb	r2, [r7, #11]
 8007288:	4611      	mov	r1, r2
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	4798      	blx	r3
 800728e:	4603      	mov	r3, r0
 8007290:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	e000      	b.n	800729e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	460b      	mov	r3, r1
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d16f      	bne.n	800739a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3314      	adds	r3, #20
 80072be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d15a      	bne.n	8007380 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d914      	bls.n	8007300 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f001 f8d6 	bl	800849e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072f2:	2300      	movs	r3, #0
 80072f4:	2200      	movs	r2, #0
 80072f6:	2100      	movs	r1, #0
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 fe83 	bl	8009004 <USBD_LL_PrepareReceive>
 80072fe:	e03f      	b.n	8007380 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	429a      	cmp	r2, r3
 800730a:	d11c      	bne.n	8007346 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007314:	429a      	cmp	r2, r3
 8007316:	d316      	bcc.n	8007346 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007322:	429a      	cmp	r2, r3
 8007324:	d20f      	bcs.n	8007346 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f001 f8b7 	bl	800849e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007338:	2300      	movs	r3, #0
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f001 fe60 	bl	8009004 <USBD_LL_PrepareReceive>
 8007344:	e01c      	b.n	8007380 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b03      	cmp	r3, #3
 8007350:	d10f      	bne.n	8007372 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d009      	beq.n	8007372 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f001 fd9b 	bl	8008eb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f001 f8e1 	bl	8008542 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d03a      	beq.n	8007400 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff fe42 	bl	8007014 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007398:	e032      	b.n	8007400 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f97f 	bl	80076a8 <USBD_CoreFindEP>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	2bff      	cmp	r3, #255	; 0xff
 80073b2:	d025      	beq.n	8007400 <USBD_LL_DataInStage+0x15a>
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d122      	bne.n	8007400 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d11c      	bne.n	8007400 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073c6:	7dfa      	ldrb	r2, [r7, #23]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	32ae      	adds	r2, #174	; 0xae
 80073cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d014      	beq.n	8007400 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073d6:	7dfa      	ldrb	r2, [r7, #23]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073de:	7dfa      	ldrb	r2, [r7, #23]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	32ae      	adds	r2, #174	; 0xae
 80073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	7afa      	ldrb	r2, [r7, #11]
 80073ec:	4611      	mov	r1, r2
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	4798      	blx	r3
 80073f2:	4603      	mov	r3, r0
 80073f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073f6:	7dbb      	ldrb	r3, [r7, #22]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073fc:	7dbb      	ldrb	r3, [r7, #22]
 80073fe:	e000      	b.n	8007402 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d014      	beq.n	8007470 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6852      	ldr	r2, [r2, #4]
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	4611      	mov	r1, r2
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007470:	2340      	movs	r3, #64	; 0x40
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fcd5 	bl	8008e26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2240      	movs	r2, #64	; 0x40
 8007488:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800748c:	2340      	movs	r3, #64	; 0x40
 800748e:	2200      	movs	r2, #0
 8007490:	2180      	movs	r1, #128	; 0x80
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 fcc7 	bl	8008e26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2240      	movs	r2, #64	; 0x40
 80074a2:	621a      	str	r2, [r3, #32]

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	78fa      	ldrb	r2, [r7, #3]
 80074be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2204      	movs	r2, #4
 80074e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b04      	cmp	r3, #4
 800750c:	d106      	bne.n	800751c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007514:	b2da      	uxtb	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b03      	cmp	r3, #3
 800753c:	d110      	bne.n	8007560 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	32ae      	adds	r2, #174	; 0xae
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007588:	2303      	movs	r3, #3
 800758a:	e01c      	b.n	80075c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b03      	cmp	r3, #3
 8007596:	d115      	bne.n	80075c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	; 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32ae      	adds	r2, #174	; 0xae
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	4611      	mov	r1, r2
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	32ae      	adds	r2, #174	; 0xae
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e01c      	b.n	800762a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d115      	bne.n	8007628 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32ae      	adds	r2, #174	; 0xae
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32ae      	adds	r2, #174	; 0xae
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4611      	mov	r1, r2
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00e      	beq.n	8007684 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6852      	ldr	r2, [r2, #4]
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	4611      	mov	r1, r2
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	4798      	blx	r3
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007680:	2303      	movs	r3, #3
 8007682:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800769a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	885b      	ldrh	r3, [r3, #2]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d920      	bls.n	800772c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076f2:	e013      	b.n	800771c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076f4:	f107 030a 	add.w	r3, r7, #10
 80076f8:	4619      	mov	r1, r3
 80076fa:	6978      	ldr	r0, [r7, #20]
 80076fc:	f000 f81b 	bl	8007736 <USBD_GetNextDesc>
 8007700:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2b05      	cmp	r3, #5
 8007708:	d108      	bne.n	800771c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	789b      	ldrb	r3, [r3, #2]
 8007712:	78fa      	ldrb	r2, [r7, #3]
 8007714:	429a      	cmp	r2, r3
 8007716:	d008      	beq.n	800772a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	885b      	ldrh	r3, [r3, #2]
 8007720:	b29a      	uxth	r2, r3
 8007722:	897b      	ldrh	r3, [r7, #10]
 8007724:	429a      	cmp	r2, r3
 8007726:	d8e5      	bhi.n	80076f4 <USBD_GetEpDesc+0x32>
 8007728:	e000      	b.n	800772c <USBD_GetEpDesc+0x6a>
          break;
 800772a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800772c:	693b      	ldr	r3, [r7, #16]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	881a      	ldrh	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	4413      	add	r3, r2
 8007750:	b29a      	uxth	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4413      	add	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	3301      	adds	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800778e:	8a3b      	ldrh	r3, [r7, #16]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	b21a      	sxth	r2, r3
 8007794:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007798:	4313      	orrs	r3, r2
 800779a:	b21b      	sxth	r3, r3
 800779c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800779e:	89fb      	ldrh	r3, [r7, #14]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d005      	beq.n	80077d2 <USBD_StdDevReq+0x26>
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d857      	bhi.n	800787a <USBD_StdDevReq+0xce>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00f      	beq.n	80077ee <USBD_StdDevReq+0x42>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d153      	bne.n	800787a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	32ae      	adds	r2, #174	; 0xae
 80077dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]
      break;
 80077ec:	e04a      	b.n	8007884 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b09      	cmp	r3, #9
 80077f4:	d83b      	bhi.n	800786e <USBD_StdDevReq+0xc2>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <USBD_StdDevReq+0x50>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007851 	.word	0x08007851
 8007800:	08007865 	.word	0x08007865
 8007804:	0800786f 	.word	0x0800786f
 8007808:	0800785b 	.word	0x0800785b
 800780c:	0800786f 	.word	0x0800786f
 8007810:	0800782f 	.word	0x0800782f
 8007814:	08007825 	.word	0x08007825
 8007818:	0800786f 	.word	0x0800786f
 800781c:	08007847 	.word	0x08007847
 8007820:	08007839 	.word	0x08007839
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa3c 	bl	8007ca4 <USBD_GetDescriptor>
          break;
 800782c:	e024      	b.n	8007878 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fbcb 	bl	8007fcc <USBD_SetAddress>
          break;
 8007836:	e01f      	b.n	8007878 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fc0a 	bl	8008054 <USBD_SetConfig>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
          break;
 8007844:	e018      	b.n	8007878 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fcad 	bl	80081a8 <USBD_GetConfig>
          break;
 800784e:	e013      	b.n	8007878 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fcde 	bl	8008214 <USBD_GetStatus>
          break;
 8007858:	e00e      	b.n	8007878 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fd0d 	bl	800827c <USBD_SetFeature>
          break;
 8007862:	e009      	b.n	8007878 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fd31 	bl	80082ce <USBD_ClrFeature>
          break;
 800786c:	e004      	b.n	8007878 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fd88 	bl	8008386 <USBD_CtlError>
          break;
 8007876:	bf00      	nop
      }
      break;
 8007878:	e004      	b.n	8007884 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fd82 	bl	8008386 <USBD_CtlError>
      break;
 8007882:	bf00      	nop
  }

  return ret;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop

08007890 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d005      	beq.n	80078b6 <USBD_StdItfReq+0x26>
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d852      	bhi.n	8007954 <USBD_StdItfReq+0xc4>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <USBD_StdItfReq+0x26>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d14e      	bne.n	8007954 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d840      	bhi.n	8007946 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	889b      	ldrh	r3, [r3, #4]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d836      	bhi.n	800793c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	889b      	ldrh	r3, [r3, #4]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fed9 	bl	800768e <USBD_CoreFindIF>
 80078dc:	4603      	mov	r3, r0
 80078de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2bff      	cmp	r3, #255	; 0xff
 80078e4:	d01d      	beq.n	8007922 <USBD_StdItfReq+0x92>
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11a      	bne.n	8007922 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078ec:	7bba      	ldrb	r2, [r7, #14]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	; 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00f      	beq.n	800791c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078fc:	7bba      	ldrb	r2, [r7, #14]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007904:	7bba      	ldrb	r2, [r7, #14]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	32ae      	adds	r2, #174	; 0xae
 800790a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800791a:	e004      	b.n	8007926 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800791c:	2303      	movs	r3, #3
 800791e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007920:	e001      	b.n	8007926 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d110      	bne.n	8007950 <USBD_StdItfReq+0xc0>
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10d      	bne.n	8007950 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fdf1 	bl	800851c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800793a:	e009      	b.n	8007950 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fd21 	bl	8008386 <USBD_CtlError>
          break;
 8007944:	e004      	b.n	8007950 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fd1c 	bl	8008386 <USBD_CtlError>
          break;
 800794e:	e000      	b.n	8007952 <USBD_StdItfReq+0xc2>
          break;
 8007950:	bf00      	nop
      }
      break;
 8007952:	e004      	b.n	800795e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fd15 	bl	8008386 <USBD_CtlError>
      break;
 800795c:	bf00      	nop
  }

  return ret;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	889b      	ldrh	r3, [r3, #4]
 800797a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d007      	beq.n	8007998 <USBD_StdEPReq+0x30>
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	f200 817f 	bhi.w	8007c8c <USBD_StdEPReq+0x324>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d02a      	beq.n	80079e8 <USBD_StdEPReq+0x80>
 8007992:	2b20      	cmp	r3, #32
 8007994:	f040 817a 	bne.w	8007c8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fe83 	bl	80076a8 <USBD_CoreFindEP>
 80079a2:	4603      	mov	r3, r0
 80079a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079a6:	7b7b      	ldrb	r3, [r7, #13]
 80079a8:	2bff      	cmp	r3, #255	; 0xff
 80079aa:	f000 8174 	beq.w	8007c96 <USBD_StdEPReq+0x32e>
 80079ae:	7b7b      	ldrb	r3, [r7, #13]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f040 8170 	bne.w	8007c96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079b6:	7b7a      	ldrb	r2, [r7, #13]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079be:	7b7a      	ldrb	r2, [r7, #13]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	32ae      	adds	r2, #174	; 0xae
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 8163 	beq.w	8007c96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079d0:	7b7a      	ldrb	r2, [r7, #13]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	32ae      	adds	r2, #174	; 0xae
 80079d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079e6:	e156      	b.n	8007c96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d008      	beq.n	8007a02 <USBD_StdEPReq+0x9a>
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	f300 8145 	bgt.w	8007c80 <USBD_StdEPReq+0x318>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 809b 	beq.w	8007b32 <USBD_StdEPReq+0x1ca>
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d03c      	beq.n	8007a7a <USBD_StdEPReq+0x112>
 8007a00:	e13e      	b.n	8007c80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d002      	beq.n	8007a14 <USBD_StdEPReq+0xac>
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d016      	beq.n	8007a40 <USBD_StdEPReq+0xd8>
 8007a12:	e02c      	b.n	8007a6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00d      	beq.n	8007a36 <USBD_StdEPReq+0xce>
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d00a      	beq.n	8007a36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fa43 	bl	8008eb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fa3f 	bl	8008eb0 <USBD_LL_StallEP>
 8007a32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a34:	e020      	b.n	8007a78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fca4 	bl	8008386 <USBD_CtlError>
              break;
 8007a3e:	e01b      	b.n	8007a78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	885b      	ldrh	r3, [r3, #2]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10e      	bne.n	8007a66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <USBD_StdEPReq+0xfe>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b80      	cmp	r3, #128	; 0x80
 8007a52:	d008      	beq.n	8007a66 <USBD_StdEPReq+0xfe>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	88db      	ldrh	r3, [r3, #6]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fa25 	bl	8008eb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fd58 	bl	800851c <USBD_CtlSendStatus>

              break;
 8007a6c:	e004      	b.n	8007a78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fc88 	bl	8008386 <USBD_CtlError>
              break;
 8007a76:	bf00      	nop
          }
          break;
 8007a78:	e107      	b.n	8007c8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d002      	beq.n	8007a8c <USBD_StdEPReq+0x124>
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d016      	beq.n	8007ab8 <USBD_StdEPReq+0x150>
 8007a8a:	e04b      	b.n	8007b24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00d      	beq.n	8007aae <USBD_StdEPReq+0x146>
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b80      	cmp	r3, #128	; 0x80
 8007a96:	d00a      	beq.n	8007aae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fa07 	bl	8008eb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aa2:	2180      	movs	r1, #128	; 0x80
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fa03 	bl	8008eb0 <USBD_LL_StallEP>
 8007aaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aac:	e040      	b.n	8007b30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fc68 	bl	8008386 <USBD_CtlError>
              break;
 8007ab6:	e03b      	b.n	8007b30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	885b      	ldrh	r3, [r3, #2]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d136      	bne.n	8007b2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 fa0d 	bl	8008eee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd21 	bl	800851c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff fde2 	bl	80076a8 <USBD_CoreFindEP>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ae8:	7b7b      	ldrb	r3, [r7, #13]
 8007aea:	2bff      	cmp	r3, #255	; 0xff
 8007aec:	d01f      	beq.n	8007b2e <USBD_StdEPReq+0x1c6>
 8007aee:	7b7b      	ldrb	r3, [r7, #13]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d11c      	bne.n	8007b2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007af4:	7b7a      	ldrb	r2, [r7, #13]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007afc:	7b7a      	ldrb	r2, [r7, #13]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	; 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d010      	beq.n	8007b2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b0c:	7b7a      	ldrb	r2, [r7, #13]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	32ae      	adds	r2, #174	; 0xae
 8007b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b22:	e004      	b.n	8007b2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc2d 	bl	8008386 <USBD_CtlError>
              break;
 8007b2c:	e000      	b.n	8007b30 <USBD_StdEPReq+0x1c8>
              break;
 8007b2e:	bf00      	nop
          }
          break;
 8007b30:	e0ab      	b.n	8007c8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d002      	beq.n	8007b44 <USBD_StdEPReq+0x1dc>
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d032      	beq.n	8007ba8 <USBD_StdEPReq+0x240>
 8007b42:	e097      	b.n	8007c74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <USBD_StdEPReq+0x1f2>
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b80      	cmp	r3, #128	; 0x80
 8007b4e:	d004      	beq.n	8007b5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fc17 	bl	8008386 <USBD_CtlError>
                break;
 8007b58:	e091      	b.n	8007c7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da0b      	bge.n	8007b7a <USBD_StdEPReq+0x212>
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	3310      	adds	r3, #16
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	4413      	add	r3, r2
 8007b76:	3304      	adds	r3, #4
 8007b78:	e00b      	b.n	8007b92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	4413      	add	r3, r2
 8007b90:	3304      	adds	r3, #4
 8007b92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fc61 	bl	8008468 <USBD_CtlSendData>
              break;
 8007ba6:	e06a      	b.n	8007c7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da11      	bge.n	8007bd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	f003 020f 	and.w	r2, r3, #15
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	3324      	adds	r3, #36	; 0x24
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d117      	bne.n	8007bfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fbda 	bl	8008386 <USBD_CtlError>
                  break;
 8007bd2:	e054      	b.n	8007c7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 020f 	and.w	r2, r3, #15
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d104      	bne.n	8007bfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fbc7 	bl	8008386 <USBD_CtlError>
                  break;
 8007bf8:	e041      	b.n	8007c7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da0b      	bge.n	8007c1a <USBD_StdEPReq+0x2b2>
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	3310      	adds	r3, #16
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4413      	add	r3, r2
 8007c16:	3304      	adds	r3, #4
 8007c18:	e00b      	b.n	8007c32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	3304      	adds	r3, #4
 8007c32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <USBD_StdEPReq+0x2d8>
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b80      	cmp	r3, #128	; 0x80
 8007c3e:	d103      	bne.n	8007c48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e00e      	b.n	8007c66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f96d 	bl	8008f2c <USBD_LL_IsStallEP>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fbfb 	bl	8008468 <USBD_CtlSendData>
              break;
 8007c72:	e004      	b.n	8007c7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fb85 	bl	8008386 <USBD_CtlError>
              break;
 8007c7c:	bf00      	nop
          }
          break;
 8007c7e:	e004      	b.n	8007c8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fb7f 	bl	8008386 <USBD_CtlError>
          break;
 8007c88:	bf00      	nop
      }
      break;
 8007c8a:	e005      	b.n	8007c98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fb79 	bl	8008386 <USBD_CtlError>
      break;
 8007c94:	e000      	b.n	8007c98 <USBD_StdEPReq+0x330>
      break;
 8007c96:	bf00      	nop
  }

  return ret;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b0e      	cmp	r3, #14
 8007cc6:	f200 8152 	bhi.w	8007f6e <USBD_GetDescriptor+0x2ca>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <USBD_GetDescriptor+0x2c>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007d41 	.word	0x08007d41
 8007cd4:	08007d59 	.word	0x08007d59
 8007cd8:	08007d99 	.word	0x08007d99
 8007cdc:	08007f6f 	.word	0x08007f6f
 8007ce0:	08007f6f 	.word	0x08007f6f
 8007ce4:	08007f0f 	.word	0x08007f0f
 8007ce8:	08007f3b 	.word	0x08007f3b
 8007cec:	08007f6f 	.word	0x08007f6f
 8007cf0:	08007f6f 	.word	0x08007f6f
 8007cf4:	08007f6f 	.word	0x08007f6f
 8007cf8:	08007f6f 	.word	0x08007f6f
 8007cfc:	08007f6f 	.word	0x08007f6f
 8007d00:	08007f6f 	.word	0x08007f6f
 8007d04:	08007f6f 	.word	0x08007f6f
 8007d08:	08007d0d 	.word	0x08007d0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	7c12      	ldrb	r2, [r2, #16]
 8007d24:	f107 0108 	add.w	r1, r7, #8
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
 8007d2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2e:	e126      	b.n	8007f7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fb27 	bl	8008386 <USBD_CtlError>
        err++;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3e:	e11e      	b.n	8007f7e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7c12      	ldrb	r2, [r2, #16]
 8007d4c:	f107 0108 	add.w	r1, r7, #8
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	60f8      	str	r0, [r7, #12]
      break;
 8007d56:	e112      	b.n	8007f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7c1b      	ldrb	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10d      	bne.n	8007d7c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	f107 0208 	add.w	r2, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3301      	adds	r3, #1
 8007d76:	2202      	movs	r2, #2
 8007d78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d7a:	e100      	b.n	8007f7e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	f107 0208 	add.w	r2, r7, #8
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	2202      	movs	r2, #2
 8007d94:	701a      	strb	r2, [r3, #0]
      break;
 8007d96:	e0f2      	b.n	8007f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	885b      	ldrh	r3, [r3, #2]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	f200 80ac 	bhi.w	8007efc <USBD_GetDescriptor+0x258>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <USBD_GetDescriptor+0x108>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dc5 	.word	0x08007dc5
 8007db0:	08007df9 	.word	0x08007df9
 8007db4:	08007e2d 	.word	0x08007e2d
 8007db8:	08007e61 	.word	0x08007e61
 8007dbc:	08007e95 	.word	0x08007e95
 8007dc0:	08007ec9 	.word	0x08007ec9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de6:	e091      	b.n	8007f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 facb 	bl	8008386 <USBD_CtlError>
            err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
          break;
 8007df6:	e089      	b.n	8007f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1a:	e077      	b.n	8007f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fab1 	bl	8008386 <USBD_CtlError>
            err++;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	3301      	adds	r3, #1
 8007e28:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2a:	e06f      	b.n	8007f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	7c12      	ldrb	r2, [r2, #16]
 8007e44:	f107 0108 	add.w	r1, r7, #8
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4e:	e05d      	b.n	8007f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa97 	bl	8008386 <USBD_CtlError>
            err++;
 8007e58:	7afb      	ldrb	r3, [r7, #11]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5e:	e055      	b.n	8007f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00b      	beq.n	8007e84 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	7c12      	ldrb	r2, [r2, #16]
 8007e78:	f107 0108 	add.w	r1, r7, #8
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e82:	e043      	b.n	8007f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa7d 	bl	8008386 <USBD_CtlError>
            err++;
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	72fb      	strb	r3, [r7, #11]
          break;
 8007e92:	e03b      	b.n	8007f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	7c12      	ldrb	r2, [r2, #16]
 8007eac:	f107 0108 	add.w	r1, r7, #8
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eb6:	e029      	b.n	8007f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa63 	bl	8008386 <USBD_CtlError>
            err++;
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ec6:	e021      	b.n	8007f0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00b      	beq.n	8007eec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	7c12      	ldrb	r2, [r2, #16]
 8007ee0:	f107 0108 	add.w	r1, r7, #8
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
 8007ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eea:	e00f      	b.n	8007f0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa49 	bl	8008386 <USBD_CtlError>
            err++;
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8007efa:	e007      	b.n	8007f0c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa41 	bl	8008386 <USBD_CtlError>
          err++;
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	3301      	adds	r3, #1
 8007f08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f0a:	bf00      	nop
      }
      break;
 8007f0c:	e037      	b.n	8007f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7c1b      	ldrb	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d109      	bne.n	8007f2a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	f107 0208 	add.w	r2, r7, #8
 8007f22:	4610      	mov	r0, r2
 8007f24:	4798      	blx	r3
 8007f26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f28:	e029      	b.n	8007f7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa2a 	bl	8008386 <USBD_CtlError>
        err++;
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	3301      	adds	r3, #1
 8007f36:	72fb      	strb	r3, [r7, #11]
      break;
 8007f38:	e021      	b.n	8007f7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7c1b      	ldrb	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10d      	bne.n	8007f5e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	f107 0208 	add.w	r2, r7, #8
 8007f4e:	4610      	mov	r0, r2
 8007f50:	4798      	blx	r3
 8007f52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	2207      	movs	r2, #7
 8007f5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f5c:	e00f      	b.n	8007f7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa10 	bl	8008386 <USBD_CtlError>
        err++;
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f6c:	e007      	b.n	8007f7e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fa08 	bl	8008386 <USBD_CtlError>
      err++;
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f7c:	bf00      	nop
  }

  if (err != 0U)
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d11e      	bne.n	8007fc2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	88db      	ldrh	r3, [r3, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d016      	beq.n	8007fba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f8c:	893b      	ldrh	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00e      	beq.n	8007fb0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	88da      	ldrh	r2, [r3, #6]
 8007f96:	893b      	ldrh	r3, [r7, #8]
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	bf28      	it	cs
 8007f9c:	4613      	movcs	r3, r2
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fa2:	893b      	ldrh	r3, [r7, #8]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fa5d 	bl	8008468 <USBD_CtlSendData>
 8007fae:	e009      	b.n	8007fc4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f9e7 	bl	8008386 <USBD_CtlError>
 8007fb8:	e004      	b.n	8007fc4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 faae 	bl	800851c <USBD_CtlSendStatus>
 8007fc0:	e000      	b.n	8007fc4 <USBD_GetDescriptor+0x320>
    return;
 8007fc2:	bf00      	nop
  }
}
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop

08007fcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	889b      	ldrh	r3, [r3, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d131      	bne.n	8008042 <USBD_SetAddress+0x76>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	88db      	ldrh	r3, [r3, #6]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d12d      	bne.n	8008042 <USBD_SetAddress+0x76>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	2b7f      	cmp	r3, #127	; 0x7f
 8007fec:	d829      	bhi.n	8008042 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	885b      	ldrh	r3, [r3, #2]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b03      	cmp	r3, #3
 8008004:	d104      	bne.n	8008010 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f9bc 	bl	8008386 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800e:	e01d      	b.n	800804c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7bfa      	ldrb	r2, [r7, #15]
 8008014:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 ffb1 	bl	8008f84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa7a 	bl	800851c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008036:	e009      	b.n	800804c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008040:	e004      	b.n	800804c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f99e 	bl	8008386 <USBD_CtlError>
  }
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	4b4e      	ldr	r3, [pc, #312]	; (80081a4 <USBD_SetConfig+0x150>)
 800806a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800806c:	4b4d      	ldr	r3, [pc, #308]	; (80081a4 <USBD_SetConfig+0x150>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d905      	bls.n	8008080 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f985 	bl	8008386 <USBD_CtlError>
    return USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	e08c      	b.n	800819a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d002      	beq.n	8008092 <USBD_SetConfig+0x3e>
 800808c:	2b03      	cmp	r3, #3
 800808e:	d029      	beq.n	80080e4 <USBD_SetConfig+0x90>
 8008090:	e075      	b.n	800817e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008092:	4b44      	ldr	r3, [pc, #272]	; (80081a4 <USBD_SetConfig+0x150>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800809a:	4b42      	ldr	r3, [pc, #264]	; (80081a4 <USBD_SetConfig+0x150>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a4:	4b3f      	ldr	r3, [pc, #252]	; (80081a4 <USBD_SetConfig+0x150>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fe ffbd 	bl	800702a <USBD_SetClassConfig>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f962 	bl	8008386 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2202      	movs	r2, #2
 80080c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ca:	e065      	b.n	8008198 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa25 	bl	800851c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2203      	movs	r2, #3
 80080d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080da:	e05d      	b.n	8008198 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fa1d 	bl	800851c <USBD_CtlSendStatus>
      break;
 80080e2:	e059      	b.n	8008198 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080e4:	4b2f      	ldr	r3, [pc, #188]	; (80081a4 <USBD_SetConfig+0x150>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d112      	bne.n	8008112 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080f4:	4b2b      	ldr	r3, [pc, #172]	; (80081a4 <USBD_SetConfig+0x150>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080fe:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <USBD_SetConfig+0x150>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fe ffac 	bl	8007062 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa06 	bl	800851c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008110:	e042      	b.n	8008198 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <USBD_SetConfig+0x150>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d02a      	beq.n	8008176 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7fe ff9a 	bl	8007062 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800812e:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <USBD_SetConfig+0x150>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	461a      	mov	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008138:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <USBD_SetConfig+0x150>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fe ff73 	bl	800702a <USBD_SetClassConfig>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00f      	beq.n	800816e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f918 	bl	8008386 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe ff7f 	bl	8007062 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800816c:	e014      	b.n	8008198 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9d4 	bl	800851c <USBD_CtlSendStatus>
      break;
 8008174:	e010      	b.n	8008198 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9d0 	bl	800851c <USBD_CtlSendStatus>
      break;
 800817c:	e00c      	b.n	8008198 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f900 	bl	8008386 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008186:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <USBD_SetConfig+0x150>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7fe ff68 	bl	8007062 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008192:	2303      	movs	r3, #3
 8008194:	73fb      	strb	r3, [r7, #15]
      break;
 8008196:	bf00      	nop
  }

  return ret;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000350 	.word	0x20000350

080081a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d004      	beq.n	80081c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8e2 	bl	8008386 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081c2:	e023      	b.n	800820c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	dc02      	bgt.n	80081d6 <USBD_GetConfig+0x2e>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc03      	bgt.n	80081dc <USBD_GetConfig+0x34>
 80081d4:	e015      	b.n	8008202 <USBD_GetConfig+0x5a>
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d00b      	beq.n	80081f2 <USBD_GetConfig+0x4a>
 80081da:	e012      	b.n	8008202 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3308      	adds	r3, #8
 80081e6:	2201      	movs	r2, #1
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f93c 	bl	8008468 <USBD_CtlSendData>
        break;
 80081f0:	e00c      	b.n	800820c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	2201      	movs	r2, #1
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f934 	bl	8008468 <USBD_CtlSendData>
        break;
 8008200:	e004      	b.n	800820c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f8be 	bl	8008386 <USBD_CtlError>
        break;
 800820a:	bf00      	nop
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008224:	b2db      	uxtb	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	2b02      	cmp	r3, #2
 800822a:	d81e      	bhi.n	800826a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d004      	beq.n	800823e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8a5 	bl	8008386 <USBD_CtlError>
        break;
 800823c:	e01a      	b.n	8008274 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f043 0202 	orr.w	r2, r3, #2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	330c      	adds	r3, #12
 800825e:	2202      	movs	r2, #2
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f900 	bl	8008468 <USBD_CtlSendData>
      break;
 8008268:	e004      	b.n	8008274 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f88a 	bl	8008386 <USBD_CtlError>
      break;
 8008272:	bf00      	nop
  }
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	885b      	ldrh	r3, [r3, #2]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d107      	bne.n	800829e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f940 	bl	800851c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800829c:	e013      	b.n	80082c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d10b      	bne.n	80082be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	889b      	ldrh	r3, [r3, #4]
 80082aa:	0a1b      	lsrs	r3, r3, #8
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f930 	bl	800851c <USBD_CtlSendStatus>
}
 80082bc:	e003      	b.n	80082c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f860 	bl	8008386 <USBD_CtlError>
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d80b      	bhi.n	80082fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	885b      	ldrh	r3, [r3, #2]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d10c      	bne.n	8008308 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f910 	bl	800851c <USBD_CtlSendStatus>
      }
      break;
 80082fc:	e004      	b.n	8008308 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f840 	bl	8008386 <USBD_CtlError>
      break;
 8008306:	e000      	b.n	800830a <USBD_ClrFeature+0x3c>
      break;
 8008308:	bf00      	nop
  }
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3301      	adds	r3, #1
 800833a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7ff fa17 	bl	8007770 <SWAPBYTE>
 8008342:	4603      	mov	r3, r0
 8008344:	461a      	mov	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fa0a 	bl	8007770 <SWAPBYTE>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3301      	adds	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff f9fd 	bl	8007770 <SWAPBYTE>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	80da      	strh	r2, [r3, #6]
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008390:	2180      	movs	r1, #128	; 0x80
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fd8c 	bl	8008eb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008398:	2100      	movs	r1, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fd88 	bl	8008eb0 <USBD_LL_StallEP>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d036      	beq.n	800842c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083c2:	6938      	ldr	r0, [r7, #16]
 80083c4:	f000 f836 	bl	8008434 <USBD_GetLen>
 80083c8:	4603      	mov	r3, r0
 80083ca:	3301      	adds	r3, #1
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	4413      	add	r3, r2
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	7812      	ldrb	r2, [r2, #0]
 80083e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	3301      	adds	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	4413      	add	r3, r2
 80083ee:	2203      	movs	r2, #3
 80083f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	3301      	adds	r3, #1
 80083f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083f8:	e013      	b.n	8008422 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	4413      	add	r3, r2
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	7812      	ldrb	r2, [r2, #0]
 8008404:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	3301      	adds	r3, #1
 800840a:	613b      	str	r3, [r7, #16]
    idx++;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	3301      	adds	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	4413      	add	r3, r2
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]
    idx++;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	3301      	adds	r3, #1
 8008420:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e7      	bne.n	80083fa <USBD_GetString+0x52>
 800842a:	e000      	b.n	800842e <USBD_GetString+0x86>
    return;
 800842c:	bf00      	nop
  }
}
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008444:	e005      	b.n	8008452 <USBD_GetLen+0x1e>
  {
    len++;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	3301      	adds	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	3301      	adds	r3, #1
 8008450:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1f5      	bne.n	8008446 <USBD_GetLen+0x12>
  }

  return len;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2202      	movs	r2, #2
 8008478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	2100      	movs	r1, #0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 fd97 	bl	8008fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	2100      	movs	r1, #0
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 fd86 	bl	8008fc2 <USBD_LL_Transmit>

  return USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2203      	movs	r2, #3
 80084d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	2100      	movs	r1, #0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 fd8a 	bl	8009004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	2100      	movs	r1, #0
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 fd79 	bl	8009004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2204      	movs	r2, #4
 8008528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800852c:	2300      	movs	r3, #0
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fd45 	bl	8008fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2205      	movs	r2, #5
 800854e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008552:	2300      	movs	r3, #0
 8008554:	2200      	movs	r2, #0
 8008556:	2100      	movs	r1, #0
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fd53 	bl	8009004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800856c:	2200      	movs	r2, #0
 800856e:	4912      	ldr	r1, [pc, #72]	; (80085b8 <MX_USB_DEVICE_Init+0x50>)
 8008570:	4812      	ldr	r0, [pc, #72]	; (80085bc <MX_USB_DEVICE_Init+0x54>)
 8008572:	f7fe fcdd 	bl	8006f30 <USBD_Init>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800857c:	f7f8 fa86 	bl	8000a8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008580:	490f      	ldr	r1, [pc, #60]	; (80085c0 <MX_USB_DEVICE_Init+0x58>)
 8008582:	480e      	ldr	r0, [pc, #56]	; (80085bc <MX_USB_DEVICE_Init+0x54>)
 8008584:	f7fe fd04 	bl	8006f90 <USBD_RegisterClass>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800858e:	f7f8 fa7d 	bl	8000a8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008592:	490c      	ldr	r1, [pc, #48]	; (80085c4 <MX_USB_DEVICE_Init+0x5c>)
 8008594:	4809      	ldr	r0, [pc, #36]	; (80085bc <MX_USB_DEVICE_Init+0x54>)
 8008596:	f7fe fbf5 	bl	8006d84 <USBD_CDC_RegisterInterface>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085a0:	f7f8 fa74 	bl	8000a8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085a4:	4805      	ldr	r0, [pc, #20]	; (80085bc <MX_USB_DEVICE_Init+0x54>)
 80085a6:	f7fe fd29 	bl	8006ffc <USBD_Start>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085b0:	f7f8 fa6c 	bl	8000a8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	200000b0 	.word	0x200000b0
 80085bc:	20000354 	.word	0x20000354
 80085c0:	2000001c 	.word	0x2000001c
 80085c4:	2000009c 	.word	0x2000009c

080085c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085cc:	2200      	movs	r2, #0
 80085ce:	4905      	ldr	r1, [pc, #20]	; (80085e4 <CDC_Init_FS+0x1c>)
 80085d0:	4805      	ldr	r0, [pc, #20]	; (80085e8 <CDC_Init_FS+0x20>)
 80085d2:	f7fe fbf1 	bl	8006db8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085d6:	4905      	ldr	r1, [pc, #20]	; (80085ec <CDC_Init_FS+0x24>)
 80085d8:	4803      	ldr	r0, [pc, #12]	; (80085e8 <CDC_Init_FS+0x20>)
 80085da:	f7fe fc0f 	bl	8006dfc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000e30 	.word	0x20000e30
 80085e8:	20000354 	.word	0x20000354
 80085ec:	20000630 	.word	0x20000630

080085f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	71fb      	strb	r3, [r7, #7]
 800860c:	4613      	mov	r3, r2
 800860e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	2b23      	cmp	r3, #35	; 0x23
 8008614:	d84a      	bhi.n	80086ac <CDC_Control_FS+0xac>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <CDC_Control_FS+0x1c>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	080086ad 	.word	0x080086ad
 8008620:	080086ad 	.word	0x080086ad
 8008624:	080086ad 	.word	0x080086ad
 8008628:	080086ad 	.word	0x080086ad
 800862c:	080086ad 	.word	0x080086ad
 8008630:	080086ad 	.word	0x080086ad
 8008634:	080086ad 	.word	0x080086ad
 8008638:	080086ad 	.word	0x080086ad
 800863c:	080086ad 	.word	0x080086ad
 8008640:	080086ad 	.word	0x080086ad
 8008644:	080086ad 	.word	0x080086ad
 8008648:	080086ad 	.word	0x080086ad
 800864c:	080086ad 	.word	0x080086ad
 8008650:	080086ad 	.word	0x080086ad
 8008654:	080086ad 	.word	0x080086ad
 8008658:	080086ad 	.word	0x080086ad
 800865c:	080086ad 	.word	0x080086ad
 8008660:	080086ad 	.word	0x080086ad
 8008664:	080086ad 	.word	0x080086ad
 8008668:	080086ad 	.word	0x080086ad
 800866c:	080086ad 	.word	0x080086ad
 8008670:	080086ad 	.word	0x080086ad
 8008674:	080086ad 	.word	0x080086ad
 8008678:	080086ad 	.word	0x080086ad
 800867c:	080086ad 	.word	0x080086ad
 8008680:	080086ad 	.word	0x080086ad
 8008684:	080086ad 	.word	0x080086ad
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086ad 	.word	0x080086ad
 8008690:	080086ad 	.word	0x080086ad
 8008694:	080086ad 	.word	0x080086ad
 8008698:	080086ad 	.word	0x080086ad
 800869c:	080086ad 	.word	0x080086ad
 80086a0:	080086ad 	.word	0x080086ad
 80086a4:	080086ad 	.word	0x080086ad
 80086a8:	080086ad 	.word	0x080086ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086ac:	bf00      	nop
  }

  return (USBD_OK);
 80086ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	  for (uint32_t i = 0; i < *Len; i++) {
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	e043      	b.n	8008754 <CDC_Receive_FS+0x98>
	    if (Buf[i] == '\b') { // Check if the character is a backspace
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	4413      	add	r3, r2
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d11d      	bne.n	8008714 <CDC_Receive_FS+0x58>
	      if (receivedLength > 0) {
 80086d8:	4b3f      	ldr	r3, [pc, #252]	; (80087d8 <CDC_Receive_FS+0x11c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d036      	beq.n	800874e <CDC_Receive_FS+0x92>
	        receivedLength--; // Decrement the length
 80086e0:	4b3d      	ldr	r3, [pc, #244]	; (80087d8 <CDC_Receive_FS+0x11c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	4a3c      	ldr	r2, [pc, #240]	; (80087d8 <CDC_Receive_FS+0x11c>)
 80086e8:	6013      	str	r3, [r2, #0]
	        receivedData[receivedLength] = '\0'; // Remove the last character in the buffer
 80086ea:	4b3b      	ldr	r3, [pc, #236]	; (80087d8 <CDC_Receive_FS+0x11c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a3b      	ldr	r2, [pc, #236]	; (80087dc <CDC_Receive_FS+0x120>)
 80086f0:	2100      	movs	r1, #0
 80086f2:	54d1      	strb	r1, [r2, r3]
	        // Send backspace, space, backspace to Tera Term to remove the character on the screen
	        char bs[] = "\b \b";
 80086f4:	4b3a      	ldr	r3, [pc, #232]	; (80087e0 <CDC_Receive_FS+0x124>)
 80086f6:	613b      	str	r3, [r7, #16]
	        CDC_Transmit_FS((uint8_t*)bs, strlen(bs));
 80086f8:	f107 0310 	add.w	r3, r7, #16
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7f7 fd81 	bl	8000204 <strlen>
 8008702:	4603      	mov	r3, r0
 8008704:	b29a      	uxth	r2, r3
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f86d 	bl	80087ec <CDC_Transmit_FS>
 8008712:	e01c      	b.n	800874e <CDC_Receive_FS+0x92>
	      }
	    } else {
	      if (receivedLength < 100 - 1) {
 8008714:	4b30      	ldr	r3, [pc, #192]	; (80087d8 <CDC_Receive_FS+0x11c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b62      	cmp	r3, #98	; 0x62
 800871a:	d811      	bhi.n	8008740 <CDC_Receive_FS+0x84>
	        receivedData[receivedLength] = Buf[i];
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	441a      	add	r2, r3
 8008722:	4b2d      	ldr	r3, [pc, #180]	; (80087d8 <CDC_Receive_FS+0x11c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	7811      	ldrb	r1, [r2, #0]
 8008728:	4a2c      	ldr	r2, [pc, #176]	; (80087dc <CDC_Receive_FS+0x120>)
 800872a:	54d1      	strb	r1, [r2, r3]
	        receivedLength++;
 800872c:	4b2a      	ldr	r3, [pc, #168]	; (80087d8 <CDC_Receive_FS+0x11c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3301      	adds	r3, #1
 8008732:	4a29      	ldr	r2, [pc, #164]	; (80087d8 <CDC_Receive_FS+0x11c>)
 8008734:	6013      	str	r3, [r2, #0]
	        receivedData[receivedLength] = '\0'; // Null-terminate the buffer
 8008736:	4b28      	ldr	r3, [pc, #160]	; (80087d8 <CDC_Receive_FS+0x11c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a28      	ldr	r2, [pc, #160]	; (80087dc <CDC_Receive_FS+0x120>)
 800873c:	2100      	movs	r1, #0
 800873e:	54d1      	strb	r1, [r2, r3]
	      }
	      // Echo the received character
	      CDC_Transmit_FS(&Buf[i], 1);
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	4413      	add	r3, r2
 8008746:	2101      	movs	r1, #1
 8008748:	4618      	mov	r0, r3
 800874a:	f000 f84f 	bl	80087ec <CDC_Transmit_FS>
	  for (uint32_t i = 0; i < *Len; i++) {
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	3301      	adds	r3, #1
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	429a      	cmp	r2, r3
 800875c:	d3b6      	bcc.n	80086cc <CDC_Receive_FS+0x10>
	    }
	  }

	  /* Check if the received data contains both a carriage return and a newline */
	  if (strchr((char*)receivedData, '\r') != NULL && strchr((char*)receivedData, '\n') != NULL) {
 800875e:	210d      	movs	r1, #13
 8008760:	481e      	ldr	r0, [pc, #120]	; (80087dc <CDC_Receive_FS+0x120>)
 8008762:	f000 fd41 	bl	80091e8 <strchr>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d029      	beq.n	80087c0 <CDC_Receive_FS+0x104>
 800876c:	210a      	movs	r1, #10
 800876e:	481b      	ldr	r0, [pc, #108]	; (80087dc <CDC_Receive_FS+0x120>)
 8008770:	f000 fd3a 	bl	80091e8 <strchr>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d022      	beq.n	80087c0 <CDC_Receive_FS+0x104>
	    /* Null-terminate the received string */
	    receivedData[receivedLength] = '\0';
 800877a:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <CDC_Receive_FS+0x11c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a17      	ldr	r2, [pc, #92]	; (80087dc <CDC_Receive_FS+0x120>)
 8008780:	2100      	movs	r1, #0
 8008782:	54d1      	strb	r1, [r2, r3]

	    /* Send new line to Tera Term */
	    char newline[] = "\r\n";
 8008784:	4a17      	ldr	r2, [pc, #92]	; (80087e4 <CDC_Receive_FS+0x128>)
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	4611      	mov	r1, r2
 800878e:	8019      	strh	r1, [r3, #0]
 8008790:	3302      	adds	r3, #2
 8008792:	0c12      	lsrs	r2, r2, #16
 8008794:	701a      	strb	r2, [r3, #0]
	    CDC_Transmit_FS((uint8_t*)newline, strlen(newline));
 8008796:	f107 030c 	add.w	r3, r7, #12
 800879a:	4618      	mov	r0, r3
 800879c:	f7f7 fd32 	bl	8000204 <strlen>
 80087a0:	4603      	mov	r3, r0
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	f107 030c 	add.w	r3, r7, #12
 80087a8:	4611      	mov	r1, r2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f81e 	bl	80087ec <CDC_Transmit_FS>

	    /* Process the received data in main.c */
	    /* Notify main.c to process the data */
	    receivedLength = 0;
 80087b0:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <CDC_Receive_FS+0x11c>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
	    memset(receivedData, '\0', sizeof(receivedData));
 80087b6:	2264      	movs	r2, #100	; 0x64
 80087b8:	2100      	movs	r1, #0
 80087ba:	4808      	ldr	r0, [pc, #32]	; (80087dc <CDC_Receive_FS+0x120>)
 80087bc:	f000 fd0c 	bl	80091d8 <memset>
	  }

	  /* Prepare to receive more data */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4809      	ldr	r0, [pc, #36]	; (80087e8 <CDC_Receive_FS+0x12c>)
 80087c4:	f7fe fb1a 	bl	8006dfc <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087c8:	4807      	ldr	r0, [pc, #28]	; (80087e8 <CDC_Receive_FS+0x12c>)
 80087ca:	f7fe fb7b 	bl	8006ec4 <USBD_CDC_ReceivePacket>

	  return (USBD_OK);
 80087ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000348 	.word	0x20000348
 80087dc:	200002e4 	.word	0x200002e4
 80087e0:	00082008 	.word	0x00082008
 80087e4:	08009284 	.word	0x08009284
 80087e8:	20000354 	.word	0x20000354

080087ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80087fc:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <CDC_Transmit_FS+0x48>)
 80087fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008802:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800880e:	2301      	movs	r3, #1
 8008810:	e00b      	b.n	800882a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008812:	887b      	ldrh	r3, [r7, #2]
 8008814:	461a      	mov	r2, r3
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4806      	ldr	r0, [pc, #24]	; (8008834 <CDC_Transmit_FS+0x48>)
 800881a:	f7fe facd 	bl	8006db8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800881e:	4805      	ldr	r0, [pc, #20]	; (8008834 <CDC_Transmit_FS+0x48>)
 8008820:	f7fe fb0a 	bl	8006e38 <USBD_CDC_TransmitPacket>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20000354 	.word	0x20000354

08008838 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800884a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800884e:	4618      	mov	r0, r3
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	6039      	str	r1, [r7, #0]
 8008866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2212      	movs	r2, #18
 800886c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800886e:	4b03      	ldr	r3, [pc, #12]	; (800887c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	200000d0 	.word	0x200000d0

08008880 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2204      	movs	r2, #4
 8008890:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008892:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	200000f0 	.word	0x200000f0

080088a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	4907      	ldr	r1, [pc, #28]	; (80088d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80088ba:	4808      	ldr	r0, [pc, #32]	; (80088dc <USBD_FS_ProductStrDescriptor+0x38>)
 80088bc:	f7ff fd74 	bl	80083a8 <USBD_GetString>
 80088c0:	e004      	b.n	80088cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	4904      	ldr	r1, [pc, #16]	; (80088d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80088c6:	4805      	ldr	r0, [pc, #20]	; (80088dc <USBD_FS_ProductStrDescriptor+0x38>)
 80088c8:	f7ff fd6e 	bl	80083a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088cc:	4b02      	ldr	r3, [pc, #8]	; (80088d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20001630 	.word	0x20001630
 80088dc:	08009288 	.word	0x08009288

080088e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	4904      	ldr	r1, [pc, #16]	; (8008900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088f0:	4804      	ldr	r0, [pc, #16]	; (8008904 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088f2:	f7ff fd59 	bl	80083a8 <USBD_GetString>
  return USBD_StrDesc;
 80088f6:	4b02      	ldr	r3, [pc, #8]	; (8008900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	20001630 	.word	0x20001630
 8008904:	08009298 	.word	0x08009298

08008908 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	6039      	str	r1, [r7, #0]
 8008912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	221a      	movs	r2, #26
 8008918:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800891a:	f000 f855 	bl	80089c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800891e:	4b02      	ldr	r3, [pc, #8]	; (8008928 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	200000f4 	.word	0x200000f4

0800892c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	6039      	str	r1, [r7, #0]
 8008936:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d105      	bne.n	800894a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	4907      	ldr	r1, [pc, #28]	; (8008960 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008942:	4808      	ldr	r0, [pc, #32]	; (8008964 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008944:	f7ff fd30 	bl	80083a8 <USBD_GetString>
 8008948:	e004      	b.n	8008954 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	4904      	ldr	r1, [pc, #16]	; (8008960 <USBD_FS_ConfigStrDescriptor+0x34>)
 800894e:	4805      	ldr	r0, [pc, #20]	; (8008964 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008950:	f7ff fd2a 	bl	80083a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008954:	4b02      	ldr	r3, [pc, #8]	; (8008960 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20001630 	.word	0x20001630
 8008964:	080092ac 	.word	0x080092ac

08008968 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	6039      	str	r1, [r7, #0]
 8008972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	4907      	ldr	r1, [pc, #28]	; (800899c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800897e:	4808      	ldr	r0, [pc, #32]	; (80089a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008980:	f7ff fd12 	bl	80083a8 <USBD_GetString>
 8008984:	e004      	b.n	8008990 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	4904      	ldr	r1, [pc, #16]	; (800899c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800898a:	4805      	ldr	r0, [pc, #20]	; (80089a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800898c:	f7ff fd0c 	bl	80083a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008990:	4b02      	ldr	r3, [pc, #8]	; (800899c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20001630 	.word	0x20001630
 80089a0:	080092b8 	.word	0x080092b8

080089a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	6039      	str	r1, [r7, #0]
 80089ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	220c      	movs	r2, #12
 80089b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80089b6:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	200000e4 	.word	0x200000e4

080089c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089ce:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <Get_SerialNum+0x44>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <Get_SerialNum+0x48>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089da:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <Get_SerialNum+0x4c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d009      	beq.n	8008a02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089ee:	2208      	movs	r2, #8
 80089f0:	4909      	ldr	r1, [pc, #36]	; (8008a18 <Get_SerialNum+0x50>)
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f814 	bl	8008a20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089f8:	2204      	movs	r2, #4
 80089fa:	4908      	ldr	r1, [pc, #32]	; (8008a1c <Get_SerialNum+0x54>)
 80089fc:	68b8      	ldr	r0, [r7, #8]
 80089fe:	f000 f80f 	bl	8008a20 <IntToUnicode>
  }
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	1fff7a10 	.word	0x1fff7a10
 8008a10:	1fff7a14 	.word	0x1fff7a14
 8008a14:	1fff7a18 	.word	0x1fff7a18
 8008a18:	200000f6 	.word	0x200000f6
 8008a1c:	20000106 	.word	0x20000106

08008a20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]
 8008a36:	e027      	b.n	8008a88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	0f1b      	lsrs	r3, r3, #28
 8008a3c:	2b09      	cmp	r3, #9
 8008a3e:	d80b      	bhi.n	8008a58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	0f1b      	lsrs	r3, r3, #28
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	440b      	add	r3, r1
 8008a50:	3230      	adds	r2, #48	; 0x30
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	e00a      	b.n	8008a6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	0f1b      	lsrs	r3, r3, #28
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4619      	mov	r1, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	440b      	add	r3, r1
 8008a68:	3237      	adds	r2, #55	; 0x37
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	3301      	adds	r3, #1
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	3301      	adds	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
 8008a88:	7dfa      	ldrb	r2, [r7, #23]
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d3d3      	bcc.n	8008a38 <IntToUnicode+0x18>
  }
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b0a0      	sub	sp, #128	; 0x80
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	609a      	str	r2, [r3, #8]
 8008ab4:	60da      	str	r2, [r3, #12]
 8008ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ab8:	f107 0310 	add.w	r3, r7, #16
 8008abc:	225c      	movs	r2, #92	; 0x5c
 8008abe:	2100      	movs	r1, #0
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fb89 	bl	80091d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ace:	d149      	bne.n	8008b64 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ad4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ada:	f107 0310 	add.w	r3, r7, #16
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fa fb7e 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8008aea:	f7f7 ffcf 	bl	8000a8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	4b1e      	ldr	r3, [pc, #120]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	4a1d      	ldr	r2, [pc, #116]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008af8:	f043 0301 	orr.w	r3, r3, #1
 8008afc:	6313      	str	r3, [r2, #48]	; 0x30
 8008afe:	4b1b      	ldr	r3, [pc, #108]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b10:	2302      	movs	r3, #2
 8008b12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b1c:	230a      	movs	r3, #10
 8008b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008b24:	4619      	mov	r1, r3
 8008b26:	4812      	ldr	r0, [pc, #72]	; (8008b70 <HAL_PCD_MspInit+0xd0>)
 8008b28:	f7f8 fbcc 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b30:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b36:	6353      	str	r3, [r2, #52]	; 0x34
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60bb      	str	r3, [r7, #8]
 8008b3c:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b40:	4a0a      	ldr	r2, [pc, #40]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b46:	6453      	str	r3, [r2, #68]	; 0x44
 8008b48:	4b08      	ldr	r3, [pc, #32]	; (8008b6c <HAL_PCD_MspInit+0xcc>)
 8008b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b50:	60bb      	str	r3, [r7, #8]
 8008b52:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	2043      	movs	r0, #67	; 0x43
 8008b5a:	f7f8 fb7c 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b5e:	2043      	movs	r0, #67	; 0x43
 8008b60:	f7f8 fb95 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b64:	bf00      	nop
 8008b66:	3780      	adds	r7, #128	; 0x80
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40023800 	.word	0x40023800
 8008b70:	40020000 	.word	0x40020000

08008b74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f7fe fa83 	bl	8007096 <USBD_LL_SetupStage>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008baa:	78fa      	ldrb	r2, [r7, #3]
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f7fe fabd 	bl	8007140 <USBD_LL_DataOutStage>
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	334c      	adds	r3, #76	; 0x4c
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	f7fe fb56 	bl	80072a6 <USBD_LL_DataInStage>
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe fc8a 	bl	800752a <USBD_LL_SOF>
}
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c26:	2301      	movs	r3, #1
 8008c28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
 8008c36:	e008      	b.n	8008c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d102      	bne.n	8008c46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
 8008c44:	e001      	b.n	8008c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008c46:	f7f7 ff21 	bl	8000a8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c50:	7bfa      	ldrb	r2, [r7, #15]
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fe fc2a 	bl	80074ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fbd2 	bl	800740a <USBD_LL_Reset>
}
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fc25 	bl	80074ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6812      	ldr	r2, [r2, #0]
 8008c92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c96:	f043 0301 	orr.w	r3, r3, #1
 8008c9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <HAL_PCD_SuspendCallback+0x48>)
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	4a03      	ldr	r2, [pc, #12]	; (8008cb8 <HAL_PCD_SuspendCallback+0x48>)
 8008caa:	f043 0306 	orr.w	r3, r3, #6
 8008cae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	e000ed00 	.word	0xe000ed00

08008cbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fc15 	bl	80074fa <USBD_LL_Resume>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fc6d 	bl	80075ce <USBD_LL_IsoOUTIncomplete>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fc29 	bl	800756a <USBD_LL_IsoINIncomplete>
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fc7f 	bl	8007632 <USBD_LL_DevConnected>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fc7c 	bl	8007648 <USBD_LL_DevDisconnected>
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d13c      	bne.n	8008de2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d68:	4a20      	ldr	r2, [pc, #128]	; (8008dec <USBD_LL_Init+0x94>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a1e      	ldr	r2, [pc, #120]	; (8008dec <USBD_LL_Init+0x94>)
 8008d74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d78:	4b1c      	ldr	r3, [pc, #112]	; (8008dec <USBD_LL_Init+0x94>)
 8008d7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008d80:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <USBD_LL_Init+0x94>)
 8008d82:	2206      	movs	r2, #6
 8008d84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d86:	4b19      	ldr	r3, [pc, #100]	; (8008dec <USBD_LL_Init+0x94>)
 8008d88:	2202      	movs	r2, #2
 8008d8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d8c:	4b17      	ldr	r3, [pc, #92]	; (8008dec <USBD_LL_Init+0x94>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d92:	4b16      	ldr	r3, [pc, #88]	; (8008dec <USBD_LL_Init+0x94>)
 8008d94:	2202      	movs	r2, #2
 8008d96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d98:	4b14      	ldr	r3, [pc, #80]	; (8008dec <USBD_LL_Init+0x94>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <USBD_LL_Init+0x94>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <USBD_LL_Init+0x94>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008daa:	4b10      	ldr	r3, [pc, #64]	; (8008dec <USBD_LL_Init+0x94>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008db0:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <USBD_LL_Init+0x94>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008db6:	480d      	ldr	r0, [pc, #52]	; (8008dec <USBD_LL_Init+0x94>)
 8008db8:	f7f8 fe2f 	bl	8001a1a <HAL_PCD_Init>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008dc2:	f7f7 fe63 	bl	8000a8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008dc6:	2180      	movs	r1, #128	; 0x80
 8008dc8:	4808      	ldr	r0, [pc, #32]	; (8008dec <USBD_LL_Init+0x94>)
 8008dca:	f7fa f8ba 	bl	8002f42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008dce:	2240      	movs	r2, #64	; 0x40
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4806      	ldr	r0, [pc, #24]	; (8008dec <USBD_LL_Init+0x94>)
 8008dd4:	f7fa f86e 	bl	8002eb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008dd8:	2280      	movs	r2, #128	; 0x80
 8008dda:	2101      	movs	r1, #1
 8008ddc:	4803      	ldr	r0, [pc, #12]	; (8008dec <USBD_LL_Init+0x94>)
 8008dde:	f7fa f869 	bl	8002eb4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20001830 	.word	0x20001830

08008df0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7f8 ff2b 	bl	8001c62 <HAL_PCD_Start>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f990 	bl	8009138 <USBD_Get_USB_Status>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	4608      	mov	r0, r1
 8008e30:	4611      	mov	r1, r2
 8008e32:	461a      	mov	r2, r3
 8008e34:	4603      	mov	r3, r0
 8008e36:	70fb      	strb	r3, [r7, #3]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70bb      	strb	r3, [r7, #2]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e4e:	78bb      	ldrb	r3, [r7, #2]
 8008e50:	883a      	ldrh	r2, [r7, #0]
 8008e52:	78f9      	ldrb	r1, [r7, #3]
 8008e54:	f7f9 fc29 	bl	80026aa <HAL_PCD_EP_Open>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f96a 	bl	8009138 <USBD_Get_USB_Status>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f9 fc72 	bl	800277a <HAL_PCD_EP_Close>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 f94b 	bl	8009138 <USBD_Get_USB_Status>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f9 fd4a 	bl	8002968 <HAL_PCD_EP_SetStall>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 f92c 	bl	8009138 <USBD_Get_USB_Status>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7f9 fd8f 	bl	8002a30 <HAL_PCD_EP_ClrStall>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f90d 	bl	8009138 <USBD_Get_USB_Status>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	da0b      	bge.n	8008f60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	4613      	mov	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	4413      	add	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	440b      	add	r3, r1
 8008f5a:	333e      	adds	r3, #62	; 0x3e
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	e00b      	b.n	8008f78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008f76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f9 fb5c 	bl	8002660 <HAL_PCD_SetAddress>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f8c2 	bl	8009138 <USBD_Get_USB_Status>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b086      	sub	sp, #24
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008fe0:	7af9      	ldrb	r1, [r7, #11]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	f7f9 fc75 	bl	80028d4 <HAL_PCD_EP_Transmit>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f8a1 	bl	8009138 <USBD_Get_USB_Status>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	607a      	str	r2, [r7, #4]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	460b      	mov	r3, r1
 8009012:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009022:	7af9      	ldrb	r1, [r7, #11]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	f7f9 fbf1 	bl	800280e <HAL_PCD_EP_Receive>
 800902c:	4603      	mov	r3, r0
 800902e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 f880 	bl	8009138 <USBD_Get_USB_Status>
 8009038:	4603      	mov	r3, r0
 800903a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800903c:	7dbb      	ldrb	r3, [r7, #22]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009058:	78fa      	ldrb	r2, [r7, #3]
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f7f9 fc21 	bl	80028a4 <HAL_PCD_EP_GetRxCount>
 8009062:	4603      	mov	r3, r0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <HAL_PCDEx_LPM_Callback+0x18>
 800907e:	2b01      	cmp	r3, #1
 8009080:	d01f      	beq.n	80090c2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009082:	e03b      	b.n	80090fc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d007      	beq.n	800909c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800908c:	f7f7 fa96 	bl	80005bc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009090:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <HAL_PCDEx_LPM_Callback+0x98>)
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <HAL_PCDEx_LPM_Callback+0x98>)
 8009096:	f023 0306 	bic.w	r3, r3, #6
 800909a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6812      	ldr	r2, [r2, #0]
 80090aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090ae:	f023 0301 	bic.w	r3, r3, #1
 80090b2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fa1d 	bl	80074fa <USBD_LL_Resume>
    break;
 80090c0:	e01c      	b.n	80090fc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090d4:	f043 0301 	orr.w	r3, r3, #1
 80090d8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe f9f4 	bl	80074ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d005      	beq.n	80090fa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <HAL_PCDEx_LPM_Callback+0x98>)
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	4a04      	ldr	r2, [pc, #16]	; (8009104 <HAL_PCDEx_LPM_Callback+0x98>)
 80090f4:	f043 0306 	orr.w	r3, r3, #6
 80090f8:	6113      	str	r3, [r2, #16]
    break;
 80090fa:	bf00      	nop
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009110:	4b03      	ldr	r3, [pc, #12]	; (8009120 <USBD_static_malloc+0x18>)
}
 8009112:	4618      	mov	r0, r3
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	20001d3c 	.word	0x20001d3c

08009124 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]

}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	2b03      	cmp	r3, #3
 800914a:	d817      	bhi.n	800917c <USBD_Get_USB_Status+0x44>
 800914c:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <USBD_Get_USB_Status+0x1c>)
 800914e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009152:	bf00      	nop
 8009154:	08009165 	.word	0x08009165
 8009158:	0800916b 	.word	0x0800916b
 800915c:	08009171 	.word	0x08009171
 8009160:	08009177 	.word	0x08009177
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
    break;
 8009168:	e00b      	b.n	8009182 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800916a:	2303      	movs	r3, #3
 800916c:	73fb      	strb	r3, [r7, #15]
    break;
 800916e:	e008      	b.n	8009182 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009170:	2301      	movs	r3, #1
 8009172:	73fb      	strb	r3, [r7, #15]
    break;
 8009174:	e005      	b.n	8009182 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009176:	2303      	movs	r3, #3
 8009178:	73fb      	strb	r3, [r7, #15]
    break;
 800917a:	e002      	b.n	8009182 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	73fb      	strb	r3, [r7, #15]
    break;
 8009180:	bf00      	nop
  }
  return usb_status;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <__libc_init_array>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4d0d      	ldr	r5, [pc, #52]	; (80091c8 <__libc_init_array+0x38>)
 8009194:	4c0d      	ldr	r4, [pc, #52]	; (80091cc <__libc_init_array+0x3c>)
 8009196:	1b64      	subs	r4, r4, r5
 8009198:	10a4      	asrs	r4, r4, #2
 800919a:	2600      	movs	r6, #0
 800919c:	42a6      	cmp	r6, r4
 800919e:	d109      	bne.n	80091b4 <__libc_init_array+0x24>
 80091a0:	4d0b      	ldr	r5, [pc, #44]	; (80091d0 <__libc_init_array+0x40>)
 80091a2:	4c0c      	ldr	r4, [pc, #48]	; (80091d4 <__libc_init_array+0x44>)
 80091a4:	f000 f844 	bl	8009230 <_init>
 80091a8:	1b64      	subs	r4, r4, r5
 80091aa:	10a4      	asrs	r4, r4, #2
 80091ac:	2600      	movs	r6, #0
 80091ae:	42a6      	cmp	r6, r4
 80091b0:	d105      	bne.n	80091be <__libc_init_array+0x2e>
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b8:	4798      	blx	r3
 80091ba:	3601      	adds	r6, #1
 80091bc:	e7ee      	b.n	800919c <__libc_init_array+0xc>
 80091be:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c2:	4798      	blx	r3
 80091c4:	3601      	adds	r6, #1
 80091c6:	e7f2      	b.n	80091ae <__libc_init_array+0x1e>
 80091c8:	080092e8 	.word	0x080092e8
 80091cc:	080092e8 	.word	0x080092e8
 80091d0:	080092e8 	.word	0x080092e8
 80091d4:	080092ec 	.word	0x080092ec

080091d8 <memset>:
 80091d8:	4402      	add	r2, r0
 80091da:	4603      	mov	r3, r0
 80091dc:	4293      	cmp	r3, r2
 80091de:	d100      	bne.n	80091e2 <memset+0xa>
 80091e0:	4770      	bx	lr
 80091e2:	f803 1b01 	strb.w	r1, [r3], #1
 80091e6:	e7f9      	b.n	80091dc <memset+0x4>

080091e8 <strchr>:
 80091e8:	b2c9      	uxtb	r1, r1
 80091ea:	4603      	mov	r3, r0
 80091ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f0:	b11a      	cbz	r2, 80091fa <strchr+0x12>
 80091f2:	428a      	cmp	r2, r1
 80091f4:	d1f9      	bne.n	80091ea <strchr+0x2>
 80091f6:	4618      	mov	r0, r3
 80091f8:	4770      	bx	lr
 80091fa:	2900      	cmp	r1, #0
 80091fc:	bf18      	it	ne
 80091fe:	2300      	movne	r3, #0
 8009200:	e7f9      	b.n	80091f6 <strchr+0xe>

08009202 <strstr>:
 8009202:	780a      	ldrb	r2, [r1, #0]
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	b96a      	cbnz	r2, 8009224 <strstr+0x22>
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	429a      	cmp	r2, r3
 800920c:	d109      	bne.n	8009222 <strstr+0x20>
 800920e:	460c      	mov	r4, r1
 8009210:	4605      	mov	r5, r0
 8009212:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0f6      	beq.n	8009208 <strstr+0x6>
 800921a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800921e:	429e      	cmp	r6, r3
 8009220:	d0f7      	beq.n	8009212 <strstr+0x10>
 8009222:	3001      	adds	r0, #1
 8009224:	7803      	ldrb	r3, [r0, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1ef      	bne.n	800920a <strstr+0x8>
 800922a:	4618      	mov	r0, r3
 800922c:	e7ec      	b.n	8009208 <strstr+0x6>
	...

08009230 <_init>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr

0800923c <_fini>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr
