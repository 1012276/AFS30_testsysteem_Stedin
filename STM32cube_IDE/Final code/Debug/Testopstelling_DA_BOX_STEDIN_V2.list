
Testopstelling_DA_BOX_STEDIN_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  08013e20  08013e20  00023e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014728  08014728  000302e8  2**0
                  CONTENTS
  4 .ARM          00000008  08014728  08014728  00024728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014730  08014730  000302e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014730  08014730  00024730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014734  08014734  00024734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08014738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f36c  200002e8  08014a20  000302e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f654  08014a20  0003f654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027c54  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000523d  00000000  00000000  00057f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc0  00000000  00000000  0005d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dc8  00000000  00000000  0005f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000080bc  00000000  00000000  00060f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024feb  00000000  00000000  00068ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4eed  00000000  00000000  0008dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ee8  00000000  00000000  00172f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013e04 	.word	0x08013e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002ec 	.word	0x200002ec
 800020c:	08013e04 	.word	0x08013e04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <calculate_three_phase_sine_wave_samples>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*  Functies voor DAC */
/* DAC CODE BEGIN*/
void calculate_three_phase_sine_wave_samples(uint16_t* wave_A, uint16_t* wave_B, uint16_t* wave_C) {
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
 8001048:	f000 bda2 	b.w	8001b90 <calculate_three_phase_sine_wave_samples+0xb58>
        double t = (double)i / SAMPLE_RATE;
 800104c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800104e:	f7ff fa89 	bl	8000564 <__aeabi_i2d>
 8001052:	a3c1      	add	r3, pc, #772	; (adr r3, 8001358 <calculate_three_phase_sine_wave_samples+0x320>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fc18 	bl	800088c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Phase A with harmonic distortion
        double sample_A = AMPLITUDE * sin(2 * PI * FREQUENCY * t);
 8001064:	4bb4      	ldr	r3, [pc, #720]	; (8001338 <calculate_three_phase_sine_wave_samples+0x300>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa8d 	bl	8000588 <__aeabi_f2d>
 800106e:	4604      	mov	r4, r0
 8001070:	460d      	mov	r5, r1
 8001072:	a3a3      	add	r3, pc, #652	; (adr r3, 8001300 <calculate_three_phase_sine_wave_samples+0x2c8>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107c:	f7ff fadc 	bl	8000638 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	ec43 2b17 	vmov	d7, r2, r3
 8001088:	eeb0 0a47 	vmov.f32	s0, s14
 800108c:	eef0 0a67 	vmov.f32	s1, s15
 8001090:	f011 fe6e 	bl	8012d70 <sin>
 8001094:	ec53 2b10 	vmov	r2, r3, d0
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff facc 	bl	8000638 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_3 * AMPLITUDE * sin(2 * PI * 3 * FREQUENCY * t);
 80010a8:	4ba4      	ldr	r3, [pc, #656]	; (800133c <calculate_three_phase_sine_wave_samples+0x304>)
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	4ba2      	ldr	r3, [pc, #648]	; (8001338 <calculate_three_phase_sine_wave_samples+0x300>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b8:	ee17 0a90 	vmov	r0, s15
 80010bc:	f7ff fa64 	bl	8000588 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	a390      	add	r3, pc, #576	; (adr r3, 8001308 <calculate_three_phase_sine_wave_samples+0x2d0>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010ce:	f7ff fab3 	bl	8000638 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f011 fe45 	bl	8012d70 <sin>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff faa3 	bl	8000638 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010fa:	f7ff f8e7 	bl	80002cc <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_5 * AMPLITUDE * sin(2 * PI * 5 * FREQUENCY * t);
 8001106:	4b8e      	ldr	r3, [pc, #568]	; (8001340 <calculate_three_phase_sine_wave_samples+0x308>)
 8001108:	ed93 7a00 	vldr	s14, [r3]
 800110c:	4b8a      	ldr	r3, [pc, #552]	; (8001338 <calculate_three_phase_sine_wave_samples+0x300>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	ee17 0a90 	vmov	r0, s15
 800111a:	f7ff fa35 	bl	8000588 <__aeabi_f2d>
 800111e:	4604      	mov	r4, r0
 8001120:	460d      	mov	r5, r1
 8001122:	a37b      	add	r3, pc, #492	; (adr r3, 8001310 <calculate_three_phase_sine_wave_samples+0x2d8>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800112c:	f7ff fa84 	bl	8000638 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	ec43 2b17 	vmov	d7, r2, r3
 8001138:	eeb0 0a47 	vmov.f32	s0, s14
 800113c:	eef0 0a67 	vmov.f32	s1, s15
 8001140:	f011 fe16 	bl	8012d70 <sin>
 8001144:	ec53 2b10 	vmov	r2, r3, d0
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff fa74 	bl	8000638 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001158:	f7ff f8b8 	bl	80002cc <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_7 * AMPLITUDE * sin(2 * PI * 7 * FREQUENCY * t);
 8001164:	4b77      	ldr	r3, [pc, #476]	; (8001344 <calculate_three_phase_sine_wave_samples+0x30c>)
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	4b73      	ldr	r3, [pc, #460]	; (8001338 <calculate_three_phase_sine_wave_samples+0x300>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	ee17 0a90 	vmov	r0, s15
 8001178:	f7ff fa06 	bl	8000588 <__aeabi_f2d>
 800117c:	4604      	mov	r4, r0
 800117e:	460d      	mov	r5, r1
 8001180:	a365      	add	r3, pc, #404	; (adr r3, 8001318 <calculate_three_phase_sine_wave_samples+0x2e0>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800118a:	f7ff fa55 	bl	8000638 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	ec43 2b17 	vmov	d7, r2, r3
 8001196:	eeb0 0a47 	vmov.f32	s0, s14
 800119a:	eef0 0a67 	vmov.f32	s1, s15
 800119e:	f011 fde7 	bl	8012d70 <sin>
 80011a2:	ec53 2b10 	vmov	r2, r3, d0
 80011a6:	4620      	mov	r0, r4
 80011a8:	4629      	mov	r1, r5
 80011aa:	f7ff fa45 	bl	8000638 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011b6:	f7ff f889 	bl	80002cc <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_9 * AMPLITUDE * sin(2 * PI * 9 * FREQUENCY * t);
 80011c2:	4b61      	ldr	r3, [pc, #388]	; (8001348 <calculate_three_phase_sine_wave_samples+0x310>)
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <calculate_three_phase_sine_wave_samples+0x300>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f9d7 	bl	8000588 <__aeabi_f2d>
 80011da:	4604      	mov	r4, r0
 80011dc:	460d      	mov	r5, r1
 80011de:	a350      	add	r3, pc, #320	; (adr r3, 8001320 <calculate_three_phase_sine_wave_samples+0x2e8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011e8:	f7ff fa26 	bl	8000638 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	ec43 2b17 	vmov	d7, r2, r3
 80011f4:	eeb0 0a47 	vmov.f32	s0, s14
 80011f8:	eef0 0a67 	vmov.f32	s1, s15
 80011fc:	f011 fdb8 	bl	8012d70 <sin>
 8001200:	ec53 2b10 	vmov	r2, r3, d0
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff fa16 	bl	8000638 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001214:	f7ff f85a 	bl	80002cc <__adddf3>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_11 * AMPLITUDE * sin(2 * PI * 11 * FREQUENCY * t);
 8001220:	4b4a      	ldr	r3, [pc, #296]	; (800134c <calculate_three_phase_sine_wave_samples+0x314>)
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	4b44      	ldr	r3, [pc, #272]	; (8001338 <calculate_three_phase_sine_wave_samples+0x300>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001230:	ee17 0a90 	vmov	r0, s15
 8001234:	f7ff f9a8 	bl	8000588 <__aeabi_f2d>
 8001238:	4604      	mov	r4, r0
 800123a:	460d      	mov	r5, r1
 800123c:	a33a      	add	r3, pc, #232	; (adr r3, 8001328 <calculate_three_phase_sine_wave_samples+0x2f0>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001246:	f7ff f9f7 	bl	8000638 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	ec43 2b17 	vmov	d7, r2, r3
 8001252:	eeb0 0a47 	vmov.f32	s0, s14
 8001256:	eef0 0a67 	vmov.f32	s1, s15
 800125a:	f011 fd89 	bl	8012d70 <sin>
 800125e:	ec53 2b10 	vmov	r2, r3, d0
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f9e7 	bl	8000638 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001272:	f7ff f82b 	bl	80002cc <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        sample_A += HARMONIC_13 * AMPLITUDE * sin(2 * PI * 13 * FREQUENCY * t);
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <calculate_three_phase_sine_wave_samples+0x318>)
 8001280:	ed93 7a00 	vldr	s14, [r3]
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <calculate_three_phase_sine_wave_samples+0x300>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128e:	ee17 0a90 	vmov	r0, s15
 8001292:	f7ff f979 	bl	8000588 <__aeabi_f2d>
 8001296:	4604      	mov	r4, r0
 8001298:	460d      	mov	r5, r1
 800129a:	a325      	add	r3, pc, #148	; (adr r3, 8001330 <calculate_three_phase_sine_wave_samples+0x2f8>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012a4:	f7ff f9c8 	bl	8000638 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	ec43 2b17 	vmov	d7, r2, r3
 80012b0:	eeb0 0a47 	vmov.f32	s0, s14
 80012b4:	eef0 0a67 	vmov.f32	s1, s15
 80012b8:	f011 fd5a 	bl	8012d70 <sin>
 80012bc:	ec53 2b10 	vmov	r2, r3, d0
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7ff f9b8 	bl	8000638 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012d0:	f7fe fffc 	bl	80002cc <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (sample_A >= 2.5)
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <calculate_three_phase_sine_wave_samples+0x31c>)
 80012e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012e6:	f7ff fc2d 	bl	8000b44 <__aeabi_dcmpge>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d037      	beq.n	8001360 <calculate_three_phase_sine_wave_samples+0x328>
        {
        	sample_A= 2.5;
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <calculate_three_phase_sine_wave_samples+0x31c>)
 80012f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80012fa:	e040      	b.n	800137e <calculate_three_phase_sine_wave_samples+0x346>
 80012fc:	f3af 8000 	nop.w
 8001300:	5974e65c 	.word	0x5974e65c
 8001304:	4073a28c 	.word	0x4073a28c
 8001308:	862f598b 	.word	0x862f598b
 800130c:	408d73d2 	.word	0x408d73d2
 8001310:	6fd21ff3 	.word	0x6fd21ff3
 8001314:	40988b2f 	.word	0x40988b2f
 8001318:	ce464991 	.word	0xce464991
 800131c:	40a12e3a 	.word	0x40a12e3a
 8001320:	e4a38328 	.word	0xe4a38328
 8001324:	40a616dd 	.word	0x40a616dd
 8001328:	fb00bcbf 	.word	0xfb00bcbf
 800132c:	40aaff80 	.word	0x40aaff80
 8001330:	115df656 	.word	0x115df656
 8001334:	40afe824 	.word	0x40afe824
 8001338:	20000894 	.word	0x20000894
 800133c:	20000898 	.word	0x20000898
 8001340:	2000089c 	.word	0x2000089c
 8001344:	200008a0 	.word	0x200008a0
 8001348:	200008a4 	.word	0x200008a4
 800134c:	200008a8 	.word	0x200008a8
 8001350:	200008ac 	.word	0x200008ac
 8001354:	40040000 	.word	0x40040000
 8001358:	00000000 	.word	0x00000000
 800135c:	40e77000 	.word	0x40e77000
        }
        else if (sample_A <= -2.5)
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4bd6      	ldr	r3, [pc, #856]	; (80016c0 <calculate_three_phase_sine_wave_samples+0x688>)
 8001366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800136a:	f7ff fbe1 	bl	8000b30 <__aeabi_dcmple>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <calculate_three_phase_sine_wave_samples+0x346>
		{
			sample_A= -2.5;
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4bd1      	ldr	r3, [pc, #836]	; (80016c0 <calculate_three_phase_sine_wave_samples+0x688>)
 800137a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

        wave_A[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_A + VREF));
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4bd0      	ldr	r3, [pc, #832]	; (80016c4 <calculate_three_phase_sine_wave_samples+0x68c>)
 8001384:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001388:	f7fe ffa0 	bl	80002cc <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	a3b8      	add	r3, pc, #736	; (adr r3, 8001678 <calculate_three_phase_sine_wave_samples+0x640>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f94d 	bl	8000638 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	18d4      	adds	r4, r2, r3
 80013ae:	f7ff fc1b 	bl	8000be8 <__aeabi_d2uiz>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	8023      	strh	r3, [r4, #0]

        // Phase B with harmonic distortion (120 degrees shifted)

        double sample_B = AMPLITUDE * sin(2 * PI * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 80013b8:	4bc3      	ldr	r3, [pc, #780]	; (80016c8 <calculate_three_phase_sine_wave_samples+0x690>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8e3 	bl	8000588 <__aeabi_f2d>
 80013c2:	4604      	mov	r4, r0
 80013c4:	460d      	mov	r5, r1
 80013c6:	a3ae      	add	r3, pc, #696	; (adr r3, 8001680 <calculate_three_phase_sine_wave_samples+0x648>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013d0:	f7ff f932 	bl	8000638 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	a3aa      	add	r3, pc, #680	; (adr r3, 8001688 <calculate_three_phase_sine_wave_samples+0x650>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7fe ff73 	bl	80002cc <__adddf3>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	ec43 2b17 	vmov	d7, r2, r3
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	f011 fcbb 	bl	8012d70 <sin>
 80013fa:	ec53 2b10 	vmov	r2, r3, d0
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7ff f919 	bl	8000638 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_3 * AMPLITUDE * sin(2 * PI * 3 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800140e:	4baf      	ldr	r3, [pc, #700]	; (80016cc <calculate_three_phase_sine_wave_samples+0x694>)
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	4bac      	ldr	r3, [pc, #688]	; (80016c8 <calculate_three_phase_sine_wave_samples+0x690>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f8b1 	bl	8000588 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	a399      	add	r3, pc, #612	; (adr r3, 8001690 <calculate_three_phase_sine_wave_samples+0x658>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001434:	f7ff f900 	bl	8000638 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a391      	add	r3, pc, #580	; (adr r3, 8001688 <calculate_three_phase_sine_wave_samples+0x650>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7fe ff41 	bl	80002cc <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	ec43 2b17 	vmov	d7, r2, r3
 8001452:	eeb0 0a47 	vmov.f32	s0, s14
 8001456:	eef0 0a67 	vmov.f32	s1, s15
 800145a:	f011 fc89 	bl	8012d70 <sin>
 800145e:	ec53 2b10 	vmov	r2, r3, d0
 8001462:	4620      	mov	r0, r4
 8001464:	4629      	mov	r1, r5
 8001466:	f7ff f8e7 	bl	8000638 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001472:	f7fe ff2b 	bl	80002cc <__adddf3>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_5 * AMPLITUDE * sin(2 * PI * 5 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800147e:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <calculate_three_phase_sine_wave_samples+0x698>)
 8001480:	ed93 7a00 	vldr	s14, [r3]
 8001484:	4b90      	ldr	r3, [pc, #576]	; (80016c8 <calculate_three_phase_sine_wave_samples+0x690>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	ee17 0a90 	vmov	r0, s15
 8001492:	f7ff f879 	bl	8000588 <__aeabi_f2d>
 8001496:	4604      	mov	r4, r0
 8001498:	460d      	mov	r5, r1
 800149a:	a37f      	add	r3, pc, #508	; (adr r3, 8001698 <calculate_three_phase_sine_wave_samples+0x660>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a4:	f7ff f8c8 	bl	8000638 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	a375      	add	r3, pc, #468	; (adr r3, 8001688 <calculate_three_phase_sine_wave_samples+0x650>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7fe ff09 	bl	80002cc <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ec43 2b17 	vmov	d7, r2, r3
 80014c2:	eeb0 0a47 	vmov.f32	s0, s14
 80014c6:	eef0 0a67 	vmov.f32	s1, s15
 80014ca:	f011 fc51 	bl	8012d70 <sin>
 80014ce:	ec53 2b10 	vmov	r2, r3, d0
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7ff f8af 	bl	8000638 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014e2:	f7fe fef3 	bl	80002cc <__adddf3>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_7 * AMPLITUDE * sin(2 * PI * 7 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 80014ee:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <calculate_three_phase_sine_wave_samples+0x69c>)
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <calculate_three_phase_sine_wave_samples+0x690>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fe:	ee17 0a90 	vmov	r0, s15
 8001502:	f7ff f841 	bl	8000588 <__aeabi_f2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	a365      	add	r3, pc, #404	; (adr r3, 80016a0 <calculate_three_phase_sine_wave_samples+0x668>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001514:	f7ff f890 	bl	8000638 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	a359      	add	r3, pc, #356	; (adr r3, 8001688 <calculate_three_phase_sine_wave_samples+0x650>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7fe fed1 	bl	80002cc <__adddf3>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	ec43 2b17 	vmov	d7, r2, r3
 8001532:	eeb0 0a47 	vmov.f32	s0, s14
 8001536:	eef0 0a67 	vmov.f32	s1, s15
 800153a:	f011 fc19 	bl	8012d70 <sin>
 800153e:	ec53 2b10 	vmov	r2, r3, d0
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f877 	bl	8000638 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001552:	f7fe febb 	bl	80002cc <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_9 * AMPLITUDE * sin(2 * PI * 9 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800155e:	4b5e      	ldr	r3, [pc, #376]	; (80016d8 <calculate_three_phase_sine_wave_samples+0x6a0>)
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <calculate_three_phase_sine_wave_samples+0x690>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	ee17 0a90 	vmov	r0, s15
 8001572:	f7ff f809 	bl	8000588 <__aeabi_f2d>
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
 800157a:	a34b      	add	r3, pc, #300	; (adr r3, 80016a8 <calculate_three_phase_sine_wave_samples+0x670>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001584:	f7ff f858 	bl	8000638 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	a33d      	add	r3, pc, #244	; (adr r3, 8001688 <calculate_three_phase_sine_wave_samples+0x650>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe fe99 	bl	80002cc <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ec43 2b17 	vmov	d7, r2, r3
 80015a2:	eeb0 0a47 	vmov.f32	s0, s14
 80015a6:	eef0 0a67 	vmov.f32	s1, s15
 80015aa:	f011 fbe1 	bl	8012d70 <sin>
 80015ae:	ec53 2b10 	vmov	r2, r3, d0
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7ff f83f 	bl	8000638 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015c2:	f7fe fe83 	bl	80002cc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_11 * AMPLITUDE * sin(2 * PI * 11 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <calculate_three_phase_sine_wave_samples+0x6a4>)
 80015d0:	ed93 7a00 	vldr	s14, [r3]
 80015d4:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <calculate_three_phase_sine_wave_samples+0x690>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015de:	ee17 0a90 	vmov	r0, s15
 80015e2:	f7fe ffd1 	bl	8000588 <__aeabi_f2d>
 80015e6:	4604      	mov	r4, r0
 80015e8:	460d      	mov	r5, r1
 80015ea:	a331      	add	r3, pc, #196	; (adr r3, 80016b0 <calculate_three_phase_sine_wave_samples+0x678>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015f4:	f7ff f820 	bl	8000638 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	a321      	add	r3, pc, #132	; (adr r3, 8001688 <calculate_three_phase_sine_wave_samples+0x650>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fe61 	bl	80002cc <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b17 	vmov	d7, r2, r3
 8001612:	eeb0 0a47 	vmov.f32	s0, s14
 8001616:	eef0 0a67 	vmov.f32	s1, s15
 800161a:	f011 fba9 	bl	8012d70 <sin>
 800161e:	ec53 2b10 	vmov	r2, r3, d0
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7ff f807 	bl	8000638 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001632:	f7fe fe4b 	bl	80002cc <__adddf3>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        sample_B += HARMONIC_13 * AMPLITUDE * sin(2 * PI * 13 * FREQUENCY * t + PHASE_SHIFT_120_DEG);
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <calculate_three_phase_sine_wave_samples+0x6a8>)
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <calculate_three_phase_sine_wave_samples+0x690>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164e:	ee17 0a90 	vmov	r0, s15
 8001652:	f7fe ff99 	bl	8000588 <__aeabi_f2d>
 8001656:	4604      	mov	r4, r0
 8001658:	460d      	mov	r5, r1
 800165a:	a317      	add	r3, pc, #92	; (adr r3, 80016b8 <calculate_three_phase_sine_wave_samples+0x680>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001664:	f7fe ffe8 	bl	8000638 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	e038      	b.n	80016e4 <calculate_three_phase_sine_wave_samples+0x6ac>
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	9999999a 	.word	0x9999999a
 800167c:	40c99999 	.word	0x40c99999
 8001680:	5974e65c 	.word	0x5974e65c
 8001684:	4073a28c 	.word	0x4073a28c
 8001688:	37db38a1 	.word	0x37db38a1
 800168c:	4000c152 	.word	0x4000c152
 8001690:	862f598b 	.word	0x862f598b
 8001694:	408d73d2 	.word	0x408d73d2
 8001698:	6fd21ff3 	.word	0x6fd21ff3
 800169c:	40988b2f 	.word	0x40988b2f
 80016a0:	ce464991 	.word	0xce464991
 80016a4:	40a12e3a 	.word	0x40a12e3a
 80016a8:	e4a38328 	.word	0xe4a38328
 80016ac:	40a616dd 	.word	0x40a616dd
 80016b0:	fb00bcbf 	.word	0xfb00bcbf
 80016b4:	40aaff80 	.word	0x40aaff80
 80016b8:	115df656 	.word	0x115df656
 80016bc:	40afe824 	.word	0x40afe824
 80016c0:	c0040000 	.word	0xc0040000
 80016c4:	40040000 	.word	0x40040000
 80016c8:	20000894 	.word	0x20000894
 80016cc:	20000898 	.word	0x20000898
 80016d0:	2000089c 	.word	0x2000089c
 80016d4:	200008a0 	.word	0x200008a0
 80016d8:	200008a4 	.word	0x200008a4
 80016dc:	200008a8 	.word	0x200008a8
 80016e0:	200008ac 	.word	0x200008ac
 80016e4:	a319      	add	r3, pc, #100	; (adr r3, 800174c <calculate_three_phase_sine_wave_samples+0x714>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdef 	bl	80002cc <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b17 	vmov	d7, r2, r3
 80016f6:	eeb0 0a47 	vmov.f32	s0, s14
 80016fa:	eef0 0a67 	vmov.f32	s1, s15
 80016fe:	f011 fb37 	bl	8012d70 <sin>
 8001702:	ec53 2b10 	vmov	r2, r3, d0
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe ff95 	bl	8000638 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001716:	f7fe fdd9 	bl	80002cc <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (sample_B >= 2.5)
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <calculate_three_phase_sine_wave_samples+0x710>)
 8001728:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800172c:	f7ff fa0a 	bl	8000b44 <__aeabi_dcmpge>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00e      	beq.n	8001754 <calculate_three_phase_sine_wave_samples+0x71c>
        {
        	sample_B= 2.5;
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <calculate_three_phase_sine_wave_samples+0x710>)
 800173c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001740:	e017      	b.n	8001772 <calculate_three_phase_sine_wave_samples+0x73a>
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	40040000 	.word	0x40040000
 800174c:	37db38a1 	.word	0x37db38a1
 8001750:	4000c152 	.word	0x4000c152
        }
        else if (sample_B <= -2.5)
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4bd5      	ldr	r3, [pc, #852]	; (8001ab0 <calculate_three_phase_sine_wave_samples+0xa78>)
 800175a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800175e:	f7ff f9e7 	bl	8000b30 <__aeabi_dcmple>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <calculate_three_phase_sine_wave_samples+0x73a>
		{
			sample_B= -2.5;
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4bd0      	ldr	r3, [pc, #832]	; (8001ab0 <calculate_three_phase_sine_wave_samples+0xa78>)
 800176e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

        wave_B[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_B + VREF));
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4bcf      	ldr	r3, [pc, #828]	; (8001ab4 <calculate_three_phase_sine_wave_samples+0xa7c>)
 8001778:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800177c:	f7fe fda6 	bl	80002cc <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a3b7      	add	r3, pc, #732	; (adr r3, 8001a68 <calculate_three_phase_sine_wave_samples+0xa30>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff53 	bl	8000638 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	18d4      	adds	r4, r2, r3
 80017a2:	f7ff fa21 	bl	8000be8 <__aeabi_d2uiz>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	8023      	strh	r3, [r4, #0]


        // Phase C with harmonic distortion (240 degrees shifted)
        double sample_C = AMPLITUDE * sin(2 * PI * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 80017ac:	4bc2      	ldr	r3, [pc, #776]	; (8001ab8 <calculate_three_phase_sine_wave_samples+0xa80>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fee9 	bl	8000588 <__aeabi_f2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	a3ad      	add	r3, pc, #692	; (adr r3, 8001a70 <calculate_three_phase_sine_wave_samples+0xa38>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017c4:	f7fe ff38 	bl	8000638 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8001a78 <calculate_three_phase_sine_wave_samples+0xa40>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fd79 	bl	80002cc <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ec43 2b17 	vmov	d7, r2, r3
 80017e2:	eeb0 0a47 	vmov.f32	s0, s14
 80017e6:	eef0 0a67 	vmov.f32	s1, s15
 80017ea:	f011 fac1 	bl	8012d70 <sin>
 80017ee:	ec53 2b10 	vmov	r2, r3, d0
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7fe ff1f 	bl	8000638 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_3 * AMPLITUDE * sin(2 * PI * 3 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001802:	4bae      	ldr	r3, [pc, #696]	; (8001abc <calculate_three_phase_sine_wave_samples+0xa84>)
 8001804:	ed93 7a00 	vldr	s14, [r3]
 8001808:	4bab      	ldr	r3, [pc, #684]	; (8001ab8 <calculate_three_phase_sine_wave_samples+0xa80>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe feb7 	bl	8000588 <__aeabi_f2d>
 800181a:	4604      	mov	r4, r0
 800181c:	460d      	mov	r5, r1
 800181e:	a398      	add	r3, pc, #608	; (adr r3, 8001a80 <calculate_three_phase_sine_wave_samples+0xa48>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001828:	f7fe ff06 	bl	8000638 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a390      	add	r3, pc, #576	; (adr r3, 8001a78 <calculate_three_phase_sine_wave_samples+0xa40>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fd47 	bl	80002cc <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	ec43 2b17 	vmov	d7, r2, r3
 8001846:	eeb0 0a47 	vmov.f32	s0, s14
 800184a:	eef0 0a67 	vmov.f32	s1, s15
 800184e:	f011 fa8f 	bl	8012d70 <sin>
 8001852:	ec53 2b10 	vmov	r2, r3, d0
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe feed 	bl	8000638 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001866:	f7fe fd31 	bl	80002cc <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_5 * AMPLITUDE * sin(2 * PI * 5 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001872:	4b93      	ldr	r3, [pc, #588]	; (8001ac0 <calculate_three_phase_sine_wave_samples+0xa88>)
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	4b8f      	ldr	r3, [pc, #572]	; (8001ab8 <calculate_three_phase_sine_wave_samples+0xa80>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	ee17 0a90 	vmov	r0, s15
 8001886:	f7fe fe7f 	bl	8000588 <__aeabi_f2d>
 800188a:	4604      	mov	r4, r0
 800188c:	460d      	mov	r5, r1
 800188e:	a37e      	add	r3, pc, #504	; (adr r3, 8001a88 <calculate_three_phase_sine_wave_samples+0xa50>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001898:	f7fe fece 	bl	8000638 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	a374      	add	r3, pc, #464	; (adr r3, 8001a78 <calculate_three_phase_sine_wave_samples+0xa40>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fd0f 	bl	80002cc <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	ec43 2b17 	vmov	d7, r2, r3
 80018b6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ba:	eef0 0a67 	vmov.f32	s1, s15
 80018be:	f011 fa57 	bl	8012d70 <sin>
 80018c2:	ec53 2b10 	vmov	r2, r3, d0
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe feb5 	bl	8000638 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018d6:	f7fe fcf9 	bl	80002cc <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_7 * AMPLITUDE * sin(2 * PI * 7 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 80018e2:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <calculate_three_phase_sine_wave_samples+0xa8c>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <calculate_three_phase_sine_wave_samples+0xa80>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f7fe fe47 	bl	8000588 <__aeabi_f2d>
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
 80018fe:	a364      	add	r3, pc, #400	; (adr r3, 8001a90 <calculate_three_phase_sine_wave_samples+0xa58>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001908:	f7fe fe96 	bl	8000638 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	a358      	add	r3, pc, #352	; (adr r3, 8001a78 <calculate_three_phase_sine_wave_samples+0xa40>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fcd7 	bl	80002cc <__adddf3>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	ec43 2b17 	vmov	d7, r2, r3
 8001926:	eeb0 0a47 	vmov.f32	s0, s14
 800192a:	eef0 0a67 	vmov.f32	s1, s15
 800192e:	f011 fa1f 	bl	8012d70 <sin>
 8001932:	ec53 2b10 	vmov	r2, r3, d0
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f7fe fe7d 	bl	8000638 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001946:	f7fe fcc1 	bl	80002cc <__adddf3>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_9 * AMPLITUDE * sin(2 * PI * 9 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <calculate_three_phase_sine_wave_samples+0xa90>)
 8001954:	ed93 7a00 	vldr	s14, [r3]
 8001958:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <calculate_three_phase_sine_wave_samples+0xa80>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001962:	ee17 0a90 	vmov	r0, s15
 8001966:	f7fe fe0f 	bl	8000588 <__aeabi_f2d>
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
 800196e:	a34a      	add	r3, pc, #296	; (adr r3, 8001a98 <calculate_three_phase_sine_wave_samples+0xa60>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001978:	f7fe fe5e 	bl	8000638 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a33c      	add	r3, pc, #240	; (adr r3, 8001a78 <calculate_three_phase_sine_wave_samples+0xa40>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fc9f 	bl	80002cc <__adddf3>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ec43 2b17 	vmov	d7, r2, r3
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	f011 f9e7 	bl	8012d70 <sin>
 80019a2:	ec53 2b10 	vmov	r2, r3, d0
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fe45 	bl	8000638 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019b6:	f7fe fc89 	bl	80002cc <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_11 * AMPLITUDE * sin(2 * PI * 11 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 80019c2:	4b42      	ldr	r3, [pc, #264]	; (8001acc <calculate_three_phase_sine_wave_samples+0xa94>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <calculate_three_phase_sine_wave_samples+0xa80>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	ee17 0a90 	vmov	r0, s15
 80019d6:	f7fe fdd7 	bl	8000588 <__aeabi_f2d>
 80019da:	4604      	mov	r4, r0
 80019dc:	460d      	mov	r5, r1
 80019de:	a330      	add	r3, pc, #192	; (adr r3, 8001aa0 <calculate_three_phase_sine_wave_samples+0xa68>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019e8:	f7fe fe26 	bl	8000638 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	a320      	add	r3, pc, #128	; (adr r3, 8001a78 <calculate_three_phase_sine_wave_samples+0xa40>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fc67 	bl	80002cc <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	ec43 2b17 	vmov	d7, r2, r3
 8001a06:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0a:	eef0 0a67 	vmov.f32	s1, s15
 8001a0e:	f011 f9af 	bl	8012d70 <sin>
 8001a12:	ec53 2b10 	vmov	r2, r3, d0
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe fe0d 	bl	8000638 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a26:	f7fe fc51 	bl	80002cc <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        sample_C += HARMONIC_13 * AMPLITUDE * sin(2 * PI * 13 * FREQUENCY * t + PHASE_SHIFT_240_DEG);
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <calculate_three_phase_sine_wave_samples+0xa98>)
 8001a34:	ed93 7a00 	vldr	s14, [r3]
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <calculate_three_phase_sine_wave_samples+0xa80>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	ee17 0a90 	vmov	r0, s15
 8001a46:	f7fe fd9f 	bl	8000588 <__aeabi_f2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	a316      	add	r3, pc, #88	; (adr r3, 8001aa8 <calculate_three_phase_sine_wave_samples+0xa70>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a58:	f7fe fdee 	bl	8000638 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	e036      	b.n	8001ad4 <calculate_three_phase_sine_wave_samples+0xa9c>
 8001a66:	bf00      	nop
 8001a68:	9999999a 	.word	0x9999999a
 8001a6c:	40c99999 	.word	0x40c99999
 8001a70:	5974e65c 	.word	0x5974e65c
 8001a74:	4073a28c 	.word	0x4073a28c
 8001a78:	37db38a1 	.word	0x37db38a1
 8001a7c:	4010c152 	.word	0x4010c152
 8001a80:	862f598b 	.word	0x862f598b
 8001a84:	408d73d2 	.word	0x408d73d2
 8001a88:	6fd21ff3 	.word	0x6fd21ff3
 8001a8c:	40988b2f 	.word	0x40988b2f
 8001a90:	ce464991 	.word	0xce464991
 8001a94:	40a12e3a 	.word	0x40a12e3a
 8001a98:	e4a38328 	.word	0xe4a38328
 8001a9c:	40a616dd 	.word	0x40a616dd
 8001aa0:	fb00bcbf 	.word	0xfb00bcbf
 8001aa4:	40aaff80 	.word	0x40aaff80
 8001aa8:	115df656 	.word	0x115df656
 8001aac:	40afe824 	.word	0x40afe824
 8001ab0:	c0040000 	.word	0xc0040000
 8001ab4:	40040000 	.word	0x40040000
 8001ab8:	20000894 	.word	0x20000894
 8001abc:	20000898 	.word	0x20000898
 8001ac0:	2000089c 	.word	0x2000089c
 8001ac4:	200008a0 	.word	0x200008a0
 8001ac8:	200008a4 	.word	0x200008a4
 8001acc:	200008a8 	.word	0x200008a8
 8001ad0:	200008ac 	.word	0x200008ac
 8001ad4:	a338      	add	r3, pc, #224	; (adr r3, 8001bb8 <calculate_three_phase_sine_wave_samples+0xb80>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fbf7 	bl	80002cc <__adddf3>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	ec43 2b17 	vmov	d7, r2, r3
 8001ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aea:	eef0 0a67 	vmov.f32	s1, s15
 8001aee:	f011 f93f 	bl	8012d70 <sin>
 8001af2:	ec53 2b10 	vmov	r2, r3, d0
 8001af6:	4620      	mov	r0, r4
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fd9d 	bl	8000638 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b06:	f7fe fbe1 	bl	80002cc <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]

        if (sample_C >= 2.5)
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <calculate_three_phase_sine_wave_samples+0xb78>)
 8001b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b1c:	f7ff f812 	bl	8000b44 <__aeabi_dcmpge>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <calculate_three_phase_sine_wave_samples+0xafa>
        {
        	sample_C= 2.5;
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <calculate_three_phase_sine_wave_samples+0xb78>)
 8001b2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001b30:	e00e      	b.n	8001b50 <calculate_three_phase_sine_wave_samples+0xb18>
        }
        else if (sample_C <= -2.5)
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <calculate_three_phase_sine_wave_samples+0xb7c>)
 8001b38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b3c:	f7fe fff8 	bl	8000b30 <__aeabi_dcmple>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <calculate_three_phase_sine_wave_samples+0xb18>
		{
			sample_C= -2.5;
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <calculate_three_phase_sine_wave_samples+0xb7c>)
 8001b4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}
        wave_C[i] = (uint16_t)((65536 / (2 * VREF)) * (sample_C + VREF));
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <calculate_three_phase_sine_wave_samples+0xb78>)
 8001b56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b5a:	f7fe fbb7 	bl	80002cc <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	a310      	add	r3, pc, #64	; (adr r3, 8001ba8 <calculate_three_phase_sine_wave_samples+0xb70>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd64 	bl	8000638 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	18d4      	adds	r4, r2, r3
 8001b80:	f7ff f832 	bl	8000be8 <__aeabi_d2uiz>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	8023      	strh	r3, [r4, #0]
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001b96:	f6ff aa59 	blt.w	800104c <calculate_three_phase_sine_wave_samples+0x14>
    }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	; 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	9999999a 	.word	0x9999999a
 8001bac:	40c99999 	.word	0x40c99999
 8001bb0:	40040000 	.word	0x40040000
 8001bb4:	c0040000 	.word	0xc0040000
 8001bb8:	37db38a1 	.word	0x37db38a1
 8001bbc:	4010c152 	.word	0x4010c152

08001bc0 <select_test_scenario>:

////// Function to select the test scenario and calculate its samples
void select_test_scenario(int scenario_number) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    switch (scenario_number) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	f200 82ab 	bhi.w	8002128 <select_test_scenario+0x568>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <select_test_scenario+0x18>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001bf1 	.word	0x08001bf1
 8001bdc:	08001c5f 	.word	0x08001c5f
 8001be0:	08001ccd 	.word	0x08001ccd
 8001be4:	08001d3b 	.word	0x08001d3b
 8001be8:	08001ee5 	.word	0x08001ee5
 8001bec:	08002007 	.word	0x08002007
		case 1:  // Stroom scenario 1
			AMPLITUDE = (stroom_s1 / 10000) *sqrt(2.0);
 8001bf0:	4b9d      	ldr	r3, [pc, #628]	; (8001e68 <select_test_scenario+0x2a8>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001e6c <select_test_scenario+0x2ac>
 8001bfa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bfe:	ee16 0a90 	vmov	r0, s13
 8001c02:	f7fe fcc1 	bl	8000588 <__aeabi_f2d>
 8001c06:	a396      	add	r3, pc, #600	; (adr r3, 8001e60 <select_test_scenario+0x2a0>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fd14 	bl	8000638 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7ff f806 	bl	8000c28 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a94      	ldr	r2, [pc, #592]	; (8001e70 <select_test_scenario+0x2b0>)
 8001c20:	6013      	str	r3, [r2, #0]
			HARMONIC_3 = 0; HARMONIC_5 = 0; HARMONIC_7 = 0; HARMONIC_9 = 0;
 8001c22:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <select_test_scenario+0x2b4>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	4b93      	ldr	r3, [pc, #588]	; (8001e78 <select_test_scenario+0x2b8>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <select_test_scenario+0x2bc>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <select_test_scenario+0x2c0>)
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
			HARMONIC_11 = 0; HARMONIC_13 = 0;
 8001c42:	4b90      	ldr	r3, [pc, #576]	; (8001e84 <select_test_scenario+0x2c4>)
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <select_test_scenario+0x2c8>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
			calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[0], sine_wave_B_scenario[0], sine_wave_C_scenario[0]);
 8001c52:	4a8e      	ldr	r2, [pc, #568]	; (8001e8c <select_test_scenario+0x2cc>)
 8001c54:	498e      	ldr	r1, [pc, #568]	; (8001e90 <select_test_scenario+0x2d0>)
 8001c56:	488f      	ldr	r0, [pc, #572]	; (8001e94 <select_test_scenario+0x2d4>)
 8001c58:	f7ff f9ee 	bl	8001038 <calculate_three_phase_sine_wave_samples>
			break;
 8001c5c:	e264      	b.n	8002128 <select_test_scenario+0x568>
		case 2:  // Stroom scenario 2
			AMPLITUDE = (stroom_s2 / 10000) *sqrt(2.0);
 8001c5e:	4b8e      	ldr	r3, [pc, #568]	; (8001e98 <select_test_scenario+0x2d8>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001e6c <select_test_scenario+0x2ac>
 8001c68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c6c:	ee16 0a90 	vmov	r0, s13
 8001c70:	f7fe fc8a 	bl	8000588 <__aeabi_f2d>
 8001c74:	a37a      	add	r3, pc, #488	; (adr r3, 8001e60 <select_test_scenario+0x2a0>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fcdd 	bl	8000638 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe ffcf 	bl	8000c28 <__aeabi_d2f>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <select_test_scenario+0x2b0>)
 8001c8e:	6013      	str	r3, [r2, #0]
			HARMONIC_3 = 0; HARMONIC_5 = 0; HARMONIC_7 = 0; HARMONIC_9 = 0;
 8001c90:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <select_test_scenario+0x2b4>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <select_test_scenario+0x2b8>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <select_test_scenario+0x2bc>)
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <select_test_scenario+0x2c0>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
			HARMONIC_11 = 0; HARMONIC_13 = 0;
 8001cb0:	4b74      	ldr	r3, [pc, #464]	; (8001e84 <select_test_scenario+0x2c4>)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <select_test_scenario+0x2c8>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
			calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[1], sine_wave_B_scenario[1], sine_wave_C_scenario[1]);
 8001cc0:	4a76      	ldr	r2, [pc, #472]	; (8001e9c <select_test_scenario+0x2dc>)
 8001cc2:	4977      	ldr	r1, [pc, #476]	; (8001ea0 <select_test_scenario+0x2e0>)
 8001cc4:	4877      	ldr	r0, [pc, #476]	; (8001ea4 <select_test_scenario+0x2e4>)
 8001cc6:	f7ff f9b7 	bl	8001038 <calculate_three_phase_sine_wave_samples>
			break;
 8001cca:	e22d      	b.n	8002128 <select_test_scenario+0x568>
        case 3:  // Stroom scenario 3
            AMPLITUDE = (stroom_s3 / 10000) *sqrt(2.0);
 8001ccc:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <select_test_scenario+0x2e8>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001e6c <select_test_scenario+0x2ac>
 8001cd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cda:	ee16 0a90 	vmov	r0, s13
 8001cde:	f7fe fc53 	bl	8000588 <__aeabi_f2d>
 8001ce2:	a35f      	add	r3, pc, #380	; (adr r3, 8001e60 <select_test_scenario+0x2a0>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fca6 	bl	8000638 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ff98 	bl	8000c28 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a5d      	ldr	r2, [pc, #372]	; (8001e70 <select_test_scenario+0x2b0>)
 8001cfc:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = 0; HARMONIC_5 = 0; HARMONIC_7 = 0; HARMONIC_9 = 0;
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <select_test_scenario+0x2b4>)
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	4b5c      	ldr	r3, [pc, #368]	; (8001e78 <select_test_scenario+0x2b8>)
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <select_test_scenario+0x2bc>)
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <select_test_scenario+0x2c0>)
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
            HARMONIC_11 = 0; HARMONIC_13 = 0;
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <select_test_scenario+0x2c4>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <select_test_scenario+0x2c8>)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[2], sine_wave_B_scenario[2], sine_wave_C_scenario[2]);
 8001d2e:	4a5f      	ldr	r2, [pc, #380]	; (8001eac <select_test_scenario+0x2ec>)
 8001d30:	495f      	ldr	r1, [pc, #380]	; (8001eb0 <select_test_scenario+0x2f0>)
 8001d32:	4860      	ldr	r0, [pc, #384]	; (8001eb4 <select_test_scenario+0x2f4>)
 8001d34:	f7ff f980 	bl	8001038 <calculate_three_phase_sine_wave_samples>
            break;
 8001d38:	e1f6      	b.n	8002128 <select_test_scenario+0x568>
        case 4:  // THD scenario 1
            AMPLITUDE = (thd_s1_rms / 10000) *sqrt(2.0);
 8001d3a:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <select_test_scenario+0x2f8>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001e6c <select_test_scenario+0x2ac>
 8001d44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d48:	ee16 0a90 	vmov	r0, s13
 8001d4c:	f7fe fc1c 	bl	8000588 <__aeabi_f2d>
 8001d50:	a343      	add	r3, pc, #268	; (adr r3, 8001e60 <select_test_scenario+0x2a0>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fc6f 	bl	8000638 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe ff61 	bl	8000c28 <__aeabi_d2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <select_test_scenario+0x2b0>)
 8001d6a:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = thd_s1_3h / 100.0;
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <select_test_scenario+0x2fc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbf7 	bl	8000564 <__aeabi_i2d>
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <select_test_scenario+0x300>)
 8001d7c:	f7fe fd86 	bl	800088c <__aeabi_ddiv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe ff4e 	bl	8000c28 <__aeabi_d2f>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a39      	ldr	r2, [pc, #228]	; (8001e74 <select_test_scenario+0x2b4>)
 8001d90:	6013      	str	r3, [r2, #0]
            HARMONIC_5 = thd_s1_5h / 100.0;
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <select_test_scenario+0x304>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbe4 	bl	8000564 <__aeabi_i2d>
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <select_test_scenario+0x300>)
 8001da2:	f7fe fd73 	bl	800088c <__aeabi_ddiv>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe ff3b 	bl	8000c28 <__aeabi_d2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a30      	ldr	r2, [pc, #192]	; (8001e78 <select_test_scenario+0x2b8>)
 8001db6:	6013      	str	r3, [r2, #0]
            HARMONIC_7 = thd_s1_7h / 100.0;
 8001db8:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <select_test_scenario+0x308>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbd1 	bl	8000564 <__aeabi_i2d>
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <select_test_scenario+0x300>)
 8001dc8:	f7fe fd60 	bl	800088c <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe ff28 	bl	8000c28 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <select_test_scenario+0x2bc>)
 8001ddc:	6013      	str	r3, [r2, #0]
            HARMONIC_9 = thd_s1_9h / 100.0;
 8001dde:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <select_test_scenario+0x30c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fbbe 	bl	8000564 <__aeabi_i2d>
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <select_test_scenario+0x300>)
 8001dee:	f7fe fd4d 	bl	800088c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe ff15 	bl	8000c28 <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <select_test_scenario+0x2c0>)
 8001e02:	6013      	str	r3, [r2, #0]
            HARMONIC_11 = thd_s1_11h / 100.0;
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <select_test_scenario+0x310>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fbab 	bl	8000564 <__aeabi_i2d>
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <select_test_scenario+0x300>)
 8001e14:	f7fe fd3a 	bl	800088c <__aeabi_ddiv>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe ff02 	bl	8000c28 <__aeabi_d2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <select_test_scenario+0x2c4>)
 8001e28:	6013      	str	r3, [r2, #0]
            HARMONIC_13 = thd_s1_13h / 100.0;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <select_test_scenario+0x314>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb98 	bl	8000564 <__aeabi_i2d>
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <select_test_scenario+0x300>)
 8001e3a:	f7fe fd27 	bl	800088c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe feef 	bl	8000c28 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <select_test_scenario+0x2c8>)
 8001e4e:	6013      	str	r3, [r2, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[3], sine_wave_B_scenario[3], sine_wave_C_scenario[3]);
 8001e50:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <select_test_scenario+0x318>)
 8001e52:	4922      	ldr	r1, [pc, #136]	; (8001edc <select_test_scenario+0x31c>)
 8001e54:	4822      	ldr	r0, [pc, #136]	; (8001ee0 <select_test_scenario+0x320>)
 8001e56:	f7ff f8ef 	bl	8001038 <calculate_three_phase_sine_wave_samples>
            break;
 8001e5a:	e165      	b.n	8002128 <select_test_scenario+0x568>
 8001e5c:	f3af 8000 	nop.w
 8001e60:	667f3bcd 	.word	0x667f3bcd
 8001e64:	3ff6a09e 	.word	0x3ff6a09e
 8001e68:	20008fbc 	.word	0x20008fbc
 8001e6c:	461c4000 	.word	0x461c4000
 8001e70:	20000894 	.word	0x20000894
 8001e74:	20000898 	.word	0x20000898
 8001e78:	2000089c 	.word	0x2000089c
 8001e7c:	200008a0 	.word	0x200008a0
 8001e80:	200008a4 	.word	0x200008a4
 8001e84:	200008a8 	.word	0x200008a8
 8001e88:	200008ac 	.word	0x200008ac
 8001e8c:	200062b0 	.word	0x200062b0
 8001e90:	200035b0 	.word	0x200035b0
 8001e94:	200008b0 	.word	0x200008b0
 8001e98:	20008fc0 	.word	0x20008fc0
 8001e9c:	20006a30 	.word	0x20006a30
 8001ea0:	20003d30 	.word	0x20003d30
 8001ea4:	20001030 	.word	0x20001030
 8001ea8:	20008fc4 	.word	0x20008fc4
 8001eac:	200071b0 	.word	0x200071b0
 8001eb0:	200044b0 	.word	0x200044b0
 8001eb4:	200017b0 	.word	0x200017b0
 8001eb8:	20008fc8 	.word	0x20008fc8
 8001ebc:	20008fd4 	.word	0x20008fd4
 8001ec0:	40590000 	.word	0x40590000
 8001ec4:	20008fd8 	.word	0x20008fd8
 8001ec8:	20008fdc 	.word	0x20008fdc
 8001ecc:	20008fe0 	.word	0x20008fe0
 8001ed0:	20008fe4 	.word	0x20008fe4
 8001ed4:	20008fe8 	.word	0x20008fe8
 8001ed8:	20007930 	.word	0x20007930
 8001edc:	20004c30 	.word	0x20004c30
 8001ee0:	20001f30 	.word	0x20001f30
        case 5:  // THD scenario 2
            AMPLITUDE = (thd_s2_rms / 10000) *sqrt(2.0);
 8001ee4:	4b94      	ldr	r3, [pc, #592]	; (8002138 <select_test_scenario+0x578>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800213c <select_test_scenario+0x57c>
 8001eee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ef2:	ee16 0a90 	vmov	r0, s13
 8001ef6:	f7fe fb47 	bl	8000588 <__aeabi_f2d>
 8001efa:	a38d      	add	r3, pc, #564	; (adr r3, 8002130 <select_test_scenario+0x570>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fb9a 	bl	8000638 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fe8c 	bl	8000c28 <__aeabi_d2f>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a8b      	ldr	r2, [pc, #556]	; (8002140 <select_test_scenario+0x580>)
 8001f14:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = thd_s2_3h / 100.0;
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <select_test_scenario+0x584>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fb22 	bl	8000564 <__aeabi_i2d>
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	4b88      	ldr	r3, [pc, #544]	; (8002148 <select_test_scenario+0x588>)
 8001f26:	f7fe fcb1 	bl	800088c <__aeabi_ddiv>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f7fe fe79 	bl	8000c28 <__aeabi_d2f>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a84      	ldr	r2, [pc, #528]	; (800214c <select_test_scenario+0x58c>)
 8001f3a:	6013      	str	r3, [r2, #0]
            HARMONIC_5 = thd_s2_5h / 100.0;
 8001f3c:	4b84      	ldr	r3, [pc, #528]	; (8002150 <select_test_scenario+0x590>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fb0f 	bl	8000564 <__aeabi_i2d>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <select_test_scenario+0x588>)
 8001f4c:	f7fe fc9e 	bl	800088c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe66 	bl	8000c28 <__aeabi_d2f>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4a7d      	ldr	r2, [pc, #500]	; (8002154 <select_test_scenario+0x594>)
 8001f60:	6013      	str	r3, [r2, #0]
            HARMONIC_7 = thd_s2_7h / 100.0;
 8001f62:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <select_test_scenario+0x598>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fafc 	bl	8000564 <__aeabi_i2d>
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b75      	ldr	r3, [pc, #468]	; (8002148 <select_test_scenario+0x588>)
 8001f72:	f7fe fc8b 	bl	800088c <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fe53 	bl	8000c28 <__aeabi_d2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a75      	ldr	r2, [pc, #468]	; (800215c <select_test_scenario+0x59c>)
 8001f86:	6013      	str	r3, [r2, #0]
            HARMONIC_9 = thd_s2_9h / 100.0;
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <select_test_scenario+0x5a0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fae9 	bl	8000564 <__aeabi_i2d>
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <select_test_scenario+0x588>)
 8001f98:	f7fe fc78 	bl	800088c <__aeabi_ddiv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fe40 	bl	8000c28 <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <select_test_scenario+0x5a4>)
 8001fac:	6013      	str	r3, [r2, #0]
            HARMONIC_11 = thd_s2_11h / 100.0;
 8001fae:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <select_test_scenario+0x5a8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fad6 	bl	8000564 <__aeabi_i2d>
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b62      	ldr	r3, [pc, #392]	; (8002148 <select_test_scenario+0x588>)
 8001fbe:	f7fe fc65 	bl	800088c <__aeabi_ddiv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fe2d 	bl	8000c28 <__aeabi_d2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a66      	ldr	r2, [pc, #408]	; (800216c <select_test_scenario+0x5ac>)
 8001fd2:	6013      	str	r3, [r2, #0]
            HARMONIC_13 = thd_s2_13h / 100.0;
 8001fd4:	4b66      	ldr	r3, [pc, #408]	; (8002170 <select_test_scenario+0x5b0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fac3 	bl	8000564 <__aeabi_i2d>
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b59      	ldr	r3, [pc, #356]	; (8002148 <select_test_scenario+0x588>)
 8001fe4:	f7fe fc52 	bl	800088c <__aeabi_ddiv>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fe1a 	bl	8000c28 <__aeabi_d2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a5f      	ldr	r2, [pc, #380]	; (8002174 <select_test_scenario+0x5b4>)
 8001ff8:	6013      	str	r3, [r2, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[4], sine_wave_B_scenario[4], sine_wave_C_scenario[4]);
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	; (8002178 <select_test_scenario+0x5b8>)
 8001ffc:	495f      	ldr	r1, [pc, #380]	; (800217c <select_test_scenario+0x5bc>)
 8001ffe:	4860      	ldr	r0, [pc, #384]	; (8002180 <select_test_scenario+0x5c0>)
 8002000:	f7ff f81a 	bl	8001038 <calculate_three_phase_sine_wave_samples>
            break;
 8002004:	e090      	b.n	8002128 <select_test_scenario+0x568>
        case 6:  // THD scenario 3
            AMPLITUDE = (thd_s3_rms / 10000) *sqrt(2.0);
 8002006:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <select_test_scenario+0x5c4>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800213c <select_test_scenario+0x57c>
 8002010:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002014:	ee16 0a90 	vmov	r0, s13
 8002018:	f7fe fab6 	bl	8000588 <__aeabi_f2d>
 800201c:	a344      	add	r3, pc, #272	; (adr r3, 8002130 <select_test_scenario+0x570>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fb09 	bl	8000638 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fdfb 	bl	8000c28 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	4a42      	ldr	r2, [pc, #264]	; (8002140 <select_test_scenario+0x580>)
 8002036:	6013      	str	r3, [r2, #0]
            HARMONIC_3 = thd_s3_3h / 100.0;
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <select_test_scenario+0x5c8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa91 	bl	8000564 <__aeabi_i2d>
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b40      	ldr	r3, [pc, #256]	; (8002148 <select_test_scenario+0x588>)
 8002048:	f7fe fc20 	bl	800088c <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fde8 	bl	8000c28 <__aeabi_d2f>
 8002058:	4603      	mov	r3, r0
 800205a:	4a3c      	ldr	r2, [pc, #240]	; (800214c <select_test_scenario+0x58c>)
 800205c:	6013      	str	r3, [r2, #0]
            HARMONIC_5 = thd_s3_5h / 100.0;
 800205e:	4b4b      	ldr	r3, [pc, #300]	; (800218c <select_test_scenario+0x5cc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa7e 	bl	8000564 <__aeabi_i2d>
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <select_test_scenario+0x588>)
 800206e:	f7fe fc0d 	bl	800088c <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fdd5 	bl	8000c28 <__aeabi_d2f>
 800207e:	4603      	mov	r3, r0
 8002080:	4a34      	ldr	r2, [pc, #208]	; (8002154 <select_test_scenario+0x594>)
 8002082:	6013      	str	r3, [r2, #0]
            HARMONIC_7 = thd_s3_7h / 100.0;
 8002084:	4b42      	ldr	r3, [pc, #264]	; (8002190 <select_test_scenario+0x5d0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa6b 	bl	8000564 <__aeabi_i2d>
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <select_test_scenario+0x588>)
 8002094:	f7fe fbfa 	bl	800088c <__aeabi_ddiv>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fdc2 	bl	8000c28 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4a2d      	ldr	r2, [pc, #180]	; (800215c <select_test_scenario+0x59c>)
 80020a8:	6013      	str	r3, [r2, #0]
            HARMONIC_9 = thd_s3_9h / 100.0;
 80020aa:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <select_test_scenario+0x5d4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa58 	bl	8000564 <__aeabi_i2d>
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <select_test_scenario+0x588>)
 80020ba:	f7fe fbe7 	bl	800088c <__aeabi_ddiv>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fdaf 	bl	8000c28 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <select_test_scenario+0x5a4>)
 80020ce:	6013      	str	r3, [r2, #0]
            HARMONIC_11 = thd_s3_11h / 100.0;
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <select_test_scenario+0x5d8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa45 	bl	8000564 <__aeabi_i2d>
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <select_test_scenario+0x588>)
 80020e0:	f7fe fbd4 	bl	800088c <__aeabi_ddiv>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7fe fd9c 	bl	8000c28 <__aeabi_d2f>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <select_test_scenario+0x5ac>)
 80020f4:	6013      	str	r3, [r2, #0]
            HARMONIC_13 = thd_s3_13h / 100.0;
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <select_test_scenario+0x5dc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa32 	bl	8000564 <__aeabi_i2d>
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <select_test_scenario+0x588>)
 8002106:	f7fe fbc1 	bl	800088c <__aeabi_ddiv>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd89 	bl	8000c28 <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
 8002118:	4a16      	ldr	r2, [pc, #88]	; (8002174 <select_test_scenario+0x5b4>)
 800211a:	6013      	str	r3, [r2, #0]
            calculate_three_phase_sine_wave_samples(sine_wave_A_scenario[5], sine_wave_B_scenario[5], sine_wave_C_scenario[5]);
 800211c:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <select_test_scenario+0x5e0>)
 800211e:	4921      	ldr	r1, [pc, #132]	; (80021a4 <select_test_scenario+0x5e4>)
 8002120:	4821      	ldr	r0, [pc, #132]	; (80021a8 <select_test_scenario+0x5e8>)
 8002122:	f7fe ff89 	bl	8001038 <calculate_three_phase_sine_wave_samples>
            break;
 8002126:	bf00      	nop
    }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	667f3bcd 	.word	0x667f3bcd
 8002134:	3ff6a09e 	.word	0x3ff6a09e
 8002138:	20008fcc 	.word	0x20008fcc
 800213c:	461c4000 	.word	0x461c4000
 8002140:	20000894 	.word	0x20000894
 8002144:	20008fec 	.word	0x20008fec
 8002148:	40590000 	.word	0x40590000
 800214c:	20000898 	.word	0x20000898
 8002150:	20008ff0 	.word	0x20008ff0
 8002154:	2000089c 	.word	0x2000089c
 8002158:	20008ff4 	.word	0x20008ff4
 800215c:	200008a0 	.word	0x200008a0
 8002160:	20008ff8 	.word	0x20008ff8
 8002164:	200008a4 	.word	0x200008a4
 8002168:	20008ffc 	.word	0x20008ffc
 800216c:	200008a8 	.word	0x200008a8
 8002170:	20009000 	.word	0x20009000
 8002174:	200008ac 	.word	0x200008ac
 8002178:	200080b0 	.word	0x200080b0
 800217c:	200053b0 	.word	0x200053b0
 8002180:	200026b0 	.word	0x200026b0
 8002184:	20008fd0 	.word	0x20008fd0
 8002188:	20009004 	.word	0x20009004
 800218c:	20009008 	.word	0x20009008
 8002190:	2000900c 	.word	0x2000900c
 8002194:	20009010 	.word	0x20009010
 8002198:	20009014 	.word	0x20009014
 800219c:	20009018 	.word	0x20009018
 80021a0:	20008830 	.word	0x20008830
 80021a4:	20005b30 	.word	0x20005b30
 80021a8:	20002e30 	.word	0x20002e30

080021ac <DAC8564_Write>:


void DAC8564_Write(uint16_t channel, uint16_t value) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	80fb      	strh	r3, [r7, #6]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = DAC8564_SEQUENTIANALY_WRITE_UPDATE | (channel << 1);  // Set command and channel
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	733b      	strb	r3, [r7, #12]
    data[1] = (value >> 8) & 0xFF;  // MSB
 80021cc:	88bb      	ldrh	r3, [r7, #4]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	737b      	strb	r3, [r7, #13]
    data[2] = value & 0xFF;  // LSB
 80021d6:	88bb      	ldrh	r3, [r7, #4]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_RESET);  // CS Low
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e2:	480a      	ldr	r0, [pc, #40]	; (800220c <DAC8564_Write+0x60>)
 80021e4:	f001 fc40 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, 3, SPI_TIMEOUT);
 80021e8:	f107 010c 	add.w	r1, r7, #12
 80021ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f0:	2203      	movs	r2, #3
 80021f2:	4807      	ldr	r0, [pc, #28]	; (8002210 <DAC8564_Write+0x64>)
 80021f4:	f004 fc8f 	bl	8006b16 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);  // CS High
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fe:	4803      	ldr	r0, [pc, #12]	; (800220c <DAC8564_Write+0x60>)
 8002200:	f001 fc32 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40020400 	.word	0x40020400
 8002210:	2000034c 	.word	0x2000034c

08002214 <DAC8564_Wake_up>:


void DAC8564_Wake_up(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

	uint16_t nul_volt = ((65536 / (2 * VREF)) * (0 + VREF));
 800221a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221e:	80fb      	strh	r3, [r7, #6]
	DAC8564_Write(0, nul_volt);
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	4619      	mov	r1, r3
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff ffc1 	bl	80021ac <DAC8564_Write>
	DAC8564_Write(1, nul_volt);
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	4619      	mov	r1, r3
 800222e:	2001      	movs	r0, #1
 8002230:	f7ff ffbc 	bl	80021ac <DAC8564_Write>
	DAC8564_Write(2, nul_volt);
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	4619      	mov	r1, r3
 8002238:	2002      	movs	r0, #2
 800223a:	f7ff ffb7 	bl	80021ac <DAC8564_Write>

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	f040 80a2 	bne.w	80023a0 <HAL_TIM_PeriodElapsedCallback+0x158>

     if ((huidig_status == STATUS_TEST_GESTART && usb_busy == false)  || huidig_status == STATUS_TEST_GEPAUZEERD  || huidig_status == STATUS_TEST_VOLTOOID)
 800225c:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d107      	bne.n	8002274 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8002264:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f083 0301 	eor.w	r3, r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d004      	beq.n	8002286 <HAL_TIM_PeriodElapsedCallback+0x3e>
 800227c:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b06      	cmp	r3, #6
 8002282:	f040 808d 	bne.w	80023a0 <HAL_TIM_PeriodElapsedCallback+0x158>
		{
			if (!(huidig_status == STATUS_TEST_GEPAUZEERD)) {
 8002286:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d04e      	beq.n	800232c <HAL_TIM_PeriodElapsedCallback+0xe4>



						Timer_counter++;
 800228e:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a46      	ldr	r2, [pc, #280]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002296:	6013      	str	r3, [r2, #0]
						if (Timer_counter== 48000) {
 8002298:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d146      	bne.n	8002332 <HAL_TIM_PeriodElapsedCallback+0xea>
								seconds_elapsed++;
 80022a4:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80022ac:	6013      	str	r3, [r2, #0]
								Timer_counter=0;
 80022ae:	4b40      	ldr	r3, [pc, #256]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
								// Wissel scenario na 12 seconden
								if (seconds_elapsed >=12) {
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b0b      	cmp	r3, #11
 80022ba:	d93a      	bls.n	8002332 <HAL_TIM_PeriodElapsedCallback+0xea>
									seconds_elapsed = 0;
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

				//    	             Ga door naar het volgende scenario
									current_scenario++;
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a3b      	ldr	r2, [pc, #236]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022ca:	6013      	str	r3, [r2, #0]
									if (current_scenario > 6) {
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b06      	cmp	r3, #6
 80022d2:	dd06      	ble.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x9a>
										update_status(STATUS_TEST_VOLTOOID);
 80022d4:	2006      	movs	r0, #6
 80022d6:	f000 f90f 	bl	80024f8 <update_status>
										current_scenario = 6;
 80022da:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022dc:	2206      	movs	r2, #6
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e027      	b.n	8002332 <HAL_TIM_PeriodElapsedCallback+0xea>

									}else {

										// Wissel de actieve buffers naar de nieuwe berekende golfvormen
										current_sine_wave_A = sine_wave_A_scenario[current_scenario - 1];
 80022e2:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1e5a      	subs	r2, r3, #1
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	01db      	lsls	r3, r3, #7
 80022f0:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80022f2:	4413      	add	r3, r2
 80022f4:	4a32      	ldr	r2, [pc, #200]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80022f6:	6013      	str	r3, [r2, #0]
										current_sine_wave_B = sine_wave_B_scenario[current_scenario - 1];
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	01db      	lsls	r3, r3, #7
 8002306:	4a2f      	ldr	r2, [pc, #188]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002308:	4413      	add	r3, r2
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800230c:	6013      	str	r3, [r2, #0]
										current_sine_wave_C = sine_wave_C_scenario[current_scenario - 1];
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	01db      	lsls	r3, r3, #7
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800231e:	4413      	add	r3, r2
 8002320:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002322:	6013      	str	r3, [r2, #0]
										sample_index =0;
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002326:	2200      	movs	r2, #0
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	e002      	b.n	8002332 <HAL_TIM_PeriodElapsedCallback+0xea>


						}
				}else{

					Timer_counter=0;
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
				}

				DAC8564_Write(0, current_sine_wave_A[sample_index]);  // Phase A on DAC A
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff ff31 	bl	80021ac <DAC8564_Write>
				DAC8564_Write(1, current_sine_wave_B[sample_index]);  // Phase B on DAC B
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	2001      	movs	r0, #1
 800235e:	f7ff ff25 	bl	80021ac <DAC8564_Write>
				DAC8564_Write(2, current_sine_wave_C[sample_index]);  // Phase C on DAC C
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	2002      	movs	r0, #2
 8002376:	f7ff ff19 	bl	80021ac <DAC8564_Write>

				// Verhoog de sample index
				sample_index = (sample_index + 1) % NUM_SAMPLES;
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002384:	fb83 1302 	smull	r1, r3, r3, r2
 8002388:	4413      	add	r3, r2
 800238a:	1259      	asrs	r1, r3, #9
 800238c:	17d3      	asrs	r3, r2, #31
 800238e:	1ac9      	subs	r1, r1, r3
 8002390:	460b      	mov	r3, r1
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a5b      	subs	r3, r3, r1
 8002396:	019b      	lsls	r3, r3, #6
 8002398:	1ad1      	subs	r1, r2, r3
 800239a:	b28a      	uxth	r2, r1
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800239e:	801a      	strh	r2, [r3, #0]



		}
    }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000901c 	.word	0x2000901c
 80023ac:	2000901d 	.word	0x2000901d
 80023b0:	20000890 	.word	0x20000890
 80023b4:	2000088c 	.word	0x2000088c
 80023b8:	20000000 	.word	0x20000000
 80023bc:	200008b0 	.word	0x200008b0
 80023c0:	20008fb0 	.word	0x20008fb0
 80023c4:	200035b0 	.word	0x200035b0
 80023c8:	20008fb4 	.word	0x20008fb4
 80023cc:	200062b0 	.word	0x200062b0
 80023d0:	20008fb8 	.word	0x20008fb8
 80023d4:	20000888 	.word	0x20000888
 80023d8:	88888889 	.word	0x88888889

080023dc <SET_refference>:

void SET_refference() {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
    uint8_t data[3];
    data[0] = 0x01;
 80023e2:	2301      	movs	r3, #1
 80023e4:	713b      	strb	r3, [r7, #4]
    data[1] = 0x10;
 80023e6:	2310      	movs	r3, #16
 80023e8:	717b      	strb	r3, [r7, #5]
    data[2] = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f4:	4809      	ldr	r0, [pc, #36]	; (800241c <SET_refference+0x40>)
 80023f6:	f001 fb37 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, 3, SPI_TIMEOUT);
 80023fa:	1d39      	adds	r1, r7, #4
 80023fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002400:	2203      	movs	r2, #3
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <SET_refference+0x44>)
 8002404:	f004 fb87 	bl	8006b16 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240e:	4803      	ldr	r0, [pc, #12]	; (800241c <SET_refference+0x40>)
 8002410:	f001 fb2a 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40020400 	.word	0x40020400
 8002420:	2000034c 	.word	0x2000034c

08002424 <zet_blauw_licht_aan>:
/* DAC CODE END*/


/*  Functies voor user interface */
/* Userinterface CODE BEGIN*/
void zet_blauw_licht_aan() {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_SET);
 8002428:	2201      	movs	r2, #1
 800242a:	2102      	movs	r1, #2
 800242c:	4807      	ldr	r0, [pc, #28]	; (800244c <zet_blauw_licht_aan+0x28>)
 800242e:	f001 fb1b 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	2104      	movs	r1, #4
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <zet_blauw_licht_aan+0x28>)
 8002438:	f001 fb16 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	2108      	movs	r1, #8
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <zet_blauw_licht_aan+0x28>)
 8002442:	f001 fb11 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021400 	.word	0x40021400

08002450 <zet_groen_licht_aan>:

void zet_groen_licht_aan() {
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	2102      	movs	r1, #2
 8002458:	4807      	ldr	r0, [pc, #28]	; (8002478 <zet_groen_licht_aan+0x28>)
 800245a:	f001 fb05 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_SET);
 800245e:	2201      	movs	r2, #1
 8002460:	2104      	movs	r1, #4
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <zet_groen_licht_aan+0x28>)
 8002464:	f001 fb00 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	2108      	movs	r1, #8
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <zet_groen_licht_aan+0x28>)
 800246e:	f001 fafb 	bl	8003a68 <HAL_GPIO_WritePin>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021400 	.word	0x40021400

0800247c <zet_rood_licht_aan>:

void zet_rood_licht_aan() {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	2102      	movs	r1, #2
 8002484:	4807      	ldr	r0, [pc, #28]	; (80024a4 <zet_rood_licht_aan+0x28>)
 8002486:	f001 faef 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2104      	movs	r1, #4
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <zet_rood_licht_aan+0x28>)
 8002490:	f001 faea 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2108      	movs	r1, #8
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <zet_rood_licht_aan+0x28>)
 800249a:	f001 fae5 	bl	8003a68 <HAL_GPIO_WritePin>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021400 	.word	0x40021400

080024a8 <groen_knipperend>:

void groen_knipperend() {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2102      	movs	r1, #2
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <groen_knipperend+0x24>)
 80024b2:	f001 fad9 	bl	8003a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2108      	movs	r1, #8
 80024ba:	4804      	ldr	r0, [pc, #16]	; (80024cc <groen_knipperend+0x24>)
 80024bc:	f001 fad4 	bl	8003a68 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GROENE_LED_PORT, GROENE_LED_PIN);
 80024c0:	2104      	movs	r1, #4
 80024c2:	4802      	ldr	r0, [pc, #8]	; (80024cc <groen_knipperend+0x24>)
 80024c4:	f001 fae9 	bl	8003a9a <HAL_GPIO_TogglePin>


}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021400 	.word	0x40021400

080024d0 <blauw_knipperend>:

void blauw_knipperend() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GROENE_LED_PORT, GROENE_LED_PIN, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2104      	movs	r1, #4
 80024d8:	4806      	ldr	r0, [pc, #24]	; (80024f4 <blauw_knipperend+0x24>)
 80024da:	f001 fac5 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RODE_LED_PORT, RODE_LED_PIN, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	2108      	movs	r1, #8
 80024e2:	4804      	ldr	r0, [pc, #16]	; (80024f4 <blauw_knipperend+0x24>)
 80024e4:	f001 fac0 	bl	8003a68 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(BLAUWE_LED_PORT, BLAUWE_LED_PIN);
 80024e8:	2102      	movs	r1, #2
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <blauw_knipperend+0x24>)
 80024ec:	f001 fad5 	bl	8003a9a <HAL_GPIO_TogglePin>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021400 	.word	0x40021400

080024f8 <update_status>:

void update_status(TestStatus nieuwe_status) {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
    huidig_status = nieuwe_status;
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <update_status+0x1c>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	7013      	strb	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	2000901c 	.word	0x2000901c

08002518 <send_active_scenario_to_gui>:
/* Userinterface CODE END*/



/* USB_GUI_ CODE BEGIN*/
void send_active_scenario_to_gui(int scenario_number) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b092      	sub	sp, #72	; 0x48
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    char scenario_message[64];
    sprintf(scenario_message, "ACTIEF_SCENARIO=%d\n", scenario_number);
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4906      	ldr	r1, [pc, #24]	; (8002540 <send_active_scenario_to_gui+0x28>)
 8002528:	4618      	mov	r0, r3
 800252a:	f00d f883 	bl	800f634 <siprintf>
    send_status_to_gui(scenario_message);  // Verstuur het scenario
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f806 	bl	8002544 <send_status_to_gui>

}
 8002538:	bf00      	nop
 800253a:	3748      	adds	r7, #72	; 0x48
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	08013e4c 	.word	0x08013e4c

08002544 <send_status_to_gui>:


void send_status_to_gui(char* status_message) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t *)status_message, strlen(status_message));
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7fd fe5f 	bl	8000210 <strlen>
 8002552:	4603      	mov	r3, r0
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f00b ff2e 	bl	800e3b8 <CDC_Transmit_FS>

}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <receive_settings_and_update_status>:




// Simuleer de ontvangst van instellingen en stuur statusupdates naar de GUI
void receive_settings_and_update_status(void) {
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
    // Status wachten op instellingen
	update_status (STATUS_WACHTEN_OP_INSTELLINGEN);
 8002568:	2001      	movs	r0, #1
 800256a:	f7ff ffc5 	bl	80024f8 <update_status>

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <CheckReceivedData>:

void CheckReceivedData(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  // Check of data is ontvangen.
  if (receivedLength > 0) {
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <CheckReceivedData+0x28>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <CheckReceivedData+0x24>
    parse_received_data(receivedData);  // Verwerk de ontvangen gegevens
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <CheckReceivedData+0x2c>)
 8002582:	f000 f80f 	bl	80025a4 <parse_received_data>
    memset(receivedData, 0, BUFFER_SIZE);  // Clear de buffer na verwerking
 8002586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258a:	2100      	movs	r1, #0
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <CheckReceivedData+0x2c>)
 800258e:	f00c fd24 	bl	800efda <memset>
    receivedLength = 0;
 8002592:	4b02      	ldr	r3, [pc, #8]	; (800259c <CheckReceivedData+0x28>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
  }
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000884 	.word	0x20000884
 80025a0:	20000484 	.word	0x20000484

080025a4 <parse_received_data>:

// Functie om de ontvangen data te parsen
void parse_received_data(char* data)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b09a      	sub	sp, #104	; 0x68
 80025a8:	af16      	add	r7, sp, #88	; 0x58
 80025aa:	6078      	str	r0, [r7, #4]


    sscanf(data,
 80025ac:	4b28      	ldr	r3, [pc, #160]	; (8002650 <parse_received_data+0xac>)
 80025ae:	9315      	str	r3, [sp, #84]	; 0x54
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <parse_received_data+0xb0>)
 80025b2:	9314      	str	r3, [sp, #80]	; 0x50
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <parse_received_data+0xb4>)
 80025b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <parse_received_data+0xb8>)
 80025ba:	9312      	str	r3, [sp, #72]	; 0x48
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <parse_received_data+0xbc>)
 80025be:	9311      	str	r3, [sp, #68]	; 0x44
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <parse_received_data+0xc0>)
 80025c2:	9310      	str	r3, [sp, #64]	; 0x40
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <parse_received_data+0xc4>)
 80025c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80025c8:	4b28      	ldr	r3, [pc, #160]	; (800266c <parse_received_data+0xc8>)
 80025ca:	930e      	str	r3, [sp, #56]	; 0x38
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <parse_received_data+0xcc>)
 80025ce:	930d      	str	r3, [sp, #52]	; 0x34
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <parse_received_data+0xd0>)
 80025d2:	930c      	str	r3, [sp, #48]	; 0x30
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <parse_received_data+0xd4>)
 80025d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <parse_received_data+0xd8>)
 80025da:	930a      	str	r3, [sp, #40]	; 0x28
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <parse_received_data+0xdc>)
 80025de:	9309      	str	r3, [sp, #36]	; 0x24
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <parse_received_data+0xe0>)
 80025e2:	9308      	str	r3, [sp, #32]
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <parse_received_data+0xe4>)
 80025e6:	9307      	str	r3, [sp, #28]
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <parse_received_data+0xe8>)
 80025ea:	9306      	str	r3, [sp, #24]
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <parse_received_data+0xec>)
 80025ee:	9305      	str	r3, [sp, #20]
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <parse_received_data+0xf0>)
 80025f2:	9304      	str	r3, [sp, #16]
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <parse_received_data+0xf4>)
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <parse_received_data+0xf8>)
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <parse_received_data+0xfc>)
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <parse_received_data+0x100>)
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <parse_received_data+0x104>)
 8002606:	4a29      	ldr	r2, [pc, #164]	; (80026ac <parse_received_data+0x108>)
 8002608:	4929      	ldr	r1, [pc, #164]	; (80026b0 <parse_received_data+0x10c>)
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f00d f832 	bl	800f674 <siscanf>
           &thd_s1_rms, &thd_s1_3h, &thd_s1_5h, &thd_s1_7h, &thd_s1_9h, &thd_s1_11h, &thd_s1_13h,
           &thd_s2_rms, &thd_s2_3h, &thd_s2_5h, &thd_s2_7h, &thd_s2_9h, &thd_s2_11h, &thd_s2_13h,
           &thd_s3_rms, &thd_s3_3h, &thd_s3_5h, &thd_s3_7h, &thd_s3_9h, &thd_s3_11h, &thd_s3_13h);

    // Bereken alle gewenste testscenario's
    for (int i = 1; i <= 6; i++) {
 8002610:	2301      	movs	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e005      	b.n	8002622 <parse_received_data+0x7e>
        select_test_scenario(i);
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff fad2 	bl	8001bc0 <select_test_scenario>
    for (int i = 1; i <= 6; i++) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b06      	cmp	r3, #6
 8002626:	ddf6      	ble.n	8002616 <parse_received_data+0x72>
    }

    // Zet het eerste scenario klaar
    current_sine_wave_A = sine_wave_A_scenario[0];
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <parse_received_data+0x110>)
 800262a:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <parse_received_data+0x114>)
 800262c:	601a      	str	r2, [r3, #0]
    current_sine_wave_B = sine_wave_B_scenario[0];
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <parse_received_data+0x118>)
 8002630:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <parse_received_data+0x11c>)
 8002632:	601a      	str	r2, [r3, #0]
    current_sine_wave_C = sine_wave_C_scenario[0];
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <parse_received_data+0x120>)
 8002636:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <parse_received_data+0x124>)
 8002638:	601a      	str	r2, [r3, #0]
    current_scenario = 1;
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <parse_received_data+0x128>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

    // Update status naar gereed
    update_status(STATUS_GEREED);
 8002640:	2002      	movs	r0, #2
 8002642:	f7ff ff59 	bl	80024f8 <update_status>


}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20009018 	.word	0x20009018
 8002654:	20009014 	.word	0x20009014
 8002658:	20009010 	.word	0x20009010
 800265c:	2000900c 	.word	0x2000900c
 8002660:	20009008 	.word	0x20009008
 8002664:	20009004 	.word	0x20009004
 8002668:	20008fd0 	.word	0x20008fd0
 800266c:	20009000 	.word	0x20009000
 8002670:	20008ffc 	.word	0x20008ffc
 8002674:	20008ff8 	.word	0x20008ff8
 8002678:	20008ff4 	.word	0x20008ff4
 800267c:	20008ff0 	.word	0x20008ff0
 8002680:	20008fec 	.word	0x20008fec
 8002684:	20008fcc 	.word	0x20008fcc
 8002688:	20008fe8 	.word	0x20008fe8
 800268c:	20008fe4 	.word	0x20008fe4
 8002690:	20008fe0 	.word	0x20008fe0
 8002694:	20008fdc 	.word	0x20008fdc
 8002698:	20008fd8 	.word	0x20008fd8
 800269c:	20008fd4 	.word	0x20008fd4
 80026a0:	20008fc8 	.word	0x20008fc8
 80026a4:	20008fc4 	.word	0x20008fc4
 80026a8:	20008fc0 	.word	0x20008fc0
 80026ac:	20008fbc 	.word	0x20008fbc
 80026b0:	08013e60 	.word	0x08013e60
 80026b4:	20008fb0 	.word	0x20008fb0
 80026b8:	200008b0 	.word	0x200008b0
 80026bc:	20008fb4 	.word	0x20008fb4
 80026c0:	200035b0 	.word	0x200035b0
 80026c4:	20008fb8 	.word	0x20008fb8
 80026c8:	200062b0 	.word	0x200062b0
 80026cc:	20000000 	.word	0x20000000

080026d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026d4:	f000 fe74 	bl	80033c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026d8:	f000 f87a 	bl	80027d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026dc:	f000 f9ea 	bl	8002ab4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80026e0:	f000 f994 	bl	8002a0c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80026e4:	f000 f9bc 	bl	8002a60 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80026e8:	f000 f944 	bl	8002974 <MX_TIM2_Init>
  MX_I2S1_Init();
 80026ec:	f000 f8dc 	bl	80028a8 <MX_I2S1_Init>
  MX_SPI2_Init();
 80026f0:	f000 f908 	bl	8002904 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_DEVICE_Init();
 80026f4:	f00b fd72 	bl	800e1dc <MX_USB_DEVICE_Init>
  SET_refference();
 80026f8:	f7ff fe70 	bl	80023dc <SET_refference>
  DAC8564_Wake_up();
 80026fc:	f7ff fd8a 	bl	8002214 <DAC8564_Wake_up>
  usb_busy = true;
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <main+0xc4>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]

  while (!(HAL_GPIO_ReadPin(GPIO_PORT_VBUS, GPIO_PIN_VBUS) == GPIO_PIN_SET));
 8002706:	bf00      	nop
 8002708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800270c:	4822      	ldr	r0, [pc, #136]	; (8002798 <main+0xc8>)
 800270e:	f001 f993 	bl	8003a38 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d1f7      	bne.n	8002708 <main+0x38>
  HAL_Delay (3000);
 8002718:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800271c:	f000 fec2 	bl	80034a4 <HAL_Delay>
  receive_settings_and_update_status();
 8002720:	f7ff ff20 	bl	8002564 <receive_settings_and_update_status>



  HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);
 8002724:	2201      	movs	r2, #1
 8002726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800272a:	481c      	ldr	r0, [pc, #112]	; (800279c <main+0xcc>)
 800272c:	f001 f99c 	bl	8003a68 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 8002730:	2096      	movs	r0, #150	; 0x96
 8002732:	f000 feb7 	bl	80034a4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin, GPIO_PIN_SET);
 8002736:	2201      	movs	r2, #1
 8002738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800273c:	4817      	ldr	r0, [pc, #92]	; (800279c <main+0xcc>)
 800273e:	f001 f993 	bl	8003a68 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002742:	200a      	movs	r0, #10
 8002744:	f000 feae 	bl	80034a4 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002748:	f008 ffcc 	bl	800b6e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <main+0xd0>)
 800274e:	2100      	movs	r1, #0
 8002750:	4814      	ldr	r0, [pc, #80]	; (80027a4 <main+0xd4>)
 8002752:	f009 f811 	bl	800b778 <osThreadNew>
 8002756:	4603      	mov	r3, r0
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <main+0xd8>)
 800275a:	6013      	str	r3, [r2, #0]

  /* creation of KnopTASK */
  KnopTASKHandle = osThreadNew(KnopThread, NULL, &KnopTASK_attributes);
 800275c:	4a13      	ldr	r2, [pc, #76]	; (80027ac <main+0xdc>)
 800275e:	2100      	movs	r1, #0
 8002760:	4813      	ldr	r0, [pc, #76]	; (80027b0 <main+0xe0>)
 8002762:	f009 f809 	bl	800b778 <osThreadNew>
 8002766:	4603      	mov	r3, r0
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <main+0xe4>)
 800276a:	6013      	str	r3, [r2, #0]

  /* creation of LedTASK */
  LedTASKHandle = osThreadNew(Status_Thread, NULL, &LedTASK_attributes);
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <main+0xe8>)
 800276e:	2100      	movs	r1, #0
 8002770:	4812      	ldr	r0, [pc, #72]	; (80027bc <main+0xec>)
 8002772:	f009 f801 	bl	800b778 <osThreadNew>
 8002776:	4603      	mov	r3, r0
 8002778:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <main+0xf0>)
 800277a:	6013      	str	r3, [r2, #0]

  /* creation of Active_TASK */
  Active_TASKHandle = osThreadNew(Display_ACTIVE_scenario, NULL, &Active_TASK_attributes);
 800277c:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <main+0xf4>)
 800277e:	2100      	movs	r1, #0
 8002780:	4811      	ldr	r0, [pc, #68]	; (80027c8 <main+0xf8>)
 8002782:	f008 fff9 	bl	800b778 <osThreadNew>
 8002786:	4603      	mov	r3, r0
 8002788:	4a10      	ldr	r2, [pc, #64]	; (80027cc <main+0xfc>)
 800278a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800278c:	f008 ffce 	bl	800b72c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002790:	e7fe      	b.n	8002790 <main+0xc0>
 8002792:	bf00      	nop
 8002794:	2000901d 	.word	0x2000901d
 8002798:	40020000 	.word	0x40020000
 800279c:	40020400 	.word	0x40020400
 80027a0:	08014058 	.word	0x08014058
 80027a4:	08002c25 	.word	0x08002c25
 80027a8:	20000474 	.word	0x20000474
 80027ac:	0801407c 	.word	0x0801407c
 80027b0:	08002c39 	.word	0x08002c39
 80027b4:	20000478 	.word	0x20000478
 80027b8:	080140a0 	.word	0x080140a0
 80027bc:	08002c95 	.word	0x08002c95
 80027c0:	2000047c 	.word	0x2000047c
 80027c4:	080140c4 	.word	0x080140c4
 80027c8:	08002d99 	.word	0x08002d99
 80027cc:	20000480 	.word	0x20000480

080027d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b094      	sub	sp, #80	; 0x50
 80027d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	2234      	movs	r2, #52	; 0x34
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f00c fbfb 	bl	800efda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <SystemClock_Config+0xd0>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <SystemClock_Config+0xd0>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <SystemClock_Config+0xd0>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002810:	2300      	movs	r3, #0
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <SystemClock_Config+0xd4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <SystemClock_Config+0xd4>)
 800281a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <SystemClock_Config+0xd4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800282c:	2301      	movs	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002834:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002836:	2302      	movs	r3, #2
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800283a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002840:	2306      	movs	r3, #6
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002844:	23a8      	movs	r3, #168	; 0xa8
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002848:	2302      	movs	r3, #2
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800284c:	2307      	movs	r3, #7
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002850:	2302      	movs	r3, #2
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fe35 	bl	80064c8 <HAL_RCC_OscConfig>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002864:	f000 faca 	bl	8002dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002868:	230f      	movs	r3, #15
 800286a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800286c:	2303      	movs	r3, #3
 800286e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800287a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	2105      	movs	r1, #5
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fde8 	bl	800545c <HAL_RCC_ClockConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002892:	f000 fab3 	bl	8002dfc <Error_Handler>
  }
}
 8002896:	bf00      	nop
 8002898:	3750      	adds	r7, #80	; 0x50
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000

080028a8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_I2S1_Init+0x54>)
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <MX_I2S1_Init+0x58>)
 80028b0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <MX_I2S1_Init+0x54>)
 80028b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_I2S1_Init+0x54>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_I2S1_Init+0x54>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <MX_I2S1_Init+0x54>)
 80028c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028cc:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_I2S1_Init+0x54>)
 80028d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80028d4:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_I2S1_Init+0x54>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <MX_I2S1_Init+0x54>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_I2S1_Init+0x54>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80028e8:	4804      	ldr	r0, [pc, #16]	; (80028fc <MX_I2S1_Init+0x54>)
 80028ea:	f001 f8f1 	bl	8003ad0 <HAL_I2S_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80028f4:	f000 fa82 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000304 	.word	0x20000304
 8002900:	40013000 	.word	0x40013000

08002904 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <MX_SPI2_Init+0x68>)
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <MX_SPI2_Init+0x6c>)
 800290c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <MX_SPI2_Init+0x68>)
 8002910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002914:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <MX_SPI2_Init+0x68>)
 8002918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800291c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <MX_SPI2_Init+0x68>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_SPI2_Init+0x68>)
 8002926:	2202      	movs	r2, #2
 8002928:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_SPI2_Init+0x68>)
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_SPI2_Init+0x68>)
 8002932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002936:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_SPI2_Init+0x68>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_SPI2_Init+0x68>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_SPI2_Init+0x68>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <MX_SPI2_Init+0x68>)
 800294c:	2200      	movs	r2, #0
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_SPI2_Init+0x68>)
 8002952:	220a      	movs	r2, #10
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_SPI2_Init+0x68>)
 8002958:	f004 f854 	bl	8006a04 <HAL_SPI_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002962:	f000 fa4b 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000034c 	.word	0x2000034c
 8002970:	40003800 	.word	0x40003800

08002974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002988:	463b      	mov	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <MX_TIM2_Init+0x94>)
 8002992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <MX_TIM2_Init+0x94>)
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <MX_TIM2_Init+0x94>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1749;
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <MX_TIM2_Init+0x94>)
 80029a6:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80029aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <MX_TIM2_Init+0x94>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <MX_TIM2_Init+0x94>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029b8:	4813      	ldr	r0, [pc, #76]	; (8002a08 <MX_TIM2_Init+0x94>)
 80029ba:	f004 fab3 	bl	8006f24 <HAL_TIM_Base_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029c4:	f000 fa1a 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029ce:	f107 0308 	add.w	r3, r7, #8
 80029d2:	4619      	mov	r1, r3
 80029d4:	480c      	ldr	r0, [pc, #48]	; (8002a08 <MX_TIM2_Init+0x94>)
 80029d6:	f004 fc9c 	bl	8007312 <HAL_TIM_ConfigClockSource>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029e0:	f000 fa0c 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ec:	463b      	mov	r3, r7
 80029ee:	4619      	mov	r1, r3
 80029f0:	4805      	ldr	r0, [pc, #20]	; (8002a08 <MX_TIM2_Init+0x94>)
 80029f2:	f004 feb7 	bl	8007764 <HAL_TIMEx_MasterConfigSynchronization>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029fc:	f000 f9fe 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200003a4 	.word	0x200003a4

08002a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <MX_USART1_UART_Init+0x50>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a44:	f004 ff1e 	bl	8007884 <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a4e:	f000 f9d5 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200003ec 	.word	0x200003ec
 8002a5c:	40011000 	.word	0x40011000

08002a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <MX_USART3_UART_Init+0x50>)
 8002a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a86:	220c      	movs	r2, #12
 8002a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a98:	f004 fef4 	bl	8007884 <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002aa2:	f000 f9ab 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000430 	.word	0x20000430
 8002ab0:	40004800 	.word	0x40004800

08002ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a4f      	ldr	r2, [pc, #316]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a48      	ldr	r2, [pc, #288]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002af0:	f043 0320 	orr.w	r3, r3, #32
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a41      	ldr	r2, [pc, #260]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a3a      	ldr	r2, [pc, #232]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a33      	ldr	r2, [pc, #204]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a2c      	ldr	r2, [pc, #176]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <MX_GPIO_Init+0x15c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin, GPIO_PIN_RESET);
 8002b72:	2200      	movs	r2, #0
 8002b74:	210e      	movs	r1, #14
 8002b76:	4827      	ldr	r0, [pc, #156]	; (8002c14 <MX_GPIO_Init+0x160>)
 8002b78:	f000 ff76 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin, GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f241 0130 	movw	r1, #4144	; 0x1030
 8002b82:	4825      	ldr	r0, [pc, #148]	; (8002c18 <MX_GPIO_Init+0x164>)
 8002b84:	f000 ff70 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b8e:	4823      	ldr	r0, [pc, #140]	; (8002c1c <MX_GPIO_Init+0x168>)
 8002b90:	f000 ff6a 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Start_knop_Pin Pauzeer_knop_Pin Stop_knop_Pin */
  GPIO_InitStruct.Pin = Start_knop_Pin|Pauzeer_knop_Pin|Stop_knop_Pin;
 8002b94:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	481d      	ldr	r0, [pc, #116]	; (8002c20 <MX_GPIO_Init+0x16c>)
 8002baa:	f000 fdb1 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blauwe_LED_Pin Groene_LED_Pin Rode_LED_Pin */
  GPIO_InitStruct.Pin = Blauwe_LED_Pin|Groene_LED_Pin|Rode_LED_Pin;
 8002bae:	230e      	movs	r3, #14
 8002bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4813      	ldr	r0, [pc, #76]	; (8002c14 <MX_GPIO_Init+0x160>)
 8002bc6:	f000 fda3 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SYNC_Pin RE_tranceiver_Pin DE_tranceiver_Pin */
  GPIO_InitStruct.Pin = SPI_SYNC_Pin|RE_tranceiver_Pin|DE_tranceiver_Pin;
 8002bca:	f241 0330 	movw	r3, #4144	; 0x1030
 8002bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	4619      	mov	r1, r3
 8002be2:	480d      	ldr	r0, [pc, #52]	; (8002c18 <MX_GPIO_Init+0x164>)
 8002be4:	f000 fd94 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDAC_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 8002be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4806      	ldr	r0, [pc, #24]	; (8002c1c <MX_GPIO_Init+0x168>)
 8002c02:	f000 fd85 	bl	8003710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c06:	bf00      	nop
 8002c08:	3730      	adds	r7, #48	; 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40021400 	.word	0x40021400
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40020800 	.word	0x40020800

08002c24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    osDelay(100000);
 8002c2c:	4801      	ldr	r0, [pc, #4]	; (8002c34 <StartDefaultTask+0x10>)
 8002c2e:	f008 fe35 	bl	800b89c <osDelay>
 8002c32:	e7fb      	b.n	8002c2c <StartDefaultTask+0x8>
 8002c34:	000186a0 	.word	0x000186a0

08002c38 <KnopThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KnopThread */
void KnopThread(void *argument)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KnopThread */
  /* Infinite loop */
	for(;;) {
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 8002c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c44:	4812      	ldr	r0, [pc, #72]	; (8002c90 <KnopThread+0x58>)
 8002c46:	f000 fef7 	bl	8003a38 <HAL_GPIO_ReadPin>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <KnopThread+0x20>
		update_status(STATUS_TEST_GESTART);
 8002c50:	2003      	movs	r0, #3
 8002c52:	f7ff fc51 	bl	80024f8 <update_status>
 8002c56:	e016      	b.n	8002c86 <KnopThread+0x4e>
		} else if (HAL_GPIO_ReadPin(PAUZEER_KNOP_PORT, PAUZEER_KNOP_PIN) == GPIO_PIN_RESET) {
 8002c58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <KnopThread+0x58>)
 8002c5e:	f000 feeb 	bl	8003a38 <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d103      	bne.n	8002c70 <KnopThread+0x38>
		update_status(STATUS_TEST_GEPAUZEERD);
 8002c68:	2004      	movs	r0, #4
 8002c6a:	f7ff fc45 	bl	80024f8 <update_status>
 8002c6e:	e00a      	b.n	8002c86 <KnopThread+0x4e>
		} else if (HAL_GPIO_ReadPin(STOP_KNOP_PORT, STOP_KNOP_PIN) == GPIO_PIN_RESET) {
 8002c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c74:	4806      	ldr	r0, [pc, #24]	; (8002c90 <KnopThread+0x58>)
 8002c76:	f000 fedf 	bl	8003a38 <HAL_GPIO_ReadPin>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <KnopThread+0x4e>
		update_status(STATUS_TEST_GESTOPT);
 8002c80:	2005      	movs	r0, #5
 8002c82:	f7ff fc39 	bl	80024f8 <update_status>
		}

	   osDelay(100);
 8002c86:	2064      	movs	r0, #100	; 0x64
 8002c88:	f008 fe08 	bl	800b89c <osDelay>
		if (HAL_GPIO_ReadPin(START_KNOP_PORT, START_KNOP_PIN) == GPIO_PIN_RESET) {
 8002c8c:	e7d8      	b.n	8002c40 <KnopThread+0x8>
 8002c8e:	bf00      	nop
 8002c90:	40020800 	.word	0x40020800

08002c94 <Status_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Status_Thread */
void Status_Thread(void *argument)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Status_Thread */
  TestStatus vorige_status = STATUS_IDLE;  // Houdt de vorige stat
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
    for(;;) {
    	 if (huidig_status != vorige_status) {
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <Status_Thread+0xdc>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d051      	beq.n	8002d4e <Status_Thread+0xba>


    	      // Zet de vlag op true om de USB-communicatie te reserveren
    		 usb_busy = true;
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <Status_Thread+0xe0>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]

    	          // De status is veranderd, voer de eenmalige acties uit
    	          switch (huidig_status) {
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <Status_Thread+0xdc>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d845      	bhi.n	8002d46 <Status_Thread+0xb2>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <Status_Thread+0x2c>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002cd9 	.word	0x08002cd9
 8002cc4:	08002ce1 	.word	0x08002ce1
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002d15 	.word	0x08002d15
 8002cd0:	08002d1d 	.word	0x08002d1d
 8002cd4:	08002d3f 	.word	0x08002d3f
    	              case STATUS_WACHTEN_OP_INSTELLINGEN:
    	                  send_status_to_gui(WAITING_FOR_SETTINGS);  // Verstuur slechts één keer
 8002cd8:	4827      	ldr	r0, [pc, #156]	; (8002d78 <Status_Thread+0xe4>)
 8002cda:	f7ff fc33 	bl	8002544 <send_status_to_gui>
    	                  break;
 8002cde:	e033      	b.n	8002d48 <Status_Thread+0xb4>
    	              case STATUS_GEREED:
    	                  send_status_to_gui(READY_STATUS);
 8002ce0:	4826      	ldr	r0, [pc, #152]	; (8002d7c <Status_Thread+0xe8>)
 8002ce2:	f7ff fc2f 	bl	8002544 <send_status_to_gui>
    	                  zet_blauw_licht_aan();
 8002ce6:	f7ff fb9d 	bl	8002424 <zet_blauw_licht_aan>
    	                  break;
 8002cea:	e02d      	b.n	8002d48 <Status_Thread+0xb4>
    	              case STATUS_TEST_GESTART:
    	                  send_status_to_gui(TEST_RUNNING);
 8002cec:	4824      	ldr	r0, [pc, #144]	; (8002d80 <Status_Thread+0xec>)
 8002cee:	f7ff fc29 	bl	8002544 <send_status_to_gui>
    	                  zet_groen_licht_aan();  // Groene LED aan, maar niet knipperend
 8002cf2:	f7ff fbad 	bl	8002450 <zet_groen_licht_aan>
    	                  if (!(vorige_status ==STATUS_TEST_GEPAUZEERD)){
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d007      	beq.n	8002d0c <Status_Thread+0x78>
							  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8002cfc:	4821      	ldr	r0, [pc, #132]	; (8002d84 <Status_Thread+0xf0>)
 8002cfe:	f004 f961 	bl	8006fc4 <HAL_TIM_Base_Start_IT>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <Status_Thread+0x78>
								  Error_Handler();
 8002d08:	f000 f878 	bl	8002dfc <Error_Handler>
							  }
    	                  }
    	            	  usb_busy = false;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <Status_Thread+0xe0>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
    	                  break;
 8002d12:	e019      	b.n	8002d48 <Status_Thread+0xb4>
    	              case STATUS_TEST_GEPAUZEERD:
    	                  send_status_to_gui(TEST_PAUSED);  // Verstuur status slechts één keer
 8002d14:	481c      	ldr	r0, [pc, #112]	; (8002d88 <Status_Thread+0xf4>)
 8002d16:	f7ff fc15 	bl	8002544 <send_status_to_gui>
    	                  // Knipperende actie wordt hieronder periodiek uitgevoerd
    	                  break;
 8002d1a:	e015      	b.n	8002d48 <Status_Thread+0xb4>
    	              case STATUS_TEST_GESTOPT:
    	            	  if (HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK) {
 8002d1c:	4819      	ldr	r0, [pc, #100]	; (8002d84 <Status_Thread+0xf0>)
 8002d1e:	f004 f9c1 	bl	80070a4 <HAL_TIM_Base_Stop_IT>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <Status_Thread+0x98>
    	            	      Error_Handler();
 8002d28:	f000 f868 	bl	8002dfc <Error_Handler>
    	            	  }
    	                  send_status_to_gui(TEST_STOPPED);
 8002d2c:	4817      	ldr	r0, [pc, #92]	; (8002d8c <Status_Thread+0xf8>)
 8002d2e:	f7ff fc09 	bl	8002544 <send_status_to_gui>
    	                  zet_rood_licht_aan();  // Rode LED aan
 8002d32:	f7ff fba3 	bl	800247c <zet_rood_licht_aan>
    	                  current_scenario = 1;
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <Status_Thread+0xfc>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
    	                  break;
 8002d3c:	e004      	b.n	8002d48 <Status_Thread+0xb4>
    	              case STATUS_TEST_VOLTOOID:
    	                  send_status_to_gui(TEST_COMPLETED);  // Verstuur status slechts één keer
 8002d3e:	4815      	ldr	r0, [pc, #84]	; (8002d94 <Status_Thread+0x100>)
 8002d40:	f7ff fc00 	bl	8002544 <send_status_to_gui>
    	                  // Knipperende actie wordt hieronder periodiek uitgevoerd
    	                  break;
 8002d44:	e000      	b.n	8002d48 <Status_Thread+0xb4>
    	              default:
    	                  break;
 8002d46:	bf00      	nop
    	          }

    	          // Update de vorige status na het uitvoeren van de actie
    	          vorige_status = huidig_status;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <Status_Thread+0xdc>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	73fb      	strb	r3, [r7, #15]


    	      }

    	      // Periodieke acties (knipperende LEDs) blijven elke 100 ms draaien, ongeacht statusverandering
    	      switch (huidig_status) {
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <Status_Thread+0xdc>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d002      	beq.n	8002d5c <Status_Thread+0xc8>
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d003      	beq.n	8002d62 <Status_Thread+0xce>
    	          case STATUS_TEST_VOLTOOID:
    	              blauw_knipperend();  // Blauw knipperen als voltooid
    	              break;
    	          default:
    	              // Geen knipperende LED's in andere statussen
    	              break;
 8002d5a:	e005      	b.n	8002d68 <Status_Thread+0xd4>
    	              groen_knipperend();  // Groen knipperen terwijl gepauzeerd
 8002d5c:	f7ff fba4 	bl	80024a8 <groen_knipperend>
    	              break;
 8002d60:	e002      	b.n	8002d68 <Status_Thread+0xd4>
    	              blauw_knipperend();  // Blauw knipperen als voltooid
 8002d62:	f7ff fbb5 	bl	80024d0 <blauw_knipperend>
    	              break;
 8002d66:	bf00      	nop
    	      }

    	      // Delay van 100 ms om knipperen te laten werken en CPU te sparen
    	      osDelay(100);
 8002d68:	2064      	movs	r0, #100	; 0x64
 8002d6a:	f008 fd97 	bl	800b89c <osDelay>
    	 if (huidig_status != vorige_status) {
 8002d6e:	e797      	b.n	8002ca0 <Status_Thread+0xc>
 8002d70:	2000901c 	.word	0x2000901c
 8002d74:	2000901d 	.word	0x2000901d
 8002d78:	08013fa4 	.word	0x08013fa4
 8002d7c:	08013fbc 	.word	0x08013fbc
 8002d80:	08013fc4 	.word	0x08013fc4
 8002d84:	200003a4 	.word	0x200003a4
 8002d88:	08013fd4 	.word	0x08013fd4
 8002d8c:	08013fe0 	.word	0x08013fe0
 8002d90:	20000000 	.word	0x20000000
 8002d94:	08013fe8 	.word	0x08013fe8

08002d98 <Display_ACTIVE_scenario>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_ACTIVE_scenario */
void Display_ACTIVE_scenario(void *argument)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_ACTIVE_scenario */
	int vorige_scenario=0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  if (huidig_status == STATUS_TEST_GESTART && usb_busy == false && !(vorige_scenario == current_scenario)) {
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <Display_ACTIVE_scenario+0x58>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d11d      	bne.n	8002de8 <Display_ACTIVE_scenario+0x50>
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <Display_ACTIVE_scenario+0x5c>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f083 0301 	eor.w	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <Display_ACTIVE_scenario+0x50>
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <Display_ACTIVE_scenario+0x60>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d010      	beq.n	8002de8 <Display_ACTIVE_scenario+0x50>
		  osDelay(20);
 8002dc6:	2014      	movs	r0, #20
 8002dc8:	f008 fd68 	bl	800b89c <osDelay>
		  usb_busy = true;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <Display_ACTIVE_scenario+0x5c>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
		  send_active_scenario_to_gui(current_scenario);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <Display_ACTIVE_scenario+0x60>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fb9e 	bl	8002518 <send_active_scenario_to_gui>
		  usb_busy = false;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <Display_ACTIVE_scenario+0x5c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
		  vorige_scenario=current_scenario;
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <Display_ACTIVE_scenario+0x60>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

	  }
    osDelay(100);
 8002de8:	2064      	movs	r0, #100	; 0x64
 8002dea:	f008 fd57 	bl	800b89c <osDelay>
	  if (huidig_status == STATUS_TEST_GESTART && usb_busy == false && !(vorige_scenario == current_scenario)) {
 8002dee:	e7d9      	b.n	8002da4 <Display_ACTIVE_scenario+0xc>
 8002df0:	2000901c 	.word	0x2000901c
 8002df4:	2000901d 	.word	0x2000901d
 8002df8:	20000000 	.word	0x20000000

08002dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e00:	b672      	cpsid	i
}
 8002e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <Error_Handler+0x8>
	...

08002e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_MspInit+0x54>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <HAL_MspInit+0x54>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_MspInit+0x54>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_MspInit+0x54>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_MspInit+0x54>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_MspInit+0x54>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	210f      	movs	r1, #15
 8002e4a:	f06f 0001 	mvn.w	r0, #1
 8002e4e:	f000 fc28 	bl	80036a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800

08002e60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b0a2      	sub	sp, #136	; 0x88
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e78:	f107 0318 	add.w	r3, r7, #24
 8002e7c:	225c      	movs	r2, #92	; 0x5c
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f00c f8aa 	bl	800efda <memset>
  if(hi2s->Instance==SPI1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a37      	ldr	r2, [pc, #220]	; (8002f68 <HAL_I2S_MspInit+0x108>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d167      	bne.n	8002f60 <HAL_I2S_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8002e90:	2302      	movs	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8002e94:	2332      	movs	r3, #50	; 0x32
 8002e96:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8002eac:	2300      	movs	r3, #0
 8002eae:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb0:	f107 0318 	add.w	r3, r7, #24
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 fbeb 	bl	8005690 <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8002ec0:	f7ff ff9c 	bl	8002dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_I2S_MspInit+0x10c>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002f18:	23b0      	movs	r3, #176	; 0xb0
 8002f1a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f34:	4619      	mov	r1, r3
 8002f36:	480e      	ldr	r0, [pc, #56]	; (8002f70 <HAL_I2S_MspInit+0x110>)
 8002f38:	f000 fbea 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f4e:	2305      	movs	r3, #5
 8002f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4806      	ldr	r0, [pc, #24]	; (8002f74 <HAL_I2S_MspInit+0x114>)
 8002f5c:	f000 fbd8 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f60:	bf00      	nop
 8002f62:	3788      	adds	r7, #136	; 0x88
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40013000 	.word	0x40013000
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020800 	.word	0x40020800

08002f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <HAL_SPI_MspInit+0x84>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d12c      	bne.n	8002ff4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a17      	ldr	r2, [pc, #92]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_SPI_MspInit+0x88>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002fd2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fe4:	2305      	movs	r3, #5
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4619      	mov	r1, r3
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <HAL_SPI_MspInit+0x8c>)
 8002ff0:	f000 fb8e 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ff4:	bf00      	nop
 8002ff6:	3728      	adds	r7, #40	; 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40003800 	.word	0x40003800
 8003000:	40023800 	.word	0x40023800
 8003004:	40020400 	.word	0x40020400

08003008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d115      	bne.n	8003046 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_TIM_Base_MspInit+0x48>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <HAL_TIM_Base_MspInit+0x48>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_TIM_Base_MspInit+0x48>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2105      	movs	r1, #5
 800303a:	201c      	movs	r0, #28
 800303c:	f000 fb31 	bl	80036a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003040:	201c      	movs	r0, #28
 8003042:	f000 fb4a 	bl	80036da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a32      	ldr	r2, [pc, #200]	; (800313c <HAL_UART_MspInit+0xe8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d12c      	bne.n	80030d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	4b31      	ldr	r3, [pc, #196]	; (8003140 <HAL_UART_MspInit+0xec>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a30      	ldr	r2, [pc, #192]	; (8003140 <HAL_UART_MspInit+0xec>)
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_UART_MspInit+0xec>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <HAL_UART_MspInit+0xec>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a29      	ldr	r2, [pc, #164]	; (8003140 <HAL_UART_MspInit+0xec>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_UART_MspInit+0xec>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030ae:	23c0      	movs	r3, #192	; 0xc0
 80030b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ba:	2303      	movs	r3, #3
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030be:	2307      	movs	r3, #7
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c2:	f107 031c 	add.w	r3, r7, #28
 80030c6:	4619      	mov	r1, r3
 80030c8:	481e      	ldr	r0, [pc, #120]	; (8003144 <HAL_UART_MspInit+0xf0>)
 80030ca:	f000 fb21 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030ce:	e031      	b.n	8003134 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_UART_MspInit+0xf4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d12c      	bne.n	8003134 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_UART_MspInit+0xec>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <HAL_UART_MspInit+0xec>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_UART_MspInit+0xec>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_UART_MspInit+0xec>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <HAL_UART_MspInit+0xec>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_UART_MspInit+0xec>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCOM_TX_STLINK_Pin|VCOM_RX_ST_LINK_Pin;
 8003112:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003124:	2307      	movs	r3, #7
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	4805      	ldr	r0, [pc, #20]	; (8003144 <HAL_UART_MspInit+0xf0>)
 8003130:	f000 faee 	bl	8003710 <HAL_GPIO_Init>
}
 8003134:	bf00      	nop
 8003136:	3730      	adds	r7, #48	; 0x30
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40011000 	.word	0x40011000
 8003140:	40023800 	.word	0x40023800
 8003144:	40020400 	.word	0x40020400
 8003148:	40004800 	.word	0x40004800

0800314c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <NMI_Handler+0x4>

08003152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <HardFault_Handler+0x4>

08003158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <MemManage_Handler+0x4>

0800315e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003162:	e7fe      	b.n	8003162 <BusFault_Handler+0x4>

08003164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <UsageFault_Handler+0x4>

0800316a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800317c:	f000 f972 	bl	8003464 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003180:	f009 ffc4 	bl	800d10c <xTaskGetSchedulerState>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d001      	beq.n	800318e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800318a:	f00a fdad 	bl	800dce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <TIM2_IRQHandler+0x10>)
 800319a:	f003 ffb2 	bl	8007102 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200003a4 	.word	0x200003a4

080031a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <OTG_FS_IRQHandler+0x10>)
 80031ae:	f000 ffe3 	bl	8004178 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000ef18 	.word	0x2000ef18

080031bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return 1;
 80031c0:	2301      	movs	r3, #1
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_kill>:

int _kill(int pid, int sig)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031d6:	f00b fdcf 	bl	800ed78 <__errno>
 80031da:	4603      	mov	r3, r0
 80031dc:	2216      	movs	r2, #22
 80031de:	601a      	str	r2, [r3, #0]
  return -1;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_exit>:

void _exit (int status)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ffe7 	bl	80031cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80031fe:	e7fe      	b.n	80031fe <_exit+0x12>

08003200 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e00a      	b.n	8003228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003212:	f3af 8000 	nop.w
 8003216:	4601      	mov	r1, r0
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	60ba      	str	r2, [r7, #8]
 800321e:	b2ca      	uxtb	r2, r1
 8003220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3301      	adds	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	dbf0      	blt.n	8003212 <_read+0x12>
  }

  return len;
 8003230:	687b      	ldr	r3, [r7, #4]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e009      	b.n	8003260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	60ba      	str	r2, [r7, #8]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	3301      	adds	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	dbf1      	blt.n	800324c <_write+0x12>
  }
  return len;
 8003268:	687b      	ldr	r3, [r7, #4]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_close>:

int _close(int file)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800329a:	605a      	str	r2, [r3, #4]
  return 0;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <_isatty>:

int _isatty(int file)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <_sbrk+0x5c>)
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <_sbrk+0x60>)
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <_sbrk+0x64>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <_sbrk+0x64>)
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <_sbrk+0x68>)
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <_sbrk+0x64>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	429a      	cmp	r2, r3
 800330a:	d207      	bcs.n	800331c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800330c:	f00b fd34 	bl	800ed78 <__errno>
 8003310:	4603      	mov	r3, r0
 8003312:	220c      	movs	r2, #12
 8003314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	e009      	b.n	8003330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <_sbrk+0x64>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <_sbrk+0x64>)
 800332c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20020000 	.word	0x20020000
 800333c:	00000400 	.word	0x00000400
 8003340:	20009020 	.word	0x20009020
 8003344:	2000f658 	.word	0x2000f658

08003348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <SystemInit+0x20>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <SystemInit+0x20>)
 8003354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800336c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003370:	480d      	ldr	r0, [pc, #52]	; (80033a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003372:	490e      	ldr	r1, [pc, #56]	; (80033ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003374:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003378:	e002      	b.n	8003380 <LoopCopyDataInit>

0800337a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800337a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800337c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800337e:	3304      	adds	r3, #4

08003380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003384:	d3f9      	bcc.n	800337a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003386:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003388:	4c0b      	ldr	r4, [pc, #44]	; (80033b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800338c:	e001      	b.n	8003392 <LoopFillZerobss>

0800338e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800338e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003390:	3204      	adds	r2, #4

08003392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003394:	d3fb      	bcc.n	800338e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003396:	f7ff ffd7 	bl	8003348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800339a:	f00b fde9 	bl	800ef70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800339e:	f7ff f997 	bl	80026d0 <main>
  bx  lr    
 80033a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033ac:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 80033b0:	08014738 	.word	0x08014738
  ldr r2, =_sbss
 80033b4:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80033b8:	2000f654 	.word	0x2000f654

080033bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033bc:	e7fe      	b.n	80033bc <ADC_IRQHandler>
	...

080033c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_Init+0x40>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <HAL_Init+0x40>)
 80033ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_Init+0x40>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <HAL_Init+0x40>)
 80033d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_Init+0x40>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <HAL_Init+0x40>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e8:	2003      	movs	r0, #3
 80033ea:	f000 f94f 	bl	800368c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ee:	200f      	movs	r0, #15
 80033f0:	f000 f808 	bl	8003404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033f4:	f7ff fd08 	bl	8002e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023c00 	.word	0x40023c00

08003404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_InitTick+0x54>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_InitTick+0x58>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4619      	mov	r1, r3
 8003416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800341a:	fbb3 f3f1 	udiv	r3, r3, r1
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f967 	bl	80036f6 <HAL_SYSTICK_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e00e      	b.n	8003450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b0f      	cmp	r3, #15
 8003436:	d80a      	bhi.n	800344e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003438:	2200      	movs	r2, #0
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f000 f92f 	bl	80036a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003444:	4a06      	ldr	r2, [pc, #24]	; (8003460 <HAL_InitTick+0x5c>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000004 	.word	0x20000004
 800345c:	2000000c 	.word	0x2000000c
 8003460:	20000008 	.word	0x20000008

08003464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_IncTick+0x20>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_IncTick+0x24>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <HAL_IncTick+0x24>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c
 8003488:	20009024 	.word	0x20009024

0800348c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return uwTick;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_GetTick+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20009024 	.word	0x20009024

080034a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff ffee 	bl	800348c <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d005      	beq.n	80034ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_Delay+0x44>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034ca:	bf00      	nop
 80034cc:	f7ff ffde 	bl	800348c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d8f7      	bhi.n	80034cc <HAL_Delay+0x28>
  {
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	2000000c 	.word	0x2000000c

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db0b      	blt.n	800357a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4907      	ldr	r1, [pc, #28]	; (8003588 <__NVIC_EnableIRQ+0x38>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003658:	d301      	bcc.n	800365e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365a:	2301      	movs	r3, #1
 800365c:	e00f      	b.n	800367e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <SysTick_Config+0x40>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003666:	210f      	movs	r1, #15
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f7ff ff8e 	bl	800358c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <SysTick_Config+0x40>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <SysTick_Config+0x40>)
 8003678:	2207      	movs	r2, #7
 800367a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	e000e010 	.word	0xe000e010

0800368c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff ff29 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b4:	f7ff ff3e 	bl	8003534 <__NVIC_GetPriorityGrouping>
 80036b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	f7ff ff8e 	bl	80035e0 <NVIC_EncodePriority>
 80036c4:	4602      	mov	r2, r0
 80036c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff5d 	bl	800358c <__NVIC_SetPriority>
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff31 	bl	8003550 <__NVIC_EnableIRQ>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ffa2 	bl	8003648 <SysTick_Config>
 8003704:	4603      	mov	r3, r0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e165      	b.n	80039f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800372c:	2201      	movs	r2, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 8154 	bne.w	80039f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d005      	beq.n	8003762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375e:	2b02      	cmp	r3, #2
 8003760:	d130      	bne.n	80037c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d017      	beq.n	8003800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d123      	bne.n	8003854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80ae 	beq.w	80039f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_GPIO_Init+0x300>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <HAL_GPIO_Init+0x300>)
 80038a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a4:	6453      	str	r3, [r2, #68]	; 0x44
 80038a6:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_GPIO_Init+0x300>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b2:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_GPIO_Init+0x304>)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4f      	ldr	r2, [pc, #316]	; (8003a18 <HAL_GPIO_Init+0x308>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d025      	beq.n	800392a <HAL_GPIO_Init+0x21a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4e      	ldr	r2, [pc, #312]	; (8003a1c <HAL_GPIO_Init+0x30c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <HAL_GPIO_Init+0x216>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4d      	ldr	r2, [pc, #308]	; (8003a20 <HAL_GPIO_Init+0x310>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <HAL_GPIO_Init+0x212>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4c      	ldr	r2, [pc, #304]	; (8003a24 <HAL_GPIO_Init+0x314>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_GPIO_Init+0x20e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4b      	ldr	r2, [pc, #300]	; (8003a28 <HAL_GPIO_Init+0x318>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00d      	beq.n	800391a <HAL_GPIO_Init+0x20a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4a      	ldr	r2, [pc, #296]	; (8003a2c <HAL_GPIO_Init+0x31c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <HAL_GPIO_Init+0x206>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a49      	ldr	r2, [pc, #292]	; (8003a30 <HAL_GPIO_Init+0x320>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_GPIO_Init+0x202>
 800390e:	2306      	movs	r3, #6
 8003910:	e00c      	b.n	800392c <HAL_GPIO_Init+0x21c>
 8003912:	2307      	movs	r3, #7
 8003914:	e00a      	b.n	800392c <HAL_GPIO_Init+0x21c>
 8003916:	2305      	movs	r3, #5
 8003918:	e008      	b.n	800392c <HAL_GPIO_Init+0x21c>
 800391a:	2304      	movs	r3, #4
 800391c:	e006      	b.n	800392c <HAL_GPIO_Init+0x21c>
 800391e:	2303      	movs	r3, #3
 8003920:	e004      	b.n	800392c <HAL_GPIO_Init+0x21c>
 8003922:	2302      	movs	r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_Init+0x21c>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_GPIO_Init+0x21c>
 800392a:	2300      	movs	r3, #0
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	4093      	lsls	r3, r2
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800393c:	4935      	ldr	r1, [pc, #212]	; (8003a14 <HAL_GPIO_Init+0x304>)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <HAL_GPIO_Init+0x324>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a31      	ldr	r2, [pc, #196]	; (8003a34 <HAL_GPIO_Init+0x324>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <HAL_GPIO_Init+0x324>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <HAL_GPIO_Init+0x324>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800399e:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_GPIO_Init+0x324>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c2:	4a1c      	ldr	r2, [pc, #112]	; (8003a34 <HAL_GPIO_Init+0x324>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c8:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <HAL_GPIO_Init+0x324>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ec:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <HAL_GPIO_Init+0x324>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b0f      	cmp	r3, #15
 80039fc:	f67f ae96 	bls.w	800372c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	3724      	adds	r7, #36	; 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40021400 	.word	0x40021400
 8003a30:	40021800 	.word	0x40021800
 8003a34:	40013c00 	.word	0x40013c00

08003a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e001      	b.n	8003a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
 8003a74:	4613      	mov	r3, r2
 8003a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a78:	787b      	ldrb	r3, [r7, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a84:	e003      	b.n	8003a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	041a      	lsls	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	619a      	str	r2, [r3, #24]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	041a      	lsls	r2, r3, #16
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	400b      	ands	r3, r1
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	619a      	str	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0e1      	b.n	8003ca6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a6d      	ldr	r2, [pc, #436]	; (8003cb0 <HAL_I2S_Init+0x1e0>)
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff f9af 	bl	8002e60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b18:	f023 030f 	bic.w	r3, r3, #15
 8003b1c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2202      	movs	r2, #2
 8003b24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d06f      	beq.n	8003c0e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b36:	2310      	movs	r3, #16
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e001      	b.n	8003b40 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d802      	bhi.n	8003b4e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_I2S_Init+0x1e4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_I2S_Init+0x92>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a56      	ldr	r2, [pc, #344]	; (8003cb8 <HAL_I2S_Init+0x1e8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d104      	bne.n	8003b6c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f002 f8be 	bl	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	e003      	b.n	8003b74 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f002 f8b9 	bl	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b72:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d125      	bne.n	8003bca <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	461a      	mov	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	3305      	adds	r3, #5
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e01f      	b.n	8003be8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	3305      	adds	r3, #5
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	e00e      	b.n	8003be8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	3305      	adds	r3, #5
 8003be6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <HAL_I2S_Init+0x1ec>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e003      	b.n	8003c16 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d902      	bls.n	8003c22 <HAL_I2S_Init+0x152>
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2bff      	cmp	r3, #255	; 0xff
 8003c20:	d907      	bls.n	8003c32 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e039      	b.n	8003ca6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	ea42 0103 	orr.w	r1, r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c50:	f023 030f 	bic.w	r3, r3, #15
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6851      	ldr	r1, [r2, #4]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6892      	ldr	r2, [r2, #8]
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6992      	ldr	r2, [r2, #24]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c74:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b30      	cmp	r3, #48	; 0x30
 8003c7c:	d003      	beq.n	8003c86 <HAL_I2S_Init+0x1b6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2bb0      	cmp	r3, #176	; 0xb0
 8003c84:	d107      	bne.n	8003c96 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c94:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	08003db7 	.word	0x08003db7
 8003cb4:	40003800 	.word	0x40003800
 8003cb8:	40003c00 	.word	0x40003c00
 8003cbc:	cccccccd 	.word	0xcccccccd

08003cc0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ffb8 	bl	8003cc0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10e      	bne.n	8003dae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff93 	bl	8003cd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d13a      	bne.n	8003e48 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d109      	bne.n	8003df0 <I2S_IRQHandler+0x3a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d102      	bne.n	8003df0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ffb4 	bl	8003d58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d126      	bne.n	8003e48 <I2S_IRQHandler+0x92>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d11f      	bne.n	8003e48 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff50 	bl	8003ce8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d136      	bne.n	8003ec2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d109      	bne.n	8003e72 <I2S_IRQHandler+0xbc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d102      	bne.n	8003e72 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff45 	bl	8003cfc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d122      	bne.n	8003ec2 <I2S_IRQHandler+0x10c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d11b      	bne.n	8003ec2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f043 0204 	orr.w	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff13 	bl	8003ce8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ecc:	b08f      	sub	sp, #60	; 0x3c
 8003ece:	af0a      	add	r7, sp, #40	; 0x28
 8003ed0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e116      	b.n	800410a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f00a fbb8 	bl	800e66c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2203      	movs	r2, #3
 8003f00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f004 f889 	bl	8008032 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	687e      	ldr	r6, [r7, #4]
 8003f28:	466d      	mov	r5, sp
 8003f2a:	f106 0410 	add.w	r4, r6, #16
 8003f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f3e:	1d33      	adds	r3, r6, #4
 8003f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f42:	6838      	ldr	r0, [r7, #0]
 8003f44:	f003 ff60 	bl	8007e08 <USB_CoreInit>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0d7      	b.n	800410a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f004 f877 	bl	8008054 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	e04a      	b.n	8004002 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	333d      	adds	r3, #61	; 0x3d
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	333c      	adds	r3, #60	; 0x3c
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	b298      	uxth	r0, r3
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3344      	adds	r3, #68	; 0x44
 8003fa8:	4602      	mov	r2, r0
 8003faa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3340      	adds	r3, #64	; 0x40
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	3348      	adds	r3, #72	; 0x48
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	334c      	adds	r3, #76	; 0x4c
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3354      	adds	r3, #84	; 0x54
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	3301      	adds	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	d3af      	bcc.n	8003f6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e044      	b.n	800409c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	3301      	adds	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3b5      	bcc.n	8004012 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	687e      	ldr	r6, [r7, #4]
 80040ae:	466d      	mov	r5, sp
 80040b0:	f106 0410 	add.w	r4, r6, #16
 80040b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c4:	1d33      	adds	r3, r6, #4
 80040c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c8:	6838      	ldr	r0, [r7, #0]
 80040ca:	f004 f80f 	bl	80080ec <USB_DevInit>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e014      	b.n	800410a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d102      	bne.n	80040fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f001 f98b 	bl	8005414 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f005 f951 	bl	80093aa <USB_DevDisconnect>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004112 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_PCD_Start+0x1c>
 800412a:	2302      	movs	r3, #2
 800412c:	e020      	b.n	8004170 <HAL_PCD_Start+0x5e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	2b01      	cmp	r3, #1
 800413c:	d109      	bne.n	8004152 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004142:	2b01      	cmp	r3, #1
 8004144:	d005      	beq.n	8004152 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f003 ff5a 	bl	8008010 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f005 f901 	bl	8009368 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b08d      	sub	sp, #52	; 0x34
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f005 f9bf 	bl	8009512 <USB_GetMode>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 84b7 	bne.w	8004b0a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f005 f923 	bl	80093ec <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 84ad 	beq.w	8004b08 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f005 f910 	bl	80093ec <USB_ReadInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d107      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f002 0202 	and.w	r2, r2, #2
 80041e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f005 f8fe 	bl	80093ec <USB_ReadInterrupts>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d161      	bne.n	80042be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0210 	bic.w	r2, r2, #16
 8004208:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	0c5b      	lsrs	r3, r3, #17
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	2b02      	cmp	r3, #2
 8004234:	d124      	bne.n	8004280 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d035      	beq.n	80042ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800424c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004250:	b29b      	uxth	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6a38      	ldr	r0, [r7, #32]
 8004256:	f004 ff35 	bl	80090c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004266:	441a      	add	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004278:	441a      	add	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
 800427e:	e016      	b.n	80042ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	0c5b      	lsrs	r3, r3, #17
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	2b06      	cmp	r3, #6
 800428a:	d110      	bne.n	80042ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004292:	2208      	movs	r2, #8
 8004294:	4619      	mov	r1, r3
 8004296:	6a38      	ldr	r0, [r7, #32]
 8004298:	f004 ff14 	bl	80090c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042a8:	441a      	add	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0210 	orr.w	r2, r2, #16
 80042bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f005 f892 	bl	80093ec <USB_ReadInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042d2:	f040 80a7 	bne.w	8004424 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f005 f897 	bl	8009412 <USB_ReadDevAllOutEpInterrupt>
 80042e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042e6:	e099      	b.n	800441c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 808e 	beq.w	8004410 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	4611      	mov	r1, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f005 f8bb 	bl	800947a <USB_ReadDevOutEPInterrupt>
 8004304:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	2301      	movs	r3, #1
 8004320:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 feef 	bl	8005108 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	2308      	movs	r3, #8
 8004344:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 ffc5 	bl	80052d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	2310      	movs	r3, #16
 8004368:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d030      	beq.n	80043d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d109      	bne.n	8004394 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004392:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	3304      	adds	r3, #4
 80043a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	78db      	ldrb	r3, [r3, #3]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f00a fa7e 	bl	800e8c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	461a      	mov	r2, r3
 80043d2:	2302      	movs	r3, #2
 80043d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	461a      	mov	r2, r3
 80043ee:	2320      	movs	r3, #32
 80043f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d009      	beq.n	8004410 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800440e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	3301      	adds	r3, #1
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	f47f af62 	bne.w	80042e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f004 ffdf 	bl	80093ec <USB_ReadInterrupts>
 800442e:	4603      	mov	r3, r0
 8004430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004438:	f040 80db 	bne.w	80045f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f005 f800 	bl	8009446 <USB_ReadDevAllInEpInterrupt>
 8004446:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800444c:	e0cd      	b.n	80045ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80c2 	beq.w	80045de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f005 f826 	bl	80094b6 <USB_ReadDevInEPInterrupt>
 800446a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d057      	beq.n	8004526 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	2201      	movs	r2, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	43db      	mvns	r3, r3
 8004490:	69f9      	ldr	r1, [r7, #28]
 8004492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004496:	4013      	ands	r3, r2
 8004498:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	2301      	movs	r3, #1
 80044aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d132      	bne.n	800451a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334c      	adds	r3, #76	; 0x4c
 80044c4:	6819      	ldr	r1, [r3, #0]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4403      	add	r3, r0
 80044d4:	3348      	adds	r3, #72	; 0x48
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4419      	add	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4403      	add	r3, r0
 80044e8:	334c      	adds	r3, #76	; 0x4c
 80044ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <HAL_PCD_IRQHandler+0x3a2>
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3354      	adds	r3, #84	; 0x54
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004512:	461a      	mov	r2, r3
 8004514:	2101      	movs	r1, #1
 8004516:	f005 f82d 	bl	8009574 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f00a f948 	bl	800e7b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453c:	461a      	mov	r2, r3
 800453e:	2308      	movs	r3, #8
 8004540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	461a      	mov	r2, r3
 800455a:	2310      	movs	r3, #16
 800455c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	461a      	mov	r2, r3
 8004576:	2340      	movs	r3, #64	; 0x40
 8004578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d023      	beq.n	80045cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004586:	6a38      	ldr	r0, [r7, #32]
 8004588:	f003 ff0e 	bl	80083a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	3338      	adds	r3, #56	; 0x38
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	3304      	adds	r3, #4
 800459e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	78db      	ldrb	r3, [r3, #3]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d108      	bne.n	80045ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2200      	movs	r2, #0
 80045ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	4619      	mov	r1, r3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f00a f995 	bl	800e8e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	461a      	mov	r2, r3
 80045c8:	2302      	movs	r3, #2
 80045ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fd08 	bl	8004fee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	3301      	adds	r3, #1
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f47f af2e 	bne.w	800444e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f004 fef8 	bl	80093ec <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004606:	d122      	bne.n	800464e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004622:	2b01      	cmp	r3, #1
 8004624:	d108      	bne.n	8004638 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800462e:	2100      	movs	r1, #0
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f00a fb0f 	bl	800ec54 <HAL_PCDEx_LPM_Callback>
 8004636:	e002      	b.n	800463e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f00a f933 	bl	800e8a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800464c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f004 feca 	bl	80093ec <USB_ReadInterrupts>
 8004658:	4603      	mov	r3, r0
 800465a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004662:	d112      	bne.n	800468a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f00a f8ef 	bl	800e858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004688:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f004 feac 	bl	80093ec <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469e:	d121      	bne.n	80046e4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80046ae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d111      	bne.n	80046de <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80046d4:	2101      	movs	r1, #1
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f00a fabc 	bl	800ec54 <HAL_PCDEx_LPM_Callback>
 80046dc:	e002      	b.n	80046e4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f00a f8ba 	bl	800e858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 fe7f 	bl	80093ec <USB_ReadInterrupts>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f8:	f040 80b7 	bne.w	800486a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2110      	movs	r1, #16
 8004716:	4618      	mov	r0, r3
 8004718:	f003 fe46 	bl	80083a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800471c:	2300      	movs	r3, #0
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004720:	e046      	b.n	80047b0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472e:	461a      	mov	r2, r3
 8004730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004734:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004750:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004754:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	461a      	mov	r2, r3
 8004764:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004768:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004784:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004788:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	3301      	adds	r3, #1
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d3b3      	bcc.n	8004722 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e6:	f043 030b 	orr.w	r3, r3, #11
 80047ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fc:	f043 030b 	orr.w	r3, r3, #11
 8004800:	6453      	str	r3, [r2, #68]	; 0x44
 8004802:	e015      	b.n	8004830 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004816:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800481a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482a:	f043 030b 	orr.w	r3, r3, #11
 800482e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004842:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004854:	461a      	mov	r2, r3
 8004856:	f004 fe8d 	bl	8009574 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f004 fdbc 	bl	80093ec <USB_ReadInterrupts>
 8004874:	4603      	mov	r3, r0
 8004876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487e:	d124      	bne.n	80048ca <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f004 fe52 	bl	800952e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f003 fe07 	bl	80084a2 <USB_GetDevSpeed>
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681c      	ldr	r4, [r3, #0]
 80048a0:	f000 fec2 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 80048a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	4620      	mov	r0, r4
 80048b0:	f003 fb0c 	bl	8007ecc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f009 ffa6 	bl	800e806 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f004 fd8c 	bl	80093ec <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d10a      	bne.n	80048f4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f009 ff83 	bl	800e7ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f002 0208 	and.w	r2, r2, #8
 80048f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f004 fd77 	bl	80093ec <USB_ReadInterrupts>
 80048fe:	4603      	mov	r3, r0
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d122      	bne.n	800494e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004914:	2301      	movs	r3, #1
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	e014      	b.n	8004944 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d105      	bne.n	800493e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	b2db      	uxtb	r3, r3
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fb27 	bl	8004f8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	3301      	adds	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494a:	429a      	cmp	r2, r3
 800494c:	d3e5      	bcc.n	800491a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f004 fd4a 	bl	80093ec <USB_ReadInterrupts>
 8004958:	4603      	mov	r3, r0
 800495a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004962:	d13b      	bne.n	80049dc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004964:	2301      	movs	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	e02b      	b.n	80049c2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	3340      	adds	r3, #64	; 0x40
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d115      	bne.n	80049bc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004990:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004992:	2b00      	cmp	r3, #0
 8004994:	da12      	bge.n	80049bc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	333f      	adds	r3, #63	; 0x3f
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fae8 	bl	8004f8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	3301      	adds	r3, #1
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3ce      	bcc.n	800496a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f004 fd03 	bl	80093ec <USB_ReadInterrupts>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f0:	d155      	bne.n	8004a9e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049f2:	2301      	movs	r3, #1
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	e045      	b.n	8004a84 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d12e      	bne.n	8004a7e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	da2b      	bge.n	8004a7e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004a32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d121      	bne.n	8004a7e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a7a:	6053      	str	r3, [r2, #4]
            break;
 8004a7c:	e007      	b.n	8004a8e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	3301      	adds	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b4      	bcc.n	80049f8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f004 fca2 	bl	80093ec <USB_ReadInterrupts>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d10a      	bne.n	8004aca <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f009 ff27 	bl	800e908 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f004 fc8c 	bl	80093ec <USB_ReadInterrupts>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d115      	bne.n	8004b0a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f009 ff17 	bl	800e924 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	e000      	b.n	8004b0a <HAL_PCD_IRQHandler+0x992>
      return;
 8004b08:	bf00      	nop
    }
  }
}
 8004b0a:	3734      	adds	r7, #52	; 0x34
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}

08004b10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_PCD_SetAddress+0x1a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e013      	b.n	8004b52 <HAL_PCD_SetAddress+0x42>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f004 fbea 	bl	800931c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	4608      	mov	r0, r1
 8004b64:	4611      	mov	r1, r2
 8004b66:	461a      	mov	r2, r3
 8004b68:	4603      	mov	r3, r0
 8004b6a:	70fb      	strb	r3, [r7, #3]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	803b      	strh	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da0f      	bge.n	8004ba0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 020f 	and.w	r2, r3, #15
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	3338      	adds	r3, #56	; 0x38
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	4413      	add	r3, r2
 8004b94:	3304      	adds	r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	705a      	strb	r2, [r3, #1]
 8004b9e:	e00f      	b.n	8004bc0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bcc:	883a      	ldrh	r2, [r7, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	78ba      	ldrb	r2, [r7, #2]
 8004bd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bea:	78bb      	ldrb	r3, [r7, #2]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d102      	bne.n	8004bf6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_PCD_EP_Open+0xaa>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e00e      	b.n	8004c22 <HAL_PCD_EP_Open+0xc8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f003 fc6a 	bl	80084ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004c20:	7afb      	ldrb	r3, [r7, #11]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	da0f      	bge.n	8004c5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	3338      	adds	r3, #56	; 0x38
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	4413      	add	r3, r2
 8004c52:	3304      	adds	r3, #4
 8004c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	705a      	strb	r2, [r3, #1]
 8004c5c:	e00f      	b.n	8004c7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	f003 020f 	and.w	r2, r3, #15
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	3304      	adds	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_PCD_EP_Close+0x6e>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e00e      	b.n	8004cb6 <HAL_PCD_EP_Close+0x8c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68f9      	ldr	r1, [r7, #12]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f003 fca8 	bl	80085fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cce:	7afb      	ldrb	r3, [r7, #11]
 8004cd0:	f003 020f 	and.w	r2, r3, #15
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d00:	7afb      	ldrb	r3, [r7, #11]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d102      	bne.n	8004d1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d1a:	7afb      	ldrb	r3, [r7, #11]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6979      	ldr	r1, [r7, #20]
 8004d32:	f003 ff87 	bl	8008c44 <USB_EP0StartXfer>
 8004d36:	e008      	b.n	8004d4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	6979      	ldr	r1, [r7, #20]
 8004d46:	f003 fd35 	bl	80087b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 020f 	and.w	r2, r3, #15
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	460b      	mov	r3, r1
 8004d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d94:	7afb      	ldrb	r3, [r7, #11]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	3338      	adds	r3, #56	; 0x38
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	3304      	adds	r3, #4
 8004daa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc4:	7afb      	ldrb	r3, [r7, #11]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d102      	bne.n	8004dde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	6979      	ldr	r1, [r7, #20]
 8004df6:	f003 ff25 	bl	8008c44 <USB_EP0StartXfer>
 8004dfa:	e008      	b.n	8004e0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	f003 fcd3 	bl	80087b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d901      	bls.n	8004e36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e050      	b.n	8004ed8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da0f      	bge.n	8004e5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 020f 	and.w	r2, r3, #15
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	3338      	adds	r3, #56	; 0x38
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	3304      	adds	r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	705a      	strb	r2, [r3, #1]
 8004e5c:	e00d      	b.n	8004e7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4413      	add	r3, r2
 8004e70:	3304      	adds	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_PCD_EP_SetStall+0x82>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e01e      	b.n	8004ed8 <HAL_PCD_EP_SetStall+0xc0>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f004 f963 	bl	8009174 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	b2d9      	uxtb	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f004 fb53 	bl	8009574 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d901      	bls.n	8004efe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e042      	b.n	8004f84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da0f      	bge.n	8004f26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	3338      	adds	r3, #56	; 0x38
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	705a      	strb	r2, [r3, #1]
 8004f24:	e00f      	b.n	8004f46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_PCD_EP_ClrStall+0x86>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e00e      	b.n	8004f84 <HAL_PCD_EP_ClrStall+0xa4>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f004 f96b 	bl	8009250 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da0c      	bge.n	8004fba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	f003 020f 	and.w	r2, r3, #15
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	3338      	adds	r3, #56	; 0x38
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e00c      	b.n	8004fd4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	f003 020f 	and.w	r2, r3, #15
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4413      	add	r3, r2
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68f9      	ldr	r1, [r7, #12]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f003 ff8a 	bl	8008ef4 <USB_EPStopXfer>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004fe4:	7afb      	ldrb	r3, [r7, #11]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b08a      	sub	sp, #40	; 0x28
 8004ff2:	af02      	add	r7, sp, #8
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	3338      	adds	r3, #56	; 0x38
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	3304      	adds	r3, #4
 8005014:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	429a      	cmp	r2, r3
 8005020:	d901      	bls.n	8005026 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e06c      	b.n	8005100 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	429a      	cmp	r2, r3
 800503a:	d902      	bls.n	8005042 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3303      	adds	r3, #3
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800504a:	e02b      	b.n	80050a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	429a      	cmp	r2, r3
 8005060:	d902      	bls.n	8005068 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	3303      	adds	r3, #3
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6919      	ldr	r1, [r3, #16]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005080:	b2db      	uxtb	r3, r3
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	4603      	mov	r3, r0
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f003 ffde 	bl	8009048 <USB_WritePacket>

    ep->xfer_buff  += len;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	441a      	add	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	441a      	add	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d809      	bhi.n	80050ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d203      	bcs.n	80050ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1be      	bne.n	800504c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d811      	bhi.n	80050fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	2201      	movs	r2, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	6939      	ldr	r1, [r7, #16]
 80050f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fa:	4013      	ands	r3, r2
 80050fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	333c      	adds	r3, #60	; 0x3c
 8005120:	3304      	adds	r3, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d17b      	bne.n	8005236 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d015      	beq.n	8005174 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4a61      	ldr	r2, [pc, #388]	; (80052d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	f240 80b9 	bls.w	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80b3 	beq.w	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	461a      	mov	r2, r3
 800516c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005170:	6093      	str	r3, [r2, #8]
 8005172:	e0a7      	b.n	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	2320      	movs	r3, #32
 800518e:	6093      	str	r3, [r2, #8]
 8005190:	e098      	b.n	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 8093 	bne.w	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4a4b      	ldr	r2, [pc, #300]	; (80052d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d90f      	bls.n	80051c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c2:	6093      	str	r3, [r2, #8]
 80051c4:	e07e      	b.n	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	3304      	adds	r3, #4
 80051da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	0159      	lsls	r1, r3, #5
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	440b      	add	r3, r1
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d114      	bne.n	8005228 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005210:	461a      	mov	r2, r3
 8005212:	2101      	movs	r1, #1
 8005214:	f004 f9ae 	bl	8009574 <USB_EP0_OutStart>
 8005218:	e006      	b.n	8005228 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f009 faa6 	bl	800e780 <HAL_PCD_DataOutStageCallback>
 8005234:	e046      	b.n	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d124      	bne.n	8005288 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	461a      	mov	r2, r3
 8005256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525a:	6093      	str	r3, [r2, #8]
 800525c:	e032      	b.n	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	461a      	mov	r2, r3
 8005276:	2320      	movs	r3, #32
 8005278:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f009 fa7d 	bl	800e780 <HAL_PCD_DataOutStageCallback>
 8005286:	e01d      	b.n	80052c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d114      	bne.n	80052b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d108      	bne.n	80052b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052b0:	461a      	mov	r2, r3
 80052b2:	2100      	movs	r1, #0
 80052b4:	f004 f95e 	bl	8009574 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f009 fa5e 	bl	800e780 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	4f54300a 	.word	0x4f54300a
 80052d4:	4f54310a 	.word	0x4f54310a

080052d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	333c      	adds	r3, #60	; 0x3c
 80052f0:	3304      	adds	r3, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <PCD_EP_OutSetupPacket_int+0x88>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d90e      	bls.n	800532c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	461a      	mov	r2, r3
 8005326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f009 fa15 	bl	800e75c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <PCD_EP_OutSetupPacket_int+0x88>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d90c      	bls.n	8005354 <PCD_EP_OutSetupPacket_int+0x7c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d108      	bne.n	8005354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800534c:	461a      	mov	r2, r3
 800534e:	2101      	movs	r1, #1
 8005350:	f004 f910 	bl	8009574 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	4f54300a 	.word	0x4f54300a

08005364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
 8005370:	4613      	mov	r3, r2
 8005372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d107      	bne.n	8005392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005382:	883b      	ldrh	r3, [r7, #0]
 8005384:	0419      	lsls	r1, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	430a      	orrs	r2, r1
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
 8005390:	e028      	b.n	80053e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4413      	add	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	e00d      	b.n	80053c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	3340      	adds	r3, #64	; 0x40
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	0c1b      	lsrs	r3, r3, #16
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4413      	add	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	3301      	adds	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	7bfa      	ldrb	r2, [r7, #15]
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d3ec      	bcc.n	80053a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053cc:	883b      	ldrh	r3, [r7, #0]
 80053ce:	0418      	lsls	r0, r3, #16
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4302      	orrs	r2, r0
 80053dc:	3340      	adds	r3, #64	; 0x40
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	887a      	ldrh	r2, [r7, #2]
 8005404:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005446:	f043 0303 	orr.w	r3, r3, #3
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0cc      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005470:	4b68      	ldr	r3, [pc, #416]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d90c      	bls.n	8005498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b65      	ldr	r3, [pc, #404]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b63      	ldr	r3, [pc, #396]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0b8      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d020      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b0:	4b59      	ldr	r3, [pc, #356]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4a58      	ldr	r2, [pc, #352]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c8:	4b53      	ldr	r3, [pc, #332]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4a52      	ldr	r2, [pc, #328]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d4:	4b50      	ldr	r3, [pc, #320]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	494d      	ldr	r1, [pc, #308]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d044      	beq.n	800557c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d107      	bne.n	800550a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	4b47      	ldr	r3, [pc, #284]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d119      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e07f      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d003      	beq.n	800551a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005516:	2b03      	cmp	r3, #3
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551a:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e06f      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552a:	4b3b      	ldr	r3, [pc, #236]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e067      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f023 0203 	bic.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4934      	ldr	r1, [pc, #208]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	4313      	orrs	r3, r2
 800554a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800554c:	f7fd ff9e 	bl	800348c <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	e00a      	b.n	800556a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005554:	f7fd ff9a 	bl	800348c <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e04f      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 020c 	and.w	r2, r3, #12
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	429a      	cmp	r2, r3
 800557a:	d1eb      	bne.n	8005554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800557c:	4b25      	ldr	r3, [pc, #148]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d20c      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e032      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b0:	4b19      	ldr	r3, [pc, #100]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4916      	ldr	r1, [pc, #88]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ce:	4b12      	ldr	r3, [pc, #72]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	490e      	ldr	r1, [pc, #56]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055e2:	f000 fdc7 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 80055e6:	4602      	mov	r2, r0
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	490a      	ldr	r1, [pc, #40]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 80055f4:	5ccb      	ldrb	r3, [r1, r3]
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	4a09      	ldr	r2, [pc, #36]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_RCC_ClockConfig+0x1c8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fd fefe 	bl	8003404 <HAL_InitTick>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40023c00 	.word	0x40023c00
 8005618:	40023800 	.word	0x40023800
 800561c:	080140e8 	.word	0x080140e8
 8005620:	20000004 	.word	0x20000004
 8005624:	20000008 	.word	0x20000008

08005628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_RCC_GetHCLKFreq+0x14>)
 800562e:	681b      	ldr	r3, [r3, #0]
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000004 	.word	0x20000004

08005640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005644:	f7ff fff0 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0a9b      	lsrs	r3, r3, #10
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4903      	ldr	r1, [pc, #12]	; (8005664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40023800 	.word	0x40023800
 8005664:	080140f8 	.word	0x080140f8

08005668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800566c:	f7ff ffdc 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005670:	4602      	mov	r2, r0
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	0b5b      	lsrs	r3, r3, #13
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	4903      	ldr	r1, [pc, #12]	; (800568c <HAL_RCC_GetPCLK2Freq+0x24>)
 800567e:	5ccb      	ldrb	r3, [r1, r3]
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005684:	4618      	mov	r0, r3
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40023800 	.word	0x40023800
 800568c:	080140f8 	.word	0x080140f8

08005690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	; 0x30
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80056c8:	4b6f      	ldr	r3, [pc, #444]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	496c      	ldr	r1, [pc, #432]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80056e6:	2301      	movs	r3, #1
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80056f6:	4b64      	ldr	r3, [pc, #400]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005704:	4960      	ldr	r1, [pc, #384]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005714:	2301      	movs	r3, #1
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005724:	4b58      	ldr	r3, [pc, #352]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	4955      	ldr	r1, [pc, #340]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005742:	d101      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005744:	2301      	movs	r3, #1
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005750:	2301      	movs	r3, #1
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005760:	4b49      	ldr	r3, [pc, #292]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	4946      	ldr	r1, [pc, #280]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800577e:	d101      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005780:	2301      	movs	r3, #1
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800578c:	2301      	movs	r3, #1
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 808a 	beq.w	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	4b39      	ldr	r3, [pc, #228]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	4a38      	ldr	r2, [pc, #224]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6413      	str	r3, [r2, #64]	; 0x40
 80057ae:	4b36      	ldr	r3, [pc, #216]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057ba:	4b34      	ldr	r3, [pc, #208]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a33      	ldr	r2, [pc, #204]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057c6:	f7fd fe61 	bl	800348c <HAL_GetTick>
 80057ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ce:	f7fd fe5d 	bl	800348c <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e278      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057e0:	4b2a      	ldr	r3, [pc, #168]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ec:	4b26      	ldr	r3, [pc, #152]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	429a      	cmp	r2, r3
 8005808:	d028      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800580a:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005812:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005814:	4b1e      	ldr	r3, [pc, #120]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005820:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005826:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b01      	cmp	r3, #1
 8005830:	d114      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005832:	f7fd fe2b 	bl	800348c <HAL_GetTick>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005838:	e00a      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fd fe27 	bl	800348c <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e240      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ee      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005868:	d114      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800587a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587e:	4902      	ldr	r1, [pc, #8]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	608b      	str	r3, [r1, #8]
 8005884:	e00c      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000
 8005890:	42470e40 	.word	0x42470e40
 8005894:	4b4a      	ldr	r3, [pc, #296]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4a49      	ldr	r2, [pc, #292]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800589a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800589e:	6093      	str	r3, [r2, #8]
 80058a0:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ac:	4944      	ldr	r1, [pc, #272]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80058c4:	4b3f      	ldr	r3, [pc, #252]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80058c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80058d4:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e2:	4937      	ldr	r1, [pc, #220]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058f6:	4b32      	ldr	r3, [pc, #200]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005904:	492e      	ldr	r1, [pc, #184]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005918:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800591a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800591e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	4926      	ldr	r1, [pc, #152]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005936:	d101      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005938:	2301      	movs	r3, #1
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800594a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	491a      	ldr	r1, [pc, #104]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005966:	2b00      	cmp	r3, #0
 8005968:	d011      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800596c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005970:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	4911      	ldr	r1, [pc, #68]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005988:	d101      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800598a:	2301      	movs	r3, #1
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d005      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599c:	f040 80ff 	bne.w	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059a0:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059a6:	f7fd fd71 	bl	800348c <HAL_GetTick>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059ac:	e00e      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ae:	f7fd fd6d 	bl	800348c <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d907      	bls.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e188      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80059c0:	40023800 	.word	0x40023800
 80059c4:	424711e0 	.word	0x424711e0
 80059c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059cc:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ea      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d028      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d124      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005a00:	4b71      	ldr	r3, [pc, #452]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a12:	4b6d      	ldr	r3, [pc, #436]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	019b      	lsls	r3, r3, #6
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	3b01      	subs	r3, #1
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	431a      	orrs	r2, r3
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	061b      	lsls	r3, r3, #24
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	071b      	lsls	r3, r3, #28
 8005a42:	4961      	ldr	r1, [pc, #388]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d035      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a74:	d130      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005a76:	4b54      	ldr	r3, [pc, #336]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	3301      	adds	r3, #1
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a88:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8e:	0f1b      	lsrs	r3, r3, #28
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	019b      	lsls	r3, r3, #6
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	071b      	lsls	r3, r3, #28
 8005ab8:	4943      	ldr	r1, [pc, #268]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ac0:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac6:	f023 021f 	bic.w	r2, r3, #31
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	493d      	ldr	r1, [pc, #244]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d029      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aec:	d124      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005aee:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	3301      	adds	r3, #1
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b00:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b06:	0f1b      	lsrs	r3, r3, #28
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	019b      	lsls	r3, r3, #6
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	3b01      	subs	r3, #1
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	431a      	orrs	r2, r3
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	061b      	lsls	r3, r3, #24
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	071b      	lsls	r3, r3, #28
 8005b30:	4925      	ldr	r1, [pc, #148]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d016      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	3b01      	subs	r3, #1
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	071b      	lsls	r3, r3, #28
 8005b6a:	4917      	ldr	r1, [pc, #92]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b78:	f7fd fc88 	bl	800348c <HAL_GetTick>
 8005b7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b80:	f7fd fc84 	bl	800348c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e09f      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	f040 8095 	bne.w	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bac:	f7fd fc6e 	bl	800348c <HAL_GetTick>
 8005bb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bb2:	e00f      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005bb4:	f7fd fc6a 	bl	800348c <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d908      	bls.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e085      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005bc6:	bf00      	nop
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	42470068 	.word	0x42470068
 8005bd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bd4:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be0:	d0e8      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d02b      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d127      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005c0a:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	431a      	orrs	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	041b      	lsls	r3, r3, #16
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	061b      	lsls	r3, r3, #24
 8005c38:	4928      	ldr	r1, [pc, #160]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c40:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	4922      	ldr	r1, [pc, #136]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01d      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c6e:	d118      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c70:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	0e1b      	lsrs	r3, r3, #24
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	019b      	lsls	r3, r3, #6
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	3b01      	subs	r3, #1
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	061b      	lsls	r3, r3, #24
 8005c9a:	4910      	ldr	r1, [pc, #64]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca8:	f7fd fbf0 	bl	800348c <HAL_GetTick>
 8005cac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005cb0:	f7fd fbec 	bl	800348c <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e007      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cce:	d1ef      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3730      	adds	r7, #48	; 0x30
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	42470070 	.word	0x42470070

08005ce4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b089      	sub	sp, #36	; 0x24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	2b07      	cmp	r3, #7
 8005d0a:	f200 8224 	bhi.w	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005f17 	.word	0x08005f17
 8005d18:	08006041 	.word	0x08006041
 8005d1c:	08006157 	.word	0x08006157
 8005d20:	08005d35 	.word	0x08005d35
 8005d24:	08006157 	.word	0x08006157
 8005d28:	08006157 	.word	0x08006157
 8005d2c:	08006157 	.word	0x08006157
 8005d30:	08005d35 	.word	0x08005d35
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8005d34:	4ba8      	ldr	r3, [pc, #672]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d3a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d4a:	f000 80d6 	beq.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d54:	f200 80dd 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d5e:	f000 809f 	beq.w	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d68:	f200 80d3 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d72:	d05b      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d7a:	f200 80ca 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d84:	f000 80b6 	beq.w	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d8e:	f200 80c0 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d98:	f000 8082 	beq.w	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da2:	f200 80b6 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db2:	d03b      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8005db4:	e0ad      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005db6:	4b88      	ldr	r3, [pc, #544]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dcc:	4a83      	ldr	r2, [pc, #524]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e008      	b.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8005dd6:	4b80      	ldr	r3, [pc, #512]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de0:	4a7f      	ldr	r2, [pc, #508]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8005de8:	4b7b      	ldr	r3, [pc, #492]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dee:	0e1b      	lsrs	r3, r3, #24
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8005df6:	4b78      	ldr	r3, [pc, #480]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfc:	099b      	lsrs	r3, r3, #6
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	fb03 f202 	mul.w	r2, r3, r2
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8005e10:	4b71      	ldr	r3, [pc, #452]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	61fb      	str	r3, [r7, #28]
          break;
 8005e2a:	e073      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e38:	4b67      	ldr	r3, [pc, #412]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e42:	4a66      	ldr	r2, [pc, #408]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e008      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8005e4c:	4b62      	ldr	r3, [pc, #392]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e56:	4a62      	ldr	r2, [pc, #392]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8005e5e:	4b5e      	ldr	r3, [pc, #376]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e64:	0e1b      	lsrs	r3, r3, #24
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8005e6c:	4b5a      	ldr	r3, [pc, #360]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e72:	099b      	lsrs	r3, r3, #6
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	fb03 f202 	mul.w	r2, r3, r2
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8005e86:	4b54      	ldr	r3, [pc, #336]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	3301      	adds	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	61fb      	str	r3, [r7, #28]
          break;
 8005e9e:	e039      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005ea0:	4b4d      	ldr	r3, [pc, #308]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eac:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb4:	4a49      	ldr	r2, [pc, #292]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e007      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005ebe:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec6:	4a46      	ldr	r2, [pc, #280]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8005ece:	4b42      	ldr	r3, [pc, #264]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	0f1b      	lsrs	r3, r3, #28
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8005eda:	4b3f      	ldr	r3, [pc, #252]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	099b      	lsrs	r3, r3, #6
 8005ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	fb03 f202 	mul.w	r2, r3, r2
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	61fb      	str	r3, [r7, #28]
          break;
 8005ef2:	e00f      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ef4:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005ef6:	61fb      	str	r3, [r7, #28]
          break;
 8005ef8:	e00c      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005efa:	4b37      	ldr	r3, [pc, #220]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8005f06:	4b35      	ldr	r3, [pc, #212]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005f08:	61fb      	str	r3, [r7, #28]
          break;
 8005f0a:	e003      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8005f0c:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005f0e:	61fb      	str	r3, [r7, #28]
          break;
 8005f10:	e000      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8005f12:	bf00      	nop
        }
      }
      break;
 8005f14:	e11f      	b.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005f16:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f1c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005f28:	d079      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005f30:	f200 8082 	bhi.w	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f3a:	d03c      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f42:	d879      	bhi.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d006      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f50:	d172      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005f54:	61fb      	str	r3, [r7, #28]
          break;
 8005f56:	e072      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f58:	4b1f      	ldr	r3, [pc, #124]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f64:	d109      	bne.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f66:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f70:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e008      	b.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f84:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f8c:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f92:	099b      	lsrs	r3, r3, #6
 8005f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa6:	0f1b      	lsrs	r3, r3, #28
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	61fb      	str	r3, [r7, #28]
          break;
 8005fb4:	e043      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fcc:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	e010      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005fd6:	bf00      	nop
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	00f42400 	.word	0x00f42400
 8005fe0:	00b71b00 	.word	0x00b71b00
 8005fe4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fe8:	4b5e      	ldr	r3, [pc, #376]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff0:	4a5d      	ldr	r2, [pc, #372]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005ff8:	4b5a      	ldr	r3, [pc, #360]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	099b      	lsrs	r3, r3, #6
 8005ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800600a:	4b56      	ldr	r3, [pc, #344]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	0f1b      	lsrs	r3, r3, #28
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	61fb      	str	r3, [r7, #28]
          break;
 800601c:	e00f      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800601e:	4b51      	ldr	r3, [pc, #324]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800602a:	d102      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800602c:	4b4f      	ldr	r3, [pc, #316]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800602e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006030:	e005      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8006032:	4b4d      	ldr	r3, [pc, #308]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006034:	61fb      	str	r3, [r7, #28]
          break;
 8006036:	e002      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	61fb      	str	r3, [r7, #28]
          break;
 800603c:	bf00      	nop
        }
      }
      break;
 800603e:	e08a      	b.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8006040:	4b48      	ldr	r3, [pc, #288]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006046:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006052:	d06f      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800605a:	d878      	bhi.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006062:	d03c      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800606a:	d870      	bhi.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d006      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006078:	d169      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800607a:	4b3d      	ldr	r3, [pc, #244]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800607c:	61fb      	str	r3, [r7, #28]
          break;
 800607e:	e069      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006080:	4b38      	ldr	r3, [pc, #224]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608c:	d109      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800608e:	4b35      	ldr	r3, [pc, #212]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006098:	4a34      	ldr	r2, [pc, #208]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	e008      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80060a2:	4b30      	ldr	r3, [pc, #192]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80060a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ac:	4a2e      	ldr	r2, [pc, #184]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80060b4:	4b2b      	ldr	r3, [pc, #172]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ba:	099b      	lsrs	r3, r3, #6
 80060bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80060c8:	4b26      	ldr	r3, [pc, #152]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80060ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ce:	0f1b      	lsrs	r3, r3, #28
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	61fb      	str	r3, [r7, #28]
          break;
 80060dc:	e03a      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80060de:	4b21      	ldr	r3, [pc, #132]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ea:	d108      	bne.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80060f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e007      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060fe:	4b19      	ldr	r3, [pc, #100]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006106:	4a18      	ldr	r2, [pc, #96]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	099b      	lsrs	r3, r3, #6
 8006114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	0f1b      	lsrs	r3, r3, #28
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	61fb      	str	r3, [r7, #28]
          break;
 8006132:	e00f      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006140:	d102      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006144:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006146:	e005      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8006148:	4b07      	ldr	r3, [pc, #28]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800614a:	61fb      	str	r3, [r7, #28]
          break;
 800614c:	e002      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
          break;
 8006152:	bf00      	nop
        }
      }
      break;
 8006154:	bf00      	nop
    }
  }
  return frequency;
 8006156:	69fb      	ldr	r3, [r7, #28]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3724      	adds	r7, #36	; 0x24
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40023800 	.word	0x40023800
 8006168:	00f42400 	.word	0x00f42400
 800616c:	00b71b00 	.word	0x00b71b00
 8006170:	00bb8000 	.word	0x00bb8000

08006174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006178:	b0a6      	sub	sp, #152	; 0x98
 800617a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800619a:	4bc8      	ldr	r3, [pc, #800]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	f200 817e 	bhi.w	80064a4 <HAL_RCC_GetSysClockFreq+0x330>
 80061a8:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	080064a5 	.word	0x080064a5
 80061b8:	080064a5 	.word	0x080064a5
 80061bc:	080064a5 	.word	0x080064a5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	080064a5 	.word	0x080064a5
 80061c8:	080064a5 	.word	0x080064a5
 80061cc:	080064a5 	.word	0x080064a5
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080064a5 	.word	0x080064a5
 80061d8:	080064a5 	.word	0x080064a5
 80061dc:	080064a5 	.word	0x080064a5
 80061e0:	0800635f 	.word	0x0800635f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061e4:	4bb6      	ldr	r3, [pc, #728]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80061e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80061ea:	e15f      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ec:	4bb5      	ldr	r3, [pc, #724]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x350>)
 80061ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80061f2:	e15b      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061f4:	4bb1      	ldr	r3, [pc, #708]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006200:	4bae      	ldr	r3, [pc, #696]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d031      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620c:	4bab      	ldr	r3, [pc, #684]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	099b      	lsrs	r3, r3, #6
 8006212:	2200      	movs	r2, #0
 8006214:	66bb      	str	r3, [r7, #104]	; 0x68
 8006216:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800621a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621e:	663b      	str	r3, [r7, #96]	; 0x60
 8006220:	2300      	movs	r3, #0
 8006222:	667b      	str	r3, [r7, #100]	; 0x64
 8006224:	4ba7      	ldr	r3, [pc, #668]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x350>)
 8006226:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800622a:	462a      	mov	r2, r5
 800622c:	fb03 f202 	mul.w	r2, r3, r2
 8006230:	2300      	movs	r3, #0
 8006232:	4621      	mov	r1, r4
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	4413      	add	r3, r2
 800623a:	4aa2      	ldr	r2, [pc, #648]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800623c:	4621      	mov	r1, r4
 800623e:	fba1 1202 	umull	r1, r2, r1, r2
 8006242:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006244:	460a      	mov	r2, r1
 8006246:	67ba      	str	r2, [r7, #120]	; 0x78
 8006248:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800624a:	4413      	add	r3, r2
 800624c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800624e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006252:	2200      	movs	r2, #0
 8006254:	65bb      	str	r3, [r7, #88]	; 0x58
 8006256:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006258:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800625c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006260:	f7fa fd32 	bl	8000cc8 <__aeabi_uldivmod>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4613      	mov	r3, r2
 800626a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800626e:	e064      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006270:	4b92      	ldr	r3, [pc, #584]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	099b      	lsrs	r3, r3, #6
 8006276:	2200      	movs	r2, #0
 8006278:	653b      	str	r3, [r7, #80]	; 0x50
 800627a:	657a      	str	r2, [r7, #84]	; 0x54
 800627c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	64bb      	str	r3, [r7, #72]	; 0x48
 8006284:	2300      	movs	r3, #0
 8006286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006288:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800628c:	4622      	mov	r2, r4
 800628e:	462b      	mov	r3, r5
 8006290:	f04f 0000 	mov.w	r0, #0
 8006294:	f04f 0100 	mov.w	r1, #0
 8006298:	0159      	lsls	r1, r3, #5
 800629a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800629e:	0150      	lsls	r0, r2, #5
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4621      	mov	r1, r4
 80062a6:	1a51      	subs	r1, r2, r1
 80062a8:	6139      	str	r1, [r7, #16]
 80062aa:	4629      	mov	r1, r5
 80062ac:	eb63 0301 	sbc.w	r3, r3, r1
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	f04f 0300 	mov.w	r3, #0
 80062ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062be:	4659      	mov	r1, fp
 80062c0:	018b      	lsls	r3, r1, #6
 80062c2:	4651      	mov	r1, sl
 80062c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062c8:	4651      	mov	r1, sl
 80062ca:	018a      	lsls	r2, r1, #6
 80062cc:	4651      	mov	r1, sl
 80062ce:	ebb2 0801 	subs.w	r8, r2, r1
 80062d2:	4659      	mov	r1, fp
 80062d4:	eb63 0901 	sbc.w	r9, r3, r1
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ec:	4690      	mov	r8, r2
 80062ee:	4699      	mov	r9, r3
 80062f0:	4623      	mov	r3, r4
 80062f2:	eb18 0303 	adds.w	r3, r8, r3
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	462b      	mov	r3, r5
 80062fa:	eb49 0303 	adc.w	r3, r9, r3
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800630c:	4629      	mov	r1, r5
 800630e:	028b      	lsls	r3, r1, #10
 8006310:	4621      	mov	r1, r4
 8006312:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006316:	4621      	mov	r1, r4
 8006318:	028a      	lsls	r2, r1, #10
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006322:	2200      	movs	r2, #0
 8006324:	643b      	str	r3, [r7, #64]	; 0x40
 8006326:	647a      	str	r2, [r7, #68]	; 0x44
 8006328:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800632c:	f7fa fccc 	bl	8000cc8 <__aeabi_uldivmod>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4613      	mov	r3, r2
 8006336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800633a:	4b60      	ldr	r3, [pc, #384]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	0c1b      	lsrs	r3, r3, #16
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	3301      	adds	r3, #1
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800634c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800635c:	e0a6      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800635e:	4b57      	ldr	r3, [pc, #348]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636a:	4b54      	ldr	r3, [pc, #336]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d02a      	beq.n	80063cc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006376:	4b51      	ldr	r3, [pc, #324]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	099b      	lsrs	r3, r3, #6
 800637c:	2200      	movs	r2, #0
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006380:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006388:	2100      	movs	r1, #0
 800638a:	4b4e      	ldr	r3, [pc, #312]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800638c:	fb03 f201 	mul.w	r2, r3, r1
 8006390:	2300      	movs	r3, #0
 8006392:	fb00 f303 	mul.w	r3, r0, r3
 8006396:	4413      	add	r3, r2
 8006398:	4a4a      	ldr	r2, [pc, #296]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800639a:	fba0 1202 	umull	r1, r2, r0, r2
 800639e:	677a      	str	r2, [r7, #116]	; 0x74
 80063a0:	460a      	mov	r2, r1
 80063a2:	673a      	str	r2, [r7, #112]	; 0x70
 80063a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80063a6:	4413      	add	r3, r2
 80063a8:	677b      	str	r3, [r7, #116]	; 0x74
 80063aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ae:	2200      	movs	r2, #0
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
 80063b2:	637a      	str	r2, [r7, #52]	; 0x34
 80063b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80063bc:	f7fa fc84 	bl	8000cc8 <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4613      	mov	r3, r2
 80063c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063ca:	e05b      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063cc:	4b3b      	ldr	r3, [pc, #236]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	099b      	lsrs	r3, r3, #6
 80063d2:	2200      	movs	r2, #0
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	623b      	str	r3, [r7, #32]
 80063e0:	2300      	movs	r3, #0
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
 80063e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	f04f 0000 	mov.w	r0, #0
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	0159      	lsls	r1, r3, #5
 80063f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063fa:	0150      	lsls	r0, r2, #5
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4641      	mov	r1, r8
 8006402:	ebb2 0a01 	subs.w	sl, r2, r1
 8006406:	4649      	mov	r1, r9
 8006408:	eb63 0b01 	sbc.w	fp, r3, r1
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006418:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800641c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006420:	ebb2 040a 	subs.w	r4, r2, sl
 8006424:	eb63 050b 	sbc.w	r5, r3, fp
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	00eb      	lsls	r3, r5, #3
 8006432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006436:	00e2      	lsls	r2, r4, #3
 8006438:	4614      	mov	r4, r2
 800643a:	461d      	mov	r5, r3
 800643c:	4643      	mov	r3, r8
 800643e:	18e3      	adds	r3, r4, r3
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	464b      	mov	r3, r9
 8006444:	eb45 0303 	adc.w	r3, r5, r3
 8006448:	607b      	str	r3, [r7, #4]
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006456:	4629      	mov	r1, r5
 8006458:	028b      	lsls	r3, r1, #10
 800645a:	4621      	mov	r1, r4
 800645c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006460:	4621      	mov	r1, r4
 8006462:	028a      	lsls	r2, r1, #10
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800646c:	2200      	movs	r2, #0
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006476:	f7fa fc27 	bl	8000cc8 <__aeabi_uldivmod>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4613      	mov	r3, r2
 8006480:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006484:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <HAL_RCC_GetSysClockFreq+0x348>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	0f1b      	lsrs	r3, r3, #28
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80064a2:	e003      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80064a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80064aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3798      	adds	r7, #152	; 0x98
 80064b4:	46bd      	mov	sp, r7
 80064b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800
 80064c0:	00f42400 	.word	0x00f42400
 80064c4:	00b71b00 	.word	0x00b71b00

080064c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e28d      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8083 	beq.w	80065ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064e8:	4b94      	ldr	r3, [pc, #592]	; (800673c <HAL_RCC_OscConfig+0x274>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 030c 	and.w	r3, r3, #12
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d019      	beq.n	8006528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80064f4:	4b91      	ldr	r3, [pc, #580]	; (800673c <HAL_RCC_OscConfig+0x274>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d106      	bne.n	800650e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006500:	4b8e      	ldr	r3, [pc, #568]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800650c:	d00c      	beq.n	8006528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800650e:	4b8b      	ldr	r3, [pc, #556]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006516:	2b0c      	cmp	r3, #12
 8006518:	d112      	bne.n	8006540 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800651a:	4b88      	ldr	r3, [pc, #544]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006526:	d10b      	bne.n	8006540 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006528:	4b84      	ldr	r3, [pc, #528]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d05b      	beq.n	80065ec <HAL_RCC_OscConfig+0x124>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d157      	bne.n	80065ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e25a      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d106      	bne.n	8006558 <HAL_RCC_OscConfig+0x90>
 800654a:	4b7c      	ldr	r3, [pc, #496]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a7b      	ldr	r2, [pc, #492]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e01d      	b.n	8006594 <HAL_RCC_OscConfig+0xcc>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006560:	d10c      	bne.n	800657c <HAL_RCC_OscConfig+0xb4>
 8006562:	4b76      	ldr	r3, [pc, #472]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a75      	ldr	r2, [pc, #468]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	4b73      	ldr	r3, [pc, #460]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a72      	ldr	r2, [pc, #456]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	e00b      	b.n	8006594 <HAL_RCC_OscConfig+0xcc>
 800657c:	4b6f      	ldr	r3, [pc, #444]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a6e      	ldr	r2, [pc, #440]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	4b6c      	ldr	r3, [pc, #432]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a6b      	ldr	r2, [pc, #428]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800658e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d013      	beq.n	80065c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fc ff76 	bl	800348c <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065a4:	f7fc ff72 	bl	800348c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b64      	cmp	r3, #100	; 0x64
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e21f      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b6:	4b61      	ldr	r3, [pc, #388]	; (800673c <HAL_RCC_OscConfig+0x274>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0f0      	beq.n	80065a4 <HAL_RCC_OscConfig+0xdc>
 80065c2:	e014      	b.n	80065ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fc ff62 	bl	800348c <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065cc:	f7fc ff5e 	bl	800348c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	; 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e20b      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065de:	4b57      	ldr	r3, [pc, #348]	; (800673c <HAL_RCC_OscConfig+0x274>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f0      	bne.n	80065cc <HAL_RCC_OscConfig+0x104>
 80065ea:	e000      	b.n	80065ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d06f      	beq.n	80066da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80065fa:	4b50      	ldr	r3, [pc, #320]	; (800673c <HAL_RCC_OscConfig+0x274>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 030c 	and.w	r3, r3, #12
 8006602:	2b00      	cmp	r3, #0
 8006604:	d017      	beq.n	8006636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006606:	4b4d      	ldr	r3, [pc, #308]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800660e:	2b08      	cmp	r3, #8
 8006610:	d105      	bne.n	800661e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006612:	4b4a      	ldr	r3, [pc, #296]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800661e:	4b47      	ldr	r3, [pc, #284]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006626:	2b0c      	cmp	r3, #12
 8006628:	d11c      	bne.n	8006664 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800662a:	4b44      	ldr	r3, [pc, #272]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d116      	bne.n	8006664 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006636:	4b41      	ldr	r3, [pc, #260]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <HAL_RCC_OscConfig+0x186>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d001      	beq.n	800664e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e1d3      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664e:	4b3b      	ldr	r3, [pc, #236]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4937      	ldr	r1, [pc, #220]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800665e:	4313      	orrs	r3, r2
 8006660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006662:	e03a      	b.n	80066da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800666c:	4b34      	ldr	r3, [pc, #208]	; (8006740 <HAL_RCC_OscConfig+0x278>)
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006672:	f7fc ff0b 	bl	800348c <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800667a:	f7fc ff07 	bl	800348c <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e1b4      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668c:	4b2b      	ldr	r3, [pc, #172]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006698:	4b28      	ldr	r3, [pc, #160]	; (800673c <HAL_RCC_OscConfig+0x274>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4925      	ldr	r1, [pc, #148]	; (800673c <HAL_RCC_OscConfig+0x274>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	e015      	b.n	80066da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <HAL_RCC_OscConfig+0x278>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fc feea 	bl	800348c <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066bc:	f7fc fee6 	bl	800348c <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e193      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ce:	4b1b      	ldr	r3, [pc, #108]	; (800673c <HAL_RCC_OscConfig+0x274>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d036      	beq.n	8006754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ee:	4b15      	ldr	r3, [pc, #84]	; (8006744 <HAL_RCC_OscConfig+0x27c>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f4:	f7fc feca 	bl	800348c <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066fc:	f7fc fec6 	bl	800348c <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e173      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670e:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_OscConfig+0x274>)
 8006710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x234>
 800671a:	e01b      	b.n	8006754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <HAL_RCC_OscConfig+0x27c>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006722:	f7fc feb3 	bl	800348c <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006728:	e00e      	b.n	8006748 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800672a:	f7fc feaf 	bl	800348c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d907      	bls.n	8006748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e15c      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
 800673c:	40023800 	.word	0x40023800
 8006740:	42470000 	.word	0x42470000
 8006744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006748:	4b8a      	ldr	r3, [pc, #552]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800674a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1ea      	bne.n	800672a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8097 	beq.w	8006890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006766:	4b83      	ldr	r3, [pc, #524]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10f      	bne.n	8006792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	4b7f      	ldr	r3, [pc, #508]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	4a7e      	ldr	r2, [pc, #504]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800677c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006780:	6413      	str	r3, [r2, #64]	; 0x40
 8006782:	4b7c      	ldr	r3, [pc, #496]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678a:	60bb      	str	r3, [r7, #8]
 800678c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800678e:	2301      	movs	r3, #1
 8006790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006792:	4b79      	ldr	r3, [pc, #484]	; (8006978 <HAL_RCC_OscConfig+0x4b0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679a:	2b00      	cmp	r3, #0
 800679c:	d118      	bne.n	80067d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800679e:	4b76      	ldr	r3, [pc, #472]	; (8006978 <HAL_RCC_OscConfig+0x4b0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a75      	ldr	r2, [pc, #468]	; (8006978 <HAL_RCC_OscConfig+0x4b0>)
 80067a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067aa:	f7fc fe6f 	bl	800348c <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067b2:	f7fc fe6b 	bl	800348c <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e118      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c4:	4b6c      	ldr	r3, [pc, #432]	; (8006978 <HAL_RCC_OscConfig+0x4b0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d106      	bne.n	80067e6 <HAL_RCC_OscConfig+0x31e>
 80067d8:	4b66      	ldr	r3, [pc, #408]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	4a65      	ldr	r2, [pc, #404]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	6713      	str	r3, [r2, #112]	; 0x70
 80067e4:	e01c      	b.n	8006820 <HAL_RCC_OscConfig+0x358>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	d10c      	bne.n	8006808 <HAL_RCC_OscConfig+0x340>
 80067ee:	4b61      	ldr	r3, [pc, #388]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	4a60      	ldr	r2, [pc, #384]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 80067f4:	f043 0304 	orr.w	r3, r3, #4
 80067f8:	6713      	str	r3, [r2, #112]	; 0x70
 80067fa:	4b5e      	ldr	r3, [pc, #376]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a5d      	ldr	r2, [pc, #372]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
 8006806:	e00b      	b.n	8006820 <HAL_RCC_OscConfig+0x358>
 8006808:	4b5a      	ldr	r3, [pc, #360]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800680a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680c:	4a59      	ldr	r2, [pc, #356]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800680e:	f023 0301 	bic.w	r3, r3, #1
 8006812:	6713      	str	r3, [r2, #112]	; 0x70
 8006814:	4b57      	ldr	r3, [pc, #348]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006818:	4a56      	ldr	r2, [pc, #344]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800681a:	f023 0304 	bic.w	r3, r3, #4
 800681e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d015      	beq.n	8006854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fc fe30 	bl	800348c <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800682e:	e00a      	b.n	8006846 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006830:	f7fc fe2c 	bl	800348c <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f241 3288 	movw	r2, #5000	; 0x1388
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e0d7      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006846:	4b4b      	ldr	r3, [pc, #300]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0ee      	beq.n	8006830 <HAL_RCC_OscConfig+0x368>
 8006852:	e014      	b.n	800687e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fc fe1a 	bl	800348c <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800685a:	e00a      	b.n	8006872 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800685c:	f7fc fe16 	bl	800348c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	f241 3288 	movw	r2, #5000	; 0x1388
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e0c1      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006872:	4b40      	ldr	r3, [pc, #256]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1ee      	bne.n	800685c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d105      	bne.n	8006890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	4a3a      	ldr	r2, [pc, #232]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800688a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800688e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80ad 	beq.w	80069f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800689a:	4b36      	ldr	r3, [pc, #216]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 030c 	and.w	r3, r3, #12
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d060      	beq.n	8006968 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d145      	bne.n	800693a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ae:	4b33      	ldr	r3, [pc, #204]	; (800697c <HAL_RCC_OscConfig+0x4b4>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b4:	f7fc fdea 	bl	800348c <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068bc:	f7fc fde6 	bl	800348c <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e093      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ce:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f0      	bne.n	80068bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69da      	ldr	r2, [r3, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	3b01      	subs	r3, #1
 80068f4:	041b      	lsls	r3, r3, #16
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	061b      	lsls	r3, r3, #24
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	071b      	lsls	r3, r3, #28
 8006906:	491b      	ldr	r1, [pc, #108]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 8006908:	4313      	orrs	r3, r2
 800690a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800690c:	4b1b      	ldr	r3, [pc, #108]	; (800697c <HAL_RCC_OscConfig+0x4b4>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006912:	f7fc fdbb 	bl	800348c <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800691a:	f7fc fdb7 	bl	800348c <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e064      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800692c:	4b11      	ldr	r3, [pc, #68]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x452>
 8006938:	e05c      	b.n	80069f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <HAL_RCC_OscConfig+0x4b4>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006940:	f7fc fda4 	bl	800348c <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006948:	f7fc fda0 	bl	800348c <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e04d      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <HAL_RCC_OscConfig+0x4ac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f0      	bne.n	8006948 <HAL_RCC_OscConfig+0x480>
 8006966:	e045      	b.n	80069f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e040      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
 8006974:	40023800 	.word	0x40023800
 8006978:	40007000 	.word	0x40007000
 800697c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006980:	4b1f      	ldr	r3, [pc, #124]	; (8006a00 <HAL_RCC_OscConfig+0x538>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d030      	beq.n	80069f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d129      	bne.n	80069f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d122      	bne.n	80069f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069b0:	4013      	ands	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d119      	bne.n	80069f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	3b01      	subs	r3, #1
 80069ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d10f      	bne.n	80069f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069dc:	429a      	cmp	r2, r3
 80069de:	d107      	bne.n	80069f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40023800 	.word	0x40023800

08006a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e07b      	b.n	8006b0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d108      	bne.n	8006a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a26:	d009      	beq.n	8006a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	61da      	str	r2, [r3, #28]
 8006a2e:	e005      	b.n	8006a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fc fa8e 	bl	8002f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	ea42 0103 	orr.w	r1, r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	0c1b      	lsrs	r3, r3, #16
 8006ada:	f003 0104 	and.w	r1, r3, #4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	f003 0210 	and.w	r2, r3, #16
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006afc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b088      	sub	sp, #32
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	603b      	str	r3, [r7, #0]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_SPI_Transmit+0x22>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e126      	b.n	8006d86 <HAL_SPI_Transmit+0x270>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b40:	f7fc fca4 	bl	800348c <HAL_GetTick>
 8006b44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d002      	beq.n	8006b5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b56:	2302      	movs	r3, #2
 8006b58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b5a:	e10b      	b.n	8006d74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <HAL_SPI_Transmit+0x52>
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b6c:	e102      	b.n	8006d74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2203      	movs	r2, #3
 8006b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	88fa      	ldrh	r2, [r7, #6]
 8006b86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	88fa      	ldrh	r2, [r7, #6]
 8006b8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb4:	d10f      	bne.n	8006bd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d007      	beq.n	8006bf4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfc:	d14b      	bne.n	8006c96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_SPI_Transmit+0xf6>
 8006c06:	8afb      	ldrh	r3, [r7, #22]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d13e      	bne.n	8006c8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	881a      	ldrh	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	1c9a      	adds	r2, r3, #2
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c30:	e02b      	b.n	8006c8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d112      	bne.n	8006c66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	881a      	ldrh	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	1c9a      	adds	r2, r3, #2
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c64:	e011      	b.n	8006c8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c66:	f7fc fc11 	bl	800348c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d803      	bhi.n	8006c7e <HAL_SPI_Transmit+0x168>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d102      	bne.n	8006c84 <HAL_SPI_Transmit+0x16e>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c88:	e074      	b.n	8006d74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1ce      	bne.n	8006c32 <HAL_SPI_Transmit+0x11c>
 8006c94:	e04c      	b.n	8006d30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_SPI_Transmit+0x18e>
 8006c9e:	8afb      	ldrh	r3, [r7, #22]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d140      	bne.n	8006d26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cca:	e02c      	b.n	8006d26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d113      	bne.n	8006d02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	7812      	ldrb	r2, [r2, #0]
 8006ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d00:	e011      	b.n	8006d26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d02:	f7fc fbc3 	bl	800348c <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d803      	bhi.n	8006d1a <HAL_SPI_Transmit+0x204>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d102      	bne.n	8006d20 <HAL_SPI_Transmit+0x20a>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d24:	e026      	b.n	8006d74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1cd      	bne.n	8006ccc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f8b3 	bl	8006ea0 <SPI_EndRxTxTransaction>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	77fb      	strb	r3, [r7, #31]
 8006d70:	e000      	b.n	8006d74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006da0:	f7fc fb74 	bl	800348c <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4413      	add	r3, r2
 8006dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006db0:	f7fc fb6c 	bl	800348c <HAL_GetTick>
 8006db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006db6:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	015b      	lsls	r3, r3, #5
 8006dbc:	0d1b      	lsrs	r3, r3, #20
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	fb02 f303 	mul.w	r3, r2, r3
 8006dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dc6:	e054      	b.n	8006e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	d050      	beq.n	8006e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dd0:	f7fc fb5c 	bl	800348c <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d902      	bls.n	8006de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d13d      	bne.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dfe:	d111      	bne.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e08:	d004      	beq.n	8006e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e12:	d107      	bne.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2c:	d10f      	bne.n	8006e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e017      	b.n	8006e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	bf0c      	ite	eq
 8006e82:	2301      	moveq	r3, #1
 8006e84:	2300      	movne	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d19b      	bne.n	8006dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000004 	.word	0x20000004

08006ea0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <SPI_EndRxTxTransaction+0x7c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <SPI_EndRxTxTransaction+0x80>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	0d5b      	lsrs	r3, r3, #21
 8006eb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eca:	d112      	bne.n	8006ef2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2180      	movs	r1, #128	; 0x80
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff ff5a 	bl	8006d90 <SPI_WaitFlagStateUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f043 0220 	orr.w	r2, r3, #32
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e00f      	b.n	8006f12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d0f2      	beq.n	8006ef2 <SPI_EndRxTxTransaction+0x52>
 8006f0c:	e000      	b.n	8006f10 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f0e:	bf00      	nop
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000004 	.word	0x20000004
 8006f20:	165e9f81 	.word	0x165e9f81

08006f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e041      	b.n	8006fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fc f85c 	bl	8003008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f000 fac4 	bl	80074f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d001      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e04e      	b.n	800707a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a23      	ldr	r2, [pc, #140]	; (8007088 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d022      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x80>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d01d      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x80>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1f      	ldr	r2, [pc, #124]	; (800708c <HAL_TIM_Base_Start_IT+0xc8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d018      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x80>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <HAL_TIM_Base_Start_IT+0xcc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x80>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <HAL_TIM_Base_Start_IT+0xd0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00e      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x80>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <HAL_TIM_Base_Start_IT+0xd4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d009      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x80>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a19      	ldr	r2, [pc, #100]	; (800709c <HAL_TIM_Base_Start_IT+0xd8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d004      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x80>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a18      	ldr	r2, [pc, #96]	; (80070a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d111      	bne.n	8007068 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b06      	cmp	r3, #6
 8007054:	d010      	beq.n	8007078 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	e007      	b.n	8007078 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40010000 	.word	0x40010000
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40010400 	.word	0x40010400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40001800 	.word	0x40001800

080070a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0201 	bic.w	r2, r2, #1
 80070ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6a1a      	ldr	r2, [r3, #32]
 80070c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10f      	bne.n	80070ec <HAL_TIM_Base_Stop_IT+0x48>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	f240 4344 	movw	r3, #1092	; 0x444
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <HAL_TIM_Base_Stop_IT+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0201 	bic.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b02      	cmp	r3, #2
 8007116:	d122      	bne.n	800715e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b02      	cmp	r3, #2
 8007124:	d11b      	bne.n	800715e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f06f 0202 	mvn.w	r2, #2
 800712e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9b5 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 800714a:	e005      	b.n	8007158 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f9a7 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9b8 	bl	80074c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b04      	cmp	r3, #4
 800716a:	d122      	bne.n	80071b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b04      	cmp	r3, #4
 8007178:	d11b      	bne.n	80071b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f06f 0204 	mvn.w	r2, #4
 8007182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f98b 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 800719e:	e005      	b.n	80071ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f97d 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f98e 	bl	80074c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d122      	bne.n	8007206 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d11b      	bne.n	8007206 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f06f 0208 	mvn.w	r2, #8
 80071d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2204      	movs	r2, #4
 80071dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f961 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 80071f2:	e005      	b.n	8007200 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f953 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f964 	bl	80074c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b10      	cmp	r3, #16
 8007212:	d122      	bne.n	800725a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b10      	cmp	r3, #16
 8007220:	d11b      	bne.n	800725a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f06f 0210 	mvn.w	r2, #16
 800722a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2208      	movs	r2, #8
 8007230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f937 	bl	80074b4 <HAL_TIM_IC_CaptureCallback>
 8007246:	e005      	b.n	8007254 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f929 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f93a 	bl	80074c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10e      	bne.n	8007286 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	d107      	bne.n	8007286 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0201 	mvn.w	r2, #1
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fa ffe1 	bl	8002248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d10e      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729e:	2b80      	cmp	r3, #128	; 0x80
 80072a0:	d107      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fadf 	bl	8007870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b40      	cmp	r3, #64	; 0x40
 80072be:	d10e      	bne.n	80072de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	d107      	bne.n	80072de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8ff 	bl	80074dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d10e      	bne.n	800730a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d107      	bne.n	800730a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f06f 0220 	mvn.w	r2, #32
 8007302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 faa9 	bl	800785c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_TIM_ConfigClockSource+0x1c>
 800732a:	2302      	movs	r3, #2
 800732c:	e0b4      	b.n	8007498 <HAL_TIM_ConfigClockSource+0x186>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800734c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007354:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007366:	d03e      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0xd4>
 8007368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736c:	f200 8087 	bhi.w	800747e <HAL_TIM_ConfigClockSource+0x16c>
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007374:	f000 8086 	beq.w	8007484 <HAL_TIM_ConfigClockSource+0x172>
 8007378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737c:	d87f      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
 800737e:	2b70      	cmp	r3, #112	; 0x70
 8007380:	d01a      	beq.n	80073b8 <HAL_TIM_ConfigClockSource+0xa6>
 8007382:	2b70      	cmp	r3, #112	; 0x70
 8007384:	d87b      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
 8007386:	2b60      	cmp	r3, #96	; 0x60
 8007388:	d050      	beq.n	800742c <HAL_TIM_ConfigClockSource+0x11a>
 800738a:	2b60      	cmp	r3, #96	; 0x60
 800738c:	d877      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
 800738e:	2b50      	cmp	r3, #80	; 0x50
 8007390:	d03c      	beq.n	800740c <HAL_TIM_ConfigClockSource+0xfa>
 8007392:	2b50      	cmp	r3, #80	; 0x50
 8007394:	d873      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d058      	beq.n	800744c <HAL_TIM_ConfigClockSource+0x13a>
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d86f      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
 800739e:	2b30      	cmp	r3, #48	; 0x30
 80073a0:	d064      	beq.n	800746c <HAL_TIM_ConfigClockSource+0x15a>
 80073a2:	2b30      	cmp	r3, #48	; 0x30
 80073a4:	d86b      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	d060      	beq.n	800746c <HAL_TIM_ConfigClockSource+0x15a>
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d867      	bhi.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d05c      	beq.n	800746c <HAL_TIM_ConfigClockSource+0x15a>
 80073b2:	2b10      	cmp	r3, #16
 80073b4:	d05a      	beq.n	800746c <HAL_TIM_ConfigClockSource+0x15a>
 80073b6:	e062      	b.n	800747e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	6899      	ldr	r1, [r3, #8]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f000 f9ac 	bl	8007724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	609a      	str	r2, [r3, #8]
      break;
 80073e4:	e04f      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6899      	ldr	r1, [r3, #8]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f000 f995 	bl	8007724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007408:	609a      	str	r2, [r3, #8]
      break;
 800740a:	e03c      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	6859      	ldr	r1, [r3, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	461a      	mov	r2, r3
 800741a:	f000 f909 	bl	8007630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2150      	movs	r1, #80	; 0x50
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f962 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 800742a:	e02c      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6859      	ldr	r1, [r3, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	461a      	mov	r2, r3
 800743a:	f000 f928 	bl	800768e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2160      	movs	r1, #96	; 0x60
 8007444:	4618      	mov	r0, r3
 8007446:	f000 f952 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 800744a:	e01c      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6859      	ldr	r1, [r3, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	461a      	mov	r2, r3
 800745a:	f000 f8e9 	bl	8007630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2140      	movs	r1, #64	; 0x40
 8007464:	4618      	mov	r0, r3
 8007466:	f000 f942 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 800746a:	e00c      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4619      	mov	r1, r3
 8007476:	4610      	mov	r0, r2
 8007478:	f000 f939 	bl	80076ee <TIM_ITRx_SetConfig>
      break;
 800747c:	e003      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
      break;
 8007482:	e000      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a40      	ldr	r2, [pc, #256]	; (8007604 <TIM_Base_SetConfig+0x114>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d013      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750e:	d00f      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3d      	ldr	r2, [pc, #244]	; (8007608 <TIM_Base_SetConfig+0x118>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00b      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3c      	ldr	r2, [pc, #240]	; (800760c <TIM_Base_SetConfig+0x11c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d007      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a3b      	ldr	r2, [pc, #236]	; (8007610 <TIM_Base_SetConfig+0x120>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a3a      	ldr	r2, [pc, #232]	; (8007614 <TIM_Base_SetConfig+0x124>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d108      	bne.n	8007542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2f      	ldr	r2, [pc, #188]	; (8007604 <TIM_Base_SetConfig+0x114>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d02b      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007550:	d027      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2c      	ldr	r2, [pc, #176]	; (8007608 <TIM_Base_SetConfig+0x118>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d023      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2b      	ldr	r2, [pc, #172]	; (800760c <TIM_Base_SetConfig+0x11c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01f      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a2a      	ldr	r2, [pc, #168]	; (8007610 <TIM_Base_SetConfig+0x120>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d01b      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a29      	ldr	r2, [pc, #164]	; (8007614 <TIM_Base_SetConfig+0x124>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d017      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a28      	ldr	r2, [pc, #160]	; (8007618 <TIM_Base_SetConfig+0x128>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a27      	ldr	r2, [pc, #156]	; (800761c <TIM_Base_SetConfig+0x12c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00f      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a26      	ldr	r2, [pc, #152]	; (8007620 <TIM_Base_SetConfig+0x130>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00b      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a25      	ldr	r2, [pc, #148]	; (8007624 <TIM_Base_SetConfig+0x134>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d007      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a24      	ldr	r2, [pc, #144]	; (8007628 <TIM_Base_SetConfig+0x138>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d003      	beq.n	80075a2 <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a23      	ldr	r2, [pc, #140]	; (800762c <TIM_Base_SetConfig+0x13c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d108      	bne.n	80075b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <TIM_Base_SetConfig+0x114>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d003      	beq.n	80075e8 <TIM_Base_SetConfig+0xf8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a0c      	ldr	r2, [pc, #48]	; (8007614 <TIM_Base_SetConfig+0x124>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d103      	bne.n	80075f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	615a      	str	r2, [r3, #20]
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40010000 	.word	0x40010000
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40010400 	.word	0x40010400
 8007618:	40014000 	.word	0x40014000
 800761c:	40014400 	.word	0x40014400
 8007620:	40014800 	.word	0x40014800
 8007624:	40001800 	.word	0x40001800
 8007628:	40001c00 	.word	0x40001c00
 800762c:	40002000 	.word	0x40002000

08007630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800765a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f023 030a 	bic.w	r3, r3, #10
 800766c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	621a      	str	r2, [r3, #32]
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800768e:	b480      	push	{r7}
 8007690:	b087      	sub	sp, #28
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f023 0210 	bic.w	r2, r3, #16
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	031b      	lsls	r3, r3, #12
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	f043 0307 	orr.w	r3, r3, #7
 8007710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	609a      	str	r2, [r3, #8]
}
 8007718:	bf00      	nop
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800773e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	021a      	lsls	r2, r3, #8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	431a      	orrs	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4313      	orrs	r3, r2
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007778:	2302      	movs	r3, #2
 800777a:	e05a      	b.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a21      	ldr	r2, [pc, #132]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d022      	beq.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c8:	d01d      	beq.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d018      	beq.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1b      	ldr	r2, [pc, #108]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a1a      	ldr	r2, [pc, #104]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00e      	beq.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a18      	ldr	r2, [pc, #96]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d009      	beq.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a17      	ldr	r2, [pc, #92]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d004      	beq.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a15      	ldr	r2, [pc, #84]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d10c      	bne.n	8007820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800780c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	4313      	orrs	r3, r2
 8007816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40010000 	.word	0x40010000
 8007844:	40000400 	.word	0x40000400
 8007848:	40000800 	.word	0x40000800
 800784c:	40000c00 	.word	0x40000c00
 8007850:	40010400 	.word	0x40010400
 8007854:	40014000 	.word	0x40014000
 8007858:	40001800 	.word	0x40001800

0800785c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e03f      	b.n	8007916 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fb fbd2 	bl	8003054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2224      	movs	r2, #36	; 0x24
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f829 	bl	8007920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	695a      	ldr	r2, [r3, #20]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007924:	b0c0      	sub	sp, #256	; 0x100
 8007926:	af00      	add	r7, sp, #0
 8007928:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	68d9      	ldr	r1, [r3, #12]
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	ea40 0301 	orr.w	r3, r0, r1
 8007948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800794a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	431a      	orrs	r2, r3
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	431a      	orrs	r2, r3
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007978:	f021 010c 	bic.w	r1, r1, #12
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007986:	430b      	orrs	r3, r1
 8007988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800798a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799a:	6999      	ldr	r1, [r3, #24]
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	ea40 0301 	orr.w	r3, r0, r1
 80079a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b8f      	ldr	r3, [pc, #572]	; (8007bec <UART_SetConfig+0x2cc>)
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d005      	beq.n	80079c0 <UART_SetConfig+0xa0>
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b8d      	ldr	r3, [pc, #564]	; (8007bf0 <UART_SetConfig+0x2d0>)
 80079bc:	429a      	cmp	r2, r3
 80079be:	d104      	bne.n	80079ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079c0:	f7fd fe52 	bl	8005668 <HAL_RCC_GetPCLK2Freq>
 80079c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079c8:	e003      	b.n	80079d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ca:	f7fd fe39 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 80079ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079dc:	f040 810c 	bne.w	8007bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079f2:	4622      	mov	r2, r4
 80079f4:	462b      	mov	r3, r5
 80079f6:	1891      	adds	r1, r2, r2
 80079f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80079fa:	415b      	adcs	r3, r3
 80079fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a02:	4621      	mov	r1, r4
 8007a04:	eb12 0801 	adds.w	r8, r2, r1
 8007a08:	4629      	mov	r1, r5
 8007a0a:	eb43 0901 	adc.w	r9, r3, r1
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a22:	4690      	mov	r8, r2
 8007a24:	4699      	mov	r9, r3
 8007a26:	4623      	mov	r3, r4
 8007a28:	eb18 0303 	adds.w	r3, r8, r3
 8007a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a30:	462b      	mov	r3, r5
 8007a32:	eb49 0303 	adc.w	r3, r9, r3
 8007a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a4e:	460b      	mov	r3, r1
 8007a50:	18db      	adds	r3, r3, r3
 8007a52:	653b      	str	r3, [r7, #80]	; 0x50
 8007a54:	4613      	mov	r3, r2
 8007a56:	eb42 0303 	adc.w	r3, r2, r3
 8007a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a64:	f7f9 f930 	bl	8000cc8 <__aeabi_uldivmod>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4b61      	ldr	r3, [pc, #388]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	011c      	lsls	r4, r3, #4
 8007a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a88:	4642      	mov	r2, r8
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	1891      	adds	r1, r2, r2
 8007a8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a90:	415b      	adcs	r3, r3
 8007a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a98:	4641      	mov	r1, r8
 8007a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ab8:	4692      	mov	sl, r2
 8007aba:	469b      	mov	fp, r3
 8007abc:	4643      	mov	r3, r8
 8007abe:	eb1a 0303 	adds.w	r3, sl, r3
 8007ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8007acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007adc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	18db      	adds	r3, r3, r3
 8007ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aea:	4613      	mov	r3, r2
 8007aec:	eb42 0303 	adc.w	r3, r2, r3
 8007af0:	647b      	str	r3, [r7, #68]	; 0x44
 8007af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007afa:	f7f9 f8e5 	bl	8000cc8 <__aeabi_uldivmod>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007b06:	fba3 2301 	umull	r2, r3, r3, r1
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	2264      	movs	r2, #100	; 0x64
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	1acb      	subs	r3, r1, r3
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b1a:	4b36      	ldr	r3, [pc, #216]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b28:	441c      	add	r4, r3
 8007b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	464b      	mov	r3, r9
 8007b40:	1891      	adds	r1, r2, r2
 8007b42:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b44:	415b      	adcs	r3, r3
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	1851      	adds	r1, r2, r1
 8007b50:	6339      	str	r1, [r7, #48]	; 0x30
 8007b52:	4649      	mov	r1, r9
 8007b54:	414b      	adcs	r3, r1
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b64:	4659      	mov	r1, fp
 8007b66:	00cb      	lsls	r3, r1, #3
 8007b68:	4651      	mov	r1, sl
 8007b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6e:	4651      	mov	r1, sl
 8007b70:	00ca      	lsls	r2, r1, #3
 8007b72:	4610      	mov	r0, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	4642      	mov	r2, r8
 8007b7a:	189b      	adds	r3, r3, r2
 8007b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b80:	464b      	mov	r3, r9
 8007b82:	460a      	mov	r2, r1
 8007b84:	eb42 0303 	adc.w	r3, r2, r3
 8007b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	18db      	adds	r3, r3, r3
 8007ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bb6:	f7f9 f887 	bl	8000cc8 <__aeabi_uldivmod>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	2164      	movs	r1, #100	; 0x64
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	3332      	adds	r3, #50	; 0x32
 8007bd2:	4a08      	ldr	r2, [pc, #32]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f003 0207 	and.w	r2, r3, #7
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4422      	add	r2, r4
 8007be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007be8:	e105      	b.n	8007df6 <UART_SetConfig+0x4d6>
 8007bea:	bf00      	nop
 8007bec:	40011000 	.word	0x40011000
 8007bf0:	40011400 	.word	0x40011400
 8007bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c0a:	4642      	mov	r2, r8
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	1891      	adds	r1, r2, r2
 8007c10:	6239      	str	r1, [r7, #32]
 8007c12:	415b      	adcs	r3, r3
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
 8007c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	1854      	adds	r4, r2, r1
 8007c1e:	4649      	mov	r1, r9
 8007c20:	eb43 0501 	adc.w	r5, r3, r1
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	00eb      	lsls	r3, r5, #3
 8007c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c32:	00e2      	lsls	r2, r4, #3
 8007c34:	4614      	mov	r4, r2
 8007c36:	461d      	mov	r5, r3
 8007c38:	4643      	mov	r3, r8
 8007c3a:	18e3      	adds	r3, r4, r3
 8007c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c40:	464b      	mov	r3, r9
 8007c42:	eb45 0303 	adc.w	r3, r5, r3
 8007c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c66:	4629      	mov	r1, r5
 8007c68:	008b      	lsls	r3, r1, #2
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c70:	4621      	mov	r1, r4
 8007c72:	008a      	lsls	r2, r1, #2
 8007c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c78:	f7f9 f826 	bl	8000cc8 <__aeabi_uldivmod>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4b60      	ldr	r3, [pc, #384]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007c82:	fba3 2302 	umull	r2, r3, r3, r2
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	011c      	lsls	r4, r3, #4
 8007c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	1891      	adds	r1, r2, r2
 8007ca2:	61b9      	str	r1, [r7, #24]
 8007ca4:	415b      	adcs	r3, r3
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cac:	4641      	mov	r1, r8
 8007cae:	1851      	adds	r1, r2, r1
 8007cb0:	6139      	str	r1, [r7, #16]
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	414b      	adcs	r3, r1
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	00cb      	lsls	r3, r1, #3
 8007cc8:	4651      	mov	r1, sl
 8007cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cce:	4651      	mov	r1, sl
 8007cd0:	00ca      	lsls	r2, r1, #3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4642      	mov	r2, r8
 8007cda:	189b      	adds	r3, r3, r2
 8007cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d04:	4649      	mov	r1, r9
 8007d06:	008b      	lsls	r3, r1, #2
 8007d08:	4641      	mov	r1, r8
 8007d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d0e:	4641      	mov	r1, r8
 8007d10:	008a      	lsls	r2, r1, #2
 8007d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d16:	f7f8 ffd7 	bl	8000cc8 <__aeabi_uldivmod>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4b39      	ldr	r3, [pc, #228]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007d20:	fba3 1302 	umull	r1, r3, r3, r2
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	2164      	movs	r1, #100	; 0x64
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	3332      	adds	r3, #50	; 0x32
 8007d32:	4a34      	ldr	r2, [pc, #208]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	095b      	lsrs	r3, r3, #5
 8007d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d3e:	441c      	add	r4, r3
 8007d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d44:	2200      	movs	r2, #0
 8007d46:	673b      	str	r3, [r7, #112]	; 0x70
 8007d48:	677a      	str	r2, [r7, #116]	; 0x74
 8007d4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d4e:	4642      	mov	r2, r8
 8007d50:	464b      	mov	r3, r9
 8007d52:	1891      	adds	r1, r2, r2
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	415b      	adcs	r3, r3
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d5e:	4641      	mov	r1, r8
 8007d60:	1851      	adds	r1, r2, r1
 8007d62:	6039      	str	r1, [r7, #0]
 8007d64:	4649      	mov	r1, r9
 8007d66:	414b      	adcs	r3, r1
 8007d68:	607b      	str	r3, [r7, #4]
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d76:	4659      	mov	r1, fp
 8007d78:	00cb      	lsls	r3, r1, #3
 8007d7a:	4651      	mov	r1, sl
 8007d7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d80:	4651      	mov	r1, sl
 8007d82:	00ca      	lsls	r2, r1, #3
 8007d84:	4610      	mov	r0, r2
 8007d86:	4619      	mov	r1, r3
 8007d88:	4603      	mov	r3, r0
 8007d8a:	4642      	mov	r2, r8
 8007d8c:	189b      	adds	r3, r3, r2
 8007d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d90:	464b      	mov	r3, r9
 8007d92:	460a      	mov	r2, r1
 8007d94:	eb42 0303 	adc.w	r3, r2, r3
 8007d98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	663b      	str	r3, [r7, #96]	; 0x60
 8007da4:	667a      	str	r2, [r7, #100]	; 0x64
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007db2:	4649      	mov	r1, r9
 8007db4:	008b      	lsls	r3, r1, #2
 8007db6:	4641      	mov	r1, r8
 8007db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	008a      	lsls	r2, r1, #2
 8007dc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dc4:	f7f8 ff80 	bl	8000cc8 <__aeabi_uldivmod>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007dce:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	2164      	movs	r1, #100	; 0x64
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	3332      	adds	r3, #50	; 0x32
 8007de0:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <UART_SetConfig+0x4e4>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	f003 020f 	and.w	r2, r3, #15
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4422      	add	r2, r4
 8007df4:	609a      	str	r2, [r3, #8]
}
 8007df6:	bf00      	nop
 8007df8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e02:	bf00      	nop
 8007e04:	51eb851f 	.word	0x51eb851f

08007e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e08:	b084      	sub	sp, #16
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	f107 001c 	add.w	r0, r7, #28
 8007e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d122      	bne.n	8007e66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d105      	bne.n	8007e5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fbe8 	bl	8009630 <USB_CoreReset>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
 8007e64:	e01a      	b.n	8007e9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 fbdc 	bl	8009630 <USB_CoreReset>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e8e:	e005      	b.n	8007e9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d10b      	bne.n	8007eba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f043 0206 	orr.w	r2, r3, #6
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f043 0220 	orr.w	r2, r3, #32
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ec6:	b004      	add	sp, #16
 8007ec8:	4770      	bx	lr
	...

08007ecc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d165      	bne.n	8007fac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4a41      	ldr	r2, [pc, #260]	; (8007fe8 <USB_SetTurnaroundTime+0x11c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d906      	bls.n	8007ef6 <USB_SetTurnaroundTime+0x2a>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4a40      	ldr	r2, [pc, #256]	; (8007fec <USB_SetTurnaroundTime+0x120>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d202      	bcs.n	8007ef6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ef0:	230f      	movs	r3, #15
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e062      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4a3c      	ldr	r2, [pc, #240]	; (8007fec <USB_SetTurnaroundTime+0x120>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d306      	bcc.n	8007f0c <USB_SetTurnaroundTime+0x40>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4a3b      	ldr	r2, [pc, #236]	; (8007ff0 <USB_SetTurnaroundTime+0x124>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d202      	bcs.n	8007f0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f06:	230e      	movs	r3, #14
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	e057      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4a38      	ldr	r2, [pc, #224]	; (8007ff0 <USB_SetTurnaroundTime+0x124>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d306      	bcc.n	8007f22 <USB_SetTurnaroundTime+0x56>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4a37      	ldr	r2, [pc, #220]	; (8007ff4 <USB_SetTurnaroundTime+0x128>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d202      	bcs.n	8007f22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f1c:	230d      	movs	r3, #13
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	e04c      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4a33      	ldr	r2, [pc, #204]	; (8007ff4 <USB_SetTurnaroundTime+0x128>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d306      	bcc.n	8007f38 <USB_SetTurnaroundTime+0x6c>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4a32      	ldr	r2, [pc, #200]	; (8007ff8 <USB_SetTurnaroundTime+0x12c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d802      	bhi.n	8007f38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f32:	230c      	movs	r3, #12
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e041      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4a2f      	ldr	r2, [pc, #188]	; (8007ff8 <USB_SetTurnaroundTime+0x12c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d906      	bls.n	8007f4e <USB_SetTurnaroundTime+0x82>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4a2e      	ldr	r2, [pc, #184]	; (8007ffc <USB_SetTurnaroundTime+0x130>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d802      	bhi.n	8007f4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f48:	230b      	movs	r3, #11
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	e036      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	4a2a      	ldr	r2, [pc, #168]	; (8007ffc <USB_SetTurnaroundTime+0x130>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d906      	bls.n	8007f64 <USB_SetTurnaroundTime+0x98>
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	4a29      	ldr	r2, [pc, #164]	; (8008000 <USB_SetTurnaroundTime+0x134>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d802      	bhi.n	8007f64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f5e:	230a      	movs	r3, #10
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	e02b      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4a26      	ldr	r2, [pc, #152]	; (8008000 <USB_SetTurnaroundTime+0x134>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d906      	bls.n	8007f7a <USB_SetTurnaroundTime+0xae>
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4a25      	ldr	r2, [pc, #148]	; (8008004 <USB_SetTurnaroundTime+0x138>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d202      	bcs.n	8007f7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f74:	2309      	movs	r3, #9
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e020      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	4a21      	ldr	r2, [pc, #132]	; (8008004 <USB_SetTurnaroundTime+0x138>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d306      	bcc.n	8007f90 <USB_SetTurnaroundTime+0xc4>
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4a20      	ldr	r2, [pc, #128]	; (8008008 <USB_SetTurnaroundTime+0x13c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d802      	bhi.n	8007f90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	e015      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <USB_SetTurnaroundTime+0x13c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d906      	bls.n	8007fa6 <USB_SetTurnaroundTime+0xda>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4a1c      	ldr	r2, [pc, #112]	; (800800c <USB_SetTurnaroundTime+0x140>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d202      	bcs.n	8007fa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007fa0:	2307      	movs	r3, #7
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	e00a      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007fa6:	2306      	movs	r3, #6
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e007      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007fb2:	2309      	movs	r3, #9
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	e001      	b.n	8007fbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007fb8:	2309      	movs	r3, #9
 8007fba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	029b      	lsls	r3, r3, #10
 8007fd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	371c      	adds	r7, #28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	00d8acbf 	.word	0x00d8acbf
 8007fec:	00e4e1c0 	.word	0x00e4e1c0
 8007ff0:	00f42400 	.word	0x00f42400
 8007ff4:	01067380 	.word	0x01067380
 8007ff8:	011a499f 	.word	0x011a499f
 8007ffc:	01312cff 	.word	0x01312cff
 8008000:	014ca43f 	.word	0x014ca43f
 8008004:	016e3600 	.word	0x016e3600
 8008008:	01a6ab1f 	.word	0x01a6ab1f
 800800c:	01e84800 	.word	0x01e84800

08008010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f043 0201 	orr.w	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f023 0201 	bic.w	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d115      	bne.n	80080a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008082:	2001      	movs	r0, #1
 8008084:	f7fb fa0e 	bl	80034a4 <HAL_Delay>
      ms++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 fa3f 	bl	8009512 <USB_GetMode>
 8008094:	4603      	mov	r3, r0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d01e      	beq.n	80080d8 <USB_SetCurrentMode+0x84>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b31      	cmp	r3, #49	; 0x31
 800809e:	d9f0      	bls.n	8008082 <USB_SetCurrentMode+0x2e>
 80080a0:	e01a      	b.n	80080d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d115      	bne.n	80080d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80080b4:	2001      	movs	r0, #1
 80080b6:	f7fb f9f5 	bl	80034a4 <HAL_Delay>
      ms++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3301      	adds	r3, #1
 80080be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fa26 	bl	8009512 <USB_GetMode>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <USB_SetCurrentMode+0x84>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b31      	cmp	r3, #49	; 0x31
 80080d0:	d9f0      	bls.n	80080b4 <USB_SetCurrentMode+0x60>
 80080d2:	e001      	b.n	80080d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e005      	b.n	80080e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b32      	cmp	r3, #50	; 0x32
 80080dc:	d101      	bne.n	80080e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ec:	b084      	sub	sp, #16
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b086      	sub	sp, #24
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008106:	2300      	movs	r3, #0
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	e009      	b.n	8008120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	3340      	adds	r3, #64	; 0x40
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	2200      	movs	r2, #0
 8008118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	3301      	adds	r3, #1
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b0e      	cmp	r3, #14
 8008124:	d9f2      	bls.n	800810c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11c      	bne.n	8008166 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800813a:	f043 0302 	orr.w	r3, r3, #2
 800813e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e005      	b.n	8008172 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008178:	461a      	mov	r2, r3
 800817a:	2300      	movs	r3, #0
 800817c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008184:	4619      	mov	r1, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818c:	461a      	mov	r2, r3
 800818e:	680b      	ldr	r3, [r1, #0]
 8008190:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	2b01      	cmp	r3, #1
 8008196:	d10c      	bne.n	80081b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800819e:	2100      	movs	r1, #0
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f965 	bl	8008470 <USB_SetDevSpeed>
 80081a6:	e008      	b.n	80081ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80081a8:	2101      	movs	r1, #1
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f960 	bl	8008470 <USB_SetDevSpeed>
 80081b0:	e003      	b.n	80081ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80081b2:	2103      	movs	r1, #3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f95b 	bl	8008470 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081ba:	2110      	movs	r1, #16
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8f3 	bl	80083a8 <USB_FlushTxFifo>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f91f 	bl	8008410 <USB_FlushRxFifo>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e2:	461a      	mov	r2, r3
 80081e4:	2300      	movs	r3, #0
 80081e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ee:	461a      	mov	r2, r3
 80081f0:	2300      	movs	r3, #0
 80081f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fa:	461a      	mov	r2, r3
 80081fc:	2300      	movs	r3, #0
 80081fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	e043      	b.n	800828e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800821c:	d118      	bne.n	8008250 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	461a      	mov	r2, r3
 8008232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	e013      	b.n	8008262 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008246:	461a      	mov	r2, r3
 8008248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	e008      	b.n	8008262 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	461a      	mov	r2, r3
 800825e:	2300      	movs	r3, #0
 8008260:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826e:	461a      	mov	r2, r3
 8008270:	2300      	movs	r3, #0
 8008272:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008280:	461a      	mov	r2, r3
 8008282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3301      	adds	r3, #1
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	429a      	cmp	r2, r3
 8008294:	d3b7      	bcc.n	8008206 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008296:	2300      	movs	r3, #0
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	e043      	b.n	8008324 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082b2:	d118      	bne.n	80082e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10a      	bne.n	80082d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	e013      	b.n	80082f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	461a      	mov	r2, r3
 80082de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	e008      	b.n	80082f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f2:	461a      	mov	r2, r3
 80082f4:	2300      	movs	r3, #0
 80082f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008304:	461a      	mov	r2, r3
 8008306:	2300      	movs	r3, #0
 8008308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008316:	461a      	mov	r2, r3
 8008318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800831c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	3301      	adds	r3, #1
 8008322:	613b      	str	r3, [r7, #16]
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	429a      	cmp	r2, r3
 800832a:	d3b7      	bcc.n	800829c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800833a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800833e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800834c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f043 0210 	orr.w	r2, r3, #16
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699a      	ldr	r2, [r3, #24]
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <USB_DevInit+0x2b8>)
 8008366:	4313      	orrs	r3, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800836c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	f043 0208 	orr.w	r2, r3, #8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800837e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d107      	bne.n	8008394 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800838c:	f043 0304 	orr.w	r3, r3, #4
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083a0:	b004      	add	sp, #16
 80083a2:	4770      	bx	lr
 80083a4:	803c3800 	.word	0x803c3800

080083a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3301      	adds	r3, #1
 80083ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4a13      	ldr	r2, [pc, #76]	; (800840c <USB_FlushTxFifo+0x64>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d901      	bls.n	80083c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e01b      	b.n	8008400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	daf2      	bge.n	80083b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	019b      	lsls	r3, r3, #6
 80083d8:	f043 0220 	orr.w	r2, r3, #32
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4a08      	ldr	r2, [pc, #32]	; (800840c <USB_FlushTxFifo+0x64>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e006      	b.n	8008400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d0f0      	beq.n	80083e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	00030d40 	.word	0x00030d40

08008410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a11      	ldr	r2, [pc, #68]	; (800846c <USB_FlushRxFifo+0x5c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d901      	bls.n	800842e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e018      	b.n	8008460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	daf2      	bge.n	800841c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2210      	movs	r2, #16
 800843e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a08      	ldr	r2, [pc, #32]	; (800846c <USB_FlushRxFifo+0x5c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d901      	bls.n	8008452 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e006      	b.n	8008460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f003 0310 	and.w	r3, r3, #16
 800845a:	2b10      	cmp	r3, #16
 800845c:	d0f0      	beq.n	8008440 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	00030d40 	.word	0x00030d40

08008470 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008490:	4313      	orrs	r3, r2
 8008492:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b087      	sub	sp, #28
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 0306 	and.w	r3, r3, #6
 80084ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d102      	bne.n	80084c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]
 80084c6:	e00a      	b.n	80084de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d002      	beq.n	80084d4 <USB_GetDevSpeed+0x32>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d102      	bne.n	80084da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80084d4:	2302      	movs	r3, #2
 80084d6:	75fb      	strb	r3, [r7, #23]
 80084d8:	e001      	b.n	80084de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80084da:	230f      	movs	r3, #15
 80084dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d13a      	bne.n	800857e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850e:	69da      	ldr	r2, [r3, #28]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f003 030f 	and.w	r3, r3, #15
 8008518:	2101      	movs	r1, #1
 800851a:	fa01 f303 	lsl.w	r3, r1, r3
 800851e:	b29b      	uxth	r3, r3
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008526:	4313      	orrs	r3, r2
 8008528:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d155      	bne.n	80085ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	791b      	ldrb	r3, [r3, #4]
 800855a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800855c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008564:	4313      	orrs	r3, r2
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	e036      	b.n	80085ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	69da      	ldr	r2, [r3, #28]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	2101      	movs	r1, #1
 8008590:	fa01 f303 	lsl.w	r3, r1, r3
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800859c:	4313      	orrs	r3, r2
 800859e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d11a      	bne.n	80085ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	791b      	ldrb	r3, [r3, #4]
 80085d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085d2:	430b      	orrs	r3, r1
 80085d4:	4313      	orrs	r3, r2
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d161      	bne.n	80086dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800862a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800862e:	d11f      	bne.n	8008670 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	440a      	add	r2, r1
 8008646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800864e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	440a      	add	r2, r1
 8008666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800866e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	2101      	movs	r1, #1
 8008682:	fa01 f303 	lsl.w	r3, r1, r3
 8008686:	b29b      	uxth	r3, r3
 8008688:	43db      	mvns	r3, r3
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008690:	4013      	ands	r3, r2
 8008692:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	2101      	movs	r1, #1
 80086a6:	fa01 f303 	lsl.w	r3, r1, r3
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	43db      	mvns	r3, r3
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086b4:	4013      	ands	r3, r2
 80086b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	0159      	lsls	r1, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	440b      	add	r3, r1
 80086ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d2:	4619      	mov	r1, r3
 80086d4:	4b35      	ldr	r3, [pc, #212]	; (80087ac <USB_DeactivateEndpoint+0x1b0>)
 80086d6:	4013      	ands	r3, r2
 80086d8:	600b      	str	r3, [r1, #0]
 80086da:	e060      	b.n	800879e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086f2:	d11f      	bne.n	8008734 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	440a      	add	r2, r1
 800870a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800870e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008712:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	440a      	add	r2, r1
 800872a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800872e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 030f 	and.w	r3, r3, #15
 8008744:	2101      	movs	r1, #1
 8008746:	fa01 f303 	lsl.w	r3, r1, r3
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	43db      	mvns	r3, r3
 800874e:	68f9      	ldr	r1, [r7, #12]
 8008750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008754:	4013      	ands	r3, r2
 8008756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	69da      	ldr	r2, [r3, #28]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	2101      	movs	r1, #1
 800876a:	fa01 f303 	lsl.w	r3, r1, r3
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	43db      	mvns	r3, r3
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008778:	4013      	ands	r3, r2
 800877a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	0159      	lsls	r1, r3, #5
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	440b      	add	r3, r1
 8008792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008796:	4619      	mov	r1, r3
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <USB_DeactivateEndpoint+0x1b4>)
 800879a:	4013      	ands	r3, r2
 800879c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	ec337800 	.word	0xec337800
 80087b0:	eff37800 	.word	0xeff37800

080087b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	f040 815c 	bne.w	8008a8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d132      	bne.n	8008844 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	0151      	lsls	r1, r2, #5
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	440a      	add	r2, r1
 80087f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	440a      	add	r2, r1
 8008818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	0151      	lsls	r1, r2, #5
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	440a      	add	r2, r1
 8008838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883c:	0cdb      	lsrs	r3, r3, #19
 800883e:	04db      	lsls	r3, r3, #19
 8008840:	6113      	str	r3, [r2, #16]
 8008842:	e074      	b.n	800892e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	440a      	add	r2, r1
 800885a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800885e:	0cdb      	lsrs	r3, r3, #19
 8008860:	04db      	lsls	r3, r3, #19
 8008862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	440a      	add	r2, r1
 800887a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008882:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6999      	ldr	r1, [r3, #24]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	440b      	add	r3, r1
 80088a0:	1e59      	subs	r1, r3, #1
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80088aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80088ac:	4b9d      	ldr	r3, [pc, #628]	; (8008b24 <USB_EPStartXfer+0x370>)
 80088ae:	400b      	ands	r3, r1
 80088b0:	69b9      	ldr	r1, [r7, #24]
 80088b2:	0148      	lsls	r0, r1, #5
 80088b4:	69f9      	ldr	r1, [r7, #28]
 80088b6:	4401      	add	r1, r0
 80088b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088bc:	4313      	orrs	r3, r2
 80088be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088cc:	691a      	ldr	r2, [r3, #16]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088d6:	69b9      	ldr	r1, [r7, #24]
 80088d8:	0148      	lsls	r0, r1, #5
 80088da:	69f9      	ldr	r1, [r7, #28]
 80088dc:	4401      	add	r1, r0
 80088de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088e2:	4313      	orrs	r3, r2
 80088e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	791b      	ldrb	r3, [r3, #4]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d11f      	bne.n	800892e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008908:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800890c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800892c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d14b      	bne.n	80089cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d009      	beq.n	8008950 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	461a      	mov	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	791b      	ldrb	r3, [r3, #4]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d128      	bne.n	80089aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d110      	bne.n	800898a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	4413      	add	r3, r2
 8008970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	0151      	lsls	r1, r2, #5
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	440a      	add	r2, r1
 800897e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	e00f      	b.n	80089aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	e133      	b.n	8008c34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	0151      	lsls	r1, r2, #5
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	440a      	add	r2, r1
 80089e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	791b      	ldrb	r3, [r3, #4]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d015      	beq.n	8008a20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 811b 	beq.w	8008c34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	2101      	movs	r1, #1
 8008a10:	fa01 f303 	lsl.w	r3, r1, r3
 8008a14:	69f9      	ldr	r1, [r7, #28]
 8008a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	634b      	str	r3, [r1, #52]	; 0x34
 8008a1e:	e109      	b.n	8008c34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d110      	bne.n	8008a52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	0151      	lsls	r1, r2, #5
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	440a      	add	r2, r1
 8008a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	e00f      	b.n	8008a72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6919      	ldr	r1, [r3, #16]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	781a      	ldrb	r2, [r3, #0]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	b298      	uxth	r0, r3
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4603      	mov	r3, r0
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 fade 	bl	8009048 <USB_WritePacket>
 8008a8c:	e0d2      	b.n	8008c34 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	0151      	lsls	r1, r2, #5
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa8:	0cdb      	lsrs	r3, r3, #19
 8008aaa:	04db      	lsls	r3, r3, #19
 8008aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008acc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ad0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d126      	bne.n	8008b28 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af0:	69b9      	ldr	r1, [r7, #24]
 8008af2:	0148      	lsls	r0, r1, #5
 8008af4:	69f9      	ldr	r1, [r7, #28]
 8008af6:	4401      	add	r1, r0
 8008af8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008afc:	4313      	orrs	r3, r2
 8008afe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1e:	6113      	str	r3, [r2, #16]
 8008b20:	e03a      	b.n	8008b98 <USB_EPStartXfer+0x3e4>
 8008b22:	bf00      	nop
 8008b24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	4413      	add	r3, r2
 8008b32:	1e5a      	subs	r2, r3, #1
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	8afa      	ldrh	r2, [r7, #22]
 8008b44:	fb03 f202 	mul.w	r2, r3, r2
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	8afb      	ldrh	r3, [r7, #22]
 8008b5c:	04d9      	lsls	r1, r3, #19
 8008b5e:	4b38      	ldr	r3, [pc, #224]	; (8008c40 <USB_EPStartXfer+0x48c>)
 8008b60:	400b      	ands	r3, r1
 8008b62:	69b9      	ldr	r1, [r7, #24]
 8008b64:	0148      	lsls	r0, r1, #5
 8008b66:	69f9      	ldr	r1, [r7, #28]
 8008b68:	4401      	add	r1, r0
 8008b6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	691a      	ldr	r2, [r3, #16]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b88:	69b9      	ldr	r1, [r7, #24]
 8008b8a:	0148      	lsls	r0, r1, #5
 8008b8c:	69f9      	ldr	r1, [r7, #28]
 8008b8e:	4401      	add	r1, r0
 8008b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b94:	4313      	orrs	r3, r2
 8008b96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d10d      	bne.n	8008bba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6919      	ldr	r1, [r3, #16]
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	460a      	mov	r2, r1
 8008bb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	791b      	ldrb	r3, [r3, #4]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d128      	bne.n	8008c14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d110      	bne.n	8008bf4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	0151      	lsls	r1, r2, #5
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	440a      	add	r2, r1
 8008be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	e00f      	b.n	8008c14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	0151      	lsls	r1, r2, #5
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	440a      	add	r2, r1
 8008c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	0151      	lsls	r1, r2, #5
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	440a      	add	r2, r1
 8008c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	1ff80000 	.word	0x1ff80000

08008c44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	f040 80ce 	bne.w	8008e02 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d132      	bne.n	8008cd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	0151      	lsls	r1, r2, #5
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	440a      	add	r2, r1
 8008ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ccc:	0cdb      	lsrs	r3, r3, #19
 8008cce:	04db      	lsls	r3, r3, #19
 8008cd0:	6113      	str	r3, [r2, #16]
 8008cd2:	e04e      	b.n	8008d72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cee:	0cdb      	lsrs	r3, r3, #19
 8008cf0:	04db      	lsls	r3, r3, #19
 8008cf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	0151      	lsls	r1, r2, #5
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	440a      	add	r2, r1
 8008d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	699a      	ldr	r2, [r3, #24]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d903      	bls.n	8008d2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	0151      	lsls	r1, r2, #5
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	440a      	add	r2, r1
 8008d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d58:	691a      	ldr	r2, [r3, #16]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d62:	6939      	ldr	r1, [r7, #16]
 8008d64:	0148      	lsls	r0, r1, #5
 8008d66:	6979      	ldr	r1, [r7, #20]
 8008d68:	4401      	add	r1, r0
 8008d6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d11e      	bne.n	8008db6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d009      	beq.n	8008d94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	e097      	b.n	8008ee6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 8083 	beq.w	8008ee6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	2101      	movs	r1, #1
 8008df2:	fa01 f303 	lsl.w	r3, r1, r3
 8008df6:	6979      	ldr	r1, [r7, #20]
 8008df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	634b      	str	r3, [r1, #52]	; 0x34
 8008e00:	e071      	b.n	8008ee6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e1c:	0cdb      	lsrs	r3, r3, #19
 8008e1e:	04db      	lsls	r3, r3, #19
 8008e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	0151      	lsls	r1, r2, #5
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	440a      	add	r2, r1
 8008e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e94:	6939      	ldr	r1, [r7, #16]
 8008e96:	0148      	lsls	r0, r1, #5
 8008e98:	6979      	ldr	r1, [r7, #20]
 8008e9a:	4401      	add	r1, r0
 8008e9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d10d      	bne.n	8008ec6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6919      	ldr	r1, [r3, #16]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec2:	460a      	mov	r2, r1
 8008ec4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ee4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d14a      	bne.n	8008fa8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f2a:	f040 8086 	bne.w	800903a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	7812      	ldrb	r2, [r2, #0]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d902      	bls.n	8008f8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
          break;
 8008f8a:	e056      	b.n	800903a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fa4:	d0e7      	beq.n	8008f76 <USB_EPStopXfer+0x82>
 8008fa6:	e048      	b.n	800903a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc0:	d13b      	bne.n	800903a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	7812      	ldrb	r2, [r2, #0]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fe4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	7812      	ldrb	r2, [r2, #0]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009008:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f242 7210 	movw	r2, #10000	; 0x2710
 8009016:	4293      	cmp	r3, r2
 8009018:	d902      	bls.n	8009020 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	75fb      	strb	r3, [r7, #23]
          break;
 800901e:	e00c      	b.n	800903a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009038:	d0e7      	beq.n	800900a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800903a:	7dfb      	ldrb	r3, [r7, #23]
}
 800903c:	4618      	mov	r0, r3
 800903e:	371c      	adds	r7, #28
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009048:	b480      	push	{r7}
 800904a:	b089      	sub	sp, #36	; 0x24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4611      	mov	r1, r2
 8009054:	461a      	mov	r2, r3
 8009056:	460b      	mov	r3, r1
 8009058:	71fb      	strb	r3, [r7, #7]
 800905a:	4613      	mov	r3, r2
 800905c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009066:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	d123      	bne.n	80090b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800906e:	88bb      	ldrh	r3, [r7, #4]
 8009070:	3303      	adds	r3, #3
 8009072:	089b      	lsrs	r3, r3, #2
 8009074:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009076:	2300      	movs	r3, #0
 8009078:	61bb      	str	r3, [r7, #24]
 800907a:	e018      	b.n	80090ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	031a      	lsls	r2, r3, #12
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	4413      	add	r3, r2
 8009084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009088:	461a      	mov	r2, r3
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	3301      	adds	r3, #1
 800909a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	3301      	adds	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3301      	adds	r3, #1
 80090a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	3301      	adds	r3, #1
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d3e2      	bcc.n	800907c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3724      	adds	r7, #36	; 0x24
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b08b      	sub	sp, #44	; 0x2c
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090da:	88fb      	ldrh	r3, [r7, #6]
 80090dc:	089b      	lsrs	r3, r3, #2
 80090de:	b29b      	uxth	r3, r3
 80090e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	f003 0303 	and.w	r3, r3, #3
 80090e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	623b      	str	r3, [r7, #32]
 80090ee:	e014      	b.n	800911a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	3301      	adds	r3, #1
 8009100:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	3301      	adds	r3, #1
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	3301      	adds	r3, #1
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	3301      	adds	r3, #1
 8009112:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	3301      	adds	r3, #1
 8009118:	623b      	str	r3, [r7, #32]
 800911a:	6a3a      	ldr	r2, [r7, #32]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	429a      	cmp	r2, r3
 8009120:	d3e6      	bcc.n	80090f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009122:	8bfb      	ldrh	r3, [r7, #30]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01e      	beq.n	8009166 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009132:	461a      	mov	r2, r3
 8009134:	f107 0310 	add.w	r3, r7, #16
 8009138:	6812      	ldr	r2, [r2, #0]
 800913a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	fa22 f303 	lsr.w	r3, r2, r3
 8009148:	b2da      	uxtb	r2, r3
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	701a      	strb	r2, [r3, #0]
      i++;
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	3301      	adds	r3, #1
 8009152:	623b      	str	r3, [r7, #32]
      pDest++;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	3301      	adds	r3, #1
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800915a:	8bfb      	ldrh	r3, [r7, #30]
 800915c:	3b01      	subs	r3, #1
 800915e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009160:	8bfb      	ldrh	r3, [r7, #30]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1ea      	bne.n	800913c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009168:	4618      	mov	r0, r3
 800916a:	372c      	adds	r7, #44	; 0x2c
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d12c      	bne.n	80091ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	db12      	blt.n	80091c8 <USB_EPSetStall+0x54>
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00f      	beq.n	80091c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	e02b      	b.n	8009242 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	db12      	blt.n	8009222 <USB_EPSetStall+0xae>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00f      	beq.n	8009222 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	0151      	lsls	r1, r2, #5
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	440a      	add	r2, r1
 8009218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800921c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009220:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	0151      	lsls	r1, r2, #5
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	440a      	add	r2, r1
 8009238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800923c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009240:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d128      	bne.n	80092be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	0151      	lsls	r1, r2, #5
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	440a      	add	r2, r1
 8009282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800928a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	791b      	ldrb	r3, [r3, #4]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d003      	beq.n	800929c <USB_EPClearStall+0x4c>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	791b      	ldrb	r3, [r3, #4]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d138      	bne.n	800930e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	e027      	b.n	800930e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	791b      	ldrb	r3, [r3, #4]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d003      	beq.n	80092ee <USB_EPClearStall+0x9e>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	791b      	ldrb	r3, [r3, #4]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d10f      	bne.n	800930e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	440a      	add	r2, r1
 8009304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800930c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800933a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800933e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	011b      	lsls	r3, r3, #4
 800934c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009350:	68f9      	ldr	r1, [r7, #12]
 8009352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009356:	4313      	orrs	r3, r2
 8009358:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009396:	f023 0302 	bic.w	r3, r3, #2
 800939a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093c4:	f023 0303 	bic.w	r3, r3, #3
 80093c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093d8:	f043 0302 	orr.w	r3, r3, #2
 80093dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4013      	ands	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009404:	68fb      	ldr	r3, [r7, #12]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009412:	b480      	push	{r7}
 8009414:	b085      	sub	sp, #20
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	4013      	ands	r3, r2
 8009434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	0c1b      	lsrs	r3, r3, #16
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	4013      	ands	r3, r2
 8009468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	b29b      	uxth	r3, r3
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	4013      	ands	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094a8:	68bb      	ldr	r3, [r7, #8]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b087      	sub	sp, #28
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	f003 030f 	and.w	r3, r3, #15
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	fa22 f303 	lsr.w	r3, r2, r3
 80094e6:	01db      	lsls	r3, r3, #7
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	4013      	ands	r3, r2
 8009502:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009504:	68bb      	ldr	r3, [r7, #8]
}
 8009506:	4618      	mov	r0, r3
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f003 0301 	and.w	r3, r3, #1
}
 8009522:	4618      	mov	r0, r3
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800952e:	b480      	push	{r7}
 8009530:	b085      	sub	sp, #20
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009548:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800954c:	f023 0307 	bic.w	r3, r3, #7
 8009550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	460b      	mov	r3, r1
 800957e:	607a      	str	r2, [r7, #4]
 8009580:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	333c      	adds	r3, #60	; 0x3c
 800958a:	3304      	adds	r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	4a26      	ldr	r2, [pc, #152]	; (800962c <USB_EP0_OutStart+0xb8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d90a      	bls.n	80095ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095a8:	d101      	bne.n	80095ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e037      	b.n	800961e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b4:	461a      	mov	r2, r3
 80095b6:	2300      	movs	r3, #0
 80095b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095dc:	f043 0318 	orr.w	r3, r3, #24
 80095e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095f6:	7afb      	ldrb	r3, [r7, #11]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d10f      	bne.n	800961c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009616:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800961a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	4f54300a 	.word	0x4f54300a

08009630 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3301      	adds	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4a13      	ldr	r2, [pc, #76]	; (8009694 <USB_CoreReset+0x64>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d901      	bls.n	800964e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e01b      	b.n	8009686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	daf2      	bge.n	800963c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f043 0201 	orr.w	r2, r3, #1
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4a09      	ldr	r2, [pc, #36]	; (8009694 <USB_CoreReset+0x64>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d901      	bls.n	8009678 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e006      	b.n	8009686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b01      	cmp	r3, #1
 8009682:	d0f0      	beq.n	8009666 <USB_CoreReset+0x36>

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	00030d40 	.word	0x00030d40

08009698 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80096a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80096a8:	f005 fb22 	bl	800ecf0 <USBD_static_malloc>
 80096ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d109      	bne.n	80096c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	32b0      	adds	r2, #176	; 0xb0
 80096be:	2100      	movs	r1, #0
 80096c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80096c4:	2302      	movs	r3, #2
 80096c6:	e0d4      	b.n	8009872 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80096c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80096cc:	2100      	movs	r1, #0
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f005 fc83 	bl	800efda <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32b0      	adds	r2, #176	; 0xb0
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	32b0      	adds	r2, #176	; 0xb0
 80096ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	7c1b      	ldrb	r3, [r3, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d138      	bne.n	8009772 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009700:	4b5e      	ldr	r3, [pc, #376]	; (800987c <USBD_CDC_Init+0x1e4>)
 8009702:	7819      	ldrb	r1, [r3, #0]
 8009704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009708:	2202      	movs	r2, #2
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f005 f97f 	bl	800ea0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009710:	4b5a      	ldr	r3, [pc, #360]	; (800987c <USBD_CDC_Init+0x1e4>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	f003 020f 	and.w	r2, r3, #15
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	440b      	add	r3, r1
 8009724:	3324      	adds	r3, #36	; 0x24
 8009726:	2201      	movs	r2, #1
 8009728:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800972a:	4b55      	ldr	r3, [pc, #340]	; (8009880 <USBD_CDC_Init+0x1e8>)
 800972c:	7819      	ldrb	r1, [r3, #0]
 800972e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009732:	2202      	movs	r2, #2
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f005 f96a 	bl	800ea0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800973a:	4b51      	ldr	r3, [pc, #324]	; (8009880 <USBD_CDC_Init+0x1e8>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	f003 020f 	and.w	r2, r3, #15
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009752:	2201      	movs	r2, #1
 8009754:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009756:	4b4b      	ldr	r3, [pc, #300]	; (8009884 <USBD_CDC_Init+0x1ec>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	f003 020f 	and.w	r2, r3, #15
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	3326      	adds	r3, #38	; 0x26
 800976c:	2210      	movs	r2, #16
 800976e:	801a      	strh	r2, [r3, #0]
 8009770:	e035      	b.n	80097de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009772:	4b42      	ldr	r3, [pc, #264]	; (800987c <USBD_CDC_Init+0x1e4>)
 8009774:	7819      	ldrb	r1, [r3, #0]
 8009776:	2340      	movs	r3, #64	; 0x40
 8009778:	2202      	movs	r2, #2
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f005 f947 	bl	800ea0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009780:	4b3e      	ldr	r3, [pc, #248]	; (800987c <USBD_CDC_Init+0x1e4>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	f003 020f 	and.w	r2, r3, #15
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	3324      	adds	r3, #36	; 0x24
 8009796:	2201      	movs	r2, #1
 8009798:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800979a:	4b39      	ldr	r3, [pc, #228]	; (8009880 <USBD_CDC_Init+0x1e8>)
 800979c:	7819      	ldrb	r1, [r3, #0]
 800979e:	2340      	movs	r3, #64	; 0x40
 80097a0:	2202      	movs	r2, #2
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f005 f933 	bl	800ea0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80097a8:	4b35      	ldr	r3, [pc, #212]	; (8009880 <USBD_CDC_Init+0x1e8>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 020f 	and.w	r2, r3, #15
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097c0:	2201      	movs	r2, #1
 80097c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80097c4:	4b2f      	ldr	r3, [pc, #188]	; (8009884 <USBD_CDC_Init+0x1ec>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 020f 	and.w	r2, r3, #15
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	440b      	add	r3, r1
 80097d8:	3326      	adds	r3, #38	; 0x26
 80097da:	2210      	movs	r2, #16
 80097dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097de:	4b29      	ldr	r3, [pc, #164]	; (8009884 <USBD_CDC_Init+0x1ec>)
 80097e0:	7819      	ldrb	r1, [r3, #0]
 80097e2:	2308      	movs	r3, #8
 80097e4:	2203      	movs	r2, #3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f005 f911 	bl	800ea0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097ec:	4b25      	ldr	r3, [pc, #148]	; (8009884 <USBD_CDC_Init+0x1ec>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	f003 020f 	and.w	r2, r3, #15
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	440b      	add	r3, r1
 8009800:	3324      	adds	r3, #36	; 0x24
 8009802:	2201      	movs	r2, #1
 8009804:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	33b0      	adds	r3, #176	; 0xb0
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800983c:	2302      	movs	r3, #2
 800983e:	e018      	b.n	8009872 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7c1b      	ldrb	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009848:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <USBD_CDC_Init+0x1e8>)
 800984a:	7819      	ldrb	r1, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f005 f9c8 	bl	800ebec <USBD_LL_PrepareReceive>
 800985c:	e008      	b.n	8009870 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800985e:	4b08      	ldr	r3, [pc, #32]	; (8009880 <USBD_CDC_Init+0x1e8>)
 8009860:	7819      	ldrb	r1, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f005 f9be 	bl	800ebec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000097 	.word	0x20000097
 8009880:	20000098 	.word	0x20000098
 8009884:	20000099 	.word	0x20000099

08009888 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009894:	4b3a      	ldr	r3, [pc, #232]	; (8009980 <USBD_CDC_DeInit+0xf8>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f005 f8dd 	bl	800ea5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80098a0:	4b37      	ldr	r3, [pc, #220]	; (8009980 <USBD_CDC_DeInit+0xf8>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f003 020f 	and.w	r2, r3, #15
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	440b      	add	r3, r1
 80098b4:	3324      	adds	r3, #36	; 0x24
 80098b6:	2200      	movs	r2, #0
 80098b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80098ba:	4b32      	ldr	r3, [pc, #200]	; (8009984 <USBD_CDC_DeInit+0xfc>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f005 f8ca 	bl	800ea5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80098c6:	4b2f      	ldr	r3, [pc, #188]	; (8009984 <USBD_CDC_DeInit+0xfc>)
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	f003 020f 	and.w	r2, r3, #15
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098de:	2200      	movs	r2, #0
 80098e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80098e2:	4b29      	ldr	r3, [pc, #164]	; (8009988 <USBD_CDC_DeInit+0x100>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f005 f8b6 	bl	800ea5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80098ee:	4b26      	ldr	r3, [pc, #152]	; (8009988 <USBD_CDC_DeInit+0x100>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	f003 020f 	and.w	r2, r3, #15
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	3324      	adds	r3, #36	; 0x24
 8009904:	2200      	movs	r2, #0
 8009906:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009908:	4b1f      	ldr	r3, [pc, #124]	; (8009988 <USBD_CDC_DeInit+0x100>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	3326      	adds	r3, #38	; 0x26
 800991e:	2200      	movs	r2, #0
 8009920:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	32b0      	adds	r2, #176	; 0xb0
 800992c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d01f      	beq.n	8009974 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	33b0      	adds	r3, #176	; 0xb0
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	32b0      	adds	r2, #176	; 0xb0
 8009952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009956:	4618      	mov	r0, r3
 8009958:	f005 f9d8 	bl	800ed0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	32b0      	adds	r2, #176	; 0xb0
 8009966:	2100      	movs	r1, #0
 8009968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20000097 	.word	0x20000097
 8009984:	20000098 	.word	0x20000098
 8009988:	20000099 	.word	0x20000099

0800998c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	32b0      	adds	r2, #176	; 0xb0
 80099a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e0bf      	b.n	8009b3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d050      	beq.n	8009a6a <USBD_CDC_Setup+0xde>
 80099c8:	2b20      	cmp	r3, #32
 80099ca:	f040 80af 	bne.w	8009b2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d03a      	beq.n	8009a4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	b25b      	sxtb	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da1b      	bge.n	8009a18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	33b0      	adds	r3, #176	; 0xb0
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80099f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	88d2      	ldrh	r2, [r2, #6]
 80099fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	88db      	ldrh	r3, [r3, #6]
 8009a02:	2b07      	cmp	r3, #7
 8009a04:	bf28      	it	cs
 8009a06:	2307      	movcs	r3, #7
 8009a08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	89fa      	ldrh	r2, [r7, #14]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 fdb3 	bl	800b57c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009a16:	e090      	b.n	8009b3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	785a      	ldrb	r2, [r3, #1]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	88db      	ldrh	r3, [r3, #6]
 8009a26:	2b3f      	cmp	r3, #63	; 0x3f
 8009a28:	d803      	bhi.n	8009a32 <USBD_CDC_Setup+0xa6>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	88db      	ldrh	r3, [r3, #6]
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	e000      	b.n	8009a34 <USBD_CDC_Setup+0xa8>
 8009a32:	2240      	movs	r2, #64	; 0x40
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a3a:	6939      	ldr	r1, [r7, #16]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009a42:	461a      	mov	r2, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f001 fdc5 	bl	800b5d4 <USBD_CtlPrepareRx>
      break;
 8009a4a:	e076      	b.n	8009b3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	33b0      	adds	r3, #176	; 0xb0
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	7850      	ldrb	r0, [r2, #1]
 8009a62:	2200      	movs	r2, #0
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	4798      	blx	r3
      break;
 8009a68:	e067      	b.n	8009b3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	785b      	ldrb	r3, [r3, #1]
 8009a6e:	2b0b      	cmp	r3, #11
 8009a70:	d851      	bhi.n	8009b16 <USBD_CDC_Setup+0x18a>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <USBD_CDC_Setup+0xec>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009aa9 	.word	0x08009aa9
 8009a7c:	08009b25 	.word	0x08009b25
 8009a80:	08009b17 	.word	0x08009b17
 8009a84:	08009b17 	.word	0x08009b17
 8009a88:	08009b17 	.word	0x08009b17
 8009a8c:	08009b17 	.word	0x08009b17
 8009a90:	08009b17 	.word	0x08009b17
 8009a94:	08009b17 	.word	0x08009b17
 8009a98:	08009b17 	.word	0x08009b17
 8009a9c:	08009b17 	.word	0x08009b17
 8009aa0:	08009ad3 	.word	0x08009ad3
 8009aa4:	08009afd 	.word	0x08009afd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d107      	bne.n	8009ac4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ab4:	f107 030a 	add.w	r3, r7, #10
 8009ab8:	2202      	movs	r2, #2
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f001 fd5d 	bl	800b57c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ac2:	e032      	b.n	8009b2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 fce7 	bl	800b49a <USBD_CtlError>
            ret = USBD_FAIL;
 8009acc:	2303      	movs	r3, #3
 8009ace:	75fb      	strb	r3, [r7, #23]
          break;
 8009ad0:	e02b      	b.n	8009b2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d107      	bne.n	8009aee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ade:	f107 030d 	add.w	r3, r7, #13
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 fd48 	bl	800b57c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009aec:	e01d      	b.n	8009b2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 fcd2 	bl	800b49a <USBD_CtlError>
            ret = USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	75fb      	strb	r3, [r7, #23]
          break;
 8009afa:	e016      	b.n	8009b2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d00f      	beq.n	8009b28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 fcc5 	bl	800b49a <USBD_CtlError>
            ret = USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b14:	e008      	b.n	8009b28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 fcbe 	bl	800b49a <USBD_CtlError>
          ret = USBD_FAIL;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	75fb      	strb	r3, [r7, #23]
          break;
 8009b22:	e002      	b.n	8009b2a <USBD_CDC_Setup+0x19e>
          break;
 8009b24:	bf00      	nop
 8009b26:	e008      	b.n	8009b3a <USBD_CDC_Setup+0x1ae>
          break;
 8009b28:	bf00      	nop
      }
      break;
 8009b2a:	e006      	b.n	8009b3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 fcb3 	bl	800b49a <USBD_CtlError>
      ret = USBD_FAIL;
 8009b34:	2303      	movs	r3, #3
 8009b36:	75fb      	strb	r3, [r7, #23]
      break;
 8009b38:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	32b0      	adds	r2, #176	; 0xb0
 8009b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e065      	b.n	8009c3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	32b0      	adds	r2, #176	; 0xb0
 8009b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	f003 020f 	and.w	r2, r3, #15
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	3318      	adds	r3, #24
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d02f      	beq.n	8009bf8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	f003 020f 	and.w	r2, r3, #15
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	3318      	adds	r3, #24
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	f003 010f 	and.w	r1, r3, #15
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	440b      	add	r3, r1
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4403      	add	r3, r0
 8009bc0:	3348      	adds	r3, #72	; 0x48
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d112      	bne.n	8009bf8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	f003 020f 	and.w	r2, r3, #15
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	440b      	add	r3, r1
 8009be4:	3318      	adds	r3, #24
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bea:	78f9      	ldrb	r1, [r7, #3]
 8009bec:	2300      	movs	r3, #0
 8009bee:	2200      	movs	r2, #0
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f004 ffda 	bl	800ebaa <USBD_LL_Transmit>
 8009bf6:	e01f      	b.n	8009c38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	33b0      	adds	r3, #176	; 0xb0
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d010      	beq.n	8009c38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	33b0      	adds	r3, #176	; 0xb0
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009c34:	78fa      	ldrb	r2, [r7, #3]
 8009c36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	32b0      	adds	r2, #176	; 0xb0
 8009c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	32b0      	adds	r2, #176	; 0xb0
 8009c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e01a      	b.n	8009caa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f004 ffd8 	bl	800ec2e <USBD_LL_GetRxDataSize>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	33b0      	adds	r3, #176	; 0xb0
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	32b0      	adds	r2, #176	; 0xb0
 8009cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e025      	b.n	8009d20 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	33b0      	adds	r3, #176	; 0xb0
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01a      	beq.n	8009d1e <USBD_CDC_EP0_RxReady+0x6c>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009cee:	2bff      	cmp	r3, #255	; 0xff
 8009cf0:	d015      	beq.n	8009d1e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	33b0      	adds	r3, #176	; 0xb0
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009d0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d12:	b292      	uxth	r2, r2
 8009d14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	22ff      	movs	r2, #255	; 0xff
 8009d1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d30:	2182      	movs	r1, #130	; 0x82
 8009d32:	4818      	ldr	r0, [pc, #96]	; (8009d94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d34:	f000 fd4f 	bl	800a7d6 <USBD_GetEpDesc>
 8009d38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4815      	ldr	r0, [pc, #84]	; (8009d94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d3e:	f000 fd4a 	bl	800a7d6 <USBD_GetEpDesc>
 8009d42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d44:	2181      	movs	r1, #129	; 0x81
 8009d46:	4813      	ldr	r0, [pc, #76]	; (8009d94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d48:	f000 fd45 	bl	800a7d6 <USBD_GetEpDesc>
 8009d4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2210      	movs	r2, #16
 8009d58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d006      	beq.n	8009d6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d68:	711a      	strb	r2, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d006      	beq.n	8009d82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d7c:	711a      	strb	r2, [r3, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2243      	movs	r2, #67	; 0x43
 8009d86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d88:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000054 	.word	0x20000054

08009d98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009da0:	2182      	movs	r1, #130	; 0x82
 8009da2:	4818      	ldr	r0, [pc, #96]	; (8009e04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009da4:	f000 fd17 	bl	800a7d6 <USBD_GetEpDesc>
 8009da8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009daa:	2101      	movs	r1, #1
 8009dac:	4815      	ldr	r0, [pc, #84]	; (8009e04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009dae:	f000 fd12 	bl	800a7d6 <USBD_GetEpDesc>
 8009db2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009db4:	2181      	movs	r1, #129	; 0x81
 8009db6:	4813      	ldr	r0, [pc, #76]	; (8009e04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009db8:	f000 fd0d 	bl	800a7d6 <USBD_GetEpDesc>
 8009dbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2210      	movs	r2, #16
 8009dc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d006      	beq.n	8009dde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	711a      	strb	r2, [r3, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f042 0202 	orr.w	r2, r2, #2
 8009ddc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d006      	beq.n	8009df2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	711a      	strb	r2, [r3, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f042 0202 	orr.w	r2, r2, #2
 8009df0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2243      	movs	r2, #67	; 0x43
 8009df6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000054 	.word	0x20000054

08009e08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e10:	2182      	movs	r1, #130	; 0x82
 8009e12:	4818      	ldr	r0, [pc, #96]	; (8009e74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e14:	f000 fcdf 	bl	800a7d6 <USBD_GetEpDesc>
 8009e18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	4815      	ldr	r0, [pc, #84]	; (8009e74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e1e:	f000 fcda 	bl	800a7d6 <USBD_GetEpDesc>
 8009e22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e24:	2181      	movs	r1, #129	; 0x81
 8009e26:	4813      	ldr	r0, [pc, #76]	; (8009e74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e28:	f000 fcd5 	bl	800a7d6 <USBD_GetEpDesc>
 8009e2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	2210      	movs	r2, #16
 8009e38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d006      	beq.n	8009e4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e48:	711a      	strb	r2, [r3, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d006      	beq.n	8009e62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e5c:	711a      	strb	r2, [r3, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2243      	movs	r2, #67	; 0x43
 8009e66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20000054 	.word	0x20000054

08009e78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	220a      	movs	r2, #10
 8009e84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e86:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	20000010 	.word	0x20000010

08009e98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e009      	b.n	8009ec0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	33b0      	adds	r3, #176	; 0xb0
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	32b0      	adds	r2, #176	; 0xb0
 8009ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e008      	b.n	8009f04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	371c      	adds	r7, #28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	32b0      	adds	r2, #176	; 0xb0
 8009f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e004      	b.n	8009f3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
	...

08009f4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32b0      	adds	r2, #176	; 0xb0
 8009f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f64:	2301      	movs	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	32b0      	adds	r2, #176	; 0xb0
 8009f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e025      	b.n	8009fca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11f      	bne.n	8009fc8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009f90:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <USBD_CDC_TransmitPacket+0x88>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 020f 	and.w	r2, r3, #15
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4403      	add	r3, r0
 8009faa:	3318      	adds	r3, #24
 8009fac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009fae:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <USBD_CDC_TransmitPacket+0x88>)
 8009fb0:	7819      	ldrb	r1, [r3, #0]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f004 fdf3 	bl	800ebaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000097 	.word	0x20000097

08009fd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	32b0      	adds	r2, #176	; 0xb0
 8009fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	32b0      	adds	r2, #176	; 0xb0
 8009ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a002:	2303      	movs	r3, #3
 800a004:	e018      	b.n	800a038 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7c1b      	ldrb	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10a      	bne.n	800a024 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a00e:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <USBD_CDC_ReceivePacket+0x68>)
 800a010:	7819      	ldrb	r1, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f004 fde5 	bl	800ebec <USBD_LL_PrepareReceive>
 800a022:	e008      	b.n	800a036 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a024:	4b06      	ldr	r3, [pc, #24]	; (800a040 <USBD_CDC_ReceivePacket+0x68>)
 800a026:	7819      	ldrb	r1, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a02e:	2340      	movs	r3, #64	; 0x40
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f004 fddb 	bl	800ebec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000098 	.word	0x20000098

0800a044 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	4613      	mov	r3, r2
 800a050:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	e01f      	b.n	800a09c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	79fa      	ldrb	r2, [r7, #7]
 800a08e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f004 fc55 	bl	800e940 <USBD_LL_Init>
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e025      	b.n	800a108 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	32ae      	adds	r2, #174	; 0xae
 800a0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00f      	beq.n	800a0f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	32ae      	adds	r2, #174	; 0xae
 800a0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e8:	f107 020e 	add.w	r2, r7, #14
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f004 fc5d 	bl	800e9d8 <USBD_LL_Start>
 800a11e:	4603      	mov	r3, r0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a130:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a132:	4618      	mov	r0, r3
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a154:	2b00      	cmp	r3, #0
 800a156:	d009      	beq.n	800a16c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	78fa      	ldrb	r2, [r7, #3]
 800a162:	4611      	mov	r1, r2
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	4798      	blx	r3
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	78fa      	ldrb	r2, [r7, #3]
 800a190:	4611      	mov	r1, r2
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	4798      	blx	r3
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a19c:	2303      	movs	r3, #3
 800a19e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 f932 	bl	800b426 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1de:	f003 031f 	and.w	r3, r3, #31
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d01a      	beq.n	800a21c <USBD_LL_SetupStage+0x72>
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d822      	bhi.n	800a230 <USBD_LL_SetupStage+0x86>
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <USBD_LL_SetupStage+0x4a>
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d00a      	beq.n	800a208 <USBD_LL_SetupStage+0x5e>
 800a1f2:	e01d      	b.n	800a230 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fb5f 	bl	800a8c0 <USBD_StdDevReq>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]
      break;
 800a206:	e020      	b.n	800a24a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fbc7 	bl	800a9a4 <USBD_StdItfReq>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]
      break;
 800a21a:	e016      	b.n	800a24a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fc29 	bl	800aa7c <USBD_StdEPReq>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73fb      	strb	r3, [r7, #15]
      break;
 800a22e:	e00c      	b.n	800a24a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a236:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f004 fc2a 	bl	800ea98 <USBD_LL_StallEP>
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]
      break;
 800a248:	bf00      	nop
  }

  return ret;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	460b      	mov	r3, r1
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d16e      	bne.n	800a34a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a272:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	f040 8098 	bne.w	800a3b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d913      	bls.n	800a2b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	1ad2      	subs	r2, r2, r3
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	bf28      	it	cs
 800a2a6:	4613      	movcs	r3, r2
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f001 f9ae 	bl	800b60e <USBD_CtlContinueRx>
 800a2b2:	e07d      	b.n	800a3b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2ba:	f003 031f 	and.w	r3, r3, #31
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d014      	beq.n	800a2ec <USBD_LL_DataOutStage+0x98>
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d81d      	bhi.n	800a302 <USBD_LL_DataOutStage+0xae>
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <USBD_LL_DataOutStage+0x7c>
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d003      	beq.n	800a2d6 <USBD_LL_DataOutStage+0x82>
 800a2ce:	e018      	b.n	800a302 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	75bb      	strb	r3, [r7, #22]
            break;
 800a2d4:	e018      	b.n	800a308 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	4619      	mov	r1, r3
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 fa5e 	bl	800a7a2 <USBD_CoreFindIF>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	75bb      	strb	r3, [r7, #22]
            break;
 800a2ea:	e00d      	b.n	800a308 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 fa60 	bl	800a7bc <USBD_CoreFindEP>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75bb      	strb	r3, [r7, #22]
            break;
 800a300:	e002      	b.n	800a308 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	75bb      	strb	r3, [r7, #22]
            break;
 800a306:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a308:	7dbb      	ldrb	r3, [r7, #22]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d119      	bne.n	800a342 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b03      	cmp	r3, #3
 800a318:	d113      	bne.n	800a342 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a31a:	7dba      	ldrb	r2, [r7, #22]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	32ae      	adds	r2, #174	; 0xae
 800a320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00b      	beq.n	800a342 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a32a:	7dba      	ldrb	r2, [r7, #22]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a332:	7dba      	ldrb	r2, [r7, #22]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	32ae      	adds	r2, #174	; 0xae
 800a338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f001 f974 	bl	800b630 <USBD_CtlSendStatus>
 800a348:	e032      	b.n	800a3b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a34a:	7afb      	ldrb	r3, [r7, #11]
 800a34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a350:	b2db      	uxtb	r3, r3
 800a352:	4619      	mov	r1, r3
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 fa31 	bl	800a7bc <USBD_CoreFindEP>
 800a35a:	4603      	mov	r3, r0
 800a35c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a35e:	7dbb      	ldrb	r3, [r7, #22]
 800a360:	2bff      	cmp	r3, #255	; 0xff
 800a362:	d025      	beq.n	800a3b0 <USBD_LL_DataOutStage+0x15c>
 800a364:	7dbb      	ldrb	r3, [r7, #22]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d122      	bne.n	800a3b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b03      	cmp	r3, #3
 800a374:	d117      	bne.n	800a3a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a376:	7dba      	ldrb	r2, [r7, #22]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	32ae      	adds	r2, #174	; 0xae
 800a37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00f      	beq.n	800a3a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a386:	7dba      	ldrb	r2, [r7, #22]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a38e:	7dba      	ldrb	r2, [r7, #22]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	32ae      	adds	r2, #174	; 0xae
 800a394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	7afa      	ldrb	r2, [r7, #11]
 800a39c:	4611      	mov	r1, r2
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	4798      	blx	r3
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a3a6:	7dfb      	ldrb	r3, [r7, #23]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	e000      	b.n	800a3b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b086      	sub	sp, #24
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	607a      	str	r2, [r7, #4]
 800a3c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d16f      	bne.n	800a4ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3314      	adds	r3, #20
 800a3d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d15a      	bne.n	800a494 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	689a      	ldr	r2, [r3, #8]
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d914      	bls.n	800a414 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	689a      	ldr	r2, [r3, #8]
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	1ad2      	subs	r2, r2, r3
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f001 f8d6 	bl	800b5b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a406:	2300      	movs	r3, #0
 800a408:	2200      	movs	r2, #0
 800a40a:	2100      	movs	r1, #0
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f004 fbed 	bl	800ebec <USBD_LL_PrepareReceive>
 800a412:	e03f      	b.n	800a494 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	68da      	ldr	r2, [r3, #12]
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d11c      	bne.n	800a45a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a428:	429a      	cmp	r2, r3
 800a42a:	d316      	bcc.n	800a45a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a436:	429a      	cmp	r2, r3
 800a438:	d20f      	bcs.n	800a45a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a43a:	2200      	movs	r2, #0
 800a43c:	2100      	movs	r1, #0
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f001 f8b7 	bl	800b5b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a44c:	2300      	movs	r3, #0
 800a44e:	2200      	movs	r2, #0
 800a450:	2100      	movs	r1, #0
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f004 fbca 	bl	800ebec <USBD_LL_PrepareReceive>
 800a458:	e01c      	b.n	800a494 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b03      	cmp	r3, #3
 800a464:	d10f      	bne.n	800a486 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d009      	beq.n	800a486 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a486:	2180      	movs	r1, #128	; 0x80
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f004 fb05 	bl	800ea98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f001 f8e1 	bl	800b656 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d03a      	beq.n	800a514 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff fe42 	bl	800a128 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a4ac:	e032      	b.n	800a514 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
 800a4b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 f97f 	bl	800a7bc <USBD_CoreFindEP>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	2bff      	cmp	r3, #255	; 0xff
 800a4c6:	d025      	beq.n	800a514 <USBD_LL_DataInStage+0x15a>
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d122      	bne.n	800a514 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d11c      	bne.n	800a514 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a4da:	7dfa      	ldrb	r2, [r7, #23]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	32ae      	adds	r2, #174	; 0xae
 800a4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d014      	beq.n	800a514 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4ea:	7dfa      	ldrb	r2, [r7, #23]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4f2:	7dfa      	ldrb	r2, [r7, #23]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	32ae      	adds	r2, #174	; 0xae
 800a4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	7afa      	ldrb	r2, [r7, #11]
 800a500:	4611      	mov	r1, r2
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	4798      	blx	r3
 800a506:	4603      	mov	r3, r0
 800a508:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a50a:	7dbb      	ldrb	r3, [r7, #22]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a510:	7dbb      	ldrb	r3, [r7, #22]
 800a512:	e000      	b.n	800a516 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d014      	beq.n	800a584 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00e      	beq.n	800a584 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6852      	ldr	r2, [r2, #4]
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	4611      	mov	r1, r2
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	4798      	blx	r3
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a584:	2340      	movs	r3, #64	; 0x40
 800a586:	2200      	movs	r2, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f004 fa3f 	bl	800ea0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2240      	movs	r2, #64	; 0x40
 800a59c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2180      	movs	r1, #128	; 0x80
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f004 fa31 	bl	800ea0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2240      	movs	r2, #64	; 0x40
 800a5b6:	621a      	str	r2, [r3, #32]

  return ret;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b083      	sub	sp, #12
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2204      	movs	r2, #4
 800a5fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d106      	bne.n	800a630 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d110      	bne.n	800a674 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00b      	beq.n	800a674 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	460b      	mov	r3, r1
 800a688:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	32ae      	adds	r2, #174	; 0xae
 800a694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e01c      	b.n	800a6da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d115      	bne.n	800a6d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	32ae      	adds	r2, #174	; 0xae
 800a6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00b      	beq.n	800a6d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	32ae      	adds	r2, #174	; 0xae
 800a6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	78fa      	ldrb	r2, [r7, #3]
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	32ae      	adds	r2, #174	; 0xae
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a700:	2303      	movs	r3, #3
 800a702:	e01c      	b.n	800a73e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d115      	bne.n	800a73c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	32ae      	adds	r2, #174	; 0xae
 800a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00b      	beq.n	800a73c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32ae      	adds	r2, #174	; 0xae
 800a72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	78fa      	ldrb	r2, [r7, #3]
 800a736:	4611      	mov	r1, r2
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00e      	beq.n	800a798 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	6852      	ldr	r2, [r2, #4]
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	4611      	mov	r1, r2
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	4798      	blx	r3
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a794:	2303      	movs	r3, #3
 800a796:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a798:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b083      	sub	sp, #12
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b086      	sub	sp, #24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	885b      	ldrh	r3, [r3, #2]
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d920      	bls.n	800a840 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a806:	e013      	b.n	800a830 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a808:	f107 030a 	add.w	r3, r7, #10
 800a80c:	4619      	mov	r1, r3
 800a80e:	6978      	ldr	r0, [r7, #20]
 800a810:	f000 f81b 	bl	800a84a <USBD_GetNextDesc>
 800a814:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	785b      	ldrb	r3, [r3, #1]
 800a81a:	2b05      	cmp	r3, #5
 800a81c:	d108      	bne.n	800a830 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	789b      	ldrb	r3, [r3, #2]
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d008      	beq.n	800a83e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a82c:	2300      	movs	r3, #0
 800a82e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	885b      	ldrh	r3, [r3, #2]
 800a834:	b29a      	uxth	r2, r3
 800a836:	897b      	ldrh	r3, [r7, #10]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d8e5      	bhi.n	800a808 <USBD_GetEpDesc+0x32>
 800a83c:	e000      	b.n	800a840 <USBD_GetEpDesc+0x6a>
          break;
 800a83e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a840:	693b      	ldr	r3, [r7, #16]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	881a      	ldrh	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	b29b      	uxth	r3, r3
 800a862:	4413      	add	r3, r2
 800a864:	b29a      	uxth	r2, r3
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4413      	add	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a876:	68fb      	ldr	r3, [r7, #12]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	3301      	adds	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a8a2:	8a3b      	ldrh	r3, [r7, #16]
 800a8a4:	021b      	lsls	r3, r3, #8
 800a8a6:	b21a      	sxth	r2, r3
 800a8a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a8b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8d6:	2b40      	cmp	r3, #64	; 0x40
 800a8d8:	d005      	beq.n	800a8e6 <USBD_StdDevReq+0x26>
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d857      	bhi.n	800a98e <USBD_StdDevReq+0xce>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00f      	beq.n	800a902 <USBD_StdDevReq+0x42>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d153      	bne.n	800a98e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	32ae      	adds	r2, #174	; 0xae
 800a8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	4798      	blx	r3
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a900:	e04a      	b.n	800a998 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	785b      	ldrb	r3, [r3, #1]
 800a906:	2b09      	cmp	r3, #9
 800a908:	d83b      	bhi.n	800a982 <USBD_StdDevReq+0xc2>
 800a90a:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <USBD_StdDevReq+0x50>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a965 	.word	0x0800a965
 800a914:	0800a979 	.word	0x0800a979
 800a918:	0800a983 	.word	0x0800a983
 800a91c:	0800a96f 	.word	0x0800a96f
 800a920:	0800a983 	.word	0x0800a983
 800a924:	0800a943 	.word	0x0800a943
 800a928:	0800a939 	.word	0x0800a939
 800a92c:	0800a983 	.word	0x0800a983
 800a930:	0800a95b 	.word	0x0800a95b
 800a934:	0800a94d 	.word	0x0800a94d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fa3c 	bl	800adb8 <USBD_GetDescriptor>
          break;
 800a940:	e024      	b.n	800a98c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fbcb 	bl	800b0e0 <USBD_SetAddress>
          break;
 800a94a:	e01f      	b.n	800a98c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fc0a 	bl	800b168 <USBD_SetConfig>
 800a954:	4603      	mov	r3, r0
 800a956:	73fb      	strb	r3, [r7, #15]
          break;
 800a958:	e018      	b.n	800a98c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fcad 	bl	800b2bc <USBD_GetConfig>
          break;
 800a962:	e013      	b.n	800a98c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fcde 	bl	800b328 <USBD_GetStatus>
          break;
 800a96c:	e00e      	b.n	800a98c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fd0d 	bl	800b390 <USBD_SetFeature>
          break;
 800a976:	e009      	b.n	800a98c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fd31 	bl	800b3e2 <USBD_ClrFeature>
          break;
 800a980:	e004      	b.n	800a98c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fd88 	bl	800b49a <USBD_CtlError>
          break;
 800a98a:	bf00      	nop
      }
      break;
 800a98c:	e004      	b.n	800a998 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fd82 	bl	800b49a <USBD_CtlError>
      break;
 800a996:	bf00      	nop
  }

  return ret;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop

0800a9a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9ba:	2b40      	cmp	r3, #64	; 0x40
 800a9bc:	d005      	beq.n	800a9ca <USBD_StdItfReq+0x26>
 800a9be:	2b40      	cmp	r3, #64	; 0x40
 800a9c0:	d852      	bhi.n	800aa68 <USBD_StdItfReq+0xc4>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <USBD_StdItfReq+0x26>
 800a9c6:	2b20      	cmp	r3, #32
 800a9c8:	d14e      	bne.n	800aa68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d840      	bhi.n	800aa5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	889b      	ldrh	r3, [r3, #4]
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d836      	bhi.n	800aa50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	889b      	ldrh	r3, [r3, #4]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff fed9 	bl	800a7a2 <USBD_CoreFindIF>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2bff      	cmp	r3, #255	; 0xff
 800a9f8:	d01d      	beq.n	800aa36 <USBD_StdItfReq+0x92>
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d11a      	bne.n	800aa36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aa00:	7bba      	ldrb	r2, [r7, #14]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	32ae      	adds	r2, #174	; 0xae
 800aa06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00f      	beq.n	800aa30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aa10:	7bba      	ldrb	r2, [r7, #14]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa18:	7bba      	ldrb	r2, [r7, #14]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	32ae      	adds	r2, #174	; 0xae
 800aa1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	4798      	blx	r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa2e:	e004      	b.n	800aa3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa30:	2303      	movs	r3, #3
 800aa32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa34:	e001      	b.n	800aa3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa36:	2303      	movs	r3, #3
 800aa38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	88db      	ldrh	r3, [r3, #6]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d110      	bne.n	800aa64 <USBD_StdItfReq+0xc0>
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10d      	bne.n	800aa64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fdf1 	bl	800b630 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa4e:	e009      	b.n	800aa64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fd21 	bl	800b49a <USBD_CtlError>
          break;
 800aa58:	e004      	b.n	800aa64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fd1c 	bl	800b49a <USBD_CtlError>
          break;
 800aa62:	e000      	b.n	800aa66 <USBD_StdItfReq+0xc2>
          break;
 800aa64:	bf00      	nop
      }
      break;
 800aa66:	e004      	b.n	800aa72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fd15 	bl	800b49a <USBD_CtlError>
      break;
 800aa70:	bf00      	nop
  }

  return ret;
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	889b      	ldrh	r3, [r3, #4]
 800aa8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa98:	2b40      	cmp	r3, #64	; 0x40
 800aa9a:	d007      	beq.n	800aaac <USBD_StdEPReq+0x30>
 800aa9c:	2b40      	cmp	r3, #64	; 0x40
 800aa9e:	f200 817f 	bhi.w	800ada0 <USBD_StdEPReq+0x324>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d02a      	beq.n	800aafc <USBD_StdEPReq+0x80>
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	f040 817a 	bne.w	800ada0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fe83 	bl	800a7bc <USBD_CoreFindEP>
 800aab6:	4603      	mov	r3, r0
 800aab8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaba:	7b7b      	ldrb	r3, [r7, #13]
 800aabc:	2bff      	cmp	r3, #255	; 0xff
 800aabe:	f000 8174 	beq.w	800adaa <USBD_StdEPReq+0x32e>
 800aac2:	7b7b      	ldrb	r3, [r7, #13]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f040 8170 	bne.w	800adaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aaca:	7b7a      	ldrb	r2, [r7, #13]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aad2:	7b7a      	ldrb	r2, [r7, #13]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	32ae      	adds	r2, #174	; 0xae
 800aad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8163 	beq.w	800adaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aae4:	7b7a      	ldrb	r2, [r7, #13]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	32ae      	adds	r2, #174	; 0xae
 800aaea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4798      	blx	r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aafa:	e156      	b.n	800adaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	785b      	ldrb	r3, [r3, #1]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d008      	beq.n	800ab16 <USBD_StdEPReq+0x9a>
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	f300 8145 	bgt.w	800ad94 <USBD_StdEPReq+0x318>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 809b 	beq.w	800ac46 <USBD_StdEPReq+0x1ca>
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d03c      	beq.n	800ab8e <USBD_StdEPReq+0x112>
 800ab14:	e13e      	b.n	800ad94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d002      	beq.n	800ab28 <USBD_StdEPReq+0xac>
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d016      	beq.n	800ab54 <USBD_StdEPReq+0xd8>
 800ab26:	e02c      	b.n	800ab82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00d      	beq.n	800ab4a <USBD_StdEPReq+0xce>
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	2b80      	cmp	r3, #128	; 0x80
 800ab32:	d00a      	beq.n	800ab4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f003 ffad 	bl	800ea98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab3e:	2180      	movs	r1, #128	; 0x80
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f003 ffa9 	bl	800ea98 <USBD_LL_StallEP>
 800ab46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab48:	e020      	b.n	800ab8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fca4 	bl	800b49a <USBD_CtlError>
              break;
 800ab52:	e01b      	b.n	800ab8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	885b      	ldrh	r3, [r3, #2]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10e      	bne.n	800ab7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <USBD_StdEPReq+0xfe>
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	2b80      	cmp	r3, #128	; 0x80
 800ab66:	d008      	beq.n	800ab7a <USBD_StdEPReq+0xfe>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	88db      	ldrh	r3, [r3, #6]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d104      	bne.n	800ab7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f003 ff8f 	bl	800ea98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fd58 	bl	800b630 <USBD_CtlSendStatus>

              break;
 800ab80:	e004      	b.n	800ab8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fc88 	bl	800b49a <USBD_CtlError>
              break;
 800ab8a:	bf00      	nop
          }
          break;
 800ab8c:	e107      	b.n	800ad9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d002      	beq.n	800aba0 <USBD_StdEPReq+0x124>
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d016      	beq.n	800abcc <USBD_StdEPReq+0x150>
 800ab9e:	e04b      	b.n	800ac38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00d      	beq.n	800abc2 <USBD_StdEPReq+0x146>
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
 800aba8:	2b80      	cmp	r3, #128	; 0x80
 800abaa:	d00a      	beq.n	800abc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abac:	7bbb      	ldrb	r3, [r7, #14]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f003 ff71 	bl	800ea98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abb6:	2180      	movs	r1, #128	; 0x80
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f003 ff6d 	bl	800ea98 <USBD_LL_StallEP>
 800abbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abc0:	e040      	b.n	800ac44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fc68 	bl	800b49a <USBD_CtlError>
              break;
 800abca:	e03b      	b.n	800ac44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	885b      	ldrh	r3, [r3, #2]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d136      	bne.n	800ac42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d004      	beq.n	800abe8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f003 ff77 	bl	800ead6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fd21 	bl	800b630 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff fde2 	bl	800a7bc <USBD_CoreFindEP>
 800abf8:	4603      	mov	r3, r0
 800abfa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abfc:	7b7b      	ldrb	r3, [r7, #13]
 800abfe:	2bff      	cmp	r3, #255	; 0xff
 800ac00:	d01f      	beq.n	800ac42 <USBD_StdEPReq+0x1c6>
 800ac02:	7b7b      	ldrb	r3, [r7, #13]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d11c      	bne.n	800ac42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ac08:	7b7a      	ldrb	r2, [r7, #13]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ac10:	7b7a      	ldrb	r2, [r7, #13]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32ae      	adds	r2, #174	; 0xae
 800ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d010      	beq.n	800ac42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac20:	7b7a      	ldrb	r2, [r7, #13]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	32ae      	adds	r2, #174	; 0xae
 800ac26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	4798      	blx	r3
 800ac32:	4603      	mov	r3, r0
 800ac34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac36:	e004      	b.n	800ac42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fc2d 	bl	800b49a <USBD_CtlError>
              break;
 800ac40:	e000      	b.n	800ac44 <USBD_StdEPReq+0x1c8>
              break;
 800ac42:	bf00      	nop
          }
          break;
 800ac44:	e0ab      	b.n	800ad9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d002      	beq.n	800ac58 <USBD_StdEPReq+0x1dc>
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d032      	beq.n	800acbc <USBD_StdEPReq+0x240>
 800ac56:	e097      	b.n	800ad88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <USBD_StdEPReq+0x1f2>
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	2b80      	cmp	r3, #128	; 0x80
 800ac62:	d004      	beq.n	800ac6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fc17 	bl	800b49a <USBD_CtlError>
                break;
 800ac6c:	e091      	b.n	800ad92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da0b      	bge.n	800ac8e <USBD_StdEPReq+0x212>
 800ac76:	7bbb      	ldrb	r3, [r7, #14]
 800ac78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	3310      	adds	r3, #16
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	4413      	add	r3, r2
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	e00b      	b.n	800aca6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	4413      	add	r3, r2
 800aca4:	3304      	adds	r3, #4
 800aca6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2202      	movs	r2, #2
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fc61 	bl	800b57c <USBD_CtlSendData>
              break;
 800acba:	e06a      	b.n	800ad92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800acbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	da11      	bge.n	800ace8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	f003 020f 	and.w	r2, r3, #15
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	440b      	add	r3, r1
 800acd6:	3324      	adds	r3, #36	; 0x24
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d117      	bne.n	800ad0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fbda 	bl	800b49a <USBD_CtlError>
                  break;
 800ace6:	e054      	b.n	800ad92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	f003 020f 	and.w	r2, r3, #15
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d104      	bne.n	800ad0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fbc7 	bl	800b49a <USBD_CtlError>
                  break;
 800ad0c:	e041      	b.n	800ad92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	da0b      	bge.n	800ad2e <USBD_StdEPReq+0x2b2>
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	3310      	adds	r3, #16
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4413      	add	r3, r2
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	e00b      	b.n	800ad46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	4413      	add	r3, r2
 800ad44:	3304      	adds	r3, #4
 800ad46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <USBD_StdEPReq+0x2d8>
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b80      	cmp	r3, #128	; 0x80
 800ad52:	d103      	bne.n	800ad5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	e00e      	b.n	800ad7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f003 fed7 	bl	800eb14 <USBD_LL_IsStallEP>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	e002      	b.n	800ad7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fbfb 	bl	800b57c <USBD_CtlSendData>
              break;
 800ad86:	e004      	b.n	800ad92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fb85 	bl	800b49a <USBD_CtlError>
              break;
 800ad90:	bf00      	nop
          }
          break;
 800ad92:	e004      	b.n	800ad9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fb7f 	bl	800b49a <USBD_CtlError>
          break;
 800ad9c:	bf00      	nop
      }
      break;
 800ad9e:	e005      	b.n	800adac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fb79 	bl	800b49a <USBD_CtlError>
      break;
 800ada8:	e000      	b.n	800adac <USBD_StdEPReq+0x330>
      break;
 800adaa:	bf00      	nop
  }

  return ret;
 800adac:	7bfb      	ldrb	r3, [r7, #15]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	885b      	ldrh	r3, [r3, #2]
 800add2:	0a1b      	lsrs	r3, r3, #8
 800add4:	b29b      	uxth	r3, r3
 800add6:	3b01      	subs	r3, #1
 800add8:	2b0e      	cmp	r3, #14
 800adda:	f200 8152 	bhi.w	800b082 <USBD_GetDescriptor+0x2ca>
 800adde:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <USBD_GetDescriptor+0x2c>)
 800ade0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade4:	0800ae55 	.word	0x0800ae55
 800ade8:	0800ae6d 	.word	0x0800ae6d
 800adec:	0800aead 	.word	0x0800aead
 800adf0:	0800b083 	.word	0x0800b083
 800adf4:	0800b083 	.word	0x0800b083
 800adf8:	0800b023 	.word	0x0800b023
 800adfc:	0800b04f 	.word	0x0800b04f
 800ae00:	0800b083 	.word	0x0800b083
 800ae04:	0800b083 	.word	0x0800b083
 800ae08:	0800b083 	.word	0x0800b083
 800ae0c:	0800b083 	.word	0x0800b083
 800ae10:	0800b083 	.word	0x0800b083
 800ae14:	0800b083 	.word	0x0800b083
 800ae18:	0800b083 	.word	0x0800b083
 800ae1c:	0800ae21 	.word	0x0800ae21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	7c12      	ldrb	r2, [r2, #16]
 800ae38:	f107 0108 	add.w	r1, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae42:	e126      	b.n	800b092 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fb27 	bl	800b49a <USBD_CtlError>
        err++;
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	72fb      	strb	r3, [r7, #11]
      break;
 800ae52:	e11e      	b.n	800b092 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
      break;
 800ae6a:	e112      	b.n	800b092 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	7c1b      	ldrb	r3, [r3, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10d      	bne.n	800ae90 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7c:	f107 0208 	add.w	r2, r7, #8
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3
 800ae84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae8e:	e100      	b.n	800b092 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae98:	f107 0208 	add.w	r2, r7, #8
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	4798      	blx	r3
 800aea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3301      	adds	r3, #1
 800aea6:	2202      	movs	r2, #2
 800aea8:	701a      	strb	r2, [r3, #0]
      break;
 800aeaa:	e0f2      	b.n	800b092 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	885b      	ldrh	r3, [r3, #2]
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b05      	cmp	r3, #5
 800aeb4:	f200 80ac 	bhi.w	800b010 <USBD_GetDescriptor+0x258>
 800aeb8:	a201      	add	r2, pc, #4	; (adr r2, 800aec0 <USBD_GetDescriptor+0x108>)
 800aeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebe:	bf00      	nop
 800aec0:	0800aed9 	.word	0x0800aed9
 800aec4:	0800af0d 	.word	0x0800af0d
 800aec8:	0800af41 	.word	0x0800af41
 800aecc:	0800af75 	.word	0x0800af75
 800aed0:	0800afa9 	.word	0x0800afa9
 800aed4:	0800afdd 	.word	0x0800afdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	7c12      	ldrb	r2, [r2, #16]
 800aef0:	f107 0108 	add.w	r1, r7, #8
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
 800aef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aefa:	e091      	b.n	800b020 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 facb 	bl	800b49a <USBD_CtlError>
            err++;
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	3301      	adds	r3, #1
 800af08:	72fb      	strb	r3, [r7, #11]
          break;
 800af0a:	e089      	b.n	800b020 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00b      	beq.n	800af30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	7c12      	ldrb	r2, [r2, #16]
 800af24:	f107 0108 	add.w	r1, r7, #8
 800af28:	4610      	mov	r0, r2
 800af2a:	4798      	blx	r3
 800af2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af2e:	e077      	b.n	800b020 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fab1 	bl	800b49a <USBD_CtlError>
            err++;
 800af38:	7afb      	ldrb	r3, [r7, #11]
 800af3a:	3301      	adds	r3, #1
 800af3c:	72fb      	strb	r3, [r7, #11]
          break;
 800af3e:	e06f      	b.n	800b020 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	7c12      	ldrb	r2, [r2, #16]
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af62:	e05d      	b.n	800b020 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fa97 	bl	800b49a <USBD_CtlError>
            err++;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	3301      	adds	r3, #1
 800af70:	72fb      	strb	r3, [r7, #11]
          break;
 800af72:	e055      	b.n	800b020 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af96:	e043      	b.n	800b020 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa7d 	bl	800b49a <USBD_CtlError>
            err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
          break;
 800afa6:	e03b      	b.n	800b020 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00b      	beq.n	800afcc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7c12      	ldrb	r2, [r2, #16]
 800afc0:	f107 0108 	add.w	r1, r7, #8
 800afc4:	4610      	mov	r0, r2
 800afc6:	4798      	blx	r3
 800afc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afca:	e029      	b.n	800b020 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa63 	bl	800b49a <USBD_CtlError>
            err++;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	3301      	adds	r3, #1
 800afd8:	72fb      	strb	r3, [r7, #11]
          break;
 800afda:	e021      	b.n	800b020 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	7c12      	ldrb	r2, [r2, #16]
 800aff4:	f107 0108 	add.w	r1, r7, #8
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
 800affc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affe:	e00f      	b.n	800b020 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa49 	bl	800b49a <USBD_CtlError>
            err++;
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	3301      	adds	r3, #1
 800b00c:	72fb      	strb	r3, [r7, #11]
          break;
 800b00e:	e007      	b.n	800b020 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fa41 	bl	800b49a <USBD_CtlError>
          err++;
 800b018:	7afb      	ldrb	r3, [r7, #11]
 800b01a:	3301      	adds	r3, #1
 800b01c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b01e:	bf00      	nop
      }
      break;
 800b020:	e037      	b.n	800b092 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7c1b      	ldrb	r3, [r3, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b032:	f107 0208 	add.w	r2, r7, #8
 800b036:	4610      	mov	r0, r2
 800b038:	4798      	blx	r3
 800b03a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b03c:	e029      	b.n	800b092 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fa2a 	bl	800b49a <USBD_CtlError>
        err++;
 800b046:	7afb      	ldrb	r3, [r7, #11]
 800b048:	3301      	adds	r3, #1
 800b04a:	72fb      	strb	r3, [r7, #11]
      break;
 800b04c:	e021      	b.n	800b092 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	7c1b      	ldrb	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10d      	bne.n	800b072 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05e:	f107 0208 	add.w	r2, r7, #8
 800b062:	4610      	mov	r0, r2
 800b064:	4798      	blx	r3
 800b066:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3301      	adds	r3, #1
 800b06c:	2207      	movs	r2, #7
 800b06e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b070:	e00f      	b.n	800b092 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fa10 	bl	800b49a <USBD_CtlError>
        err++;
 800b07a:	7afb      	ldrb	r3, [r7, #11]
 800b07c:	3301      	adds	r3, #1
 800b07e:	72fb      	strb	r3, [r7, #11]
      break;
 800b080:	e007      	b.n	800b092 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fa08 	bl	800b49a <USBD_CtlError>
      err++;
 800b08a:	7afb      	ldrb	r3, [r7, #11]
 800b08c:	3301      	adds	r3, #1
 800b08e:	72fb      	strb	r3, [r7, #11]
      break;
 800b090:	bf00      	nop
  }

  if (err != 0U)
 800b092:	7afb      	ldrb	r3, [r7, #11]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d11e      	bne.n	800b0d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	88db      	ldrh	r3, [r3, #6]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d016      	beq.n	800b0ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b0a0:	893b      	ldrh	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00e      	beq.n	800b0c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	88da      	ldrh	r2, [r3, #6]
 800b0aa:	893b      	ldrh	r3, [r7, #8]
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	bf28      	it	cs
 800b0b0:	4613      	movcs	r3, r2
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0b6:	893b      	ldrh	r3, [r7, #8]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68f9      	ldr	r1, [r7, #12]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fa5d 	bl	800b57c <USBD_CtlSendData>
 800b0c2:	e009      	b.n	800b0d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f9e7 	bl	800b49a <USBD_CtlError>
 800b0cc:	e004      	b.n	800b0d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 faae 	bl	800b630 <USBD_CtlSendStatus>
 800b0d4:	e000      	b.n	800b0d8 <USBD_GetDescriptor+0x320>
    return;
 800b0d6:	bf00      	nop
  }
}
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop

0800b0e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	889b      	ldrh	r3, [r3, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d131      	bne.n	800b156 <USBD_SetAddress+0x76>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	88db      	ldrh	r3, [r3, #6]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d12d      	bne.n	800b156 <USBD_SetAddress+0x76>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	885b      	ldrh	r3, [r3, #2]
 800b0fe:	2b7f      	cmp	r3, #127	; 0x7f
 800b100:	d829      	bhi.n	800b156 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	885b      	ldrh	r3, [r3, #2]
 800b106:	b2db      	uxtb	r3, r3
 800b108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b10c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b03      	cmp	r3, #3
 800b118:	d104      	bne.n	800b124 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f9bc 	bl	800b49a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b122:	e01d      	b.n	800b160 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	7bfa      	ldrb	r2, [r7, #15]
 800b128:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f003 fd1b 	bl	800eb6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fa7a 	bl	800b630 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d004      	beq.n	800b14c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2202      	movs	r2, #2
 800b146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b14a:	e009      	b.n	800b160 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b154:	e004      	b.n	800b160 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f99e 	bl	800b49a <USBD_CtlError>
  }
}
 800b15e:	bf00      	nop
 800b160:	bf00      	nop
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	885b      	ldrh	r3, [r3, #2]
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	4b4e      	ldr	r3, [pc, #312]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b17e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b180:	4b4d      	ldr	r3, [pc, #308]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d905      	bls.n	800b194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f985 	bl	800b49a <USBD_CtlError>
    return USBD_FAIL;
 800b190:	2303      	movs	r3, #3
 800b192:	e08c      	b.n	800b2ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d002      	beq.n	800b1a6 <USBD_SetConfig+0x3e>
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d029      	beq.n	800b1f8 <USBD_SetConfig+0x90>
 800b1a4:	e075      	b.n	800b292 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b1a6:	4b44      	ldr	r3, [pc, #272]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d020      	beq.n	800b1f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b1ae:	4b42      	ldr	r3, [pc, #264]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1b8:	4b3f      	ldr	r3, [pc, #252]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7fe ffbd 	bl	800a13e <USBD_SetClassConfig>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d008      	beq.n	800b1e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f962 	bl	800b49a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2202      	movs	r2, #2
 800b1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1de:	e065      	b.n	800b2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fa25 	bl	800b630 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2203      	movs	r2, #3
 800b1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1ee:	e05d      	b.n	800b2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fa1d 	bl	800b630 <USBD_CtlSendStatus>
      break;
 800b1f6:	e059      	b.n	800b2ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1f8:	4b2f      	ldr	r3, [pc, #188]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d112      	bne.n	800b226 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2202      	movs	r2, #2
 800b204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b208:	4b2b      	ldr	r3, [pc, #172]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b212:	4b29      	ldr	r3, [pc, #164]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7fe ffac 	bl	800a176 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fa06 	bl	800b630 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b224:	e042      	b.n	800b2ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b226:	4b24      	ldr	r3, [pc, #144]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	429a      	cmp	r2, r3
 800b232:	d02a      	beq.n	800b28a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7fe ff9a 	bl	800a176 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b242:	4b1d      	ldr	r3, [pc, #116]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b24c:	4b1a      	ldr	r3, [pc, #104]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7fe ff73 	bl	800a13e <USBD_SetClassConfig>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00f      	beq.n	800b282 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f918 	bl	800b49a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7fe ff7f 	bl	800a176 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b280:	e014      	b.n	800b2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f9d4 	bl	800b630 <USBD_CtlSendStatus>
      break;
 800b288:	e010      	b.n	800b2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f9d0 	bl	800b630 <USBD_CtlSendStatus>
      break;
 800b290:	e00c      	b.n	800b2ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f900 	bl	800b49a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b29a:	4b07      	ldr	r3, [pc, #28]	; (800b2b8 <USBD_SetConfig+0x150>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7fe ff68 	bl	800a176 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2aa:	bf00      	nop
  }

  return ret;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20009028 	.word	0x20009028

0800b2bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	88db      	ldrh	r3, [r3, #6]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d004      	beq.n	800b2d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f8e2 	bl	800b49a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2d6:	e023      	b.n	800b320 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	dc02      	bgt.n	800b2ea <USBD_GetConfig+0x2e>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	dc03      	bgt.n	800b2f0 <USBD_GetConfig+0x34>
 800b2e8:	e015      	b.n	800b316 <USBD_GetConfig+0x5a>
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d00b      	beq.n	800b306 <USBD_GetConfig+0x4a>
 800b2ee:	e012      	b.n	800b316 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f93c 	bl	800b57c <USBD_CtlSendData>
        break;
 800b304:	e00c      	b.n	800b320 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3304      	adds	r3, #4
 800b30a:	2201      	movs	r2, #1
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f934 	bl	800b57c <USBD_CtlSendData>
        break;
 800b314:	e004      	b.n	800b320 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f8be 	bl	800b49a <USBD_CtlError>
        break;
 800b31e:	bf00      	nop
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d81e      	bhi.n	800b37e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	88db      	ldrh	r3, [r3, #6]
 800b344:	2b02      	cmp	r3, #2
 800b346:	d004      	beq.n	800b352 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f8a5 	bl	800b49a <USBD_CtlError>
        break;
 800b350:	e01a      	b.n	800b388 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d005      	beq.n	800b36e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	f043 0202 	orr.w	r2, r3, #2
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	330c      	adds	r3, #12
 800b372:	2202      	movs	r2, #2
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f900 	bl	800b57c <USBD_CtlSendData>
      break;
 800b37c:	e004      	b.n	800b388 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f88a 	bl	800b49a <USBD_CtlError>
      break;
 800b386:	bf00      	nop
  }
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d107      	bne.n	800b3b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f940 	bl	800b630 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b3b0:	e013      	b.n	800b3da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	885b      	ldrh	r3, [r3, #2]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d10b      	bne.n	800b3d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	889b      	ldrh	r3, [r3, #4]
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f930 	bl	800b630 <USBD_CtlSendStatus>
}
 800b3d0:	e003      	b.n	800b3da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f860 	bl	800b49a <USBD_CtlError>
}
 800b3da:	bf00      	nop
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d80b      	bhi.n	800b412 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	885b      	ldrh	r3, [r3, #2]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d10c      	bne.n	800b41c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f910 	bl	800b630 <USBD_CtlSendStatus>
      }
      break;
 800b410:	e004      	b.n	800b41c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f840 	bl	800b49a <USBD_CtlError>
      break;
 800b41a:	e000      	b.n	800b41e <USBD_ClrFeature+0x3c>
      break;
 800b41c:	bf00      	nop
  }
}
 800b41e:	bf00      	nop
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	781a      	ldrb	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3301      	adds	r3, #1
 800b440:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff fa17 	bl	800a884 <SWAPBYTE>
 800b456:	4603      	mov	r3, r0
 800b458:	461a      	mov	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3301      	adds	r3, #1
 800b468:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7ff fa0a 	bl	800a884 <SWAPBYTE>
 800b470:	4603      	mov	r3, r0
 800b472:	461a      	mov	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3301      	adds	r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3301      	adds	r3, #1
 800b482:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7ff f9fd 	bl	800a884 <SWAPBYTE>
 800b48a:	4603      	mov	r3, r0
 800b48c:	461a      	mov	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	80da      	strh	r2, [r3, #6]
}
 800b492:	bf00      	nop
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4a4:	2180      	movs	r1, #128	; 0x80
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f003 faf6 	bl	800ea98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f003 faf2 	bl	800ea98 <USBD_LL_StallEP>
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d036      	beq.n	800b540 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4d6:	6938      	ldr	r0, [r7, #16]
 800b4d8:	f000 f836 	bl	800b548 <USBD_GetLen>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	3301      	adds	r3, #1
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	7812      	ldrb	r2, [r2, #0]
 800b4f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	4413      	add	r3, r2
 800b502:	2203      	movs	r2, #3
 800b504:	701a      	strb	r2, [r3, #0]
  idx++;
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	3301      	adds	r3, #1
 800b50a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b50c:	e013      	b.n	800b536 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	4413      	add	r3, r2
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	7812      	ldrb	r2, [r2, #0]
 800b518:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	3301      	adds	r3, #1
 800b51e:	613b      	str	r3, [r7, #16]
    idx++;
 800b520:	7dfb      	ldrb	r3, [r7, #23]
 800b522:	3301      	adds	r3, #1
 800b524:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	4413      	add	r3, r2
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	3301      	adds	r3, #1
 800b534:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1e7      	bne.n	800b50e <USBD_GetString+0x52>
 800b53e:	e000      	b.n	800b542 <USBD_GetString+0x86>
    return;
 800b540:	bf00      	nop
  }
}
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b558:	e005      	b.n	800b566 <USBD_GetLen+0x1e>
  {
    len++;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	3301      	adds	r3, #1
 800b55e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	3301      	adds	r3, #1
 800b564:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1f5      	bne.n	800b55a <USBD_GetLen+0x12>
  }

  return len;
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f003 fb01 	bl	800ebaa <USBD_LL_Transmit>

  return USBD_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	60f8      	str	r0, [r7, #12]
 800b5ba:	60b9      	str	r1, [r7, #8]
 800b5bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f003 faf0 	bl	800ebaa <USBD_LL_Transmit>

  return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2203      	movs	r2, #3
 800b5e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f003 faf4 	bl	800ebec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	2100      	movs	r1, #0
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f003 fae3 	bl	800ebec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2204      	movs	r2, #4
 800b63c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b640:	2300      	movs	r3, #0
 800b642:	2200      	movs	r2, #0
 800b644:	2100      	movs	r1, #0
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f003 faaf 	bl	800ebaa <USBD_LL_Transmit>

  return USBD_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2205      	movs	r2, #5
 800b662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b666:	2300      	movs	r3, #0
 800b668:	2200      	movs	r2, #0
 800b66a:	2100      	movs	r1, #0
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f003 fabd 	bl	800ebec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <__NVIC_SetPriority>:
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	6039      	str	r1, [r7, #0]
 800b686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	db0a      	blt.n	800b6a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	b2da      	uxtb	r2, r3
 800b694:	490c      	ldr	r1, [pc, #48]	; (800b6c8 <__NVIC_SetPriority+0x4c>)
 800b696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b69a:	0112      	lsls	r2, r2, #4
 800b69c:	b2d2      	uxtb	r2, r2
 800b69e:	440b      	add	r3, r1
 800b6a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b6a4:	e00a      	b.n	800b6bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	4908      	ldr	r1, [pc, #32]	; (800b6cc <__NVIC_SetPriority+0x50>)
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	f003 030f 	and.w	r3, r3, #15
 800b6b2:	3b04      	subs	r3, #4
 800b6b4:	0112      	lsls	r2, r2, #4
 800b6b6:	b2d2      	uxtb	r2, r2
 800b6b8:	440b      	add	r3, r1
 800b6ba:	761a      	strb	r2, [r3, #24]
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	e000e100 	.word	0xe000e100
 800b6cc:	e000ed00 	.word	0xe000ed00

0800b6d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	f06f 0004 	mvn.w	r0, #4
 800b6da:	f7ff ffcf 	bl	800b67c <__NVIC_SetPriority>
#endif
}
 800b6de:	bf00      	nop
 800b6e0:	bd80      	pop	{r7, pc}
	...

0800b6e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ea:	f3ef 8305 	mrs	r3, IPSR
 800b6ee:	603b      	str	r3, [r7, #0]
  return(result);
 800b6f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b6f6:	f06f 0305 	mvn.w	r3, #5
 800b6fa:	607b      	str	r3, [r7, #4]
 800b6fc:	e00c      	b.n	800b718 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b6fe:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <osKernelInitialize+0x44>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b706:	4b08      	ldr	r3, [pc, #32]	; (800b728 <osKernelInitialize+0x44>)
 800b708:	2201      	movs	r2, #1
 800b70a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	607b      	str	r3, [r7, #4]
 800b710:	e002      	b.n	800b718 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b712:	f04f 33ff 	mov.w	r3, #4294967295
 800b716:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b718:	687b      	ldr	r3, [r7, #4]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	2000902c 	.word	0x2000902c

0800b72c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b732:	f3ef 8305 	mrs	r3, IPSR
 800b736:	603b      	str	r3, [r7, #0]
  return(result);
 800b738:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b73e:	f06f 0305 	mvn.w	r3, #5
 800b742:	607b      	str	r3, [r7, #4]
 800b744:	e010      	b.n	800b768 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b746:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <osKernelStart+0x48>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d109      	bne.n	800b762 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b74e:	f7ff ffbf 	bl	800b6d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b752:	4b08      	ldr	r3, [pc, #32]	; (800b774 <osKernelStart+0x48>)
 800b754:	2202      	movs	r2, #2
 800b756:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b758:	f001 f87c 	bl	800c854 <vTaskStartScheduler>
      stat = osOK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	607b      	str	r3, [r7, #4]
 800b760:	e002      	b.n	800b768 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b762:	f04f 33ff 	mov.w	r3, #4294967295
 800b766:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b768:	687b      	ldr	r3, [r7, #4]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	2000902c 	.word	0x2000902c

0800b778 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08e      	sub	sp, #56	; 0x38
 800b77c:	af04      	add	r7, sp, #16
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b784:	2300      	movs	r3, #0
 800b786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b788:	f3ef 8305 	mrs	r3, IPSR
 800b78c:	617b      	str	r3, [r7, #20]
  return(result);
 800b78e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b790:	2b00      	cmp	r3, #0
 800b792:	d17e      	bne.n	800b892 <osThreadNew+0x11a>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d07b      	beq.n	800b892 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b79a:	2380      	movs	r3, #128	; 0x80
 800b79c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b79e:	2318      	movs	r3, #24
 800b7a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d045      	beq.n	800b83e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <osThreadNew+0x48>
        name = attr->name;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d008      	beq.n	800b7e6 <osThreadNew+0x6e>
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	2b38      	cmp	r3, #56	; 0x38
 800b7d8:	d805      	bhi.n	800b7e6 <osThreadNew+0x6e>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <osThreadNew+0x72>
        return (NULL);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	e054      	b.n	800b894 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d003      	beq.n	800b7fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	089b      	lsrs	r3, r3, #2
 800b7f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00e      	beq.n	800b820 <osThreadNew+0xa8>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	2bbb      	cmp	r3, #187	; 0xbb
 800b808:	d90a      	bls.n	800b820 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d006      	beq.n	800b820 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <osThreadNew+0xa8>
        mem = 1;
 800b81a:	2301      	movs	r3, #1
 800b81c:	61bb      	str	r3, [r7, #24]
 800b81e:	e010      	b.n	800b842 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10c      	bne.n	800b842 <osThreadNew+0xca>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d108      	bne.n	800b842 <osThreadNew+0xca>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d104      	bne.n	800b842 <osThreadNew+0xca>
          mem = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	61bb      	str	r3, [r7, #24]
 800b83c:	e001      	b.n	800b842 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d110      	bne.n	800b86a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b850:	9202      	str	r2, [sp, #8]
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	6a3a      	ldr	r2, [r7, #32]
 800b85c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 fe0c 	bl	800c47c <xTaskCreateStatic>
 800b864:	4603      	mov	r3, r0
 800b866:	613b      	str	r3, [r7, #16]
 800b868:	e013      	b.n	800b892 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d110      	bne.n	800b892 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	b29a      	uxth	r2, r3
 800b874:	f107 0310 	add.w	r3, r7, #16
 800b878:	9301      	str	r3, [sp, #4]
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f000 fe57 	bl	800c536 <xTaskCreate>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d001      	beq.n	800b892 <osThreadNew+0x11a>
            hTask = NULL;
 800b88e:	2300      	movs	r3, #0
 800b890:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b892:	693b      	ldr	r3, [r7, #16]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3728      	adds	r7, #40	; 0x28
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a4:	f3ef 8305 	mrs	r3, IPSR
 800b8a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d003      	beq.n	800b8b8 <osDelay+0x1c>
    stat = osErrorISR;
 800b8b0:	f06f 0305 	mvn.w	r3, #5
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	e007      	b.n	800b8c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d002      	beq.n	800b8c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 ff92 	bl	800c7ec <vTaskDelay>
    }
  }

  return (stat);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4a07      	ldr	r2, [pc, #28]	; (800b900 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	4a06      	ldr	r2, [pc, #24]	; (800b904 <vApplicationGetIdleTaskMemory+0x30>)
 800b8ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2280      	movs	r2, #128	; 0x80
 800b8f0:	601a      	str	r2, [r3, #0]
}
 800b8f2:	bf00      	nop
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20009030 	.word	0x20009030
 800b904:	200090ec 	.word	0x200090ec

0800b908 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	4a07      	ldr	r2, [pc, #28]	; (800b934 <vApplicationGetTimerTaskMemory+0x2c>)
 800b918:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	4a06      	ldr	r2, [pc, #24]	; (800b938 <vApplicationGetTimerTaskMemory+0x30>)
 800b91e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b926:	601a      	str	r2, [r3, #0]
}
 800b928:	bf00      	nop
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	200092ec 	.word	0x200092ec
 800b938:	200093a8 	.word	0x200093a8

0800b93c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f103 0208 	add.w	r2, r3, #8
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f04f 32ff 	mov.w	r2, #4294967295
 800b954:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f103 0208 	add.w	r2, r3, #8
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f103 0208 	add.w	r2, r3, #8
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b996:	b480      	push	{r7}
 800b998:	b085      	sub	sp, #20
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	689a      	ldr	r2, [r3, #8]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	601a      	str	r2, [r3, #0]
}
 800b9d2:	bf00      	nop
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b085      	sub	sp, #20
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f4:	d103      	bne.n	800b9fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	e00c      	b.n	800ba18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3308      	adds	r3, #8
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	e002      	b.n	800ba0c <vListInsert+0x2e>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d2f6      	bcs.n	800ba06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	1c5a      	adds	r2, r3, #1
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	601a      	str	r2, [r3, #0]
}
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6892      	ldr	r2, [r2, #8]
 800ba66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	6852      	ldr	r2, [r2, #4]
 800ba70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d103      	bne.n	800ba84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	1e5a      	subs	r2, r3, #1
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bace:	f002 f879 	bl	800dbc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bade:	fb01 f303 	mul.w	r3, r1, r3
 800bae2:	441a      	add	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafe:	3b01      	subs	r3, #1
 800bb00:	68f9      	ldr	r1, [r7, #12]
 800bb02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb04:	fb01 f303 	mul.w	r3, r1, r3
 800bb08:	441a      	add	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	22ff      	movs	r2, #255	; 0xff
 800bb12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	22ff      	movs	r2, #255	; 0xff
 800bb1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d114      	bne.n	800bb4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01a      	beq.n	800bb62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3310      	adds	r3, #16
 800bb30:	4618      	mov	r0, r3
 800bb32:	f001 f929 	bl	800cd88 <xTaskRemoveFromEventList>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d012      	beq.n	800bb62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb3c:	4b0c      	ldr	r3, [pc, #48]	; (800bb70 <xQueueGenericReset+0xcc>)
 800bb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	e009      	b.n	800bb62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3310      	adds	r3, #16
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7ff fef2 	bl	800b93c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3324      	adds	r3, #36	; 0x24
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff feed 	bl	800b93c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb62:	f002 f85f 	bl	800dc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb66:	2301      	movs	r3, #1
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	e000ed04 	.word	0xe000ed04

0800bb74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08e      	sub	sp, #56	; 0x38
 800bb78:	af02      	add	r7, sp, #8
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10a      	bne.n	800bb9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <xQueueGenericCreateStatic+0x52>
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <xQueueGenericCreateStatic+0x56>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e000      	b.n	800bbcc <xQueueGenericCreateStatic+0x58>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	623b      	str	r3, [r7, #32]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <xQueueGenericCreateStatic+0x7e>
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d101      	bne.n	800bbf6 <xQueueGenericCreateStatic+0x82>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e000      	b.n	800bbf8 <xQueueGenericCreateStatic+0x84>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	61fb      	str	r3, [r7, #28]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc12:	2350      	movs	r3, #80	; 0x50
 800bc14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b50      	cmp	r3, #80	; 0x50
 800bc1a:	d00a      	beq.n	800bc32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	61bb      	str	r3, [r7, #24]
}
 800bc2e:	bf00      	nop
 800bc30:	e7fe      	b.n	800bc30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00d      	beq.n	800bc5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 f805 	bl	800bc64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3730      	adds	r7, #48	; 0x30
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d103      	bne.n	800bc80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	69ba      	ldr	r2, [r7, #24]
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	e002      	b.n	800bc86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc92:	2101      	movs	r1, #1
 800bc94:	69b8      	ldr	r0, [r7, #24]
 800bc96:	f7ff ff05 	bl	800baa4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	78fa      	ldrb	r2, [r7, #3]
 800bc9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bca2:	bf00      	nop
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	; 0x38
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <xQueueGenericSend+0x32>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d103      	bne.n	800bcec <xQueueGenericSend+0x40>
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <xQueueGenericSend+0x44>
 800bcec:	2301      	movs	r3, #1
 800bcee:	e000      	b.n	800bcf2 <xQueueGenericSend+0x46>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10a      	bne.n	800bd0c <xQueueGenericSend+0x60>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd08:	bf00      	nop
 800bd0a:	e7fe      	b.n	800bd0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d103      	bne.n	800bd1a <xQueueGenericSend+0x6e>
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d101      	bne.n	800bd1e <xQueueGenericSend+0x72>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e000      	b.n	800bd20 <xQueueGenericSend+0x74>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <xQueueGenericSend+0x8e>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	623b      	str	r3, [r7, #32]
}
 800bd36:	bf00      	nop
 800bd38:	e7fe      	b.n	800bd38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd3a:	f001 f9e7 	bl	800d10c <xTaskGetSchedulerState>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d102      	bne.n	800bd4a <xQueueGenericSend+0x9e>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <xQueueGenericSend+0xa2>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e000      	b.n	800bd50 <xQueueGenericSend+0xa4>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <xQueueGenericSend+0xbe>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	61fb      	str	r3, [r7, #28]
}
 800bd66:	bf00      	nop
 800bd68:	e7fe      	b.n	800bd68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd6a:	f001 ff2b 	bl	800dbc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d302      	bcc.n	800bd80 <xQueueGenericSend+0xd4>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d129      	bne.n	800bdd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd86:	f000 fa0b 	bl	800c1a0 <prvCopyDataToQueue>
 800bd8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d010      	beq.n	800bdb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	3324      	adds	r3, #36	; 0x24
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fff5 	bl	800cd88 <xTaskRemoveFromEventList>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d013      	beq.n	800bdcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bda4:	4b3f      	ldr	r3, [pc, #252]	; (800bea4 <xQueueGenericSend+0x1f8>)
 800bda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	e00a      	b.n	800bdcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d007      	beq.n	800bdcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bdbc:	4b39      	ldr	r3, [pc, #228]	; (800bea4 <xQueueGenericSend+0x1f8>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdcc:	f001 ff2a 	bl	800dc24 <vPortExitCritical>
				return pdPASS;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e063      	b.n	800be9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d103      	bne.n	800bde2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdda:	f001 ff23 	bl	800dc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	e05c      	b.n	800be9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d106      	bne.n	800bdf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bde8:	f107 0314 	add.w	r3, r7, #20
 800bdec:	4618      	mov	r0, r3
 800bdee:	f001 f82f 	bl	800ce50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdf6:	f001 ff15 	bl	800dc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdfa:	f000 fd9b 	bl	800c934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdfe:	f001 fee1 	bl	800dbc4 <vPortEnterCritical>
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d103      	bne.n	800be18 <xQueueGenericSend+0x16c>
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be1e:	b25b      	sxtb	r3, r3
 800be20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be24:	d103      	bne.n	800be2e <xQueueGenericSend+0x182>
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be2e:	f001 fef9 	bl	800dc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be32:	1d3a      	adds	r2, r7, #4
 800be34:	f107 0314 	add.w	r3, r7, #20
 800be38:	4611      	mov	r1, r2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 f81e 	bl	800ce7c <xTaskCheckForTimeOut>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d124      	bne.n	800be90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be48:	f000 faa2 	bl	800c390 <prvIsQueueFull>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d018      	beq.n	800be84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	3310      	adds	r3, #16
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	4611      	mov	r1, r2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 ff44 	bl	800cce8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be62:	f000 fa2d 	bl	800c2c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be66:	f000 fd73 	bl	800c950 <xTaskResumeAll>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f47f af7c 	bne.w	800bd6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be72:	4b0c      	ldr	r3, [pc, #48]	; (800bea4 <xQueueGenericSend+0x1f8>)
 800be74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	e772      	b.n	800bd6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be86:	f000 fa1b 	bl	800c2c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be8a:	f000 fd61 	bl	800c950 <xTaskResumeAll>
 800be8e:	e76c      	b.n	800bd6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be92:	f000 fa15 	bl	800c2c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be96:	f000 fd5b 	bl	800c950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3738      	adds	r7, #56	; 0x38
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b090      	sub	sp, #64	; 0x40
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <xQueueGenericSendFromISR+0x3c>
 800bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <xQueueGenericSendFromISR+0x40>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <xQueueGenericSendFromISR+0x42>
 800bee8:	2300      	movs	r3, #0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10a      	bne.n	800bf04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d103      	bne.n	800bf12 <xQueueGenericSendFromISR+0x6a>
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d101      	bne.n	800bf16 <xQueueGenericSendFromISR+0x6e>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e000      	b.n	800bf18 <xQueueGenericSendFromISR+0x70>
 800bf16:	2300      	movs	r3, #0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10a      	bne.n	800bf32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	623b      	str	r3, [r7, #32]
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf32:	f001 ff29 	bl	800dd88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf36:	f3ef 8211 	mrs	r2, BASEPRI
 800bf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3e:	f383 8811 	msr	BASEPRI, r3
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	61fa      	str	r2, [r7, #28]
 800bf4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d302      	bcc.n	800bf64 <xQueueGenericSendFromISR+0xbc>
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d12f      	bne.n	800bfc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	68b9      	ldr	r1, [r7, #8]
 800bf78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf7a:	f000 f911 	bl	800c1a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf86:	d112      	bne.n	800bfae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d016      	beq.n	800bfbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	3324      	adds	r3, #36	; 0x24
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 fef7 	bl	800cd88 <xTaskRemoveFromEventList>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00e      	beq.n	800bfbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00b      	beq.n	800bfbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	601a      	str	r2, [r3, #0]
 800bfac:	e007      	b.n	800bfbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	b25a      	sxtb	r2, r3
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bfc2:	e001      	b.n	800bfc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bfd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3740      	adds	r7, #64	; 0x40
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08c      	sub	sp, #48	; 0x30
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfec:	2300      	movs	r3, #0
 800bfee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10a      	bne.n	800c010 <xQueueReceive+0x30>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	623b      	str	r3, [r7, #32]
}
 800c00c:	bf00      	nop
 800c00e:	e7fe      	b.n	800c00e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d103      	bne.n	800c01e <xQueueReceive+0x3e>
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <xQueueReceive+0x42>
 800c01e:	2301      	movs	r3, #1
 800c020:	e000      	b.n	800c024 <xQueueReceive+0x44>
 800c022:	2300      	movs	r3, #0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10a      	bne.n	800c03e <xQueueReceive+0x5e>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	61fb      	str	r3, [r7, #28]
}
 800c03a:	bf00      	nop
 800c03c:	e7fe      	b.n	800c03c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c03e:	f001 f865 	bl	800d10c <xTaskGetSchedulerState>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <xQueueReceive+0x6e>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <xQueueReceive+0x72>
 800c04e:	2301      	movs	r3, #1
 800c050:	e000      	b.n	800c054 <xQueueReceive+0x74>
 800c052:	2300      	movs	r3, #0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <xQueueReceive+0x8e>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	61bb      	str	r3, [r7, #24]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c06e:	f001 fda9 	bl	800dbc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c076:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d01f      	beq.n	800c0be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c082:	f000 f8f7 	bl	800c274 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c088:	1e5a      	subs	r2, r3, #1
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00f      	beq.n	800c0b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	3310      	adds	r3, #16
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 fe74 	bl	800cd88 <xTaskRemoveFromEventList>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d007      	beq.n	800c0b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0a6:	4b3d      	ldr	r3, [pc, #244]	; (800c19c <xQueueReceive+0x1bc>)
 800c0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ac:	601a      	str	r2, [r3, #0]
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c0b6:	f001 fdb5 	bl	800dc24 <vPortExitCritical>
				return pdPASS;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e069      	b.n	800c192 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d103      	bne.n	800c0cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0c4:	f001 fdae 	bl	800dc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e062      	b.n	800c192 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0d2:	f107 0310 	add.w	r3, r7, #16
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 feba 	bl	800ce50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0e0:	f001 fda0 	bl	800dc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0e4:	f000 fc26 	bl	800c934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0e8:	f001 fd6c 	bl	800dbc4 <vPortEnterCritical>
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0f2:	b25b      	sxtb	r3, r3
 800c0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f8:	d103      	bne.n	800c102 <xQueueReceive+0x122>
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c108:	b25b      	sxtb	r3, r3
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d103      	bne.n	800c118 <xQueueReceive+0x138>
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c118:	f001 fd84 	bl	800dc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c11c:	1d3a      	adds	r2, r7, #4
 800c11e:	f107 0310 	add.w	r3, r7, #16
 800c122:	4611      	mov	r1, r2
 800c124:	4618      	mov	r0, r3
 800c126:	f000 fea9 	bl	800ce7c <xTaskCheckForTimeOut>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d123      	bne.n	800c178 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c132:	f000 f917 	bl	800c364 <prvIsQueueEmpty>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d017      	beq.n	800c16c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	3324      	adds	r3, #36	; 0x24
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f000 fdcf 	bl	800cce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c14c:	f000 f8b8 	bl	800c2c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c150:	f000 fbfe 	bl	800c950 <xTaskResumeAll>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d189      	bne.n	800c06e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c15a:	4b10      	ldr	r3, [pc, #64]	; (800c19c <xQueueReceive+0x1bc>)
 800c15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	e780      	b.n	800c06e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c16e:	f000 f8a7 	bl	800c2c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c172:	f000 fbed 	bl	800c950 <xTaskResumeAll>
 800c176:	e77a      	b.n	800c06e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c17a:	f000 f8a1 	bl	800c2c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c17e:	f000 fbe7 	bl	800c950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c184:	f000 f8ee 	bl	800c364 <prvIsQueueEmpty>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f43f af6f 	beq.w	800c06e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c192:	4618      	mov	r0, r3
 800c194:	3730      	adds	r7, #48	; 0x30
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	e000ed04 	.word	0xe000ed04

0800c1a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10d      	bne.n	800c1da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d14d      	bne.n	800c262 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 ffbc 	bl	800d148 <xTaskPriorityDisinherit>
 800c1d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	609a      	str	r2, [r3, #8]
 800c1d8:	e043      	b.n	800c262 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d119      	bne.n	800c214 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6858      	ldr	r0, [r3, #4]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	68b9      	ldr	r1, [r7, #8]
 800c1ec:	f002 fee7 	bl	800efbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	685a      	ldr	r2, [r3, #4]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f8:	441a      	add	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	685a      	ldr	r2, [r3, #4]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	429a      	cmp	r2, r3
 800c208:	d32b      	bcc.n	800c262 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	605a      	str	r2, [r3, #4]
 800c212:	e026      	b.n	800c262 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	68d8      	ldr	r0, [r3, #12]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21c:	461a      	mov	r2, r3
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	f002 fecd 	bl	800efbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68da      	ldr	r2, [r3, #12]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22c:	425b      	negs	r3, r3
 800c22e:	441a      	add	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	68da      	ldr	r2, [r3, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d207      	bcs.n	800c250 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	689a      	ldr	r2, [r3, #8]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c248:	425b      	negs	r3, r3
 800c24a:	441a      	add	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b02      	cmp	r3, #2
 800c254:	d105      	bne.n	800c262 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	3b01      	subs	r3, #1
 800c260:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c26a:	697b      	ldr	r3, [r7, #20]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3718      	adds	r7, #24
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c282:	2b00      	cmp	r3, #0
 800c284:	d018      	beq.n	800c2b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68da      	ldr	r2, [r3, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	441a      	add	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d303      	bcc.n	800c2a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68d9      	ldr	r1, [r3, #12]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6838      	ldr	r0, [r7, #0]
 800c2b4:	f002 fe83 	bl	800efbe <memcpy>
	}
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2c8:	f001 fc7c 	bl	800dbc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2d4:	e011      	b.n	800c2fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d012      	beq.n	800c304 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	3324      	adds	r3, #36	; 0x24
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 fd50 	bl	800cd88 <xTaskRemoveFromEventList>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d001      	beq.n	800c2f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2ee:	f000 fe27 	bl	800cf40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dce9      	bgt.n	800c2d6 <prvUnlockQueue+0x16>
 800c302:	e000      	b.n	800c306 <prvUnlockQueue+0x46>
					break;
 800c304:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	22ff      	movs	r2, #255	; 0xff
 800c30a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c30e:	f001 fc89 	bl	800dc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c312:	f001 fc57 	bl	800dbc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c31c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c31e:	e011      	b.n	800c344 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	691b      	ldr	r3, [r3, #16]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d012      	beq.n	800c34e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	3310      	adds	r3, #16
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 fd2b 	bl	800cd88 <xTaskRemoveFromEventList>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c338:	f000 fe02 	bl	800cf40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	3b01      	subs	r3, #1
 800c340:	b2db      	uxtb	r3, r3
 800c342:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	dce9      	bgt.n	800c320 <prvUnlockQueue+0x60>
 800c34c:	e000      	b.n	800c350 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c34e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	22ff      	movs	r2, #255	; 0xff
 800c354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c358:	f001 fc64 	bl	800dc24 <vPortExitCritical>
}
 800c35c:	bf00      	nop
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c36c:	f001 fc2a 	bl	800dbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c374:	2b00      	cmp	r3, #0
 800c376:	d102      	bne.n	800c37e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c378:	2301      	movs	r3, #1
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	e001      	b.n	800c382 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c37e:	2300      	movs	r3, #0
 800c380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c382:	f001 fc4f 	bl	800dc24 <vPortExitCritical>

	return xReturn;
 800c386:	68fb      	ldr	r3, [r7, #12]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c398:	f001 fc14 	bl	800dbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d102      	bne.n	800c3ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]
 800c3ac:	e001      	b.n	800c3b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3b2:	f001 fc37 	bl	800dc24 <vPortExitCritical>

	return xReturn;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60fb      	str	r3, [r7, #12]
 800c3ce:	e014      	b.n	800c3fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3d0:	4a0f      	ldr	r2, [pc, #60]	; (800c410 <vQueueAddToRegistry+0x50>)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10b      	bne.n	800c3f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3dc:	490c      	ldr	r1, [pc, #48]	; (800c410 <vQueueAddToRegistry+0x50>)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3e6:	4a0a      	ldr	r2, [pc, #40]	; (800c410 <vQueueAddToRegistry+0x50>)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3f2:	e006      	b.n	800c402 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2b07      	cmp	r3, #7
 800c3fe:	d9e7      	bls.n	800c3d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	200097a8 	.word	0x200097a8

0800c414 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c424:	f001 fbce 	bl	800dbc4 <vPortEnterCritical>
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c42e:	b25b      	sxtb	r3, r3
 800c430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c434:	d103      	bne.n	800c43e <vQueueWaitForMessageRestricted+0x2a>
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c444:	b25b      	sxtb	r3, r3
 800c446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44a:	d103      	bne.n	800c454 <vQueueWaitForMessageRestricted+0x40>
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c454:	f001 fbe6 	bl	800dc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d106      	bne.n	800c46e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	3324      	adds	r3, #36	; 0x24
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 fc61 	bl	800cd30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c46e:	6978      	ldr	r0, [r7, #20]
 800c470:	f7ff ff26 	bl	800c2c0 <prvUnlockQueue>
	}
 800c474:	bf00      	nop
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08e      	sub	sp, #56	; 0x38
 800c480:	af04      	add	r7, sp, #16
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10a      	bne.n	800c4a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	623b      	str	r3, [r7, #32]
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10a      	bne.n	800c4c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800c4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	61fb      	str	r3, [r7, #28]
}
 800c4be:	bf00      	nop
 800c4c0:	e7fe      	b.n	800c4c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4c2:	23bc      	movs	r3, #188	; 0xbc
 800c4c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	2bbc      	cmp	r3, #188	; 0xbc
 800c4ca:	d00a      	beq.n	800c4e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	61bb      	str	r3, [r7, #24]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d01e      	beq.n	800c528 <xTaskCreateStatic+0xac>
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d01b      	beq.n	800c528 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c502:	2300      	movs	r3, #0
 800c504:	9303      	str	r3, [sp, #12]
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	9302      	str	r3, [sp, #8]
 800c50a:	f107 0314 	add.w	r3, r7, #20
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 f850 	bl	800c5c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c522:	f000 f8f3 	bl	800c70c <prvAddNewTaskToReadyList>
 800c526:	e001      	b.n	800c52c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c528:	2300      	movs	r3, #0
 800c52a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c52c:	697b      	ldr	r3, [r7, #20]
	}
 800c52e:	4618      	mov	r0, r3
 800c530:	3728      	adds	r7, #40	; 0x28
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c536:	b580      	push	{r7, lr}
 800c538:	b08c      	sub	sp, #48	; 0x30
 800c53a:	af04      	add	r7, sp, #16
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	603b      	str	r3, [r7, #0]
 800c542:	4613      	mov	r3, r2
 800c544:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c546:	88fb      	ldrh	r3, [r7, #6]
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4618      	mov	r0, r3
 800c54c:	f001 fc5c 	bl	800de08 <pvPortMalloc>
 800c550:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00e      	beq.n	800c576 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c558:	20bc      	movs	r0, #188	; 0xbc
 800c55a:	f001 fc55 	bl	800de08 <pvPortMalloc>
 800c55e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	631a      	str	r2, [r3, #48]	; 0x30
 800c56c:	e005      	b.n	800c57a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c56e:	6978      	ldr	r0, [r7, #20]
 800c570:	f001 fd16 	bl	800dfa0 <vPortFree>
 800c574:	e001      	b.n	800c57a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d017      	beq.n	800c5b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c588:	88fa      	ldrh	r2, [r7, #6]
 800c58a:	2300      	movs	r3, #0
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	9302      	str	r3, [sp, #8]
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	9301      	str	r3, [sp, #4]
 800c596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	68b9      	ldr	r1, [r7, #8]
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f000 f80e 	bl	800c5c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5a4:	69f8      	ldr	r0, [r7, #28]
 800c5a6:	f000 f8b1 	bl	800c70c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	61bb      	str	r3, [r7, #24]
 800c5ae:	e002      	b.n	800c5b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5b6:	69bb      	ldr	r3, [r7, #24]
	}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	21a5      	movs	r1, #165	; 0xa5
 800c5da:	f002 fcfe 	bl	800efda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	f003 0307 	and.w	r3, r3, #7
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	617b      	str	r3, [r7, #20]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d01f      	beq.n	800c65e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c61e:	2300      	movs	r3, #0
 800c620:	61fb      	str	r3, [r7, #28]
 800c622:	e012      	b.n	800c64a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	4413      	add	r3, r2
 800c62a:	7819      	ldrb	r1, [r3, #0]
 800c62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	4413      	add	r3, r2
 800c632:	3334      	adds	r3, #52	; 0x34
 800c634:	460a      	mov	r2, r1
 800c636:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	4413      	add	r3, r2
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d006      	beq.n	800c652 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	3301      	adds	r3, #1
 800c648:	61fb      	str	r3, [r7, #28]
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	2b0f      	cmp	r3, #15
 800c64e:	d9e9      	bls.n	800c624 <prvInitialiseNewTask+0x64>
 800c650:	e000      	b.n	800c654 <prvInitialiseNewTask+0x94>
			{
				break;
 800c652:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c65c:	e003      	b.n	800c666 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	2200      	movs	r2, #0
 800c662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	2b37      	cmp	r3, #55	; 0x37
 800c66a:	d901      	bls.n	800c670 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c66c:	2337      	movs	r3, #55	; 0x37
 800c66e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c674:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c67a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	2200      	movs	r2, #0
 800c680:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	3304      	adds	r3, #4
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff f978 	bl	800b97c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68e:	3318      	adds	r3, #24
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff f973 	bl	800b97c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	3354      	adds	r3, #84	; 0x54
 800c6c0:	2260      	movs	r2, #96	; 0x60
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f002 fc88 	bl	800efda <memset>
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	4a0c      	ldr	r2, [pc, #48]	; (800c700 <prvInitialiseNewTask+0x140>)
 800c6ce:	659a      	str	r2, [r3, #88]	; 0x58
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	4a0c      	ldr	r2, [pc, #48]	; (800c704 <prvInitialiseNewTask+0x144>)
 800c6d4:	65da      	str	r2, [r3, #92]	; 0x5c
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	4a0b      	ldr	r2, [pc, #44]	; (800c708 <prvInitialiseNewTask+0x148>)
 800c6da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	68f9      	ldr	r1, [r7, #12]
 800c6e0:	69b8      	ldr	r0, [r7, #24]
 800c6e2:	f001 f941 	bl	800d968 <pxPortInitialiseStack>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d002      	beq.n	800c6f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6f8:	bf00      	nop
 800c6fa:	3720      	adds	r7, #32
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	08014120 	.word	0x08014120
 800c704:	08014140 	.word	0x08014140
 800c708:	08014100 	.word	0x08014100

0800c70c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c714:	f001 fa56 	bl	800dbc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c718:	4b2d      	ldr	r3, [pc, #180]	; (800c7d0 <prvAddNewTaskToReadyList+0xc4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	4a2c      	ldr	r2, [pc, #176]	; (800c7d0 <prvAddNewTaskToReadyList+0xc4>)
 800c720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c722:	4b2c      	ldr	r3, [pc, #176]	; (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d109      	bne.n	800c73e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c72a:	4a2a      	ldr	r2, [pc, #168]	; (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c730:	4b27      	ldr	r3, [pc, #156]	; (800c7d0 <prvAddNewTaskToReadyList+0xc4>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d110      	bne.n	800c75a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c738:	f000 fc26 	bl	800cf88 <prvInitialiseTaskLists>
 800c73c:	e00d      	b.n	800c75a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c73e:	4b26      	ldr	r3, [pc, #152]	; (800c7d8 <prvAddNewTaskToReadyList+0xcc>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d109      	bne.n	800c75a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c746:	4b23      	ldr	r3, [pc, #140]	; (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c750:	429a      	cmp	r2, r3
 800c752:	d802      	bhi.n	800c75a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c754:	4a1f      	ldr	r2, [pc, #124]	; (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c75a:	4b20      	ldr	r3, [pc, #128]	; (800c7dc <prvAddNewTaskToReadyList+0xd0>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3301      	adds	r3, #1
 800c760:	4a1e      	ldr	r2, [pc, #120]	; (800c7dc <prvAddNewTaskToReadyList+0xd0>)
 800c762:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c764:	4b1d      	ldr	r3, [pc, #116]	; (800c7dc <prvAddNewTaskToReadyList+0xd0>)
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c770:	4b1b      	ldr	r3, [pc, #108]	; (800c7e0 <prvAddNewTaskToReadyList+0xd4>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d903      	bls.n	800c780 <prvAddNewTaskToReadyList+0x74>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	4a18      	ldr	r2, [pc, #96]	; (800c7e0 <prvAddNewTaskToReadyList+0xd4>)
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c784:	4613      	mov	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4a15      	ldr	r2, [pc, #84]	; (800c7e4 <prvAddNewTaskToReadyList+0xd8>)
 800c78e:	441a      	add	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3304      	adds	r3, #4
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7ff f8fd 	bl	800b996 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c79c:	f001 fa42 	bl	800dc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7a0:	4b0d      	ldr	r3, [pc, #52]	; (800c7d8 <prvAddNewTaskToReadyList+0xcc>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00e      	beq.n	800c7c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7a8:	4b0a      	ldr	r3, [pc, #40]	; (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d207      	bcs.n	800c7c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7b6:	4b0c      	ldr	r3, [pc, #48]	; (800c7e8 <prvAddNewTaskToReadyList+0xdc>)
 800c7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20009cbc 	.word	0x20009cbc
 800c7d4:	200097e8 	.word	0x200097e8
 800c7d8:	20009cc8 	.word	0x20009cc8
 800c7dc:	20009cd8 	.word	0x20009cd8
 800c7e0:	20009cc4 	.word	0x20009cc4
 800c7e4:	200097ec 	.word	0x200097ec
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d017      	beq.n	800c82e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7fe:	4b13      	ldr	r3, [pc, #76]	; (800c84c <vTaskDelay+0x60>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <vTaskDelay+0x30>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	60bb      	str	r3, [r7, #8]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c81c:	f000 f88a 	bl	800c934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c820:	2100      	movs	r1, #0
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fcfe 	bl	800d224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c828:	f000 f892 	bl	800c950 <xTaskResumeAll>
 800c82c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d107      	bne.n	800c844 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c834:	4b06      	ldr	r3, [pc, #24]	; (800c850 <vTaskDelay+0x64>)
 800c836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c844:	bf00      	nop
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	20009ce4 	.word	0x20009ce4
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08a      	sub	sp, #40	; 0x28
 800c858:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c85a:	2300      	movs	r3, #0
 800c85c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c862:	463a      	mov	r2, r7
 800c864:	1d39      	adds	r1, r7, #4
 800c866:	f107 0308 	add.w	r3, r7, #8
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff f832 	bl	800b8d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	68ba      	ldr	r2, [r7, #8]
 800c876:	9202      	str	r2, [sp, #8]
 800c878:	9301      	str	r3, [sp, #4]
 800c87a:	2300      	movs	r3, #0
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	2300      	movs	r3, #0
 800c880:	460a      	mov	r2, r1
 800c882:	4924      	ldr	r1, [pc, #144]	; (800c914 <vTaskStartScheduler+0xc0>)
 800c884:	4824      	ldr	r0, [pc, #144]	; (800c918 <vTaskStartScheduler+0xc4>)
 800c886:	f7ff fdf9 	bl	800c47c <xTaskCreateStatic>
 800c88a:	4603      	mov	r3, r0
 800c88c:	4a23      	ldr	r2, [pc, #140]	; (800c91c <vTaskStartScheduler+0xc8>)
 800c88e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c890:	4b22      	ldr	r3, [pc, #136]	; (800c91c <vTaskStartScheduler+0xc8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c898:	2301      	movs	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	e001      	b.n	800c8a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d102      	bne.n	800c8ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8a8:	f000 fd10 	bl	800d2cc <xTimerCreateTimerTask>
 800c8ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d11b      	bne.n	800c8ec <vTaskStartScheduler+0x98>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	613b      	str	r3, [r7, #16]
}
 800c8c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c8c8:	4b15      	ldr	r3, [pc, #84]	; (800c920 <vTaskStartScheduler+0xcc>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3354      	adds	r3, #84	; 0x54
 800c8ce:	4a15      	ldr	r2, [pc, #84]	; (800c924 <vTaskStartScheduler+0xd0>)
 800c8d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <vTaskStartScheduler+0xd4>)
 800c8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8da:	4b14      	ldr	r3, [pc, #80]	; (800c92c <vTaskStartScheduler+0xd8>)
 800c8dc:	2201      	movs	r2, #1
 800c8de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8e0:	4b13      	ldr	r3, [pc, #76]	; (800c930 <vTaskStartScheduler+0xdc>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8e6:	f001 f8cb 	bl	800da80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8ea:	e00e      	b.n	800c90a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f2:	d10a      	bne.n	800c90a <vTaskStartScheduler+0xb6>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	60fb      	str	r3, [r7, #12]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <vTaskStartScheduler+0xb4>
}
 800c90a:	bf00      	nop
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	08013ff4 	.word	0x08013ff4
 800c918:	0800cf59 	.word	0x0800cf59
 800c91c:	20009ce0 	.word	0x20009ce0
 800c920:	200097e8 	.word	0x200097e8
 800c924:	20000114 	.word	0x20000114
 800c928:	20009cdc 	.word	0x20009cdc
 800c92c:	20009cc8 	.word	0x20009cc8
 800c930:	20009cc0 	.word	0x20009cc0

0800c934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c934:	b480      	push	{r7}
 800c936:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c938:	4b04      	ldr	r3, [pc, #16]	; (800c94c <vTaskSuspendAll+0x18>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3301      	adds	r3, #1
 800c93e:	4a03      	ldr	r2, [pc, #12]	; (800c94c <vTaskSuspendAll+0x18>)
 800c940:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c942:	bf00      	nop
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr
 800c94c:	20009ce4 	.word	0x20009ce4

0800c950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c956:	2300      	movs	r3, #0
 800c958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c95e:	4b42      	ldr	r3, [pc, #264]	; (800ca68 <xTaskResumeAll+0x118>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10a      	bne.n	800c97c <xTaskResumeAll+0x2c>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	603b      	str	r3, [r7, #0]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c97c:	f001 f922 	bl	800dbc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c980:	4b39      	ldr	r3, [pc, #228]	; (800ca68 <xTaskResumeAll+0x118>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3b01      	subs	r3, #1
 800c986:	4a38      	ldr	r2, [pc, #224]	; (800ca68 <xTaskResumeAll+0x118>)
 800c988:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c98a:	4b37      	ldr	r3, [pc, #220]	; (800ca68 <xTaskResumeAll+0x118>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d162      	bne.n	800ca58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c992:	4b36      	ldr	r3, [pc, #216]	; (800ca6c <xTaskResumeAll+0x11c>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d05e      	beq.n	800ca58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c99a:	e02f      	b.n	800c9fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c99c:	4b34      	ldr	r3, [pc, #208]	; (800ca70 <xTaskResumeAll+0x120>)
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3318      	adds	r3, #24
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7ff f851 	bl	800ba50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff f84c 	bl	800ba50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9bc:	4b2d      	ldr	r3, [pc, #180]	; (800ca74 <xTaskResumeAll+0x124>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d903      	bls.n	800c9cc <xTaskResumeAll+0x7c>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c8:	4a2a      	ldr	r2, [pc, #168]	; (800ca74 <xTaskResumeAll+0x124>)
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4a27      	ldr	r2, [pc, #156]	; (800ca78 <xTaskResumeAll+0x128>)
 800c9da:	441a      	add	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3304      	adds	r3, #4
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	f7fe ffd7 	bl	800b996 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ec:	4b23      	ldr	r3, [pc, #140]	; (800ca7c <xTaskResumeAll+0x12c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d302      	bcc.n	800c9fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c9f6:	4b22      	ldr	r3, [pc, #136]	; (800ca80 <xTaskResumeAll+0x130>)
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ca70 <xTaskResumeAll+0x120>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1cb      	bne.n	800c99c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca0a:	f000 fb5f 	bl	800d0cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca0e:	4b1d      	ldr	r3, [pc, #116]	; (800ca84 <xTaskResumeAll+0x134>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d010      	beq.n	800ca3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca1a:	f000 f847 	bl	800caac <xTaskIncrementTick>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d002      	beq.n	800ca2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca24:	4b16      	ldr	r3, [pc, #88]	; (800ca80 <xTaskResumeAll+0x130>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1f1      	bne.n	800ca1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <xTaskResumeAll+0x134>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca3c:	4b10      	ldr	r3, [pc, #64]	; (800ca80 <xTaskResumeAll+0x130>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d009      	beq.n	800ca58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca44:	2301      	movs	r3, #1
 800ca46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca48:	4b0f      	ldr	r3, [pc, #60]	; (800ca88 <xTaskResumeAll+0x138>)
 800ca4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca4e:	601a      	str	r2, [r3, #0]
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca58:	f001 f8e4 	bl	800dc24 <vPortExitCritical>

	return xAlreadyYielded;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20009ce4 	.word	0x20009ce4
 800ca6c:	20009cbc 	.word	0x20009cbc
 800ca70:	20009c7c 	.word	0x20009c7c
 800ca74:	20009cc4 	.word	0x20009cc4
 800ca78:	200097ec 	.word	0x200097ec
 800ca7c:	200097e8 	.word	0x200097e8
 800ca80:	20009cd0 	.word	0x20009cd0
 800ca84:	20009ccc 	.word	0x20009ccc
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca92:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <xTaskGetTickCount+0x1c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca98:	687b      	ldr	r3, [r7, #4]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	20009cc0 	.word	0x20009cc0

0800caac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b086      	sub	sp, #24
 800cab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cab2:	2300      	movs	r3, #0
 800cab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cab6:	4b4f      	ldr	r3, [pc, #316]	; (800cbf4 <xTaskIncrementTick+0x148>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f040 808f 	bne.w	800cbde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cac0:	4b4d      	ldr	r3, [pc, #308]	; (800cbf8 <xTaskIncrementTick+0x14c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3301      	adds	r3, #1
 800cac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cac8:	4a4b      	ldr	r2, [pc, #300]	; (800cbf8 <xTaskIncrementTick+0x14c>)
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d120      	bne.n	800cb16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cad4:	4b49      	ldr	r3, [pc, #292]	; (800cbfc <xTaskIncrementTick+0x150>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <xTaskIncrementTick+0x48>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	603b      	str	r3, [r7, #0]
}
 800caf0:	bf00      	nop
 800caf2:	e7fe      	b.n	800caf2 <xTaskIncrementTick+0x46>
 800caf4:	4b41      	ldr	r3, [pc, #260]	; (800cbfc <xTaskIncrementTick+0x150>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	60fb      	str	r3, [r7, #12]
 800cafa:	4b41      	ldr	r3, [pc, #260]	; (800cc00 <xTaskIncrementTick+0x154>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a3f      	ldr	r2, [pc, #252]	; (800cbfc <xTaskIncrementTick+0x150>)
 800cb00:	6013      	str	r3, [r2, #0]
 800cb02:	4a3f      	ldr	r2, [pc, #252]	; (800cc00 <xTaskIncrementTick+0x154>)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	4b3e      	ldr	r3, [pc, #248]	; (800cc04 <xTaskIncrementTick+0x158>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	4a3d      	ldr	r2, [pc, #244]	; (800cc04 <xTaskIncrementTick+0x158>)
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	f000 fadb 	bl	800d0cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb16:	4b3c      	ldr	r3, [pc, #240]	; (800cc08 <xTaskIncrementTick+0x15c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d349      	bcc.n	800cbb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb20:	4b36      	ldr	r3, [pc, #216]	; (800cbfc <xTaskIncrementTick+0x150>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d104      	bne.n	800cb34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb2a:	4b37      	ldr	r3, [pc, #220]	; (800cc08 <xTaskIncrementTick+0x15c>)
 800cb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb30:	601a      	str	r2, [r3, #0]
					break;
 800cb32:	e03f      	b.n	800cbb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb34:	4b31      	ldr	r3, [pc, #196]	; (800cbfc <xTaskIncrementTick+0x150>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d203      	bcs.n	800cb54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb4c:	4a2e      	ldr	r2, [pc, #184]	; (800cc08 <xTaskIncrementTick+0x15c>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb52:	e02f      	b.n	800cbb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	3304      	adds	r3, #4
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe ff79 	bl	800ba50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d004      	beq.n	800cb70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	3318      	adds	r3, #24
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fe ff70 	bl	800ba50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb74:	4b25      	ldr	r3, [pc, #148]	; (800cc0c <xTaskIncrementTick+0x160>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d903      	bls.n	800cb84 <xTaskIncrementTick+0xd8>
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb80:	4a22      	ldr	r2, [pc, #136]	; (800cc0c <xTaskIncrementTick+0x160>)
 800cb82:	6013      	str	r3, [r2, #0]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb88:	4613      	mov	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4a1f      	ldr	r2, [pc, #124]	; (800cc10 <xTaskIncrementTick+0x164>)
 800cb92:	441a      	add	r2, r3
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	3304      	adds	r3, #4
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	f7fe fefb 	bl	800b996 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba4:	4b1b      	ldr	r3, [pc, #108]	; (800cc14 <xTaskIncrementTick+0x168>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d3b8      	bcc.n	800cb20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbb2:	e7b5      	b.n	800cb20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbb4:	4b17      	ldr	r3, [pc, #92]	; (800cc14 <xTaskIncrementTick+0x168>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbba:	4915      	ldr	r1, [pc, #84]	; (800cc10 <xTaskIncrementTick+0x164>)
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	440b      	add	r3, r1
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d901      	bls.n	800cbd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cbd0:	4b11      	ldr	r3, [pc, #68]	; (800cc18 <xTaskIncrementTick+0x16c>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	617b      	str	r3, [r7, #20]
 800cbdc:	e004      	b.n	800cbe8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cbde:	4b0f      	ldr	r3, [pc, #60]	; (800cc1c <xTaskIncrementTick+0x170>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	4a0d      	ldr	r2, [pc, #52]	; (800cc1c <xTaskIncrementTick+0x170>)
 800cbe6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cbe8:	697b      	ldr	r3, [r7, #20]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3718      	adds	r7, #24
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20009ce4 	.word	0x20009ce4
 800cbf8:	20009cc0 	.word	0x20009cc0
 800cbfc:	20009c74 	.word	0x20009c74
 800cc00:	20009c78 	.word	0x20009c78
 800cc04:	20009cd4 	.word	0x20009cd4
 800cc08:	20009cdc 	.word	0x20009cdc
 800cc0c:	20009cc4 	.word	0x20009cc4
 800cc10:	200097ec 	.word	0x200097ec
 800cc14:	200097e8 	.word	0x200097e8
 800cc18:	20009cd0 	.word	0x20009cd0
 800cc1c:	20009ccc 	.word	0x20009ccc

0800cc20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc26:	4b2a      	ldr	r3, [pc, #168]	; (800ccd0 <vTaskSwitchContext+0xb0>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d003      	beq.n	800cc36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc2e:	4b29      	ldr	r3, [pc, #164]	; (800ccd4 <vTaskSwitchContext+0xb4>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc34:	e046      	b.n	800ccc4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cc36:	4b27      	ldr	r3, [pc, #156]	; (800ccd4 <vTaskSwitchContext+0xb4>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc3c:	4b26      	ldr	r3, [pc, #152]	; (800ccd8 <vTaskSwitchContext+0xb8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	e010      	b.n	800cc66 <vTaskSwitchContext+0x46>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10a      	bne.n	800cc60 <vTaskSwitchContext+0x40>
	__asm volatile
 800cc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	607b      	str	r3, [r7, #4]
}
 800cc5c:	bf00      	nop
 800cc5e:	e7fe      	b.n	800cc5e <vTaskSwitchContext+0x3e>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	3b01      	subs	r3, #1
 800cc64:	60fb      	str	r3, [r7, #12]
 800cc66:	491d      	ldr	r1, [pc, #116]	; (800ccdc <vTaskSwitchContext+0xbc>)
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	440b      	add	r3, r1
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d0e4      	beq.n	800cc44 <vTaskSwitchContext+0x24>
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4a15      	ldr	r2, [pc, #84]	; (800ccdc <vTaskSwitchContext+0xbc>)
 800cc86:	4413      	add	r3, r2
 800cc88:	60bb      	str	r3, [r7, #8]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	605a      	str	r2, [r3, #4]
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	685a      	ldr	r2, [r3, #4]
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d104      	bne.n	800ccaa <vTaskSwitchContext+0x8a>
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	605a      	str	r2, [r3, #4]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	4a0b      	ldr	r2, [pc, #44]	; (800cce0 <vTaskSwitchContext+0xc0>)
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	4a08      	ldr	r2, [pc, #32]	; (800ccd8 <vTaskSwitchContext+0xb8>)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccba:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <vTaskSwitchContext+0xc0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	3354      	adds	r3, #84	; 0x54
 800ccc0:	4a08      	ldr	r2, [pc, #32]	; (800cce4 <vTaskSwitchContext+0xc4>)
 800ccc2:	6013      	str	r3, [r2, #0]
}
 800ccc4:	bf00      	nop
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr
 800ccd0:	20009ce4 	.word	0x20009ce4
 800ccd4:	20009cd0 	.word	0x20009cd0
 800ccd8:	20009cc4 	.word	0x20009cc4
 800ccdc:	200097ec 	.word	0x200097ec
 800cce0:	200097e8 	.word	0x200097e8
 800cce4:	20000114 	.word	0x20000114

0800cce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10a      	bne.n	800cd0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ccf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	60fb      	str	r3, [r7, #12]
}
 800cd0a:	bf00      	nop
 800cd0c:	e7fe      	b.n	800cd0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd0e:	4b07      	ldr	r3, [pc, #28]	; (800cd2c <vTaskPlaceOnEventList+0x44>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3318      	adds	r3, #24
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7fe fe61 	bl	800b9de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	6838      	ldr	r0, [r7, #0]
 800cd20:	f000 fa80 	bl	800d224 <prvAddCurrentTaskToDelayedList>
}
 800cd24:	bf00      	nop
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	200097e8 	.word	0x200097e8

0800cd30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10a      	bne.n	800cd58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	617b      	str	r3, [r7, #20]
}
 800cd54:	bf00      	nop
 800cd56:	e7fe      	b.n	800cd56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd58:	4b0a      	ldr	r3, [pc, #40]	; (800cd84 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3318      	adds	r3, #24
 800cd5e:	4619      	mov	r1, r3
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7fe fe18 	bl	800b996 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cd6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	68b8      	ldr	r0, [r7, #8]
 800cd76:	f000 fa55 	bl	800d224 <prvAddCurrentTaskToDelayedList>
	}
 800cd7a:	bf00      	nop
 800cd7c:	3718      	adds	r7, #24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	200097e8 	.word	0x200097e8

0800cd88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10a      	bne.n	800cdb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	60fb      	str	r3, [r7, #12]
}
 800cdb0:	bf00      	nop
 800cdb2:	e7fe      	b.n	800cdb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	3318      	adds	r3, #24
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe fe49 	bl	800ba50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdbe:	4b1e      	ldr	r3, [pc, #120]	; (800ce38 <xTaskRemoveFromEventList+0xb0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d11d      	bne.n	800ce02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe fe40 	bl	800ba50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd4:	4b19      	ldr	r3, [pc, #100]	; (800ce3c <xTaskRemoveFromEventList+0xb4>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d903      	bls.n	800cde4 <xTaskRemoveFromEventList+0x5c>
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde0:	4a16      	ldr	r2, [pc, #88]	; (800ce3c <xTaskRemoveFromEventList+0xb4>)
 800cde2:	6013      	str	r3, [r2, #0]
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde8:	4613      	mov	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	4a13      	ldr	r2, [pc, #76]	; (800ce40 <xTaskRemoveFromEventList+0xb8>)
 800cdf2:	441a      	add	r2, r3
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	3304      	adds	r3, #4
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	f7fe fdcb 	bl	800b996 <vListInsertEnd>
 800ce00:	e005      	b.n	800ce0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	3318      	adds	r3, #24
 800ce06:	4619      	mov	r1, r3
 800ce08:	480e      	ldr	r0, [pc, #56]	; (800ce44 <xTaskRemoveFromEventList+0xbc>)
 800ce0a:	f7fe fdc4 	bl	800b996 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce12:	4b0d      	ldr	r3, [pc, #52]	; (800ce48 <xTaskRemoveFromEventList+0xc0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d905      	bls.n	800ce28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce20:	4b0a      	ldr	r3, [pc, #40]	; (800ce4c <xTaskRemoveFromEventList+0xc4>)
 800ce22:	2201      	movs	r2, #1
 800ce24:	601a      	str	r2, [r3, #0]
 800ce26:	e001      	b.n	800ce2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce2c:	697b      	ldr	r3, [r7, #20]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20009ce4 	.word	0x20009ce4
 800ce3c:	20009cc4 	.word	0x20009cc4
 800ce40:	200097ec 	.word	0x200097ec
 800ce44:	20009c7c 	.word	0x20009c7c
 800ce48:	200097e8 	.word	0x200097e8
 800ce4c:	20009cd0 	.word	0x20009cd0

0800ce50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce58:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <vTaskInternalSetTimeOutState+0x24>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce60:	4b05      	ldr	r3, [pc, #20]	; (800ce78 <vTaskInternalSetTimeOutState+0x28>)
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	605a      	str	r2, [r3, #4]
}
 800ce68:	bf00      	nop
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr
 800ce74:	20009cd4 	.word	0x20009cd4
 800ce78:	20009cc0 	.word	0x20009cc0

0800ce7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b088      	sub	sp, #32
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10a      	bne.n	800cea2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	613b      	str	r3, [r7, #16]
}
 800ce9e:	bf00      	nop
 800cea0:	e7fe      	b.n	800cea0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10a      	bne.n	800cebe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	60fb      	str	r3, [r7, #12]
}
 800ceba:	bf00      	nop
 800cebc:	e7fe      	b.n	800cebc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cebe:	f000 fe81 	bl	800dbc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cec2:	4b1d      	ldr	r3, [pc, #116]	; (800cf38 <xTaskCheckForTimeOut+0xbc>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	69ba      	ldr	r2, [r7, #24]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceda:	d102      	bne.n	800cee2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cedc:	2300      	movs	r3, #0
 800cede:	61fb      	str	r3, [r7, #28]
 800cee0:	e023      	b.n	800cf2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	4b15      	ldr	r3, [pc, #84]	; (800cf3c <xTaskCheckForTimeOut+0xc0>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d007      	beq.n	800cefe <xTaskCheckForTimeOut+0x82>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	69ba      	ldr	r2, [r7, #24]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d302      	bcc.n	800cefe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cef8:	2301      	movs	r3, #1
 800cefa:	61fb      	str	r3, [r7, #28]
 800cefc:	e015      	b.n	800cf2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d20b      	bcs.n	800cf20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	1ad2      	subs	r2, r2, r3
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff ff9b 	bl	800ce50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	61fb      	str	r3, [r7, #28]
 800cf1e:	e004      	b.n	800cf2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	2200      	movs	r2, #0
 800cf24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf26:	2301      	movs	r3, #1
 800cf28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf2a:	f000 fe7b 	bl	800dc24 <vPortExitCritical>

	return xReturn;
 800cf2e:	69fb      	ldr	r3, [r7, #28]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3720      	adds	r7, #32
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20009cc0 	.word	0x20009cc0
 800cf3c:	20009cd4 	.word	0x20009cd4

0800cf40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf40:	b480      	push	{r7}
 800cf42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf44:	4b03      	ldr	r3, [pc, #12]	; (800cf54 <vTaskMissedYield+0x14>)
 800cf46:	2201      	movs	r2, #1
 800cf48:	601a      	str	r2, [r3, #0]
}
 800cf4a:	bf00      	nop
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	20009cd0 	.word	0x20009cd0

0800cf58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf60:	f000 f852 	bl	800d008 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf64:	4b06      	ldr	r3, [pc, #24]	; (800cf80 <prvIdleTask+0x28>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d9f9      	bls.n	800cf60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf6c:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <prvIdleTask+0x2c>)
 800cf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf7c:	e7f0      	b.n	800cf60 <prvIdleTask+0x8>
 800cf7e:	bf00      	nop
 800cf80:	200097ec 	.word	0x200097ec
 800cf84:	e000ed04 	.word	0xe000ed04

0800cf88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf8e:	2300      	movs	r3, #0
 800cf90:	607b      	str	r3, [r7, #4]
 800cf92:	e00c      	b.n	800cfae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	4613      	mov	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4a12      	ldr	r2, [pc, #72]	; (800cfe8 <prvInitialiseTaskLists+0x60>)
 800cfa0:	4413      	add	r3, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fe fcca 	bl	800b93c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	607b      	str	r3, [r7, #4]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b37      	cmp	r3, #55	; 0x37
 800cfb2:	d9ef      	bls.n	800cf94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfb4:	480d      	ldr	r0, [pc, #52]	; (800cfec <prvInitialiseTaskLists+0x64>)
 800cfb6:	f7fe fcc1 	bl	800b93c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfba:	480d      	ldr	r0, [pc, #52]	; (800cff0 <prvInitialiseTaskLists+0x68>)
 800cfbc:	f7fe fcbe 	bl	800b93c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cfc0:	480c      	ldr	r0, [pc, #48]	; (800cff4 <prvInitialiseTaskLists+0x6c>)
 800cfc2:	f7fe fcbb 	bl	800b93c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cfc6:	480c      	ldr	r0, [pc, #48]	; (800cff8 <prvInitialiseTaskLists+0x70>)
 800cfc8:	f7fe fcb8 	bl	800b93c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cfcc:	480b      	ldr	r0, [pc, #44]	; (800cffc <prvInitialiseTaskLists+0x74>)
 800cfce:	f7fe fcb5 	bl	800b93c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <prvInitialiseTaskLists+0x78>)
 800cfd4:	4a05      	ldr	r2, [pc, #20]	; (800cfec <prvInitialiseTaskLists+0x64>)
 800cfd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfd8:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <prvInitialiseTaskLists+0x7c>)
 800cfda:	4a05      	ldr	r2, [pc, #20]	; (800cff0 <prvInitialiseTaskLists+0x68>)
 800cfdc:	601a      	str	r2, [r3, #0]
}
 800cfde:	bf00      	nop
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	200097ec 	.word	0x200097ec
 800cfec:	20009c4c 	.word	0x20009c4c
 800cff0:	20009c60 	.word	0x20009c60
 800cff4:	20009c7c 	.word	0x20009c7c
 800cff8:	20009c90 	.word	0x20009c90
 800cffc:	20009ca8 	.word	0x20009ca8
 800d000:	20009c74 	.word	0x20009c74
 800d004:	20009c78 	.word	0x20009c78

0800d008 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d00e:	e019      	b.n	800d044 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d010:	f000 fdd8 	bl	800dbc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d014:	4b10      	ldr	r3, [pc, #64]	; (800d058 <prvCheckTasksWaitingTermination+0x50>)
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3304      	adds	r3, #4
 800d020:	4618      	mov	r0, r3
 800d022:	f7fe fd15 	bl	800ba50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d026:	4b0d      	ldr	r3, [pc, #52]	; (800d05c <prvCheckTasksWaitingTermination+0x54>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3b01      	subs	r3, #1
 800d02c:	4a0b      	ldr	r2, [pc, #44]	; (800d05c <prvCheckTasksWaitingTermination+0x54>)
 800d02e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d030:	4b0b      	ldr	r3, [pc, #44]	; (800d060 <prvCheckTasksWaitingTermination+0x58>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3b01      	subs	r3, #1
 800d036:	4a0a      	ldr	r2, [pc, #40]	; (800d060 <prvCheckTasksWaitingTermination+0x58>)
 800d038:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d03a:	f000 fdf3 	bl	800dc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 f810 	bl	800d064 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <prvCheckTasksWaitingTermination+0x58>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e1      	bne.n	800d010 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d04c:	bf00      	nop
 800d04e:	bf00      	nop
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	20009c90 	.word	0x20009c90
 800d05c:	20009cbc 	.word	0x20009cbc
 800d060:	20009ca4 	.word	0x20009ca4

0800d064 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3354      	adds	r3, #84	; 0x54
 800d070:	4618      	mov	r0, r3
 800d072:	f002 fa6d 	bl	800f550 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d108      	bne.n	800d092 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d084:	4618      	mov	r0, r3
 800d086:	f000 ff8b 	bl	800dfa0 <vPortFree>
				vPortFree( pxTCB );
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 ff88 	bl	800dfa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d090:	e018      	b.n	800d0c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d103      	bne.n	800d0a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 ff7f 	bl	800dfa0 <vPortFree>
	}
 800d0a2:	e00f      	b.n	800d0c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d00a      	beq.n	800d0c4 <prvDeleteTCB+0x60>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	60fb      	str	r3, [r7, #12]
}
 800d0c0:	bf00      	nop
 800d0c2:	e7fe      	b.n	800d0c2 <prvDeleteTCB+0x5e>
	}
 800d0c4:	bf00      	nop
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0d2:	4b0c      	ldr	r3, [pc, #48]	; (800d104 <prvResetNextTaskUnblockTime+0x38>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d104      	bne.n	800d0e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <prvResetNextTaskUnblockTime+0x3c>)
 800d0de:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0e4:	e008      	b.n	800d0f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e6:	4b07      	ldr	r3, [pc, #28]	; (800d104 <prvResetNextTaskUnblockTime+0x38>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	4a04      	ldr	r2, [pc, #16]	; (800d108 <prvResetNextTaskUnblockTime+0x3c>)
 800d0f6:	6013      	str	r3, [r2, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	20009c74 	.word	0x20009c74
 800d108:	20009cdc 	.word	0x20009cdc

0800d10c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d112:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <xTaskGetSchedulerState+0x34>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d102      	bne.n	800d120 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d11a:	2301      	movs	r3, #1
 800d11c:	607b      	str	r3, [r7, #4]
 800d11e:	e008      	b.n	800d132 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d120:	4b08      	ldr	r3, [pc, #32]	; (800d144 <xTaskGetSchedulerState+0x38>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d102      	bne.n	800d12e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d128:	2302      	movs	r3, #2
 800d12a:	607b      	str	r3, [r7, #4]
 800d12c:	e001      	b.n	800d132 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d12e:	2300      	movs	r3, #0
 800d130:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d132:	687b      	ldr	r3, [r7, #4]
	}
 800d134:	4618      	mov	r0, r3
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	20009cc8 	.word	0x20009cc8
 800d144:	20009ce4 	.word	0x20009ce4

0800d148 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d154:	2300      	movs	r3, #0
 800d156:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d056      	beq.n	800d20c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d15e:	4b2e      	ldr	r3, [pc, #184]	; (800d218 <xTaskPriorityDisinherit+0xd0>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	693a      	ldr	r2, [r7, #16]
 800d164:	429a      	cmp	r2, r3
 800d166:	d00a      	beq.n	800d17e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	60fb      	str	r3, [r7, #12]
}
 800d17a:	bf00      	nop
 800d17c:	e7fe      	b.n	800d17c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10a      	bne.n	800d19c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	60bb      	str	r3, [r7, #8]
}
 800d198:	bf00      	nop
 800d19a:	e7fe      	b.n	800d19a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a0:	1e5a      	subs	r2, r3, #1
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d02c      	beq.n	800d20c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d128      	bne.n	800d20c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	3304      	adds	r3, #4
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fc46 	bl	800ba50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1dc:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <xTaskPriorityDisinherit+0xd4>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d903      	bls.n	800d1ec <xTaskPriorityDisinherit+0xa4>
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	4a0c      	ldr	r2, [pc, #48]	; (800d21c <xTaskPriorityDisinherit+0xd4>)
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4a09      	ldr	r2, [pc, #36]	; (800d220 <xTaskPriorityDisinherit+0xd8>)
 800d1fa:	441a      	add	r2, r3
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	3304      	adds	r3, #4
 800d200:	4619      	mov	r1, r3
 800d202:	4610      	mov	r0, r2
 800d204:	f7fe fbc7 	bl	800b996 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d208:	2301      	movs	r3, #1
 800d20a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d20c:	697b      	ldr	r3, [r7, #20]
	}
 800d20e:	4618      	mov	r0, r3
 800d210:	3718      	adds	r7, #24
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	200097e8 	.word	0x200097e8
 800d21c:	20009cc4 	.word	0x20009cc4
 800d220:	200097ec 	.word	0x200097ec

0800d224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d22e:	4b21      	ldr	r3, [pc, #132]	; (800d2b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d234:	4b20      	ldr	r3, [pc, #128]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3304      	adds	r3, #4
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fe fc08 	bl	800ba50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d246:	d10a      	bne.n	800d25e <prvAddCurrentTaskToDelayedList+0x3a>
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d007      	beq.n	800d25e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d24e:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3304      	adds	r3, #4
 800d254:	4619      	mov	r1, r3
 800d256:	4819      	ldr	r0, [pc, #100]	; (800d2bc <prvAddCurrentTaskToDelayedList+0x98>)
 800d258:	f7fe fb9d 	bl	800b996 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d25c:	e026      	b.n	800d2ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4413      	add	r3, r2
 800d264:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d266:	4b14      	ldr	r3, [pc, #80]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	429a      	cmp	r2, r3
 800d274:	d209      	bcs.n	800d28a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d276:	4b12      	ldr	r3, [pc, #72]	; (800d2c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	4b0f      	ldr	r3, [pc, #60]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3304      	adds	r3, #4
 800d280:	4619      	mov	r1, r3
 800d282:	4610      	mov	r0, r2
 800d284:	f7fe fbab 	bl	800b9de <vListInsert>
}
 800d288:	e010      	b.n	800d2ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d28a:	4b0e      	ldr	r3, [pc, #56]	; (800d2c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	4b0a      	ldr	r3, [pc, #40]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3304      	adds	r3, #4
 800d294:	4619      	mov	r1, r3
 800d296:	4610      	mov	r0, r2
 800d298:	f7fe fba1 	bl	800b9de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d29c:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d202      	bcs.n	800d2ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d2a6:	4a08      	ldr	r2, [pc, #32]	; (800d2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	6013      	str	r3, [r2, #0]
}
 800d2ac:	bf00      	nop
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	20009cc0 	.word	0x20009cc0
 800d2b8:	200097e8 	.word	0x200097e8
 800d2bc:	20009ca8 	.word	0x20009ca8
 800d2c0:	20009c78 	.word	0x20009c78
 800d2c4:	20009c74 	.word	0x20009c74
 800d2c8:	20009cdc 	.word	0x20009cdc

0800d2cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08a      	sub	sp, #40	; 0x28
 800d2d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d2d6:	f000 fb07 	bl	800d8e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d2da:	4b1c      	ldr	r3, [pc, #112]	; (800d34c <xTimerCreateTimerTask+0x80>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d021      	beq.n	800d326 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d2ea:	1d3a      	adds	r2, r7, #4
 800d2ec:	f107 0108 	add.w	r1, r7, #8
 800d2f0:	f107 030c 	add.w	r3, r7, #12
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe fb07 	bl	800b908 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d2fa:	6879      	ldr	r1, [r7, #4]
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	9202      	str	r2, [sp, #8]
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	2302      	movs	r3, #2
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2300      	movs	r3, #0
 800d30a:	460a      	mov	r2, r1
 800d30c:	4910      	ldr	r1, [pc, #64]	; (800d350 <xTimerCreateTimerTask+0x84>)
 800d30e:	4811      	ldr	r0, [pc, #68]	; (800d354 <xTimerCreateTimerTask+0x88>)
 800d310:	f7ff f8b4 	bl	800c47c <xTaskCreateStatic>
 800d314:	4603      	mov	r3, r0
 800d316:	4a10      	ldr	r2, [pc, #64]	; (800d358 <xTimerCreateTimerTask+0x8c>)
 800d318:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d31a:	4b0f      	ldr	r3, [pc, #60]	; (800d358 <xTimerCreateTimerTask+0x8c>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d322:	2301      	movs	r3, #1
 800d324:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	613b      	str	r3, [r7, #16]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d342:	697b      	ldr	r3, [r7, #20]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20009d18 	.word	0x20009d18
 800d350:	08013ffc 	.word	0x08013ffc
 800d354:	0800d491 	.word	0x0800d491
 800d358:	20009d1c 	.word	0x20009d1c

0800d35c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08a      	sub	sp, #40	; 0x28
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
 800d368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d36a:	2300      	movs	r3, #0
 800d36c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	623b      	str	r3, [r7, #32]
}
 800d386:	bf00      	nop
 800d388:	e7fe      	b.n	800d388 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d38a:	4b1a      	ldr	r3, [pc, #104]	; (800d3f4 <xTimerGenericCommand+0x98>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d02a      	beq.n	800d3e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2b05      	cmp	r3, #5
 800d3a2:	dc18      	bgt.n	800d3d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d3a4:	f7ff feb2 	bl	800d10c <xTaskGetSchedulerState>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d109      	bne.n	800d3c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d3ae:	4b11      	ldr	r3, [pc, #68]	; (800d3f4 <xTimerGenericCommand+0x98>)
 800d3b0:	6818      	ldr	r0, [r3, #0]
 800d3b2:	f107 0110 	add.w	r1, r7, #16
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ba:	f7fe fc77 	bl	800bcac <xQueueGenericSend>
 800d3be:	6278      	str	r0, [r7, #36]	; 0x24
 800d3c0:	e012      	b.n	800d3e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <xTimerGenericCommand+0x98>)
 800d3c4:	6818      	ldr	r0, [r3, #0]
 800d3c6:	f107 0110 	add.w	r1, r7, #16
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f7fe fc6d 	bl	800bcac <xQueueGenericSend>
 800d3d2:	6278      	str	r0, [r7, #36]	; 0x24
 800d3d4:	e008      	b.n	800d3e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d3d6:	4b07      	ldr	r3, [pc, #28]	; (800d3f4 <xTimerGenericCommand+0x98>)
 800d3d8:	6818      	ldr	r0, [r3, #0]
 800d3da:	f107 0110 	add.w	r1, r7, #16
 800d3de:	2300      	movs	r3, #0
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	f7fe fd61 	bl	800bea8 <xQueueGenericSendFromISR>
 800d3e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3728      	adds	r7, #40	; 0x28
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20009d18 	.word	0x20009d18

0800d3f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af02      	add	r7, sp, #8
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d402:	4b22      	ldr	r3, [pc, #136]	; (800d48c <prvProcessExpiredTimer+0x94>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	3304      	adds	r3, #4
 800d410:	4618      	mov	r0, r3
 800d412:	f7fe fb1d 	bl	800ba50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b00      	cmp	r3, #0
 800d422:	d022      	beq.n	800d46a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	699a      	ldr	r2, [r3, #24]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	18d1      	adds	r1, r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	6978      	ldr	r0, [r7, #20]
 800d432:	f000 f8d1 	bl	800d5d8 <prvInsertTimerInActiveList>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01f      	beq.n	800d47c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d43c:	2300      	movs	r3, #0
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	2300      	movs	r3, #0
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	2100      	movs	r1, #0
 800d446:	6978      	ldr	r0, [r7, #20]
 800d448:	f7ff ff88 	bl	800d35c <xTimerGenericCommand>
 800d44c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d113      	bne.n	800d47c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	60fb      	str	r3, [r7, #12]
}
 800d466:	bf00      	nop
 800d468:	e7fe      	b.n	800d468 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d470:	f023 0301 	bic.w	r3, r3, #1
 800d474:	b2da      	uxtb	r2, r3
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	6a1b      	ldr	r3, [r3, #32]
 800d480:	6978      	ldr	r0, [r7, #20]
 800d482:	4798      	blx	r3
}
 800d484:	bf00      	nop
 800d486:	3718      	adds	r7, #24
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20009d10 	.word	0x20009d10

0800d490 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d498:	f107 0308 	add.w	r3, r7, #8
 800d49c:	4618      	mov	r0, r3
 800d49e:	f000 f857 	bl	800d550 <prvGetNextExpireTime>
 800d4a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 f803 	bl	800d4b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d4ae:	f000 f8d5 	bl	800d65c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4b2:	e7f1      	b.n	800d498 <prvTimerTask+0x8>

0800d4b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d4be:	f7ff fa39 	bl	800c934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4c2:	f107 0308 	add.w	r3, r7, #8
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 f866 	bl	800d598 <prvSampleTimeNow>
 800d4cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d130      	bne.n	800d536 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10a      	bne.n	800d4f0 <prvProcessTimerOrBlockTask+0x3c>
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d806      	bhi.n	800d4f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d4e2:	f7ff fa35 	bl	800c950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d4e6:	68f9      	ldr	r1, [r7, #12]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f7ff ff85 	bl	800d3f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d4ee:	e024      	b.n	800d53a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d008      	beq.n	800d508 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4f6:	4b13      	ldr	r3, [pc, #76]	; (800d544 <prvProcessTimerOrBlockTask+0x90>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <prvProcessTimerOrBlockTask+0x50>
 800d500:	2301      	movs	r3, #1
 800d502:	e000      	b.n	800d506 <prvProcessTimerOrBlockTask+0x52>
 800d504:	2300      	movs	r3, #0
 800d506:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <prvProcessTimerOrBlockTask+0x94>)
 800d50a:	6818      	ldr	r0, [r3, #0]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	4619      	mov	r1, r3
 800d516:	f7fe ff7d 	bl	800c414 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d51a:	f7ff fa19 	bl	800c950 <xTaskResumeAll>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10a      	bne.n	800d53a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d524:	4b09      	ldr	r3, [pc, #36]	; (800d54c <prvProcessTimerOrBlockTask+0x98>)
 800d526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	f3bf 8f6f 	isb	sy
}
 800d534:	e001      	b.n	800d53a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d536:	f7ff fa0b 	bl	800c950 <xTaskResumeAll>
}
 800d53a:	bf00      	nop
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20009d14 	.word	0x20009d14
 800d548:	20009d18 	.word	0x20009d18
 800d54c:	e000ed04 	.word	0xe000ed04

0800d550 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d558:	4b0e      	ldr	r3, [pc, #56]	; (800d594 <prvGetNextExpireTime+0x44>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <prvGetNextExpireTime+0x16>
 800d562:	2201      	movs	r2, #1
 800d564:	e000      	b.n	800d568 <prvGetNextExpireTime+0x18>
 800d566:	2200      	movs	r2, #0
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d105      	bne.n	800d580 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d574:	4b07      	ldr	r3, [pc, #28]	; (800d594 <prvGetNextExpireTime+0x44>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	e001      	b.n	800d584 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d580:	2300      	movs	r3, #0
 800d582:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d584:	68fb      	ldr	r3, [r7, #12]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3714      	adds	r7, #20
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	20009d10 	.word	0x20009d10

0800d598 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d5a0:	f7ff fa74 	bl	800ca8c <xTaskGetTickCount>
 800d5a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	; (800d5d4 <prvSampleTimeNow+0x3c>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d205      	bcs.n	800d5bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d5b0:	f000 f936 	bl	800d820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	601a      	str	r2, [r3, #0]
 800d5ba:	e002      	b.n	800d5c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d5c2:	4a04      	ldr	r2, [pc, #16]	; (800d5d4 <prvSampleTimeNow+0x3c>)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20009d20 	.word	0x20009d20

0800d5d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5f6:	68ba      	ldr	r2, [r7, #8]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d812      	bhi.n	800d624 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	1ad2      	subs	r2, r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d302      	bcc.n	800d612 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d60c:	2301      	movs	r3, #1
 800d60e:	617b      	str	r3, [r7, #20]
 800d610:	e01b      	b.n	800d64a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d612:	4b10      	ldr	r3, [pc, #64]	; (800d654 <prvInsertTimerInActiveList+0x7c>)
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3304      	adds	r3, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f7fe f9de 	bl	800b9de <vListInsert>
 800d622:	e012      	b.n	800d64a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d206      	bcs.n	800d63a <prvInsertTimerInActiveList+0x62>
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	429a      	cmp	r2, r3
 800d632:	d302      	bcc.n	800d63a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d634:	2301      	movs	r3, #1
 800d636:	617b      	str	r3, [r7, #20]
 800d638:	e007      	b.n	800d64a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d63a:	4b07      	ldr	r3, [pc, #28]	; (800d658 <prvInsertTimerInActiveList+0x80>)
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3304      	adds	r3, #4
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f7fe f9ca 	bl	800b9de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d64a:	697b      	ldr	r3, [r7, #20]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3718      	adds	r7, #24
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20009d14 	.word	0x20009d14
 800d658:	20009d10 	.word	0x20009d10

0800d65c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b08e      	sub	sp, #56	; 0x38
 800d660:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d662:	e0ca      	b.n	800d7fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	da18      	bge.n	800d69c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d66a:	1d3b      	adds	r3, r7, #4
 800d66c:	3304      	adds	r3, #4
 800d66e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10a      	bne.n	800d68c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	61fb      	str	r3, [r7, #28]
}
 800d688:	bf00      	nop
 800d68a:	e7fe      	b.n	800d68a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d692:	6850      	ldr	r0, [r2, #4]
 800d694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d696:	6892      	ldr	r2, [r2, #8]
 800d698:	4611      	mov	r1, r2
 800d69a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f2c0 80aa 	blt.w	800d7f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	695b      	ldr	r3, [r3, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fe f9cb 	bl	800ba50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6ba:	463b      	mov	r3, r7
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff ff6b 	bl	800d598 <prvSampleTimeNow>
 800d6c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b09      	cmp	r3, #9
 800d6c8:	f200 8097 	bhi.w	800d7fa <prvProcessReceivedCommands+0x19e>
 800d6cc:	a201      	add	r2, pc, #4	; (adr r2, 800d6d4 <prvProcessReceivedCommands+0x78>)
 800d6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d2:	bf00      	nop
 800d6d4:	0800d6fd 	.word	0x0800d6fd
 800d6d8:	0800d6fd 	.word	0x0800d6fd
 800d6dc:	0800d6fd 	.word	0x0800d6fd
 800d6e0:	0800d771 	.word	0x0800d771
 800d6e4:	0800d785 	.word	0x0800d785
 800d6e8:	0800d7cf 	.word	0x0800d7cf
 800d6ec:	0800d6fd 	.word	0x0800d6fd
 800d6f0:	0800d6fd 	.word	0x0800d6fd
 800d6f4:	0800d771 	.word	0x0800d771
 800d6f8:	0800d785 	.word	0x0800d785
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d702:	f043 0301 	orr.w	r3, r3, #1
 800d706:	b2da      	uxtb	r2, r3
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d712:	699b      	ldr	r3, [r3, #24]
 800d714:	18d1      	adds	r1, r2, r3
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d71c:	f7ff ff5c 	bl	800d5d8 <prvInsertTimerInActiveList>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d069      	beq.n	800d7fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d72c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d734:	f003 0304 	and.w	r3, r3, #4
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d05e      	beq.n	800d7fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	441a      	add	r2, r3
 800d744:	2300      	movs	r3, #0
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	2300      	movs	r3, #0
 800d74a:	2100      	movs	r1, #0
 800d74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d74e:	f7ff fe05 	bl	800d35c <xTimerGenericCommand>
 800d752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d754:	6a3b      	ldr	r3, [r7, #32]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d14f      	bne.n	800d7fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75e:	f383 8811 	msr	BASEPRI, r3
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	61bb      	str	r3, [r7, #24]
}
 800d76c:	bf00      	nop
 800d76e:	e7fe      	b.n	800d76e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d776:	f023 0301 	bic.w	r3, r3, #1
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d782:	e03a      	b.n	800d7fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78a:	f043 0301 	orr.w	r3, r3, #1
 800d78e:	b2da      	uxtb	r2, r3
 800d790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	699b      	ldr	r3, [r3, #24]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10a      	bne.n	800d7ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	617b      	str	r3, [r7, #20]
}
 800d7b6:	bf00      	nop
 800d7b8:	e7fe      	b.n	800d7b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	699a      	ldr	r2, [r3, #24]
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	18d1      	adds	r1, r2, r3
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7c8:	f7ff ff06 	bl	800d5d8 <prvInsertTimerInActiveList>
					break;
 800d7cc:	e015      	b.n	800d7fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7d4:	f003 0302 	and.w	r3, r3, #2
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d103      	bne.n	800d7e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7de:	f000 fbdf 	bl	800dfa0 <vPortFree>
 800d7e2:	e00a      	b.n	800d7fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7ea:	f023 0301 	bic.w	r3, r3, #1
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d7f6:	e000      	b.n	800d7fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d7f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7fa:	4b08      	ldr	r3, [pc, #32]	; (800d81c <prvProcessReceivedCommands+0x1c0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	1d39      	adds	r1, r7, #4
 800d800:	2200      	movs	r2, #0
 800d802:	4618      	mov	r0, r3
 800d804:	f7fe fbec 	bl	800bfe0 <xQueueReceive>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f47f af2a 	bne.w	800d664 <prvProcessReceivedCommands+0x8>
	}
}
 800d810:	bf00      	nop
 800d812:	bf00      	nop
 800d814:	3730      	adds	r7, #48	; 0x30
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20009d18 	.word	0x20009d18

0800d820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d826:	e048      	b.n	800d8ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d828:	4b2d      	ldr	r3, [pc, #180]	; (800d8e0 <prvSwitchTimerLists+0xc0>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d832:	4b2b      	ldr	r3, [pc, #172]	; (800d8e0 <prvSwitchTimerLists+0xc0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3304      	adds	r3, #4
 800d840:	4618      	mov	r0, r3
 800d842:	f7fe f905 	bl	800ba50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6a1b      	ldr	r3, [r3, #32]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d854:	f003 0304 	and.w	r3, r3, #4
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d02e      	beq.n	800d8ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	4413      	add	r3, r2
 800d864:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d866:	68ba      	ldr	r2, [r7, #8]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d90e      	bls.n	800d88c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	68ba      	ldr	r2, [r7, #8]
 800d872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d87a:	4b19      	ldr	r3, [pc, #100]	; (800d8e0 <prvSwitchTimerLists+0xc0>)
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3304      	adds	r3, #4
 800d882:	4619      	mov	r1, r3
 800d884:	4610      	mov	r0, r2
 800d886:	f7fe f8aa 	bl	800b9de <vListInsert>
 800d88a:	e016      	b.n	800d8ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d88c:	2300      	movs	r3, #0
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	2300      	movs	r3, #0
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	2100      	movs	r1, #0
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff fd60 	bl	800d35c <xTimerGenericCommand>
 800d89c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10a      	bne.n	800d8ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	603b      	str	r3, [r7, #0]
}
 800d8b6:	bf00      	nop
 800d8b8:	e7fe      	b.n	800d8b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d8ba:	4b09      	ldr	r3, [pc, #36]	; (800d8e0 <prvSwitchTimerLists+0xc0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1b1      	bne.n	800d828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d8c4:	4b06      	ldr	r3, [pc, #24]	; (800d8e0 <prvSwitchTimerLists+0xc0>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d8ca:	4b06      	ldr	r3, [pc, #24]	; (800d8e4 <prvSwitchTimerLists+0xc4>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a04      	ldr	r2, [pc, #16]	; (800d8e0 <prvSwitchTimerLists+0xc0>)
 800d8d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d8d2:	4a04      	ldr	r2, [pc, #16]	; (800d8e4 <prvSwitchTimerLists+0xc4>)
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	6013      	str	r3, [r2, #0]
}
 800d8d8:	bf00      	nop
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	20009d10 	.word	0x20009d10
 800d8e4:	20009d14 	.word	0x20009d14

0800d8e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8ee:	f000 f969 	bl	800dbc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8f2:	4b15      	ldr	r3, [pc, #84]	; (800d948 <prvCheckForValidListAndQueue+0x60>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d120      	bne.n	800d93c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8fa:	4814      	ldr	r0, [pc, #80]	; (800d94c <prvCheckForValidListAndQueue+0x64>)
 800d8fc:	f7fe f81e 	bl	800b93c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d900:	4813      	ldr	r0, [pc, #76]	; (800d950 <prvCheckForValidListAndQueue+0x68>)
 800d902:	f7fe f81b 	bl	800b93c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d906:	4b13      	ldr	r3, [pc, #76]	; (800d954 <prvCheckForValidListAndQueue+0x6c>)
 800d908:	4a10      	ldr	r2, [pc, #64]	; (800d94c <prvCheckForValidListAndQueue+0x64>)
 800d90a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d90c:	4b12      	ldr	r3, [pc, #72]	; (800d958 <prvCheckForValidListAndQueue+0x70>)
 800d90e:	4a10      	ldr	r2, [pc, #64]	; (800d950 <prvCheckForValidListAndQueue+0x68>)
 800d910:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d912:	2300      	movs	r3, #0
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	4b11      	ldr	r3, [pc, #68]	; (800d95c <prvCheckForValidListAndQueue+0x74>)
 800d918:	4a11      	ldr	r2, [pc, #68]	; (800d960 <prvCheckForValidListAndQueue+0x78>)
 800d91a:	2110      	movs	r1, #16
 800d91c:	200a      	movs	r0, #10
 800d91e:	f7fe f929 	bl	800bb74 <xQueueGenericCreateStatic>
 800d922:	4603      	mov	r3, r0
 800d924:	4a08      	ldr	r2, [pc, #32]	; (800d948 <prvCheckForValidListAndQueue+0x60>)
 800d926:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d928:	4b07      	ldr	r3, [pc, #28]	; (800d948 <prvCheckForValidListAndQueue+0x60>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d005      	beq.n	800d93c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <prvCheckForValidListAndQueue+0x60>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	490b      	ldr	r1, [pc, #44]	; (800d964 <prvCheckForValidListAndQueue+0x7c>)
 800d936:	4618      	mov	r0, r3
 800d938:	f7fe fd42 	bl	800c3c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d93c:	f000 f972 	bl	800dc24 <vPortExitCritical>
}
 800d940:	bf00      	nop
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20009d18 	.word	0x20009d18
 800d94c:	20009ce8 	.word	0x20009ce8
 800d950:	20009cfc 	.word	0x20009cfc
 800d954:	20009d10 	.word	0x20009d10
 800d958:	20009d14 	.word	0x20009d14
 800d95c:	20009dc4 	.word	0x20009dc4
 800d960:	20009d24 	.word	0x20009d24
 800d964:	08014004 	.word	0x08014004

0800d968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3b04      	subs	r3, #4
 800d978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3b04      	subs	r3, #4
 800d986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	f023 0201 	bic.w	r2, r3, #1
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	3b04      	subs	r3, #4
 800d996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d998:	4a0c      	ldr	r2, [pc, #48]	; (800d9cc <pxPortInitialiseStack+0x64>)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	3b14      	subs	r3, #20
 800d9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	3b04      	subs	r3, #4
 800d9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f06f 0202 	mvn.w	r2, #2
 800d9b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3b20      	subs	r3, #32
 800d9bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d9be:	68fb      	ldr	r3, [r7, #12]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3714      	adds	r7, #20
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	0800d9d1 	.word	0x0800d9d1

0800d9d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9da:	4b12      	ldr	r3, [pc, #72]	; (800da24 <prvTaskExitError+0x54>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e2:	d00a      	beq.n	800d9fa <prvTaskExitError+0x2a>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	60fb      	str	r3, [r7, #12]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <prvTaskExitError+0x28>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	60bb      	str	r3, [r7, #8]
}
 800da0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da0e:	bf00      	nop
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0fc      	beq.n	800da10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da16:	bf00      	nop
 800da18:	bf00      	nop
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr
 800da24:	2000009c 	.word	0x2000009c
	...

0800da30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da30:	4b07      	ldr	r3, [pc, #28]	; (800da50 <pxCurrentTCBConst2>)
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	6808      	ldr	r0, [r1, #0]
 800da36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3a:	f380 8809 	msr	PSP, r0
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f04f 0000 	mov.w	r0, #0
 800da46:	f380 8811 	msr	BASEPRI, r0
 800da4a:	4770      	bx	lr
 800da4c:	f3af 8000 	nop.w

0800da50 <pxCurrentTCBConst2>:
 800da50:	200097e8 	.word	0x200097e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop

0800da58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da58:	4808      	ldr	r0, [pc, #32]	; (800da7c <prvPortStartFirstTask+0x24>)
 800da5a:	6800      	ldr	r0, [r0, #0]
 800da5c:	6800      	ldr	r0, [r0, #0]
 800da5e:	f380 8808 	msr	MSP, r0
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f380 8814 	msr	CONTROL, r0
 800da6a:	b662      	cpsie	i
 800da6c:	b661      	cpsie	f
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	df00      	svc	0
 800da78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da7a:	bf00      	nop
 800da7c:	e000ed08 	.word	0xe000ed08

0800da80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da86:	4b46      	ldr	r3, [pc, #280]	; (800dba0 <xPortStartScheduler+0x120>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a46      	ldr	r2, [pc, #280]	; (800dba4 <xPortStartScheduler+0x124>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d10a      	bne.n	800daa6 <xPortStartScheduler+0x26>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da94:	f383 8811 	msr	BASEPRI, r3
 800da98:	f3bf 8f6f 	isb	sy
 800da9c:	f3bf 8f4f 	dsb	sy
 800daa0:	613b      	str	r3, [r7, #16]
}
 800daa2:	bf00      	nop
 800daa4:	e7fe      	b.n	800daa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800daa6:	4b3e      	ldr	r3, [pc, #248]	; (800dba0 <xPortStartScheduler+0x120>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a3f      	ldr	r2, [pc, #252]	; (800dba8 <xPortStartScheduler+0x128>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d10a      	bne.n	800dac6 <xPortStartScheduler+0x46>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	60fb      	str	r3, [r7, #12]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dac6:	4b39      	ldr	r3, [pc, #228]	; (800dbac <xPortStartScheduler+0x12c>)
 800dac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	22ff      	movs	r2, #255	; 0xff
 800dad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dae0:	78fb      	ldrb	r3, [r7, #3]
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	4b31      	ldr	r3, [pc, #196]	; (800dbb0 <xPortStartScheduler+0x130>)
 800daec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800daee:	4b31      	ldr	r3, [pc, #196]	; (800dbb4 <xPortStartScheduler+0x134>)
 800daf0:	2207      	movs	r2, #7
 800daf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daf4:	e009      	b.n	800db0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800daf6:	4b2f      	ldr	r3, [pc, #188]	; (800dbb4 <xPortStartScheduler+0x134>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3b01      	subs	r3, #1
 800dafc:	4a2d      	ldr	r2, [pc, #180]	; (800dbb4 <xPortStartScheduler+0x134>)
 800dafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	b2db      	uxtb	r3, r3
 800db04:	005b      	lsls	r3, r3, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db0a:	78fb      	ldrb	r3, [r7, #3]
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db12:	2b80      	cmp	r3, #128	; 0x80
 800db14:	d0ef      	beq.n	800daf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db16:	4b27      	ldr	r3, [pc, #156]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f1c3 0307 	rsb	r3, r3, #7
 800db1e:	2b04      	cmp	r3, #4
 800db20:	d00a      	beq.n	800db38 <xPortStartScheduler+0xb8>
	__asm volatile
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	60bb      	str	r3, [r7, #8]
}
 800db34:	bf00      	nop
 800db36:	e7fe      	b.n	800db36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db38:	4b1e      	ldr	r3, [pc, #120]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	021b      	lsls	r3, r3, #8
 800db3e:	4a1d      	ldr	r2, [pc, #116]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db42:	4b1c      	ldr	r3, [pc, #112]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db4a:	4a1a      	ldr	r2, [pc, #104]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	b2da      	uxtb	r2, r3
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db56:	4b18      	ldr	r3, [pc, #96]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a17      	ldr	r2, [pc, #92]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db62:	4b15      	ldr	r3, [pc, #84]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a14      	ldr	r2, [pc, #80]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db6e:	f000 f8dd 	bl	800dd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db72:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <xPortStartScheduler+0x13c>)
 800db74:	2200      	movs	r2, #0
 800db76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db78:	f000 f8fc 	bl	800dd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db7c:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <xPortStartScheduler+0x140>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a0f      	ldr	r2, [pc, #60]	; (800dbc0 <xPortStartScheduler+0x140>)
 800db82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db88:	f7ff ff66 	bl	800da58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db8c:	f7ff f848 	bl	800cc20 <vTaskSwitchContext>
	prvTaskExitError();
 800db90:	f7ff ff1e 	bl	800d9d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3718      	adds	r7, #24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	e000ed00 	.word	0xe000ed00
 800dba4:	410fc271 	.word	0x410fc271
 800dba8:	410fc270 	.word	0x410fc270
 800dbac:	e000e400 	.word	0xe000e400
 800dbb0:	20009e14 	.word	0x20009e14
 800dbb4:	20009e18 	.word	0x20009e18
 800dbb8:	e000ed20 	.word	0xe000ed20
 800dbbc:	2000009c 	.word	0x2000009c
 800dbc0:	e000ef34 	.word	0xe000ef34

0800dbc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	607b      	str	r3, [r7, #4]
}
 800dbdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <vPortEnterCritical+0x58>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	4a0d      	ldr	r2, [pc, #52]	; (800dc1c <vPortEnterCritical+0x58>)
 800dbe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbe8:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <vPortEnterCritical+0x58>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d10f      	bne.n	800dc10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	; (800dc20 <vPortEnterCritical+0x5c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	603b      	str	r3, [r7, #0]
}
 800dc0c:	bf00      	nop
 800dc0e:	e7fe      	b.n	800dc0e <vPortEnterCritical+0x4a>
	}
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	2000009c 	.word	0x2000009c
 800dc20:	e000ed04 	.word	0xe000ed04

0800dc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc2a:	4b12      	ldr	r3, [pc, #72]	; (800dc74 <vPortExitCritical+0x50>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10a      	bne.n	800dc48 <vPortExitCritical+0x24>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	607b      	str	r3, [r7, #4]
}
 800dc44:	bf00      	nop
 800dc46:	e7fe      	b.n	800dc46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc48:	4b0a      	ldr	r3, [pc, #40]	; (800dc74 <vPortExitCritical+0x50>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	4a09      	ldr	r2, [pc, #36]	; (800dc74 <vPortExitCritical+0x50>)
 800dc50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc52:	4b08      	ldr	r3, [pc, #32]	; (800dc74 <vPortExitCritical+0x50>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d105      	bne.n	800dc66 <vPortExitCritical+0x42>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	f383 8811 	msr	BASEPRI, r3
}
 800dc64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc66:	bf00      	nop
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	2000009c 	.word	0x2000009c
	...

0800dc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc80:	f3ef 8009 	mrs	r0, PSP
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	4b15      	ldr	r3, [pc, #84]	; (800dce0 <pxCurrentTCBConst>)
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	f01e 0f10 	tst.w	lr, #16
 800dc90:	bf08      	it	eq
 800dc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9a:	6010      	str	r0, [r2, #0]
 800dc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dca4:	f380 8811 	msr	BASEPRI, r0
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f7fe ffb6 	bl	800cc20 <vTaskSwitchContext>
 800dcb4:	f04f 0000 	mov.w	r0, #0
 800dcb8:	f380 8811 	msr	BASEPRI, r0
 800dcbc:	bc09      	pop	{r0, r3}
 800dcbe:	6819      	ldr	r1, [r3, #0]
 800dcc0:	6808      	ldr	r0, [r1, #0]
 800dcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc6:	f01e 0f10 	tst.w	lr, #16
 800dcca:	bf08      	it	eq
 800dccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dcd0:	f380 8809 	msr	PSP, r0
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	f3af 8000 	nop.w

0800dce0 <pxCurrentTCBConst>:
 800dce0:	200097e8 	.word	0x200097e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop

0800dce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	607b      	str	r3, [r7, #4]
}
 800dd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd02:	f7fe fed3 	bl	800caac <xTaskIncrementTick>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd0c:	4b06      	ldr	r3, [pc, #24]	; (800dd28 <xPortSysTickHandler+0x40>)
 800dd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	2300      	movs	r3, #0
 800dd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f383 8811 	msr	BASEPRI, r3
}
 800dd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	e000ed04 	.word	0xe000ed04

0800dd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd30:	4b0b      	ldr	r3, [pc, #44]	; (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd36:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <vPortSetupTimerInterrupt+0x38>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	; (800dd68 <vPortSetupTimerInterrupt+0x3c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a0a      	ldr	r2, [pc, #40]	; (800dd6c <vPortSetupTimerInterrupt+0x40>)
 800dd42:	fba2 2303 	umull	r2, r3, r2, r3
 800dd46:	099b      	lsrs	r3, r3, #6
 800dd48:	4a09      	ldr	r2, [pc, #36]	; (800dd70 <vPortSetupTimerInterrupt+0x44>)
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd4e:	4b04      	ldr	r3, [pc, #16]	; (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd50:	2207      	movs	r2, #7
 800dd52:	601a      	str	r2, [r3, #0]
}
 800dd54:	bf00      	nop
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	e000e010 	.word	0xe000e010
 800dd64:	e000e018 	.word	0xe000e018
 800dd68:	20000004 	.word	0x20000004
 800dd6c:	10624dd3 	.word	0x10624dd3
 800dd70:	e000e014 	.word	0xe000e014

0800dd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd84 <vPortEnableVFP+0x10>
 800dd78:	6801      	ldr	r1, [r0, #0]
 800dd7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd7e:	6001      	str	r1, [r0, #0]
 800dd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd82:	bf00      	nop
 800dd84:	e000ed88 	.word	0xe000ed88

0800dd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd8e:	f3ef 8305 	mrs	r3, IPSR
 800dd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b0f      	cmp	r3, #15
 800dd98:	d914      	bls.n	800ddc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd9a:	4a17      	ldr	r2, [pc, #92]	; (800ddf8 <vPortValidateInterruptPriority+0x70>)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4413      	add	r3, r2
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dda4:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <vPortValidateInterruptPriority+0x74>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	7afa      	ldrb	r2, [r7, #11]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d20a      	bcs.n	800ddc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	607b      	str	r3, [r7, #4]
}
 800ddc0:	bf00      	nop
 800ddc2:	e7fe      	b.n	800ddc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ddc4:	4b0e      	ldr	r3, [pc, #56]	; (800de00 <vPortValidateInterruptPriority+0x78>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ddcc:	4b0d      	ldr	r3, [pc, #52]	; (800de04 <vPortValidateInterruptPriority+0x7c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d90a      	bls.n	800ddea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	603b      	str	r3, [r7, #0]
}
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <vPortValidateInterruptPriority+0x60>
	}
 800ddea:	bf00      	nop
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	e000e3f0 	.word	0xe000e3f0
 800ddfc:	20009e14 	.word	0x20009e14
 800de00:	e000ed0c 	.word	0xe000ed0c
 800de04:	20009e18 	.word	0x20009e18

0800de08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08a      	sub	sp, #40	; 0x28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de14:	f7fe fd8e 	bl	800c934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de18:	4b5b      	ldr	r3, [pc, #364]	; (800df88 <pvPortMalloc+0x180>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de20:	f000 f920 	bl	800e064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de24:	4b59      	ldr	r3, [pc, #356]	; (800df8c <pvPortMalloc+0x184>)
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4013      	ands	r3, r2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f040 8093 	bne.w	800df58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01d      	beq.n	800de74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800de38:	2208      	movs	r2, #8
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b00      	cmp	r3, #0
 800de48:	d014      	beq.n	800de74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f023 0307 	bic.w	r3, r3, #7
 800de50:	3308      	adds	r3, #8
 800de52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f003 0307 	and.w	r3, r3, #7
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00a      	beq.n	800de74 <pvPortMalloc+0x6c>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	617b      	str	r3, [r7, #20]
}
 800de70:	bf00      	nop
 800de72:	e7fe      	b.n	800de72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d06e      	beq.n	800df58 <pvPortMalloc+0x150>
 800de7a:	4b45      	ldr	r3, [pc, #276]	; (800df90 <pvPortMalloc+0x188>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	429a      	cmp	r2, r3
 800de82:	d869      	bhi.n	800df58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de84:	4b43      	ldr	r3, [pc, #268]	; (800df94 <pvPortMalloc+0x18c>)
 800de86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de88:	4b42      	ldr	r3, [pc, #264]	; (800df94 <pvPortMalloc+0x18c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de8e:	e004      	b.n	800de9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d903      	bls.n	800deac <pvPortMalloc+0xa4>
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1f1      	bne.n	800de90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800deac:	4b36      	ldr	r3, [pc, #216]	; (800df88 <pvPortMalloc+0x180>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d050      	beq.n	800df58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2208      	movs	r2, #8
 800debc:	4413      	add	r3, r2
 800debe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	2308      	movs	r3, #8
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d91f      	bls.n	800df18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ded8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4413      	add	r3, r2
 800dede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <pvPortMalloc+0xf8>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	613b      	str	r3, [r7, #16]
}
 800defc:	bf00      	nop
 800defe:	e7fe      	b.n	800defe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	685a      	ldr	r2, [r3, #4]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df12:	69b8      	ldr	r0, [r7, #24]
 800df14:	f000 f908 	bl	800e128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df18:	4b1d      	ldr	r3, [pc, #116]	; (800df90 <pvPortMalloc+0x188>)
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	4a1b      	ldr	r2, [pc, #108]	; (800df90 <pvPortMalloc+0x188>)
 800df24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df26:	4b1a      	ldr	r3, [pc, #104]	; (800df90 <pvPortMalloc+0x188>)
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	4b1b      	ldr	r3, [pc, #108]	; (800df98 <pvPortMalloc+0x190>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d203      	bcs.n	800df3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df32:	4b17      	ldr	r3, [pc, #92]	; (800df90 <pvPortMalloc+0x188>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a18      	ldr	r2, [pc, #96]	; (800df98 <pvPortMalloc+0x190>)
 800df38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	4b13      	ldr	r3, [pc, #76]	; (800df8c <pvPortMalloc+0x184>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	431a      	orrs	r2, r3
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	2200      	movs	r2, #0
 800df4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df4e:	4b13      	ldr	r3, [pc, #76]	; (800df9c <pvPortMalloc+0x194>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	4a11      	ldr	r2, [pc, #68]	; (800df9c <pvPortMalloc+0x194>)
 800df56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df58:	f7fe fcfa 	bl	800c950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	f003 0307 	and.w	r3, r3, #7
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00a      	beq.n	800df7c <pvPortMalloc+0x174>
	__asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6a:	f383 8811 	msr	BASEPRI, r3
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	60fb      	str	r3, [r7, #12]
}
 800df78:	bf00      	nop
 800df7a:	e7fe      	b.n	800df7a <pvPortMalloc+0x172>
	return pvReturn;
 800df7c:	69fb      	ldr	r3, [r7, #28]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3728      	adds	r7, #40	; 0x28
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	2000da24 	.word	0x2000da24
 800df8c:	2000da38 	.word	0x2000da38
 800df90:	2000da28 	.word	0x2000da28
 800df94:	2000da1c 	.word	0x2000da1c
 800df98:	2000da2c 	.word	0x2000da2c
 800df9c:	2000da30 	.word	0x2000da30

0800dfa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d04d      	beq.n	800e04e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dfb2:	2308      	movs	r3, #8
 800dfb4:	425b      	negs	r3, r3
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	4413      	add	r3, r2
 800dfba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	4b24      	ldr	r3, [pc, #144]	; (800e058 <vPortFree+0xb8>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4013      	ands	r3, r2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d10a      	bne.n	800dfe4 <vPortFree+0x44>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	60fb      	str	r3, [r7, #12]
}
 800dfe0:	bf00      	nop
 800dfe2:	e7fe      	b.n	800dfe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00a      	beq.n	800e002 <vPortFree+0x62>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	60bb      	str	r3, [r7, #8]
}
 800dffe:	bf00      	nop
 800e000:	e7fe      	b.n	800e000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	4b14      	ldr	r3, [pc, #80]	; (800e058 <vPortFree+0xb8>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4013      	ands	r3, r2
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d01e      	beq.n	800e04e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d11a      	bne.n	800e04e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	4b0e      	ldr	r3, [pc, #56]	; (800e058 <vPortFree+0xb8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	43db      	mvns	r3, r3
 800e022:	401a      	ands	r2, r3
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e028:	f7fe fc84 	bl	800c934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	685a      	ldr	r2, [r3, #4]
 800e030:	4b0a      	ldr	r3, [pc, #40]	; (800e05c <vPortFree+0xbc>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4413      	add	r3, r2
 800e036:	4a09      	ldr	r2, [pc, #36]	; (800e05c <vPortFree+0xbc>)
 800e038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e03a:	6938      	ldr	r0, [r7, #16]
 800e03c:	f000 f874 	bl	800e128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e040:	4b07      	ldr	r3, [pc, #28]	; (800e060 <vPortFree+0xc0>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	4a06      	ldr	r2, [pc, #24]	; (800e060 <vPortFree+0xc0>)
 800e048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e04a:	f7fe fc81 	bl	800c950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e04e:	bf00      	nop
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	2000da38 	.word	0x2000da38
 800e05c:	2000da28 	.word	0x2000da28
 800e060:	2000da34 	.word	0x2000da34

0800e064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e070:	4b27      	ldr	r3, [pc, #156]	; (800e110 <prvHeapInit+0xac>)
 800e072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f003 0307 	and.w	r3, r3, #7
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00c      	beq.n	800e098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3307      	adds	r3, #7
 800e082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 0307 	bic.w	r3, r3, #7
 800e08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	4a1f      	ldr	r2, [pc, #124]	; (800e110 <prvHeapInit+0xac>)
 800e094:	4413      	add	r3, r2
 800e096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e09c:	4a1d      	ldr	r2, [pc, #116]	; (800e114 <prvHeapInit+0xb0>)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e0a2:	4b1c      	ldr	r3, [pc, #112]	; (800e114 <prvHeapInit+0xb0>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e0b0:	2208      	movs	r2, #8
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	1a9b      	subs	r3, r3, r2
 800e0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f023 0307 	bic.w	r3, r3, #7
 800e0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	4a15      	ldr	r2, [pc, #84]	; (800e118 <prvHeapInit+0xb4>)
 800e0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0c6:	4b14      	ldr	r3, [pc, #80]	; (800e118 <prvHeapInit+0xb4>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0ce:	4b12      	ldr	r3, [pc, #72]	; (800e118 <prvHeapInit+0xb4>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	1ad2      	subs	r2, r2, r3
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0e4:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <prvHeapInit+0xb4>)
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	4a0a      	ldr	r2, [pc, #40]	; (800e11c <prvHeapInit+0xb8>)
 800e0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	4a09      	ldr	r2, [pc, #36]	; (800e120 <prvHeapInit+0xbc>)
 800e0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0fc:	4b09      	ldr	r3, [pc, #36]	; (800e124 <prvHeapInit+0xc0>)
 800e0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e102:	601a      	str	r2, [r3, #0]
}
 800e104:	bf00      	nop
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	20009e1c 	.word	0x20009e1c
 800e114:	2000da1c 	.word	0x2000da1c
 800e118:	2000da24 	.word	0x2000da24
 800e11c:	2000da2c 	.word	0x2000da2c
 800e120:	2000da28 	.word	0x2000da28
 800e124:	2000da38 	.word	0x2000da38

0800e128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e128:	b480      	push	{r7}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e130:	4b28      	ldr	r3, [pc, #160]	; (800e1d4 <prvInsertBlockIntoFreeList+0xac>)
 800e132:	60fb      	str	r3, [r7, #12]
 800e134:	e002      	b.n	800e13c <prvInsertBlockIntoFreeList+0x14>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	429a      	cmp	r2, r3
 800e144:	d8f7      	bhi.n	800e136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	4413      	add	r3, r2
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	429a      	cmp	r2, r3
 800e156:	d108      	bne.n	800e16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	685a      	ldr	r2, [r3, #4]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	441a      	add	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	441a      	add	r2, r3
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d118      	bne.n	800e1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	4b15      	ldr	r3, [pc, #84]	; (800e1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	429a      	cmp	r2, r3
 800e188:	d00d      	beq.n	800e1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	685a      	ldr	r2, [r3, #4]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	441a      	add	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	e008      	b.n	800e1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1a6:	4b0c      	ldr	r3, [pc, #48]	; (800e1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	e003      	b.n	800e1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d002      	beq.n	800e1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1c6:	bf00      	nop
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	2000da1c 	.word	0x2000da1c
 800e1d8:	2000da24 	.word	0x2000da24

0800e1dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	4912      	ldr	r1, [pc, #72]	; (800e22c <MX_USB_DEVICE_Init+0x50>)
 800e1e4:	4812      	ldr	r0, [pc, #72]	; (800e230 <MX_USB_DEVICE_Init+0x54>)
 800e1e6:	f7fb ff2d 	bl	800a044 <USBD_Init>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d001      	beq.n	800e1f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e1f0:	f7f4 fe04 	bl	8002dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e1f4:	490f      	ldr	r1, [pc, #60]	; (800e234 <MX_USB_DEVICE_Init+0x58>)
 800e1f6:	480e      	ldr	r0, [pc, #56]	; (800e230 <MX_USB_DEVICE_Init+0x54>)
 800e1f8:	f7fb ff54 	bl	800a0a4 <USBD_RegisterClass>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e202:	f7f4 fdfb 	bl	8002dfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e206:	490c      	ldr	r1, [pc, #48]	; (800e238 <MX_USB_DEVICE_Init+0x5c>)
 800e208:	4809      	ldr	r0, [pc, #36]	; (800e230 <MX_USB_DEVICE_Init+0x54>)
 800e20a:	f7fb fe45 	bl	8009e98 <USBD_CDC_RegisterInterface>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d001      	beq.n	800e218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e214:	f7f4 fdf2 	bl	8002dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e218:	4805      	ldr	r0, [pc, #20]	; (800e230 <MX_USB_DEVICE_Init+0x54>)
 800e21a:	f7fb ff79 	bl	800a110 <USBD_Start>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e224:	f7f4 fdea 	bl	8002dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e228:	bf00      	nop
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	200000b4 	.word	0x200000b4
 800e230:	2000da3c 	.word	0x2000da3c
 800e234:	2000001c 	.word	0x2000001c
 800e238:	200000a0 	.word	0x200000a0

0800e23c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e240:	2200      	movs	r2, #0
 800e242:	4905      	ldr	r1, [pc, #20]	; (800e258 <CDC_Init_FS+0x1c>)
 800e244:	4805      	ldr	r0, [pc, #20]	; (800e25c <CDC_Init_FS+0x20>)
 800e246:	f7fb fe41 	bl	8009ecc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e24a:	4905      	ldr	r1, [pc, #20]	; (800e260 <CDC_Init_FS+0x24>)
 800e24c:	4803      	ldr	r0, [pc, #12]	; (800e25c <CDC_Init_FS+0x20>)
 800e24e:	f7fb fe5f 	bl	8009f10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e254:	4618      	mov	r0, r3
 800e256:	bd80      	pop	{r7, pc}
 800e258:	2000e518 	.word	0x2000e518
 800e25c:	2000da3c 	.word	0x2000da3c
 800e260:	2000dd18 	.word	0x2000dd18

0800e264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e264:	b480      	push	{r7}
 800e266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	4603      	mov	r3, r0
 800e27c:	6039      	str	r1, [r7, #0]
 800e27e:	71fb      	strb	r3, [r7, #7]
 800e280:	4613      	mov	r3, r2
 800e282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	2b23      	cmp	r3, #35	; 0x23
 800e288:	d84a      	bhi.n	800e320 <CDC_Control_FS+0xac>
 800e28a:	a201      	add	r2, pc, #4	; (adr r2, 800e290 <CDC_Control_FS+0x1c>)
 800e28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e290:	0800e321 	.word	0x0800e321
 800e294:	0800e321 	.word	0x0800e321
 800e298:	0800e321 	.word	0x0800e321
 800e29c:	0800e321 	.word	0x0800e321
 800e2a0:	0800e321 	.word	0x0800e321
 800e2a4:	0800e321 	.word	0x0800e321
 800e2a8:	0800e321 	.word	0x0800e321
 800e2ac:	0800e321 	.word	0x0800e321
 800e2b0:	0800e321 	.word	0x0800e321
 800e2b4:	0800e321 	.word	0x0800e321
 800e2b8:	0800e321 	.word	0x0800e321
 800e2bc:	0800e321 	.word	0x0800e321
 800e2c0:	0800e321 	.word	0x0800e321
 800e2c4:	0800e321 	.word	0x0800e321
 800e2c8:	0800e321 	.word	0x0800e321
 800e2cc:	0800e321 	.word	0x0800e321
 800e2d0:	0800e321 	.word	0x0800e321
 800e2d4:	0800e321 	.word	0x0800e321
 800e2d8:	0800e321 	.word	0x0800e321
 800e2dc:	0800e321 	.word	0x0800e321
 800e2e0:	0800e321 	.word	0x0800e321
 800e2e4:	0800e321 	.word	0x0800e321
 800e2e8:	0800e321 	.word	0x0800e321
 800e2ec:	0800e321 	.word	0x0800e321
 800e2f0:	0800e321 	.word	0x0800e321
 800e2f4:	0800e321 	.word	0x0800e321
 800e2f8:	0800e321 	.word	0x0800e321
 800e2fc:	0800e321 	.word	0x0800e321
 800e300:	0800e321 	.word	0x0800e321
 800e304:	0800e321 	.word	0x0800e321
 800e308:	0800e321 	.word	0x0800e321
 800e30c:	0800e321 	.word	0x0800e321
 800e310:	0800e321 	.word	0x0800e321
 800e314:	0800e321 	.word	0x0800e321
 800e318:	0800e321 	.word	0x0800e321
 800e31c:	0800e321 	.word	0x0800e321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e320:	bf00      	nop
  }

  return (USBD_OK);
 800e322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e324:	4618      	mov	r0, r3
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (receivedLength + *Len < BUFFER_SIZE_)
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	4b1b      	ldr	r3, [pc, #108]	; (800e3ac <CDC_Receive_FS+0x7c>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4413      	add	r3, r2
 800e344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e348:	d21a      	bcs.n	800e380 <CDC_Receive_FS+0x50>
	    {
	        // Voeg de nieuwe ontvangen data toe aan de bestaande buffer
	        memcpy(&receivedData[receivedLength], Buf, *Len);  // Gebruik memcpy in plaats van strncat
 800e34a:	4b18      	ldr	r3, [pc, #96]	; (800e3ac <CDC_Receive_FS+0x7c>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a18      	ldr	r2, [pc, #96]	; (800e3b0 <CDC_Receive_FS+0x80>)
 800e350:	1898      	adds	r0, r3, r2
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	461a      	mov	r2, r3
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	f000 fe30 	bl	800efbe <memcpy>
	        receivedLength += *Len;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <CDC_Receive_FS+0x7c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4413      	add	r3, r2
 800e368:	4a10      	ldr	r2, [pc, #64]	; (800e3ac <CDC_Receive_FS+0x7c>)
 800e36a:	6013      	str	r3, [r2, #0]

	        // Controleer of er een newline of einde van bericht is ontvangen
	        if (strchr((char*)receivedData, '\n') != NULL)  // '\n' wordt als einde van bericht gezien
 800e36c:	210a      	movs	r1, #10
 800e36e:	4810      	ldr	r0, [pc, #64]	; (800e3b0 <CDC_Receive_FS+0x80>)
 800e370:	f001 f9f1 	bl	800f756 <strchr>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00b      	beq.n	800e392 <CDC_Receive_FS+0x62>
	        {
	            // Verwerk het volledige bericht zodra het compleet is
	            CheckReceivedData();
 800e37a:	f7f4 f8fb 	bl	8002574 <CheckReceivedData>
 800e37e:	e008      	b.n	800e392 <CDC_Receive_FS+0x62>
	        }
	    }
	    else
	    {
	        // Buffer overflow, reset de buffer en geef een foutmelding
	        memset(receivedData, 0, BUFFER_SIZE_);
 800e380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e384:	2100      	movs	r1, #0
 800e386:	480a      	ldr	r0, [pc, #40]	; (800e3b0 <CDC_Receive_FS+0x80>)
 800e388:	f000 fe27 	bl	800efda <memset>
	        receivedLength = 0;
 800e38c:	4b07      	ldr	r3, [pc, #28]	; (800e3ac <CDC_Receive_FS+0x7c>)
 800e38e:	2200      	movs	r2, #0
 800e390:	601a      	str	r2, [r3, #0]
	    }

	    // Geef de USB stack opdracht om meer data te ontvangen
	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e392:	6879      	ldr	r1, [r7, #4]
 800e394:	4807      	ldr	r0, [pc, #28]	; (800e3b4 <CDC_Receive_FS+0x84>)
 800e396:	f7fb fdbb 	bl	8009f10 <USBD_CDC_SetRxBuffer>
	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e39a:	4806      	ldr	r0, [pc, #24]	; (800e3b4 <CDC_Receive_FS+0x84>)
 800e39c:	f7fb fe1c 	bl	8009fd8 <USBD_CDC_ReceivePacket>

	    return (USBD_OK);
 800e3a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20000884 	.word	0x20000884
 800e3b0:	20000484 	.word	0x20000484
 800e3b4:	2000da3c 	.word	0x2000da3c

0800e3b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e3c8:	4b0d      	ldr	r3, [pc, #52]	; (800e400 <CDC_Transmit_FS+0x48>)
 800e3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e00b      	b.n	800e3f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e3de:	887b      	ldrh	r3, [r7, #2]
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	6879      	ldr	r1, [r7, #4]
 800e3e4:	4806      	ldr	r0, [pc, #24]	; (800e400 <CDC_Transmit_FS+0x48>)
 800e3e6:	f7fb fd71 	bl	8009ecc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e3ea:	4805      	ldr	r0, [pc, #20]	; (800e400 <CDC_Transmit_FS+0x48>)
 800e3ec:	f7fb fdae 	bl	8009f4c <USBD_CDC_TransmitPacket>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	2000da3c 	.word	0x2000da3c

0800e404 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e404:	b480      	push	{r7}
 800e406:	b087      	sub	sp, #28
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	4613      	mov	r3, r2
 800e410:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e412:	2300      	movs	r3, #0
 800e414:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e416:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	371c      	adds	r7, #28
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
	...

0800e428 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	4603      	mov	r3, r0
 800e430:	6039      	str	r1, [r7, #0]
 800e432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2212      	movs	r2, #18
 800e438:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e43a:	4b03      	ldr	r3, [pc, #12]	; (800e448 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	200000d4 	.word	0x200000d4

0800e44c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	4603      	mov	r3, r0
 800e454:	6039      	str	r1, [r7, #0]
 800e456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2204      	movs	r2, #4
 800e45c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e45e:	4b03      	ldr	r3, [pc, #12]	; (800e46c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	200000f4 	.word	0x200000f4

0800e470 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	6039      	str	r1, [r7, #0]
 800e47a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d105      	bne.n	800e48e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	4907      	ldr	r1, [pc, #28]	; (800e4a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e486:	4808      	ldr	r0, [pc, #32]	; (800e4a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e488:	f7fd f818 	bl	800b4bc <USBD_GetString>
 800e48c:	e004      	b.n	800e498 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	4904      	ldr	r1, [pc, #16]	; (800e4a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e492:	4805      	ldr	r0, [pc, #20]	; (800e4a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e494:	f7fd f812 	bl	800b4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e498:	4b02      	ldr	r3, [pc, #8]	; (800e4a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	2000ed18 	.word	0x2000ed18
 800e4a8:	0801400c 	.word	0x0801400c

0800e4ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	6039      	str	r1, [r7, #0]
 800e4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	4904      	ldr	r1, [pc, #16]	; (800e4cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e4bc:	4804      	ldr	r0, [pc, #16]	; (800e4d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e4be:	f7fc fffd 	bl	800b4bc <USBD_GetString>
  return USBD_StrDesc;
 800e4c2:	4b02      	ldr	r3, [pc, #8]	; (800e4cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	2000ed18 	.word	0x2000ed18
 800e4d0:	0801401c 	.word	0x0801401c

0800e4d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	6039      	str	r1, [r7, #0]
 800e4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	221a      	movs	r2, #26
 800e4e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e4e6:	f000 f855 	bl	800e594 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e4ea:	4b02      	ldr	r3, [pc, #8]	; (800e4f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	200000f8 	.word	0x200000f8

0800e4f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	6039      	str	r1, [r7, #0]
 800e502:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d105      	bne.n	800e516 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	4907      	ldr	r1, [pc, #28]	; (800e52c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e50e:	4808      	ldr	r0, [pc, #32]	; (800e530 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e510:	f7fc ffd4 	bl	800b4bc <USBD_GetString>
 800e514:	e004      	b.n	800e520 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	4904      	ldr	r1, [pc, #16]	; (800e52c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e51a:	4805      	ldr	r0, [pc, #20]	; (800e530 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e51c:	f7fc ffce 	bl	800b4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e520:	4b02      	ldr	r3, [pc, #8]	; (800e52c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	2000ed18 	.word	0x2000ed18
 800e530:	08014030 	.word	0x08014030

0800e534 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	6039      	str	r1, [r7, #0]
 800e53e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d105      	bne.n	800e552 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	4907      	ldr	r1, [pc, #28]	; (800e568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e54a:	4808      	ldr	r0, [pc, #32]	; (800e56c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e54c:	f7fc ffb6 	bl	800b4bc <USBD_GetString>
 800e550:	e004      	b.n	800e55c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	4904      	ldr	r1, [pc, #16]	; (800e568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e556:	4805      	ldr	r0, [pc, #20]	; (800e56c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e558:	f7fc ffb0 	bl	800b4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e55c:	4b02      	ldr	r3, [pc, #8]	; (800e568 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	2000ed18 	.word	0x2000ed18
 800e56c:	0801403c 	.word	0x0801403c

0800e570 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	6039      	str	r1, [r7, #0]
 800e57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	220c      	movs	r2, #12
 800e580:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e582:	4b03      	ldr	r3, [pc, #12]	; (800e590 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	200000e8 	.word	0x200000e8

0800e594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <Get_SerialNum+0x44>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5a0:	4b0e      	ldr	r3, [pc, #56]	; (800e5dc <Get_SerialNum+0x48>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e5a6:	4b0e      	ldr	r3, [pc, #56]	; (800e5e0 <Get_SerialNum+0x4c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d009      	beq.n	800e5ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5ba:	2208      	movs	r2, #8
 800e5bc:	4909      	ldr	r1, [pc, #36]	; (800e5e4 <Get_SerialNum+0x50>)
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f000 f814 	bl	800e5ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e5c4:	2204      	movs	r2, #4
 800e5c6:	4908      	ldr	r1, [pc, #32]	; (800e5e8 <Get_SerialNum+0x54>)
 800e5c8:	68b8      	ldr	r0, [r7, #8]
 800e5ca:	f000 f80f 	bl	800e5ec <IntToUnicode>
  }
}
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	1fff7a10 	.word	0x1fff7a10
 800e5dc:	1fff7a14 	.word	0x1fff7a14
 800e5e0:	1fff7a18 	.word	0x1fff7a18
 800e5e4:	200000fa 	.word	0x200000fa
 800e5e8:	2000010a 	.word	0x2000010a

0800e5ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b087      	sub	sp, #28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e5fe:	2300      	movs	r3, #0
 800e600:	75fb      	strb	r3, [r7, #23]
 800e602:	e027      	b.n	800e654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	0f1b      	lsrs	r3, r3, #28
 800e608:	2b09      	cmp	r3, #9
 800e60a:	d80b      	bhi.n	800e624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	0f1b      	lsrs	r3, r3, #28
 800e610:	b2da      	uxtb	r2, r3
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	4619      	mov	r1, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	440b      	add	r3, r1
 800e61c:	3230      	adds	r2, #48	; 0x30
 800e61e:	b2d2      	uxtb	r2, r2
 800e620:	701a      	strb	r2, [r3, #0]
 800e622:	e00a      	b.n	800e63a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	0f1b      	lsrs	r3, r3, #28
 800e628:	b2da      	uxtb	r2, r3
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
 800e62c:	005b      	lsls	r3, r3, #1
 800e62e:	4619      	mov	r1, r3
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	440b      	add	r3, r1
 800e634:	3237      	adds	r2, #55	; 0x37
 800e636:	b2d2      	uxtb	r2, r2
 800e638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	011b      	lsls	r3, r3, #4
 800e63e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	3301      	adds	r3, #1
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	4413      	add	r3, r2
 800e64a:	2200      	movs	r2, #0
 800e64c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e64e:	7dfb      	ldrb	r3, [r7, #23]
 800e650:	3301      	adds	r3, #1
 800e652:	75fb      	strb	r3, [r7, #23]
 800e654:	7dfa      	ldrb	r2, [r7, #23]
 800e656:	79fb      	ldrb	r3, [r7, #7]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d3d3      	bcc.n	800e604 <IntToUnicode+0x18>
  }
}
 800e65c:	bf00      	nop
 800e65e:	bf00      	nop
 800e660:	371c      	adds	r7, #28
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
	...

0800e66c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b0a0      	sub	sp, #128	; 0x80
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e674:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e678:	2200      	movs	r2, #0
 800e67a:	601a      	str	r2, [r3, #0]
 800e67c:	605a      	str	r2, [r3, #4]
 800e67e:	609a      	str	r2, [r3, #8]
 800e680:	60da      	str	r2, [r3, #12]
 800e682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e684:	f107 0310 	add.w	r3, r7, #16
 800e688:	225c      	movs	r2, #92	; 0x5c
 800e68a:	2100      	movs	r1, #0
 800e68c:	4618      	mov	r0, r3
 800e68e:	f000 fca4 	bl	800efda <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e69a:	d156      	bne.n	800e74a <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e69c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e6a6:	f107 0310 	add.w	r3, r7, #16
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7f6 fff0 	bl	8005690 <HAL_RCCEx_PeriphCLKConfig>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800e6b6:	f7f4 fba1 	bl	8002dfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	4b25      	ldr	r3, [pc, #148]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c2:	4a24      	ldr	r2, [pc, #144]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e6c4:	f043 0301 	orr.w	r3, r3, #1
 800e6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800e6ca:	4b22      	ldr	r3, [pc, #136]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ce:	f003 0301 	and.w	r3, r3, #1
 800e6d2:	60fb      	str	r3, [r7, #12]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e6d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	481b      	ldr	r0, [pc, #108]	; (800e758 <HAL_PCD_MspInit+0xec>)
 800e6ec:	f7f5 f810 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e6f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e6f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6fe:	2303      	movs	r3, #3
 800e700:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e702:	230a      	movs	r3, #10
 800e704:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e706:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e70a:	4619      	mov	r1, r3
 800e70c:	4812      	ldr	r0, [pc, #72]	; (800e758 <HAL_PCD_MspInit+0xec>)
 800e70e:	f7f4 ffff 	bl	8003710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e712:	4b10      	ldr	r3, [pc, #64]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e716:	4a0f      	ldr	r2, [pc, #60]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e71c:	6353      	str	r3, [r2, #52]	; 0x34
 800e71e:	2300      	movs	r3, #0
 800e720:	60bb      	str	r3, [r7, #8]
 800e722:	4b0c      	ldr	r3, [pc, #48]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e726:	4a0b      	ldr	r2, [pc, #44]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e72c:	6453      	str	r3, [r2, #68]	; 0x44
 800e72e:	4b09      	ldr	r3, [pc, #36]	; (800e754 <HAL_PCD_MspInit+0xe8>)
 800e730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e736:	60bb      	str	r3, [r7, #8]
 800e738:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e73a:	2200      	movs	r2, #0
 800e73c:	2105      	movs	r1, #5
 800e73e:	2043      	movs	r0, #67	; 0x43
 800e740:	f7f4 ffaf 	bl	80036a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e744:	2043      	movs	r0, #67	; 0x43
 800e746:	f7f4 ffc8 	bl	80036da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e74a:	bf00      	nop
 800e74c:	3780      	adds	r7, #128	; 0x80
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	40023800 	.word	0x40023800
 800e758:	40020000 	.word	0x40020000

0800e75c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e770:	4619      	mov	r1, r3
 800e772:	4610      	mov	r0, r2
 800e774:	f7fb fd19 	bl	800a1aa <USBD_LL_SetupStage>
}
 800e778:	bf00      	nop
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e792:	78fa      	ldrb	r2, [r7, #3]
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	4613      	mov	r3, r2
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	4413      	add	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	440b      	add	r3, r1
 800e7a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	78fb      	ldrb	r3, [r7, #3]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	f7fb fd53 	bl	800a254 <USBD_LL_DataOutStage>
}
 800e7ae:	bf00      	nop
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b082      	sub	sp, #8
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
 800e7be:	460b      	mov	r3, r1
 800e7c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e7c8:	78fa      	ldrb	r2, [r7, #3]
 800e7ca:	6879      	ldr	r1, [r7, #4]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	00db      	lsls	r3, r3, #3
 800e7d0:	4413      	add	r3, r2
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	440b      	add	r3, r1
 800e7d6:	334c      	adds	r3, #76	; 0x4c
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	78fb      	ldrb	r3, [r7, #3]
 800e7dc:	4619      	mov	r1, r3
 800e7de:	f7fb fdec 	bl	800a3ba <USBD_LL_DataInStage>
}
 800e7e2:	bf00      	nop
 800e7e4:	3708      	adds	r7, #8
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b082      	sub	sp, #8
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fb ff20 	bl	800a63e <USBD_LL_SOF>
}
 800e7fe:	bf00      	nop
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b084      	sub	sp, #16
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e80e:	2301      	movs	r3, #1
 800e810:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d102      	bne.n	800e820 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e81a:	2300      	movs	r3, #0
 800e81c:	73fb      	strb	r3, [r7, #15]
 800e81e:	e008      	b.n	800e832 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	2b02      	cmp	r3, #2
 800e826:	d102      	bne.n	800e82e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e828:	2301      	movs	r3, #1
 800e82a:	73fb      	strb	r3, [r7, #15]
 800e82c:	e001      	b.n	800e832 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e82e:	f7f4 fae5 	bl	8002dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e838:	7bfa      	ldrb	r2, [r7, #15]
 800e83a:	4611      	mov	r1, r2
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fb fec0 	bl	800a5c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fb fe68 	bl	800a51e <USBD_LL_Reset>
}
 800e84e:	bf00      	nop
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
	...

0800e858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e866:	4618      	mov	r0, r3
 800e868:	f7fb febb 	bl	800a5e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6812      	ldr	r2, [r2, #0]
 800e87a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e87e:	f043 0301 	orr.w	r3, r3, #1
 800e882:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a1b      	ldr	r3, [r3, #32]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d005      	beq.n	800e898 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e88c:	4b04      	ldr	r3, [pc, #16]	; (800e8a0 <HAL_PCD_SuspendCallback+0x48>)
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	4a03      	ldr	r2, [pc, #12]	; (800e8a0 <HAL_PCD_SuspendCallback+0x48>)
 800e892:	f043 0306 	orr.w	r3, r3, #6
 800e896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e898:	bf00      	nop
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	e000ed00 	.word	0xe000ed00

0800e8a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fb feab 	bl	800a60e <USBD_LL_Resume>
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8d2:	78fa      	ldrb	r2, [r7, #3]
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fb ff03 	bl	800a6e2 <USBD_LL_IsoOUTIncomplete>
}
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8f6:	78fa      	ldrb	r2, [r7, #3]
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fb febf 	bl	800a67e <USBD_LL_IsoINIncomplete>
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e916:	4618      	mov	r0, r3
 800e918:	f7fb ff15 	bl	800a746 <USBD_LL_DevConnected>
}
 800e91c:	bf00      	nop
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e932:	4618      	mov	r0, r3
 800e934:	f7fb ff12 	bl	800a75c <USBD_LL_DevDisconnected>
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d13c      	bne.n	800e9ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e950:	4a20      	ldr	r2, [pc, #128]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a1e      	ldr	r2, [pc, #120]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e95c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e960:	4b1c      	ldr	r3, [pc, #112]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e962:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e966:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e968:	4b1a      	ldr	r3, [pc, #104]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e96a:	2206      	movs	r2, #6
 800e96c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e96e:	4b19      	ldr	r3, [pc, #100]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e970:	2202      	movs	r2, #2
 800e972:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e974:	4b17      	ldr	r3, [pc, #92]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e976:	2200      	movs	r2, #0
 800e978:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e97a:	4b16      	ldr	r3, [pc, #88]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e97c:	2202      	movs	r2, #2
 800e97e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e980:	4b14      	ldr	r3, [pc, #80]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e982:	2200      	movs	r2, #0
 800e984:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e986:	4b13      	ldr	r3, [pc, #76]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e988:	2200      	movs	r2, #0
 800e98a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e98c:	4b11      	ldr	r3, [pc, #68]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e98e:	2200      	movs	r2, #0
 800e990:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e992:	4b10      	ldr	r3, [pc, #64]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e994:	2201      	movs	r2, #1
 800e996:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e998:	4b0e      	ldr	r3, [pc, #56]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e99a:	2200      	movs	r2, #0
 800e99c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e99e:	480d      	ldr	r0, [pc, #52]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e9a0:	f7f5 fa93 	bl	8003eca <HAL_PCD_Init>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e9aa:	f7f4 fa27 	bl	8002dfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e9ae:	2180      	movs	r1, #128	; 0x80
 800e9b0:	4808      	ldr	r0, [pc, #32]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e9b2:	f7f6 fd1e 	bl	80053f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e9b6:	2240      	movs	r2, #64	; 0x40
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	4806      	ldr	r0, [pc, #24]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e9bc:	f7f6 fcd2 	bl	8005364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e9c0:	2280      	movs	r2, #128	; 0x80
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	4803      	ldr	r0, [pc, #12]	; (800e9d4 <USBD_LL_Init+0x94>)
 800e9c6:	f7f6 fccd 	bl	8005364 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	2000ef18 	.word	0x2000ef18

0800e9d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7f5 fb8f 	bl	8004112 <HAL_PCD_Start>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9f8:	7bfb      	ldrb	r3, [r7, #15]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 f990 	bl	800ed20 <USBD_Get_USB_Status>
 800ea00:	4603      	mov	r3, r0
 800ea02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b084      	sub	sp, #16
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	4608      	mov	r0, r1
 800ea18:	4611      	mov	r1, r2
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	70fb      	strb	r3, [r7, #3]
 800ea20:	460b      	mov	r3, r1
 800ea22:	70bb      	strb	r3, [r7, #2]
 800ea24:	4613      	mov	r3, r2
 800ea26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea36:	78bb      	ldrb	r3, [r7, #2]
 800ea38:	883a      	ldrh	r2, [r7, #0]
 800ea3a:	78f9      	ldrb	r1, [r7, #3]
 800ea3c:	f7f6 f88d 	bl	8004b5a <HAL_PCD_EP_Open>
 800ea40:	4603      	mov	r3, r0
 800ea42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 f96a 	bl	800ed20 <USBD_Get_USB_Status>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b084      	sub	sp, #16
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
 800ea62:	460b      	mov	r3, r1
 800ea64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea74:	78fa      	ldrb	r2, [r7, #3]
 800ea76:	4611      	mov	r1, r2
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f6 f8d6 	bl	8004c2a <HAL_PCD_EP_Close>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f000 f94b 	bl	800ed20 <USBD_Get_USB_Status>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eab2:	78fa      	ldrb	r2, [r7, #3]
 800eab4:	4611      	mov	r1, r2
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7f6 f9ae 	bl	8004e18 <HAL_PCD_EP_SetStall>
 800eabc:	4603      	mov	r3, r0
 800eabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 f92c 	bl	800ed20 <USBD_Get_USB_Status>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b084      	sub	sp, #16
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
 800eade:	460b      	mov	r3, r1
 800eae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eae2:	2300      	movs	r3, #0
 800eae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eae6:	2300      	movs	r3, #0
 800eae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaf0:	78fa      	ldrb	r2, [r7, #3]
 800eaf2:	4611      	mov	r1, r2
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7f6 f9f3 	bl	8004ee0 <HAL_PCD_EP_ClrStall>
 800eafa:	4603      	mov	r3, r0
 800eafc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
 800eb00:	4618      	mov	r0, r3
 800eb02:	f000 f90d 	bl	800ed20 <USBD_Get_USB_Status>
 800eb06:	4603      	mov	r3, r0
 800eb08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	da0b      	bge.n	800eb48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb36:	68f9      	ldr	r1, [r7, #12]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	00db      	lsls	r3, r3, #3
 800eb3c:	4413      	add	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	440b      	add	r3, r1
 800eb42:	333e      	adds	r3, #62	; 0x3e
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	e00b      	b.n	800eb60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb48:	78fb      	ldrb	r3, [r7, #3]
 800eb4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb4e:	68f9      	ldr	r1, [r7, #12]
 800eb50:	4613      	mov	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	4413      	add	r3, r2
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	440b      	add	r3, r1
 800eb5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eb5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	460b      	mov	r3, r1
 800eb76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb86:	78fa      	ldrb	r2, [r7, #3]
 800eb88:	4611      	mov	r1, r2
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7f5 ffc0 	bl	8004b10 <HAL_PCD_SetAddress>
 800eb90:	4603      	mov	r3, r0
 800eb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 f8c2 	bl	800ed20 <USBD_Get_USB_Status>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b086      	sub	sp, #24
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	60f8      	str	r0, [r7, #12]
 800ebb2:	607a      	str	r2, [r7, #4]
 800ebb4:	603b      	str	r3, [r7, #0]
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebc8:	7af9      	ldrb	r1, [r7, #11]
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	f7f6 f8d9 	bl	8004d84 <HAL_PCD_EP_Transmit>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 f8a1 	bl	800ed20 <USBD_Get_USB_Status>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebe2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	607a      	str	r2, [r7, #4]
 800ebf6:	603b      	str	r3, [r7, #0]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec0a:	7af9      	ldrb	r1, [r7, #11]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	f7f6 f855 	bl	8004cbe <HAL_PCD_EP_Receive>
 800ec14:	4603      	mov	r3, r0
 800ec16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec18:	7dfb      	ldrb	r3, [r7, #23]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f000 f880 	bl	800ed20 <USBD_Get_USB_Status>
 800ec20:	4603      	mov	r3, r0
 800ec22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec24:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3718      	adds	r7, #24
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b082      	sub	sp, #8
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	460b      	mov	r3, r1
 800ec38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec40:	78fa      	ldrb	r2, [r7, #3]
 800ec42:	4611      	mov	r1, r2
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7f6 f885 	bl	8004d54 <HAL_PCD_EP_GetRxCount>
 800ec4a:	4603      	mov	r3, r0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ec60:	78fb      	ldrb	r3, [r7, #3]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d002      	beq.n	800ec6c <HAL_PCDEx_LPM_Callback+0x18>
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d01f      	beq.n	800ecaa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ec6a:	e03b      	b.n	800ece4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6a1b      	ldr	r3, [r3, #32]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d007      	beq.n	800ec84 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800ec74:	f7f3 fdac 	bl	80027d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec78:	4b1c      	ldr	r3, [pc, #112]	; (800ecec <HAL_PCDEx_LPM_Callback+0x98>)
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	4a1b      	ldr	r2, [pc, #108]	; (800ecec <HAL_PCDEx_LPM_Callback+0x98>)
 800ec7e:	f023 0306 	bic.w	r3, r3, #6
 800ec82:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	6812      	ldr	r2, [r2, #0]
 800ec92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec96:	f023 0301 	bic.w	r3, r3, #1
 800ec9a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fb fcb3 	bl	800a60e <USBD_LL_Resume>
    break;
 800eca8:	e01c      	b.n	800ece4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	687a      	ldr	r2, [r7, #4]
 800ecb6:	6812      	ldr	r2, [r2, #0]
 800ecb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ecbc:	f043 0301 	orr.w	r3, r3, #1
 800ecc0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fb fc8a 	bl	800a5e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d005      	beq.n	800ece2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ecd6:	4b05      	ldr	r3, [pc, #20]	; (800ecec <HAL_PCDEx_LPM_Callback+0x98>)
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	4a04      	ldr	r2, [pc, #16]	; (800ecec <HAL_PCDEx_LPM_Callback+0x98>)
 800ecdc:	f043 0306 	orr.w	r3, r3, #6
 800ece0:	6113      	str	r3, [r2, #16]
    break;
 800ece2:	bf00      	nop
}
 800ece4:	bf00      	nop
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	e000ed00 	.word	0xe000ed00

0800ecf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ecf8:	4b03      	ldr	r3, [pc, #12]	; (800ed08 <USBD_static_malloc+0x18>)
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	370c      	adds	r7, #12
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	2000f424 	.word	0x2000f424

0800ed0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]

}
 800ed14:	bf00      	nop
 800ed16:	370c      	adds	r7, #12
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	4603      	mov	r3, r0
 800ed28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	2b03      	cmp	r3, #3
 800ed32:	d817      	bhi.n	800ed64 <USBD_Get_USB_Status+0x44>
 800ed34:	a201      	add	r2, pc, #4	; (adr r2, 800ed3c <USBD_Get_USB_Status+0x1c>)
 800ed36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed3a:	bf00      	nop
 800ed3c:	0800ed4d 	.word	0x0800ed4d
 800ed40:	0800ed53 	.word	0x0800ed53
 800ed44:	0800ed59 	.word	0x0800ed59
 800ed48:	0800ed5f 	.word	0x0800ed5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed50:	e00b      	b.n	800ed6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed52:	2303      	movs	r3, #3
 800ed54:	73fb      	strb	r3, [r7, #15]
    break;
 800ed56:	e008      	b.n	800ed6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed5c:	e005      	b.n	800ed6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	73fb      	strb	r3, [r7, #15]
    break;
 800ed62:	e002      	b.n	800ed6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed64:	2303      	movs	r3, #3
 800ed66:	73fb      	strb	r3, [r7, #15]
    break;
 800ed68:	bf00      	nop
  }
  return usb_status;
 800ed6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3714      	adds	r7, #20
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <__errno>:
 800ed78:	4b01      	ldr	r3, [pc, #4]	; (800ed80 <__errno+0x8>)
 800ed7a:	6818      	ldr	r0, [r3, #0]
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	20000114 	.word	0x20000114

0800ed84 <std>:
 800ed84:	2300      	movs	r3, #0
 800ed86:	b510      	push	{r4, lr}
 800ed88:	4604      	mov	r4, r0
 800ed8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ed8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed92:	6083      	str	r3, [r0, #8]
 800ed94:	8181      	strh	r1, [r0, #12]
 800ed96:	6643      	str	r3, [r0, #100]	; 0x64
 800ed98:	81c2      	strh	r2, [r0, #14]
 800ed9a:	6183      	str	r3, [r0, #24]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	2208      	movs	r2, #8
 800eda0:	305c      	adds	r0, #92	; 0x5c
 800eda2:	f000 f91a 	bl	800efda <memset>
 800eda6:	4b05      	ldr	r3, [pc, #20]	; (800edbc <std+0x38>)
 800eda8:	6263      	str	r3, [r4, #36]	; 0x24
 800edaa:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <std+0x3c>)
 800edac:	62a3      	str	r3, [r4, #40]	; 0x28
 800edae:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <std+0x40>)
 800edb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edb2:	4b05      	ldr	r3, [pc, #20]	; (800edc8 <std+0x44>)
 800edb4:	6224      	str	r4, [r4, #32]
 800edb6:	6323      	str	r3, [r4, #48]	; 0x30
 800edb8:	bd10      	pop	{r4, pc}
 800edba:	bf00      	nop
 800edbc:	0800f6cd 	.word	0x0800f6cd
 800edc0:	0800f6f3 	.word	0x0800f6f3
 800edc4:	0800f72b 	.word	0x0800f72b
 800edc8:	0800f74f 	.word	0x0800f74f

0800edcc <_cleanup_r>:
 800edcc:	4901      	ldr	r1, [pc, #4]	; (800edd4 <_cleanup_r+0x8>)
 800edce:	f000 b8af 	b.w	800ef30 <_fwalk_reent>
 800edd2:	bf00      	nop
 800edd4:	08010619 	.word	0x08010619

0800edd8 <__sfmoreglue>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	2268      	movs	r2, #104	; 0x68
 800eddc:	1e4d      	subs	r5, r1, #1
 800edde:	4355      	muls	r5, r2
 800ede0:	460e      	mov	r6, r1
 800ede2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ede6:	f000 f921 	bl	800f02c <_malloc_r>
 800edea:	4604      	mov	r4, r0
 800edec:	b140      	cbz	r0, 800ee00 <__sfmoreglue+0x28>
 800edee:	2100      	movs	r1, #0
 800edf0:	e9c0 1600 	strd	r1, r6, [r0]
 800edf4:	300c      	adds	r0, #12
 800edf6:	60a0      	str	r0, [r4, #8]
 800edf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800edfc:	f000 f8ed 	bl	800efda <memset>
 800ee00:	4620      	mov	r0, r4
 800ee02:	bd70      	pop	{r4, r5, r6, pc}

0800ee04 <__sfp_lock_acquire>:
 800ee04:	4801      	ldr	r0, [pc, #4]	; (800ee0c <__sfp_lock_acquire+0x8>)
 800ee06:	f000 b8d8 	b.w	800efba <__retarget_lock_acquire_recursive>
 800ee0a:	bf00      	nop
 800ee0c:	2000f645 	.word	0x2000f645

0800ee10 <__sfp_lock_release>:
 800ee10:	4801      	ldr	r0, [pc, #4]	; (800ee18 <__sfp_lock_release+0x8>)
 800ee12:	f000 b8d3 	b.w	800efbc <__retarget_lock_release_recursive>
 800ee16:	bf00      	nop
 800ee18:	2000f645 	.word	0x2000f645

0800ee1c <__sinit_lock_acquire>:
 800ee1c:	4801      	ldr	r0, [pc, #4]	; (800ee24 <__sinit_lock_acquire+0x8>)
 800ee1e:	f000 b8cc 	b.w	800efba <__retarget_lock_acquire_recursive>
 800ee22:	bf00      	nop
 800ee24:	2000f646 	.word	0x2000f646

0800ee28 <__sinit_lock_release>:
 800ee28:	4801      	ldr	r0, [pc, #4]	; (800ee30 <__sinit_lock_release+0x8>)
 800ee2a:	f000 b8c7 	b.w	800efbc <__retarget_lock_release_recursive>
 800ee2e:	bf00      	nop
 800ee30:	2000f646 	.word	0x2000f646

0800ee34 <__sinit>:
 800ee34:	b510      	push	{r4, lr}
 800ee36:	4604      	mov	r4, r0
 800ee38:	f7ff fff0 	bl	800ee1c <__sinit_lock_acquire>
 800ee3c:	69a3      	ldr	r3, [r4, #24]
 800ee3e:	b11b      	cbz	r3, 800ee48 <__sinit+0x14>
 800ee40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee44:	f7ff bff0 	b.w	800ee28 <__sinit_lock_release>
 800ee48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee4c:	6523      	str	r3, [r4, #80]	; 0x50
 800ee4e:	4b13      	ldr	r3, [pc, #76]	; (800ee9c <__sinit+0x68>)
 800ee50:	4a13      	ldr	r2, [pc, #76]	; (800eea0 <__sinit+0x6c>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee56:	42a3      	cmp	r3, r4
 800ee58:	bf04      	itt	eq
 800ee5a:	2301      	moveq	r3, #1
 800ee5c:	61a3      	streq	r3, [r4, #24]
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f000 f820 	bl	800eea4 <__sfp>
 800ee64:	6060      	str	r0, [r4, #4]
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 f81c 	bl	800eea4 <__sfp>
 800ee6c:	60a0      	str	r0, [r4, #8]
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 f818 	bl	800eea4 <__sfp>
 800ee74:	2200      	movs	r2, #0
 800ee76:	60e0      	str	r0, [r4, #12]
 800ee78:	2104      	movs	r1, #4
 800ee7a:	6860      	ldr	r0, [r4, #4]
 800ee7c:	f7ff ff82 	bl	800ed84 <std>
 800ee80:	68a0      	ldr	r0, [r4, #8]
 800ee82:	2201      	movs	r2, #1
 800ee84:	2109      	movs	r1, #9
 800ee86:	f7ff ff7d 	bl	800ed84 <std>
 800ee8a:	68e0      	ldr	r0, [r4, #12]
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	2112      	movs	r1, #18
 800ee90:	f7ff ff78 	bl	800ed84 <std>
 800ee94:	2301      	movs	r3, #1
 800ee96:	61a3      	str	r3, [r4, #24]
 800ee98:	e7d2      	b.n	800ee40 <__sinit+0xc>
 800ee9a:	bf00      	nop
 800ee9c:	08014160 	.word	0x08014160
 800eea0:	0800edcd 	.word	0x0800edcd

0800eea4 <__sfp>:
 800eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea6:	4607      	mov	r7, r0
 800eea8:	f7ff ffac 	bl	800ee04 <__sfp_lock_acquire>
 800eeac:	4b1e      	ldr	r3, [pc, #120]	; (800ef28 <__sfp+0x84>)
 800eeae:	681e      	ldr	r6, [r3, #0]
 800eeb0:	69b3      	ldr	r3, [r6, #24]
 800eeb2:	b913      	cbnz	r3, 800eeba <__sfp+0x16>
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	f7ff ffbd 	bl	800ee34 <__sinit>
 800eeba:	3648      	adds	r6, #72	; 0x48
 800eebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eec0:	3b01      	subs	r3, #1
 800eec2:	d503      	bpl.n	800eecc <__sfp+0x28>
 800eec4:	6833      	ldr	r3, [r6, #0]
 800eec6:	b30b      	cbz	r3, 800ef0c <__sfp+0x68>
 800eec8:	6836      	ldr	r6, [r6, #0]
 800eeca:	e7f7      	b.n	800eebc <__sfp+0x18>
 800eecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eed0:	b9d5      	cbnz	r5, 800ef08 <__sfp+0x64>
 800eed2:	4b16      	ldr	r3, [pc, #88]	; (800ef2c <__sfp+0x88>)
 800eed4:	60e3      	str	r3, [r4, #12]
 800eed6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eeda:	6665      	str	r5, [r4, #100]	; 0x64
 800eedc:	f000 f86c 	bl	800efb8 <__retarget_lock_init_recursive>
 800eee0:	f7ff ff96 	bl	800ee10 <__sfp_lock_release>
 800eee4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eee8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eeec:	6025      	str	r5, [r4, #0]
 800eeee:	61a5      	str	r5, [r4, #24]
 800eef0:	2208      	movs	r2, #8
 800eef2:	4629      	mov	r1, r5
 800eef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eef8:	f000 f86f 	bl	800efda <memset>
 800eefc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef04:	4620      	mov	r0, r4
 800ef06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef08:	3468      	adds	r4, #104	; 0x68
 800ef0a:	e7d9      	b.n	800eec0 <__sfp+0x1c>
 800ef0c:	2104      	movs	r1, #4
 800ef0e:	4638      	mov	r0, r7
 800ef10:	f7ff ff62 	bl	800edd8 <__sfmoreglue>
 800ef14:	4604      	mov	r4, r0
 800ef16:	6030      	str	r0, [r6, #0]
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d1d5      	bne.n	800eec8 <__sfp+0x24>
 800ef1c:	f7ff ff78 	bl	800ee10 <__sfp_lock_release>
 800ef20:	230c      	movs	r3, #12
 800ef22:	603b      	str	r3, [r7, #0]
 800ef24:	e7ee      	b.n	800ef04 <__sfp+0x60>
 800ef26:	bf00      	nop
 800ef28:	08014160 	.word	0x08014160
 800ef2c:	ffff0001 	.word	0xffff0001

0800ef30 <_fwalk_reent>:
 800ef30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef34:	4606      	mov	r6, r0
 800ef36:	4688      	mov	r8, r1
 800ef38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef3c:	2700      	movs	r7, #0
 800ef3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef42:	f1b9 0901 	subs.w	r9, r9, #1
 800ef46:	d505      	bpl.n	800ef54 <_fwalk_reent+0x24>
 800ef48:	6824      	ldr	r4, [r4, #0]
 800ef4a:	2c00      	cmp	r4, #0
 800ef4c:	d1f7      	bne.n	800ef3e <_fwalk_reent+0xe>
 800ef4e:	4638      	mov	r0, r7
 800ef50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef54:	89ab      	ldrh	r3, [r5, #12]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d907      	bls.n	800ef6a <_fwalk_reent+0x3a>
 800ef5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	d003      	beq.n	800ef6a <_fwalk_reent+0x3a>
 800ef62:	4629      	mov	r1, r5
 800ef64:	4630      	mov	r0, r6
 800ef66:	47c0      	blx	r8
 800ef68:	4307      	orrs	r7, r0
 800ef6a:	3568      	adds	r5, #104	; 0x68
 800ef6c:	e7e9      	b.n	800ef42 <_fwalk_reent+0x12>
	...

0800ef70 <__libc_init_array>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	4d0d      	ldr	r5, [pc, #52]	; (800efa8 <__libc_init_array+0x38>)
 800ef74:	4c0d      	ldr	r4, [pc, #52]	; (800efac <__libc_init_array+0x3c>)
 800ef76:	1b64      	subs	r4, r4, r5
 800ef78:	10a4      	asrs	r4, r4, #2
 800ef7a:	2600      	movs	r6, #0
 800ef7c:	42a6      	cmp	r6, r4
 800ef7e:	d109      	bne.n	800ef94 <__libc_init_array+0x24>
 800ef80:	4d0b      	ldr	r5, [pc, #44]	; (800efb0 <__libc_init_array+0x40>)
 800ef82:	4c0c      	ldr	r4, [pc, #48]	; (800efb4 <__libc_init_array+0x44>)
 800ef84:	f004 ff3e 	bl	8013e04 <_init>
 800ef88:	1b64      	subs	r4, r4, r5
 800ef8a:	10a4      	asrs	r4, r4, #2
 800ef8c:	2600      	movs	r6, #0
 800ef8e:	42a6      	cmp	r6, r4
 800ef90:	d105      	bne.n	800ef9e <__libc_init_array+0x2e>
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef98:	4798      	blx	r3
 800ef9a:	3601      	adds	r6, #1
 800ef9c:	e7ee      	b.n	800ef7c <__libc_init_array+0xc>
 800ef9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800efa2:	4798      	blx	r3
 800efa4:	3601      	adds	r6, #1
 800efa6:	e7f2      	b.n	800ef8e <__libc_init_array+0x1e>
 800efa8:	08014730 	.word	0x08014730
 800efac:	08014730 	.word	0x08014730
 800efb0:	08014730 	.word	0x08014730
 800efb4:	08014734 	.word	0x08014734

0800efb8 <__retarget_lock_init_recursive>:
 800efb8:	4770      	bx	lr

0800efba <__retarget_lock_acquire_recursive>:
 800efba:	4770      	bx	lr

0800efbc <__retarget_lock_release_recursive>:
 800efbc:	4770      	bx	lr

0800efbe <memcpy>:
 800efbe:	440a      	add	r2, r1
 800efc0:	4291      	cmp	r1, r2
 800efc2:	f100 33ff 	add.w	r3, r0, #4294967295
 800efc6:	d100      	bne.n	800efca <memcpy+0xc>
 800efc8:	4770      	bx	lr
 800efca:	b510      	push	{r4, lr}
 800efcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efd4:	4291      	cmp	r1, r2
 800efd6:	d1f9      	bne.n	800efcc <memcpy+0xe>
 800efd8:	bd10      	pop	{r4, pc}

0800efda <memset>:
 800efda:	4402      	add	r2, r0
 800efdc:	4603      	mov	r3, r0
 800efde:	4293      	cmp	r3, r2
 800efe0:	d100      	bne.n	800efe4 <memset+0xa>
 800efe2:	4770      	bx	lr
 800efe4:	f803 1b01 	strb.w	r1, [r3], #1
 800efe8:	e7f9      	b.n	800efde <memset+0x4>
	...

0800efec <sbrk_aligned>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	4e0e      	ldr	r6, [pc, #56]	; (800f028 <sbrk_aligned+0x3c>)
 800eff0:	460c      	mov	r4, r1
 800eff2:	6831      	ldr	r1, [r6, #0]
 800eff4:	4605      	mov	r5, r0
 800eff6:	b911      	cbnz	r1, 800effe <sbrk_aligned+0x12>
 800eff8:	f000 fb06 	bl	800f608 <_sbrk_r>
 800effc:	6030      	str	r0, [r6, #0]
 800effe:	4621      	mov	r1, r4
 800f000:	4628      	mov	r0, r5
 800f002:	f000 fb01 	bl	800f608 <_sbrk_r>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	d00a      	beq.n	800f020 <sbrk_aligned+0x34>
 800f00a:	1cc4      	adds	r4, r0, #3
 800f00c:	f024 0403 	bic.w	r4, r4, #3
 800f010:	42a0      	cmp	r0, r4
 800f012:	d007      	beq.n	800f024 <sbrk_aligned+0x38>
 800f014:	1a21      	subs	r1, r4, r0
 800f016:	4628      	mov	r0, r5
 800f018:	f000 faf6 	bl	800f608 <_sbrk_r>
 800f01c:	3001      	adds	r0, #1
 800f01e:	d101      	bne.n	800f024 <sbrk_aligned+0x38>
 800f020:	f04f 34ff 	mov.w	r4, #4294967295
 800f024:	4620      	mov	r0, r4
 800f026:	bd70      	pop	{r4, r5, r6, pc}
 800f028:	2000f64c 	.word	0x2000f64c

0800f02c <_malloc_r>:
 800f02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f030:	1ccd      	adds	r5, r1, #3
 800f032:	f025 0503 	bic.w	r5, r5, #3
 800f036:	3508      	adds	r5, #8
 800f038:	2d0c      	cmp	r5, #12
 800f03a:	bf38      	it	cc
 800f03c:	250c      	movcc	r5, #12
 800f03e:	2d00      	cmp	r5, #0
 800f040:	4607      	mov	r7, r0
 800f042:	db01      	blt.n	800f048 <_malloc_r+0x1c>
 800f044:	42a9      	cmp	r1, r5
 800f046:	d905      	bls.n	800f054 <_malloc_r+0x28>
 800f048:	230c      	movs	r3, #12
 800f04a:	603b      	str	r3, [r7, #0]
 800f04c:	2600      	movs	r6, #0
 800f04e:	4630      	mov	r0, r6
 800f050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f054:	4e2e      	ldr	r6, [pc, #184]	; (800f110 <_malloc_r+0xe4>)
 800f056:	f001 feaf 	bl	8010db8 <__malloc_lock>
 800f05a:	6833      	ldr	r3, [r6, #0]
 800f05c:	461c      	mov	r4, r3
 800f05e:	bb34      	cbnz	r4, 800f0ae <_malloc_r+0x82>
 800f060:	4629      	mov	r1, r5
 800f062:	4638      	mov	r0, r7
 800f064:	f7ff ffc2 	bl	800efec <sbrk_aligned>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	4604      	mov	r4, r0
 800f06c:	d14d      	bne.n	800f10a <_malloc_r+0xde>
 800f06e:	6834      	ldr	r4, [r6, #0]
 800f070:	4626      	mov	r6, r4
 800f072:	2e00      	cmp	r6, #0
 800f074:	d140      	bne.n	800f0f8 <_malloc_r+0xcc>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	4631      	mov	r1, r6
 800f07a:	4638      	mov	r0, r7
 800f07c:	eb04 0803 	add.w	r8, r4, r3
 800f080:	f000 fac2 	bl	800f608 <_sbrk_r>
 800f084:	4580      	cmp	r8, r0
 800f086:	d13a      	bne.n	800f0fe <_malloc_r+0xd2>
 800f088:	6821      	ldr	r1, [r4, #0]
 800f08a:	3503      	adds	r5, #3
 800f08c:	1a6d      	subs	r5, r5, r1
 800f08e:	f025 0503 	bic.w	r5, r5, #3
 800f092:	3508      	adds	r5, #8
 800f094:	2d0c      	cmp	r5, #12
 800f096:	bf38      	it	cc
 800f098:	250c      	movcc	r5, #12
 800f09a:	4629      	mov	r1, r5
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7ff ffa5 	bl	800efec <sbrk_aligned>
 800f0a2:	3001      	adds	r0, #1
 800f0a4:	d02b      	beq.n	800f0fe <_malloc_r+0xd2>
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	442b      	add	r3, r5
 800f0aa:	6023      	str	r3, [r4, #0]
 800f0ac:	e00e      	b.n	800f0cc <_malloc_r+0xa0>
 800f0ae:	6822      	ldr	r2, [r4, #0]
 800f0b0:	1b52      	subs	r2, r2, r5
 800f0b2:	d41e      	bmi.n	800f0f2 <_malloc_r+0xc6>
 800f0b4:	2a0b      	cmp	r2, #11
 800f0b6:	d916      	bls.n	800f0e6 <_malloc_r+0xba>
 800f0b8:	1961      	adds	r1, r4, r5
 800f0ba:	42a3      	cmp	r3, r4
 800f0bc:	6025      	str	r5, [r4, #0]
 800f0be:	bf18      	it	ne
 800f0c0:	6059      	strne	r1, [r3, #4]
 800f0c2:	6863      	ldr	r3, [r4, #4]
 800f0c4:	bf08      	it	eq
 800f0c6:	6031      	streq	r1, [r6, #0]
 800f0c8:	5162      	str	r2, [r4, r5]
 800f0ca:	604b      	str	r3, [r1, #4]
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	f104 060b 	add.w	r6, r4, #11
 800f0d2:	f001 fe77 	bl	8010dc4 <__malloc_unlock>
 800f0d6:	f026 0607 	bic.w	r6, r6, #7
 800f0da:	1d23      	adds	r3, r4, #4
 800f0dc:	1af2      	subs	r2, r6, r3
 800f0de:	d0b6      	beq.n	800f04e <_malloc_r+0x22>
 800f0e0:	1b9b      	subs	r3, r3, r6
 800f0e2:	50a3      	str	r3, [r4, r2]
 800f0e4:	e7b3      	b.n	800f04e <_malloc_r+0x22>
 800f0e6:	6862      	ldr	r2, [r4, #4]
 800f0e8:	42a3      	cmp	r3, r4
 800f0ea:	bf0c      	ite	eq
 800f0ec:	6032      	streq	r2, [r6, #0]
 800f0ee:	605a      	strne	r2, [r3, #4]
 800f0f0:	e7ec      	b.n	800f0cc <_malloc_r+0xa0>
 800f0f2:	4623      	mov	r3, r4
 800f0f4:	6864      	ldr	r4, [r4, #4]
 800f0f6:	e7b2      	b.n	800f05e <_malloc_r+0x32>
 800f0f8:	4634      	mov	r4, r6
 800f0fa:	6876      	ldr	r6, [r6, #4]
 800f0fc:	e7b9      	b.n	800f072 <_malloc_r+0x46>
 800f0fe:	230c      	movs	r3, #12
 800f100:	603b      	str	r3, [r7, #0]
 800f102:	4638      	mov	r0, r7
 800f104:	f001 fe5e 	bl	8010dc4 <__malloc_unlock>
 800f108:	e7a1      	b.n	800f04e <_malloc_r+0x22>
 800f10a:	6025      	str	r5, [r4, #0]
 800f10c:	e7de      	b.n	800f0cc <_malloc_r+0xa0>
 800f10e:	bf00      	nop
 800f110:	2000f648 	.word	0x2000f648

0800f114 <_scanf_float>:
 800f114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f118:	b087      	sub	sp, #28
 800f11a:	4617      	mov	r7, r2
 800f11c:	9303      	str	r3, [sp, #12]
 800f11e:	688b      	ldr	r3, [r1, #8]
 800f120:	1e5a      	subs	r2, r3, #1
 800f122:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f126:	bf83      	ittte	hi
 800f128:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f12c:	195b      	addhi	r3, r3, r5
 800f12e:	9302      	strhi	r3, [sp, #8]
 800f130:	2300      	movls	r3, #0
 800f132:	bf86      	itte	hi
 800f134:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f138:	608b      	strhi	r3, [r1, #8]
 800f13a:	9302      	strls	r3, [sp, #8]
 800f13c:	680b      	ldr	r3, [r1, #0]
 800f13e:	468b      	mov	fp, r1
 800f140:	2500      	movs	r5, #0
 800f142:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f146:	f84b 3b1c 	str.w	r3, [fp], #28
 800f14a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f14e:	4680      	mov	r8, r0
 800f150:	460c      	mov	r4, r1
 800f152:	465e      	mov	r6, fp
 800f154:	46aa      	mov	sl, r5
 800f156:	46a9      	mov	r9, r5
 800f158:	9501      	str	r5, [sp, #4]
 800f15a:	68a2      	ldr	r2, [r4, #8]
 800f15c:	b152      	cbz	r2, 800f174 <_scanf_float+0x60>
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	2b4e      	cmp	r3, #78	; 0x4e
 800f164:	d864      	bhi.n	800f230 <_scanf_float+0x11c>
 800f166:	2b40      	cmp	r3, #64	; 0x40
 800f168:	d83c      	bhi.n	800f1e4 <_scanf_float+0xd0>
 800f16a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f16e:	b2c8      	uxtb	r0, r1
 800f170:	280e      	cmp	r0, #14
 800f172:	d93a      	bls.n	800f1ea <_scanf_float+0xd6>
 800f174:	f1b9 0f00 	cmp.w	r9, #0
 800f178:	d003      	beq.n	800f182 <_scanf_float+0x6e>
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f186:	f1ba 0f01 	cmp.w	sl, #1
 800f18a:	f200 8113 	bhi.w	800f3b4 <_scanf_float+0x2a0>
 800f18e:	455e      	cmp	r6, fp
 800f190:	f200 8105 	bhi.w	800f39e <_scanf_float+0x28a>
 800f194:	2501      	movs	r5, #1
 800f196:	4628      	mov	r0, r5
 800f198:	b007      	add	sp, #28
 800f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f1a2:	2a0d      	cmp	r2, #13
 800f1a4:	d8e6      	bhi.n	800f174 <_scanf_float+0x60>
 800f1a6:	a101      	add	r1, pc, #4	; (adr r1, 800f1ac <_scanf_float+0x98>)
 800f1a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1ac:	0800f2eb 	.word	0x0800f2eb
 800f1b0:	0800f175 	.word	0x0800f175
 800f1b4:	0800f175 	.word	0x0800f175
 800f1b8:	0800f175 	.word	0x0800f175
 800f1bc:	0800f34b 	.word	0x0800f34b
 800f1c0:	0800f323 	.word	0x0800f323
 800f1c4:	0800f175 	.word	0x0800f175
 800f1c8:	0800f175 	.word	0x0800f175
 800f1cc:	0800f2f9 	.word	0x0800f2f9
 800f1d0:	0800f175 	.word	0x0800f175
 800f1d4:	0800f175 	.word	0x0800f175
 800f1d8:	0800f175 	.word	0x0800f175
 800f1dc:	0800f175 	.word	0x0800f175
 800f1e0:	0800f2b1 	.word	0x0800f2b1
 800f1e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f1e8:	e7db      	b.n	800f1a2 <_scanf_float+0x8e>
 800f1ea:	290e      	cmp	r1, #14
 800f1ec:	d8c2      	bhi.n	800f174 <_scanf_float+0x60>
 800f1ee:	a001      	add	r0, pc, #4	; (adr r0, 800f1f4 <_scanf_float+0xe0>)
 800f1f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f1f4:	0800f2a3 	.word	0x0800f2a3
 800f1f8:	0800f175 	.word	0x0800f175
 800f1fc:	0800f2a3 	.word	0x0800f2a3
 800f200:	0800f337 	.word	0x0800f337
 800f204:	0800f175 	.word	0x0800f175
 800f208:	0800f251 	.word	0x0800f251
 800f20c:	0800f28d 	.word	0x0800f28d
 800f210:	0800f28d 	.word	0x0800f28d
 800f214:	0800f28d 	.word	0x0800f28d
 800f218:	0800f28d 	.word	0x0800f28d
 800f21c:	0800f28d 	.word	0x0800f28d
 800f220:	0800f28d 	.word	0x0800f28d
 800f224:	0800f28d 	.word	0x0800f28d
 800f228:	0800f28d 	.word	0x0800f28d
 800f22c:	0800f28d 	.word	0x0800f28d
 800f230:	2b6e      	cmp	r3, #110	; 0x6e
 800f232:	d809      	bhi.n	800f248 <_scanf_float+0x134>
 800f234:	2b60      	cmp	r3, #96	; 0x60
 800f236:	d8b2      	bhi.n	800f19e <_scanf_float+0x8a>
 800f238:	2b54      	cmp	r3, #84	; 0x54
 800f23a:	d077      	beq.n	800f32c <_scanf_float+0x218>
 800f23c:	2b59      	cmp	r3, #89	; 0x59
 800f23e:	d199      	bne.n	800f174 <_scanf_float+0x60>
 800f240:	2d07      	cmp	r5, #7
 800f242:	d197      	bne.n	800f174 <_scanf_float+0x60>
 800f244:	2508      	movs	r5, #8
 800f246:	e029      	b.n	800f29c <_scanf_float+0x188>
 800f248:	2b74      	cmp	r3, #116	; 0x74
 800f24a:	d06f      	beq.n	800f32c <_scanf_float+0x218>
 800f24c:	2b79      	cmp	r3, #121	; 0x79
 800f24e:	e7f6      	b.n	800f23e <_scanf_float+0x12a>
 800f250:	6821      	ldr	r1, [r4, #0]
 800f252:	05c8      	lsls	r0, r1, #23
 800f254:	d51a      	bpl.n	800f28c <_scanf_float+0x178>
 800f256:	9b02      	ldr	r3, [sp, #8]
 800f258:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f25c:	6021      	str	r1, [r4, #0]
 800f25e:	f109 0901 	add.w	r9, r9, #1
 800f262:	b11b      	cbz	r3, 800f26c <_scanf_float+0x158>
 800f264:	3b01      	subs	r3, #1
 800f266:	3201      	adds	r2, #1
 800f268:	9302      	str	r3, [sp, #8]
 800f26a:	60a2      	str	r2, [r4, #8]
 800f26c:	68a3      	ldr	r3, [r4, #8]
 800f26e:	3b01      	subs	r3, #1
 800f270:	60a3      	str	r3, [r4, #8]
 800f272:	6923      	ldr	r3, [r4, #16]
 800f274:	3301      	adds	r3, #1
 800f276:	6123      	str	r3, [r4, #16]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	607b      	str	r3, [r7, #4]
 800f280:	f340 8084 	ble.w	800f38c <_scanf_float+0x278>
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	3301      	adds	r3, #1
 800f288:	603b      	str	r3, [r7, #0]
 800f28a:	e766      	b.n	800f15a <_scanf_float+0x46>
 800f28c:	eb1a 0f05 	cmn.w	sl, r5
 800f290:	f47f af70 	bne.w	800f174 <_scanf_float+0x60>
 800f294:	6822      	ldr	r2, [r4, #0]
 800f296:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f29a:	6022      	str	r2, [r4, #0]
 800f29c:	f806 3b01 	strb.w	r3, [r6], #1
 800f2a0:	e7e4      	b.n	800f26c <_scanf_float+0x158>
 800f2a2:	6822      	ldr	r2, [r4, #0]
 800f2a4:	0610      	lsls	r0, r2, #24
 800f2a6:	f57f af65 	bpl.w	800f174 <_scanf_float+0x60>
 800f2aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f2ae:	e7f4      	b.n	800f29a <_scanf_float+0x186>
 800f2b0:	f1ba 0f00 	cmp.w	sl, #0
 800f2b4:	d10e      	bne.n	800f2d4 <_scanf_float+0x1c0>
 800f2b6:	f1b9 0f00 	cmp.w	r9, #0
 800f2ba:	d10e      	bne.n	800f2da <_scanf_float+0x1c6>
 800f2bc:	6822      	ldr	r2, [r4, #0]
 800f2be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f2c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f2c6:	d108      	bne.n	800f2da <_scanf_float+0x1c6>
 800f2c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f2cc:	6022      	str	r2, [r4, #0]
 800f2ce:	f04f 0a01 	mov.w	sl, #1
 800f2d2:	e7e3      	b.n	800f29c <_scanf_float+0x188>
 800f2d4:	f1ba 0f02 	cmp.w	sl, #2
 800f2d8:	d055      	beq.n	800f386 <_scanf_float+0x272>
 800f2da:	2d01      	cmp	r5, #1
 800f2dc:	d002      	beq.n	800f2e4 <_scanf_float+0x1d0>
 800f2de:	2d04      	cmp	r5, #4
 800f2e0:	f47f af48 	bne.w	800f174 <_scanf_float+0x60>
 800f2e4:	3501      	adds	r5, #1
 800f2e6:	b2ed      	uxtb	r5, r5
 800f2e8:	e7d8      	b.n	800f29c <_scanf_float+0x188>
 800f2ea:	f1ba 0f01 	cmp.w	sl, #1
 800f2ee:	f47f af41 	bne.w	800f174 <_scanf_float+0x60>
 800f2f2:	f04f 0a02 	mov.w	sl, #2
 800f2f6:	e7d1      	b.n	800f29c <_scanf_float+0x188>
 800f2f8:	b97d      	cbnz	r5, 800f31a <_scanf_float+0x206>
 800f2fa:	f1b9 0f00 	cmp.w	r9, #0
 800f2fe:	f47f af3c 	bne.w	800f17a <_scanf_float+0x66>
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f308:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f30c:	f47f af39 	bne.w	800f182 <_scanf_float+0x6e>
 800f310:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f314:	6022      	str	r2, [r4, #0]
 800f316:	2501      	movs	r5, #1
 800f318:	e7c0      	b.n	800f29c <_scanf_float+0x188>
 800f31a:	2d03      	cmp	r5, #3
 800f31c:	d0e2      	beq.n	800f2e4 <_scanf_float+0x1d0>
 800f31e:	2d05      	cmp	r5, #5
 800f320:	e7de      	b.n	800f2e0 <_scanf_float+0x1cc>
 800f322:	2d02      	cmp	r5, #2
 800f324:	f47f af26 	bne.w	800f174 <_scanf_float+0x60>
 800f328:	2503      	movs	r5, #3
 800f32a:	e7b7      	b.n	800f29c <_scanf_float+0x188>
 800f32c:	2d06      	cmp	r5, #6
 800f32e:	f47f af21 	bne.w	800f174 <_scanf_float+0x60>
 800f332:	2507      	movs	r5, #7
 800f334:	e7b2      	b.n	800f29c <_scanf_float+0x188>
 800f336:	6822      	ldr	r2, [r4, #0]
 800f338:	0591      	lsls	r1, r2, #22
 800f33a:	f57f af1b 	bpl.w	800f174 <_scanf_float+0x60>
 800f33e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f342:	6022      	str	r2, [r4, #0]
 800f344:	f8cd 9004 	str.w	r9, [sp, #4]
 800f348:	e7a8      	b.n	800f29c <_scanf_float+0x188>
 800f34a:	6822      	ldr	r2, [r4, #0]
 800f34c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f350:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f354:	d006      	beq.n	800f364 <_scanf_float+0x250>
 800f356:	0550      	lsls	r0, r2, #21
 800f358:	f57f af0c 	bpl.w	800f174 <_scanf_float+0x60>
 800f35c:	f1b9 0f00 	cmp.w	r9, #0
 800f360:	f43f af0f 	beq.w	800f182 <_scanf_float+0x6e>
 800f364:	0591      	lsls	r1, r2, #22
 800f366:	bf58      	it	pl
 800f368:	9901      	ldrpl	r1, [sp, #4]
 800f36a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f36e:	bf58      	it	pl
 800f370:	eba9 0101 	subpl.w	r1, r9, r1
 800f374:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f378:	bf58      	it	pl
 800f37a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f37e:	6022      	str	r2, [r4, #0]
 800f380:	f04f 0900 	mov.w	r9, #0
 800f384:	e78a      	b.n	800f29c <_scanf_float+0x188>
 800f386:	f04f 0a03 	mov.w	sl, #3
 800f38a:	e787      	b.n	800f29c <_scanf_float+0x188>
 800f38c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f390:	4639      	mov	r1, r7
 800f392:	4640      	mov	r0, r8
 800f394:	4798      	blx	r3
 800f396:	2800      	cmp	r0, #0
 800f398:	f43f aedf 	beq.w	800f15a <_scanf_float+0x46>
 800f39c:	e6ea      	b.n	800f174 <_scanf_float+0x60>
 800f39e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f3a6:	463a      	mov	r2, r7
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	4798      	blx	r3
 800f3ac:	6923      	ldr	r3, [r4, #16]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	6123      	str	r3, [r4, #16]
 800f3b2:	e6ec      	b.n	800f18e <_scanf_float+0x7a>
 800f3b4:	1e6b      	subs	r3, r5, #1
 800f3b6:	2b06      	cmp	r3, #6
 800f3b8:	d825      	bhi.n	800f406 <_scanf_float+0x2f2>
 800f3ba:	2d02      	cmp	r5, #2
 800f3bc:	d836      	bhi.n	800f42c <_scanf_float+0x318>
 800f3be:	455e      	cmp	r6, fp
 800f3c0:	f67f aee8 	bls.w	800f194 <_scanf_float+0x80>
 800f3c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f3cc:	463a      	mov	r2, r7
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	4798      	blx	r3
 800f3d2:	6923      	ldr	r3, [r4, #16]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	6123      	str	r3, [r4, #16]
 800f3d8:	e7f1      	b.n	800f3be <_scanf_float+0x2aa>
 800f3da:	9802      	ldr	r0, [sp, #8]
 800f3dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f3e4:	9002      	str	r0, [sp, #8]
 800f3e6:	463a      	mov	r2, r7
 800f3e8:	4640      	mov	r0, r8
 800f3ea:	4798      	blx	r3
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	6123      	str	r3, [r4, #16]
 800f3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3f6:	fa5f fa8a 	uxtb.w	sl, sl
 800f3fa:	f1ba 0f02 	cmp.w	sl, #2
 800f3fe:	d1ec      	bne.n	800f3da <_scanf_float+0x2c6>
 800f400:	3d03      	subs	r5, #3
 800f402:	b2ed      	uxtb	r5, r5
 800f404:	1b76      	subs	r6, r6, r5
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	05da      	lsls	r2, r3, #23
 800f40a:	d52f      	bpl.n	800f46c <_scanf_float+0x358>
 800f40c:	055b      	lsls	r3, r3, #21
 800f40e:	d510      	bpl.n	800f432 <_scanf_float+0x31e>
 800f410:	455e      	cmp	r6, fp
 800f412:	f67f aebf 	bls.w	800f194 <_scanf_float+0x80>
 800f416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f41a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f41e:	463a      	mov	r2, r7
 800f420:	4640      	mov	r0, r8
 800f422:	4798      	blx	r3
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	3b01      	subs	r3, #1
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	e7f1      	b.n	800f410 <_scanf_float+0x2fc>
 800f42c:	46aa      	mov	sl, r5
 800f42e:	9602      	str	r6, [sp, #8]
 800f430:	e7df      	b.n	800f3f2 <_scanf_float+0x2de>
 800f432:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f436:	6923      	ldr	r3, [r4, #16]
 800f438:	2965      	cmp	r1, #101	; 0x65
 800f43a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f43e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f442:	6123      	str	r3, [r4, #16]
 800f444:	d00c      	beq.n	800f460 <_scanf_float+0x34c>
 800f446:	2945      	cmp	r1, #69	; 0x45
 800f448:	d00a      	beq.n	800f460 <_scanf_float+0x34c>
 800f44a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f44e:	463a      	mov	r2, r7
 800f450:	4640      	mov	r0, r8
 800f452:	4798      	blx	r3
 800f454:	6923      	ldr	r3, [r4, #16]
 800f456:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f45a:	3b01      	subs	r3, #1
 800f45c:	1eb5      	subs	r5, r6, #2
 800f45e:	6123      	str	r3, [r4, #16]
 800f460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f464:	463a      	mov	r2, r7
 800f466:	4640      	mov	r0, r8
 800f468:	4798      	blx	r3
 800f46a:	462e      	mov	r6, r5
 800f46c:	6825      	ldr	r5, [r4, #0]
 800f46e:	f015 0510 	ands.w	r5, r5, #16
 800f472:	d159      	bne.n	800f528 <_scanf_float+0x414>
 800f474:	7035      	strb	r5, [r6, #0]
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f480:	d11b      	bne.n	800f4ba <_scanf_float+0x3a6>
 800f482:	9b01      	ldr	r3, [sp, #4]
 800f484:	454b      	cmp	r3, r9
 800f486:	eba3 0209 	sub.w	r2, r3, r9
 800f48a:	d123      	bne.n	800f4d4 <_scanf_float+0x3c0>
 800f48c:	2200      	movs	r2, #0
 800f48e:	4659      	mov	r1, fp
 800f490:	4640      	mov	r0, r8
 800f492:	f000 ff8f 	bl	80103b4 <_strtod_r>
 800f496:	6822      	ldr	r2, [r4, #0]
 800f498:	9b03      	ldr	r3, [sp, #12]
 800f49a:	f012 0f02 	tst.w	r2, #2
 800f49e:	ec57 6b10 	vmov	r6, r7, d0
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	d021      	beq.n	800f4ea <_scanf_float+0x3d6>
 800f4a6:	9903      	ldr	r1, [sp, #12]
 800f4a8:	1d1a      	adds	r2, r3, #4
 800f4aa:	600a      	str	r2, [r1, #0]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	e9c3 6700 	strd	r6, r7, [r3]
 800f4b2:	68e3      	ldr	r3, [r4, #12]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	60e3      	str	r3, [r4, #12]
 800f4b8:	e66d      	b.n	800f196 <_scanf_float+0x82>
 800f4ba:	9b04      	ldr	r3, [sp, #16]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d0e5      	beq.n	800f48c <_scanf_float+0x378>
 800f4c0:	9905      	ldr	r1, [sp, #20]
 800f4c2:	230a      	movs	r3, #10
 800f4c4:	462a      	mov	r2, r5
 800f4c6:	3101      	adds	r1, #1
 800f4c8:	4640      	mov	r0, r8
 800f4ca:	f000 fffb 	bl	80104c4 <_strtol_r>
 800f4ce:	9b04      	ldr	r3, [sp, #16]
 800f4d0:	9e05      	ldr	r6, [sp, #20]
 800f4d2:	1ac2      	subs	r2, r0, r3
 800f4d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f4d8:	429e      	cmp	r6, r3
 800f4da:	bf28      	it	cs
 800f4dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f4e0:	4912      	ldr	r1, [pc, #72]	; (800f52c <_scanf_float+0x418>)
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f000 f8a6 	bl	800f634 <siprintf>
 800f4e8:	e7d0      	b.n	800f48c <_scanf_float+0x378>
 800f4ea:	9903      	ldr	r1, [sp, #12]
 800f4ec:	f012 0f04 	tst.w	r2, #4
 800f4f0:	f103 0204 	add.w	r2, r3, #4
 800f4f4:	600a      	str	r2, [r1, #0]
 800f4f6:	d1d9      	bne.n	800f4ac <_scanf_float+0x398>
 800f4f8:	f8d3 8000 	ldr.w	r8, [r3]
 800f4fc:	ee10 2a10 	vmov	r2, s0
 800f500:	ee10 0a10 	vmov	r0, s0
 800f504:	463b      	mov	r3, r7
 800f506:	4639      	mov	r1, r7
 800f508:	f7f1 fb30 	bl	8000b6c <__aeabi_dcmpun>
 800f50c:	b128      	cbz	r0, 800f51a <_scanf_float+0x406>
 800f50e:	4808      	ldr	r0, [pc, #32]	; (800f530 <_scanf_float+0x41c>)
 800f510:	f000 f88a 	bl	800f628 <nanf>
 800f514:	ed88 0a00 	vstr	s0, [r8]
 800f518:	e7cb      	b.n	800f4b2 <_scanf_float+0x39e>
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f1 fb83 	bl	8000c28 <__aeabi_d2f>
 800f522:	f8c8 0000 	str.w	r0, [r8]
 800f526:	e7c4      	b.n	800f4b2 <_scanf_float+0x39e>
 800f528:	2500      	movs	r5, #0
 800f52a:	e634      	b.n	800f196 <_scanf_float+0x82>
 800f52c:	08014164 	.word	0x08014164
 800f530:	0801454d 	.word	0x0801454d

0800f534 <cleanup_glue>:
 800f534:	b538      	push	{r3, r4, r5, lr}
 800f536:	460c      	mov	r4, r1
 800f538:	6809      	ldr	r1, [r1, #0]
 800f53a:	4605      	mov	r5, r0
 800f53c:	b109      	cbz	r1, 800f542 <cleanup_glue+0xe>
 800f53e:	f7ff fff9 	bl	800f534 <cleanup_glue>
 800f542:	4621      	mov	r1, r4
 800f544:	4628      	mov	r0, r5
 800f546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f54a:	f002 b919 	b.w	8011780 <_free_r>
	...

0800f550 <_reclaim_reent>:
 800f550:	4b2c      	ldr	r3, [pc, #176]	; (800f604 <_reclaim_reent+0xb4>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4283      	cmp	r3, r0
 800f556:	b570      	push	{r4, r5, r6, lr}
 800f558:	4604      	mov	r4, r0
 800f55a:	d051      	beq.n	800f600 <_reclaim_reent+0xb0>
 800f55c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f55e:	b143      	cbz	r3, 800f572 <_reclaim_reent+0x22>
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d14a      	bne.n	800f5fc <_reclaim_reent+0xac>
 800f566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f568:	6819      	ldr	r1, [r3, #0]
 800f56a:	b111      	cbz	r1, 800f572 <_reclaim_reent+0x22>
 800f56c:	4620      	mov	r0, r4
 800f56e:	f002 f907 	bl	8011780 <_free_r>
 800f572:	6961      	ldr	r1, [r4, #20]
 800f574:	b111      	cbz	r1, 800f57c <_reclaim_reent+0x2c>
 800f576:	4620      	mov	r0, r4
 800f578:	f002 f902 	bl	8011780 <_free_r>
 800f57c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f57e:	b111      	cbz	r1, 800f586 <_reclaim_reent+0x36>
 800f580:	4620      	mov	r0, r4
 800f582:	f002 f8fd 	bl	8011780 <_free_r>
 800f586:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f588:	b111      	cbz	r1, 800f590 <_reclaim_reent+0x40>
 800f58a:	4620      	mov	r0, r4
 800f58c:	f002 f8f8 	bl	8011780 <_free_r>
 800f590:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f592:	b111      	cbz	r1, 800f59a <_reclaim_reent+0x4a>
 800f594:	4620      	mov	r0, r4
 800f596:	f002 f8f3 	bl	8011780 <_free_r>
 800f59a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f59c:	b111      	cbz	r1, 800f5a4 <_reclaim_reent+0x54>
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f002 f8ee 	bl	8011780 <_free_r>
 800f5a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f5a6:	b111      	cbz	r1, 800f5ae <_reclaim_reent+0x5e>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f002 f8e9 	bl	8011780 <_free_r>
 800f5ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f5b0:	b111      	cbz	r1, 800f5b8 <_reclaim_reent+0x68>
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f002 f8e4 	bl	8011780 <_free_r>
 800f5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5ba:	b111      	cbz	r1, 800f5c2 <_reclaim_reent+0x72>
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f002 f8df 	bl	8011780 <_free_r>
 800f5c2:	69a3      	ldr	r3, [r4, #24]
 800f5c4:	b1e3      	cbz	r3, 800f600 <_reclaim_reent+0xb0>
 800f5c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	4798      	blx	r3
 800f5cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f5ce:	b1b9      	cbz	r1, 800f600 <_reclaim_reent+0xb0>
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5d6:	f7ff bfad 	b.w	800f534 <cleanup_glue>
 800f5da:	5949      	ldr	r1, [r1, r5]
 800f5dc:	b941      	cbnz	r1, 800f5f0 <_reclaim_reent+0xa0>
 800f5de:	3504      	adds	r5, #4
 800f5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5e2:	2d80      	cmp	r5, #128	; 0x80
 800f5e4:	68d9      	ldr	r1, [r3, #12]
 800f5e6:	d1f8      	bne.n	800f5da <_reclaim_reent+0x8a>
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	f002 f8c9 	bl	8011780 <_free_r>
 800f5ee:	e7ba      	b.n	800f566 <_reclaim_reent+0x16>
 800f5f0:	680e      	ldr	r6, [r1, #0]
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f002 f8c4 	bl	8011780 <_free_r>
 800f5f8:	4631      	mov	r1, r6
 800f5fa:	e7ef      	b.n	800f5dc <_reclaim_reent+0x8c>
 800f5fc:	2500      	movs	r5, #0
 800f5fe:	e7ef      	b.n	800f5e0 <_reclaim_reent+0x90>
 800f600:	bd70      	pop	{r4, r5, r6, pc}
 800f602:	bf00      	nop
 800f604:	20000114 	.word	0x20000114

0800f608 <_sbrk_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d06      	ldr	r5, [pc, #24]	; (800f624 <_sbrk_r+0x1c>)
 800f60c:	2300      	movs	r3, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	602b      	str	r3, [r5, #0]
 800f614:	f7f3 fe62 	bl	80032dc <_sbrk>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	d102      	bne.n	800f622 <_sbrk_r+0x1a>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	b103      	cbz	r3, 800f622 <_sbrk_r+0x1a>
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	bd38      	pop	{r3, r4, r5, pc}
 800f624:	2000f650 	.word	0x2000f650

0800f628 <nanf>:
 800f628:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f630 <nanf+0x8>
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	7fc00000 	.word	0x7fc00000

0800f634 <siprintf>:
 800f634:	b40e      	push	{r1, r2, r3}
 800f636:	b500      	push	{lr}
 800f638:	b09c      	sub	sp, #112	; 0x70
 800f63a:	ab1d      	add	r3, sp, #116	; 0x74
 800f63c:	9002      	str	r0, [sp, #8]
 800f63e:	9006      	str	r0, [sp, #24]
 800f640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f644:	4809      	ldr	r0, [pc, #36]	; (800f66c <siprintf+0x38>)
 800f646:	9107      	str	r1, [sp, #28]
 800f648:	9104      	str	r1, [sp, #16]
 800f64a:	4909      	ldr	r1, [pc, #36]	; (800f670 <siprintf+0x3c>)
 800f64c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f650:	9105      	str	r1, [sp, #20]
 800f652:	6800      	ldr	r0, [r0, #0]
 800f654:	9301      	str	r3, [sp, #4]
 800f656:	a902      	add	r1, sp, #8
 800f658:	f002 f93a 	bl	80118d0 <_svfiprintf_r>
 800f65c:	9b02      	ldr	r3, [sp, #8]
 800f65e:	2200      	movs	r2, #0
 800f660:	701a      	strb	r2, [r3, #0]
 800f662:	b01c      	add	sp, #112	; 0x70
 800f664:	f85d eb04 	ldr.w	lr, [sp], #4
 800f668:	b003      	add	sp, #12
 800f66a:	4770      	bx	lr
 800f66c:	20000114 	.word	0x20000114
 800f670:	ffff0208 	.word	0xffff0208

0800f674 <siscanf>:
 800f674:	b40e      	push	{r1, r2, r3}
 800f676:	b510      	push	{r4, lr}
 800f678:	b09f      	sub	sp, #124	; 0x7c
 800f67a:	ac21      	add	r4, sp, #132	; 0x84
 800f67c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f680:	f854 2b04 	ldr.w	r2, [r4], #4
 800f684:	9201      	str	r2, [sp, #4]
 800f686:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f68a:	9004      	str	r0, [sp, #16]
 800f68c:	9008      	str	r0, [sp, #32]
 800f68e:	f7f0 fdbf 	bl	8000210 <strlen>
 800f692:	4b0c      	ldr	r3, [pc, #48]	; (800f6c4 <siscanf+0x50>)
 800f694:	9005      	str	r0, [sp, #20]
 800f696:	9009      	str	r0, [sp, #36]	; 0x24
 800f698:	930d      	str	r3, [sp, #52]	; 0x34
 800f69a:	480b      	ldr	r0, [pc, #44]	; (800f6c8 <siscanf+0x54>)
 800f69c:	9a01      	ldr	r2, [sp, #4]
 800f69e:	6800      	ldr	r0, [r0, #0]
 800f6a0:	9403      	str	r4, [sp, #12]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9311      	str	r3, [sp, #68]	; 0x44
 800f6a6:	9316      	str	r3, [sp, #88]	; 0x58
 800f6a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f6b0:	a904      	add	r1, sp, #16
 800f6b2:	4623      	mov	r3, r4
 800f6b4:	f002 fa66 	bl	8011b84 <__ssvfiscanf_r>
 800f6b8:	b01f      	add	sp, #124	; 0x7c
 800f6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6be:	b003      	add	sp, #12
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	0800f6ef 	.word	0x0800f6ef
 800f6c8:	20000114 	.word	0x20000114

0800f6cc <__sread>:
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d4:	f002 feb4 	bl	8012440 <_read_r>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	bfab      	itete	ge
 800f6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6de:	89a3      	ldrhlt	r3, [r4, #12]
 800f6e0:	181b      	addge	r3, r3, r0
 800f6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6e6:	bfac      	ite	ge
 800f6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ea:	81a3      	strhlt	r3, [r4, #12]
 800f6ec:	bd10      	pop	{r4, pc}

0800f6ee <__seofread>:
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	4770      	bx	lr

0800f6f2 <__swrite>:
 800f6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f6:	461f      	mov	r7, r3
 800f6f8:	898b      	ldrh	r3, [r1, #12]
 800f6fa:	05db      	lsls	r3, r3, #23
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	460c      	mov	r4, r1
 800f700:	4616      	mov	r6, r2
 800f702:	d505      	bpl.n	800f710 <__swrite+0x1e>
 800f704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f708:	2302      	movs	r3, #2
 800f70a:	2200      	movs	r2, #0
 800f70c:	f001 fb30 	bl	8010d70 <_lseek_r>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	4632      	mov	r2, r6
 800f71e:	463b      	mov	r3, r7
 800f720:	4628      	mov	r0, r5
 800f722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f726:	f000 becf 	b.w	80104c8 <_write_r>

0800f72a <__sseek>:
 800f72a:	b510      	push	{r4, lr}
 800f72c:	460c      	mov	r4, r1
 800f72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f732:	f001 fb1d 	bl	8010d70 <_lseek_r>
 800f736:	1c43      	adds	r3, r0, #1
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	bf15      	itete	ne
 800f73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f746:	81a3      	strheq	r3, [r4, #12]
 800f748:	bf18      	it	ne
 800f74a:	81a3      	strhne	r3, [r4, #12]
 800f74c:	bd10      	pop	{r4, pc}

0800f74e <__sclose>:
 800f74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f752:	f000 becb 	b.w	80104ec <_close_r>

0800f756 <strchr>:
 800f756:	b2c9      	uxtb	r1, r1
 800f758:	4603      	mov	r3, r0
 800f75a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f75e:	b11a      	cbz	r2, 800f768 <strchr+0x12>
 800f760:	428a      	cmp	r2, r1
 800f762:	d1f9      	bne.n	800f758 <strchr+0x2>
 800f764:	4618      	mov	r0, r3
 800f766:	4770      	bx	lr
 800f768:	2900      	cmp	r1, #0
 800f76a:	bf18      	it	ne
 800f76c:	2300      	movne	r3, #0
 800f76e:	e7f9      	b.n	800f764 <strchr+0xe>

0800f770 <sulp>:
 800f770:	b570      	push	{r4, r5, r6, lr}
 800f772:	4604      	mov	r4, r0
 800f774:	460d      	mov	r5, r1
 800f776:	ec45 4b10 	vmov	d0, r4, r5
 800f77a:	4616      	mov	r6, r2
 800f77c:	f001 fe9a 	bl	80114b4 <__ulp>
 800f780:	ec51 0b10 	vmov	r0, r1, d0
 800f784:	b17e      	cbz	r6, 800f7a6 <sulp+0x36>
 800f786:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f78a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f78e:	2b00      	cmp	r3, #0
 800f790:	dd09      	ble.n	800f7a6 <sulp+0x36>
 800f792:	051b      	lsls	r3, r3, #20
 800f794:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f798:	2400      	movs	r4, #0
 800f79a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f79e:	4622      	mov	r2, r4
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	f7f0 ff49 	bl	8000638 <__aeabi_dmul>
 800f7a6:	bd70      	pop	{r4, r5, r6, pc}

0800f7a8 <_strtod_l>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	ed2d 8b02 	vpush	{d8}
 800f7b0:	b09d      	sub	sp, #116	; 0x74
 800f7b2:	461f      	mov	r7, r3
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	9318      	str	r3, [sp, #96]	; 0x60
 800f7b8:	4ba2      	ldr	r3, [pc, #648]	; (800fa44 <_strtod_l+0x29c>)
 800f7ba:	9213      	str	r2, [sp, #76]	; 0x4c
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	9305      	str	r3, [sp, #20]
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	4688      	mov	r8, r1
 800f7c6:	f7f0 fd23 	bl	8000210 <strlen>
 800f7ca:	f04f 0a00 	mov.w	sl, #0
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	f04f 0b00 	mov.w	fp, #0
 800f7d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f7d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7da:	781a      	ldrb	r2, [r3, #0]
 800f7dc:	2a2b      	cmp	r2, #43	; 0x2b
 800f7de:	d04e      	beq.n	800f87e <_strtod_l+0xd6>
 800f7e0:	d83b      	bhi.n	800f85a <_strtod_l+0xb2>
 800f7e2:	2a0d      	cmp	r2, #13
 800f7e4:	d834      	bhi.n	800f850 <_strtod_l+0xa8>
 800f7e6:	2a08      	cmp	r2, #8
 800f7e8:	d834      	bhi.n	800f854 <_strtod_l+0xac>
 800f7ea:	2a00      	cmp	r2, #0
 800f7ec:	d03e      	beq.n	800f86c <_strtod_l+0xc4>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	930a      	str	r3, [sp, #40]	; 0x28
 800f7f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f7f4:	7833      	ldrb	r3, [r6, #0]
 800f7f6:	2b30      	cmp	r3, #48	; 0x30
 800f7f8:	f040 80b0 	bne.w	800f95c <_strtod_l+0x1b4>
 800f7fc:	7873      	ldrb	r3, [r6, #1]
 800f7fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f802:	2b58      	cmp	r3, #88	; 0x58
 800f804:	d168      	bne.n	800f8d8 <_strtod_l+0x130>
 800f806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f808:	9301      	str	r3, [sp, #4]
 800f80a:	ab18      	add	r3, sp, #96	; 0x60
 800f80c:	9702      	str	r7, [sp, #8]
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	4a8d      	ldr	r2, [pc, #564]	; (800fa48 <_strtod_l+0x2a0>)
 800f812:	ab19      	add	r3, sp, #100	; 0x64
 800f814:	a917      	add	r1, sp, #92	; 0x5c
 800f816:	4620      	mov	r0, r4
 800f818:	f000 ffa2 	bl	8010760 <__gethex>
 800f81c:	f010 0707 	ands.w	r7, r0, #7
 800f820:	4605      	mov	r5, r0
 800f822:	d005      	beq.n	800f830 <_strtod_l+0x88>
 800f824:	2f06      	cmp	r7, #6
 800f826:	d12c      	bne.n	800f882 <_strtod_l+0xda>
 800f828:	3601      	adds	r6, #1
 800f82a:	2300      	movs	r3, #0
 800f82c:	9617      	str	r6, [sp, #92]	; 0x5c
 800f82e:	930a      	str	r3, [sp, #40]	; 0x28
 800f830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f832:	2b00      	cmp	r3, #0
 800f834:	f040 8590 	bne.w	8010358 <_strtod_l+0xbb0>
 800f838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f83a:	b1eb      	cbz	r3, 800f878 <_strtod_l+0xd0>
 800f83c:	4652      	mov	r2, sl
 800f83e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f842:	ec43 2b10 	vmov	d0, r2, r3
 800f846:	b01d      	add	sp, #116	; 0x74
 800f848:	ecbd 8b02 	vpop	{d8}
 800f84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f850:	2a20      	cmp	r2, #32
 800f852:	d1cc      	bne.n	800f7ee <_strtod_l+0x46>
 800f854:	3301      	adds	r3, #1
 800f856:	9317      	str	r3, [sp, #92]	; 0x5c
 800f858:	e7be      	b.n	800f7d8 <_strtod_l+0x30>
 800f85a:	2a2d      	cmp	r2, #45	; 0x2d
 800f85c:	d1c7      	bne.n	800f7ee <_strtod_l+0x46>
 800f85e:	2201      	movs	r2, #1
 800f860:	920a      	str	r2, [sp, #40]	; 0x28
 800f862:	1c5a      	adds	r2, r3, #1
 800f864:	9217      	str	r2, [sp, #92]	; 0x5c
 800f866:	785b      	ldrb	r3, [r3, #1]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1c2      	bne.n	800f7f2 <_strtod_l+0x4a>
 800f86c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f86e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f872:	2b00      	cmp	r3, #0
 800f874:	f040 856e 	bne.w	8010354 <_strtod_l+0xbac>
 800f878:	4652      	mov	r2, sl
 800f87a:	465b      	mov	r3, fp
 800f87c:	e7e1      	b.n	800f842 <_strtod_l+0x9a>
 800f87e:	2200      	movs	r2, #0
 800f880:	e7ee      	b.n	800f860 <_strtod_l+0xb8>
 800f882:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f884:	b13a      	cbz	r2, 800f896 <_strtod_l+0xee>
 800f886:	2135      	movs	r1, #53	; 0x35
 800f888:	a81a      	add	r0, sp, #104	; 0x68
 800f88a:	f001 ff1e 	bl	80116ca <__copybits>
 800f88e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f890:	4620      	mov	r0, r4
 800f892:	f001 fadd 	bl	8010e50 <_Bfree>
 800f896:	3f01      	subs	r7, #1
 800f898:	2f04      	cmp	r7, #4
 800f89a:	d806      	bhi.n	800f8aa <_strtod_l+0x102>
 800f89c:	e8df f007 	tbb	[pc, r7]
 800f8a0:	1714030a 	.word	0x1714030a
 800f8a4:	0a          	.byte	0x0a
 800f8a5:	00          	.byte	0x00
 800f8a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f8aa:	0728      	lsls	r0, r5, #28
 800f8ac:	d5c0      	bpl.n	800f830 <_strtod_l+0x88>
 800f8ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f8b2:	e7bd      	b.n	800f830 <_strtod_l+0x88>
 800f8b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f8b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f8ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f8be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f8c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f8c6:	e7f0      	b.n	800f8aa <_strtod_l+0x102>
 800f8c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fa4c <_strtod_l+0x2a4>
 800f8cc:	e7ed      	b.n	800f8aa <_strtod_l+0x102>
 800f8ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f8d2:	f04f 3aff 	mov.w	sl, #4294967295
 800f8d6:	e7e8      	b.n	800f8aa <_strtod_l+0x102>
 800f8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8da:	1c5a      	adds	r2, r3, #1
 800f8dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800f8de:	785b      	ldrb	r3, [r3, #1]
 800f8e0:	2b30      	cmp	r3, #48	; 0x30
 800f8e2:	d0f9      	beq.n	800f8d8 <_strtod_l+0x130>
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d0a3      	beq.n	800f830 <_strtod_l+0x88>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	f04f 0900 	mov.w	r9, #0
 800f8ee:	9304      	str	r3, [sp, #16]
 800f8f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8f2:	9308      	str	r3, [sp, #32]
 800f8f4:	f8cd 901c 	str.w	r9, [sp, #28]
 800f8f8:	464f      	mov	r7, r9
 800f8fa:	220a      	movs	r2, #10
 800f8fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f8fe:	7806      	ldrb	r6, [r0, #0]
 800f900:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f904:	b2d9      	uxtb	r1, r3
 800f906:	2909      	cmp	r1, #9
 800f908:	d92a      	bls.n	800f960 <_strtod_l+0x1b8>
 800f90a:	9905      	ldr	r1, [sp, #20]
 800f90c:	462a      	mov	r2, r5
 800f90e:	f002 fdeb 	bl	80124e8 <strncmp>
 800f912:	b398      	cbz	r0, 800f97c <_strtod_l+0x1d4>
 800f914:	2000      	movs	r0, #0
 800f916:	4632      	mov	r2, r6
 800f918:	463d      	mov	r5, r7
 800f91a:	9005      	str	r0, [sp, #20]
 800f91c:	4603      	mov	r3, r0
 800f91e:	2a65      	cmp	r2, #101	; 0x65
 800f920:	d001      	beq.n	800f926 <_strtod_l+0x17e>
 800f922:	2a45      	cmp	r2, #69	; 0x45
 800f924:	d118      	bne.n	800f958 <_strtod_l+0x1b0>
 800f926:	b91d      	cbnz	r5, 800f930 <_strtod_l+0x188>
 800f928:	9a04      	ldr	r2, [sp, #16]
 800f92a:	4302      	orrs	r2, r0
 800f92c:	d09e      	beq.n	800f86c <_strtod_l+0xc4>
 800f92e:	2500      	movs	r5, #0
 800f930:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f934:	f108 0201 	add.w	r2, r8, #1
 800f938:	9217      	str	r2, [sp, #92]	; 0x5c
 800f93a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f93e:	2a2b      	cmp	r2, #43	; 0x2b
 800f940:	d075      	beq.n	800fa2e <_strtod_l+0x286>
 800f942:	2a2d      	cmp	r2, #45	; 0x2d
 800f944:	d07b      	beq.n	800fa3e <_strtod_l+0x296>
 800f946:	f04f 0c00 	mov.w	ip, #0
 800f94a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f94e:	2909      	cmp	r1, #9
 800f950:	f240 8082 	bls.w	800fa58 <_strtod_l+0x2b0>
 800f954:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f958:	2600      	movs	r6, #0
 800f95a:	e09d      	b.n	800fa98 <_strtod_l+0x2f0>
 800f95c:	2300      	movs	r3, #0
 800f95e:	e7c4      	b.n	800f8ea <_strtod_l+0x142>
 800f960:	2f08      	cmp	r7, #8
 800f962:	bfd8      	it	le
 800f964:	9907      	ldrle	r1, [sp, #28]
 800f966:	f100 0001 	add.w	r0, r0, #1
 800f96a:	bfda      	itte	le
 800f96c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f970:	9307      	strle	r3, [sp, #28]
 800f972:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f976:	3701      	adds	r7, #1
 800f978:	9017      	str	r0, [sp, #92]	; 0x5c
 800f97a:	e7bf      	b.n	800f8fc <_strtod_l+0x154>
 800f97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f97e:	195a      	adds	r2, r3, r5
 800f980:	9217      	str	r2, [sp, #92]	; 0x5c
 800f982:	5d5a      	ldrb	r2, [r3, r5]
 800f984:	2f00      	cmp	r7, #0
 800f986:	d037      	beq.n	800f9f8 <_strtod_l+0x250>
 800f988:	9005      	str	r0, [sp, #20]
 800f98a:	463d      	mov	r5, r7
 800f98c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f990:	2b09      	cmp	r3, #9
 800f992:	d912      	bls.n	800f9ba <_strtod_l+0x212>
 800f994:	2301      	movs	r3, #1
 800f996:	e7c2      	b.n	800f91e <_strtod_l+0x176>
 800f998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f99e:	785a      	ldrb	r2, [r3, #1]
 800f9a0:	3001      	adds	r0, #1
 800f9a2:	2a30      	cmp	r2, #48	; 0x30
 800f9a4:	d0f8      	beq.n	800f998 <_strtod_l+0x1f0>
 800f9a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f9aa:	2b08      	cmp	r3, #8
 800f9ac:	f200 84d9 	bhi.w	8010362 <_strtod_l+0xbba>
 800f9b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9b2:	9005      	str	r0, [sp, #20]
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	9308      	str	r3, [sp, #32]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	3a30      	subs	r2, #48	; 0x30
 800f9bc:	f100 0301 	add.w	r3, r0, #1
 800f9c0:	d014      	beq.n	800f9ec <_strtod_l+0x244>
 800f9c2:	9905      	ldr	r1, [sp, #20]
 800f9c4:	4419      	add	r1, r3
 800f9c6:	9105      	str	r1, [sp, #20]
 800f9c8:	462b      	mov	r3, r5
 800f9ca:	eb00 0e05 	add.w	lr, r0, r5
 800f9ce:	210a      	movs	r1, #10
 800f9d0:	4573      	cmp	r3, lr
 800f9d2:	d113      	bne.n	800f9fc <_strtod_l+0x254>
 800f9d4:	182b      	adds	r3, r5, r0
 800f9d6:	2b08      	cmp	r3, #8
 800f9d8:	f105 0501 	add.w	r5, r5, #1
 800f9dc:	4405      	add	r5, r0
 800f9de:	dc1c      	bgt.n	800fa1a <_strtod_l+0x272>
 800f9e0:	9907      	ldr	r1, [sp, #28]
 800f9e2:	230a      	movs	r3, #10
 800f9e4:	fb03 2301 	mla	r3, r3, r1, r2
 800f9e8:	9307      	str	r3, [sp, #28]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f9ee:	1c51      	adds	r1, r2, #1
 800f9f0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f9f2:	7852      	ldrb	r2, [r2, #1]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	e7c9      	b.n	800f98c <_strtod_l+0x1e4>
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	e7d2      	b.n	800f9a2 <_strtod_l+0x1fa>
 800f9fc:	2b08      	cmp	r3, #8
 800f9fe:	dc04      	bgt.n	800fa0a <_strtod_l+0x262>
 800fa00:	9e07      	ldr	r6, [sp, #28]
 800fa02:	434e      	muls	r6, r1
 800fa04:	9607      	str	r6, [sp, #28]
 800fa06:	3301      	adds	r3, #1
 800fa08:	e7e2      	b.n	800f9d0 <_strtod_l+0x228>
 800fa0a:	f103 0c01 	add.w	ip, r3, #1
 800fa0e:	f1bc 0f10 	cmp.w	ip, #16
 800fa12:	bfd8      	it	le
 800fa14:	fb01 f909 	mulle.w	r9, r1, r9
 800fa18:	e7f5      	b.n	800fa06 <_strtod_l+0x25e>
 800fa1a:	2d10      	cmp	r5, #16
 800fa1c:	bfdc      	itt	le
 800fa1e:	230a      	movle	r3, #10
 800fa20:	fb03 2909 	mlale	r9, r3, r9, r2
 800fa24:	e7e1      	b.n	800f9ea <_strtod_l+0x242>
 800fa26:	2300      	movs	r3, #0
 800fa28:	9305      	str	r3, [sp, #20]
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e77c      	b.n	800f928 <_strtod_l+0x180>
 800fa2e:	f04f 0c00 	mov.w	ip, #0
 800fa32:	f108 0202 	add.w	r2, r8, #2
 800fa36:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa38:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fa3c:	e785      	b.n	800f94a <_strtod_l+0x1a2>
 800fa3e:	f04f 0c01 	mov.w	ip, #1
 800fa42:	e7f6      	b.n	800fa32 <_strtod_l+0x28a>
 800fa44:	08014340 	.word	0x08014340
 800fa48:	08014178 	.word	0x08014178
 800fa4c:	7ff00000 	.word	0x7ff00000
 800fa50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa52:	1c51      	adds	r1, r2, #1
 800fa54:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa56:	7852      	ldrb	r2, [r2, #1]
 800fa58:	2a30      	cmp	r2, #48	; 0x30
 800fa5a:	d0f9      	beq.n	800fa50 <_strtod_l+0x2a8>
 800fa5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fa60:	2908      	cmp	r1, #8
 800fa62:	f63f af79 	bhi.w	800f958 <_strtod_l+0x1b0>
 800fa66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fa6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa6c:	9206      	str	r2, [sp, #24]
 800fa6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa70:	1c51      	adds	r1, r2, #1
 800fa72:	9117      	str	r1, [sp, #92]	; 0x5c
 800fa74:	7852      	ldrb	r2, [r2, #1]
 800fa76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fa7a:	2e09      	cmp	r6, #9
 800fa7c:	d937      	bls.n	800faee <_strtod_l+0x346>
 800fa7e:	9e06      	ldr	r6, [sp, #24]
 800fa80:	1b89      	subs	r1, r1, r6
 800fa82:	2908      	cmp	r1, #8
 800fa84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fa88:	dc02      	bgt.n	800fa90 <_strtod_l+0x2e8>
 800fa8a:	4576      	cmp	r6, lr
 800fa8c:	bfa8      	it	ge
 800fa8e:	4676      	movge	r6, lr
 800fa90:	f1bc 0f00 	cmp.w	ip, #0
 800fa94:	d000      	beq.n	800fa98 <_strtod_l+0x2f0>
 800fa96:	4276      	negs	r6, r6
 800fa98:	2d00      	cmp	r5, #0
 800fa9a:	d14d      	bne.n	800fb38 <_strtod_l+0x390>
 800fa9c:	9904      	ldr	r1, [sp, #16]
 800fa9e:	4301      	orrs	r1, r0
 800faa0:	f47f aec6 	bne.w	800f830 <_strtod_l+0x88>
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f47f aee1 	bne.w	800f86c <_strtod_l+0xc4>
 800faaa:	2a69      	cmp	r2, #105	; 0x69
 800faac:	d027      	beq.n	800fafe <_strtod_l+0x356>
 800faae:	dc24      	bgt.n	800fafa <_strtod_l+0x352>
 800fab0:	2a49      	cmp	r2, #73	; 0x49
 800fab2:	d024      	beq.n	800fafe <_strtod_l+0x356>
 800fab4:	2a4e      	cmp	r2, #78	; 0x4e
 800fab6:	f47f aed9 	bne.w	800f86c <_strtod_l+0xc4>
 800faba:	499f      	ldr	r1, [pc, #636]	; (800fd38 <_strtod_l+0x590>)
 800fabc:	a817      	add	r0, sp, #92	; 0x5c
 800fabe:	f001 f8a7 	bl	8010c10 <__match>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	f43f aed2 	beq.w	800f86c <_strtod_l+0xc4>
 800fac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2b28      	cmp	r3, #40	; 0x28
 800face:	d12d      	bne.n	800fb2c <_strtod_l+0x384>
 800fad0:	499a      	ldr	r1, [pc, #616]	; (800fd3c <_strtod_l+0x594>)
 800fad2:	aa1a      	add	r2, sp, #104	; 0x68
 800fad4:	a817      	add	r0, sp, #92	; 0x5c
 800fad6:	f001 f8af 	bl	8010c38 <__hexnan>
 800fada:	2805      	cmp	r0, #5
 800fadc:	d126      	bne.n	800fb2c <_strtod_l+0x384>
 800fade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fae0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fae4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fae8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800faec:	e6a0      	b.n	800f830 <_strtod_l+0x88>
 800faee:	210a      	movs	r1, #10
 800faf0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800faf4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800faf8:	e7b9      	b.n	800fa6e <_strtod_l+0x2c6>
 800fafa:	2a6e      	cmp	r2, #110	; 0x6e
 800fafc:	e7db      	b.n	800fab6 <_strtod_l+0x30e>
 800fafe:	4990      	ldr	r1, [pc, #576]	; (800fd40 <_strtod_l+0x598>)
 800fb00:	a817      	add	r0, sp, #92	; 0x5c
 800fb02:	f001 f885 	bl	8010c10 <__match>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	f43f aeb0 	beq.w	800f86c <_strtod_l+0xc4>
 800fb0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb0e:	498d      	ldr	r1, [pc, #564]	; (800fd44 <_strtod_l+0x59c>)
 800fb10:	3b01      	subs	r3, #1
 800fb12:	a817      	add	r0, sp, #92	; 0x5c
 800fb14:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb16:	f001 f87b 	bl	8010c10 <__match>
 800fb1a:	b910      	cbnz	r0, 800fb22 <_strtod_l+0x37a>
 800fb1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb1e:	3301      	adds	r3, #1
 800fb20:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb22:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fd54 <_strtod_l+0x5ac>
 800fb26:	f04f 0a00 	mov.w	sl, #0
 800fb2a:	e681      	b.n	800f830 <_strtod_l+0x88>
 800fb2c:	4886      	ldr	r0, [pc, #536]	; (800fd48 <_strtod_l+0x5a0>)
 800fb2e:	f002 fc9b 	bl	8012468 <nan>
 800fb32:	ec5b ab10 	vmov	sl, fp, d0
 800fb36:	e67b      	b.n	800f830 <_strtod_l+0x88>
 800fb38:	9b05      	ldr	r3, [sp, #20]
 800fb3a:	9807      	ldr	r0, [sp, #28]
 800fb3c:	1af3      	subs	r3, r6, r3
 800fb3e:	2f00      	cmp	r7, #0
 800fb40:	bf08      	it	eq
 800fb42:	462f      	moveq	r7, r5
 800fb44:	2d10      	cmp	r5, #16
 800fb46:	9306      	str	r3, [sp, #24]
 800fb48:	46a8      	mov	r8, r5
 800fb4a:	bfa8      	it	ge
 800fb4c:	f04f 0810 	movge.w	r8, #16
 800fb50:	f7f0 fcf8 	bl	8000544 <__aeabi_ui2d>
 800fb54:	2d09      	cmp	r5, #9
 800fb56:	4682      	mov	sl, r0
 800fb58:	468b      	mov	fp, r1
 800fb5a:	dd13      	ble.n	800fb84 <_strtod_l+0x3dc>
 800fb5c:	4b7b      	ldr	r3, [pc, #492]	; (800fd4c <_strtod_l+0x5a4>)
 800fb5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fb62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fb66:	f7f0 fd67 	bl	8000638 <__aeabi_dmul>
 800fb6a:	4682      	mov	sl, r0
 800fb6c:	4648      	mov	r0, r9
 800fb6e:	468b      	mov	fp, r1
 800fb70:	f7f0 fce8 	bl	8000544 <__aeabi_ui2d>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4650      	mov	r0, sl
 800fb7a:	4659      	mov	r1, fp
 800fb7c:	f7f0 fba6 	bl	80002cc <__adddf3>
 800fb80:	4682      	mov	sl, r0
 800fb82:	468b      	mov	fp, r1
 800fb84:	2d0f      	cmp	r5, #15
 800fb86:	dc38      	bgt.n	800fbfa <_strtod_l+0x452>
 800fb88:	9b06      	ldr	r3, [sp, #24]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f43f ae50 	beq.w	800f830 <_strtod_l+0x88>
 800fb90:	dd24      	ble.n	800fbdc <_strtod_l+0x434>
 800fb92:	2b16      	cmp	r3, #22
 800fb94:	dc0b      	bgt.n	800fbae <_strtod_l+0x406>
 800fb96:	496d      	ldr	r1, [pc, #436]	; (800fd4c <_strtod_l+0x5a4>)
 800fb98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fb9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fba0:	4652      	mov	r2, sl
 800fba2:	465b      	mov	r3, fp
 800fba4:	f7f0 fd48 	bl	8000638 <__aeabi_dmul>
 800fba8:	4682      	mov	sl, r0
 800fbaa:	468b      	mov	fp, r1
 800fbac:	e640      	b.n	800f830 <_strtod_l+0x88>
 800fbae:	9a06      	ldr	r2, [sp, #24]
 800fbb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	db20      	blt.n	800fbfa <_strtod_l+0x452>
 800fbb8:	4c64      	ldr	r4, [pc, #400]	; (800fd4c <_strtod_l+0x5a4>)
 800fbba:	f1c5 050f 	rsb	r5, r5, #15
 800fbbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fbc2:	4652      	mov	r2, sl
 800fbc4:	465b      	mov	r3, fp
 800fbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbca:	f7f0 fd35 	bl	8000638 <__aeabi_dmul>
 800fbce:	9b06      	ldr	r3, [sp, #24]
 800fbd0:	1b5d      	subs	r5, r3, r5
 800fbd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fbd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fbda:	e7e3      	b.n	800fba4 <_strtod_l+0x3fc>
 800fbdc:	9b06      	ldr	r3, [sp, #24]
 800fbde:	3316      	adds	r3, #22
 800fbe0:	db0b      	blt.n	800fbfa <_strtod_l+0x452>
 800fbe2:	9b05      	ldr	r3, [sp, #20]
 800fbe4:	1b9e      	subs	r6, r3, r6
 800fbe6:	4b59      	ldr	r3, [pc, #356]	; (800fd4c <_strtod_l+0x5a4>)
 800fbe8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fbec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fbf0:	4650      	mov	r0, sl
 800fbf2:	4659      	mov	r1, fp
 800fbf4:	f7f0 fe4a 	bl	800088c <__aeabi_ddiv>
 800fbf8:	e7d6      	b.n	800fba8 <_strtod_l+0x400>
 800fbfa:	9b06      	ldr	r3, [sp, #24]
 800fbfc:	eba5 0808 	sub.w	r8, r5, r8
 800fc00:	4498      	add	r8, r3
 800fc02:	f1b8 0f00 	cmp.w	r8, #0
 800fc06:	dd74      	ble.n	800fcf2 <_strtod_l+0x54a>
 800fc08:	f018 030f 	ands.w	r3, r8, #15
 800fc0c:	d00a      	beq.n	800fc24 <_strtod_l+0x47c>
 800fc0e:	494f      	ldr	r1, [pc, #316]	; (800fd4c <_strtod_l+0x5a4>)
 800fc10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc14:	4652      	mov	r2, sl
 800fc16:	465b      	mov	r3, fp
 800fc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc1c:	f7f0 fd0c 	bl	8000638 <__aeabi_dmul>
 800fc20:	4682      	mov	sl, r0
 800fc22:	468b      	mov	fp, r1
 800fc24:	f038 080f 	bics.w	r8, r8, #15
 800fc28:	d04f      	beq.n	800fcca <_strtod_l+0x522>
 800fc2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fc2e:	dd22      	ble.n	800fc76 <_strtod_l+0x4ce>
 800fc30:	2500      	movs	r5, #0
 800fc32:	462e      	mov	r6, r5
 800fc34:	9507      	str	r5, [sp, #28]
 800fc36:	9505      	str	r5, [sp, #20]
 800fc38:	2322      	movs	r3, #34	; 0x22
 800fc3a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fd54 <_strtod_l+0x5ac>
 800fc3e:	6023      	str	r3, [r4, #0]
 800fc40:	f04f 0a00 	mov.w	sl, #0
 800fc44:	9b07      	ldr	r3, [sp, #28]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f43f adf2 	beq.w	800f830 <_strtod_l+0x88>
 800fc4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fc4e:	4620      	mov	r0, r4
 800fc50:	f001 f8fe 	bl	8010e50 <_Bfree>
 800fc54:	9905      	ldr	r1, [sp, #20]
 800fc56:	4620      	mov	r0, r4
 800fc58:	f001 f8fa 	bl	8010e50 <_Bfree>
 800fc5c:	4631      	mov	r1, r6
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f001 f8f6 	bl	8010e50 <_Bfree>
 800fc64:	9907      	ldr	r1, [sp, #28]
 800fc66:	4620      	mov	r0, r4
 800fc68:	f001 f8f2 	bl	8010e50 <_Bfree>
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4620      	mov	r0, r4
 800fc70:	f001 f8ee 	bl	8010e50 <_Bfree>
 800fc74:	e5dc      	b.n	800f830 <_strtod_l+0x88>
 800fc76:	4b36      	ldr	r3, [pc, #216]	; (800fd50 <_strtod_l+0x5a8>)
 800fc78:	9304      	str	r3, [sp, #16]
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fc80:	4650      	mov	r0, sl
 800fc82:	4659      	mov	r1, fp
 800fc84:	4699      	mov	r9, r3
 800fc86:	f1b8 0f01 	cmp.w	r8, #1
 800fc8a:	dc21      	bgt.n	800fcd0 <_strtod_l+0x528>
 800fc8c:	b10b      	cbz	r3, 800fc92 <_strtod_l+0x4ea>
 800fc8e:	4682      	mov	sl, r0
 800fc90:	468b      	mov	fp, r1
 800fc92:	4b2f      	ldr	r3, [pc, #188]	; (800fd50 <_strtod_l+0x5a8>)
 800fc94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fc98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fc9c:	4652      	mov	r2, sl
 800fc9e:	465b      	mov	r3, fp
 800fca0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fca4:	f7f0 fcc8 	bl	8000638 <__aeabi_dmul>
 800fca8:	4b2a      	ldr	r3, [pc, #168]	; (800fd54 <_strtod_l+0x5ac>)
 800fcaa:	460a      	mov	r2, r1
 800fcac:	400b      	ands	r3, r1
 800fcae:	492a      	ldr	r1, [pc, #168]	; (800fd58 <_strtod_l+0x5b0>)
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	4682      	mov	sl, r0
 800fcb4:	d8bc      	bhi.n	800fc30 <_strtod_l+0x488>
 800fcb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fcba:	428b      	cmp	r3, r1
 800fcbc:	bf86      	itte	hi
 800fcbe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fd5c <_strtod_l+0x5b4>
 800fcc2:	f04f 3aff 	movhi.w	sl, #4294967295
 800fcc6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fcca:	2300      	movs	r3, #0
 800fccc:	9304      	str	r3, [sp, #16]
 800fcce:	e084      	b.n	800fdda <_strtod_l+0x632>
 800fcd0:	f018 0f01 	tst.w	r8, #1
 800fcd4:	d005      	beq.n	800fce2 <_strtod_l+0x53a>
 800fcd6:	9b04      	ldr	r3, [sp, #16]
 800fcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcdc:	f7f0 fcac 	bl	8000638 <__aeabi_dmul>
 800fce0:	2301      	movs	r3, #1
 800fce2:	9a04      	ldr	r2, [sp, #16]
 800fce4:	3208      	adds	r2, #8
 800fce6:	f109 0901 	add.w	r9, r9, #1
 800fcea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fcee:	9204      	str	r2, [sp, #16]
 800fcf0:	e7c9      	b.n	800fc86 <_strtod_l+0x4de>
 800fcf2:	d0ea      	beq.n	800fcca <_strtod_l+0x522>
 800fcf4:	f1c8 0800 	rsb	r8, r8, #0
 800fcf8:	f018 020f 	ands.w	r2, r8, #15
 800fcfc:	d00a      	beq.n	800fd14 <_strtod_l+0x56c>
 800fcfe:	4b13      	ldr	r3, [pc, #76]	; (800fd4c <_strtod_l+0x5a4>)
 800fd00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd04:	4650      	mov	r0, sl
 800fd06:	4659      	mov	r1, fp
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	f7f0 fdbe 	bl	800088c <__aeabi_ddiv>
 800fd10:	4682      	mov	sl, r0
 800fd12:	468b      	mov	fp, r1
 800fd14:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fd18:	d0d7      	beq.n	800fcca <_strtod_l+0x522>
 800fd1a:	f1b8 0f1f 	cmp.w	r8, #31
 800fd1e:	dd1f      	ble.n	800fd60 <_strtod_l+0x5b8>
 800fd20:	2500      	movs	r5, #0
 800fd22:	462e      	mov	r6, r5
 800fd24:	9507      	str	r5, [sp, #28]
 800fd26:	9505      	str	r5, [sp, #20]
 800fd28:	2322      	movs	r3, #34	; 0x22
 800fd2a:	f04f 0a00 	mov.w	sl, #0
 800fd2e:	f04f 0b00 	mov.w	fp, #0
 800fd32:	6023      	str	r3, [r4, #0]
 800fd34:	e786      	b.n	800fc44 <_strtod_l+0x49c>
 800fd36:	bf00      	nop
 800fd38:	08014172 	.word	0x08014172
 800fd3c:	0801418c 	.word	0x0801418c
 800fd40:	08014169 	.word	0x08014169
 800fd44:	0801416c 	.word	0x0801416c
 800fd48:	0801454d 	.word	0x0801454d
 800fd4c:	080143f0 	.word	0x080143f0
 800fd50:	080143c8 	.word	0x080143c8
 800fd54:	7ff00000 	.word	0x7ff00000
 800fd58:	7ca00000 	.word	0x7ca00000
 800fd5c:	7fefffff 	.word	0x7fefffff
 800fd60:	f018 0310 	ands.w	r3, r8, #16
 800fd64:	bf18      	it	ne
 800fd66:	236a      	movne	r3, #106	; 0x6a
 800fd68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010118 <_strtod_l+0x970>
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	4650      	mov	r0, sl
 800fd70:	4659      	mov	r1, fp
 800fd72:	2300      	movs	r3, #0
 800fd74:	f018 0f01 	tst.w	r8, #1
 800fd78:	d004      	beq.n	800fd84 <_strtod_l+0x5dc>
 800fd7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fd7e:	f7f0 fc5b 	bl	8000638 <__aeabi_dmul>
 800fd82:	2301      	movs	r3, #1
 800fd84:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fd88:	f109 0908 	add.w	r9, r9, #8
 800fd8c:	d1f2      	bne.n	800fd74 <_strtod_l+0x5cc>
 800fd8e:	b10b      	cbz	r3, 800fd94 <_strtod_l+0x5ec>
 800fd90:	4682      	mov	sl, r0
 800fd92:	468b      	mov	fp, r1
 800fd94:	9b04      	ldr	r3, [sp, #16]
 800fd96:	b1c3      	cbz	r3, 800fdca <_strtod_l+0x622>
 800fd98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fd9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	4659      	mov	r1, fp
 800fda4:	dd11      	ble.n	800fdca <_strtod_l+0x622>
 800fda6:	2b1f      	cmp	r3, #31
 800fda8:	f340 8124 	ble.w	800fff4 <_strtod_l+0x84c>
 800fdac:	2b34      	cmp	r3, #52	; 0x34
 800fdae:	bfde      	ittt	le
 800fdb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fdb4:	f04f 33ff 	movle.w	r3, #4294967295
 800fdb8:	fa03 f202 	lslle.w	r2, r3, r2
 800fdbc:	f04f 0a00 	mov.w	sl, #0
 800fdc0:	bfcc      	ite	gt
 800fdc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fdc6:	ea02 0b01 	andle.w	fp, r2, r1
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2300      	movs	r3, #0
 800fdce:	4650      	mov	r0, sl
 800fdd0:	4659      	mov	r1, fp
 800fdd2:	f7f0 fe99 	bl	8000b08 <__aeabi_dcmpeq>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d1a2      	bne.n	800fd20 <_strtod_l+0x578>
 800fdda:	9b07      	ldr	r3, [sp, #28]
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	9908      	ldr	r1, [sp, #32]
 800fde0:	462b      	mov	r3, r5
 800fde2:	463a      	mov	r2, r7
 800fde4:	4620      	mov	r0, r4
 800fde6:	f001 f89b 	bl	8010f20 <__s2b>
 800fdea:	9007      	str	r0, [sp, #28]
 800fdec:	2800      	cmp	r0, #0
 800fdee:	f43f af1f 	beq.w	800fc30 <_strtod_l+0x488>
 800fdf2:	9b05      	ldr	r3, [sp, #20]
 800fdf4:	1b9e      	subs	r6, r3, r6
 800fdf6:	9b06      	ldr	r3, [sp, #24]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	bfb4      	ite	lt
 800fdfc:	4633      	movlt	r3, r6
 800fdfe:	2300      	movge	r3, #0
 800fe00:	930c      	str	r3, [sp, #48]	; 0x30
 800fe02:	9b06      	ldr	r3, [sp, #24]
 800fe04:	2500      	movs	r5, #0
 800fe06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fe0a:	9312      	str	r3, [sp, #72]	; 0x48
 800fe0c:	462e      	mov	r6, r5
 800fe0e:	9b07      	ldr	r3, [sp, #28]
 800fe10:	4620      	mov	r0, r4
 800fe12:	6859      	ldr	r1, [r3, #4]
 800fe14:	f000 ffdc 	bl	8010dd0 <_Balloc>
 800fe18:	9005      	str	r0, [sp, #20]
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	f43f af0c 	beq.w	800fc38 <_strtod_l+0x490>
 800fe20:	9b07      	ldr	r3, [sp, #28]
 800fe22:	691a      	ldr	r2, [r3, #16]
 800fe24:	3202      	adds	r2, #2
 800fe26:	f103 010c 	add.w	r1, r3, #12
 800fe2a:	0092      	lsls	r2, r2, #2
 800fe2c:	300c      	adds	r0, #12
 800fe2e:	f7ff f8c6 	bl	800efbe <memcpy>
 800fe32:	ec4b ab10 	vmov	d0, sl, fp
 800fe36:	aa1a      	add	r2, sp, #104	; 0x68
 800fe38:	a919      	add	r1, sp, #100	; 0x64
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f001 fbb6 	bl	80115ac <__d2b>
 800fe40:	ec4b ab18 	vmov	d8, sl, fp
 800fe44:	9018      	str	r0, [sp, #96]	; 0x60
 800fe46:	2800      	cmp	r0, #0
 800fe48:	f43f aef6 	beq.w	800fc38 <_strtod_l+0x490>
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f001 f900 	bl	8011054 <__i2b>
 800fe54:	4606      	mov	r6, r0
 800fe56:	2800      	cmp	r0, #0
 800fe58:	f43f aeee 	beq.w	800fc38 <_strtod_l+0x490>
 800fe5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe5e:	9904      	ldr	r1, [sp, #16]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	bfab      	itete	ge
 800fe64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fe66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fe68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fe6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fe6e:	bfac      	ite	ge
 800fe70:	eb03 0902 	addge.w	r9, r3, r2
 800fe74:	1ad7      	sublt	r7, r2, r3
 800fe76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fe78:	eba3 0801 	sub.w	r8, r3, r1
 800fe7c:	4490      	add	r8, r2
 800fe7e:	4ba1      	ldr	r3, [pc, #644]	; (8010104 <_strtod_l+0x95c>)
 800fe80:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe84:	4598      	cmp	r8, r3
 800fe86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fe8a:	f280 80c7 	bge.w	801001c <_strtod_l+0x874>
 800fe8e:	eba3 0308 	sub.w	r3, r3, r8
 800fe92:	2b1f      	cmp	r3, #31
 800fe94:	eba2 0203 	sub.w	r2, r2, r3
 800fe98:	f04f 0101 	mov.w	r1, #1
 800fe9c:	f300 80b1 	bgt.w	8010002 <_strtod_l+0x85a>
 800fea0:	fa01 f303 	lsl.w	r3, r1, r3
 800fea4:	930d      	str	r3, [sp, #52]	; 0x34
 800fea6:	2300      	movs	r3, #0
 800fea8:	9308      	str	r3, [sp, #32]
 800feaa:	eb09 0802 	add.w	r8, r9, r2
 800feae:	9b04      	ldr	r3, [sp, #16]
 800feb0:	45c1      	cmp	r9, r8
 800feb2:	4417      	add	r7, r2
 800feb4:	441f      	add	r7, r3
 800feb6:	464b      	mov	r3, r9
 800feb8:	bfa8      	it	ge
 800feba:	4643      	movge	r3, r8
 800febc:	42bb      	cmp	r3, r7
 800febe:	bfa8      	it	ge
 800fec0:	463b      	movge	r3, r7
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	bfc2      	ittt	gt
 800fec6:	eba8 0803 	subgt.w	r8, r8, r3
 800feca:	1aff      	subgt	r7, r7, r3
 800fecc:	eba9 0903 	subgt.w	r9, r9, r3
 800fed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	dd17      	ble.n	800ff06 <_strtod_l+0x75e>
 800fed6:	4631      	mov	r1, r6
 800fed8:	461a      	mov	r2, r3
 800feda:	4620      	mov	r0, r4
 800fedc:	f001 f97a 	bl	80111d4 <__pow5mult>
 800fee0:	4606      	mov	r6, r0
 800fee2:	2800      	cmp	r0, #0
 800fee4:	f43f aea8 	beq.w	800fc38 <_strtod_l+0x490>
 800fee8:	4601      	mov	r1, r0
 800feea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800feec:	4620      	mov	r0, r4
 800feee:	f001 f8c7 	bl	8011080 <__multiply>
 800fef2:	900b      	str	r0, [sp, #44]	; 0x2c
 800fef4:	2800      	cmp	r0, #0
 800fef6:	f43f ae9f 	beq.w	800fc38 <_strtod_l+0x490>
 800fefa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fefc:	4620      	mov	r0, r4
 800fefe:	f000 ffa7 	bl	8010e50 <_Bfree>
 800ff02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff04:	9318      	str	r3, [sp, #96]	; 0x60
 800ff06:	f1b8 0f00 	cmp.w	r8, #0
 800ff0a:	f300 808c 	bgt.w	8010026 <_strtod_l+0x87e>
 800ff0e:	9b06      	ldr	r3, [sp, #24]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	dd08      	ble.n	800ff26 <_strtod_l+0x77e>
 800ff14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff16:	9905      	ldr	r1, [sp, #20]
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f001 f95b 	bl	80111d4 <__pow5mult>
 800ff1e:	9005      	str	r0, [sp, #20]
 800ff20:	2800      	cmp	r0, #0
 800ff22:	f43f ae89 	beq.w	800fc38 <_strtod_l+0x490>
 800ff26:	2f00      	cmp	r7, #0
 800ff28:	dd08      	ble.n	800ff3c <_strtod_l+0x794>
 800ff2a:	9905      	ldr	r1, [sp, #20]
 800ff2c:	463a      	mov	r2, r7
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f001 f9aa 	bl	8011288 <__lshift>
 800ff34:	9005      	str	r0, [sp, #20]
 800ff36:	2800      	cmp	r0, #0
 800ff38:	f43f ae7e 	beq.w	800fc38 <_strtod_l+0x490>
 800ff3c:	f1b9 0f00 	cmp.w	r9, #0
 800ff40:	dd08      	ble.n	800ff54 <_strtod_l+0x7ac>
 800ff42:	4631      	mov	r1, r6
 800ff44:	464a      	mov	r2, r9
 800ff46:	4620      	mov	r0, r4
 800ff48:	f001 f99e 	bl	8011288 <__lshift>
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	f43f ae72 	beq.w	800fc38 <_strtod_l+0x490>
 800ff54:	9a05      	ldr	r2, [sp, #20]
 800ff56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f001 fa21 	bl	80113a0 <__mdiff>
 800ff5e:	4605      	mov	r5, r0
 800ff60:	2800      	cmp	r0, #0
 800ff62:	f43f ae69 	beq.w	800fc38 <_strtod_l+0x490>
 800ff66:	68c3      	ldr	r3, [r0, #12]
 800ff68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	60c3      	str	r3, [r0, #12]
 800ff6e:	4631      	mov	r1, r6
 800ff70:	f001 f9fa 	bl	8011368 <__mcmp>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	da60      	bge.n	801003a <_strtod_l+0x892>
 800ff78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff7a:	ea53 030a 	orrs.w	r3, r3, sl
 800ff7e:	f040 8082 	bne.w	8010086 <_strtod_l+0x8de>
 800ff82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d17d      	bne.n	8010086 <_strtod_l+0x8de>
 800ff8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff8e:	0d1b      	lsrs	r3, r3, #20
 800ff90:	051b      	lsls	r3, r3, #20
 800ff92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ff96:	d976      	bls.n	8010086 <_strtod_l+0x8de>
 800ff98:	696b      	ldr	r3, [r5, #20]
 800ff9a:	b913      	cbnz	r3, 800ffa2 <_strtod_l+0x7fa>
 800ff9c:	692b      	ldr	r3, [r5, #16]
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	dd71      	ble.n	8010086 <_strtod_l+0x8de>
 800ffa2:	4629      	mov	r1, r5
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f001 f96e 	bl	8011288 <__lshift>
 800ffac:	4631      	mov	r1, r6
 800ffae:	4605      	mov	r5, r0
 800ffb0:	f001 f9da 	bl	8011368 <__mcmp>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	dd66      	ble.n	8010086 <_strtod_l+0x8de>
 800ffb8:	9904      	ldr	r1, [sp, #16]
 800ffba:	4a53      	ldr	r2, [pc, #332]	; (8010108 <_strtod_l+0x960>)
 800ffbc:	465b      	mov	r3, fp
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	f000 8081 	beq.w	80100c6 <_strtod_l+0x91e>
 800ffc4:	ea02 010b 	and.w	r1, r2, fp
 800ffc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ffcc:	dc7b      	bgt.n	80100c6 <_strtod_l+0x91e>
 800ffce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ffd2:	f77f aea9 	ble.w	800fd28 <_strtod_l+0x580>
 800ffd6:	4b4d      	ldr	r3, [pc, #308]	; (801010c <_strtod_l+0x964>)
 800ffd8:	4650      	mov	r0, sl
 800ffda:	4659      	mov	r1, fp
 800ffdc:	2200      	movs	r2, #0
 800ffde:	f7f0 fb2b 	bl	8000638 <__aeabi_dmul>
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	4303      	orrs	r3, r0
 800ffe6:	bf08      	it	eq
 800ffe8:	2322      	moveq	r3, #34	; 0x22
 800ffea:	4682      	mov	sl, r0
 800ffec:	468b      	mov	fp, r1
 800ffee:	bf08      	it	eq
 800fff0:	6023      	streq	r3, [r4, #0]
 800fff2:	e62b      	b.n	800fc4c <_strtod_l+0x4a4>
 800fff4:	f04f 32ff 	mov.w	r2, #4294967295
 800fff8:	fa02 f303 	lsl.w	r3, r2, r3
 800fffc:	ea03 0a0a 	and.w	sl, r3, sl
 8010000:	e6e3      	b.n	800fdca <_strtod_l+0x622>
 8010002:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010006:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801000a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801000e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010012:	fa01 f308 	lsl.w	r3, r1, r8
 8010016:	9308      	str	r3, [sp, #32]
 8010018:	910d      	str	r1, [sp, #52]	; 0x34
 801001a:	e746      	b.n	800feaa <_strtod_l+0x702>
 801001c:	2300      	movs	r3, #0
 801001e:	9308      	str	r3, [sp, #32]
 8010020:	2301      	movs	r3, #1
 8010022:	930d      	str	r3, [sp, #52]	; 0x34
 8010024:	e741      	b.n	800feaa <_strtod_l+0x702>
 8010026:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010028:	4642      	mov	r2, r8
 801002a:	4620      	mov	r0, r4
 801002c:	f001 f92c 	bl	8011288 <__lshift>
 8010030:	9018      	str	r0, [sp, #96]	; 0x60
 8010032:	2800      	cmp	r0, #0
 8010034:	f47f af6b 	bne.w	800ff0e <_strtod_l+0x766>
 8010038:	e5fe      	b.n	800fc38 <_strtod_l+0x490>
 801003a:	465f      	mov	r7, fp
 801003c:	d16e      	bne.n	801011c <_strtod_l+0x974>
 801003e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010044:	b342      	cbz	r2, 8010098 <_strtod_l+0x8f0>
 8010046:	4a32      	ldr	r2, [pc, #200]	; (8010110 <_strtod_l+0x968>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d128      	bne.n	801009e <_strtod_l+0x8f6>
 801004c:	9b04      	ldr	r3, [sp, #16]
 801004e:	4651      	mov	r1, sl
 8010050:	b1eb      	cbz	r3, 801008e <_strtod_l+0x8e6>
 8010052:	4b2d      	ldr	r3, [pc, #180]	; (8010108 <_strtod_l+0x960>)
 8010054:	403b      	ands	r3, r7
 8010056:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801005a:	f04f 32ff 	mov.w	r2, #4294967295
 801005e:	d819      	bhi.n	8010094 <_strtod_l+0x8ec>
 8010060:	0d1b      	lsrs	r3, r3, #20
 8010062:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010066:	fa02 f303 	lsl.w	r3, r2, r3
 801006a:	4299      	cmp	r1, r3
 801006c:	d117      	bne.n	801009e <_strtod_l+0x8f6>
 801006e:	4b29      	ldr	r3, [pc, #164]	; (8010114 <_strtod_l+0x96c>)
 8010070:	429f      	cmp	r7, r3
 8010072:	d102      	bne.n	801007a <_strtod_l+0x8d2>
 8010074:	3101      	adds	r1, #1
 8010076:	f43f addf 	beq.w	800fc38 <_strtod_l+0x490>
 801007a:	4b23      	ldr	r3, [pc, #140]	; (8010108 <_strtod_l+0x960>)
 801007c:	403b      	ands	r3, r7
 801007e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010082:	f04f 0a00 	mov.w	sl, #0
 8010086:	9b04      	ldr	r3, [sp, #16]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d1a4      	bne.n	800ffd6 <_strtod_l+0x82e>
 801008c:	e5de      	b.n	800fc4c <_strtod_l+0x4a4>
 801008e:	f04f 33ff 	mov.w	r3, #4294967295
 8010092:	e7ea      	b.n	801006a <_strtod_l+0x8c2>
 8010094:	4613      	mov	r3, r2
 8010096:	e7e8      	b.n	801006a <_strtod_l+0x8c2>
 8010098:	ea53 030a 	orrs.w	r3, r3, sl
 801009c:	d08c      	beq.n	800ffb8 <_strtod_l+0x810>
 801009e:	9b08      	ldr	r3, [sp, #32]
 80100a0:	b1db      	cbz	r3, 80100da <_strtod_l+0x932>
 80100a2:	423b      	tst	r3, r7
 80100a4:	d0ef      	beq.n	8010086 <_strtod_l+0x8de>
 80100a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100a8:	9a04      	ldr	r2, [sp, #16]
 80100aa:	4650      	mov	r0, sl
 80100ac:	4659      	mov	r1, fp
 80100ae:	b1c3      	cbz	r3, 80100e2 <_strtod_l+0x93a>
 80100b0:	f7ff fb5e 	bl	800f770 <sulp>
 80100b4:	4602      	mov	r2, r0
 80100b6:	460b      	mov	r3, r1
 80100b8:	ec51 0b18 	vmov	r0, r1, d8
 80100bc:	f7f0 f906 	bl	80002cc <__adddf3>
 80100c0:	4682      	mov	sl, r0
 80100c2:	468b      	mov	fp, r1
 80100c4:	e7df      	b.n	8010086 <_strtod_l+0x8de>
 80100c6:	4013      	ands	r3, r2
 80100c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80100cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80100d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80100d4:	f04f 3aff 	mov.w	sl, #4294967295
 80100d8:	e7d5      	b.n	8010086 <_strtod_l+0x8de>
 80100da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100dc:	ea13 0f0a 	tst.w	r3, sl
 80100e0:	e7e0      	b.n	80100a4 <_strtod_l+0x8fc>
 80100e2:	f7ff fb45 	bl	800f770 <sulp>
 80100e6:	4602      	mov	r2, r0
 80100e8:	460b      	mov	r3, r1
 80100ea:	ec51 0b18 	vmov	r0, r1, d8
 80100ee:	f7f0 f8eb 	bl	80002c8 <__aeabi_dsub>
 80100f2:	2200      	movs	r2, #0
 80100f4:	2300      	movs	r3, #0
 80100f6:	4682      	mov	sl, r0
 80100f8:	468b      	mov	fp, r1
 80100fa:	f7f0 fd05 	bl	8000b08 <__aeabi_dcmpeq>
 80100fe:	2800      	cmp	r0, #0
 8010100:	d0c1      	beq.n	8010086 <_strtod_l+0x8de>
 8010102:	e611      	b.n	800fd28 <_strtod_l+0x580>
 8010104:	fffffc02 	.word	0xfffffc02
 8010108:	7ff00000 	.word	0x7ff00000
 801010c:	39500000 	.word	0x39500000
 8010110:	000fffff 	.word	0x000fffff
 8010114:	7fefffff 	.word	0x7fefffff
 8010118:	080141a0 	.word	0x080141a0
 801011c:	4631      	mov	r1, r6
 801011e:	4628      	mov	r0, r5
 8010120:	f001 faa0 	bl	8011664 <__ratio>
 8010124:	ec59 8b10 	vmov	r8, r9, d0
 8010128:	ee10 0a10 	vmov	r0, s0
 801012c:	2200      	movs	r2, #0
 801012e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010132:	4649      	mov	r1, r9
 8010134:	f7f0 fcfc 	bl	8000b30 <__aeabi_dcmple>
 8010138:	2800      	cmp	r0, #0
 801013a:	d07a      	beq.n	8010232 <_strtod_l+0xa8a>
 801013c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801013e:	2b00      	cmp	r3, #0
 8010140:	d04a      	beq.n	80101d8 <_strtod_l+0xa30>
 8010142:	4b95      	ldr	r3, [pc, #596]	; (8010398 <_strtod_l+0xbf0>)
 8010144:	2200      	movs	r2, #0
 8010146:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801014a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010398 <_strtod_l+0xbf0>
 801014e:	f04f 0800 	mov.w	r8, #0
 8010152:	4b92      	ldr	r3, [pc, #584]	; (801039c <_strtod_l+0xbf4>)
 8010154:	403b      	ands	r3, r7
 8010156:	930d      	str	r3, [sp, #52]	; 0x34
 8010158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801015a:	4b91      	ldr	r3, [pc, #580]	; (80103a0 <_strtod_l+0xbf8>)
 801015c:	429a      	cmp	r2, r3
 801015e:	f040 80b0 	bne.w	80102c2 <_strtod_l+0xb1a>
 8010162:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010166:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801016a:	ec4b ab10 	vmov	d0, sl, fp
 801016e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010172:	f001 f99f 	bl	80114b4 <__ulp>
 8010176:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801017a:	ec53 2b10 	vmov	r2, r3, d0
 801017e:	f7f0 fa5b 	bl	8000638 <__aeabi_dmul>
 8010182:	4652      	mov	r2, sl
 8010184:	465b      	mov	r3, fp
 8010186:	f7f0 f8a1 	bl	80002cc <__adddf3>
 801018a:	460b      	mov	r3, r1
 801018c:	4983      	ldr	r1, [pc, #524]	; (801039c <_strtod_l+0xbf4>)
 801018e:	4a85      	ldr	r2, [pc, #532]	; (80103a4 <_strtod_l+0xbfc>)
 8010190:	4019      	ands	r1, r3
 8010192:	4291      	cmp	r1, r2
 8010194:	4682      	mov	sl, r0
 8010196:	d960      	bls.n	801025a <_strtod_l+0xab2>
 8010198:	ee18 3a90 	vmov	r3, s17
 801019c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d104      	bne.n	80101ae <_strtod_l+0xa06>
 80101a4:	ee18 3a10 	vmov	r3, s16
 80101a8:	3301      	adds	r3, #1
 80101aa:	f43f ad45 	beq.w	800fc38 <_strtod_l+0x490>
 80101ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80103b0 <_strtod_l+0xc08>
 80101b2:	f04f 3aff 	mov.w	sl, #4294967295
 80101b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80101b8:	4620      	mov	r0, r4
 80101ba:	f000 fe49 	bl	8010e50 <_Bfree>
 80101be:	9905      	ldr	r1, [sp, #20]
 80101c0:	4620      	mov	r0, r4
 80101c2:	f000 fe45 	bl	8010e50 <_Bfree>
 80101c6:	4631      	mov	r1, r6
 80101c8:	4620      	mov	r0, r4
 80101ca:	f000 fe41 	bl	8010e50 <_Bfree>
 80101ce:	4629      	mov	r1, r5
 80101d0:	4620      	mov	r0, r4
 80101d2:	f000 fe3d 	bl	8010e50 <_Bfree>
 80101d6:	e61a      	b.n	800fe0e <_strtod_l+0x666>
 80101d8:	f1ba 0f00 	cmp.w	sl, #0
 80101dc:	d11b      	bne.n	8010216 <_strtod_l+0xa6e>
 80101de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101e2:	b9f3      	cbnz	r3, 8010222 <_strtod_l+0xa7a>
 80101e4:	4b6c      	ldr	r3, [pc, #432]	; (8010398 <_strtod_l+0xbf0>)
 80101e6:	2200      	movs	r2, #0
 80101e8:	4640      	mov	r0, r8
 80101ea:	4649      	mov	r1, r9
 80101ec:	f7f0 fc96 	bl	8000b1c <__aeabi_dcmplt>
 80101f0:	b9d0      	cbnz	r0, 8010228 <_strtod_l+0xa80>
 80101f2:	4640      	mov	r0, r8
 80101f4:	4649      	mov	r1, r9
 80101f6:	4b6c      	ldr	r3, [pc, #432]	; (80103a8 <_strtod_l+0xc00>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	f7f0 fa1d 	bl	8000638 <__aeabi_dmul>
 80101fe:	4680      	mov	r8, r0
 8010200:	4689      	mov	r9, r1
 8010202:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010206:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801020a:	9315      	str	r3, [sp, #84]	; 0x54
 801020c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010210:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010214:	e79d      	b.n	8010152 <_strtod_l+0x9aa>
 8010216:	f1ba 0f01 	cmp.w	sl, #1
 801021a:	d102      	bne.n	8010222 <_strtod_l+0xa7a>
 801021c:	2f00      	cmp	r7, #0
 801021e:	f43f ad83 	beq.w	800fd28 <_strtod_l+0x580>
 8010222:	4b62      	ldr	r3, [pc, #392]	; (80103ac <_strtod_l+0xc04>)
 8010224:	2200      	movs	r2, #0
 8010226:	e78e      	b.n	8010146 <_strtod_l+0x99e>
 8010228:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80103a8 <_strtod_l+0xc00>
 801022c:	f04f 0800 	mov.w	r8, #0
 8010230:	e7e7      	b.n	8010202 <_strtod_l+0xa5a>
 8010232:	4b5d      	ldr	r3, [pc, #372]	; (80103a8 <_strtod_l+0xc00>)
 8010234:	4640      	mov	r0, r8
 8010236:	4649      	mov	r1, r9
 8010238:	2200      	movs	r2, #0
 801023a:	f7f0 f9fd 	bl	8000638 <__aeabi_dmul>
 801023e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010240:	4680      	mov	r8, r0
 8010242:	4689      	mov	r9, r1
 8010244:	b933      	cbnz	r3, 8010254 <_strtod_l+0xaac>
 8010246:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801024a:	900e      	str	r0, [sp, #56]	; 0x38
 801024c:	930f      	str	r3, [sp, #60]	; 0x3c
 801024e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010252:	e7dd      	b.n	8010210 <_strtod_l+0xa68>
 8010254:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010258:	e7f9      	b.n	801024e <_strtod_l+0xaa6>
 801025a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801025e:	9b04      	ldr	r3, [sp, #16]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1a8      	bne.n	80101b6 <_strtod_l+0xa0e>
 8010264:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010268:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801026a:	0d1b      	lsrs	r3, r3, #20
 801026c:	051b      	lsls	r3, r3, #20
 801026e:	429a      	cmp	r2, r3
 8010270:	d1a1      	bne.n	80101b6 <_strtod_l+0xa0e>
 8010272:	4640      	mov	r0, r8
 8010274:	4649      	mov	r1, r9
 8010276:	f7f0 fd3f 	bl	8000cf8 <__aeabi_d2lz>
 801027a:	f7f0 f9af 	bl	80005dc <__aeabi_l2d>
 801027e:	4602      	mov	r2, r0
 8010280:	460b      	mov	r3, r1
 8010282:	4640      	mov	r0, r8
 8010284:	4649      	mov	r1, r9
 8010286:	f7f0 f81f 	bl	80002c8 <__aeabi_dsub>
 801028a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801028c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010290:	ea43 030a 	orr.w	r3, r3, sl
 8010294:	4313      	orrs	r3, r2
 8010296:	4680      	mov	r8, r0
 8010298:	4689      	mov	r9, r1
 801029a:	d055      	beq.n	8010348 <_strtod_l+0xba0>
 801029c:	a336      	add	r3, pc, #216	; (adr r3, 8010378 <_strtod_l+0xbd0>)
 801029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a2:	f7f0 fc3b 	bl	8000b1c <__aeabi_dcmplt>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	f47f acd0 	bne.w	800fc4c <_strtod_l+0x4a4>
 80102ac:	a334      	add	r3, pc, #208	; (adr r3, 8010380 <_strtod_l+0xbd8>)
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	4640      	mov	r0, r8
 80102b4:	4649      	mov	r1, r9
 80102b6:	f7f0 fc4f 	bl	8000b58 <__aeabi_dcmpgt>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	f43f af7b 	beq.w	80101b6 <_strtod_l+0xa0e>
 80102c0:	e4c4      	b.n	800fc4c <_strtod_l+0x4a4>
 80102c2:	9b04      	ldr	r3, [sp, #16]
 80102c4:	b333      	cbz	r3, 8010314 <_strtod_l+0xb6c>
 80102c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80102cc:	d822      	bhi.n	8010314 <_strtod_l+0xb6c>
 80102ce:	a32e      	add	r3, pc, #184	; (adr r3, 8010388 <_strtod_l+0xbe0>)
 80102d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d4:	4640      	mov	r0, r8
 80102d6:	4649      	mov	r1, r9
 80102d8:	f7f0 fc2a 	bl	8000b30 <__aeabi_dcmple>
 80102dc:	b1a0      	cbz	r0, 8010308 <_strtod_l+0xb60>
 80102de:	4649      	mov	r1, r9
 80102e0:	4640      	mov	r0, r8
 80102e2:	f7f0 fc81 	bl	8000be8 <__aeabi_d2uiz>
 80102e6:	2801      	cmp	r0, #1
 80102e8:	bf38      	it	cc
 80102ea:	2001      	movcc	r0, #1
 80102ec:	f7f0 f92a 	bl	8000544 <__aeabi_ui2d>
 80102f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102f2:	4680      	mov	r8, r0
 80102f4:	4689      	mov	r9, r1
 80102f6:	bb23      	cbnz	r3, 8010342 <_strtod_l+0xb9a>
 80102f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102fc:	9010      	str	r0, [sp, #64]	; 0x40
 80102fe:	9311      	str	r3, [sp, #68]	; 0x44
 8010300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010304:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801030a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801030c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010310:	1a9b      	subs	r3, r3, r2
 8010312:	9309      	str	r3, [sp, #36]	; 0x24
 8010314:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010318:	eeb0 0a48 	vmov.f32	s0, s16
 801031c:	eef0 0a68 	vmov.f32	s1, s17
 8010320:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010324:	f001 f8c6 	bl	80114b4 <__ulp>
 8010328:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801032c:	ec53 2b10 	vmov	r2, r3, d0
 8010330:	f7f0 f982 	bl	8000638 <__aeabi_dmul>
 8010334:	ec53 2b18 	vmov	r2, r3, d8
 8010338:	f7ef ffc8 	bl	80002cc <__adddf3>
 801033c:	4682      	mov	sl, r0
 801033e:	468b      	mov	fp, r1
 8010340:	e78d      	b.n	801025e <_strtod_l+0xab6>
 8010342:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010346:	e7db      	b.n	8010300 <_strtod_l+0xb58>
 8010348:	a311      	add	r3, pc, #68	; (adr r3, 8010390 <_strtod_l+0xbe8>)
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	f7f0 fbe5 	bl	8000b1c <__aeabi_dcmplt>
 8010352:	e7b2      	b.n	80102ba <_strtod_l+0xb12>
 8010354:	2300      	movs	r3, #0
 8010356:	930a      	str	r3, [sp, #40]	; 0x28
 8010358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801035a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801035c:	6013      	str	r3, [r2, #0]
 801035e:	f7ff ba6b 	b.w	800f838 <_strtod_l+0x90>
 8010362:	2a65      	cmp	r2, #101	; 0x65
 8010364:	f43f ab5f 	beq.w	800fa26 <_strtod_l+0x27e>
 8010368:	2a45      	cmp	r2, #69	; 0x45
 801036a:	f43f ab5c 	beq.w	800fa26 <_strtod_l+0x27e>
 801036e:	2301      	movs	r3, #1
 8010370:	f7ff bb94 	b.w	800fa9c <_strtod_l+0x2f4>
 8010374:	f3af 8000 	nop.w
 8010378:	94a03595 	.word	0x94a03595
 801037c:	3fdfffff 	.word	0x3fdfffff
 8010380:	35afe535 	.word	0x35afe535
 8010384:	3fe00000 	.word	0x3fe00000
 8010388:	ffc00000 	.word	0xffc00000
 801038c:	41dfffff 	.word	0x41dfffff
 8010390:	94a03595 	.word	0x94a03595
 8010394:	3fcfffff 	.word	0x3fcfffff
 8010398:	3ff00000 	.word	0x3ff00000
 801039c:	7ff00000 	.word	0x7ff00000
 80103a0:	7fe00000 	.word	0x7fe00000
 80103a4:	7c9fffff 	.word	0x7c9fffff
 80103a8:	3fe00000 	.word	0x3fe00000
 80103ac:	bff00000 	.word	0xbff00000
 80103b0:	7fefffff 	.word	0x7fefffff

080103b4 <_strtod_r>:
 80103b4:	4b01      	ldr	r3, [pc, #4]	; (80103bc <_strtod_r+0x8>)
 80103b6:	f7ff b9f7 	b.w	800f7a8 <_strtod_l>
 80103ba:	bf00      	nop
 80103bc:	2000017c 	.word	0x2000017c

080103c0 <_strtol_l.constprop.0>:
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c6:	d001      	beq.n	80103cc <_strtol_l.constprop.0+0xc>
 80103c8:	2b24      	cmp	r3, #36	; 0x24
 80103ca:	d906      	bls.n	80103da <_strtol_l.constprop.0+0x1a>
 80103cc:	f7fe fcd4 	bl	800ed78 <__errno>
 80103d0:	2316      	movs	r3, #22
 80103d2:	6003      	str	r3, [r0, #0]
 80103d4:	2000      	movs	r0, #0
 80103d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80104c0 <_strtol_l.constprop.0+0x100>
 80103de:	460d      	mov	r5, r1
 80103e0:	462e      	mov	r6, r5
 80103e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80103ea:	f017 0708 	ands.w	r7, r7, #8
 80103ee:	d1f7      	bne.n	80103e0 <_strtol_l.constprop.0+0x20>
 80103f0:	2c2d      	cmp	r4, #45	; 0x2d
 80103f2:	d132      	bne.n	801045a <_strtol_l.constprop.0+0x9a>
 80103f4:	782c      	ldrb	r4, [r5, #0]
 80103f6:	2701      	movs	r7, #1
 80103f8:	1cb5      	adds	r5, r6, #2
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d05b      	beq.n	80104b6 <_strtol_l.constprop.0+0xf6>
 80103fe:	2b10      	cmp	r3, #16
 8010400:	d109      	bne.n	8010416 <_strtol_l.constprop.0+0x56>
 8010402:	2c30      	cmp	r4, #48	; 0x30
 8010404:	d107      	bne.n	8010416 <_strtol_l.constprop.0+0x56>
 8010406:	782c      	ldrb	r4, [r5, #0]
 8010408:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801040c:	2c58      	cmp	r4, #88	; 0x58
 801040e:	d14d      	bne.n	80104ac <_strtol_l.constprop.0+0xec>
 8010410:	786c      	ldrb	r4, [r5, #1]
 8010412:	2310      	movs	r3, #16
 8010414:	3502      	adds	r5, #2
 8010416:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801041a:	f108 38ff 	add.w	r8, r8, #4294967295
 801041e:	f04f 0c00 	mov.w	ip, #0
 8010422:	fbb8 f9f3 	udiv	r9, r8, r3
 8010426:	4666      	mov	r6, ip
 8010428:	fb03 8a19 	mls	sl, r3, r9, r8
 801042c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010430:	f1be 0f09 	cmp.w	lr, #9
 8010434:	d816      	bhi.n	8010464 <_strtol_l.constprop.0+0xa4>
 8010436:	4674      	mov	r4, lr
 8010438:	42a3      	cmp	r3, r4
 801043a:	dd24      	ble.n	8010486 <_strtol_l.constprop.0+0xc6>
 801043c:	f1bc 0f00 	cmp.w	ip, #0
 8010440:	db1e      	blt.n	8010480 <_strtol_l.constprop.0+0xc0>
 8010442:	45b1      	cmp	r9, r6
 8010444:	d31c      	bcc.n	8010480 <_strtol_l.constprop.0+0xc0>
 8010446:	d101      	bne.n	801044c <_strtol_l.constprop.0+0x8c>
 8010448:	45a2      	cmp	sl, r4
 801044a:	db19      	blt.n	8010480 <_strtol_l.constprop.0+0xc0>
 801044c:	fb06 4603 	mla	r6, r6, r3, r4
 8010450:	f04f 0c01 	mov.w	ip, #1
 8010454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010458:	e7e8      	b.n	801042c <_strtol_l.constprop.0+0x6c>
 801045a:	2c2b      	cmp	r4, #43	; 0x2b
 801045c:	bf04      	itt	eq
 801045e:	782c      	ldrbeq	r4, [r5, #0]
 8010460:	1cb5      	addeq	r5, r6, #2
 8010462:	e7ca      	b.n	80103fa <_strtol_l.constprop.0+0x3a>
 8010464:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010468:	f1be 0f19 	cmp.w	lr, #25
 801046c:	d801      	bhi.n	8010472 <_strtol_l.constprop.0+0xb2>
 801046e:	3c37      	subs	r4, #55	; 0x37
 8010470:	e7e2      	b.n	8010438 <_strtol_l.constprop.0+0x78>
 8010472:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010476:	f1be 0f19 	cmp.w	lr, #25
 801047a:	d804      	bhi.n	8010486 <_strtol_l.constprop.0+0xc6>
 801047c:	3c57      	subs	r4, #87	; 0x57
 801047e:	e7db      	b.n	8010438 <_strtol_l.constprop.0+0x78>
 8010480:	f04f 3cff 	mov.w	ip, #4294967295
 8010484:	e7e6      	b.n	8010454 <_strtol_l.constprop.0+0x94>
 8010486:	f1bc 0f00 	cmp.w	ip, #0
 801048a:	da05      	bge.n	8010498 <_strtol_l.constprop.0+0xd8>
 801048c:	2322      	movs	r3, #34	; 0x22
 801048e:	6003      	str	r3, [r0, #0]
 8010490:	4646      	mov	r6, r8
 8010492:	b942      	cbnz	r2, 80104a6 <_strtol_l.constprop.0+0xe6>
 8010494:	4630      	mov	r0, r6
 8010496:	e79e      	b.n	80103d6 <_strtol_l.constprop.0+0x16>
 8010498:	b107      	cbz	r7, 801049c <_strtol_l.constprop.0+0xdc>
 801049a:	4276      	negs	r6, r6
 801049c:	2a00      	cmp	r2, #0
 801049e:	d0f9      	beq.n	8010494 <_strtol_l.constprop.0+0xd4>
 80104a0:	f1bc 0f00 	cmp.w	ip, #0
 80104a4:	d000      	beq.n	80104a8 <_strtol_l.constprop.0+0xe8>
 80104a6:	1e69      	subs	r1, r5, #1
 80104a8:	6011      	str	r1, [r2, #0]
 80104aa:	e7f3      	b.n	8010494 <_strtol_l.constprop.0+0xd4>
 80104ac:	2430      	movs	r4, #48	; 0x30
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1b1      	bne.n	8010416 <_strtol_l.constprop.0+0x56>
 80104b2:	2308      	movs	r3, #8
 80104b4:	e7af      	b.n	8010416 <_strtol_l.constprop.0+0x56>
 80104b6:	2c30      	cmp	r4, #48	; 0x30
 80104b8:	d0a5      	beq.n	8010406 <_strtol_l.constprop.0+0x46>
 80104ba:	230a      	movs	r3, #10
 80104bc:	e7ab      	b.n	8010416 <_strtol_l.constprop.0+0x56>
 80104be:	bf00      	nop
 80104c0:	080141c9 	.word	0x080141c9

080104c4 <_strtol_r>:
 80104c4:	f7ff bf7c 	b.w	80103c0 <_strtol_l.constprop.0>

080104c8 <_write_r>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4d07      	ldr	r5, [pc, #28]	; (80104e8 <_write_r+0x20>)
 80104cc:	4604      	mov	r4, r0
 80104ce:	4608      	mov	r0, r1
 80104d0:	4611      	mov	r1, r2
 80104d2:	2200      	movs	r2, #0
 80104d4:	602a      	str	r2, [r5, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	f7f2 feaf 	bl	800323a <_write>
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	d102      	bne.n	80104e6 <_write_r+0x1e>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	b103      	cbz	r3, 80104e6 <_write_r+0x1e>
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
 80104e8:	2000f650 	.word	0x2000f650

080104ec <_close_r>:
 80104ec:	b538      	push	{r3, r4, r5, lr}
 80104ee:	4d06      	ldr	r5, [pc, #24]	; (8010508 <_close_r+0x1c>)
 80104f0:	2300      	movs	r3, #0
 80104f2:	4604      	mov	r4, r0
 80104f4:	4608      	mov	r0, r1
 80104f6:	602b      	str	r3, [r5, #0]
 80104f8:	f7f2 febb 	bl	8003272 <_close>
 80104fc:	1c43      	adds	r3, r0, #1
 80104fe:	d102      	bne.n	8010506 <_close_r+0x1a>
 8010500:	682b      	ldr	r3, [r5, #0]
 8010502:	b103      	cbz	r3, 8010506 <_close_r+0x1a>
 8010504:	6023      	str	r3, [r4, #0]
 8010506:	bd38      	pop	{r3, r4, r5, pc}
 8010508:	2000f650 	.word	0x2000f650

0801050c <__sflush_r>:
 801050c:	898a      	ldrh	r2, [r1, #12]
 801050e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010512:	4605      	mov	r5, r0
 8010514:	0710      	lsls	r0, r2, #28
 8010516:	460c      	mov	r4, r1
 8010518:	d458      	bmi.n	80105cc <__sflush_r+0xc0>
 801051a:	684b      	ldr	r3, [r1, #4]
 801051c:	2b00      	cmp	r3, #0
 801051e:	dc05      	bgt.n	801052c <__sflush_r+0x20>
 8010520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010522:	2b00      	cmp	r3, #0
 8010524:	dc02      	bgt.n	801052c <__sflush_r+0x20>
 8010526:	2000      	movs	r0, #0
 8010528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801052c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801052e:	2e00      	cmp	r6, #0
 8010530:	d0f9      	beq.n	8010526 <__sflush_r+0x1a>
 8010532:	2300      	movs	r3, #0
 8010534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010538:	682f      	ldr	r7, [r5, #0]
 801053a:	602b      	str	r3, [r5, #0]
 801053c:	d032      	beq.n	80105a4 <__sflush_r+0x98>
 801053e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010540:	89a3      	ldrh	r3, [r4, #12]
 8010542:	075a      	lsls	r2, r3, #29
 8010544:	d505      	bpl.n	8010552 <__sflush_r+0x46>
 8010546:	6863      	ldr	r3, [r4, #4]
 8010548:	1ac0      	subs	r0, r0, r3
 801054a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801054c:	b10b      	cbz	r3, 8010552 <__sflush_r+0x46>
 801054e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010550:	1ac0      	subs	r0, r0, r3
 8010552:	2300      	movs	r3, #0
 8010554:	4602      	mov	r2, r0
 8010556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010558:	6a21      	ldr	r1, [r4, #32]
 801055a:	4628      	mov	r0, r5
 801055c:	47b0      	blx	r6
 801055e:	1c43      	adds	r3, r0, #1
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	d106      	bne.n	8010572 <__sflush_r+0x66>
 8010564:	6829      	ldr	r1, [r5, #0]
 8010566:	291d      	cmp	r1, #29
 8010568:	d82c      	bhi.n	80105c4 <__sflush_r+0xb8>
 801056a:	4a2a      	ldr	r2, [pc, #168]	; (8010614 <__sflush_r+0x108>)
 801056c:	40ca      	lsrs	r2, r1
 801056e:	07d6      	lsls	r6, r2, #31
 8010570:	d528      	bpl.n	80105c4 <__sflush_r+0xb8>
 8010572:	2200      	movs	r2, #0
 8010574:	6062      	str	r2, [r4, #4]
 8010576:	04d9      	lsls	r1, r3, #19
 8010578:	6922      	ldr	r2, [r4, #16]
 801057a:	6022      	str	r2, [r4, #0]
 801057c:	d504      	bpl.n	8010588 <__sflush_r+0x7c>
 801057e:	1c42      	adds	r2, r0, #1
 8010580:	d101      	bne.n	8010586 <__sflush_r+0x7a>
 8010582:	682b      	ldr	r3, [r5, #0]
 8010584:	b903      	cbnz	r3, 8010588 <__sflush_r+0x7c>
 8010586:	6560      	str	r0, [r4, #84]	; 0x54
 8010588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801058a:	602f      	str	r7, [r5, #0]
 801058c:	2900      	cmp	r1, #0
 801058e:	d0ca      	beq.n	8010526 <__sflush_r+0x1a>
 8010590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010594:	4299      	cmp	r1, r3
 8010596:	d002      	beq.n	801059e <__sflush_r+0x92>
 8010598:	4628      	mov	r0, r5
 801059a:	f001 f8f1 	bl	8011780 <_free_r>
 801059e:	2000      	movs	r0, #0
 80105a0:	6360      	str	r0, [r4, #52]	; 0x34
 80105a2:	e7c1      	b.n	8010528 <__sflush_r+0x1c>
 80105a4:	6a21      	ldr	r1, [r4, #32]
 80105a6:	2301      	movs	r3, #1
 80105a8:	4628      	mov	r0, r5
 80105aa:	47b0      	blx	r6
 80105ac:	1c41      	adds	r1, r0, #1
 80105ae:	d1c7      	bne.n	8010540 <__sflush_r+0x34>
 80105b0:	682b      	ldr	r3, [r5, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d0c4      	beq.n	8010540 <__sflush_r+0x34>
 80105b6:	2b1d      	cmp	r3, #29
 80105b8:	d001      	beq.n	80105be <__sflush_r+0xb2>
 80105ba:	2b16      	cmp	r3, #22
 80105bc:	d101      	bne.n	80105c2 <__sflush_r+0xb6>
 80105be:	602f      	str	r7, [r5, #0]
 80105c0:	e7b1      	b.n	8010526 <__sflush_r+0x1a>
 80105c2:	89a3      	ldrh	r3, [r4, #12]
 80105c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105c8:	81a3      	strh	r3, [r4, #12]
 80105ca:	e7ad      	b.n	8010528 <__sflush_r+0x1c>
 80105cc:	690f      	ldr	r7, [r1, #16]
 80105ce:	2f00      	cmp	r7, #0
 80105d0:	d0a9      	beq.n	8010526 <__sflush_r+0x1a>
 80105d2:	0793      	lsls	r3, r2, #30
 80105d4:	680e      	ldr	r6, [r1, #0]
 80105d6:	bf08      	it	eq
 80105d8:	694b      	ldreq	r3, [r1, #20]
 80105da:	600f      	str	r7, [r1, #0]
 80105dc:	bf18      	it	ne
 80105de:	2300      	movne	r3, #0
 80105e0:	eba6 0807 	sub.w	r8, r6, r7
 80105e4:	608b      	str	r3, [r1, #8]
 80105e6:	f1b8 0f00 	cmp.w	r8, #0
 80105ea:	dd9c      	ble.n	8010526 <__sflush_r+0x1a>
 80105ec:	6a21      	ldr	r1, [r4, #32]
 80105ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80105f0:	4643      	mov	r3, r8
 80105f2:	463a      	mov	r2, r7
 80105f4:	4628      	mov	r0, r5
 80105f6:	47b0      	blx	r6
 80105f8:	2800      	cmp	r0, #0
 80105fa:	dc06      	bgt.n	801060a <__sflush_r+0xfe>
 80105fc:	89a3      	ldrh	r3, [r4, #12]
 80105fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010602:	81a3      	strh	r3, [r4, #12]
 8010604:	f04f 30ff 	mov.w	r0, #4294967295
 8010608:	e78e      	b.n	8010528 <__sflush_r+0x1c>
 801060a:	4407      	add	r7, r0
 801060c:	eba8 0800 	sub.w	r8, r8, r0
 8010610:	e7e9      	b.n	80105e6 <__sflush_r+0xda>
 8010612:	bf00      	nop
 8010614:	20400001 	.word	0x20400001

08010618 <_fflush_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	690b      	ldr	r3, [r1, #16]
 801061c:	4605      	mov	r5, r0
 801061e:	460c      	mov	r4, r1
 8010620:	b913      	cbnz	r3, 8010628 <_fflush_r+0x10>
 8010622:	2500      	movs	r5, #0
 8010624:	4628      	mov	r0, r5
 8010626:	bd38      	pop	{r3, r4, r5, pc}
 8010628:	b118      	cbz	r0, 8010632 <_fflush_r+0x1a>
 801062a:	6983      	ldr	r3, [r0, #24]
 801062c:	b90b      	cbnz	r3, 8010632 <_fflush_r+0x1a>
 801062e:	f7fe fc01 	bl	800ee34 <__sinit>
 8010632:	4b14      	ldr	r3, [pc, #80]	; (8010684 <_fflush_r+0x6c>)
 8010634:	429c      	cmp	r4, r3
 8010636:	d11b      	bne.n	8010670 <_fflush_r+0x58>
 8010638:	686c      	ldr	r4, [r5, #4]
 801063a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d0ef      	beq.n	8010622 <_fflush_r+0xa>
 8010642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010644:	07d0      	lsls	r0, r2, #31
 8010646:	d404      	bmi.n	8010652 <_fflush_r+0x3a>
 8010648:	0599      	lsls	r1, r3, #22
 801064a:	d402      	bmi.n	8010652 <_fflush_r+0x3a>
 801064c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801064e:	f7fe fcb4 	bl	800efba <__retarget_lock_acquire_recursive>
 8010652:	4628      	mov	r0, r5
 8010654:	4621      	mov	r1, r4
 8010656:	f7ff ff59 	bl	801050c <__sflush_r>
 801065a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801065c:	07da      	lsls	r2, r3, #31
 801065e:	4605      	mov	r5, r0
 8010660:	d4e0      	bmi.n	8010624 <_fflush_r+0xc>
 8010662:	89a3      	ldrh	r3, [r4, #12]
 8010664:	059b      	lsls	r3, r3, #22
 8010666:	d4dd      	bmi.n	8010624 <_fflush_r+0xc>
 8010668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801066a:	f7fe fca7 	bl	800efbc <__retarget_lock_release_recursive>
 801066e:	e7d9      	b.n	8010624 <_fflush_r+0xc>
 8010670:	4b05      	ldr	r3, [pc, #20]	; (8010688 <_fflush_r+0x70>)
 8010672:	429c      	cmp	r4, r3
 8010674:	d101      	bne.n	801067a <_fflush_r+0x62>
 8010676:	68ac      	ldr	r4, [r5, #8]
 8010678:	e7df      	b.n	801063a <_fflush_r+0x22>
 801067a:	4b04      	ldr	r3, [pc, #16]	; (801068c <_fflush_r+0x74>)
 801067c:	429c      	cmp	r4, r3
 801067e:	bf08      	it	eq
 8010680:	68ec      	ldreq	r4, [r5, #12]
 8010682:	e7da      	b.n	801063a <_fflush_r+0x22>
 8010684:	08014120 	.word	0x08014120
 8010688:	08014140 	.word	0x08014140
 801068c:	08014100 	.word	0x08014100

08010690 <rshift>:
 8010690:	6903      	ldr	r3, [r0, #16]
 8010692:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801069a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801069e:	f100 0414 	add.w	r4, r0, #20
 80106a2:	dd45      	ble.n	8010730 <rshift+0xa0>
 80106a4:	f011 011f 	ands.w	r1, r1, #31
 80106a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80106ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80106b0:	d10c      	bne.n	80106cc <rshift+0x3c>
 80106b2:	f100 0710 	add.w	r7, r0, #16
 80106b6:	4629      	mov	r1, r5
 80106b8:	42b1      	cmp	r1, r6
 80106ba:	d334      	bcc.n	8010726 <rshift+0x96>
 80106bc:	1a9b      	subs	r3, r3, r2
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	1eea      	subs	r2, r5, #3
 80106c2:	4296      	cmp	r6, r2
 80106c4:	bf38      	it	cc
 80106c6:	2300      	movcc	r3, #0
 80106c8:	4423      	add	r3, r4
 80106ca:	e015      	b.n	80106f8 <rshift+0x68>
 80106cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80106d0:	f1c1 0820 	rsb	r8, r1, #32
 80106d4:	40cf      	lsrs	r7, r1
 80106d6:	f105 0e04 	add.w	lr, r5, #4
 80106da:	46a1      	mov	r9, r4
 80106dc:	4576      	cmp	r6, lr
 80106de:	46f4      	mov	ip, lr
 80106e0:	d815      	bhi.n	801070e <rshift+0x7e>
 80106e2:	1a9a      	subs	r2, r3, r2
 80106e4:	0092      	lsls	r2, r2, #2
 80106e6:	3a04      	subs	r2, #4
 80106e8:	3501      	adds	r5, #1
 80106ea:	42ae      	cmp	r6, r5
 80106ec:	bf38      	it	cc
 80106ee:	2200      	movcc	r2, #0
 80106f0:	18a3      	adds	r3, r4, r2
 80106f2:	50a7      	str	r7, [r4, r2]
 80106f4:	b107      	cbz	r7, 80106f8 <rshift+0x68>
 80106f6:	3304      	adds	r3, #4
 80106f8:	1b1a      	subs	r2, r3, r4
 80106fa:	42a3      	cmp	r3, r4
 80106fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010700:	bf08      	it	eq
 8010702:	2300      	moveq	r3, #0
 8010704:	6102      	str	r2, [r0, #16]
 8010706:	bf08      	it	eq
 8010708:	6143      	streq	r3, [r0, #20]
 801070a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801070e:	f8dc c000 	ldr.w	ip, [ip]
 8010712:	fa0c fc08 	lsl.w	ip, ip, r8
 8010716:	ea4c 0707 	orr.w	r7, ip, r7
 801071a:	f849 7b04 	str.w	r7, [r9], #4
 801071e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010722:	40cf      	lsrs	r7, r1
 8010724:	e7da      	b.n	80106dc <rshift+0x4c>
 8010726:	f851 cb04 	ldr.w	ip, [r1], #4
 801072a:	f847 cf04 	str.w	ip, [r7, #4]!
 801072e:	e7c3      	b.n	80106b8 <rshift+0x28>
 8010730:	4623      	mov	r3, r4
 8010732:	e7e1      	b.n	80106f8 <rshift+0x68>

08010734 <__hexdig_fun>:
 8010734:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010738:	2b09      	cmp	r3, #9
 801073a:	d802      	bhi.n	8010742 <__hexdig_fun+0xe>
 801073c:	3820      	subs	r0, #32
 801073e:	b2c0      	uxtb	r0, r0
 8010740:	4770      	bx	lr
 8010742:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010746:	2b05      	cmp	r3, #5
 8010748:	d801      	bhi.n	801074e <__hexdig_fun+0x1a>
 801074a:	3847      	subs	r0, #71	; 0x47
 801074c:	e7f7      	b.n	801073e <__hexdig_fun+0xa>
 801074e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010752:	2b05      	cmp	r3, #5
 8010754:	d801      	bhi.n	801075a <__hexdig_fun+0x26>
 8010756:	3827      	subs	r0, #39	; 0x27
 8010758:	e7f1      	b.n	801073e <__hexdig_fun+0xa>
 801075a:	2000      	movs	r0, #0
 801075c:	4770      	bx	lr
	...

08010760 <__gethex>:
 8010760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010764:	ed2d 8b02 	vpush	{d8}
 8010768:	b089      	sub	sp, #36	; 0x24
 801076a:	ee08 0a10 	vmov	s16, r0
 801076e:	9304      	str	r3, [sp, #16]
 8010770:	4bb4      	ldr	r3, [pc, #720]	; (8010a44 <__gethex+0x2e4>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	468b      	mov	fp, r1
 801077a:	4690      	mov	r8, r2
 801077c:	f7ef fd48 	bl	8000210 <strlen>
 8010780:	9b01      	ldr	r3, [sp, #4]
 8010782:	f8db 2000 	ldr.w	r2, [fp]
 8010786:	4403      	add	r3, r0
 8010788:	4682      	mov	sl, r0
 801078a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801078e:	9305      	str	r3, [sp, #20]
 8010790:	1c93      	adds	r3, r2, #2
 8010792:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010796:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801079a:	32fe      	adds	r2, #254	; 0xfe
 801079c:	18d1      	adds	r1, r2, r3
 801079e:	461f      	mov	r7, r3
 80107a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80107a4:	9100      	str	r1, [sp, #0]
 80107a6:	2830      	cmp	r0, #48	; 0x30
 80107a8:	d0f8      	beq.n	801079c <__gethex+0x3c>
 80107aa:	f7ff ffc3 	bl	8010734 <__hexdig_fun>
 80107ae:	4604      	mov	r4, r0
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d13a      	bne.n	801082a <__gethex+0xca>
 80107b4:	9901      	ldr	r1, [sp, #4]
 80107b6:	4652      	mov	r2, sl
 80107b8:	4638      	mov	r0, r7
 80107ba:	f001 fe95 	bl	80124e8 <strncmp>
 80107be:	4605      	mov	r5, r0
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d168      	bne.n	8010896 <__gethex+0x136>
 80107c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80107c8:	eb07 060a 	add.w	r6, r7, sl
 80107cc:	f7ff ffb2 	bl	8010734 <__hexdig_fun>
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d062      	beq.n	801089a <__gethex+0x13a>
 80107d4:	4633      	mov	r3, r6
 80107d6:	7818      	ldrb	r0, [r3, #0]
 80107d8:	2830      	cmp	r0, #48	; 0x30
 80107da:	461f      	mov	r7, r3
 80107dc:	f103 0301 	add.w	r3, r3, #1
 80107e0:	d0f9      	beq.n	80107d6 <__gethex+0x76>
 80107e2:	f7ff ffa7 	bl	8010734 <__hexdig_fun>
 80107e6:	2301      	movs	r3, #1
 80107e8:	fab0 f480 	clz	r4, r0
 80107ec:	0964      	lsrs	r4, r4, #5
 80107ee:	4635      	mov	r5, r6
 80107f0:	9300      	str	r3, [sp, #0]
 80107f2:	463a      	mov	r2, r7
 80107f4:	4616      	mov	r6, r2
 80107f6:	3201      	adds	r2, #1
 80107f8:	7830      	ldrb	r0, [r6, #0]
 80107fa:	f7ff ff9b 	bl	8010734 <__hexdig_fun>
 80107fe:	2800      	cmp	r0, #0
 8010800:	d1f8      	bne.n	80107f4 <__gethex+0x94>
 8010802:	9901      	ldr	r1, [sp, #4]
 8010804:	4652      	mov	r2, sl
 8010806:	4630      	mov	r0, r6
 8010808:	f001 fe6e 	bl	80124e8 <strncmp>
 801080c:	b980      	cbnz	r0, 8010830 <__gethex+0xd0>
 801080e:	b94d      	cbnz	r5, 8010824 <__gethex+0xc4>
 8010810:	eb06 050a 	add.w	r5, r6, sl
 8010814:	462a      	mov	r2, r5
 8010816:	4616      	mov	r6, r2
 8010818:	3201      	adds	r2, #1
 801081a:	7830      	ldrb	r0, [r6, #0]
 801081c:	f7ff ff8a 	bl	8010734 <__hexdig_fun>
 8010820:	2800      	cmp	r0, #0
 8010822:	d1f8      	bne.n	8010816 <__gethex+0xb6>
 8010824:	1bad      	subs	r5, r5, r6
 8010826:	00ad      	lsls	r5, r5, #2
 8010828:	e004      	b.n	8010834 <__gethex+0xd4>
 801082a:	2400      	movs	r4, #0
 801082c:	4625      	mov	r5, r4
 801082e:	e7e0      	b.n	80107f2 <__gethex+0x92>
 8010830:	2d00      	cmp	r5, #0
 8010832:	d1f7      	bne.n	8010824 <__gethex+0xc4>
 8010834:	7833      	ldrb	r3, [r6, #0]
 8010836:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801083a:	2b50      	cmp	r3, #80	; 0x50
 801083c:	d13b      	bne.n	80108b6 <__gethex+0x156>
 801083e:	7873      	ldrb	r3, [r6, #1]
 8010840:	2b2b      	cmp	r3, #43	; 0x2b
 8010842:	d02c      	beq.n	801089e <__gethex+0x13e>
 8010844:	2b2d      	cmp	r3, #45	; 0x2d
 8010846:	d02e      	beq.n	80108a6 <__gethex+0x146>
 8010848:	1c71      	adds	r1, r6, #1
 801084a:	f04f 0900 	mov.w	r9, #0
 801084e:	7808      	ldrb	r0, [r1, #0]
 8010850:	f7ff ff70 	bl	8010734 <__hexdig_fun>
 8010854:	1e43      	subs	r3, r0, #1
 8010856:	b2db      	uxtb	r3, r3
 8010858:	2b18      	cmp	r3, #24
 801085a:	d82c      	bhi.n	80108b6 <__gethex+0x156>
 801085c:	f1a0 0210 	sub.w	r2, r0, #16
 8010860:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010864:	f7ff ff66 	bl	8010734 <__hexdig_fun>
 8010868:	1e43      	subs	r3, r0, #1
 801086a:	b2db      	uxtb	r3, r3
 801086c:	2b18      	cmp	r3, #24
 801086e:	d91d      	bls.n	80108ac <__gethex+0x14c>
 8010870:	f1b9 0f00 	cmp.w	r9, #0
 8010874:	d000      	beq.n	8010878 <__gethex+0x118>
 8010876:	4252      	negs	r2, r2
 8010878:	4415      	add	r5, r2
 801087a:	f8cb 1000 	str.w	r1, [fp]
 801087e:	b1e4      	cbz	r4, 80108ba <__gethex+0x15a>
 8010880:	9b00      	ldr	r3, [sp, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	bf14      	ite	ne
 8010886:	2700      	movne	r7, #0
 8010888:	2706      	moveq	r7, #6
 801088a:	4638      	mov	r0, r7
 801088c:	b009      	add	sp, #36	; 0x24
 801088e:	ecbd 8b02 	vpop	{d8}
 8010892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010896:	463e      	mov	r6, r7
 8010898:	4625      	mov	r5, r4
 801089a:	2401      	movs	r4, #1
 801089c:	e7ca      	b.n	8010834 <__gethex+0xd4>
 801089e:	f04f 0900 	mov.w	r9, #0
 80108a2:	1cb1      	adds	r1, r6, #2
 80108a4:	e7d3      	b.n	801084e <__gethex+0xee>
 80108a6:	f04f 0901 	mov.w	r9, #1
 80108aa:	e7fa      	b.n	80108a2 <__gethex+0x142>
 80108ac:	230a      	movs	r3, #10
 80108ae:	fb03 0202 	mla	r2, r3, r2, r0
 80108b2:	3a10      	subs	r2, #16
 80108b4:	e7d4      	b.n	8010860 <__gethex+0x100>
 80108b6:	4631      	mov	r1, r6
 80108b8:	e7df      	b.n	801087a <__gethex+0x11a>
 80108ba:	1bf3      	subs	r3, r6, r7
 80108bc:	3b01      	subs	r3, #1
 80108be:	4621      	mov	r1, r4
 80108c0:	2b07      	cmp	r3, #7
 80108c2:	dc0b      	bgt.n	80108dc <__gethex+0x17c>
 80108c4:	ee18 0a10 	vmov	r0, s16
 80108c8:	f000 fa82 	bl	8010dd0 <_Balloc>
 80108cc:	4604      	mov	r4, r0
 80108ce:	b940      	cbnz	r0, 80108e2 <__gethex+0x182>
 80108d0:	4b5d      	ldr	r3, [pc, #372]	; (8010a48 <__gethex+0x2e8>)
 80108d2:	4602      	mov	r2, r0
 80108d4:	21de      	movs	r1, #222	; 0xde
 80108d6:	485d      	ldr	r0, [pc, #372]	; (8010a4c <__gethex+0x2ec>)
 80108d8:	f001 fed6 	bl	8012688 <__assert_func>
 80108dc:	3101      	adds	r1, #1
 80108de:	105b      	asrs	r3, r3, #1
 80108e0:	e7ee      	b.n	80108c0 <__gethex+0x160>
 80108e2:	f100 0914 	add.w	r9, r0, #20
 80108e6:	f04f 0b00 	mov.w	fp, #0
 80108ea:	f1ca 0301 	rsb	r3, sl, #1
 80108ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80108f2:	f8cd b000 	str.w	fp, [sp]
 80108f6:	9306      	str	r3, [sp, #24]
 80108f8:	42b7      	cmp	r7, r6
 80108fa:	d340      	bcc.n	801097e <__gethex+0x21e>
 80108fc:	9802      	ldr	r0, [sp, #8]
 80108fe:	9b00      	ldr	r3, [sp, #0]
 8010900:	f840 3b04 	str.w	r3, [r0], #4
 8010904:	eba0 0009 	sub.w	r0, r0, r9
 8010908:	1080      	asrs	r0, r0, #2
 801090a:	0146      	lsls	r6, r0, #5
 801090c:	6120      	str	r0, [r4, #16]
 801090e:	4618      	mov	r0, r3
 8010910:	f000 fb50 	bl	8010fb4 <__hi0bits>
 8010914:	1a30      	subs	r0, r6, r0
 8010916:	f8d8 6000 	ldr.w	r6, [r8]
 801091a:	42b0      	cmp	r0, r6
 801091c:	dd63      	ble.n	80109e6 <__gethex+0x286>
 801091e:	1b87      	subs	r7, r0, r6
 8010920:	4639      	mov	r1, r7
 8010922:	4620      	mov	r0, r4
 8010924:	f000 fef4 	bl	8011710 <__any_on>
 8010928:	4682      	mov	sl, r0
 801092a:	b1a8      	cbz	r0, 8010958 <__gethex+0x1f8>
 801092c:	1e7b      	subs	r3, r7, #1
 801092e:	1159      	asrs	r1, r3, #5
 8010930:	f003 021f 	and.w	r2, r3, #31
 8010934:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010938:	f04f 0a01 	mov.w	sl, #1
 801093c:	fa0a f202 	lsl.w	r2, sl, r2
 8010940:	420a      	tst	r2, r1
 8010942:	d009      	beq.n	8010958 <__gethex+0x1f8>
 8010944:	4553      	cmp	r3, sl
 8010946:	dd05      	ble.n	8010954 <__gethex+0x1f4>
 8010948:	1eb9      	subs	r1, r7, #2
 801094a:	4620      	mov	r0, r4
 801094c:	f000 fee0 	bl	8011710 <__any_on>
 8010950:	2800      	cmp	r0, #0
 8010952:	d145      	bne.n	80109e0 <__gethex+0x280>
 8010954:	f04f 0a02 	mov.w	sl, #2
 8010958:	4639      	mov	r1, r7
 801095a:	4620      	mov	r0, r4
 801095c:	f7ff fe98 	bl	8010690 <rshift>
 8010960:	443d      	add	r5, r7
 8010962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010966:	42ab      	cmp	r3, r5
 8010968:	da4c      	bge.n	8010a04 <__gethex+0x2a4>
 801096a:	ee18 0a10 	vmov	r0, s16
 801096e:	4621      	mov	r1, r4
 8010970:	f000 fa6e 	bl	8010e50 <_Bfree>
 8010974:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010976:	2300      	movs	r3, #0
 8010978:	6013      	str	r3, [r2, #0]
 801097a:	27a3      	movs	r7, #163	; 0xa3
 801097c:	e785      	b.n	801088a <__gethex+0x12a>
 801097e:	1e73      	subs	r3, r6, #1
 8010980:	9a05      	ldr	r2, [sp, #20]
 8010982:	9303      	str	r3, [sp, #12]
 8010984:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010988:	4293      	cmp	r3, r2
 801098a:	d019      	beq.n	80109c0 <__gethex+0x260>
 801098c:	f1bb 0f20 	cmp.w	fp, #32
 8010990:	d107      	bne.n	80109a2 <__gethex+0x242>
 8010992:	9b02      	ldr	r3, [sp, #8]
 8010994:	9a00      	ldr	r2, [sp, #0]
 8010996:	f843 2b04 	str.w	r2, [r3], #4
 801099a:	9302      	str	r3, [sp, #8]
 801099c:	2300      	movs	r3, #0
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	469b      	mov	fp, r3
 80109a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80109a6:	f7ff fec5 	bl	8010734 <__hexdig_fun>
 80109aa:	9b00      	ldr	r3, [sp, #0]
 80109ac:	f000 000f 	and.w	r0, r0, #15
 80109b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80109b4:	4303      	orrs	r3, r0
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	f10b 0b04 	add.w	fp, fp, #4
 80109bc:	9b03      	ldr	r3, [sp, #12]
 80109be:	e00d      	b.n	80109dc <__gethex+0x27c>
 80109c0:	9b03      	ldr	r3, [sp, #12]
 80109c2:	9a06      	ldr	r2, [sp, #24]
 80109c4:	4413      	add	r3, r2
 80109c6:	42bb      	cmp	r3, r7
 80109c8:	d3e0      	bcc.n	801098c <__gethex+0x22c>
 80109ca:	4618      	mov	r0, r3
 80109cc:	9901      	ldr	r1, [sp, #4]
 80109ce:	9307      	str	r3, [sp, #28]
 80109d0:	4652      	mov	r2, sl
 80109d2:	f001 fd89 	bl	80124e8 <strncmp>
 80109d6:	9b07      	ldr	r3, [sp, #28]
 80109d8:	2800      	cmp	r0, #0
 80109da:	d1d7      	bne.n	801098c <__gethex+0x22c>
 80109dc:	461e      	mov	r6, r3
 80109de:	e78b      	b.n	80108f8 <__gethex+0x198>
 80109e0:	f04f 0a03 	mov.w	sl, #3
 80109e4:	e7b8      	b.n	8010958 <__gethex+0x1f8>
 80109e6:	da0a      	bge.n	80109fe <__gethex+0x29e>
 80109e8:	1a37      	subs	r7, r6, r0
 80109ea:	4621      	mov	r1, r4
 80109ec:	ee18 0a10 	vmov	r0, s16
 80109f0:	463a      	mov	r2, r7
 80109f2:	f000 fc49 	bl	8011288 <__lshift>
 80109f6:	1bed      	subs	r5, r5, r7
 80109f8:	4604      	mov	r4, r0
 80109fa:	f100 0914 	add.w	r9, r0, #20
 80109fe:	f04f 0a00 	mov.w	sl, #0
 8010a02:	e7ae      	b.n	8010962 <__gethex+0x202>
 8010a04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010a08:	42a8      	cmp	r0, r5
 8010a0a:	dd72      	ble.n	8010af2 <__gethex+0x392>
 8010a0c:	1b45      	subs	r5, r0, r5
 8010a0e:	42ae      	cmp	r6, r5
 8010a10:	dc36      	bgt.n	8010a80 <__gethex+0x320>
 8010a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	d02a      	beq.n	8010a70 <__gethex+0x310>
 8010a1a:	2b03      	cmp	r3, #3
 8010a1c:	d02c      	beq.n	8010a78 <__gethex+0x318>
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d11c      	bne.n	8010a5c <__gethex+0x2fc>
 8010a22:	42ae      	cmp	r6, r5
 8010a24:	d11a      	bne.n	8010a5c <__gethex+0x2fc>
 8010a26:	2e01      	cmp	r6, #1
 8010a28:	d112      	bne.n	8010a50 <__gethex+0x2f0>
 8010a2a:	9a04      	ldr	r2, [sp, #16]
 8010a2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a30:	6013      	str	r3, [r2, #0]
 8010a32:	2301      	movs	r3, #1
 8010a34:	6123      	str	r3, [r4, #16]
 8010a36:	f8c9 3000 	str.w	r3, [r9]
 8010a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a3c:	2762      	movs	r7, #98	; 0x62
 8010a3e:	601c      	str	r4, [r3, #0]
 8010a40:	e723      	b.n	801088a <__gethex+0x12a>
 8010a42:	bf00      	nop
 8010a44:	08014340 	.word	0x08014340
 8010a48:	080142c9 	.word	0x080142c9
 8010a4c:	080142da 	.word	0x080142da
 8010a50:	1e71      	subs	r1, r6, #1
 8010a52:	4620      	mov	r0, r4
 8010a54:	f000 fe5c 	bl	8011710 <__any_on>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d1e6      	bne.n	8010a2a <__gethex+0x2ca>
 8010a5c:	ee18 0a10 	vmov	r0, s16
 8010a60:	4621      	mov	r1, r4
 8010a62:	f000 f9f5 	bl	8010e50 <_Bfree>
 8010a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a68:	2300      	movs	r3, #0
 8010a6a:	6013      	str	r3, [r2, #0]
 8010a6c:	2750      	movs	r7, #80	; 0x50
 8010a6e:	e70c      	b.n	801088a <__gethex+0x12a>
 8010a70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1f2      	bne.n	8010a5c <__gethex+0x2fc>
 8010a76:	e7d8      	b.n	8010a2a <__gethex+0x2ca>
 8010a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1d5      	bne.n	8010a2a <__gethex+0x2ca>
 8010a7e:	e7ed      	b.n	8010a5c <__gethex+0x2fc>
 8010a80:	1e6f      	subs	r7, r5, #1
 8010a82:	f1ba 0f00 	cmp.w	sl, #0
 8010a86:	d131      	bne.n	8010aec <__gethex+0x38c>
 8010a88:	b127      	cbz	r7, 8010a94 <__gethex+0x334>
 8010a8a:	4639      	mov	r1, r7
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f000 fe3f 	bl	8011710 <__any_on>
 8010a92:	4682      	mov	sl, r0
 8010a94:	117b      	asrs	r3, r7, #5
 8010a96:	2101      	movs	r1, #1
 8010a98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010a9c:	f007 071f 	and.w	r7, r7, #31
 8010aa0:	fa01 f707 	lsl.w	r7, r1, r7
 8010aa4:	421f      	tst	r7, r3
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	bf18      	it	ne
 8010aac:	f04a 0a02 	orrne.w	sl, sl, #2
 8010ab0:	1b76      	subs	r6, r6, r5
 8010ab2:	f7ff fded 	bl	8010690 <rshift>
 8010ab6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010aba:	2702      	movs	r7, #2
 8010abc:	f1ba 0f00 	cmp.w	sl, #0
 8010ac0:	d048      	beq.n	8010b54 <__gethex+0x3f4>
 8010ac2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d015      	beq.n	8010af6 <__gethex+0x396>
 8010aca:	2b03      	cmp	r3, #3
 8010acc:	d017      	beq.n	8010afe <__gethex+0x39e>
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d109      	bne.n	8010ae6 <__gethex+0x386>
 8010ad2:	f01a 0f02 	tst.w	sl, #2
 8010ad6:	d006      	beq.n	8010ae6 <__gethex+0x386>
 8010ad8:	f8d9 0000 	ldr.w	r0, [r9]
 8010adc:	ea4a 0a00 	orr.w	sl, sl, r0
 8010ae0:	f01a 0f01 	tst.w	sl, #1
 8010ae4:	d10e      	bne.n	8010b04 <__gethex+0x3a4>
 8010ae6:	f047 0710 	orr.w	r7, r7, #16
 8010aea:	e033      	b.n	8010b54 <__gethex+0x3f4>
 8010aec:	f04f 0a01 	mov.w	sl, #1
 8010af0:	e7d0      	b.n	8010a94 <__gethex+0x334>
 8010af2:	2701      	movs	r7, #1
 8010af4:	e7e2      	b.n	8010abc <__gethex+0x35c>
 8010af6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010af8:	f1c3 0301 	rsb	r3, r3, #1
 8010afc:	9315      	str	r3, [sp, #84]	; 0x54
 8010afe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d0f0      	beq.n	8010ae6 <__gethex+0x386>
 8010b04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b08:	f104 0314 	add.w	r3, r4, #20
 8010b0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b14:	f04f 0c00 	mov.w	ip, #0
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b22:	d01c      	beq.n	8010b5e <__gethex+0x3fe>
 8010b24:	3201      	adds	r2, #1
 8010b26:	6002      	str	r2, [r0, #0]
 8010b28:	2f02      	cmp	r7, #2
 8010b2a:	f104 0314 	add.w	r3, r4, #20
 8010b2e:	d13f      	bne.n	8010bb0 <__gethex+0x450>
 8010b30:	f8d8 2000 	ldr.w	r2, [r8]
 8010b34:	3a01      	subs	r2, #1
 8010b36:	42b2      	cmp	r2, r6
 8010b38:	d10a      	bne.n	8010b50 <__gethex+0x3f0>
 8010b3a:	1171      	asrs	r1, r6, #5
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b42:	f006 061f 	and.w	r6, r6, #31
 8010b46:	fa02 f606 	lsl.w	r6, r2, r6
 8010b4a:	421e      	tst	r6, r3
 8010b4c:	bf18      	it	ne
 8010b4e:	4617      	movne	r7, r2
 8010b50:	f047 0720 	orr.w	r7, r7, #32
 8010b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b56:	601c      	str	r4, [r3, #0]
 8010b58:	9b04      	ldr	r3, [sp, #16]
 8010b5a:	601d      	str	r5, [r3, #0]
 8010b5c:	e695      	b.n	801088a <__gethex+0x12a>
 8010b5e:	4299      	cmp	r1, r3
 8010b60:	f843 cc04 	str.w	ip, [r3, #-4]
 8010b64:	d8d8      	bhi.n	8010b18 <__gethex+0x3b8>
 8010b66:	68a3      	ldr	r3, [r4, #8]
 8010b68:	459b      	cmp	fp, r3
 8010b6a:	db19      	blt.n	8010ba0 <__gethex+0x440>
 8010b6c:	6861      	ldr	r1, [r4, #4]
 8010b6e:	ee18 0a10 	vmov	r0, s16
 8010b72:	3101      	adds	r1, #1
 8010b74:	f000 f92c 	bl	8010dd0 <_Balloc>
 8010b78:	4681      	mov	r9, r0
 8010b7a:	b918      	cbnz	r0, 8010b84 <__gethex+0x424>
 8010b7c:	4b1a      	ldr	r3, [pc, #104]	; (8010be8 <__gethex+0x488>)
 8010b7e:	4602      	mov	r2, r0
 8010b80:	2184      	movs	r1, #132	; 0x84
 8010b82:	e6a8      	b.n	80108d6 <__gethex+0x176>
 8010b84:	6922      	ldr	r2, [r4, #16]
 8010b86:	3202      	adds	r2, #2
 8010b88:	f104 010c 	add.w	r1, r4, #12
 8010b8c:	0092      	lsls	r2, r2, #2
 8010b8e:	300c      	adds	r0, #12
 8010b90:	f7fe fa15 	bl	800efbe <memcpy>
 8010b94:	4621      	mov	r1, r4
 8010b96:	ee18 0a10 	vmov	r0, s16
 8010b9a:	f000 f959 	bl	8010e50 <_Bfree>
 8010b9e:	464c      	mov	r4, r9
 8010ba0:	6923      	ldr	r3, [r4, #16]
 8010ba2:	1c5a      	adds	r2, r3, #1
 8010ba4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ba8:	6122      	str	r2, [r4, #16]
 8010baa:	2201      	movs	r2, #1
 8010bac:	615a      	str	r2, [r3, #20]
 8010bae:	e7bb      	b.n	8010b28 <__gethex+0x3c8>
 8010bb0:	6922      	ldr	r2, [r4, #16]
 8010bb2:	455a      	cmp	r2, fp
 8010bb4:	dd0b      	ble.n	8010bce <__gethex+0x46e>
 8010bb6:	2101      	movs	r1, #1
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f7ff fd69 	bl	8010690 <rshift>
 8010bbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010bc2:	3501      	adds	r5, #1
 8010bc4:	42ab      	cmp	r3, r5
 8010bc6:	f6ff aed0 	blt.w	801096a <__gethex+0x20a>
 8010bca:	2701      	movs	r7, #1
 8010bcc:	e7c0      	b.n	8010b50 <__gethex+0x3f0>
 8010bce:	f016 061f 	ands.w	r6, r6, #31
 8010bd2:	d0fa      	beq.n	8010bca <__gethex+0x46a>
 8010bd4:	4453      	add	r3, sl
 8010bd6:	f1c6 0620 	rsb	r6, r6, #32
 8010bda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010bde:	f000 f9e9 	bl	8010fb4 <__hi0bits>
 8010be2:	42b0      	cmp	r0, r6
 8010be4:	dbe7      	blt.n	8010bb6 <__gethex+0x456>
 8010be6:	e7f0      	b.n	8010bca <__gethex+0x46a>
 8010be8:	080142c9 	.word	0x080142c9

08010bec <L_shift>:
 8010bec:	f1c2 0208 	rsb	r2, r2, #8
 8010bf0:	0092      	lsls	r2, r2, #2
 8010bf2:	b570      	push	{r4, r5, r6, lr}
 8010bf4:	f1c2 0620 	rsb	r6, r2, #32
 8010bf8:	6843      	ldr	r3, [r0, #4]
 8010bfa:	6804      	ldr	r4, [r0, #0]
 8010bfc:	fa03 f506 	lsl.w	r5, r3, r6
 8010c00:	432c      	orrs	r4, r5
 8010c02:	40d3      	lsrs	r3, r2
 8010c04:	6004      	str	r4, [r0, #0]
 8010c06:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c0a:	4288      	cmp	r0, r1
 8010c0c:	d3f4      	bcc.n	8010bf8 <L_shift+0xc>
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}

08010c10 <__match>:
 8010c10:	b530      	push	{r4, r5, lr}
 8010c12:	6803      	ldr	r3, [r0, #0]
 8010c14:	3301      	adds	r3, #1
 8010c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c1a:	b914      	cbnz	r4, 8010c22 <__match+0x12>
 8010c1c:	6003      	str	r3, [r0, #0]
 8010c1e:	2001      	movs	r0, #1
 8010c20:	bd30      	pop	{r4, r5, pc}
 8010c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010c2a:	2d19      	cmp	r5, #25
 8010c2c:	bf98      	it	ls
 8010c2e:	3220      	addls	r2, #32
 8010c30:	42a2      	cmp	r2, r4
 8010c32:	d0f0      	beq.n	8010c16 <__match+0x6>
 8010c34:	2000      	movs	r0, #0
 8010c36:	e7f3      	b.n	8010c20 <__match+0x10>

08010c38 <__hexnan>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	680b      	ldr	r3, [r1, #0]
 8010c3e:	115e      	asrs	r6, r3, #5
 8010c40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010c44:	f013 031f 	ands.w	r3, r3, #31
 8010c48:	b087      	sub	sp, #28
 8010c4a:	bf18      	it	ne
 8010c4c:	3604      	addne	r6, #4
 8010c4e:	2500      	movs	r5, #0
 8010c50:	1f37      	subs	r7, r6, #4
 8010c52:	4690      	mov	r8, r2
 8010c54:	6802      	ldr	r2, [r0, #0]
 8010c56:	9301      	str	r3, [sp, #4]
 8010c58:	4682      	mov	sl, r0
 8010c5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010c5e:	46b9      	mov	r9, r7
 8010c60:	463c      	mov	r4, r7
 8010c62:	9502      	str	r5, [sp, #8]
 8010c64:	46ab      	mov	fp, r5
 8010c66:	7851      	ldrb	r1, [r2, #1]
 8010c68:	1c53      	adds	r3, r2, #1
 8010c6a:	9303      	str	r3, [sp, #12]
 8010c6c:	b341      	cbz	r1, 8010cc0 <__hexnan+0x88>
 8010c6e:	4608      	mov	r0, r1
 8010c70:	9205      	str	r2, [sp, #20]
 8010c72:	9104      	str	r1, [sp, #16]
 8010c74:	f7ff fd5e 	bl	8010734 <__hexdig_fun>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	d14f      	bne.n	8010d1c <__hexnan+0xe4>
 8010c7c:	9904      	ldr	r1, [sp, #16]
 8010c7e:	9a05      	ldr	r2, [sp, #20]
 8010c80:	2920      	cmp	r1, #32
 8010c82:	d818      	bhi.n	8010cb6 <__hexnan+0x7e>
 8010c84:	9b02      	ldr	r3, [sp, #8]
 8010c86:	459b      	cmp	fp, r3
 8010c88:	dd13      	ble.n	8010cb2 <__hexnan+0x7a>
 8010c8a:	454c      	cmp	r4, r9
 8010c8c:	d206      	bcs.n	8010c9c <__hexnan+0x64>
 8010c8e:	2d07      	cmp	r5, #7
 8010c90:	dc04      	bgt.n	8010c9c <__hexnan+0x64>
 8010c92:	462a      	mov	r2, r5
 8010c94:	4649      	mov	r1, r9
 8010c96:	4620      	mov	r0, r4
 8010c98:	f7ff ffa8 	bl	8010bec <L_shift>
 8010c9c:	4544      	cmp	r4, r8
 8010c9e:	d950      	bls.n	8010d42 <__hexnan+0x10a>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f1a4 0904 	sub.w	r9, r4, #4
 8010ca6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010caa:	f8cd b008 	str.w	fp, [sp, #8]
 8010cae:	464c      	mov	r4, r9
 8010cb0:	461d      	mov	r5, r3
 8010cb2:	9a03      	ldr	r2, [sp, #12]
 8010cb4:	e7d7      	b.n	8010c66 <__hexnan+0x2e>
 8010cb6:	2929      	cmp	r1, #41	; 0x29
 8010cb8:	d156      	bne.n	8010d68 <__hexnan+0x130>
 8010cba:	3202      	adds	r2, #2
 8010cbc:	f8ca 2000 	str.w	r2, [sl]
 8010cc0:	f1bb 0f00 	cmp.w	fp, #0
 8010cc4:	d050      	beq.n	8010d68 <__hexnan+0x130>
 8010cc6:	454c      	cmp	r4, r9
 8010cc8:	d206      	bcs.n	8010cd8 <__hexnan+0xa0>
 8010cca:	2d07      	cmp	r5, #7
 8010ccc:	dc04      	bgt.n	8010cd8 <__hexnan+0xa0>
 8010cce:	462a      	mov	r2, r5
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f7ff ff8a 	bl	8010bec <L_shift>
 8010cd8:	4544      	cmp	r4, r8
 8010cda:	d934      	bls.n	8010d46 <__hexnan+0x10e>
 8010cdc:	f1a8 0204 	sub.w	r2, r8, #4
 8010ce0:	4623      	mov	r3, r4
 8010ce2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010ce6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010cea:	429f      	cmp	r7, r3
 8010cec:	d2f9      	bcs.n	8010ce2 <__hexnan+0xaa>
 8010cee:	1b3b      	subs	r3, r7, r4
 8010cf0:	f023 0303 	bic.w	r3, r3, #3
 8010cf4:	3304      	adds	r3, #4
 8010cf6:	3401      	adds	r4, #1
 8010cf8:	3e03      	subs	r6, #3
 8010cfa:	42b4      	cmp	r4, r6
 8010cfc:	bf88      	it	hi
 8010cfe:	2304      	movhi	r3, #4
 8010d00:	4443      	add	r3, r8
 8010d02:	2200      	movs	r2, #0
 8010d04:	f843 2b04 	str.w	r2, [r3], #4
 8010d08:	429f      	cmp	r7, r3
 8010d0a:	d2fb      	bcs.n	8010d04 <__hexnan+0xcc>
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	b91b      	cbnz	r3, 8010d18 <__hexnan+0xe0>
 8010d10:	4547      	cmp	r7, r8
 8010d12:	d127      	bne.n	8010d64 <__hexnan+0x12c>
 8010d14:	2301      	movs	r3, #1
 8010d16:	603b      	str	r3, [r7, #0]
 8010d18:	2005      	movs	r0, #5
 8010d1a:	e026      	b.n	8010d6a <__hexnan+0x132>
 8010d1c:	3501      	adds	r5, #1
 8010d1e:	2d08      	cmp	r5, #8
 8010d20:	f10b 0b01 	add.w	fp, fp, #1
 8010d24:	dd06      	ble.n	8010d34 <__hexnan+0xfc>
 8010d26:	4544      	cmp	r4, r8
 8010d28:	d9c3      	bls.n	8010cb2 <__hexnan+0x7a>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d30:	2501      	movs	r5, #1
 8010d32:	3c04      	subs	r4, #4
 8010d34:	6822      	ldr	r2, [r4, #0]
 8010d36:	f000 000f 	and.w	r0, r0, #15
 8010d3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010d3e:	6022      	str	r2, [r4, #0]
 8010d40:	e7b7      	b.n	8010cb2 <__hexnan+0x7a>
 8010d42:	2508      	movs	r5, #8
 8010d44:	e7b5      	b.n	8010cb2 <__hexnan+0x7a>
 8010d46:	9b01      	ldr	r3, [sp, #4]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d0df      	beq.n	8010d0c <__hexnan+0xd4>
 8010d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d50:	f1c3 0320 	rsb	r3, r3, #32
 8010d54:	fa22 f303 	lsr.w	r3, r2, r3
 8010d58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010d5c:	401a      	ands	r2, r3
 8010d5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010d62:	e7d3      	b.n	8010d0c <__hexnan+0xd4>
 8010d64:	3f04      	subs	r7, #4
 8010d66:	e7d1      	b.n	8010d0c <__hexnan+0xd4>
 8010d68:	2004      	movs	r0, #4
 8010d6a:	b007      	add	sp, #28
 8010d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d70 <_lseek_r>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4d07      	ldr	r5, [pc, #28]	; (8010d90 <_lseek_r+0x20>)
 8010d74:	4604      	mov	r4, r0
 8010d76:	4608      	mov	r0, r1
 8010d78:	4611      	mov	r1, r2
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	602a      	str	r2, [r5, #0]
 8010d7e:	461a      	mov	r2, r3
 8010d80:	f7f2 fa9e 	bl	80032c0 <_lseek>
 8010d84:	1c43      	adds	r3, r0, #1
 8010d86:	d102      	bne.n	8010d8e <_lseek_r+0x1e>
 8010d88:	682b      	ldr	r3, [r5, #0]
 8010d8a:	b103      	cbz	r3, 8010d8e <_lseek_r+0x1e>
 8010d8c:	6023      	str	r3, [r4, #0]
 8010d8e:	bd38      	pop	{r3, r4, r5, pc}
 8010d90:	2000f650 	.word	0x2000f650

08010d94 <__ascii_mbtowc>:
 8010d94:	b082      	sub	sp, #8
 8010d96:	b901      	cbnz	r1, 8010d9a <__ascii_mbtowc+0x6>
 8010d98:	a901      	add	r1, sp, #4
 8010d9a:	b142      	cbz	r2, 8010dae <__ascii_mbtowc+0x1a>
 8010d9c:	b14b      	cbz	r3, 8010db2 <__ascii_mbtowc+0x1e>
 8010d9e:	7813      	ldrb	r3, [r2, #0]
 8010da0:	600b      	str	r3, [r1, #0]
 8010da2:	7812      	ldrb	r2, [r2, #0]
 8010da4:	1e10      	subs	r0, r2, #0
 8010da6:	bf18      	it	ne
 8010da8:	2001      	movne	r0, #1
 8010daa:	b002      	add	sp, #8
 8010dac:	4770      	bx	lr
 8010dae:	4610      	mov	r0, r2
 8010db0:	e7fb      	b.n	8010daa <__ascii_mbtowc+0x16>
 8010db2:	f06f 0001 	mvn.w	r0, #1
 8010db6:	e7f8      	b.n	8010daa <__ascii_mbtowc+0x16>

08010db8 <__malloc_lock>:
 8010db8:	4801      	ldr	r0, [pc, #4]	; (8010dc0 <__malloc_lock+0x8>)
 8010dba:	f7fe b8fe 	b.w	800efba <__retarget_lock_acquire_recursive>
 8010dbe:	bf00      	nop
 8010dc0:	2000f644 	.word	0x2000f644

08010dc4 <__malloc_unlock>:
 8010dc4:	4801      	ldr	r0, [pc, #4]	; (8010dcc <__malloc_unlock+0x8>)
 8010dc6:	f7fe b8f9 	b.w	800efbc <__retarget_lock_release_recursive>
 8010dca:	bf00      	nop
 8010dcc:	2000f644 	.word	0x2000f644

08010dd0 <_Balloc>:
 8010dd0:	b570      	push	{r4, r5, r6, lr}
 8010dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010dd4:	4604      	mov	r4, r0
 8010dd6:	460d      	mov	r5, r1
 8010dd8:	b976      	cbnz	r6, 8010df8 <_Balloc+0x28>
 8010dda:	2010      	movs	r0, #16
 8010ddc:	f001 fc84 	bl	80126e8 <malloc>
 8010de0:	4602      	mov	r2, r0
 8010de2:	6260      	str	r0, [r4, #36]	; 0x24
 8010de4:	b920      	cbnz	r0, 8010df0 <_Balloc+0x20>
 8010de6:	4b18      	ldr	r3, [pc, #96]	; (8010e48 <_Balloc+0x78>)
 8010de8:	4818      	ldr	r0, [pc, #96]	; (8010e4c <_Balloc+0x7c>)
 8010dea:	2166      	movs	r1, #102	; 0x66
 8010dec:	f001 fc4c 	bl	8012688 <__assert_func>
 8010df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010df4:	6006      	str	r6, [r0, #0]
 8010df6:	60c6      	str	r6, [r0, #12]
 8010df8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010dfa:	68f3      	ldr	r3, [r6, #12]
 8010dfc:	b183      	cbz	r3, 8010e20 <_Balloc+0x50>
 8010dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e06:	b9b8      	cbnz	r0, 8010e38 <_Balloc+0x68>
 8010e08:	2101      	movs	r1, #1
 8010e0a:	fa01 f605 	lsl.w	r6, r1, r5
 8010e0e:	1d72      	adds	r2, r6, #5
 8010e10:	0092      	lsls	r2, r2, #2
 8010e12:	4620      	mov	r0, r4
 8010e14:	f000 fc9d 	bl	8011752 <_calloc_r>
 8010e18:	b160      	cbz	r0, 8010e34 <_Balloc+0x64>
 8010e1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e1e:	e00e      	b.n	8010e3e <_Balloc+0x6e>
 8010e20:	2221      	movs	r2, #33	; 0x21
 8010e22:	2104      	movs	r1, #4
 8010e24:	4620      	mov	r0, r4
 8010e26:	f000 fc94 	bl	8011752 <_calloc_r>
 8010e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e2c:	60f0      	str	r0, [r6, #12]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d1e4      	bne.n	8010dfe <_Balloc+0x2e>
 8010e34:	2000      	movs	r0, #0
 8010e36:	bd70      	pop	{r4, r5, r6, pc}
 8010e38:	6802      	ldr	r2, [r0, #0]
 8010e3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e44:	e7f7      	b.n	8010e36 <_Balloc+0x66>
 8010e46:	bf00      	nop
 8010e48:	08014354 	.word	0x08014354
 8010e4c:	0801436b 	.word	0x0801436b

08010e50 <_Bfree>:
 8010e50:	b570      	push	{r4, r5, r6, lr}
 8010e52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e54:	4605      	mov	r5, r0
 8010e56:	460c      	mov	r4, r1
 8010e58:	b976      	cbnz	r6, 8010e78 <_Bfree+0x28>
 8010e5a:	2010      	movs	r0, #16
 8010e5c:	f001 fc44 	bl	80126e8 <malloc>
 8010e60:	4602      	mov	r2, r0
 8010e62:	6268      	str	r0, [r5, #36]	; 0x24
 8010e64:	b920      	cbnz	r0, 8010e70 <_Bfree+0x20>
 8010e66:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <_Bfree+0x3c>)
 8010e68:	4809      	ldr	r0, [pc, #36]	; (8010e90 <_Bfree+0x40>)
 8010e6a:	218a      	movs	r1, #138	; 0x8a
 8010e6c:	f001 fc0c 	bl	8012688 <__assert_func>
 8010e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e74:	6006      	str	r6, [r0, #0]
 8010e76:	60c6      	str	r6, [r0, #12]
 8010e78:	b13c      	cbz	r4, 8010e8a <_Bfree+0x3a>
 8010e7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e7c:	6862      	ldr	r2, [r4, #4]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e84:	6021      	str	r1, [r4, #0]
 8010e86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e8a:	bd70      	pop	{r4, r5, r6, pc}
 8010e8c:	08014354 	.word	0x08014354
 8010e90:	0801436b 	.word	0x0801436b

08010e94 <__multadd>:
 8010e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e98:	690d      	ldr	r5, [r1, #16]
 8010e9a:	4607      	mov	r7, r0
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	461e      	mov	r6, r3
 8010ea0:	f101 0c14 	add.w	ip, r1, #20
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	f8dc 3000 	ldr.w	r3, [ip]
 8010eaa:	b299      	uxth	r1, r3
 8010eac:	fb02 6101 	mla	r1, r2, r1, r6
 8010eb0:	0c1e      	lsrs	r6, r3, #16
 8010eb2:	0c0b      	lsrs	r3, r1, #16
 8010eb4:	fb02 3306 	mla	r3, r2, r6, r3
 8010eb8:	b289      	uxth	r1, r1
 8010eba:	3001      	adds	r0, #1
 8010ebc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ec0:	4285      	cmp	r5, r0
 8010ec2:	f84c 1b04 	str.w	r1, [ip], #4
 8010ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010eca:	dcec      	bgt.n	8010ea6 <__multadd+0x12>
 8010ecc:	b30e      	cbz	r6, 8010f12 <__multadd+0x7e>
 8010ece:	68a3      	ldr	r3, [r4, #8]
 8010ed0:	42ab      	cmp	r3, r5
 8010ed2:	dc19      	bgt.n	8010f08 <__multadd+0x74>
 8010ed4:	6861      	ldr	r1, [r4, #4]
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	3101      	adds	r1, #1
 8010eda:	f7ff ff79 	bl	8010dd0 <_Balloc>
 8010ede:	4680      	mov	r8, r0
 8010ee0:	b928      	cbnz	r0, 8010eee <__multadd+0x5a>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	; (8010f18 <__multadd+0x84>)
 8010ee6:	480d      	ldr	r0, [pc, #52]	; (8010f1c <__multadd+0x88>)
 8010ee8:	21b5      	movs	r1, #181	; 0xb5
 8010eea:	f001 fbcd 	bl	8012688 <__assert_func>
 8010eee:	6922      	ldr	r2, [r4, #16]
 8010ef0:	3202      	adds	r2, #2
 8010ef2:	f104 010c 	add.w	r1, r4, #12
 8010ef6:	0092      	lsls	r2, r2, #2
 8010ef8:	300c      	adds	r0, #12
 8010efa:	f7fe f860 	bl	800efbe <memcpy>
 8010efe:	4621      	mov	r1, r4
 8010f00:	4638      	mov	r0, r7
 8010f02:	f7ff ffa5 	bl	8010e50 <_Bfree>
 8010f06:	4644      	mov	r4, r8
 8010f08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f0c:	3501      	adds	r5, #1
 8010f0e:	615e      	str	r6, [r3, #20]
 8010f10:	6125      	str	r5, [r4, #16]
 8010f12:	4620      	mov	r0, r4
 8010f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f18:	080142c9 	.word	0x080142c9
 8010f1c:	0801436b 	.word	0x0801436b

08010f20 <__s2b>:
 8010f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f24:	460c      	mov	r4, r1
 8010f26:	4615      	mov	r5, r2
 8010f28:	461f      	mov	r7, r3
 8010f2a:	2209      	movs	r2, #9
 8010f2c:	3308      	adds	r3, #8
 8010f2e:	4606      	mov	r6, r0
 8010f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f34:	2100      	movs	r1, #0
 8010f36:	2201      	movs	r2, #1
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	db09      	blt.n	8010f50 <__s2b+0x30>
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	f7ff ff47 	bl	8010dd0 <_Balloc>
 8010f42:	b940      	cbnz	r0, 8010f56 <__s2b+0x36>
 8010f44:	4602      	mov	r2, r0
 8010f46:	4b19      	ldr	r3, [pc, #100]	; (8010fac <__s2b+0x8c>)
 8010f48:	4819      	ldr	r0, [pc, #100]	; (8010fb0 <__s2b+0x90>)
 8010f4a:	21ce      	movs	r1, #206	; 0xce
 8010f4c:	f001 fb9c 	bl	8012688 <__assert_func>
 8010f50:	0052      	lsls	r2, r2, #1
 8010f52:	3101      	adds	r1, #1
 8010f54:	e7f0      	b.n	8010f38 <__s2b+0x18>
 8010f56:	9b08      	ldr	r3, [sp, #32]
 8010f58:	6143      	str	r3, [r0, #20]
 8010f5a:	2d09      	cmp	r5, #9
 8010f5c:	f04f 0301 	mov.w	r3, #1
 8010f60:	6103      	str	r3, [r0, #16]
 8010f62:	dd16      	ble.n	8010f92 <__s2b+0x72>
 8010f64:	f104 0909 	add.w	r9, r4, #9
 8010f68:	46c8      	mov	r8, r9
 8010f6a:	442c      	add	r4, r5
 8010f6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f70:	4601      	mov	r1, r0
 8010f72:	3b30      	subs	r3, #48	; 0x30
 8010f74:	220a      	movs	r2, #10
 8010f76:	4630      	mov	r0, r6
 8010f78:	f7ff ff8c 	bl	8010e94 <__multadd>
 8010f7c:	45a0      	cmp	r8, r4
 8010f7e:	d1f5      	bne.n	8010f6c <__s2b+0x4c>
 8010f80:	f1a5 0408 	sub.w	r4, r5, #8
 8010f84:	444c      	add	r4, r9
 8010f86:	1b2d      	subs	r5, r5, r4
 8010f88:	1963      	adds	r3, r4, r5
 8010f8a:	42bb      	cmp	r3, r7
 8010f8c:	db04      	blt.n	8010f98 <__s2b+0x78>
 8010f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f92:	340a      	adds	r4, #10
 8010f94:	2509      	movs	r5, #9
 8010f96:	e7f6      	b.n	8010f86 <__s2b+0x66>
 8010f98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f9c:	4601      	mov	r1, r0
 8010f9e:	3b30      	subs	r3, #48	; 0x30
 8010fa0:	220a      	movs	r2, #10
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	f7ff ff76 	bl	8010e94 <__multadd>
 8010fa8:	e7ee      	b.n	8010f88 <__s2b+0x68>
 8010faa:	bf00      	nop
 8010fac:	080142c9 	.word	0x080142c9
 8010fb0:	0801436b 	.word	0x0801436b

08010fb4 <__hi0bits>:
 8010fb4:	0c03      	lsrs	r3, r0, #16
 8010fb6:	041b      	lsls	r3, r3, #16
 8010fb8:	b9d3      	cbnz	r3, 8010ff0 <__hi0bits+0x3c>
 8010fba:	0400      	lsls	r0, r0, #16
 8010fbc:	2310      	movs	r3, #16
 8010fbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010fc2:	bf04      	itt	eq
 8010fc4:	0200      	lsleq	r0, r0, #8
 8010fc6:	3308      	addeq	r3, #8
 8010fc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010fcc:	bf04      	itt	eq
 8010fce:	0100      	lsleq	r0, r0, #4
 8010fd0:	3304      	addeq	r3, #4
 8010fd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010fd6:	bf04      	itt	eq
 8010fd8:	0080      	lsleq	r0, r0, #2
 8010fda:	3302      	addeq	r3, #2
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	db05      	blt.n	8010fec <__hi0bits+0x38>
 8010fe0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010fe4:	f103 0301 	add.w	r3, r3, #1
 8010fe8:	bf08      	it	eq
 8010fea:	2320      	moveq	r3, #32
 8010fec:	4618      	mov	r0, r3
 8010fee:	4770      	bx	lr
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	e7e4      	b.n	8010fbe <__hi0bits+0xa>

08010ff4 <__lo0bits>:
 8010ff4:	6803      	ldr	r3, [r0, #0]
 8010ff6:	f013 0207 	ands.w	r2, r3, #7
 8010ffa:	4601      	mov	r1, r0
 8010ffc:	d00b      	beq.n	8011016 <__lo0bits+0x22>
 8010ffe:	07da      	lsls	r2, r3, #31
 8011000:	d423      	bmi.n	801104a <__lo0bits+0x56>
 8011002:	0798      	lsls	r0, r3, #30
 8011004:	bf49      	itett	mi
 8011006:	085b      	lsrmi	r3, r3, #1
 8011008:	089b      	lsrpl	r3, r3, #2
 801100a:	2001      	movmi	r0, #1
 801100c:	600b      	strmi	r3, [r1, #0]
 801100e:	bf5c      	itt	pl
 8011010:	600b      	strpl	r3, [r1, #0]
 8011012:	2002      	movpl	r0, #2
 8011014:	4770      	bx	lr
 8011016:	b298      	uxth	r0, r3
 8011018:	b9a8      	cbnz	r0, 8011046 <__lo0bits+0x52>
 801101a:	0c1b      	lsrs	r3, r3, #16
 801101c:	2010      	movs	r0, #16
 801101e:	b2da      	uxtb	r2, r3
 8011020:	b90a      	cbnz	r2, 8011026 <__lo0bits+0x32>
 8011022:	3008      	adds	r0, #8
 8011024:	0a1b      	lsrs	r3, r3, #8
 8011026:	071a      	lsls	r2, r3, #28
 8011028:	bf04      	itt	eq
 801102a:	091b      	lsreq	r3, r3, #4
 801102c:	3004      	addeq	r0, #4
 801102e:	079a      	lsls	r2, r3, #30
 8011030:	bf04      	itt	eq
 8011032:	089b      	lsreq	r3, r3, #2
 8011034:	3002      	addeq	r0, #2
 8011036:	07da      	lsls	r2, r3, #31
 8011038:	d403      	bmi.n	8011042 <__lo0bits+0x4e>
 801103a:	085b      	lsrs	r3, r3, #1
 801103c:	f100 0001 	add.w	r0, r0, #1
 8011040:	d005      	beq.n	801104e <__lo0bits+0x5a>
 8011042:	600b      	str	r3, [r1, #0]
 8011044:	4770      	bx	lr
 8011046:	4610      	mov	r0, r2
 8011048:	e7e9      	b.n	801101e <__lo0bits+0x2a>
 801104a:	2000      	movs	r0, #0
 801104c:	4770      	bx	lr
 801104e:	2020      	movs	r0, #32
 8011050:	4770      	bx	lr
	...

08011054 <__i2b>:
 8011054:	b510      	push	{r4, lr}
 8011056:	460c      	mov	r4, r1
 8011058:	2101      	movs	r1, #1
 801105a:	f7ff feb9 	bl	8010dd0 <_Balloc>
 801105e:	4602      	mov	r2, r0
 8011060:	b928      	cbnz	r0, 801106e <__i2b+0x1a>
 8011062:	4b05      	ldr	r3, [pc, #20]	; (8011078 <__i2b+0x24>)
 8011064:	4805      	ldr	r0, [pc, #20]	; (801107c <__i2b+0x28>)
 8011066:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801106a:	f001 fb0d 	bl	8012688 <__assert_func>
 801106e:	2301      	movs	r3, #1
 8011070:	6144      	str	r4, [r0, #20]
 8011072:	6103      	str	r3, [r0, #16]
 8011074:	bd10      	pop	{r4, pc}
 8011076:	bf00      	nop
 8011078:	080142c9 	.word	0x080142c9
 801107c:	0801436b 	.word	0x0801436b

08011080 <__multiply>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	4691      	mov	r9, r2
 8011086:	690a      	ldr	r2, [r1, #16]
 8011088:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801108c:	429a      	cmp	r2, r3
 801108e:	bfb8      	it	lt
 8011090:	460b      	movlt	r3, r1
 8011092:	460c      	mov	r4, r1
 8011094:	bfbc      	itt	lt
 8011096:	464c      	movlt	r4, r9
 8011098:	4699      	movlt	r9, r3
 801109a:	6927      	ldr	r7, [r4, #16]
 801109c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80110a0:	68a3      	ldr	r3, [r4, #8]
 80110a2:	6861      	ldr	r1, [r4, #4]
 80110a4:	eb07 060a 	add.w	r6, r7, sl
 80110a8:	42b3      	cmp	r3, r6
 80110aa:	b085      	sub	sp, #20
 80110ac:	bfb8      	it	lt
 80110ae:	3101      	addlt	r1, #1
 80110b0:	f7ff fe8e 	bl	8010dd0 <_Balloc>
 80110b4:	b930      	cbnz	r0, 80110c4 <__multiply+0x44>
 80110b6:	4602      	mov	r2, r0
 80110b8:	4b44      	ldr	r3, [pc, #272]	; (80111cc <__multiply+0x14c>)
 80110ba:	4845      	ldr	r0, [pc, #276]	; (80111d0 <__multiply+0x150>)
 80110bc:	f240 115d 	movw	r1, #349	; 0x15d
 80110c0:	f001 fae2 	bl	8012688 <__assert_func>
 80110c4:	f100 0514 	add.w	r5, r0, #20
 80110c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80110cc:	462b      	mov	r3, r5
 80110ce:	2200      	movs	r2, #0
 80110d0:	4543      	cmp	r3, r8
 80110d2:	d321      	bcc.n	8011118 <__multiply+0x98>
 80110d4:	f104 0314 	add.w	r3, r4, #20
 80110d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80110dc:	f109 0314 	add.w	r3, r9, #20
 80110e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80110e4:	9202      	str	r2, [sp, #8]
 80110e6:	1b3a      	subs	r2, r7, r4
 80110e8:	3a15      	subs	r2, #21
 80110ea:	f022 0203 	bic.w	r2, r2, #3
 80110ee:	3204      	adds	r2, #4
 80110f0:	f104 0115 	add.w	r1, r4, #21
 80110f4:	428f      	cmp	r7, r1
 80110f6:	bf38      	it	cc
 80110f8:	2204      	movcc	r2, #4
 80110fa:	9201      	str	r2, [sp, #4]
 80110fc:	9a02      	ldr	r2, [sp, #8]
 80110fe:	9303      	str	r3, [sp, #12]
 8011100:	429a      	cmp	r2, r3
 8011102:	d80c      	bhi.n	801111e <__multiply+0x9e>
 8011104:	2e00      	cmp	r6, #0
 8011106:	dd03      	ble.n	8011110 <__multiply+0x90>
 8011108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801110c:	2b00      	cmp	r3, #0
 801110e:	d05a      	beq.n	80111c6 <__multiply+0x146>
 8011110:	6106      	str	r6, [r0, #16]
 8011112:	b005      	add	sp, #20
 8011114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011118:	f843 2b04 	str.w	r2, [r3], #4
 801111c:	e7d8      	b.n	80110d0 <__multiply+0x50>
 801111e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011122:	f1ba 0f00 	cmp.w	sl, #0
 8011126:	d024      	beq.n	8011172 <__multiply+0xf2>
 8011128:	f104 0e14 	add.w	lr, r4, #20
 801112c:	46a9      	mov	r9, r5
 801112e:	f04f 0c00 	mov.w	ip, #0
 8011132:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011136:	f8d9 1000 	ldr.w	r1, [r9]
 801113a:	fa1f fb82 	uxth.w	fp, r2
 801113e:	b289      	uxth	r1, r1
 8011140:	fb0a 110b 	mla	r1, sl, fp, r1
 8011144:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011148:	f8d9 2000 	ldr.w	r2, [r9]
 801114c:	4461      	add	r1, ip
 801114e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011152:	fb0a c20b 	mla	r2, sl, fp, ip
 8011156:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801115a:	b289      	uxth	r1, r1
 801115c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011160:	4577      	cmp	r7, lr
 8011162:	f849 1b04 	str.w	r1, [r9], #4
 8011166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801116a:	d8e2      	bhi.n	8011132 <__multiply+0xb2>
 801116c:	9a01      	ldr	r2, [sp, #4]
 801116e:	f845 c002 	str.w	ip, [r5, r2]
 8011172:	9a03      	ldr	r2, [sp, #12]
 8011174:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011178:	3304      	adds	r3, #4
 801117a:	f1b9 0f00 	cmp.w	r9, #0
 801117e:	d020      	beq.n	80111c2 <__multiply+0x142>
 8011180:	6829      	ldr	r1, [r5, #0]
 8011182:	f104 0c14 	add.w	ip, r4, #20
 8011186:	46ae      	mov	lr, r5
 8011188:	f04f 0a00 	mov.w	sl, #0
 801118c:	f8bc b000 	ldrh.w	fp, [ip]
 8011190:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011194:	fb09 220b 	mla	r2, r9, fp, r2
 8011198:	4492      	add	sl, r2
 801119a:	b289      	uxth	r1, r1
 801119c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80111a0:	f84e 1b04 	str.w	r1, [lr], #4
 80111a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80111a8:	f8be 1000 	ldrh.w	r1, [lr]
 80111ac:	0c12      	lsrs	r2, r2, #16
 80111ae:	fb09 1102 	mla	r1, r9, r2, r1
 80111b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80111b6:	4567      	cmp	r7, ip
 80111b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80111bc:	d8e6      	bhi.n	801118c <__multiply+0x10c>
 80111be:	9a01      	ldr	r2, [sp, #4]
 80111c0:	50a9      	str	r1, [r5, r2]
 80111c2:	3504      	adds	r5, #4
 80111c4:	e79a      	b.n	80110fc <__multiply+0x7c>
 80111c6:	3e01      	subs	r6, #1
 80111c8:	e79c      	b.n	8011104 <__multiply+0x84>
 80111ca:	bf00      	nop
 80111cc:	080142c9 	.word	0x080142c9
 80111d0:	0801436b 	.word	0x0801436b

080111d4 <__pow5mult>:
 80111d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111d8:	4615      	mov	r5, r2
 80111da:	f012 0203 	ands.w	r2, r2, #3
 80111de:	4606      	mov	r6, r0
 80111e0:	460f      	mov	r7, r1
 80111e2:	d007      	beq.n	80111f4 <__pow5mult+0x20>
 80111e4:	4c25      	ldr	r4, [pc, #148]	; (801127c <__pow5mult+0xa8>)
 80111e6:	3a01      	subs	r2, #1
 80111e8:	2300      	movs	r3, #0
 80111ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111ee:	f7ff fe51 	bl	8010e94 <__multadd>
 80111f2:	4607      	mov	r7, r0
 80111f4:	10ad      	asrs	r5, r5, #2
 80111f6:	d03d      	beq.n	8011274 <__pow5mult+0xa0>
 80111f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80111fa:	b97c      	cbnz	r4, 801121c <__pow5mult+0x48>
 80111fc:	2010      	movs	r0, #16
 80111fe:	f001 fa73 	bl	80126e8 <malloc>
 8011202:	4602      	mov	r2, r0
 8011204:	6270      	str	r0, [r6, #36]	; 0x24
 8011206:	b928      	cbnz	r0, 8011214 <__pow5mult+0x40>
 8011208:	4b1d      	ldr	r3, [pc, #116]	; (8011280 <__pow5mult+0xac>)
 801120a:	481e      	ldr	r0, [pc, #120]	; (8011284 <__pow5mult+0xb0>)
 801120c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011210:	f001 fa3a 	bl	8012688 <__assert_func>
 8011214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011218:	6004      	str	r4, [r0, #0]
 801121a:	60c4      	str	r4, [r0, #12]
 801121c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011224:	b94c      	cbnz	r4, 801123a <__pow5mult+0x66>
 8011226:	f240 2171 	movw	r1, #625	; 0x271
 801122a:	4630      	mov	r0, r6
 801122c:	f7ff ff12 	bl	8011054 <__i2b>
 8011230:	2300      	movs	r3, #0
 8011232:	f8c8 0008 	str.w	r0, [r8, #8]
 8011236:	4604      	mov	r4, r0
 8011238:	6003      	str	r3, [r0, #0]
 801123a:	f04f 0900 	mov.w	r9, #0
 801123e:	07eb      	lsls	r3, r5, #31
 8011240:	d50a      	bpl.n	8011258 <__pow5mult+0x84>
 8011242:	4639      	mov	r1, r7
 8011244:	4622      	mov	r2, r4
 8011246:	4630      	mov	r0, r6
 8011248:	f7ff ff1a 	bl	8011080 <__multiply>
 801124c:	4639      	mov	r1, r7
 801124e:	4680      	mov	r8, r0
 8011250:	4630      	mov	r0, r6
 8011252:	f7ff fdfd 	bl	8010e50 <_Bfree>
 8011256:	4647      	mov	r7, r8
 8011258:	106d      	asrs	r5, r5, #1
 801125a:	d00b      	beq.n	8011274 <__pow5mult+0xa0>
 801125c:	6820      	ldr	r0, [r4, #0]
 801125e:	b938      	cbnz	r0, 8011270 <__pow5mult+0x9c>
 8011260:	4622      	mov	r2, r4
 8011262:	4621      	mov	r1, r4
 8011264:	4630      	mov	r0, r6
 8011266:	f7ff ff0b 	bl	8011080 <__multiply>
 801126a:	6020      	str	r0, [r4, #0]
 801126c:	f8c0 9000 	str.w	r9, [r0]
 8011270:	4604      	mov	r4, r0
 8011272:	e7e4      	b.n	801123e <__pow5mult+0x6a>
 8011274:	4638      	mov	r0, r7
 8011276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127a:	bf00      	nop
 801127c:	080144b8 	.word	0x080144b8
 8011280:	08014354 	.word	0x08014354
 8011284:	0801436b 	.word	0x0801436b

08011288 <__lshift>:
 8011288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801128c:	460c      	mov	r4, r1
 801128e:	6849      	ldr	r1, [r1, #4]
 8011290:	6923      	ldr	r3, [r4, #16]
 8011292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011296:	68a3      	ldr	r3, [r4, #8]
 8011298:	4607      	mov	r7, r0
 801129a:	4691      	mov	r9, r2
 801129c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112a0:	f108 0601 	add.w	r6, r8, #1
 80112a4:	42b3      	cmp	r3, r6
 80112a6:	db0b      	blt.n	80112c0 <__lshift+0x38>
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ff fd91 	bl	8010dd0 <_Balloc>
 80112ae:	4605      	mov	r5, r0
 80112b0:	b948      	cbnz	r0, 80112c6 <__lshift+0x3e>
 80112b2:	4602      	mov	r2, r0
 80112b4:	4b2a      	ldr	r3, [pc, #168]	; (8011360 <__lshift+0xd8>)
 80112b6:	482b      	ldr	r0, [pc, #172]	; (8011364 <__lshift+0xdc>)
 80112b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80112bc:	f001 f9e4 	bl	8012688 <__assert_func>
 80112c0:	3101      	adds	r1, #1
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	e7ee      	b.n	80112a4 <__lshift+0x1c>
 80112c6:	2300      	movs	r3, #0
 80112c8:	f100 0114 	add.w	r1, r0, #20
 80112cc:	f100 0210 	add.w	r2, r0, #16
 80112d0:	4618      	mov	r0, r3
 80112d2:	4553      	cmp	r3, sl
 80112d4:	db37      	blt.n	8011346 <__lshift+0xbe>
 80112d6:	6920      	ldr	r0, [r4, #16]
 80112d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112dc:	f104 0314 	add.w	r3, r4, #20
 80112e0:	f019 091f 	ands.w	r9, r9, #31
 80112e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80112ec:	d02f      	beq.n	801134e <__lshift+0xc6>
 80112ee:	f1c9 0e20 	rsb	lr, r9, #32
 80112f2:	468a      	mov	sl, r1
 80112f4:	f04f 0c00 	mov.w	ip, #0
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	fa02 f209 	lsl.w	r2, r2, r9
 80112fe:	ea42 020c 	orr.w	r2, r2, ip
 8011302:	f84a 2b04 	str.w	r2, [sl], #4
 8011306:	f853 2b04 	ldr.w	r2, [r3], #4
 801130a:	4298      	cmp	r0, r3
 801130c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011310:	d8f2      	bhi.n	80112f8 <__lshift+0x70>
 8011312:	1b03      	subs	r3, r0, r4
 8011314:	3b15      	subs	r3, #21
 8011316:	f023 0303 	bic.w	r3, r3, #3
 801131a:	3304      	adds	r3, #4
 801131c:	f104 0215 	add.w	r2, r4, #21
 8011320:	4290      	cmp	r0, r2
 8011322:	bf38      	it	cc
 8011324:	2304      	movcc	r3, #4
 8011326:	f841 c003 	str.w	ip, [r1, r3]
 801132a:	f1bc 0f00 	cmp.w	ip, #0
 801132e:	d001      	beq.n	8011334 <__lshift+0xac>
 8011330:	f108 0602 	add.w	r6, r8, #2
 8011334:	3e01      	subs	r6, #1
 8011336:	4638      	mov	r0, r7
 8011338:	612e      	str	r6, [r5, #16]
 801133a:	4621      	mov	r1, r4
 801133c:	f7ff fd88 	bl	8010e50 <_Bfree>
 8011340:	4628      	mov	r0, r5
 8011342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011346:	f842 0f04 	str.w	r0, [r2, #4]!
 801134a:	3301      	adds	r3, #1
 801134c:	e7c1      	b.n	80112d2 <__lshift+0x4a>
 801134e:	3904      	subs	r1, #4
 8011350:	f853 2b04 	ldr.w	r2, [r3], #4
 8011354:	f841 2f04 	str.w	r2, [r1, #4]!
 8011358:	4298      	cmp	r0, r3
 801135a:	d8f9      	bhi.n	8011350 <__lshift+0xc8>
 801135c:	e7ea      	b.n	8011334 <__lshift+0xac>
 801135e:	bf00      	nop
 8011360:	080142c9 	.word	0x080142c9
 8011364:	0801436b 	.word	0x0801436b

08011368 <__mcmp>:
 8011368:	b530      	push	{r4, r5, lr}
 801136a:	6902      	ldr	r2, [r0, #16]
 801136c:	690c      	ldr	r4, [r1, #16]
 801136e:	1b12      	subs	r2, r2, r4
 8011370:	d10e      	bne.n	8011390 <__mcmp+0x28>
 8011372:	f100 0314 	add.w	r3, r0, #20
 8011376:	3114      	adds	r1, #20
 8011378:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801137c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011380:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011384:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011388:	42a5      	cmp	r5, r4
 801138a:	d003      	beq.n	8011394 <__mcmp+0x2c>
 801138c:	d305      	bcc.n	801139a <__mcmp+0x32>
 801138e:	2201      	movs	r2, #1
 8011390:	4610      	mov	r0, r2
 8011392:	bd30      	pop	{r4, r5, pc}
 8011394:	4283      	cmp	r3, r0
 8011396:	d3f3      	bcc.n	8011380 <__mcmp+0x18>
 8011398:	e7fa      	b.n	8011390 <__mcmp+0x28>
 801139a:	f04f 32ff 	mov.w	r2, #4294967295
 801139e:	e7f7      	b.n	8011390 <__mcmp+0x28>

080113a0 <__mdiff>:
 80113a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a4:	460c      	mov	r4, r1
 80113a6:	4606      	mov	r6, r0
 80113a8:	4611      	mov	r1, r2
 80113aa:	4620      	mov	r0, r4
 80113ac:	4690      	mov	r8, r2
 80113ae:	f7ff ffdb 	bl	8011368 <__mcmp>
 80113b2:	1e05      	subs	r5, r0, #0
 80113b4:	d110      	bne.n	80113d8 <__mdiff+0x38>
 80113b6:	4629      	mov	r1, r5
 80113b8:	4630      	mov	r0, r6
 80113ba:	f7ff fd09 	bl	8010dd0 <_Balloc>
 80113be:	b930      	cbnz	r0, 80113ce <__mdiff+0x2e>
 80113c0:	4b3a      	ldr	r3, [pc, #232]	; (80114ac <__mdiff+0x10c>)
 80113c2:	4602      	mov	r2, r0
 80113c4:	f240 2132 	movw	r1, #562	; 0x232
 80113c8:	4839      	ldr	r0, [pc, #228]	; (80114b0 <__mdiff+0x110>)
 80113ca:	f001 f95d 	bl	8012688 <__assert_func>
 80113ce:	2301      	movs	r3, #1
 80113d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d8:	bfa4      	itt	ge
 80113da:	4643      	movge	r3, r8
 80113dc:	46a0      	movge	r8, r4
 80113de:	4630      	mov	r0, r6
 80113e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80113e4:	bfa6      	itte	ge
 80113e6:	461c      	movge	r4, r3
 80113e8:	2500      	movge	r5, #0
 80113ea:	2501      	movlt	r5, #1
 80113ec:	f7ff fcf0 	bl	8010dd0 <_Balloc>
 80113f0:	b920      	cbnz	r0, 80113fc <__mdiff+0x5c>
 80113f2:	4b2e      	ldr	r3, [pc, #184]	; (80114ac <__mdiff+0x10c>)
 80113f4:	4602      	mov	r2, r0
 80113f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80113fa:	e7e5      	b.n	80113c8 <__mdiff+0x28>
 80113fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011400:	6926      	ldr	r6, [r4, #16]
 8011402:	60c5      	str	r5, [r0, #12]
 8011404:	f104 0914 	add.w	r9, r4, #20
 8011408:	f108 0514 	add.w	r5, r8, #20
 801140c:	f100 0e14 	add.w	lr, r0, #20
 8011410:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011414:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011418:	f108 0210 	add.w	r2, r8, #16
 801141c:	46f2      	mov	sl, lr
 801141e:	2100      	movs	r1, #0
 8011420:	f859 3b04 	ldr.w	r3, [r9], #4
 8011424:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011428:	fa1f f883 	uxth.w	r8, r3
 801142c:	fa11 f18b 	uxtah	r1, r1, fp
 8011430:	0c1b      	lsrs	r3, r3, #16
 8011432:	eba1 0808 	sub.w	r8, r1, r8
 8011436:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801143a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801143e:	fa1f f888 	uxth.w	r8, r8
 8011442:	1419      	asrs	r1, r3, #16
 8011444:	454e      	cmp	r6, r9
 8011446:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801144a:	f84a 3b04 	str.w	r3, [sl], #4
 801144e:	d8e7      	bhi.n	8011420 <__mdiff+0x80>
 8011450:	1b33      	subs	r3, r6, r4
 8011452:	3b15      	subs	r3, #21
 8011454:	f023 0303 	bic.w	r3, r3, #3
 8011458:	3304      	adds	r3, #4
 801145a:	3415      	adds	r4, #21
 801145c:	42a6      	cmp	r6, r4
 801145e:	bf38      	it	cc
 8011460:	2304      	movcc	r3, #4
 8011462:	441d      	add	r5, r3
 8011464:	4473      	add	r3, lr
 8011466:	469e      	mov	lr, r3
 8011468:	462e      	mov	r6, r5
 801146a:	4566      	cmp	r6, ip
 801146c:	d30e      	bcc.n	801148c <__mdiff+0xec>
 801146e:	f10c 0203 	add.w	r2, ip, #3
 8011472:	1b52      	subs	r2, r2, r5
 8011474:	f022 0203 	bic.w	r2, r2, #3
 8011478:	3d03      	subs	r5, #3
 801147a:	45ac      	cmp	ip, r5
 801147c:	bf38      	it	cc
 801147e:	2200      	movcc	r2, #0
 8011480:	441a      	add	r2, r3
 8011482:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011486:	b17b      	cbz	r3, 80114a8 <__mdiff+0x108>
 8011488:	6107      	str	r7, [r0, #16]
 801148a:	e7a3      	b.n	80113d4 <__mdiff+0x34>
 801148c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011490:	fa11 f288 	uxtah	r2, r1, r8
 8011494:	1414      	asrs	r4, r2, #16
 8011496:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801149a:	b292      	uxth	r2, r2
 801149c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80114a0:	f84e 2b04 	str.w	r2, [lr], #4
 80114a4:	1421      	asrs	r1, r4, #16
 80114a6:	e7e0      	b.n	801146a <__mdiff+0xca>
 80114a8:	3f01      	subs	r7, #1
 80114aa:	e7ea      	b.n	8011482 <__mdiff+0xe2>
 80114ac:	080142c9 	.word	0x080142c9
 80114b0:	0801436b 	.word	0x0801436b

080114b4 <__ulp>:
 80114b4:	b082      	sub	sp, #8
 80114b6:	ed8d 0b00 	vstr	d0, [sp]
 80114ba:	9b01      	ldr	r3, [sp, #4]
 80114bc:	4912      	ldr	r1, [pc, #72]	; (8011508 <__ulp+0x54>)
 80114be:	4019      	ands	r1, r3
 80114c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80114c4:	2900      	cmp	r1, #0
 80114c6:	dd05      	ble.n	80114d4 <__ulp+0x20>
 80114c8:	2200      	movs	r2, #0
 80114ca:	460b      	mov	r3, r1
 80114cc:	ec43 2b10 	vmov	d0, r2, r3
 80114d0:	b002      	add	sp, #8
 80114d2:	4770      	bx	lr
 80114d4:	4249      	negs	r1, r1
 80114d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80114da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80114de:	f04f 0200 	mov.w	r2, #0
 80114e2:	f04f 0300 	mov.w	r3, #0
 80114e6:	da04      	bge.n	80114f2 <__ulp+0x3e>
 80114e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80114ec:	fa41 f300 	asr.w	r3, r1, r0
 80114f0:	e7ec      	b.n	80114cc <__ulp+0x18>
 80114f2:	f1a0 0114 	sub.w	r1, r0, #20
 80114f6:	291e      	cmp	r1, #30
 80114f8:	bfda      	itte	le
 80114fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80114fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8011502:	2101      	movgt	r1, #1
 8011504:	460a      	mov	r2, r1
 8011506:	e7e1      	b.n	80114cc <__ulp+0x18>
 8011508:	7ff00000 	.word	0x7ff00000

0801150c <__b2d>:
 801150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150e:	6905      	ldr	r5, [r0, #16]
 8011510:	f100 0714 	add.w	r7, r0, #20
 8011514:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011518:	1f2e      	subs	r6, r5, #4
 801151a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801151e:	4620      	mov	r0, r4
 8011520:	f7ff fd48 	bl	8010fb4 <__hi0bits>
 8011524:	f1c0 0320 	rsb	r3, r0, #32
 8011528:	280a      	cmp	r0, #10
 801152a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80115a8 <__b2d+0x9c>
 801152e:	600b      	str	r3, [r1, #0]
 8011530:	dc14      	bgt.n	801155c <__b2d+0x50>
 8011532:	f1c0 0e0b 	rsb	lr, r0, #11
 8011536:	fa24 f10e 	lsr.w	r1, r4, lr
 801153a:	42b7      	cmp	r7, r6
 801153c:	ea41 030c 	orr.w	r3, r1, ip
 8011540:	bf34      	ite	cc
 8011542:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011546:	2100      	movcs	r1, #0
 8011548:	3015      	adds	r0, #21
 801154a:	fa04 f000 	lsl.w	r0, r4, r0
 801154e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011552:	ea40 0201 	orr.w	r2, r0, r1
 8011556:	ec43 2b10 	vmov	d0, r2, r3
 801155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801155c:	42b7      	cmp	r7, r6
 801155e:	bf3a      	itte	cc
 8011560:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011564:	f1a5 0608 	subcc.w	r6, r5, #8
 8011568:	2100      	movcs	r1, #0
 801156a:	380b      	subs	r0, #11
 801156c:	d017      	beq.n	801159e <__b2d+0x92>
 801156e:	f1c0 0c20 	rsb	ip, r0, #32
 8011572:	fa04 f500 	lsl.w	r5, r4, r0
 8011576:	42be      	cmp	r6, r7
 8011578:	fa21 f40c 	lsr.w	r4, r1, ip
 801157c:	ea45 0504 	orr.w	r5, r5, r4
 8011580:	bf8c      	ite	hi
 8011582:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011586:	2400      	movls	r4, #0
 8011588:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801158c:	fa01 f000 	lsl.w	r0, r1, r0
 8011590:	fa24 f40c 	lsr.w	r4, r4, ip
 8011594:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011598:	ea40 0204 	orr.w	r2, r0, r4
 801159c:	e7db      	b.n	8011556 <__b2d+0x4a>
 801159e:	ea44 030c 	orr.w	r3, r4, ip
 80115a2:	460a      	mov	r2, r1
 80115a4:	e7d7      	b.n	8011556 <__b2d+0x4a>
 80115a6:	bf00      	nop
 80115a8:	3ff00000 	.word	0x3ff00000

080115ac <__d2b>:
 80115ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115b0:	4689      	mov	r9, r1
 80115b2:	2101      	movs	r1, #1
 80115b4:	ec57 6b10 	vmov	r6, r7, d0
 80115b8:	4690      	mov	r8, r2
 80115ba:	f7ff fc09 	bl	8010dd0 <_Balloc>
 80115be:	4604      	mov	r4, r0
 80115c0:	b930      	cbnz	r0, 80115d0 <__d2b+0x24>
 80115c2:	4602      	mov	r2, r0
 80115c4:	4b25      	ldr	r3, [pc, #148]	; (801165c <__d2b+0xb0>)
 80115c6:	4826      	ldr	r0, [pc, #152]	; (8011660 <__d2b+0xb4>)
 80115c8:	f240 310a 	movw	r1, #778	; 0x30a
 80115cc:	f001 f85c 	bl	8012688 <__assert_func>
 80115d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80115d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80115d8:	bb35      	cbnz	r5, 8011628 <__d2b+0x7c>
 80115da:	2e00      	cmp	r6, #0
 80115dc:	9301      	str	r3, [sp, #4]
 80115de:	d028      	beq.n	8011632 <__d2b+0x86>
 80115e0:	4668      	mov	r0, sp
 80115e2:	9600      	str	r6, [sp, #0]
 80115e4:	f7ff fd06 	bl	8010ff4 <__lo0bits>
 80115e8:	9900      	ldr	r1, [sp, #0]
 80115ea:	b300      	cbz	r0, 801162e <__d2b+0x82>
 80115ec:	9a01      	ldr	r2, [sp, #4]
 80115ee:	f1c0 0320 	rsb	r3, r0, #32
 80115f2:	fa02 f303 	lsl.w	r3, r2, r3
 80115f6:	430b      	orrs	r3, r1
 80115f8:	40c2      	lsrs	r2, r0
 80115fa:	6163      	str	r3, [r4, #20]
 80115fc:	9201      	str	r2, [sp, #4]
 80115fe:	9b01      	ldr	r3, [sp, #4]
 8011600:	61a3      	str	r3, [r4, #24]
 8011602:	2b00      	cmp	r3, #0
 8011604:	bf14      	ite	ne
 8011606:	2202      	movne	r2, #2
 8011608:	2201      	moveq	r2, #1
 801160a:	6122      	str	r2, [r4, #16]
 801160c:	b1d5      	cbz	r5, 8011644 <__d2b+0x98>
 801160e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011612:	4405      	add	r5, r0
 8011614:	f8c9 5000 	str.w	r5, [r9]
 8011618:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801161c:	f8c8 0000 	str.w	r0, [r8]
 8011620:	4620      	mov	r0, r4
 8011622:	b003      	add	sp, #12
 8011624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801162c:	e7d5      	b.n	80115da <__d2b+0x2e>
 801162e:	6161      	str	r1, [r4, #20]
 8011630:	e7e5      	b.n	80115fe <__d2b+0x52>
 8011632:	a801      	add	r0, sp, #4
 8011634:	f7ff fcde 	bl	8010ff4 <__lo0bits>
 8011638:	9b01      	ldr	r3, [sp, #4]
 801163a:	6163      	str	r3, [r4, #20]
 801163c:	2201      	movs	r2, #1
 801163e:	6122      	str	r2, [r4, #16]
 8011640:	3020      	adds	r0, #32
 8011642:	e7e3      	b.n	801160c <__d2b+0x60>
 8011644:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801164c:	f8c9 0000 	str.w	r0, [r9]
 8011650:	6918      	ldr	r0, [r3, #16]
 8011652:	f7ff fcaf 	bl	8010fb4 <__hi0bits>
 8011656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801165a:	e7df      	b.n	801161c <__d2b+0x70>
 801165c:	080142c9 	.word	0x080142c9
 8011660:	0801436b 	.word	0x0801436b

08011664 <__ratio>:
 8011664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011668:	4688      	mov	r8, r1
 801166a:	4669      	mov	r1, sp
 801166c:	4681      	mov	r9, r0
 801166e:	f7ff ff4d 	bl	801150c <__b2d>
 8011672:	a901      	add	r1, sp, #4
 8011674:	4640      	mov	r0, r8
 8011676:	ec55 4b10 	vmov	r4, r5, d0
 801167a:	f7ff ff47 	bl	801150c <__b2d>
 801167e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011682:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011686:	eba3 0c02 	sub.w	ip, r3, r2
 801168a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801168e:	1a9b      	subs	r3, r3, r2
 8011690:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011694:	ec51 0b10 	vmov	r0, r1, d0
 8011698:	2b00      	cmp	r3, #0
 801169a:	bfd6      	itet	le
 801169c:	460a      	movle	r2, r1
 801169e:	462a      	movgt	r2, r5
 80116a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80116a4:	468b      	mov	fp, r1
 80116a6:	462f      	mov	r7, r5
 80116a8:	bfd4      	ite	le
 80116aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80116ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80116b2:	4620      	mov	r0, r4
 80116b4:	ee10 2a10 	vmov	r2, s0
 80116b8:	465b      	mov	r3, fp
 80116ba:	4639      	mov	r1, r7
 80116bc:	f7ef f8e6 	bl	800088c <__aeabi_ddiv>
 80116c0:	ec41 0b10 	vmov	d0, r0, r1
 80116c4:	b003      	add	sp, #12
 80116c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116ca <__copybits>:
 80116ca:	3901      	subs	r1, #1
 80116cc:	b570      	push	{r4, r5, r6, lr}
 80116ce:	1149      	asrs	r1, r1, #5
 80116d0:	6914      	ldr	r4, [r2, #16]
 80116d2:	3101      	adds	r1, #1
 80116d4:	f102 0314 	add.w	r3, r2, #20
 80116d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80116dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80116e0:	1f05      	subs	r5, r0, #4
 80116e2:	42a3      	cmp	r3, r4
 80116e4:	d30c      	bcc.n	8011700 <__copybits+0x36>
 80116e6:	1aa3      	subs	r3, r4, r2
 80116e8:	3b11      	subs	r3, #17
 80116ea:	f023 0303 	bic.w	r3, r3, #3
 80116ee:	3211      	adds	r2, #17
 80116f0:	42a2      	cmp	r2, r4
 80116f2:	bf88      	it	hi
 80116f4:	2300      	movhi	r3, #0
 80116f6:	4418      	add	r0, r3
 80116f8:	2300      	movs	r3, #0
 80116fa:	4288      	cmp	r0, r1
 80116fc:	d305      	bcc.n	801170a <__copybits+0x40>
 80116fe:	bd70      	pop	{r4, r5, r6, pc}
 8011700:	f853 6b04 	ldr.w	r6, [r3], #4
 8011704:	f845 6f04 	str.w	r6, [r5, #4]!
 8011708:	e7eb      	b.n	80116e2 <__copybits+0x18>
 801170a:	f840 3b04 	str.w	r3, [r0], #4
 801170e:	e7f4      	b.n	80116fa <__copybits+0x30>

08011710 <__any_on>:
 8011710:	f100 0214 	add.w	r2, r0, #20
 8011714:	6900      	ldr	r0, [r0, #16]
 8011716:	114b      	asrs	r3, r1, #5
 8011718:	4298      	cmp	r0, r3
 801171a:	b510      	push	{r4, lr}
 801171c:	db11      	blt.n	8011742 <__any_on+0x32>
 801171e:	dd0a      	ble.n	8011736 <__any_on+0x26>
 8011720:	f011 011f 	ands.w	r1, r1, #31
 8011724:	d007      	beq.n	8011736 <__any_on+0x26>
 8011726:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801172a:	fa24 f001 	lsr.w	r0, r4, r1
 801172e:	fa00 f101 	lsl.w	r1, r0, r1
 8011732:	428c      	cmp	r4, r1
 8011734:	d10b      	bne.n	801174e <__any_on+0x3e>
 8011736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801173a:	4293      	cmp	r3, r2
 801173c:	d803      	bhi.n	8011746 <__any_on+0x36>
 801173e:	2000      	movs	r0, #0
 8011740:	bd10      	pop	{r4, pc}
 8011742:	4603      	mov	r3, r0
 8011744:	e7f7      	b.n	8011736 <__any_on+0x26>
 8011746:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801174a:	2900      	cmp	r1, #0
 801174c:	d0f5      	beq.n	801173a <__any_on+0x2a>
 801174e:	2001      	movs	r0, #1
 8011750:	e7f6      	b.n	8011740 <__any_on+0x30>

08011752 <_calloc_r>:
 8011752:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011754:	fba1 2402 	umull	r2, r4, r1, r2
 8011758:	b94c      	cbnz	r4, 801176e <_calloc_r+0x1c>
 801175a:	4611      	mov	r1, r2
 801175c:	9201      	str	r2, [sp, #4]
 801175e:	f7fd fc65 	bl	800f02c <_malloc_r>
 8011762:	9a01      	ldr	r2, [sp, #4]
 8011764:	4605      	mov	r5, r0
 8011766:	b930      	cbnz	r0, 8011776 <_calloc_r+0x24>
 8011768:	4628      	mov	r0, r5
 801176a:	b003      	add	sp, #12
 801176c:	bd30      	pop	{r4, r5, pc}
 801176e:	220c      	movs	r2, #12
 8011770:	6002      	str	r2, [r0, #0]
 8011772:	2500      	movs	r5, #0
 8011774:	e7f8      	b.n	8011768 <_calloc_r+0x16>
 8011776:	4621      	mov	r1, r4
 8011778:	f7fd fc2f 	bl	800efda <memset>
 801177c:	e7f4      	b.n	8011768 <_calloc_r+0x16>
	...

08011780 <_free_r>:
 8011780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011782:	2900      	cmp	r1, #0
 8011784:	d044      	beq.n	8011810 <_free_r+0x90>
 8011786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801178a:	9001      	str	r0, [sp, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	f1a1 0404 	sub.w	r4, r1, #4
 8011792:	bfb8      	it	lt
 8011794:	18e4      	addlt	r4, r4, r3
 8011796:	f7ff fb0f 	bl	8010db8 <__malloc_lock>
 801179a:	4a1e      	ldr	r2, [pc, #120]	; (8011814 <_free_r+0x94>)
 801179c:	9801      	ldr	r0, [sp, #4]
 801179e:	6813      	ldr	r3, [r2, #0]
 80117a0:	b933      	cbnz	r3, 80117b0 <_free_r+0x30>
 80117a2:	6063      	str	r3, [r4, #4]
 80117a4:	6014      	str	r4, [r2, #0]
 80117a6:	b003      	add	sp, #12
 80117a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117ac:	f7ff bb0a 	b.w	8010dc4 <__malloc_unlock>
 80117b0:	42a3      	cmp	r3, r4
 80117b2:	d908      	bls.n	80117c6 <_free_r+0x46>
 80117b4:	6825      	ldr	r5, [r4, #0]
 80117b6:	1961      	adds	r1, r4, r5
 80117b8:	428b      	cmp	r3, r1
 80117ba:	bf01      	itttt	eq
 80117bc:	6819      	ldreq	r1, [r3, #0]
 80117be:	685b      	ldreq	r3, [r3, #4]
 80117c0:	1949      	addeq	r1, r1, r5
 80117c2:	6021      	streq	r1, [r4, #0]
 80117c4:	e7ed      	b.n	80117a2 <_free_r+0x22>
 80117c6:	461a      	mov	r2, r3
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	b10b      	cbz	r3, 80117d0 <_free_r+0x50>
 80117cc:	42a3      	cmp	r3, r4
 80117ce:	d9fa      	bls.n	80117c6 <_free_r+0x46>
 80117d0:	6811      	ldr	r1, [r2, #0]
 80117d2:	1855      	adds	r5, r2, r1
 80117d4:	42a5      	cmp	r5, r4
 80117d6:	d10b      	bne.n	80117f0 <_free_r+0x70>
 80117d8:	6824      	ldr	r4, [r4, #0]
 80117da:	4421      	add	r1, r4
 80117dc:	1854      	adds	r4, r2, r1
 80117de:	42a3      	cmp	r3, r4
 80117e0:	6011      	str	r1, [r2, #0]
 80117e2:	d1e0      	bne.n	80117a6 <_free_r+0x26>
 80117e4:	681c      	ldr	r4, [r3, #0]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	6053      	str	r3, [r2, #4]
 80117ea:	4421      	add	r1, r4
 80117ec:	6011      	str	r1, [r2, #0]
 80117ee:	e7da      	b.n	80117a6 <_free_r+0x26>
 80117f0:	d902      	bls.n	80117f8 <_free_r+0x78>
 80117f2:	230c      	movs	r3, #12
 80117f4:	6003      	str	r3, [r0, #0]
 80117f6:	e7d6      	b.n	80117a6 <_free_r+0x26>
 80117f8:	6825      	ldr	r5, [r4, #0]
 80117fa:	1961      	adds	r1, r4, r5
 80117fc:	428b      	cmp	r3, r1
 80117fe:	bf04      	itt	eq
 8011800:	6819      	ldreq	r1, [r3, #0]
 8011802:	685b      	ldreq	r3, [r3, #4]
 8011804:	6063      	str	r3, [r4, #4]
 8011806:	bf04      	itt	eq
 8011808:	1949      	addeq	r1, r1, r5
 801180a:	6021      	streq	r1, [r4, #0]
 801180c:	6054      	str	r4, [r2, #4]
 801180e:	e7ca      	b.n	80117a6 <_free_r+0x26>
 8011810:	b003      	add	sp, #12
 8011812:	bd30      	pop	{r4, r5, pc}
 8011814:	2000f648 	.word	0x2000f648

08011818 <__ssputs_r>:
 8011818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801181c:	688e      	ldr	r6, [r1, #8]
 801181e:	429e      	cmp	r6, r3
 8011820:	4682      	mov	sl, r0
 8011822:	460c      	mov	r4, r1
 8011824:	4690      	mov	r8, r2
 8011826:	461f      	mov	r7, r3
 8011828:	d838      	bhi.n	801189c <__ssputs_r+0x84>
 801182a:	898a      	ldrh	r2, [r1, #12]
 801182c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011830:	d032      	beq.n	8011898 <__ssputs_r+0x80>
 8011832:	6825      	ldr	r5, [r4, #0]
 8011834:	6909      	ldr	r1, [r1, #16]
 8011836:	eba5 0901 	sub.w	r9, r5, r1
 801183a:	6965      	ldr	r5, [r4, #20]
 801183c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011844:	3301      	adds	r3, #1
 8011846:	444b      	add	r3, r9
 8011848:	106d      	asrs	r5, r5, #1
 801184a:	429d      	cmp	r5, r3
 801184c:	bf38      	it	cc
 801184e:	461d      	movcc	r5, r3
 8011850:	0553      	lsls	r3, r2, #21
 8011852:	d531      	bpl.n	80118b8 <__ssputs_r+0xa0>
 8011854:	4629      	mov	r1, r5
 8011856:	f7fd fbe9 	bl	800f02c <_malloc_r>
 801185a:	4606      	mov	r6, r0
 801185c:	b950      	cbnz	r0, 8011874 <__ssputs_r+0x5c>
 801185e:	230c      	movs	r3, #12
 8011860:	f8ca 3000 	str.w	r3, [sl]
 8011864:	89a3      	ldrh	r3, [r4, #12]
 8011866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801186a:	81a3      	strh	r3, [r4, #12]
 801186c:	f04f 30ff 	mov.w	r0, #4294967295
 8011870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011874:	6921      	ldr	r1, [r4, #16]
 8011876:	464a      	mov	r2, r9
 8011878:	f7fd fba1 	bl	800efbe <memcpy>
 801187c:	89a3      	ldrh	r3, [r4, #12]
 801187e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011886:	81a3      	strh	r3, [r4, #12]
 8011888:	6126      	str	r6, [r4, #16]
 801188a:	6165      	str	r5, [r4, #20]
 801188c:	444e      	add	r6, r9
 801188e:	eba5 0509 	sub.w	r5, r5, r9
 8011892:	6026      	str	r6, [r4, #0]
 8011894:	60a5      	str	r5, [r4, #8]
 8011896:	463e      	mov	r6, r7
 8011898:	42be      	cmp	r6, r7
 801189a:	d900      	bls.n	801189e <__ssputs_r+0x86>
 801189c:	463e      	mov	r6, r7
 801189e:	6820      	ldr	r0, [r4, #0]
 80118a0:	4632      	mov	r2, r6
 80118a2:	4641      	mov	r1, r8
 80118a4:	f000 ff28 	bl	80126f8 <memmove>
 80118a8:	68a3      	ldr	r3, [r4, #8]
 80118aa:	1b9b      	subs	r3, r3, r6
 80118ac:	60a3      	str	r3, [r4, #8]
 80118ae:	6823      	ldr	r3, [r4, #0]
 80118b0:	4433      	add	r3, r6
 80118b2:	6023      	str	r3, [r4, #0]
 80118b4:	2000      	movs	r0, #0
 80118b6:	e7db      	b.n	8011870 <__ssputs_r+0x58>
 80118b8:	462a      	mov	r2, r5
 80118ba:	f000 ff37 	bl	801272c <_realloc_r>
 80118be:	4606      	mov	r6, r0
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d1e1      	bne.n	8011888 <__ssputs_r+0x70>
 80118c4:	6921      	ldr	r1, [r4, #16]
 80118c6:	4650      	mov	r0, sl
 80118c8:	f7ff ff5a 	bl	8011780 <_free_r>
 80118cc:	e7c7      	b.n	801185e <__ssputs_r+0x46>
	...

080118d0 <_svfiprintf_r>:
 80118d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118d4:	4698      	mov	r8, r3
 80118d6:	898b      	ldrh	r3, [r1, #12]
 80118d8:	061b      	lsls	r3, r3, #24
 80118da:	b09d      	sub	sp, #116	; 0x74
 80118dc:	4607      	mov	r7, r0
 80118de:	460d      	mov	r5, r1
 80118e0:	4614      	mov	r4, r2
 80118e2:	d50e      	bpl.n	8011902 <_svfiprintf_r+0x32>
 80118e4:	690b      	ldr	r3, [r1, #16]
 80118e6:	b963      	cbnz	r3, 8011902 <_svfiprintf_r+0x32>
 80118e8:	2140      	movs	r1, #64	; 0x40
 80118ea:	f7fd fb9f 	bl	800f02c <_malloc_r>
 80118ee:	6028      	str	r0, [r5, #0]
 80118f0:	6128      	str	r0, [r5, #16]
 80118f2:	b920      	cbnz	r0, 80118fe <_svfiprintf_r+0x2e>
 80118f4:	230c      	movs	r3, #12
 80118f6:	603b      	str	r3, [r7, #0]
 80118f8:	f04f 30ff 	mov.w	r0, #4294967295
 80118fc:	e0d1      	b.n	8011aa2 <_svfiprintf_r+0x1d2>
 80118fe:	2340      	movs	r3, #64	; 0x40
 8011900:	616b      	str	r3, [r5, #20]
 8011902:	2300      	movs	r3, #0
 8011904:	9309      	str	r3, [sp, #36]	; 0x24
 8011906:	2320      	movs	r3, #32
 8011908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801190c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011910:	2330      	movs	r3, #48	; 0x30
 8011912:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011abc <_svfiprintf_r+0x1ec>
 8011916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801191a:	f04f 0901 	mov.w	r9, #1
 801191e:	4623      	mov	r3, r4
 8011920:	469a      	mov	sl, r3
 8011922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011926:	b10a      	cbz	r2, 801192c <_svfiprintf_r+0x5c>
 8011928:	2a25      	cmp	r2, #37	; 0x25
 801192a:	d1f9      	bne.n	8011920 <_svfiprintf_r+0x50>
 801192c:	ebba 0b04 	subs.w	fp, sl, r4
 8011930:	d00b      	beq.n	801194a <_svfiprintf_r+0x7a>
 8011932:	465b      	mov	r3, fp
 8011934:	4622      	mov	r2, r4
 8011936:	4629      	mov	r1, r5
 8011938:	4638      	mov	r0, r7
 801193a:	f7ff ff6d 	bl	8011818 <__ssputs_r>
 801193e:	3001      	adds	r0, #1
 8011940:	f000 80aa 	beq.w	8011a98 <_svfiprintf_r+0x1c8>
 8011944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011946:	445a      	add	r2, fp
 8011948:	9209      	str	r2, [sp, #36]	; 0x24
 801194a:	f89a 3000 	ldrb.w	r3, [sl]
 801194e:	2b00      	cmp	r3, #0
 8011950:	f000 80a2 	beq.w	8011a98 <_svfiprintf_r+0x1c8>
 8011954:	2300      	movs	r3, #0
 8011956:	f04f 32ff 	mov.w	r2, #4294967295
 801195a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801195e:	f10a 0a01 	add.w	sl, sl, #1
 8011962:	9304      	str	r3, [sp, #16]
 8011964:	9307      	str	r3, [sp, #28]
 8011966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801196a:	931a      	str	r3, [sp, #104]	; 0x68
 801196c:	4654      	mov	r4, sl
 801196e:	2205      	movs	r2, #5
 8011970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011974:	4851      	ldr	r0, [pc, #324]	; (8011abc <_svfiprintf_r+0x1ec>)
 8011976:	f7ee fc53 	bl	8000220 <memchr>
 801197a:	9a04      	ldr	r2, [sp, #16]
 801197c:	b9d8      	cbnz	r0, 80119b6 <_svfiprintf_r+0xe6>
 801197e:	06d0      	lsls	r0, r2, #27
 8011980:	bf44      	itt	mi
 8011982:	2320      	movmi	r3, #32
 8011984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011988:	0711      	lsls	r1, r2, #28
 801198a:	bf44      	itt	mi
 801198c:	232b      	movmi	r3, #43	; 0x2b
 801198e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011992:	f89a 3000 	ldrb.w	r3, [sl]
 8011996:	2b2a      	cmp	r3, #42	; 0x2a
 8011998:	d015      	beq.n	80119c6 <_svfiprintf_r+0xf6>
 801199a:	9a07      	ldr	r2, [sp, #28]
 801199c:	4654      	mov	r4, sl
 801199e:	2000      	movs	r0, #0
 80119a0:	f04f 0c0a 	mov.w	ip, #10
 80119a4:	4621      	mov	r1, r4
 80119a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119aa:	3b30      	subs	r3, #48	; 0x30
 80119ac:	2b09      	cmp	r3, #9
 80119ae:	d94e      	bls.n	8011a4e <_svfiprintf_r+0x17e>
 80119b0:	b1b0      	cbz	r0, 80119e0 <_svfiprintf_r+0x110>
 80119b2:	9207      	str	r2, [sp, #28]
 80119b4:	e014      	b.n	80119e0 <_svfiprintf_r+0x110>
 80119b6:	eba0 0308 	sub.w	r3, r0, r8
 80119ba:	fa09 f303 	lsl.w	r3, r9, r3
 80119be:	4313      	orrs	r3, r2
 80119c0:	9304      	str	r3, [sp, #16]
 80119c2:	46a2      	mov	sl, r4
 80119c4:	e7d2      	b.n	801196c <_svfiprintf_r+0x9c>
 80119c6:	9b03      	ldr	r3, [sp, #12]
 80119c8:	1d19      	adds	r1, r3, #4
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	9103      	str	r1, [sp, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	bfbb      	ittet	lt
 80119d2:	425b      	neglt	r3, r3
 80119d4:	f042 0202 	orrlt.w	r2, r2, #2
 80119d8:	9307      	strge	r3, [sp, #28]
 80119da:	9307      	strlt	r3, [sp, #28]
 80119dc:	bfb8      	it	lt
 80119de:	9204      	strlt	r2, [sp, #16]
 80119e0:	7823      	ldrb	r3, [r4, #0]
 80119e2:	2b2e      	cmp	r3, #46	; 0x2e
 80119e4:	d10c      	bne.n	8011a00 <_svfiprintf_r+0x130>
 80119e6:	7863      	ldrb	r3, [r4, #1]
 80119e8:	2b2a      	cmp	r3, #42	; 0x2a
 80119ea:	d135      	bne.n	8011a58 <_svfiprintf_r+0x188>
 80119ec:	9b03      	ldr	r3, [sp, #12]
 80119ee:	1d1a      	adds	r2, r3, #4
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	9203      	str	r2, [sp, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	bfb8      	it	lt
 80119f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80119fc:	3402      	adds	r4, #2
 80119fe:	9305      	str	r3, [sp, #20]
 8011a00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011acc <_svfiprintf_r+0x1fc>
 8011a04:	7821      	ldrb	r1, [r4, #0]
 8011a06:	2203      	movs	r2, #3
 8011a08:	4650      	mov	r0, sl
 8011a0a:	f7ee fc09 	bl	8000220 <memchr>
 8011a0e:	b140      	cbz	r0, 8011a22 <_svfiprintf_r+0x152>
 8011a10:	2340      	movs	r3, #64	; 0x40
 8011a12:	eba0 000a 	sub.w	r0, r0, sl
 8011a16:	fa03 f000 	lsl.w	r0, r3, r0
 8011a1a:	9b04      	ldr	r3, [sp, #16]
 8011a1c:	4303      	orrs	r3, r0
 8011a1e:	3401      	adds	r4, #1
 8011a20:	9304      	str	r3, [sp, #16]
 8011a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a26:	4826      	ldr	r0, [pc, #152]	; (8011ac0 <_svfiprintf_r+0x1f0>)
 8011a28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a2c:	2206      	movs	r2, #6
 8011a2e:	f7ee fbf7 	bl	8000220 <memchr>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d038      	beq.n	8011aa8 <_svfiprintf_r+0x1d8>
 8011a36:	4b23      	ldr	r3, [pc, #140]	; (8011ac4 <_svfiprintf_r+0x1f4>)
 8011a38:	bb1b      	cbnz	r3, 8011a82 <_svfiprintf_r+0x1b2>
 8011a3a:	9b03      	ldr	r3, [sp, #12]
 8011a3c:	3307      	adds	r3, #7
 8011a3e:	f023 0307 	bic.w	r3, r3, #7
 8011a42:	3308      	adds	r3, #8
 8011a44:	9303      	str	r3, [sp, #12]
 8011a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a48:	4433      	add	r3, r6
 8011a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a4c:	e767      	b.n	801191e <_svfiprintf_r+0x4e>
 8011a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a52:	460c      	mov	r4, r1
 8011a54:	2001      	movs	r0, #1
 8011a56:	e7a5      	b.n	80119a4 <_svfiprintf_r+0xd4>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	3401      	adds	r4, #1
 8011a5c:	9305      	str	r3, [sp, #20]
 8011a5e:	4619      	mov	r1, r3
 8011a60:	f04f 0c0a 	mov.w	ip, #10
 8011a64:	4620      	mov	r0, r4
 8011a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a6a:	3a30      	subs	r2, #48	; 0x30
 8011a6c:	2a09      	cmp	r2, #9
 8011a6e:	d903      	bls.n	8011a78 <_svfiprintf_r+0x1a8>
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d0c5      	beq.n	8011a00 <_svfiprintf_r+0x130>
 8011a74:	9105      	str	r1, [sp, #20]
 8011a76:	e7c3      	b.n	8011a00 <_svfiprintf_r+0x130>
 8011a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	2301      	movs	r3, #1
 8011a80:	e7f0      	b.n	8011a64 <_svfiprintf_r+0x194>
 8011a82:	ab03      	add	r3, sp, #12
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	462a      	mov	r2, r5
 8011a88:	4b0f      	ldr	r3, [pc, #60]	; (8011ac8 <_svfiprintf_r+0x1f8>)
 8011a8a:	a904      	add	r1, sp, #16
 8011a8c:	4638      	mov	r0, r7
 8011a8e:	f3af 8000 	nop.w
 8011a92:	1c42      	adds	r2, r0, #1
 8011a94:	4606      	mov	r6, r0
 8011a96:	d1d6      	bne.n	8011a46 <_svfiprintf_r+0x176>
 8011a98:	89ab      	ldrh	r3, [r5, #12]
 8011a9a:	065b      	lsls	r3, r3, #25
 8011a9c:	f53f af2c 	bmi.w	80118f8 <_svfiprintf_r+0x28>
 8011aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011aa2:	b01d      	add	sp, #116	; 0x74
 8011aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa8:	ab03      	add	r3, sp, #12
 8011aaa:	9300      	str	r3, [sp, #0]
 8011aac:	462a      	mov	r2, r5
 8011aae:	4b06      	ldr	r3, [pc, #24]	; (8011ac8 <_svfiprintf_r+0x1f8>)
 8011ab0:	a904      	add	r1, sp, #16
 8011ab2:	4638      	mov	r0, r7
 8011ab4:	f000 fa4c 	bl	8011f50 <_printf_i>
 8011ab8:	e7eb      	b.n	8011a92 <_svfiprintf_r+0x1c2>
 8011aba:	bf00      	nop
 8011abc:	080144c4 	.word	0x080144c4
 8011ac0:	080144ce 	.word	0x080144ce
 8011ac4:	00000000 	.word	0x00000000
 8011ac8:	08011819 	.word	0x08011819
 8011acc:	080144ca 	.word	0x080144ca

08011ad0 <_sungetc_r>:
 8011ad0:	b538      	push	{r3, r4, r5, lr}
 8011ad2:	1c4b      	adds	r3, r1, #1
 8011ad4:	4614      	mov	r4, r2
 8011ad6:	d103      	bne.n	8011ae0 <_sungetc_r+0x10>
 8011ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8011adc:	4628      	mov	r0, r5
 8011ade:	bd38      	pop	{r3, r4, r5, pc}
 8011ae0:	8993      	ldrh	r3, [r2, #12]
 8011ae2:	f023 0320 	bic.w	r3, r3, #32
 8011ae6:	8193      	strh	r3, [r2, #12]
 8011ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011aea:	6852      	ldr	r2, [r2, #4]
 8011aec:	b2cd      	uxtb	r5, r1
 8011aee:	b18b      	cbz	r3, 8011b14 <_sungetc_r+0x44>
 8011af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011af2:	4293      	cmp	r3, r2
 8011af4:	dd08      	ble.n	8011b08 <_sungetc_r+0x38>
 8011af6:	6823      	ldr	r3, [r4, #0]
 8011af8:	1e5a      	subs	r2, r3, #1
 8011afa:	6022      	str	r2, [r4, #0]
 8011afc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011b00:	6863      	ldr	r3, [r4, #4]
 8011b02:	3301      	adds	r3, #1
 8011b04:	6063      	str	r3, [r4, #4]
 8011b06:	e7e9      	b.n	8011adc <_sungetc_r+0xc>
 8011b08:	4621      	mov	r1, r4
 8011b0a:	f000 fd75 	bl	80125f8 <__submore>
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d0f1      	beq.n	8011af6 <_sungetc_r+0x26>
 8011b12:	e7e1      	b.n	8011ad8 <_sungetc_r+0x8>
 8011b14:	6921      	ldr	r1, [r4, #16]
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	b151      	cbz	r1, 8011b30 <_sungetc_r+0x60>
 8011b1a:	4299      	cmp	r1, r3
 8011b1c:	d208      	bcs.n	8011b30 <_sungetc_r+0x60>
 8011b1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011b22:	42a9      	cmp	r1, r5
 8011b24:	d104      	bne.n	8011b30 <_sungetc_r+0x60>
 8011b26:	3b01      	subs	r3, #1
 8011b28:	3201      	adds	r2, #1
 8011b2a:	6023      	str	r3, [r4, #0]
 8011b2c:	6062      	str	r2, [r4, #4]
 8011b2e:	e7d5      	b.n	8011adc <_sungetc_r+0xc>
 8011b30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b38:	6363      	str	r3, [r4, #52]	; 0x34
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8011b3e:	4623      	mov	r3, r4
 8011b40:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	2301      	movs	r3, #1
 8011b48:	e7dc      	b.n	8011b04 <_sungetc_r+0x34>

08011b4a <__ssrefill_r>:
 8011b4a:	b510      	push	{r4, lr}
 8011b4c:	460c      	mov	r4, r1
 8011b4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011b50:	b169      	cbz	r1, 8011b6e <__ssrefill_r+0x24>
 8011b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b56:	4299      	cmp	r1, r3
 8011b58:	d001      	beq.n	8011b5e <__ssrefill_r+0x14>
 8011b5a:	f7ff fe11 	bl	8011780 <_free_r>
 8011b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b60:	6063      	str	r3, [r4, #4]
 8011b62:	2000      	movs	r0, #0
 8011b64:	6360      	str	r0, [r4, #52]	; 0x34
 8011b66:	b113      	cbz	r3, 8011b6e <__ssrefill_r+0x24>
 8011b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b6a:	6023      	str	r3, [r4, #0]
 8011b6c:	bd10      	pop	{r4, pc}
 8011b6e:	6923      	ldr	r3, [r4, #16]
 8011b70:	6023      	str	r3, [r4, #0]
 8011b72:	2300      	movs	r3, #0
 8011b74:	6063      	str	r3, [r4, #4]
 8011b76:	89a3      	ldrh	r3, [r4, #12]
 8011b78:	f043 0320 	orr.w	r3, r3, #32
 8011b7c:	81a3      	strh	r3, [r4, #12]
 8011b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011b82:	e7f3      	b.n	8011b6c <__ssrefill_r+0x22>

08011b84 <__ssvfiscanf_r>:
 8011b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b88:	460c      	mov	r4, r1
 8011b8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011b8e:	2100      	movs	r1, #0
 8011b90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011b94:	49a6      	ldr	r1, [pc, #664]	; (8011e30 <__ssvfiscanf_r+0x2ac>)
 8011b96:	91a0      	str	r1, [sp, #640]	; 0x280
 8011b98:	f10d 0804 	add.w	r8, sp, #4
 8011b9c:	49a5      	ldr	r1, [pc, #660]	; (8011e34 <__ssvfiscanf_r+0x2b0>)
 8011b9e:	4fa6      	ldr	r7, [pc, #664]	; (8011e38 <__ssvfiscanf_r+0x2b4>)
 8011ba0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011e3c <__ssvfiscanf_r+0x2b8>
 8011ba4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011ba8:	4606      	mov	r6, r0
 8011baa:	91a1      	str	r1, [sp, #644]	; 0x284
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	7813      	ldrb	r3, [r2, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	f000 815a 	beq.w	8011e6a <__ssvfiscanf_r+0x2e6>
 8011bb6:	5dd9      	ldrb	r1, [r3, r7]
 8011bb8:	f011 0108 	ands.w	r1, r1, #8
 8011bbc:	f102 0501 	add.w	r5, r2, #1
 8011bc0:	d019      	beq.n	8011bf6 <__ssvfiscanf_r+0x72>
 8011bc2:	6863      	ldr	r3, [r4, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	dd0f      	ble.n	8011be8 <__ssvfiscanf_r+0x64>
 8011bc8:	6823      	ldr	r3, [r4, #0]
 8011bca:	781a      	ldrb	r2, [r3, #0]
 8011bcc:	5cba      	ldrb	r2, [r7, r2]
 8011bce:	0712      	lsls	r2, r2, #28
 8011bd0:	d401      	bmi.n	8011bd6 <__ssvfiscanf_r+0x52>
 8011bd2:	462a      	mov	r2, r5
 8011bd4:	e7eb      	b.n	8011bae <__ssvfiscanf_r+0x2a>
 8011bd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011bd8:	3201      	adds	r2, #1
 8011bda:	9245      	str	r2, [sp, #276]	; 0x114
 8011bdc:	6862      	ldr	r2, [r4, #4]
 8011bde:	3301      	adds	r3, #1
 8011be0:	3a01      	subs	r2, #1
 8011be2:	6062      	str	r2, [r4, #4]
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	e7ec      	b.n	8011bc2 <__ssvfiscanf_r+0x3e>
 8011be8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011bea:	4621      	mov	r1, r4
 8011bec:	4630      	mov	r0, r6
 8011bee:	4798      	blx	r3
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d0e9      	beq.n	8011bc8 <__ssvfiscanf_r+0x44>
 8011bf4:	e7ed      	b.n	8011bd2 <__ssvfiscanf_r+0x4e>
 8011bf6:	2b25      	cmp	r3, #37	; 0x25
 8011bf8:	d012      	beq.n	8011c20 <__ssvfiscanf_r+0x9c>
 8011bfa:	469a      	mov	sl, r3
 8011bfc:	6863      	ldr	r3, [r4, #4]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	f340 8091 	ble.w	8011d26 <__ssvfiscanf_r+0x1a2>
 8011c04:	6822      	ldr	r2, [r4, #0]
 8011c06:	7813      	ldrb	r3, [r2, #0]
 8011c08:	4553      	cmp	r3, sl
 8011c0a:	f040 812e 	bne.w	8011e6a <__ssvfiscanf_r+0x2e6>
 8011c0e:	6863      	ldr	r3, [r4, #4]
 8011c10:	3b01      	subs	r3, #1
 8011c12:	6063      	str	r3, [r4, #4]
 8011c14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011c16:	3201      	adds	r2, #1
 8011c18:	3301      	adds	r3, #1
 8011c1a:	6022      	str	r2, [r4, #0]
 8011c1c:	9345      	str	r3, [sp, #276]	; 0x114
 8011c1e:	e7d8      	b.n	8011bd2 <__ssvfiscanf_r+0x4e>
 8011c20:	9141      	str	r1, [sp, #260]	; 0x104
 8011c22:	9143      	str	r1, [sp, #268]	; 0x10c
 8011c24:	7853      	ldrb	r3, [r2, #1]
 8011c26:	2b2a      	cmp	r3, #42	; 0x2a
 8011c28:	bf02      	ittt	eq
 8011c2a:	2310      	moveq	r3, #16
 8011c2c:	1c95      	addeq	r5, r2, #2
 8011c2e:	9341      	streq	r3, [sp, #260]	; 0x104
 8011c30:	220a      	movs	r2, #10
 8011c32:	46aa      	mov	sl, r5
 8011c34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011c38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011c3c:	2b09      	cmp	r3, #9
 8011c3e:	d91d      	bls.n	8011c7c <__ssvfiscanf_r+0xf8>
 8011c40:	487e      	ldr	r0, [pc, #504]	; (8011e3c <__ssvfiscanf_r+0x2b8>)
 8011c42:	2203      	movs	r2, #3
 8011c44:	f7ee faec 	bl	8000220 <memchr>
 8011c48:	b140      	cbz	r0, 8011c5c <__ssvfiscanf_r+0xd8>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	eba0 0009 	sub.w	r0, r0, r9
 8011c50:	fa03 f000 	lsl.w	r0, r3, r0
 8011c54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011c56:	4318      	orrs	r0, r3
 8011c58:	9041      	str	r0, [sp, #260]	; 0x104
 8011c5a:	4655      	mov	r5, sl
 8011c5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011c60:	2b78      	cmp	r3, #120	; 0x78
 8011c62:	d806      	bhi.n	8011c72 <__ssvfiscanf_r+0xee>
 8011c64:	2b57      	cmp	r3, #87	; 0x57
 8011c66:	d810      	bhi.n	8011c8a <__ssvfiscanf_r+0x106>
 8011c68:	2b25      	cmp	r3, #37	; 0x25
 8011c6a:	d0c6      	beq.n	8011bfa <__ssvfiscanf_r+0x76>
 8011c6c:	d856      	bhi.n	8011d1c <__ssvfiscanf_r+0x198>
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d064      	beq.n	8011d3c <__ssvfiscanf_r+0x1b8>
 8011c72:	2303      	movs	r3, #3
 8011c74:	9347      	str	r3, [sp, #284]	; 0x11c
 8011c76:	230a      	movs	r3, #10
 8011c78:	9342      	str	r3, [sp, #264]	; 0x108
 8011c7a:	e071      	b.n	8011d60 <__ssvfiscanf_r+0x1dc>
 8011c7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011c7e:	fb02 1103 	mla	r1, r2, r3, r1
 8011c82:	3930      	subs	r1, #48	; 0x30
 8011c84:	9143      	str	r1, [sp, #268]	; 0x10c
 8011c86:	4655      	mov	r5, sl
 8011c88:	e7d3      	b.n	8011c32 <__ssvfiscanf_r+0xae>
 8011c8a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011c8e:	2a20      	cmp	r2, #32
 8011c90:	d8ef      	bhi.n	8011c72 <__ssvfiscanf_r+0xee>
 8011c92:	a101      	add	r1, pc, #4	; (adr r1, 8011c98 <__ssvfiscanf_r+0x114>)
 8011c94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011c98:	08011d4b 	.word	0x08011d4b
 8011c9c:	08011c73 	.word	0x08011c73
 8011ca0:	08011c73 	.word	0x08011c73
 8011ca4:	08011da9 	.word	0x08011da9
 8011ca8:	08011c73 	.word	0x08011c73
 8011cac:	08011c73 	.word	0x08011c73
 8011cb0:	08011c73 	.word	0x08011c73
 8011cb4:	08011c73 	.word	0x08011c73
 8011cb8:	08011c73 	.word	0x08011c73
 8011cbc:	08011c73 	.word	0x08011c73
 8011cc0:	08011c73 	.word	0x08011c73
 8011cc4:	08011dbf 	.word	0x08011dbf
 8011cc8:	08011d95 	.word	0x08011d95
 8011ccc:	08011d23 	.word	0x08011d23
 8011cd0:	08011d23 	.word	0x08011d23
 8011cd4:	08011d23 	.word	0x08011d23
 8011cd8:	08011c73 	.word	0x08011c73
 8011cdc:	08011d99 	.word	0x08011d99
 8011ce0:	08011c73 	.word	0x08011c73
 8011ce4:	08011c73 	.word	0x08011c73
 8011ce8:	08011c73 	.word	0x08011c73
 8011cec:	08011c73 	.word	0x08011c73
 8011cf0:	08011dcf 	.word	0x08011dcf
 8011cf4:	08011da1 	.word	0x08011da1
 8011cf8:	08011d43 	.word	0x08011d43
 8011cfc:	08011c73 	.word	0x08011c73
 8011d00:	08011c73 	.word	0x08011c73
 8011d04:	08011dcb 	.word	0x08011dcb
 8011d08:	08011c73 	.word	0x08011c73
 8011d0c:	08011d95 	.word	0x08011d95
 8011d10:	08011c73 	.word	0x08011c73
 8011d14:	08011c73 	.word	0x08011c73
 8011d18:	08011d4b 	.word	0x08011d4b
 8011d1c:	3b45      	subs	r3, #69	; 0x45
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d8a7      	bhi.n	8011c72 <__ssvfiscanf_r+0xee>
 8011d22:	2305      	movs	r3, #5
 8011d24:	e01b      	b.n	8011d5e <__ssvfiscanf_r+0x1da>
 8011d26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011d28:	4621      	mov	r1, r4
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	4798      	blx	r3
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f43f af68 	beq.w	8011c04 <__ssvfiscanf_r+0x80>
 8011d34:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011d36:	2800      	cmp	r0, #0
 8011d38:	f040 808d 	bne.w	8011e56 <__ssvfiscanf_r+0x2d2>
 8011d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d40:	e08f      	b.n	8011e62 <__ssvfiscanf_r+0x2de>
 8011d42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011d44:	f042 0220 	orr.w	r2, r2, #32
 8011d48:	9241      	str	r2, [sp, #260]	; 0x104
 8011d4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d50:	9241      	str	r2, [sp, #260]	; 0x104
 8011d52:	2210      	movs	r2, #16
 8011d54:	2b6f      	cmp	r3, #111	; 0x6f
 8011d56:	9242      	str	r2, [sp, #264]	; 0x108
 8011d58:	bf34      	ite	cc
 8011d5a:	2303      	movcc	r3, #3
 8011d5c:	2304      	movcs	r3, #4
 8011d5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8011d60:	6863      	ldr	r3, [r4, #4]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	dd42      	ble.n	8011dec <__ssvfiscanf_r+0x268>
 8011d66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011d68:	0659      	lsls	r1, r3, #25
 8011d6a:	d404      	bmi.n	8011d76 <__ssvfiscanf_r+0x1f2>
 8011d6c:	6823      	ldr	r3, [r4, #0]
 8011d6e:	781a      	ldrb	r2, [r3, #0]
 8011d70:	5cba      	ldrb	r2, [r7, r2]
 8011d72:	0712      	lsls	r2, r2, #28
 8011d74:	d441      	bmi.n	8011dfa <__ssvfiscanf_r+0x276>
 8011d76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011d78:	2b02      	cmp	r3, #2
 8011d7a:	dc50      	bgt.n	8011e1e <__ssvfiscanf_r+0x29a>
 8011d7c:	466b      	mov	r3, sp
 8011d7e:	4622      	mov	r2, r4
 8011d80:	a941      	add	r1, sp, #260	; 0x104
 8011d82:	4630      	mov	r0, r6
 8011d84:	f000 fa0a 	bl	801219c <_scanf_chars>
 8011d88:	2801      	cmp	r0, #1
 8011d8a:	d06e      	beq.n	8011e6a <__ssvfiscanf_r+0x2e6>
 8011d8c:	2802      	cmp	r0, #2
 8011d8e:	f47f af20 	bne.w	8011bd2 <__ssvfiscanf_r+0x4e>
 8011d92:	e7cf      	b.n	8011d34 <__ssvfiscanf_r+0x1b0>
 8011d94:	220a      	movs	r2, #10
 8011d96:	e7dd      	b.n	8011d54 <__ssvfiscanf_r+0x1d0>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	9342      	str	r3, [sp, #264]	; 0x108
 8011d9c:	2303      	movs	r3, #3
 8011d9e:	e7de      	b.n	8011d5e <__ssvfiscanf_r+0x1da>
 8011da0:	2308      	movs	r3, #8
 8011da2:	9342      	str	r3, [sp, #264]	; 0x108
 8011da4:	2304      	movs	r3, #4
 8011da6:	e7da      	b.n	8011d5e <__ssvfiscanf_r+0x1da>
 8011da8:	4629      	mov	r1, r5
 8011daa:	4640      	mov	r0, r8
 8011dac:	f000 fb64 	bl	8012478 <__sccl>
 8011db0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011db6:	9341      	str	r3, [sp, #260]	; 0x104
 8011db8:	4605      	mov	r5, r0
 8011dba:	2301      	movs	r3, #1
 8011dbc:	e7cf      	b.n	8011d5e <__ssvfiscanf_r+0x1da>
 8011dbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dc4:	9341      	str	r3, [sp, #260]	; 0x104
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	e7c9      	b.n	8011d5e <__ssvfiscanf_r+0x1da>
 8011dca:	2302      	movs	r3, #2
 8011dcc:	e7c7      	b.n	8011d5e <__ssvfiscanf_r+0x1da>
 8011dce:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011dd0:	06c3      	lsls	r3, r0, #27
 8011dd2:	f53f aefe 	bmi.w	8011bd2 <__ssvfiscanf_r+0x4e>
 8011dd6:	9b00      	ldr	r3, [sp, #0]
 8011dd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011dda:	1d19      	adds	r1, r3, #4
 8011ddc:	9100      	str	r1, [sp, #0]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f010 0f01 	tst.w	r0, #1
 8011de4:	bf14      	ite	ne
 8011de6:	801a      	strhne	r2, [r3, #0]
 8011de8:	601a      	streq	r2, [r3, #0]
 8011dea:	e6f2      	b.n	8011bd2 <__ssvfiscanf_r+0x4e>
 8011dec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011dee:	4621      	mov	r1, r4
 8011df0:	4630      	mov	r0, r6
 8011df2:	4798      	blx	r3
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d0b6      	beq.n	8011d66 <__ssvfiscanf_r+0x1e2>
 8011df8:	e79c      	b.n	8011d34 <__ssvfiscanf_r+0x1b0>
 8011dfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011dfc:	3201      	adds	r2, #1
 8011dfe:	9245      	str	r2, [sp, #276]	; 0x114
 8011e00:	6862      	ldr	r2, [r4, #4]
 8011e02:	3a01      	subs	r2, #1
 8011e04:	2a00      	cmp	r2, #0
 8011e06:	6062      	str	r2, [r4, #4]
 8011e08:	dd02      	ble.n	8011e10 <__ssvfiscanf_r+0x28c>
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	e7ad      	b.n	8011d6c <__ssvfiscanf_r+0x1e8>
 8011e10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011e12:	4621      	mov	r1, r4
 8011e14:	4630      	mov	r0, r6
 8011e16:	4798      	blx	r3
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d0a7      	beq.n	8011d6c <__ssvfiscanf_r+0x1e8>
 8011e1c:	e78a      	b.n	8011d34 <__ssvfiscanf_r+0x1b0>
 8011e1e:	2b04      	cmp	r3, #4
 8011e20:	dc0e      	bgt.n	8011e40 <__ssvfiscanf_r+0x2bc>
 8011e22:	466b      	mov	r3, sp
 8011e24:	4622      	mov	r2, r4
 8011e26:	a941      	add	r1, sp, #260	; 0x104
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f000 fa11 	bl	8012250 <_scanf_i>
 8011e2e:	e7ab      	b.n	8011d88 <__ssvfiscanf_r+0x204>
 8011e30:	08011ad1 	.word	0x08011ad1
 8011e34:	08011b4b 	.word	0x08011b4b
 8011e38:	080141c9 	.word	0x080141c9
 8011e3c:	080144ca 	.word	0x080144ca
 8011e40:	4b0b      	ldr	r3, [pc, #44]	; (8011e70 <__ssvfiscanf_r+0x2ec>)
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f43f aec5 	beq.w	8011bd2 <__ssvfiscanf_r+0x4e>
 8011e48:	466b      	mov	r3, sp
 8011e4a:	4622      	mov	r2, r4
 8011e4c:	a941      	add	r1, sp, #260	; 0x104
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f7fd f960 	bl	800f114 <_scanf_float>
 8011e54:	e798      	b.n	8011d88 <__ssvfiscanf_r+0x204>
 8011e56:	89a3      	ldrh	r3, [r4, #12]
 8011e58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011e5c:	bf18      	it	ne
 8011e5e:	f04f 30ff 	movne.w	r0, #4294967295
 8011e62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011e6c:	e7f9      	b.n	8011e62 <__ssvfiscanf_r+0x2de>
 8011e6e:	bf00      	nop
 8011e70:	0800f115 	.word	0x0800f115

08011e74 <_printf_common>:
 8011e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e78:	4616      	mov	r6, r2
 8011e7a:	4699      	mov	r9, r3
 8011e7c:	688a      	ldr	r2, [r1, #8]
 8011e7e:	690b      	ldr	r3, [r1, #16]
 8011e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e84:	4293      	cmp	r3, r2
 8011e86:	bfb8      	it	lt
 8011e88:	4613      	movlt	r3, r2
 8011e8a:	6033      	str	r3, [r6, #0]
 8011e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e90:	4607      	mov	r7, r0
 8011e92:	460c      	mov	r4, r1
 8011e94:	b10a      	cbz	r2, 8011e9a <_printf_common+0x26>
 8011e96:	3301      	adds	r3, #1
 8011e98:	6033      	str	r3, [r6, #0]
 8011e9a:	6823      	ldr	r3, [r4, #0]
 8011e9c:	0699      	lsls	r1, r3, #26
 8011e9e:	bf42      	ittt	mi
 8011ea0:	6833      	ldrmi	r3, [r6, #0]
 8011ea2:	3302      	addmi	r3, #2
 8011ea4:	6033      	strmi	r3, [r6, #0]
 8011ea6:	6825      	ldr	r5, [r4, #0]
 8011ea8:	f015 0506 	ands.w	r5, r5, #6
 8011eac:	d106      	bne.n	8011ebc <_printf_common+0x48>
 8011eae:	f104 0a19 	add.w	sl, r4, #25
 8011eb2:	68e3      	ldr	r3, [r4, #12]
 8011eb4:	6832      	ldr	r2, [r6, #0]
 8011eb6:	1a9b      	subs	r3, r3, r2
 8011eb8:	42ab      	cmp	r3, r5
 8011eba:	dc26      	bgt.n	8011f0a <_printf_common+0x96>
 8011ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ec0:	1e13      	subs	r3, r2, #0
 8011ec2:	6822      	ldr	r2, [r4, #0]
 8011ec4:	bf18      	it	ne
 8011ec6:	2301      	movne	r3, #1
 8011ec8:	0692      	lsls	r2, r2, #26
 8011eca:	d42b      	bmi.n	8011f24 <_printf_common+0xb0>
 8011ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ed0:	4649      	mov	r1, r9
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	47c0      	blx	r8
 8011ed6:	3001      	adds	r0, #1
 8011ed8:	d01e      	beq.n	8011f18 <_printf_common+0xa4>
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	68e5      	ldr	r5, [r4, #12]
 8011ede:	6832      	ldr	r2, [r6, #0]
 8011ee0:	f003 0306 	and.w	r3, r3, #6
 8011ee4:	2b04      	cmp	r3, #4
 8011ee6:	bf08      	it	eq
 8011ee8:	1aad      	subeq	r5, r5, r2
 8011eea:	68a3      	ldr	r3, [r4, #8]
 8011eec:	6922      	ldr	r2, [r4, #16]
 8011eee:	bf0c      	ite	eq
 8011ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ef4:	2500      	movne	r5, #0
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	bfc4      	itt	gt
 8011efa:	1a9b      	subgt	r3, r3, r2
 8011efc:	18ed      	addgt	r5, r5, r3
 8011efe:	2600      	movs	r6, #0
 8011f00:	341a      	adds	r4, #26
 8011f02:	42b5      	cmp	r5, r6
 8011f04:	d11a      	bne.n	8011f3c <_printf_common+0xc8>
 8011f06:	2000      	movs	r0, #0
 8011f08:	e008      	b.n	8011f1c <_printf_common+0xa8>
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	4652      	mov	r2, sl
 8011f0e:	4649      	mov	r1, r9
 8011f10:	4638      	mov	r0, r7
 8011f12:	47c0      	blx	r8
 8011f14:	3001      	adds	r0, #1
 8011f16:	d103      	bne.n	8011f20 <_printf_common+0xac>
 8011f18:	f04f 30ff 	mov.w	r0, #4294967295
 8011f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f20:	3501      	adds	r5, #1
 8011f22:	e7c6      	b.n	8011eb2 <_printf_common+0x3e>
 8011f24:	18e1      	adds	r1, r4, r3
 8011f26:	1c5a      	adds	r2, r3, #1
 8011f28:	2030      	movs	r0, #48	; 0x30
 8011f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f2e:	4422      	add	r2, r4
 8011f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f38:	3302      	adds	r3, #2
 8011f3a:	e7c7      	b.n	8011ecc <_printf_common+0x58>
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	4622      	mov	r2, r4
 8011f40:	4649      	mov	r1, r9
 8011f42:	4638      	mov	r0, r7
 8011f44:	47c0      	blx	r8
 8011f46:	3001      	adds	r0, #1
 8011f48:	d0e6      	beq.n	8011f18 <_printf_common+0xa4>
 8011f4a:	3601      	adds	r6, #1
 8011f4c:	e7d9      	b.n	8011f02 <_printf_common+0x8e>
	...

08011f50 <_printf_i>:
 8011f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f54:	7e0f      	ldrb	r7, [r1, #24]
 8011f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f58:	2f78      	cmp	r7, #120	; 0x78
 8011f5a:	4691      	mov	r9, r2
 8011f5c:	4680      	mov	r8, r0
 8011f5e:	460c      	mov	r4, r1
 8011f60:	469a      	mov	sl, r3
 8011f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f66:	d807      	bhi.n	8011f78 <_printf_i+0x28>
 8011f68:	2f62      	cmp	r7, #98	; 0x62
 8011f6a:	d80a      	bhi.n	8011f82 <_printf_i+0x32>
 8011f6c:	2f00      	cmp	r7, #0
 8011f6e:	f000 80d8 	beq.w	8012122 <_printf_i+0x1d2>
 8011f72:	2f58      	cmp	r7, #88	; 0x58
 8011f74:	f000 80a3 	beq.w	80120be <_printf_i+0x16e>
 8011f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f80:	e03a      	b.n	8011ff8 <_printf_i+0xa8>
 8011f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f86:	2b15      	cmp	r3, #21
 8011f88:	d8f6      	bhi.n	8011f78 <_printf_i+0x28>
 8011f8a:	a101      	add	r1, pc, #4	; (adr r1, 8011f90 <_printf_i+0x40>)
 8011f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f90:	08011fe9 	.word	0x08011fe9
 8011f94:	08011ffd 	.word	0x08011ffd
 8011f98:	08011f79 	.word	0x08011f79
 8011f9c:	08011f79 	.word	0x08011f79
 8011fa0:	08011f79 	.word	0x08011f79
 8011fa4:	08011f79 	.word	0x08011f79
 8011fa8:	08011ffd 	.word	0x08011ffd
 8011fac:	08011f79 	.word	0x08011f79
 8011fb0:	08011f79 	.word	0x08011f79
 8011fb4:	08011f79 	.word	0x08011f79
 8011fb8:	08011f79 	.word	0x08011f79
 8011fbc:	08012109 	.word	0x08012109
 8011fc0:	0801202d 	.word	0x0801202d
 8011fc4:	080120eb 	.word	0x080120eb
 8011fc8:	08011f79 	.word	0x08011f79
 8011fcc:	08011f79 	.word	0x08011f79
 8011fd0:	0801212b 	.word	0x0801212b
 8011fd4:	08011f79 	.word	0x08011f79
 8011fd8:	0801202d 	.word	0x0801202d
 8011fdc:	08011f79 	.word	0x08011f79
 8011fe0:	08011f79 	.word	0x08011f79
 8011fe4:	080120f3 	.word	0x080120f3
 8011fe8:	682b      	ldr	r3, [r5, #0]
 8011fea:	1d1a      	adds	r2, r3, #4
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	602a      	str	r2, [r5, #0]
 8011ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e0a3      	b.n	8012144 <_printf_i+0x1f4>
 8011ffc:	6820      	ldr	r0, [r4, #0]
 8011ffe:	6829      	ldr	r1, [r5, #0]
 8012000:	0606      	lsls	r6, r0, #24
 8012002:	f101 0304 	add.w	r3, r1, #4
 8012006:	d50a      	bpl.n	801201e <_printf_i+0xce>
 8012008:	680e      	ldr	r6, [r1, #0]
 801200a:	602b      	str	r3, [r5, #0]
 801200c:	2e00      	cmp	r6, #0
 801200e:	da03      	bge.n	8012018 <_printf_i+0xc8>
 8012010:	232d      	movs	r3, #45	; 0x2d
 8012012:	4276      	negs	r6, r6
 8012014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012018:	485e      	ldr	r0, [pc, #376]	; (8012194 <_printf_i+0x244>)
 801201a:	230a      	movs	r3, #10
 801201c:	e019      	b.n	8012052 <_printf_i+0x102>
 801201e:	680e      	ldr	r6, [r1, #0]
 8012020:	602b      	str	r3, [r5, #0]
 8012022:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012026:	bf18      	it	ne
 8012028:	b236      	sxthne	r6, r6
 801202a:	e7ef      	b.n	801200c <_printf_i+0xbc>
 801202c:	682b      	ldr	r3, [r5, #0]
 801202e:	6820      	ldr	r0, [r4, #0]
 8012030:	1d19      	adds	r1, r3, #4
 8012032:	6029      	str	r1, [r5, #0]
 8012034:	0601      	lsls	r1, r0, #24
 8012036:	d501      	bpl.n	801203c <_printf_i+0xec>
 8012038:	681e      	ldr	r6, [r3, #0]
 801203a:	e002      	b.n	8012042 <_printf_i+0xf2>
 801203c:	0646      	lsls	r6, r0, #25
 801203e:	d5fb      	bpl.n	8012038 <_printf_i+0xe8>
 8012040:	881e      	ldrh	r6, [r3, #0]
 8012042:	4854      	ldr	r0, [pc, #336]	; (8012194 <_printf_i+0x244>)
 8012044:	2f6f      	cmp	r7, #111	; 0x6f
 8012046:	bf0c      	ite	eq
 8012048:	2308      	moveq	r3, #8
 801204a:	230a      	movne	r3, #10
 801204c:	2100      	movs	r1, #0
 801204e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012052:	6865      	ldr	r5, [r4, #4]
 8012054:	60a5      	str	r5, [r4, #8]
 8012056:	2d00      	cmp	r5, #0
 8012058:	bfa2      	ittt	ge
 801205a:	6821      	ldrge	r1, [r4, #0]
 801205c:	f021 0104 	bicge.w	r1, r1, #4
 8012060:	6021      	strge	r1, [r4, #0]
 8012062:	b90e      	cbnz	r6, 8012068 <_printf_i+0x118>
 8012064:	2d00      	cmp	r5, #0
 8012066:	d04d      	beq.n	8012104 <_printf_i+0x1b4>
 8012068:	4615      	mov	r5, r2
 801206a:	fbb6 f1f3 	udiv	r1, r6, r3
 801206e:	fb03 6711 	mls	r7, r3, r1, r6
 8012072:	5dc7      	ldrb	r7, [r0, r7]
 8012074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012078:	4637      	mov	r7, r6
 801207a:	42bb      	cmp	r3, r7
 801207c:	460e      	mov	r6, r1
 801207e:	d9f4      	bls.n	801206a <_printf_i+0x11a>
 8012080:	2b08      	cmp	r3, #8
 8012082:	d10b      	bne.n	801209c <_printf_i+0x14c>
 8012084:	6823      	ldr	r3, [r4, #0]
 8012086:	07de      	lsls	r6, r3, #31
 8012088:	d508      	bpl.n	801209c <_printf_i+0x14c>
 801208a:	6923      	ldr	r3, [r4, #16]
 801208c:	6861      	ldr	r1, [r4, #4]
 801208e:	4299      	cmp	r1, r3
 8012090:	bfde      	ittt	le
 8012092:	2330      	movle	r3, #48	; 0x30
 8012094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012098:	f105 35ff 	addle.w	r5, r5, #4294967295
 801209c:	1b52      	subs	r2, r2, r5
 801209e:	6122      	str	r2, [r4, #16]
 80120a0:	f8cd a000 	str.w	sl, [sp]
 80120a4:	464b      	mov	r3, r9
 80120a6:	aa03      	add	r2, sp, #12
 80120a8:	4621      	mov	r1, r4
 80120aa:	4640      	mov	r0, r8
 80120ac:	f7ff fee2 	bl	8011e74 <_printf_common>
 80120b0:	3001      	adds	r0, #1
 80120b2:	d14c      	bne.n	801214e <_printf_i+0x1fe>
 80120b4:	f04f 30ff 	mov.w	r0, #4294967295
 80120b8:	b004      	add	sp, #16
 80120ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120be:	4835      	ldr	r0, [pc, #212]	; (8012194 <_printf_i+0x244>)
 80120c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80120c4:	6829      	ldr	r1, [r5, #0]
 80120c6:	6823      	ldr	r3, [r4, #0]
 80120c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80120cc:	6029      	str	r1, [r5, #0]
 80120ce:	061d      	lsls	r5, r3, #24
 80120d0:	d514      	bpl.n	80120fc <_printf_i+0x1ac>
 80120d2:	07df      	lsls	r7, r3, #31
 80120d4:	bf44      	itt	mi
 80120d6:	f043 0320 	orrmi.w	r3, r3, #32
 80120da:	6023      	strmi	r3, [r4, #0]
 80120dc:	b91e      	cbnz	r6, 80120e6 <_printf_i+0x196>
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	f023 0320 	bic.w	r3, r3, #32
 80120e4:	6023      	str	r3, [r4, #0]
 80120e6:	2310      	movs	r3, #16
 80120e8:	e7b0      	b.n	801204c <_printf_i+0xfc>
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	f043 0320 	orr.w	r3, r3, #32
 80120f0:	6023      	str	r3, [r4, #0]
 80120f2:	2378      	movs	r3, #120	; 0x78
 80120f4:	4828      	ldr	r0, [pc, #160]	; (8012198 <_printf_i+0x248>)
 80120f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120fa:	e7e3      	b.n	80120c4 <_printf_i+0x174>
 80120fc:	0659      	lsls	r1, r3, #25
 80120fe:	bf48      	it	mi
 8012100:	b2b6      	uxthmi	r6, r6
 8012102:	e7e6      	b.n	80120d2 <_printf_i+0x182>
 8012104:	4615      	mov	r5, r2
 8012106:	e7bb      	b.n	8012080 <_printf_i+0x130>
 8012108:	682b      	ldr	r3, [r5, #0]
 801210a:	6826      	ldr	r6, [r4, #0]
 801210c:	6961      	ldr	r1, [r4, #20]
 801210e:	1d18      	adds	r0, r3, #4
 8012110:	6028      	str	r0, [r5, #0]
 8012112:	0635      	lsls	r5, r6, #24
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	d501      	bpl.n	801211c <_printf_i+0x1cc>
 8012118:	6019      	str	r1, [r3, #0]
 801211a:	e002      	b.n	8012122 <_printf_i+0x1d2>
 801211c:	0670      	lsls	r0, r6, #25
 801211e:	d5fb      	bpl.n	8012118 <_printf_i+0x1c8>
 8012120:	8019      	strh	r1, [r3, #0]
 8012122:	2300      	movs	r3, #0
 8012124:	6123      	str	r3, [r4, #16]
 8012126:	4615      	mov	r5, r2
 8012128:	e7ba      	b.n	80120a0 <_printf_i+0x150>
 801212a:	682b      	ldr	r3, [r5, #0]
 801212c:	1d1a      	adds	r2, r3, #4
 801212e:	602a      	str	r2, [r5, #0]
 8012130:	681d      	ldr	r5, [r3, #0]
 8012132:	6862      	ldr	r2, [r4, #4]
 8012134:	2100      	movs	r1, #0
 8012136:	4628      	mov	r0, r5
 8012138:	f7ee f872 	bl	8000220 <memchr>
 801213c:	b108      	cbz	r0, 8012142 <_printf_i+0x1f2>
 801213e:	1b40      	subs	r0, r0, r5
 8012140:	6060      	str	r0, [r4, #4]
 8012142:	6863      	ldr	r3, [r4, #4]
 8012144:	6123      	str	r3, [r4, #16]
 8012146:	2300      	movs	r3, #0
 8012148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801214c:	e7a8      	b.n	80120a0 <_printf_i+0x150>
 801214e:	6923      	ldr	r3, [r4, #16]
 8012150:	462a      	mov	r2, r5
 8012152:	4649      	mov	r1, r9
 8012154:	4640      	mov	r0, r8
 8012156:	47d0      	blx	sl
 8012158:	3001      	adds	r0, #1
 801215a:	d0ab      	beq.n	80120b4 <_printf_i+0x164>
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	079b      	lsls	r3, r3, #30
 8012160:	d413      	bmi.n	801218a <_printf_i+0x23a>
 8012162:	68e0      	ldr	r0, [r4, #12]
 8012164:	9b03      	ldr	r3, [sp, #12]
 8012166:	4298      	cmp	r0, r3
 8012168:	bfb8      	it	lt
 801216a:	4618      	movlt	r0, r3
 801216c:	e7a4      	b.n	80120b8 <_printf_i+0x168>
 801216e:	2301      	movs	r3, #1
 8012170:	4632      	mov	r2, r6
 8012172:	4649      	mov	r1, r9
 8012174:	4640      	mov	r0, r8
 8012176:	47d0      	blx	sl
 8012178:	3001      	adds	r0, #1
 801217a:	d09b      	beq.n	80120b4 <_printf_i+0x164>
 801217c:	3501      	adds	r5, #1
 801217e:	68e3      	ldr	r3, [r4, #12]
 8012180:	9903      	ldr	r1, [sp, #12]
 8012182:	1a5b      	subs	r3, r3, r1
 8012184:	42ab      	cmp	r3, r5
 8012186:	dcf2      	bgt.n	801216e <_printf_i+0x21e>
 8012188:	e7eb      	b.n	8012162 <_printf_i+0x212>
 801218a:	2500      	movs	r5, #0
 801218c:	f104 0619 	add.w	r6, r4, #25
 8012190:	e7f5      	b.n	801217e <_printf_i+0x22e>
 8012192:	bf00      	nop
 8012194:	080144d5 	.word	0x080144d5
 8012198:	080144e6 	.word	0x080144e6

0801219c <_scanf_chars>:
 801219c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121a0:	4615      	mov	r5, r2
 80121a2:	688a      	ldr	r2, [r1, #8]
 80121a4:	4680      	mov	r8, r0
 80121a6:	460c      	mov	r4, r1
 80121a8:	b932      	cbnz	r2, 80121b8 <_scanf_chars+0x1c>
 80121aa:	698a      	ldr	r2, [r1, #24]
 80121ac:	2a00      	cmp	r2, #0
 80121ae:	bf0c      	ite	eq
 80121b0:	2201      	moveq	r2, #1
 80121b2:	f04f 32ff 	movne.w	r2, #4294967295
 80121b6:	608a      	str	r2, [r1, #8]
 80121b8:	6822      	ldr	r2, [r4, #0]
 80121ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801224c <_scanf_chars+0xb0>
 80121be:	06d1      	lsls	r1, r2, #27
 80121c0:	bf5f      	itttt	pl
 80121c2:	681a      	ldrpl	r2, [r3, #0]
 80121c4:	1d11      	addpl	r1, r2, #4
 80121c6:	6019      	strpl	r1, [r3, #0]
 80121c8:	6816      	ldrpl	r6, [r2, #0]
 80121ca:	2700      	movs	r7, #0
 80121cc:	69a0      	ldr	r0, [r4, #24]
 80121ce:	b188      	cbz	r0, 80121f4 <_scanf_chars+0x58>
 80121d0:	2801      	cmp	r0, #1
 80121d2:	d107      	bne.n	80121e4 <_scanf_chars+0x48>
 80121d4:	682a      	ldr	r2, [r5, #0]
 80121d6:	7811      	ldrb	r1, [r2, #0]
 80121d8:	6962      	ldr	r2, [r4, #20]
 80121da:	5c52      	ldrb	r2, [r2, r1]
 80121dc:	b952      	cbnz	r2, 80121f4 <_scanf_chars+0x58>
 80121de:	2f00      	cmp	r7, #0
 80121e0:	d031      	beq.n	8012246 <_scanf_chars+0xaa>
 80121e2:	e022      	b.n	801222a <_scanf_chars+0x8e>
 80121e4:	2802      	cmp	r0, #2
 80121e6:	d120      	bne.n	801222a <_scanf_chars+0x8e>
 80121e8:	682b      	ldr	r3, [r5, #0]
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	f813 3009 	ldrb.w	r3, [r3, r9]
 80121f0:	071b      	lsls	r3, r3, #28
 80121f2:	d41a      	bmi.n	801222a <_scanf_chars+0x8e>
 80121f4:	6823      	ldr	r3, [r4, #0]
 80121f6:	06da      	lsls	r2, r3, #27
 80121f8:	bf5e      	ittt	pl
 80121fa:	682b      	ldrpl	r3, [r5, #0]
 80121fc:	781b      	ldrbpl	r3, [r3, #0]
 80121fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012202:	682a      	ldr	r2, [r5, #0]
 8012204:	686b      	ldr	r3, [r5, #4]
 8012206:	3201      	adds	r2, #1
 8012208:	602a      	str	r2, [r5, #0]
 801220a:	68a2      	ldr	r2, [r4, #8]
 801220c:	3b01      	subs	r3, #1
 801220e:	3a01      	subs	r2, #1
 8012210:	606b      	str	r3, [r5, #4]
 8012212:	3701      	adds	r7, #1
 8012214:	60a2      	str	r2, [r4, #8]
 8012216:	b142      	cbz	r2, 801222a <_scanf_chars+0x8e>
 8012218:	2b00      	cmp	r3, #0
 801221a:	dcd7      	bgt.n	80121cc <_scanf_chars+0x30>
 801221c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012220:	4629      	mov	r1, r5
 8012222:	4640      	mov	r0, r8
 8012224:	4798      	blx	r3
 8012226:	2800      	cmp	r0, #0
 8012228:	d0d0      	beq.n	80121cc <_scanf_chars+0x30>
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	f013 0310 	ands.w	r3, r3, #16
 8012230:	d105      	bne.n	801223e <_scanf_chars+0xa2>
 8012232:	68e2      	ldr	r2, [r4, #12]
 8012234:	3201      	adds	r2, #1
 8012236:	60e2      	str	r2, [r4, #12]
 8012238:	69a2      	ldr	r2, [r4, #24]
 801223a:	b102      	cbz	r2, 801223e <_scanf_chars+0xa2>
 801223c:	7033      	strb	r3, [r6, #0]
 801223e:	6923      	ldr	r3, [r4, #16]
 8012240:	443b      	add	r3, r7
 8012242:	6123      	str	r3, [r4, #16]
 8012244:	2000      	movs	r0, #0
 8012246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801224a:	bf00      	nop
 801224c:	080141c9 	.word	0x080141c9

08012250 <_scanf_i>:
 8012250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012254:	4698      	mov	r8, r3
 8012256:	4b76      	ldr	r3, [pc, #472]	; (8012430 <_scanf_i+0x1e0>)
 8012258:	460c      	mov	r4, r1
 801225a:	4682      	mov	sl, r0
 801225c:	4616      	mov	r6, r2
 801225e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012262:	b087      	sub	sp, #28
 8012264:	ab03      	add	r3, sp, #12
 8012266:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801226a:	4b72      	ldr	r3, [pc, #456]	; (8012434 <_scanf_i+0x1e4>)
 801226c:	69a1      	ldr	r1, [r4, #24]
 801226e:	4a72      	ldr	r2, [pc, #456]	; (8012438 <_scanf_i+0x1e8>)
 8012270:	2903      	cmp	r1, #3
 8012272:	bf18      	it	ne
 8012274:	461a      	movne	r2, r3
 8012276:	68a3      	ldr	r3, [r4, #8]
 8012278:	9201      	str	r2, [sp, #4]
 801227a:	1e5a      	subs	r2, r3, #1
 801227c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012280:	bf88      	it	hi
 8012282:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012286:	4627      	mov	r7, r4
 8012288:	bf82      	ittt	hi
 801228a:	eb03 0905 	addhi.w	r9, r3, r5
 801228e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012292:	60a3      	strhi	r3, [r4, #8]
 8012294:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012298:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801229c:	bf98      	it	ls
 801229e:	f04f 0900 	movls.w	r9, #0
 80122a2:	6023      	str	r3, [r4, #0]
 80122a4:	463d      	mov	r5, r7
 80122a6:	f04f 0b00 	mov.w	fp, #0
 80122aa:	6831      	ldr	r1, [r6, #0]
 80122ac:	ab03      	add	r3, sp, #12
 80122ae:	7809      	ldrb	r1, [r1, #0]
 80122b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80122b4:	2202      	movs	r2, #2
 80122b6:	f7ed ffb3 	bl	8000220 <memchr>
 80122ba:	b328      	cbz	r0, 8012308 <_scanf_i+0xb8>
 80122bc:	f1bb 0f01 	cmp.w	fp, #1
 80122c0:	d159      	bne.n	8012376 <_scanf_i+0x126>
 80122c2:	6862      	ldr	r2, [r4, #4]
 80122c4:	b92a      	cbnz	r2, 80122d2 <_scanf_i+0x82>
 80122c6:	6822      	ldr	r2, [r4, #0]
 80122c8:	2308      	movs	r3, #8
 80122ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80122ce:	6063      	str	r3, [r4, #4]
 80122d0:	6022      	str	r2, [r4, #0]
 80122d2:	6822      	ldr	r2, [r4, #0]
 80122d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80122d8:	6022      	str	r2, [r4, #0]
 80122da:	68a2      	ldr	r2, [r4, #8]
 80122dc:	1e51      	subs	r1, r2, #1
 80122de:	60a1      	str	r1, [r4, #8]
 80122e0:	b192      	cbz	r2, 8012308 <_scanf_i+0xb8>
 80122e2:	6832      	ldr	r2, [r6, #0]
 80122e4:	1c51      	adds	r1, r2, #1
 80122e6:	6031      	str	r1, [r6, #0]
 80122e8:	7812      	ldrb	r2, [r2, #0]
 80122ea:	f805 2b01 	strb.w	r2, [r5], #1
 80122ee:	6872      	ldr	r2, [r6, #4]
 80122f0:	3a01      	subs	r2, #1
 80122f2:	2a00      	cmp	r2, #0
 80122f4:	6072      	str	r2, [r6, #4]
 80122f6:	dc07      	bgt.n	8012308 <_scanf_i+0xb8>
 80122f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80122fc:	4631      	mov	r1, r6
 80122fe:	4650      	mov	r0, sl
 8012300:	4790      	blx	r2
 8012302:	2800      	cmp	r0, #0
 8012304:	f040 8085 	bne.w	8012412 <_scanf_i+0x1c2>
 8012308:	f10b 0b01 	add.w	fp, fp, #1
 801230c:	f1bb 0f03 	cmp.w	fp, #3
 8012310:	d1cb      	bne.n	80122aa <_scanf_i+0x5a>
 8012312:	6863      	ldr	r3, [r4, #4]
 8012314:	b90b      	cbnz	r3, 801231a <_scanf_i+0xca>
 8012316:	230a      	movs	r3, #10
 8012318:	6063      	str	r3, [r4, #4]
 801231a:	6863      	ldr	r3, [r4, #4]
 801231c:	4947      	ldr	r1, [pc, #284]	; (801243c <_scanf_i+0x1ec>)
 801231e:	6960      	ldr	r0, [r4, #20]
 8012320:	1ac9      	subs	r1, r1, r3
 8012322:	f000 f8a9 	bl	8012478 <__sccl>
 8012326:	f04f 0b00 	mov.w	fp, #0
 801232a:	68a3      	ldr	r3, [r4, #8]
 801232c:	6822      	ldr	r2, [r4, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d03d      	beq.n	80123ae <_scanf_i+0x15e>
 8012332:	6831      	ldr	r1, [r6, #0]
 8012334:	6960      	ldr	r0, [r4, #20]
 8012336:	f891 c000 	ldrb.w	ip, [r1]
 801233a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801233e:	2800      	cmp	r0, #0
 8012340:	d035      	beq.n	80123ae <_scanf_i+0x15e>
 8012342:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012346:	d124      	bne.n	8012392 <_scanf_i+0x142>
 8012348:	0510      	lsls	r0, r2, #20
 801234a:	d522      	bpl.n	8012392 <_scanf_i+0x142>
 801234c:	f10b 0b01 	add.w	fp, fp, #1
 8012350:	f1b9 0f00 	cmp.w	r9, #0
 8012354:	d003      	beq.n	801235e <_scanf_i+0x10e>
 8012356:	3301      	adds	r3, #1
 8012358:	f109 39ff 	add.w	r9, r9, #4294967295
 801235c:	60a3      	str	r3, [r4, #8]
 801235e:	6873      	ldr	r3, [r6, #4]
 8012360:	3b01      	subs	r3, #1
 8012362:	2b00      	cmp	r3, #0
 8012364:	6073      	str	r3, [r6, #4]
 8012366:	dd1b      	ble.n	80123a0 <_scanf_i+0x150>
 8012368:	6833      	ldr	r3, [r6, #0]
 801236a:	3301      	adds	r3, #1
 801236c:	6033      	str	r3, [r6, #0]
 801236e:	68a3      	ldr	r3, [r4, #8]
 8012370:	3b01      	subs	r3, #1
 8012372:	60a3      	str	r3, [r4, #8]
 8012374:	e7d9      	b.n	801232a <_scanf_i+0xda>
 8012376:	f1bb 0f02 	cmp.w	fp, #2
 801237a:	d1ae      	bne.n	80122da <_scanf_i+0x8a>
 801237c:	6822      	ldr	r2, [r4, #0]
 801237e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012382:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012386:	d1bf      	bne.n	8012308 <_scanf_i+0xb8>
 8012388:	2310      	movs	r3, #16
 801238a:	6063      	str	r3, [r4, #4]
 801238c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012390:	e7a2      	b.n	80122d8 <_scanf_i+0x88>
 8012392:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012396:	6022      	str	r2, [r4, #0]
 8012398:	780b      	ldrb	r3, [r1, #0]
 801239a:	f805 3b01 	strb.w	r3, [r5], #1
 801239e:	e7de      	b.n	801235e <_scanf_i+0x10e>
 80123a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80123a4:	4631      	mov	r1, r6
 80123a6:	4650      	mov	r0, sl
 80123a8:	4798      	blx	r3
 80123aa:	2800      	cmp	r0, #0
 80123ac:	d0df      	beq.n	801236e <_scanf_i+0x11e>
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	05db      	lsls	r3, r3, #23
 80123b2:	d50d      	bpl.n	80123d0 <_scanf_i+0x180>
 80123b4:	42bd      	cmp	r5, r7
 80123b6:	d909      	bls.n	80123cc <_scanf_i+0x17c>
 80123b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80123bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80123c0:	4632      	mov	r2, r6
 80123c2:	4650      	mov	r0, sl
 80123c4:	4798      	blx	r3
 80123c6:	f105 39ff 	add.w	r9, r5, #4294967295
 80123ca:	464d      	mov	r5, r9
 80123cc:	42bd      	cmp	r5, r7
 80123ce:	d02d      	beq.n	801242c <_scanf_i+0x1dc>
 80123d0:	6822      	ldr	r2, [r4, #0]
 80123d2:	f012 0210 	ands.w	r2, r2, #16
 80123d6:	d113      	bne.n	8012400 <_scanf_i+0x1b0>
 80123d8:	702a      	strb	r2, [r5, #0]
 80123da:	6863      	ldr	r3, [r4, #4]
 80123dc:	9e01      	ldr	r6, [sp, #4]
 80123de:	4639      	mov	r1, r7
 80123e0:	4650      	mov	r0, sl
 80123e2:	47b0      	blx	r6
 80123e4:	6821      	ldr	r1, [r4, #0]
 80123e6:	f8d8 3000 	ldr.w	r3, [r8]
 80123ea:	f011 0f20 	tst.w	r1, #32
 80123ee:	d013      	beq.n	8012418 <_scanf_i+0x1c8>
 80123f0:	1d1a      	adds	r2, r3, #4
 80123f2:	f8c8 2000 	str.w	r2, [r8]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	6018      	str	r0, [r3, #0]
 80123fa:	68e3      	ldr	r3, [r4, #12]
 80123fc:	3301      	adds	r3, #1
 80123fe:	60e3      	str	r3, [r4, #12]
 8012400:	1bed      	subs	r5, r5, r7
 8012402:	44ab      	add	fp, r5
 8012404:	6925      	ldr	r5, [r4, #16]
 8012406:	445d      	add	r5, fp
 8012408:	6125      	str	r5, [r4, #16]
 801240a:	2000      	movs	r0, #0
 801240c:	b007      	add	sp, #28
 801240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012412:	f04f 0b00 	mov.w	fp, #0
 8012416:	e7ca      	b.n	80123ae <_scanf_i+0x15e>
 8012418:	1d1a      	adds	r2, r3, #4
 801241a:	f8c8 2000 	str.w	r2, [r8]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f011 0f01 	tst.w	r1, #1
 8012424:	bf14      	ite	ne
 8012426:	8018      	strhne	r0, [r3, #0]
 8012428:	6018      	streq	r0, [r3, #0]
 801242a:	e7e6      	b.n	80123fa <_scanf_i+0x1aa>
 801242c:	2001      	movs	r0, #1
 801242e:	e7ed      	b.n	801240c <_scanf_i+0x1bc>
 8012430:	0801404c 	.word	0x0801404c
 8012434:	080125f5 	.word	0x080125f5
 8012438:	080104c5 	.word	0x080104c5
 801243c:	08014510 	.word	0x08014510

08012440 <_read_r>:
 8012440:	b538      	push	{r3, r4, r5, lr}
 8012442:	4d07      	ldr	r5, [pc, #28]	; (8012460 <_read_r+0x20>)
 8012444:	4604      	mov	r4, r0
 8012446:	4608      	mov	r0, r1
 8012448:	4611      	mov	r1, r2
 801244a:	2200      	movs	r2, #0
 801244c:	602a      	str	r2, [r5, #0]
 801244e:	461a      	mov	r2, r3
 8012450:	f7f0 fed6 	bl	8003200 <_read>
 8012454:	1c43      	adds	r3, r0, #1
 8012456:	d102      	bne.n	801245e <_read_r+0x1e>
 8012458:	682b      	ldr	r3, [r5, #0]
 801245a:	b103      	cbz	r3, 801245e <_read_r+0x1e>
 801245c:	6023      	str	r3, [r4, #0]
 801245e:	bd38      	pop	{r3, r4, r5, pc}
 8012460:	2000f650 	.word	0x2000f650
 8012464:	00000000 	.word	0x00000000

08012468 <nan>:
 8012468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012470 <nan+0x8>
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop
 8012470:	00000000 	.word	0x00000000
 8012474:	7ff80000 	.word	0x7ff80000

08012478 <__sccl>:
 8012478:	b570      	push	{r4, r5, r6, lr}
 801247a:	780b      	ldrb	r3, [r1, #0]
 801247c:	4604      	mov	r4, r0
 801247e:	2b5e      	cmp	r3, #94	; 0x5e
 8012480:	bf0b      	itete	eq
 8012482:	784b      	ldrbeq	r3, [r1, #1]
 8012484:	1c48      	addne	r0, r1, #1
 8012486:	1c88      	addeq	r0, r1, #2
 8012488:	2200      	movne	r2, #0
 801248a:	bf08      	it	eq
 801248c:	2201      	moveq	r2, #1
 801248e:	1e61      	subs	r1, r4, #1
 8012490:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012494:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012498:	42a9      	cmp	r1, r5
 801249a:	d1fb      	bne.n	8012494 <__sccl+0x1c>
 801249c:	b90b      	cbnz	r3, 80124a2 <__sccl+0x2a>
 801249e:	3801      	subs	r0, #1
 80124a0:	bd70      	pop	{r4, r5, r6, pc}
 80124a2:	f082 0201 	eor.w	r2, r2, #1
 80124a6:	54e2      	strb	r2, [r4, r3]
 80124a8:	4605      	mov	r5, r0
 80124aa:	4628      	mov	r0, r5
 80124ac:	f810 1b01 	ldrb.w	r1, [r0], #1
 80124b0:	292d      	cmp	r1, #45	; 0x2d
 80124b2:	d006      	beq.n	80124c2 <__sccl+0x4a>
 80124b4:	295d      	cmp	r1, #93	; 0x5d
 80124b6:	d0f3      	beq.n	80124a0 <__sccl+0x28>
 80124b8:	b909      	cbnz	r1, 80124be <__sccl+0x46>
 80124ba:	4628      	mov	r0, r5
 80124bc:	e7f0      	b.n	80124a0 <__sccl+0x28>
 80124be:	460b      	mov	r3, r1
 80124c0:	e7f1      	b.n	80124a6 <__sccl+0x2e>
 80124c2:	786e      	ldrb	r6, [r5, #1]
 80124c4:	2e5d      	cmp	r6, #93	; 0x5d
 80124c6:	d0fa      	beq.n	80124be <__sccl+0x46>
 80124c8:	42b3      	cmp	r3, r6
 80124ca:	dcf8      	bgt.n	80124be <__sccl+0x46>
 80124cc:	3502      	adds	r5, #2
 80124ce:	4619      	mov	r1, r3
 80124d0:	3101      	adds	r1, #1
 80124d2:	428e      	cmp	r6, r1
 80124d4:	5462      	strb	r2, [r4, r1]
 80124d6:	dcfb      	bgt.n	80124d0 <__sccl+0x58>
 80124d8:	1af1      	subs	r1, r6, r3
 80124da:	3901      	subs	r1, #1
 80124dc:	1c58      	adds	r0, r3, #1
 80124de:	42b3      	cmp	r3, r6
 80124e0:	bfa8      	it	ge
 80124e2:	2100      	movge	r1, #0
 80124e4:	1843      	adds	r3, r0, r1
 80124e6:	e7e0      	b.n	80124aa <__sccl+0x32>

080124e8 <strncmp>:
 80124e8:	b510      	push	{r4, lr}
 80124ea:	b17a      	cbz	r2, 801250c <strncmp+0x24>
 80124ec:	4603      	mov	r3, r0
 80124ee:	3901      	subs	r1, #1
 80124f0:	1884      	adds	r4, r0, r2
 80124f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80124f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80124fa:	4290      	cmp	r0, r2
 80124fc:	d101      	bne.n	8012502 <strncmp+0x1a>
 80124fe:	42a3      	cmp	r3, r4
 8012500:	d101      	bne.n	8012506 <strncmp+0x1e>
 8012502:	1a80      	subs	r0, r0, r2
 8012504:	bd10      	pop	{r4, pc}
 8012506:	2800      	cmp	r0, #0
 8012508:	d1f3      	bne.n	80124f2 <strncmp+0xa>
 801250a:	e7fa      	b.n	8012502 <strncmp+0x1a>
 801250c:	4610      	mov	r0, r2
 801250e:	e7f9      	b.n	8012504 <strncmp+0x1c>

08012510 <_strtoul_l.constprop.0>:
 8012510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012514:	4f36      	ldr	r7, [pc, #216]	; (80125f0 <_strtoul_l.constprop.0+0xe0>)
 8012516:	4686      	mov	lr, r0
 8012518:	460d      	mov	r5, r1
 801251a:	4628      	mov	r0, r5
 801251c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012520:	5de6      	ldrb	r6, [r4, r7]
 8012522:	f016 0608 	ands.w	r6, r6, #8
 8012526:	d1f8      	bne.n	801251a <_strtoul_l.constprop.0+0xa>
 8012528:	2c2d      	cmp	r4, #45	; 0x2d
 801252a:	d12f      	bne.n	801258c <_strtoul_l.constprop.0+0x7c>
 801252c:	782c      	ldrb	r4, [r5, #0]
 801252e:	2601      	movs	r6, #1
 8012530:	1c85      	adds	r5, r0, #2
 8012532:	2b00      	cmp	r3, #0
 8012534:	d057      	beq.n	80125e6 <_strtoul_l.constprop.0+0xd6>
 8012536:	2b10      	cmp	r3, #16
 8012538:	d109      	bne.n	801254e <_strtoul_l.constprop.0+0x3e>
 801253a:	2c30      	cmp	r4, #48	; 0x30
 801253c:	d107      	bne.n	801254e <_strtoul_l.constprop.0+0x3e>
 801253e:	7828      	ldrb	r0, [r5, #0]
 8012540:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012544:	2858      	cmp	r0, #88	; 0x58
 8012546:	d149      	bne.n	80125dc <_strtoul_l.constprop.0+0xcc>
 8012548:	786c      	ldrb	r4, [r5, #1]
 801254a:	2310      	movs	r3, #16
 801254c:	3502      	adds	r5, #2
 801254e:	f04f 38ff 	mov.w	r8, #4294967295
 8012552:	2700      	movs	r7, #0
 8012554:	fbb8 f8f3 	udiv	r8, r8, r3
 8012558:	fb03 f908 	mul.w	r9, r3, r8
 801255c:	ea6f 0909 	mvn.w	r9, r9
 8012560:	4638      	mov	r0, r7
 8012562:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012566:	f1bc 0f09 	cmp.w	ip, #9
 801256a:	d814      	bhi.n	8012596 <_strtoul_l.constprop.0+0x86>
 801256c:	4664      	mov	r4, ip
 801256e:	42a3      	cmp	r3, r4
 8012570:	dd22      	ble.n	80125b8 <_strtoul_l.constprop.0+0xa8>
 8012572:	2f00      	cmp	r7, #0
 8012574:	db1d      	blt.n	80125b2 <_strtoul_l.constprop.0+0xa2>
 8012576:	4580      	cmp	r8, r0
 8012578:	d31b      	bcc.n	80125b2 <_strtoul_l.constprop.0+0xa2>
 801257a:	d101      	bne.n	8012580 <_strtoul_l.constprop.0+0x70>
 801257c:	45a1      	cmp	r9, r4
 801257e:	db18      	blt.n	80125b2 <_strtoul_l.constprop.0+0xa2>
 8012580:	fb00 4003 	mla	r0, r0, r3, r4
 8012584:	2701      	movs	r7, #1
 8012586:	f815 4b01 	ldrb.w	r4, [r5], #1
 801258a:	e7ea      	b.n	8012562 <_strtoul_l.constprop.0+0x52>
 801258c:	2c2b      	cmp	r4, #43	; 0x2b
 801258e:	bf04      	itt	eq
 8012590:	782c      	ldrbeq	r4, [r5, #0]
 8012592:	1c85      	addeq	r5, r0, #2
 8012594:	e7cd      	b.n	8012532 <_strtoul_l.constprop.0+0x22>
 8012596:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801259a:	f1bc 0f19 	cmp.w	ip, #25
 801259e:	d801      	bhi.n	80125a4 <_strtoul_l.constprop.0+0x94>
 80125a0:	3c37      	subs	r4, #55	; 0x37
 80125a2:	e7e4      	b.n	801256e <_strtoul_l.constprop.0+0x5e>
 80125a4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80125a8:	f1bc 0f19 	cmp.w	ip, #25
 80125ac:	d804      	bhi.n	80125b8 <_strtoul_l.constprop.0+0xa8>
 80125ae:	3c57      	subs	r4, #87	; 0x57
 80125b0:	e7dd      	b.n	801256e <_strtoul_l.constprop.0+0x5e>
 80125b2:	f04f 37ff 	mov.w	r7, #4294967295
 80125b6:	e7e6      	b.n	8012586 <_strtoul_l.constprop.0+0x76>
 80125b8:	2f00      	cmp	r7, #0
 80125ba:	da07      	bge.n	80125cc <_strtoul_l.constprop.0+0xbc>
 80125bc:	2322      	movs	r3, #34	; 0x22
 80125be:	f8ce 3000 	str.w	r3, [lr]
 80125c2:	f04f 30ff 	mov.w	r0, #4294967295
 80125c6:	b932      	cbnz	r2, 80125d6 <_strtoul_l.constprop.0+0xc6>
 80125c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125cc:	b106      	cbz	r6, 80125d0 <_strtoul_l.constprop.0+0xc0>
 80125ce:	4240      	negs	r0, r0
 80125d0:	2a00      	cmp	r2, #0
 80125d2:	d0f9      	beq.n	80125c8 <_strtoul_l.constprop.0+0xb8>
 80125d4:	b107      	cbz	r7, 80125d8 <_strtoul_l.constprop.0+0xc8>
 80125d6:	1e69      	subs	r1, r5, #1
 80125d8:	6011      	str	r1, [r2, #0]
 80125da:	e7f5      	b.n	80125c8 <_strtoul_l.constprop.0+0xb8>
 80125dc:	2430      	movs	r4, #48	; 0x30
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1b5      	bne.n	801254e <_strtoul_l.constprop.0+0x3e>
 80125e2:	2308      	movs	r3, #8
 80125e4:	e7b3      	b.n	801254e <_strtoul_l.constprop.0+0x3e>
 80125e6:	2c30      	cmp	r4, #48	; 0x30
 80125e8:	d0a9      	beq.n	801253e <_strtoul_l.constprop.0+0x2e>
 80125ea:	230a      	movs	r3, #10
 80125ec:	e7af      	b.n	801254e <_strtoul_l.constprop.0+0x3e>
 80125ee:	bf00      	nop
 80125f0:	080141c9 	.word	0x080141c9

080125f4 <_strtoul_r>:
 80125f4:	f7ff bf8c 	b.w	8012510 <_strtoul_l.constprop.0>

080125f8 <__submore>:
 80125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125fc:	460c      	mov	r4, r1
 80125fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012604:	4299      	cmp	r1, r3
 8012606:	d11d      	bne.n	8012644 <__submore+0x4c>
 8012608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801260c:	f7fc fd0e 	bl	800f02c <_malloc_r>
 8012610:	b918      	cbnz	r0, 801261a <__submore+0x22>
 8012612:	f04f 30ff 	mov.w	r0, #4294967295
 8012616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801261a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801261e:	63a3      	str	r3, [r4, #56]	; 0x38
 8012620:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012624:	6360      	str	r0, [r4, #52]	; 0x34
 8012626:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801262a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801262e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012632:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012636:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801263a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801263e:	6020      	str	r0, [r4, #0]
 8012640:	2000      	movs	r0, #0
 8012642:	e7e8      	b.n	8012616 <__submore+0x1e>
 8012644:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012646:	0077      	lsls	r7, r6, #1
 8012648:	463a      	mov	r2, r7
 801264a:	f000 f86f 	bl	801272c <_realloc_r>
 801264e:	4605      	mov	r5, r0
 8012650:	2800      	cmp	r0, #0
 8012652:	d0de      	beq.n	8012612 <__submore+0x1a>
 8012654:	eb00 0806 	add.w	r8, r0, r6
 8012658:	4601      	mov	r1, r0
 801265a:	4632      	mov	r2, r6
 801265c:	4640      	mov	r0, r8
 801265e:	f7fc fcae 	bl	800efbe <memcpy>
 8012662:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012666:	f8c4 8000 	str.w	r8, [r4]
 801266a:	e7e9      	b.n	8012640 <__submore+0x48>

0801266c <__ascii_wctomb>:
 801266c:	b149      	cbz	r1, 8012682 <__ascii_wctomb+0x16>
 801266e:	2aff      	cmp	r2, #255	; 0xff
 8012670:	bf85      	ittet	hi
 8012672:	238a      	movhi	r3, #138	; 0x8a
 8012674:	6003      	strhi	r3, [r0, #0]
 8012676:	700a      	strbls	r2, [r1, #0]
 8012678:	f04f 30ff 	movhi.w	r0, #4294967295
 801267c:	bf98      	it	ls
 801267e:	2001      	movls	r0, #1
 8012680:	4770      	bx	lr
 8012682:	4608      	mov	r0, r1
 8012684:	4770      	bx	lr
	...

08012688 <__assert_func>:
 8012688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801268a:	4614      	mov	r4, r2
 801268c:	461a      	mov	r2, r3
 801268e:	4b09      	ldr	r3, [pc, #36]	; (80126b4 <__assert_func+0x2c>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4605      	mov	r5, r0
 8012694:	68d8      	ldr	r0, [r3, #12]
 8012696:	b14c      	cbz	r4, 80126ac <__assert_func+0x24>
 8012698:	4b07      	ldr	r3, [pc, #28]	; (80126b8 <__assert_func+0x30>)
 801269a:	9100      	str	r1, [sp, #0]
 801269c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80126a0:	4906      	ldr	r1, [pc, #24]	; (80126bc <__assert_func+0x34>)
 80126a2:	462b      	mov	r3, r5
 80126a4:	f000 f80e 	bl	80126c4 <fiprintf>
 80126a8:	f000 fa88 	bl	8012bbc <abort>
 80126ac:	4b04      	ldr	r3, [pc, #16]	; (80126c0 <__assert_func+0x38>)
 80126ae:	461c      	mov	r4, r3
 80126b0:	e7f3      	b.n	801269a <__assert_func+0x12>
 80126b2:	bf00      	nop
 80126b4:	20000114 	.word	0x20000114
 80126b8:	08014512 	.word	0x08014512
 80126bc:	0801451f 	.word	0x0801451f
 80126c0:	0801454d 	.word	0x0801454d

080126c4 <fiprintf>:
 80126c4:	b40e      	push	{r1, r2, r3}
 80126c6:	b503      	push	{r0, r1, lr}
 80126c8:	4601      	mov	r1, r0
 80126ca:	ab03      	add	r3, sp, #12
 80126cc:	4805      	ldr	r0, [pc, #20]	; (80126e4 <fiprintf+0x20>)
 80126ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80126d2:	6800      	ldr	r0, [r0, #0]
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	f000 f881 	bl	80127dc <_vfiprintf_r>
 80126da:	b002      	add	sp, #8
 80126dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80126e0:	b003      	add	sp, #12
 80126e2:	4770      	bx	lr
 80126e4:	20000114 	.word	0x20000114

080126e8 <malloc>:
 80126e8:	4b02      	ldr	r3, [pc, #8]	; (80126f4 <malloc+0xc>)
 80126ea:	4601      	mov	r1, r0
 80126ec:	6818      	ldr	r0, [r3, #0]
 80126ee:	f7fc bc9d 	b.w	800f02c <_malloc_r>
 80126f2:	bf00      	nop
 80126f4:	20000114 	.word	0x20000114

080126f8 <memmove>:
 80126f8:	4288      	cmp	r0, r1
 80126fa:	b510      	push	{r4, lr}
 80126fc:	eb01 0402 	add.w	r4, r1, r2
 8012700:	d902      	bls.n	8012708 <memmove+0x10>
 8012702:	4284      	cmp	r4, r0
 8012704:	4623      	mov	r3, r4
 8012706:	d807      	bhi.n	8012718 <memmove+0x20>
 8012708:	1e43      	subs	r3, r0, #1
 801270a:	42a1      	cmp	r1, r4
 801270c:	d008      	beq.n	8012720 <memmove+0x28>
 801270e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012716:	e7f8      	b.n	801270a <memmove+0x12>
 8012718:	4402      	add	r2, r0
 801271a:	4601      	mov	r1, r0
 801271c:	428a      	cmp	r2, r1
 801271e:	d100      	bne.n	8012722 <memmove+0x2a>
 8012720:	bd10      	pop	{r4, pc}
 8012722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801272a:	e7f7      	b.n	801271c <memmove+0x24>

0801272c <_realloc_r>:
 801272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012730:	4680      	mov	r8, r0
 8012732:	4614      	mov	r4, r2
 8012734:	460e      	mov	r6, r1
 8012736:	b921      	cbnz	r1, 8012742 <_realloc_r+0x16>
 8012738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801273c:	4611      	mov	r1, r2
 801273e:	f7fc bc75 	b.w	800f02c <_malloc_r>
 8012742:	b92a      	cbnz	r2, 8012750 <_realloc_r+0x24>
 8012744:	f7ff f81c 	bl	8011780 <_free_r>
 8012748:	4625      	mov	r5, r4
 801274a:	4628      	mov	r0, r5
 801274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012750:	f000 faa0 	bl	8012c94 <_malloc_usable_size_r>
 8012754:	4284      	cmp	r4, r0
 8012756:	4607      	mov	r7, r0
 8012758:	d802      	bhi.n	8012760 <_realloc_r+0x34>
 801275a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801275e:	d812      	bhi.n	8012786 <_realloc_r+0x5a>
 8012760:	4621      	mov	r1, r4
 8012762:	4640      	mov	r0, r8
 8012764:	f7fc fc62 	bl	800f02c <_malloc_r>
 8012768:	4605      	mov	r5, r0
 801276a:	2800      	cmp	r0, #0
 801276c:	d0ed      	beq.n	801274a <_realloc_r+0x1e>
 801276e:	42bc      	cmp	r4, r7
 8012770:	4622      	mov	r2, r4
 8012772:	4631      	mov	r1, r6
 8012774:	bf28      	it	cs
 8012776:	463a      	movcs	r2, r7
 8012778:	f7fc fc21 	bl	800efbe <memcpy>
 801277c:	4631      	mov	r1, r6
 801277e:	4640      	mov	r0, r8
 8012780:	f7fe fffe 	bl	8011780 <_free_r>
 8012784:	e7e1      	b.n	801274a <_realloc_r+0x1e>
 8012786:	4635      	mov	r5, r6
 8012788:	e7df      	b.n	801274a <_realloc_r+0x1e>

0801278a <__sfputc_r>:
 801278a:	6893      	ldr	r3, [r2, #8]
 801278c:	3b01      	subs	r3, #1
 801278e:	2b00      	cmp	r3, #0
 8012790:	b410      	push	{r4}
 8012792:	6093      	str	r3, [r2, #8]
 8012794:	da08      	bge.n	80127a8 <__sfputc_r+0x1e>
 8012796:	6994      	ldr	r4, [r2, #24]
 8012798:	42a3      	cmp	r3, r4
 801279a:	db01      	blt.n	80127a0 <__sfputc_r+0x16>
 801279c:	290a      	cmp	r1, #10
 801279e:	d103      	bne.n	80127a8 <__sfputc_r+0x1e>
 80127a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127a4:	f000 b94a 	b.w	8012a3c <__swbuf_r>
 80127a8:	6813      	ldr	r3, [r2, #0]
 80127aa:	1c58      	adds	r0, r3, #1
 80127ac:	6010      	str	r0, [r2, #0]
 80127ae:	7019      	strb	r1, [r3, #0]
 80127b0:	4608      	mov	r0, r1
 80127b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <__sfputs_r>:
 80127b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ba:	4606      	mov	r6, r0
 80127bc:	460f      	mov	r7, r1
 80127be:	4614      	mov	r4, r2
 80127c0:	18d5      	adds	r5, r2, r3
 80127c2:	42ac      	cmp	r4, r5
 80127c4:	d101      	bne.n	80127ca <__sfputs_r+0x12>
 80127c6:	2000      	movs	r0, #0
 80127c8:	e007      	b.n	80127da <__sfputs_r+0x22>
 80127ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ce:	463a      	mov	r2, r7
 80127d0:	4630      	mov	r0, r6
 80127d2:	f7ff ffda 	bl	801278a <__sfputc_r>
 80127d6:	1c43      	adds	r3, r0, #1
 80127d8:	d1f3      	bne.n	80127c2 <__sfputs_r+0xa>
 80127da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127dc <_vfiprintf_r>:
 80127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e0:	460d      	mov	r5, r1
 80127e2:	b09d      	sub	sp, #116	; 0x74
 80127e4:	4614      	mov	r4, r2
 80127e6:	4698      	mov	r8, r3
 80127e8:	4606      	mov	r6, r0
 80127ea:	b118      	cbz	r0, 80127f4 <_vfiprintf_r+0x18>
 80127ec:	6983      	ldr	r3, [r0, #24]
 80127ee:	b90b      	cbnz	r3, 80127f4 <_vfiprintf_r+0x18>
 80127f0:	f7fc fb20 	bl	800ee34 <__sinit>
 80127f4:	4b89      	ldr	r3, [pc, #548]	; (8012a1c <_vfiprintf_r+0x240>)
 80127f6:	429d      	cmp	r5, r3
 80127f8:	d11b      	bne.n	8012832 <_vfiprintf_r+0x56>
 80127fa:	6875      	ldr	r5, [r6, #4]
 80127fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127fe:	07d9      	lsls	r1, r3, #31
 8012800:	d405      	bmi.n	801280e <_vfiprintf_r+0x32>
 8012802:	89ab      	ldrh	r3, [r5, #12]
 8012804:	059a      	lsls	r2, r3, #22
 8012806:	d402      	bmi.n	801280e <_vfiprintf_r+0x32>
 8012808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801280a:	f7fc fbd6 	bl	800efba <__retarget_lock_acquire_recursive>
 801280e:	89ab      	ldrh	r3, [r5, #12]
 8012810:	071b      	lsls	r3, r3, #28
 8012812:	d501      	bpl.n	8012818 <_vfiprintf_r+0x3c>
 8012814:	692b      	ldr	r3, [r5, #16]
 8012816:	b9eb      	cbnz	r3, 8012854 <_vfiprintf_r+0x78>
 8012818:	4629      	mov	r1, r5
 801281a:	4630      	mov	r0, r6
 801281c:	f000 f960 	bl	8012ae0 <__swsetup_r>
 8012820:	b1c0      	cbz	r0, 8012854 <_vfiprintf_r+0x78>
 8012822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012824:	07dc      	lsls	r4, r3, #31
 8012826:	d50e      	bpl.n	8012846 <_vfiprintf_r+0x6a>
 8012828:	f04f 30ff 	mov.w	r0, #4294967295
 801282c:	b01d      	add	sp, #116	; 0x74
 801282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012832:	4b7b      	ldr	r3, [pc, #492]	; (8012a20 <_vfiprintf_r+0x244>)
 8012834:	429d      	cmp	r5, r3
 8012836:	d101      	bne.n	801283c <_vfiprintf_r+0x60>
 8012838:	68b5      	ldr	r5, [r6, #8]
 801283a:	e7df      	b.n	80127fc <_vfiprintf_r+0x20>
 801283c:	4b79      	ldr	r3, [pc, #484]	; (8012a24 <_vfiprintf_r+0x248>)
 801283e:	429d      	cmp	r5, r3
 8012840:	bf08      	it	eq
 8012842:	68f5      	ldreq	r5, [r6, #12]
 8012844:	e7da      	b.n	80127fc <_vfiprintf_r+0x20>
 8012846:	89ab      	ldrh	r3, [r5, #12]
 8012848:	0598      	lsls	r0, r3, #22
 801284a:	d4ed      	bmi.n	8012828 <_vfiprintf_r+0x4c>
 801284c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801284e:	f7fc fbb5 	bl	800efbc <__retarget_lock_release_recursive>
 8012852:	e7e9      	b.n	8012828 <_vfiprintf_r+0x4c>
 8012854:	2300      	movs	r3, #0
 8012856:	9309      	str	r3, [sp, #36]	; 0x24
 8012858:	2320      	movs	r3, #32
 801285a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801285e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012862:	2330      	movs	r3, #48	; 0x30
 8012864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012a28 <_vfiprintf_r+0x24c>
 8012868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801286c:	f04f 0901 	mov.w	r9, #1
 8012870:	4623      	mov	r3, r4
 8012872:	469a      	mov	sl, r3
 8012874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012878:	b10a      	cbz	r2, 801287e <_vfiprintf_r+0xa2>
 801287a:	2a25      	cmp	r2, #37	; 0x25
 801287c:	d1f9      	bne.n	8012872 <_vfiprintf_r+0x96>
 801287e:	ebba 0b04 	subs.w	fp, sl, r4
 8012882:	d00b      	beq.n	801289c <_vfiprintf_r+0xc0>
 8012884:	465b      	mov	r3, fp
 8012886:	4622      	mov	r2, r4
 8012888:	4629      	mov	r1, r5
 801288a:	4630      	mov	r0, r6
 801288c:	f7ff ff94 	bl	80127b8 <__sfputs_r>
 8012890:	3001      	adds	r0, #1
 8012892:	f000 80aa 	beq.w	80129ea <_vfiprintf_r+0x20e>
 8012896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012898:	445a      	add	r2, fp
 801289a:	9209      	str	r2, [sp, #36]	; 0x24
 801289c:	f89a 3000 	ldrb.w	r3, [sl]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 80a2 	beq.w	80129ea <_vfiprintf_r+0x20e>
 80128a6:	2300      	movs	r3, #0
 80128a8:	f04f 32ff 	mov.w	r2, #4294967295
 80128ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128b0:	f10a 0a01 	add.w	sl, sl, #1
 80128b4:	9304      	str	r3, [sp, #16]
 80128b6:	9307      	str	r3, [sp, #28]
 80128b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128bc:	931a      	str	r3, [sp, #104]	; 0x68
 80128be:	4654      	mov	r4, sl
 80128c0:	2205      	movs	r2, #5
 80128c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128c6:	4858      	ldr	r0, [pc, #352]	; (8012a28 <_vfiprintf_r+0x24c>)
 80128c8:	f7ed fcaa 	bl	8000220 <memchr>
 80128cc:	9a04      	ldr	r2, [sp, #16]
 80128ce:	b9d8      	cbnz	r0, 8012908 <_vfiprintf_r+0x12c>
 80128d0:	06d1      	lsls	r1, r2, #27
 80128d2:	bf44      	itt	mi
 80128d4:	2320      	movmi	r3, #32
 80128d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128da:	0713      	lsls	r3, r2, #28
 80128dc:	bf44      	itt	mi
 80128de:	232b      	movmi	r3, #43	; 0x2b
 80128e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128e4:	f89a 3000 	ldrb.w	r3, [sl]
 80128e8:	2b2a      	cmp	r3, #42	; 0x2a
 80128ea:	d015      	beq.n	8012918 <_vfiprintf_r+0x13c>
 80128ec:	9a07      	ldr	r2, [sp, #28]
 80128ee:	4654      	mov	r4, sl
 80128f0:	2000      	movs	r0, #0
 80128f2:	f04f 0c0a 	mov.w	ip, #10
 80128f6:	4621      	mov	r1, r4
 80128f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128fc:	3b30      	subs	r3, #48	; 0x30
 80128fe:	2b09      	cmp	r3, #9
 8012900:	d94e      	bls.n	80129a0 <_vfiprintf_r+0x1c4>
 8012902:	b1b0      	cbz	r0, 8012932 <_vfiprintf_r+0x156>
 8012904:	9207      	str	r2, [sp, #28]
 8012906:	e014      	b.n	8012932 <_vfiprintf_r+0x156>
 8012908:	eba0 0308 	sub.w	r3, r0, r8
 801290c:	fa09 f303 	lsl.w	r3, r9, r3
 8012910:	4313      	orrs	r3, r2
 8012912:	9304      	str	r3, [sp, #16]
 8012914:	46a2      	mov	sl, r4
 8012916:	e7d2      	b.n	80128be <_vfiprintf_r+0xe2>
 8012918:	9b03      	ldr	r3, [sp, #12]
 801291a:	1d19      	adds	r1, r3, #4
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	9103      	str	r1, [sp, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	bfbb      	ittet	lt
 8012924:	425b      	neglt	r3, r3
 8012926:	f042 0202 	orrlt.w	r2, r2, #2
 801292a:	9307      	strge	r3, [sp, #28]
 801292c:	9307      	strlt	r3, [sp, #28]
 801292e:	bfb8      	it	lt
 8012930:	9204      	strlt	r2, [sp, #16]
 8012932:	7823      	ldrb	r3, [r4, #0]
 8012934:	2b2e      	cmp	r3, #46	; 0x2e
 8012936:	d10c      	bne.n	8012952 <_vfiprintf_r+0x176>
 8012938:	7863      	ldrb	r3, [r4, #1]
 801293a:	2b2a      	cmp	r3, #42	; 0x2a
 801293c:	d135      	bne.n	80129aa <_vfiprintf_r+0x1ce>
 801293e:	9b03      	ldr	r3, [sp, #12]
 8012940:	1d1a      	adds	r2, r3, #4
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	9203      	str	r2, [sp, #12]
 8012946:	2b00      	cmp	r3, #0
 8012948:	bfb8      	it	lt
 801294a:	f04f 33ff 	movlt.w	r3, #4294967295
 801294e:	3402      	adds	r4, #2
 8012950:	9305      	str	r3, [sp, #20]
 8012952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012a38 <_vfiprintf_r+0x25c>
 8012956:	7821      	ldrb	r1, [r4, #0]
 8012958:	2203      	movs	r2, #3
 801295a:	4650      	mov	r0, sl
 801295c:	f7ed fc60 	bl	8000220 <memchr>
 8012960:	b140      	cbz	r0, 8012974 <_vfiprintf_r+0x198>
 8012962:	2340      	movs	r3, #64	; 0x40
 8012964:	eba0 000a 	sub.w	r0, r0, sl
 8012968:	fa03 f000 	lsl.w	r0, r3, r0
 801296c:	9b04      	ldr	r3, [sp, #16]
 801296e:	4303      	orrs	r3, r0
 8012970:	3401      	adds	r4, #1
 8012972:	9304      	str	r3, [sp, #16]
 8012974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012978:	482c      	ldr	r0, [pc, #176]	; (8012a2c <_vfiprintf_r+0x250>)
 801297a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801297e:	2206      	movs	r2, #6
 8012980:	f7ed fc4e 	bl	8000220 <memchr>
 8012984:	2800      	cmp	r0, #0
 8012986:	d03f      	beq.n	8012a08 <_vfiprintf_r+0x22c>
 8012988:	4b29      	ldr	r3, [pc, #164]	; (8012a30 <_vfiprintf_r+0x254>)
 801298a:	bb1b      	cbnz	r3, 80129d4 <_vfiprintf_r+0x1f8>
 801298c:	9b03      	ldr	r3, [sp, #12]
 801298e:	3307      	adds	r3, #7
 8012990:	f023 0307 	bic.w	r3, r3, #7
 8012994:	3308      	adds	r3, #8
 8012996:	9303      	str	r3, [sp, #12]
 8012998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801299a:	443b      	add	r3, r7
 801299c:	9309      	str	r3, [sp, #36]	; 0x24
 801299e:	e767      	b.n	8012870 <_vfiprintf_r+0x94>
 80129a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80129a4:	460c      	mov	r4, r1
 80129a6:	2001      	movs	r0, #1
 80129a8:	e7a5      	b.n	80128f6 <_vfiprintf_r+0x11a>
 80129aa:	2300      	movs	r3, #0
 80129ac:	3401      	adds	r4, #1
 80129ae:	9305      	str	r3, [sp, #20]
 80129b0:	4619      	mov	r1, r3
 80129b2:	f04f 0c0a 	mov.w	ip, #10
 80129b6:	4620      	mov	r0, r4
 80129b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129bc:	3a30      	subs	r2, #48	; 0x30
 80129be:	2a09      	cmp	r2, #9
 80129c0:	d903      	bls.n	80129ca <_vfiprintf_r+0x1ee>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d0c5      	beq.n	8012952 <_vfiprintf_r+0x176>
 80129c6:	9105      	str	r1, [sp, #20]
 80129c8:	e7c3      	b.n	8012952 <_vfiprintf_r+0x176>
 80129ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80129ce:	4604      	mov	r4, r0
 80129d0:	2301      	movs	r3, #1
 80129d2:	e7f0      	b.n	80129b6 <_vfiprintf_r+0x1da>
 80129d4:	ab03      	add	r3, sp, #12
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	462a      	mov	r2, r5
 80129da:	4b16      	ldr	r3, [pc, #88]	; (8012a34 <_vfiprintf_r+0x258>)
 80129dc:	a904      	add	r1, sp, #16
 80129de:	4630      	mov	r0, r6
 80129e0:	f3af 8000 	nop.w
 80129e4:	4607      	mov	r7, r0
 80129e6:	1c78      	adds	r0, r7, #1
 80129e8:	d1d6      	bne.n	8012998 <_vfiprintf_r+0x1bc>
 80129ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129ec:	07d9      	lsls	r1, r3, #31
 80129ee:	d405      	bmi.n	80129fc <_vfiprintf_r+0x220>
 80129f0:	89ab      	ldrh	r3, [r5, #12]
 80129f2:	059a      	lsls	r2, r3, #22
 80129f4:	d402      	bmi.n	80129fc <_vfiprintf_r+0x220>
 80129f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129f8:	f7fc fae0 	bl	800efbc <__retarget_lock_release_recursive>
 80129fc:	89ab      	ldrh	r3, [r5, #12]
 80129fe:	065b      	lsls	r3, r3, #25
 8012a00:	f53f af12 	bmi.w	8012828 <_vfiprintf_r+0x4c>
 8012a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a06:	e711      	b.n	801282c <_vfiprintf_r+0x50>
 8012a08:	ab03      	add	r3, sp, #12
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	462a      	mov	r2, r5
 8012a0e:	4b09      	ldr	r3, [pc, #36]	; (8012a34 <_vfiprintf_r+0x258>)
 8012a10:	a904      	add	r1, sp, #16
 8012a12:	4630      	mov	r0, r6
 8012a14:	f7ff fa9c 	bl	8011f50 <_printf_i>
 8012a18:	e7e4      	b.n	80129e4 <_vfiprintf_r+0x208>
 8012a1a:	bf00      	nop
 8012a1c:	08014120 	.word	0x08014120
 8012a20:	08014140 	.word	0x08014140
 8012a24:	08014100 	.word	0x08014100
 8012a28:	080144c4 	.word	0x080144c4
 8012a2c:	080144ce 	.word	0x080144ce
 8012a30:	00000000 	.word	0x00000000
 8012a34:	080127b9 	.word	0x080127b9
 8012a38:	080144ca 	.word	0x080144ca

08012a3c <__swbuf_r>:
 8012a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3e:	460e      	mov	r6, r1
 8012a40:	4614      	mov	r4, r2
 8012a42:	4605      	mov	r5, r0
 8012a44:	b118      	cbz	r0, 8012a4e <__swbuf_r+0x12>
 8012a46:	6983      	ldr	r3, [r0, #24]
 8012a48:	b90b      	cbnz	r3, 8012a4e <__swbuf_r+0x12>
 8012a4a:	f7fc f9f3 	bl	800ee34 <__sinit>
 8012a4e:	4b21      	ldr	r3, [pc, #132]	; (8012ad4 <__swbuf_r+0x98>)
 8012a50:	429c      	cmp	r4, r3
 8012a52:	d12b      	bne.n	8012aac <__swbuf_r+0x70>
 8012a54:	686c      	ldr	r4, [r5, #4]
 8012a56:	69a3      	ldr	r3, [r4, #24]
 8012a58:	60a3      	str	r3, [r4, #8]
 8012a5a:	89a3      	ldrh	r3, [r4, #12]
 8012a5c:	071a      	lsls	r2, r3, #28
 8012a5e:	d52f      	bpl.n	8012ac0 <__swbuf_r+0x84>
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	b36b      	cbz	r3, 8012ac0 <__swbuf_r+0x84>
 8012a64:	6923      	ldr	r3, [r4, #16]
 8012a66:	6820      	ldr	r0, [r4, #0]
 8012a68:	1ac0      	subs	r0, r0, r3
 8012a6a:	6963      	ldr	r3, [r4, #20]
 8012a6c:	b2f6      	uxtb	r6, r6
 8012a6e:	4283      	cmp	r3, r0
 8012a70:	4637      	mov	r7, r6
 8012a72:	dc04      	bgt.n	8012a7e <__swbuf_r+0x42>
 8012a74:	4621      	mov	r1, r4
 8012a76:	4628      	mov	r0, r5
 8012a78:	f7fd fdce 	bl	8010618 <_fflush_r>
 8012a7c:	bb30      	cbnz	r0, 8012acc <__swbuf_r+0x90>
 8012a7e:	68a3      	ldr	r3, [r4, #8]
 8012a80:	3b01      	subs	r3, #1
 8012a82:	60a3      	str	r3, [r4, #8]
 8012a84:	6823      	ldr	r3, [r4, #0]
 8012a86:	1c5a      	adds	r2, r3, #1
 8012a88:	6022      	str	r2, [r4, #0]
 8012a8a:	701e      	strb	r6, [r3, #0]
 8012a8c:	6963      	ldr	r3, [r4, #20]
 8012a8e:	3001      	adds	r0, #1
 8012a90:	4283      	cmp	r3, r0
 8012a92:	d004      	beq.n	8012a9e <__swbuf_r+0x62>
 8012a94:	89a3      	ldrh	r3, [r4, #12]
 8012a96:	07db      	lsls	r3, r3, #31
 8012a98:	d506      	bpl.n	8012aa8 <__swbuf_r+0x6c>
 8012a9a:	2e0a      	cmp	r6, #10
 8012a9c:	d104      	bne.n	8012aa8 <__swbuf_r+0x6c>
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	f7fd fdb9 	bl	8010618 <_fflush_r>
 8012aa6:	b988      	cbnz	r0, 8012acc <__swbuf_r+0x90>
 8012aa8:	4638      	mov	r0, r7
 8012aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aac:	4b0a      	ldr	r3, [pc, #40]	; (8012ad8 <__swbuf_r+0x9c>)
 8012aae:	429c      	cmp	r4, r3
 8012ab0:	d101      	bne.n	8012ab6 <__swbuf_r+0x7a>
 8012ab2:	68ac      	ldr	r4, [r5, #8]
 8012ab4:	e7cf      	b.n	8012a56 <__swbuf_r+0x1a>
 8012ab6:	4b09      	ldr	r3, [pc, #36]	; (8012adc <__swbuf_r+0xa0>)
 8012ab8:	429c      	cmp	r4, r3
 8012aba:	bf08      	it	eq
 8012abc:	68ec      	ldreq	r4, [r5, #12]
 8012abe:	e7ca      	b.n	8012a56 <__swbuf_r+0x1a>
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f000 f80c 	bl	8012ae0 <__swsetup_r>
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	d0cb      	beq.n	8012a64 <__swbuf_r+0x28>
 8012acc:	f04f 37ff 	mov.w	r7, #4294967295
 8012ad0:	e7ea      	b.n	8012aa8 <__swbuf_r+0x6c>
 8012ad2:	bf00      	nop
 8012ad4:	08014120 	.word	0x08014120
 8012ad8:	08014140 	.word	0x08014140
 8012adc:	08014100 	.word	0x08014100

08012ae0 <__swsetup_r>:
 8012ae0:	4b32      	ldr	r3, [pc, #200]	; (8012bac <__swsetup_r+0xcc>)
 8012ae2:	b570      	push	{r4, r5, r6, lr}
 8012ae4:	681d      	ldr	r5, [r3, #0]
 8012ae6:	4606      	mov	r6, r0
 8012ae8:	460c      	mov	r4, r1
 8012aea:	b125      	cbz	r5, 8012af6 <__swsetup_r+0x16>
 8012aec:	69ab      	ldr	r3, [r5, #24]
 8012aee:	b913      	cbnz	r3, 8012af6 <__swsetup_r+0x16>
 8012af0:	4628      	mov	r0, r5
 8012af2:	f7fc f99f 	bl	800ee34 <__sinit>
 8012af6:	4b2e      	ldr	r3, [pc, #184]	; (8012bb0 <__swsetup_r+0xd0>)
 8012af8:	429c      	cmp	r4, r3
 8012afa:	d10f      	bne.n	8012b1c <__swsetup_r+0x3c>
 8012afc:	686c      	ldr	r4, [r5, #4]
 8012afe:	89a3      	ldrh	r3, [r4, #12]
 8012b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b04:	0719      	lsls	r1, r3, #28
 8012b06:	d42c      	bmi.n	8012b62 <__swsetup_r+0x82>
 8012b08:	06dd      	lsls	r5, r3, #27
 8012b0a:	d411      	bmi.n	8012b30 <__swsetup_r+0x50>
 8012b0c:	2309      	movs	r3, #9
 8012b0e:	6033      	str	r3, [r6, #0]
 8012b10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b14:	81a3      	strh	r3, [r4, #12]
 8012b16:	f04f 30ff 	mov.w	r0, #4294967295
 8012b1a:	e03e      	b.n	8012b9a <__swsetup_r+0xba>
 8012b1c:	4b25      	ldr	r3, [pc, #148]	; (8012bb4 <__swsetup_r+0xd4>)
 8012b1e:	429c      	cmp	r4, r3
 8012b20:	d101      	bne.n	8012b26 <__swsetup_r+0x46>
 8012b22:	68ac      	ldr	r4, [r5, #8]
 8012b24:	e7eb      	b.n	8012afe <__swsetup_r+0x1e>
 8012b26:	4b24      	ldr	r3, [pc, #144]	; (8012bb8 <__swsetup_r+0xd8>)
 8012b28:	429c      	cmp	r4, r3
 8012b2a:	bf08      	it	eq
 8012b2c:	68ec      	ldreq	r4, [r5, #12]
 8012b2e:	e7e6      	b.n	8012afe <__swsetup_r+0x1e>
 8012b30:	0758      	lsls	r0, r3, #29
 8012b32:	d512      	bpl.n	8012b5a <__swsetup_r+0x7a>
 8012b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b36:	b141      	cbz	r1, 8012b4a <__swsetup_r+0x6a>
 8012b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b3c:	4299      	cmp	r1, r3
 8012b3e:	d002      	beq.n	8012b46 <__swsetup_r+0x66>
 8012b40:	4630      	mov	r0, r6
 8012b42:	f7fe fe1d 	bl	8011780 <_free_r>
 8012b46:	2300      	movs	r3, #0
 8012b48:	6363      	str	r3, [r4, #52]	; 0x34
 8012b4a:	89a3      	ldrh	r3, [r4, #12]
 8012b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b50:	81a3      	strh	r3, [r4, #12]
 8012b52:	2300      	movs	r3, #0
 8012b54:	6063      	str	r3, [r4, #4]
 8012b56:	6923      	ldr	r3, [r4, #16]
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	f043 0308 	orr.w	r3, r3, #8
 8012b60:	81a3      	strh	r3, [r4, #12]
 8012b62:	6923      	ldr	r3, [r4, #16]
 8012b64:	b94b      	cbnz	r3, 8012b7a <__swsetup_r+0x9a>
 8012b66:	89a3      	ldrh	r3, [r4, #12]
 8012b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b70:	d003      	beq.n	8012b7a <__swsetup_r+0x9a>
 8012b72:	4621      	mov	r1, r4
 8012b74:	4630      	mov	r0, r6
 8012b76:	f000 f84d 	bl	8012c14 <__smakebuf_r>
 8012b7a:	89a0      	ldrh	r0, [r4, #12]
 8012b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b80:	f010 0301 	ands.w	r3, r0, #1
 8012b84:	d00a      	beq.n	8012b9c <__swsetup_r+0xbc>
 8012b86:	2300      	movs	r3, #0
 8012b88:	60a3      	str	r3, [r4, #8]
 8012b8a:	6963      	ldr	r3, [r4, #20]
 8012b8c:	425b      	negs	r3, r3
 8012b8e:	61a3      	str	r3, [r4, #24]
 8012b90:	6923      	ldr	r3, [r4, #16]
 8012b92:	b943      	cbnz	r3, 8012ba6 <__swsetup_r+0xc6>
 8012b94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b98:	d1ba      	bne.n	8012b10 <__swsetup_r+0x30>
 8012b9a:	bd70      	pop	{r4, r5, r6, pc}
 8012b9c:	0781      	lsls	r1, r0, #30
 8012b9e:	bf58      	it	pl
 8012ba0:	6963      	ldrpl	r3, [r4, #20]
 8012ba2:	60a3      	str	r3, [r4, #8]
 8012ba4:	e7f4      	b.n	8012b90 <__swsetup_r+0xb0>
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	e7f7      	b.n	8012b9a <__swsetup_r+0xba>
 8012baa:	bf00      	nop
 8012bac:	20000114 	.word	0x20000114
 8012bb0:	08014120 	.word	0x08014120
 8012bb4:	08014140 	.word	0x08014140
 8012bb8:	08014100 	.word	0x08014100

08012bbc <abort>:
 8012bbc:	b508      	push	{r3, lr}
 8012bbe:	2006      	movs	r0, #6
 8012bc0:	f000 f898 	bl	8012cf4 <raise>
 8012bc4:	2001      	movs	r0, #1
 8012bc6:	f7f0 fb11 	bl	80031ec <_exit>

08012bca <__swhatbuf_r>:
 8012bca:	b570      	push	{r4, r5, r6, lr}
 8012bcc:	460e      	mov	r6, r1
 8012bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd2:	2900      	cmp	r1, #0
 8012bd4:	b096      	sub	sp, #88	; 0x58
 8012bd6:	4614      	mov	r4, r2
 8012bd8:	461d      	mov	r5, r3
 8012bda:	da08      	bge.n	8012bee <__swhatbuf_r+0x24>
 8012bdc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012be0:	2200      	movs	r2, #0
 8012be2:	602a      	str	r2, [r5, #0]
 8012be4:	061a      	lsls	r2, r3, #24
 8012be6:	d410      	bmi.n	8012c0a <__swhatbuf_r+0x40>
 8012be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bec:	e00e      	b.n	8012c0c <__swhatbuf_r+0x42>
 8012bee:	466a      	mov	r2, sp
 8012bf0:	f000 f89c 	bl	8012d2c <_fstat_r>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	dbf1      	blt.n	8012bdc <__swhatbuf_r+0x12>
 8012bf8:	9a01      	ldr	r2, [sp, #4]
 8012bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c02:	425a      	negs	r2, r3
 8012c04:	415a      	adcs	r2, r3
 8012c06:	602a      	str	r2, [r5, #0]
 8012c08:	e7ee      	b.n	8012be8 <__swhatbuf_r+0x1e>
 8012c0a:	2340      	movs	r3, #64	; 0x40
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	6023      	str	r3, [r4, #0]
 8012c10:	b016      	add	sp, #88	; 0x58
 8012c12:	bd70      	pop	{r4, r5, r6, pc}

08012c14 <__smakebuf_r>:
 8012c14:	898b      	ldrh	r3, [r1, #12]
 8012c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c18:	079d      	lsls	r5, r3, #30
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	460c      	mov	r4, r1
 8012c1e:	d507      	bpl.n	8012c30 <__smakebuf_r+0x1c>
 8012c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c24:	6023      	str	r3, [r4, #0]
 8012c26:	6123      	str	r3, [r4, #16]
 8012c28:	2301      	movs	r3, #1
 8012c2a:	6163      	str	r3, [r4, #20]
 8012c2c:	b002      	add	sp, #8
 8012c2e:	bd70      	pop	{r4, r5, r6, pc}
 8012c30:	ab01      	add	r3, sp, #4
 8012c32:	466a      	mov	r2, sp
 8012c34:	f7ff ffc9 	bl	8012bca <__swhatbuf_r>
 8012c38:	9900      	ldr	r1, [sp, #0]
 8012c3a:	4605      	mov	r5, r0
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f7fc f9f5 	bl	800f02c <_malloc_r>
 8012c42:	b948      	cbnz	r0, 8012c58 <__smakebuf_r+0x44>
 8012c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c48:	059a      	lsls	r2, r3, #22
 8012c4a:	d4ef      	bmi.n	8012c2c <__smakebuf_r+0x18>
 8012c4c:	f023 0303 	bic.w	r3, r3, #3
 8012c50:	f043 0302 	orr.w	r3, r3, #2
 8012c54:	81a3      	strh	r3, [r4, #12]
 8012c56:	e7e3      	b.n	8012c20 <__smakebuf_r+0xc>
 8012c58:	4b0d      	ldr	r3, [pc, #52]	; (8012c90 <__smakebuf_r+0x7c>)
 8012c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c5c:	89a3      	ldrh	r3, [r4, #12]
 8012c5e:	6020      	str	r0, [r4, #0]
 8012c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c64:	81a3      	strh	r3, [r4, #12]
 8012c66:	9b00      	ldr	r3, [sp, #0]
 8012c68:	6163      	str	r3, [r4, #20]
 8012c6a:	9b01      	ldr	r3, [sp, #4]
 8012c6c:	6120      	str	r0, [r4, #16]
 8012c6e:	b15b      	cbz	r3, 8012c88 <__smakebuf_r+0x74>
 8012c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c74:	4630      	mov	r0, r6
 8012c76:	f000 f86b 	bl	8012d50 <_isatty_r>
 8012c7a:	b128      	cbz	r0, 8012c88 <__smakebuf_r+0x74>
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	f023 0303 	bic.w	r3, r3, #3
 8012c82:	f043 0301 	orr.w	r3, r3, #1
 8012c86:	81a3      	strh	r3, [r4, #12]
 8012c88:	89a0      	ldrh	r0, [r4, #12]
 8012c8a:	4305      	orrs	r5, r0
 8012c8c:	81a5      	strh	r5, [r4, #12]
 8012c8e:	e7cd      	b.n	8012c2c <__smakebuf_r+0x18>
 8012c90:	0800edcd 	.word	0x0800edcd

08012c94 <_malloc_usable_size_r>:
 8012c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c98:	1f18      	subs	r0, r3, #4
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	bfbc      	itt	lt
 8012c9e:	580b      	ldrlt	r3, [r1, r0]
 8012ca0:	18c0      	addlt	r0, r0, r3
 8012ca2:	4770      	bx	lr

08012ca4 <_raise_r>:
 8012ca4:	291f      	cmp	r1, #31
 8012ca6:	b538      	push	{r3, r4, r5, lr}
 8012ca8:	4604      	mov	r4, r0
 8012caa:	460d      	mov	r5, r1
 8012cac:	d904      	bls.n	8012cb8 <_raise_r+0x14>
 8012cae:	2316      	movs	r3, #22
 8012cb0:	6003      	str	r3, [r0, #0]
 8012cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8012cb6:	bd38      	pop	{r3, r4, r5, pc}
 8012cb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012cba:	b112      	cbz	r2, 8012cc2 <_raise_r+0x1e>
 8012cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012cc0:	b94b      	cbnz	r3, 8012cd6 <_raise_r+0x32>
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f000 f830 	bl	8012d28 <_getpid_r>
 8012cc8:	462a      	mov	r2, r5
 8012cca:	4601      	mov	r1, r0
 8012ccc:	4620      	mov	r0, r4
 8012cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cd2:	f000 b817 	b.w	8012d04 <_kill_r>
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d00a      	beq.n	8012cf0 <_raise_r+0x4c>
 8012cda:	1c59      	adds	r1, r3, #1
 8012cdc:	d103      	bne.n	8012ce6 <_raise_r+0x42>
 8012cde:	2316      	movs	r3, #22
 8012ce0:	6003      	str	r3, [r0, #0]
 8012ce2:	2001      	movs	r0, #1
 8012ce4:	e7e7      	b.n	8012cb6 <_raise_r+0x12>
 8012ce6:	2400      	movs	r4, #0
 8012ce8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012cec:	4628      	mov	r0, r5
 8012cee:	4798      	blx	r3
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	e7e0      	b.n	8012cb6 <_raise_r+0x12>

08012cf4 <raise>:
 8012cf4:	4b02      	ldr	r3, [pc, #8]	; (8012d00 <raise+0xc>)
 8012cf6:	4601      	mov	r1, r0
 8012cf8:	6818      	ldr	r0, [r3, #0]
 8012cfa:	f7ff bfd3 	b.w	8012ca4 <_raise_r>
 8012cfe:	bf00      	nop
 8012d00:	20000114 	.word	0x20000114

08012d04 <_kill_r>:
 8012d04:	b538      	push	{r3, r4, r5, lr}
 8012d06:	4d07      	ldr	r5, [pc, #28]	; (8012d24 <_kill_r+0x20>)
 8012d08:	2300      	movs	r3, #0
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	4608      	mov	r0, r1
 8012d0e:	4611      	mov	r1, r2
 8012d10:	602b      	str	r3, [r5, #0]
 8012d12:	f7f0 fa5b 	bl	80031cc <_kill>
 8012d16:	1c43      	adds	r3, r0, #1
 8012d18:	d102      	bne.n	8012d20 <_kill_r+0x1c>
 8012d1a:	682b      	ldr	r3, [r5, #0]
 8012d1c:	b103      	cbz	r3, 8012d20 <_kill_r+0x1c>
 8012d1e:	6023      	str	r3, [r4, #0]
 8012d20:	bd38      	pop	{r3, r4, r5, pc}
 8012d22:	bf00      	nop
 8012d24:	2000f650 	.word	0x2000f650

08012d28 <_getpid_r>:
 8012d28:	f7f0 ba48 	b.w	80031bc <_getpid>

08012d2c <_fstat_r>:
 8012d2c:	b538      	push	{r3, r4, r5, lr}
 8012d2e:	4d07      	ldr	r5, [pc, #28]	; (8012d4c <_fstat_r+0x20>)
 8012d30:	2300      	movs	r3, #0
 8012d32:	4604      	mov	r4, r0
 8012d34:	4608      	mov	r0, r1
 8012d36:	4611      	mov	r1, r2
 8012d38:	602b      	str	r3, [r5, #0]
 8012d3a:	f7f0 faa6 	bl	800328a <_fstat>
 8012d3e:	1c43      	adds	r3, r0, #1
 8012d40:	d102      	bne.n	8012d48 <_fstat_r+0x1c>
 8012d42:	682b      	ldr	r3, [r5, #0]
 8012d44:	b103      	cbz	r3, 8012d48 <_fstat_r+0x1c>
 8012d46:	6023      	str	r3, [r4, #0]
 8012d48:	bd38      	pop	{r3, r4, r5, pc}
 8012d4a:	bf00      	nop
 8012d4c:	2000f650 	.word	0x2000f650

08012d50 <_isatty_r>:
 8012d50:	b538      	push	{r3, r4, r5, lr}
 8012d52:	4d06      	ldr	r5, [pc, #24]	; (8012d6c <_isatty_r+0x1c>)
 8012d54:	2300      	movs	r3, #0
 8012d56:	4604      	mov	r4, r0
 8012d58:	4608      	mov	r0, r1
 8012d5a:	602b      	str	r3, [r5, #0]
 8012d5c:	f7f0 faa5 	bl	80032aa <_isatty>
 8012d60:	1c43      	adds	r3, r0, #1
 8012d62:	d102      	bne.n	8012d6a <_isatty_r+0x1a>
 8012d64:	682b      	ldr	r3, [r5, #0]
 8012d66:	b103      	cbz	r3, 8012d6a <_isatty_r+0x1a>
 8012d68:	6023      	str	r3, [r4, #0]
 8012d6a:	bd38      	pop	{r3, r4, r5, pc}
 8012d6c:	2000f650 	.word	0x2000f650

08012d70 <sin>:
 8012d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d72:	ec53 2b10 	vmov	r2, r3, d0
 8012d76:	4828      	ldr	r0, [pc, #160]	; (8012e18 <sin+0xa8>)
 8012d78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012d7c:	4281      	cmp	r1, r0
 8012d7e:	dc07      	bgt.n	8012d90 <sin+0x20>
 8012d80:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012e10 <sin+0xa0>
 8012d84:	2000      	movs	r0, #0
 8012d86:	b005      	add	sp, #20
 8012d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d8c:	f000 be6c 	b.w	8013a68 <__kernel_sin>
 8012d90:	4822      	ldr	r0, [pc, #136]	; (8012e1c <sin+0xac>)
 8012d92:	4281      	cmp	r1, r0
 8012d94:	dd09      	ble.n	8012daa <sin+0x3a>
 8012d96:	ee10 0a10 	vmov	r0, s0
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	f7ed fa94 	bl	80002c8 <__aeabi_dsub>
 8012da0:	ec41 0b10 	vmov	d0, r0, r1
 8012da4:	b005      	add	sp, #20
 8012da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8012daa:	4668      	mov	r0, sp
 8012dac:	f000 f838 	bl	8012e20 <__ieee754_rem_pio2>
 8012db0:	f000 0003 	and.w	r0, r0, #3
 8012db4:	2801      	cmp	r0, #1
 8012db6:	d00c      	beq.n	8012dd2 <sin+0x62>
 8012db8:	2802      	cmp	r0, #2
 8012dba:	d011      	beq.n	8012de0 <sin+0x70>
 8012dbc:	b9f0      	cbnz	r0, 8012dfc <sin+0x8c>
 8012dbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dc2:	ed9d 0b00 	vldr	d0, [sp]
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	f000 fe4e 	bl	8013a68 <__kernel_sin>
 8012dcc:	ec51 0b10 	vmov	r0, r1, d0
 8012dd0:	e7e6      	b.n	8012da0 <sin+0x30>
 8012dd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dd6:	ed9d 0b00 	vldr	d0, [sp]
 8012dda:	f000 fa2d 	bl	8013238 <__kernel_cos>
 8012dde:	e7f5      	b.n	8012dcc <sin+0x5c>
 8012de0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012de4:	ed9d 0b00 	vldr	d0, [sp]
 8012de8:	2001      	movs	r0, #1
 8012dea:	f000 fe3d 	bl	8013a68 <__kernel_sin>
 8012dee:	ec53 2b10 	vmov	r2, r3, d0
 8012df2:	ee10 0a10 	vmov	r0, s0
 8012df6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012dfa:	e7d1      	b.n	8012da0 <sin+0x30>
 8012dfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e00:	ed9d 0b00 	vldr	d0, [sp]
 8012e04:	f000 fa18 	bl	8013238 <__kernel_cos>
 8012e08:	e7f1      	b.n	8012dee <sin+0x7e>
 8012e0a:	bf00      	nop
 8012e0c:	f3af 8000 	nop.w
	...
 8012e18:	3fe921fb 	.word	0x3fe921fb
 8012e1c:	7fefffff 	.word	0x7fefffff

08012e20 <__ieee754_rem_pio2>:
 8012e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e24:	ed2d 8b02 	vpush	{d8}
 8012e28:	ec55 4b10 	vmov	r4, r5, d0
 8012e2c:	4bca      	ldr	r3, [pc, #808]	; (8013158 <__ieee754_rem_pio2+0x338>)
 8012e2e:	b08b      	sub	sp, #44	; 0x2c
 8012e30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012e34:	4598      	cmp	r8, r3
 8012e36:	4682      	mov	sl, r0
 8012e38:	9502      	str	r5, [sp, #8]
 8012e3a:	dc08      	bgt.n	8012e4e <__ieee754_rem_pio2+0x2e>
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	2300      	movs	r3, #0
 8012e40:	ed80 0b00 	vstr	d0, [r0]
 8012e44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012e48:	f04f 0b00 	mov.w	fp, #0
 8012e4c:	e028      	b.n	8012ea0 <__ieee754_rem_pio2+0x80>
 8012e4e:	4bc3      	ldr	r3, [pc, #780]	; (801315c <__ieee754_rem_pio2+0x33c>)
 8012e50:	4598      	cmp	r8, r3
 8012e52:	dc78      	bgt.n	8012f46 <__ieee754_rem_pio2+0x126>
 8012e54:	9b02      	ldr	r3, [sp, #8]
 8012e56:	4ec2      	ldr	r6, [pc, #776]	; (8013160 <__ieee754_rem_pio2+0x340>)
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	ee10 0a10 	vmov	r0, s0
 8012e5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8013120 <__ieee754_rem_pio2+0x300>)
 8012e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e64:	4629      	mov	r1, r5
 8012e66:	dd39      	ble.n	8012edc <__ieee754_rem_pio2+0xbc>
 8012e68:	f7ed fa2e 	bl	80002c8 <__aeabi_dsub>
 8012e6c:	45b0      	cmp	r8, r6
 8012e6e:	4604      	mov	r4, r0
 8012e70:	460d      	mov	r5, r1
 8012e72:	d01b      	beq.n	8012eac <__ieee754_rem_pio2+0x8c>
 8012e74:	a3ac      	add	r3, pc, #688	; (adr r3, 8013128 <__ieee754_rem_pio2+0x308>)
 8012e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7a:	f7ed fa25 	bl	80002c8 <__aeabi_dsub>
 8012e7e:	4602      	mov	r2, r0
 8012e80:	460b      	mov	r3, r1
 8012e82:	e9ca 2300 	strd	r2, r3, [sl]
 8012e86:	4620      	mov	r0, r4
 8012e88:	4629      	mov	r1, r5
 8012e8a:	f7ed fa1d 	bl	80002c8 <__aeabi_dsub>
 8012e8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8013128 <__ieee754_rem_pio2+0x308>)
 8012e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e94:	f7ed fa18 	bl	80002c8 <__aeabi_dsub>
 8012e98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012e9c:	f04f 0b01 	mov.w	fp, #1
 8012ea0:	4658      	mov	r0, fp
 8012ea2:	b00b      	add	sp, #44	; 0x2c
 8012ea4:	ecbd 8b02 	vpop	{d8}
 8012ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eac:	a3a0      	add	r3, pc, #640	; (adr r3, 8013130 <__ieee754_rem_pio2+0x310>)
 8012eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb2:	f7ed fa09 	bl	80002c8 <__aeabi_dsub>
 8012eb6:	a3a0      	add	r3, pc, #640	; (adr r3, 8013138 <__ieee754_rem_pio2+0x318>)
 8012eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	460d      	mov	r5, r1
 8012ec0:	f7ed fa02 	bl	80002c8 <__aeabi_dsub>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	e9ca 2300 	strd	r2, r3, [sl]
 8012ecc:	4620      	mov	r0, r4
 8012ece:	4629      	mov	r1, r5
 8012ed0:	f7ed f9fa 	bl	80002c8 <__aeabi_dsub>
 8012ed4:	a398      	add	r3, pc, #608	; (adr r3, 8013138 <__ieee754_rem_pio2+0x318>)
 8012ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eda:	e7db      	b.n	8012e94 <__ieee754_rem_pio2+0x74>
 8012edc:	f7ed f9f6 	bl	80002cc <__adddf3>
 8012ee0:	45b0      	cmp	r8, r6
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	460d      	mov	r5, r1
 8012ee6:	d016      	beq.n	8012f16 <__ieee754_rem_pio2+0xf6>
 8012ee8:	a38f      	add	r3, pc, #572	; (adr r3, 8013128 <__ieee754_rem_pio2+0x308>)
 8012eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eee:	f7ed f9ed 	bl	80002cc <__adddf3>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	e9ca 2300 	strd	r2, r3, [sl]
 8012efa:	4620      	mov	r0, r4
 8012efc:	4629      	mov	r1, r5
 8012efe:	f7ed f9e3 	bl	80002c8 <__aeabi_dsub>
 8012f02:	a389      	add	r3, pc, #548	; (adr r3, 8013128 <__ieee754_rem_pio2+0x308>)
 8012f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f08:	f7ed f9e0 	bl	80002cc <__adddf3>
 8012f0c:	f04f 3bff 	mov.w	fp, #4294967295
 8012f10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012f14:	e7c4      	b.n	8012ea0 <__ieee754_rem_pio2+0x80>
 8012f16:	a386      	add	r3, pc, #536	; (adr r3, 8013130 <__ieee754_rem_pio2+0x310>)
 8012f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1c:	f7ed f9d6 	bl	80002cc <__adddf3>
 8012f20:	a385      	add	r3, pc, #532	; (adr r3, 8013138 <__ieee754_rem_pio2+0x318>)
 8012f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f26:	4604      	mov	r4, r0
 8012f28:	460d      	mov	r5, r1
 8012f2a:	f7ed f9cf 	bl	80002cc <__adddf3>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	460b      	mov	r3, r1
 8012f32:	e9ca 2300 	strd	r2, r3, [sl]
 8012f36:	4620      	mov	r0, r4
 8012f38:	4629      	mov	r1, r5
 8012f3a:	f7ed f9c5 	bl	80002c8 <__aeabi_dsub>
 8012f3e:	a37e      	add	r3, pc, #504	; (adr r3, 8013138 <__ieee754_rem_pio2+0x318>)
 8012f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f44:	e7e0      	b.n	8012f08 <__ieee754_rem_pio2+0xe8>
 8012f46:	4b87      	ldr	r3, [pc, #540]	; (8013164 <__ieee754_rem_pio2+0x344>)
 8012f48:	4598      	cmp	r8, r3
 8012f4a:	f300 80d9 	bgt.w	8013100 <__ieee754_rem_pio2+0x2e0>
 8012f4e:	f000 fe49 	bl	8013be4 <fabs>
 8012f52:	ec55 4b10 	vmov	r4, r5, d0
 8012f56:	ee10 0a10 	vmov	r0, s0
 8012f5a:	a379      	add	r3, pc, #484	; (adr r3, 8013140 <__ieee754_rem_pio2+0x320>)
 8012f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f60:	4629      	mov	r1, r5
 8012f62:	f7ed fb69 	bl	8000638 <__aeabi_dmul>
 8012f66:	4b80      	ldr	r3, [pc, #512]	; (8013168 <__ieee754_rem_pio2+0x348>)
 8012f68:	2200      	movs	r2, #0
 8012f6a:	f7ed f9af 	bl	80002cc <__adddf3>
 8012f6e:	f7ed fe13 	bl	8000b98 <__aeabi_d2iz>
 8012f72:	4683      	mov	fp, r0
 8012f74:	f7ed faf6 	bl	8000564 <__aeabi_i2d>
 8012f78:	4602      	mov	r2, r0
 8012f7a:	460b      	mov	r3, r1
 8012f7c:	ec43 2b18 	vmov	d8, r2, r3
 8012f80:	a367      	add	r3, pc, #412	; (adr r3, 8013120 <__ieee754_rem_pio2+0x300>)
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	f7ed fb57 	bl	8000638 <__aeabi_dmul>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	4620      	mov	r0, r4
 8012f90:	4629      	mov	r1, r5
 8012f92:	f7ed f999 	bl	80002c8 <__aeabi_dsub>
 8012f96:	a364      	add	r3, pc, #400	; (adr r3, 8013128 <__ieee754_rem_pio2+0x308>)
 8012f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9c:	4606      	mov	r6, r0
 8012f9e:	460f      	mov	r7, r1
 8012fa0:	ec51 0b18 	vmov	r0, r1, d8
 8012fa4:	f7ed fb48 	bl	8000638 <__aeabi_dmul>
 8012fa8:	f1bb 0f1f 	cmp.w	fp, #31
 8012fac:	4604      	mov	r4, r0
 8012fae:	460d      	mov	r5, r1
 8012fb0:	dc0d      	bgt.n	8012fce <__ieee754_rem_pio2+0x1ae>
 8012fb2:	4b6e      	ldr	r3, [pc, #440]	; (801316c <__ieee754_rem_pio2+0x34c>)
 8012fb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fbc:	4543      	cmp	r3, r8
 8012fbe:	d006      	beq.n	8012fce <__ieee754_rem_pio2+0x1ae>
 8012fc0:	4622      	mov	r2, r4
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	f7ed f97e 	bl	80002c8 <__aeabi_dsub>
 8012fcc:	e00f      	b.n	8012fee <__ieee754_rem_pio2+0x1ce>
 8012fce:	462b      	mov	r3, r5
 8012fd0:	4622      	mov	r2, r4
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	4639      	mov	r1, r7
 8012fd6:	f7ed f977 	bl	80002c8 <__aeabi_dsub>
 8012fda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012fde:	9303      	str	r3, [sp, #12]
 8012fe0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012fe4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012fe8:	f1b8 0f10 	cmp.w	r8, #16
 8012fec:	dc02      	bgt.n	8012ff4 <__ieee754_rem_pio2+0x1d4>
 8012fee:	e9ca 0100 	strd	r0, r1, [sl]
 8012ff2:	e039      	b.n	8013068 <__ieee754_rem_pio2+0x248>
 8012ff4:	a34e      	add	r3, pc, #312	; (adr r3, 8013130 <__ieee754_rem_pio2+0x310>)
 8012ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffa:	ec51 0b18 	vmov	r0, r1, d8
 8012ffe:	f7ed fb1b 	bl	8000638 <__aeabi_dmul>
 8013002:	4604      	mov	r4, r0
 8013004:	460d      	mov	r5, r1
 8013006:	4602      	mov	r2, r0
 8013008:	460b      	mov	r3, r1
 801300a:	4630      	mov	r0, r6
 801300c:	4639      	mov	r1, r7
 801300e:	f7ed f95b 	bl	80002c8 <__aeabi_dsub>
 8013012:	4602      	mov	r2, r0
 8013014:	460b      	mov	r3, r1
 8013016:	4680      	mov	r8, r0
 8013018:	4689      	mov	r9, r1
 801301a:	4630      	mov	r0, r6
 801301c:	4639      	mov	r1, r7
 801301e:	f7ed f953 	bl	80002c8 <__aeabi_dsub>
 8013022:	4622      	mov	r2, r4
 8013024:	462b      	mov	r3, r5
 8013026:	f7ed f94f 	bl	80002c8 <__aeabi_dsub>
 801302a:	a343      	add	r3, pc, #268	; (adr r3, 8013138 <__ieee754_rem_pio2+0x318>)
 801302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013030:	4604      	mov	r4, r0
 8013032:	460d      	mov	r5, r1
 8013034:	ec51 0b18 	vmov	r0, r1, d8
 8013038:	f7ed fafe 	bl	8000638 <__aeabi_dmul>
 801303c:	4622      	mov	r2, r4
 801303e:	462b      	mov	r3, r5
 8013040:	f7ed f942 	bl	80002c8 <__aeabi_dsub>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	4604      	mov	r4, r0
 801304a:	460d      	mov	r5, r1
 801304c:	4640      	mov	r0, r8
 801304e:	4649      	mov	r1, r9
 8013050:	f7ed f93a 	bl	80002c8 <__aeabi_dsub>
 8013054:	9a03      	ldr	r2, [sp, #12]
 8013056:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801305a:	1ad3      	subs	r3, r2, r3
 801305c:	2b31      	cmp	r3, #49	; 0x31
 801305e:	dc24      	bgt.n	80130aa <__ieee754_rem_pio2+0x28a>
 8013060:	e9ca 0100 	strd	r0, r1, [sl]
 8013064:	4646      	mov	r6, r8
 8013066:	464f      	mov	r7, r9
 8013068:	e9da 8900 	ldrd	r8, r9, [sl]
 801306c:	4630      	mov	r0, r6
 801306e:	4642      	mov	r2, r8
 8013070:	464b      	mov	r3, r9
 8013072:	4639      	mov	r1, r7
 8013074:	f7ed f928 	bl	80002c8 <__aeabi_dsub>
 8013078:	462b      	mov	r3, r5
 801307a:	4622      	mov	r2, r4
 801307c:	f7ed f924 	bl	80002c8 <__aeabi_dsub>
 8013080:	9b02      	ldr	r3, [sp, #8]
 8013082:	2b00      	cmp	r3, #0
 8013084:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013088:	f6bf af0a 	bge.w	8012ea0 <__ieee754_rem_pio2+0x80>
 801308c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013090:	f8ca 3004 	str.w	r3, [sl, #4]
 8013094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013098:	f8ca 8000 	str.w	r8, [sl]
 801309c:	f8ca 0008 	str.w	r0, [sl, #8]
 80130a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80130a4:	f1cb 0b00 	rsb	fp, fp, #0
 80130a8:	e6fa      	b.n	8012ea0 <__ieee754_rem_pio2+0x80>
 80130aa:	a327      	add	r3, pc, #156	; (adr r3, 8013148 <__ieee754_rem_pio2+0x328>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	ec51 0b18 	vmov	r0, r1, d8
 80130b4:	f7ed fac0 	bl	8000638 <__aeabi_dmul>
 80130b8:	4604      	mov	r4, r0
 80130ba:	460d      	mov	r5, r1
 80130bc:	4602      	mov	r2, r0
 80130be:	460b      	mov	r3, r1
 80130c0:	4640      	mov	r0, r8
 80130c2:	4649      	mov	r1, r9
 80130c4:	f7ed f900 	bl	80002c8 <__aeabi_dsub>
 80130c8:	4602      	mov	r2, r0
 80130ca:	460b      	mov	r3, r1
 80130cc:	4606      	mov	r6, r0
 80130ce:	460f      	mov	r7, r1
 80130d0:	4640      	mov	r0, r8
 80130d2:	4649      	mov	r1, r9
 80130d4:	f7ed f8f8 	bl	80002c8 <__aeabi_dsub>
 80130d8:	4622      	mov	r2, r4
 80130da:	462b      	mov	r3, r5
 80130dc:	f7ed f8f4 	bl	80002c8 <__aeabi_dsub>
 80130e0:	a31b      	add	r3, pc, #108	; (adr r3, 8013150 <__ieee754_rem_pio2+0x330>)
 80130e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e6:	4604      	mov	r4, r0
 80130e8:	460d      	mov	r5, r1
 80130ea:	ec51 0b18 	vmov	r0, r1, d8
 80130ee:	f7ed faa3 	bl	8000638 <__aeabi_dmul>
 80130f2:	4622      	mov	r2, r4
 80130f4:	462b      	mov	r3, r5
 80130f6:	f7ed f8e7 	bl	80002c8 <__aeabi_dsub>
 80130fa:	4604      	mov	r4, r0
 80130fc:	460d      	mov	r5, r1
 80130fe:	e75f      	b.n	8012fc0 <__ieee754_rem_pio2+0x1a0>
 8013100:	4b1b      	ldr	r3, [pc, #108]	; (8013170 <__ieee754_rem_pio2+0x350>)
 8013102:	4598      	cmp	r8, r3
 8013104:	dd36      	ble.n	8013174 <__ieee754_rem_pio2+0x354>
 8013106:	ee10 2a10 	vmov	r2, s0
 801310a:	462b      	mov	r3, r5
 801310c:	4620      	mov	r0, r4
 801310e:	4629      	mov	r1, r5
 8013110:	f7ed f8da 	bl	80002c8 <__aeabi_dsub>
 8013114:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013118:	e9ca 0100 	strd	r0, r1, [sl]
 801311c:	e694      	b.n	8012e48 <__ieee754_rem_pio2+0x28>
 801311e:	bf00      	nop
 8013120:	54400000 	.word	0x54400000
 8013124:	3ff921fb 	.word	0x3ff921fb
 8013128:	1a626331 	.word	0x1a626331
 801312c:	3dd0b461 	.word	0x3dd0b461
 8013130:	1a600000 	.word	0x1a600000
 8013134:	3dd0b461 	.word	0x3dd0b461
 8013138:	2e037073 	.word	0x2e037073
 801313c:	3ba3198a 	.word	0x3ba3198a
 8013140:	6dc9c883 	.word	0x6dc9c883
 8013144:	3fe45f30 	.word	0x3fe45f30
 8013148:	2e000000 	.word	0x2e000000
 801314c:	3ba3198a 	.word	0x3ba3198a
 8013150:	252049c1 	.word	0x252049c1
 8013154:	397b839a 	.word	0x397b839a
 8013158:	3fe921fb 	.word	0x3fe921fb
 801315c:	4002d97b 	.word	0x4002d97b
 8013160:	3ff921fb 	.word	0x3ff921fb
 8013164:	413921fb 	.word	0x413921fb
 8013168:	3fe00000 	.word	0x3fe00000
 801316c:	08014550 	.word	0x08014550
 8013170:	7fefffff 	.word	0x7fefffff
 8013174:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013178:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801317c:	ee10 0a10 	vmov	r0, s0
 8013180:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8013184:	ee10 6a10 	vmov	r6, s0
 8013188:	460f      	mov	r7, r1
 801318a:	f7ed fd05 	bl	8000b98 <__aeabi_d2iz>
 801318e:	f7ed f9e9 	bl	8000564 <__aeabi_i2d>
 8013192:	4602      	mov	r2, r0
 8013194:	460b      	mov	r3, r1
 8013196:	4630      	mov	r0, r6
 8013198:	4639      	mov	r1, r7
 801319a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801319e:	f7ed f893 	bl	80002c8 <__aeabi_dsub>
 80131a2:	4b23      	ldr	r3, [pc, #140]	; (8013230 <__ieee754_rem_pio2+0x410>)
 80131a4:	2200      	movs	r2, #0
 80131a6:	f7ed fa47 	bl	8000638 <__aeabi_dmul>
 80131aa:	460f      	mov	r7, r1
 80131ac:	4606      	mov	r6, r0
 80131ae:	f7ed fcf3 	bl	8000b98 <__aeabi_d2iz>
 80131b2:	f7ed f9d7 	bl	8000564 <__aeabi_i2d>
 80131b6:	4602      	mov	r2, r0
 80131b8:	460b      	mov	r3, r1
 80131ba:	4630      	mov	r0, r6
 80131bc:	4639      	mov	r1, r7
 80131be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80131c2:	f7ed f881 	bl	80002c8 <__aeabi_dsub>
 80131c6:	4b1a      	ldr	r3, [pc, #104]	; (8013230 <__ieee754_rem_pio2+0x410>)
 80131c8:	2200      	movs	r2, #0
 80131ca:	f7ed fa35 	bl	8000638 <__aeabi_dmul>
 80131ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80131d2:	ad04      	add	r5, sp, #16
 80131d4:	f04f 0803 	mov.w	r8, #3
 80131d8:	46a9      	mov	r9, r5
 80131da:	2600      	movs	r6, #0
 80131dc:	2700      	movs	r7, #0
 80131de:	4632      	mov	r2, r6
 80131e0:	463b      	mov	r3, r7
 80131e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80131e6:	46c3      	mov	fp, r8
 80131e8:	3d08      	subs	r5, #8
 80131ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80131ee:	f7ed fc8b 	bl	8000b08 <__aeabi_dcmpeq>
 80131f2:	2800      	cmp	r0, #0
 80131f4:	d1f3      	bne.n	80131de <__ieee754_rem_pio2+0x3be>
 80131f6:	4b0f      	ldr	r3, [pc, #60]	; (8013234 <__ieee754_rem_pio2+0x414>)
 80131f8:	9301      	str	r3, [sp, #4]
 80131fa:	2302      	movs	r3, #2
 80131fc:	9300      	str	r3, [sp, #0]
 80131fe:	4622      	mov	r2, r4
 8013200:	465b      	mov	r3, fp
 8013202:	4651      	mov	r1, sl
 8013204:	4648      	mov	r0, r9
 8013206:	f000 f8df 	bl	80133c8 <__kernel_rem_pio2>
 801320a:	9b02      	ldr	r3, [sp, #8]
 801320c:	2b00      	cmp	r3, #0
 801320e:	4683      	mov	fp, r0
 8013210:	f6bf ae46 	bge.w	8012ea0 <__ieee754_rem_pio2+0x80>
 8013214:	e9da 2100 	ldrd	r2, r1, [sl]
 8013218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801321c:	e9ca 2300 	strd	r2, r3, [sl]
 8013220:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013228:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801322c:	e73a      	b.n	80130a4 <__ieee754_rem_pio2+0x284>
 801322e:	bf00      	nop
 8013230:	41700000 	.word	0x41700000
 8013234:	080145d0 	.word	0x080145d0

08013238 <__kernel_cos>:
 8013238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801323c:	ec57 6b10 	vmov	r6, r7, d0
 8013240:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013244:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013248:	ed8d 1b00 	vstr	d1, [sp]
 801324c:	da07      	bge.n	801325e <__kernel_cos+0x26>
 801324e:	ee10 0a10 	vmov	r0, s0
 8013252:	4639      	mov	r1, r7
 8013254:	f7ed fca0 	bl	8000b98 <__aeabi_d2iz>
 8013258:	2800      	cmp	r0, #0
 801325a:	f000 8088 	beq.w	801336e <__kernel_cos+0x136>
 801325e:	4632      	mov	r2, r6
 8013260:	463b      	mov	r3, r7
 8013262:	4630      	mov	r0, r6
 8013264:	4639      	mov	r1, r7
 8013266:	f7ed f9e7 	bl	8000638 <__aeabi_dmul>
 801326a:	4b51      	ldr	r3, [pc, #324]	; (80133b0 <__kernel_cos+0x178>)
 801326c:	2200      	movs	r2, #0
 801326e:	4604      	mov	r4, r0
 8013270:	460d      	mov	r5, r1
 8013272:	f7ed f9e1 	bl	8000638 <__aeabi_dmul>
 8013276:	a340      	add	r3, pc, #256	; (adr r3, 8013378 <__kernel_cos+0x140>)
 8013278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327c:	4682      	mov	sl, r0
 801327e:	468b      	mov	fp, r1
 8013280:	4620      	mov	r0, r4
 8013282:	4629      	mov	r1, r5
 8013284:	f7ed f9d8 	bl	8000638 <__aeabi_dmul>
 8013288:	a33d      	add	r3, pc, #244	; (adr r3, 8013380 <__kernel_cos+0x148>)
 801328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328e:	f7ed f81d 	bl	80002cc <__adddf3>
 8013292:	4622      	mov	r2, r4
 8013294:	462b      	mov	r3, r5
 8013296:	f7ed f9cf 	bl	8000638 <__aeabi_dmul>
 801329a:	a33b      	add	r3, pc, #236	; (adr r3, 8013388 <__kernel_cos+0x150>)
 801329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a0:	f7ed f812 	bl	80002c8 <__aeabi_dsub>
 80132a4:	4622      	mov	r2, r4
 80132a6:	462b      	mov	r3, r5
 80132a8:	f7ed f9c6 	bl	8000638 <__aeabi_dmul>
 80132ac:	a338      	add	r3, pc, #224	; (adr r3, 8013390 <__kernel_cos+0x158>)
 80132ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b2:	f7ed f80b 	bl	80002cc <__adddf3>
 80132b6:	4622      	mov	r2, r4
 80132b8:	462b      	mov	r3, r5
 80132ba:	f7ed f9bd 	bl	8000638 <__aeabi_dmul>
 80132be:	a336      	add	r3, pc, #216	; (adr r3, 8013398 <__kernel_cos+0x160>)
 80132c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c4:	f7ed f800 	bl	80002c8 <__aeabi_dsub>
 80132c8:	4622      	mov	r2, r4
 80132ca:	462b      	mov	r3, r5
 80132cc:	f7ed f9b4 	bl	8000638 <__aeabi_dmul>
 80132d0:	a333      	add	r3, pc, #204	; (adr r3, 80133a0 <__kernel_cos+0x168>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	f7ec fff9 	bl	80002cc <__adddf3>
 80132da:	4622      	mov	r2, r4
 80132dc:	462b      	mov	r3, r5
 80132de:	f7ed f9ab 	bl	8000638 <__aeabi_dmul>
 80132e2:	4622      	mov	r2, r4
 80132e4:	462b      	mov	r3, r5
 80132e6:	f7ed f9a7 	bl	8000638 <__aeabi_dmul>
 80132ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132ee:	4604      	mov	r4, r0
 80132f0:	460d      	mov	r5, r1
 80132f2:	4630      	mov	r0, r6
 80132f4:	4639      	mov	r1, r7
 80132f6:	f7ed f99f 	bl	8000638 <__aeabi_dmul>
 80132fa:	460b      	mov	r3, r1
 80132fc:	4602      	mov	r2, r0
 80132fe:	4629      	mov	r1, r5
 8013300:	4620      	mov	r0, r4
 8013302:	f7ec ffe1 	bl	80002c8 <__aeabi_dsub>
 8013306:	4b2b      	ldr	r3, [pc, #172]	; (80133b4 <__kernel_cos+0x17c>)
 8013308:	4598      	cmp	r8, r3
 801330a:	4606      	mov	r6, r0
 801330c:	460f      	mov	r7, r1
 801330e:	dc10      	bgt.n	8013332 <__kernel_cos+0xfa>
 8013310:	4602      	mov	r2, r0
 8013312:	460b      	mov	r3, r1
 8013314:	4650      	mov	r0, sl
 8013316:	4659      	mov	r1, fp
 8013318:	f7ec ffd6 	bl	80002c8 <__aeabi_dsub>
 801331c:	460b      	mov	r3, r1
 801331e:	4926      	ldr	r1, [pc, #152]	; (80133b8 <__kernel_cos+0x180>)
 8013320:	4602      	mov	r2, r0
 8013322:	2000      	movs	r0, #0
 8013324:	f7ec ffd0 	bl	80002c8 <__aeabi_dsub>
 8013328:	ec41 0b10 	vmov	d0, r0, r1
 801332c:	b003      	add	sp, #12
 801332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013332:	4b22      	ldr	r3, [pc, #136]	; (80133bc <__kernel_cos+0x184>)
 8013334:	4920      	ldr	r1, [pc, #128]	; (80133b8 <__kernel_cos+0x180>)
 8013336:	4598      	cmp	r8, r3
 8013338:	bfcc      	ite	gt
 801333a:	4d21      	ldrgt	r5, [pc, #132]	; (80133c0 <__kernel_cos+0x188>)
 801333c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013340:	2400      	movs	r4, #0
 8013342:	4622      	mov	r2, r4
 8013344:	462b      	mov	r3, r5
 8013346:	2000      	movs	r0, #0
 8013348:	f7ec ffbe 	bl	80002c8 <__aeabi_dsub>
 801334c:	4622      	mov	r2, r4
 801334e:	4680      	mov	r8, r0
 8013350:	4689      	mov	r9, r1
 8013352:	462b      	mov	r3, r5
 8013354:	4650      	mov	r0, sl
 8013356:	4659      	mov	r1, fp
 8013358:	f7ec ffb6 	bl	80002c8 <__aeabi_dsub>
 801335c:	4632      	mov	r2, r6
 801335e:	463b      	mov	r3, r7
 8013360:	f7ec ffb2 	bl	80002c8 <__aeabi_dsub>
 8013364:	4602      	mov	r2, r0
 8013366:	460b      	mov	r3, r1
 8013368:	4640      	mov	r0, r8
 801336a:	4649      	mov	r1, r9
 801336c:	e7da      	b.n	8013324 <__kernel_cos+0xec>
 801336e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80133a8 <__kernel_cos+0x170>
 8013372:	e7db      	b.n	801332c <__kernel_cos+0xf4>
 8013374:	f3af 8000 	nop.w
 8013378:	be8838d4 	.word	0xbe8838d4
 801337c:	bda8fae9 	.word	0xbda8fae9
 8013380:	bdb4b1c4 	.word	0xbdb4b1c4
 8013384:	3e21ee9e 	.word	0x3e21ee9e
 8013388:	809c52ad 	.word	0x809c52ad
 801338c:	3e927e4f 	.word	0x3e927e4f
 8013390:	19cb1590 	.word	0x19cb1590
 8013394:	3efa01a0 	.word	0x3efa01a0
 8013398:	16c15177 	.word	0x16c15177
 801339c:	3f56c16c 	.word	0x3f56c16c
 80133a0:	5555554c 	.word	0x5555554c
 80133a4:	3fa55555 	.word	0x3fa55555
 80133a8:	00000000 	.word	0x00000000
 80133ac:	3ff00000 	.word	0x3ff00000
 80133b0:	3fe00000 	.word	0x3fe00000
 80133b4:	3fd33332 	.word	0x3fd33332
 80133b8:	3ff00000 	.word	0x3ff00000
 80133bc:	3fe90000 	.word	0x3fe90000
 80133c0:	3fd20000 	.word	0x3fd20000
 80133c4:	00000000 	.word	0x00000000

080133c8 <__kernel_rem_pio2>:
 80133c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133cc:	ed2d 8b02 	vpush	{d8}
 80133d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80133d4:	f112 0f14 	cmn.w	r2, #20
 80133d8:	9308      	str	r3, [sp, #32]
 80133da:	9101      	str	r1, [sp, #4]
 80133dc:	4bc4      	ldr	r3, [pc, #784]	; (80136f0 <__kernel_rem_pio2+0x328>)
 80133de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80133e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80133e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133e6:	9302      	str	r3, [sp, #8]
 80133e8:	9b08      	ldr	r3, [sp, #32]
 80133ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80133ee:	bfa8      	it	ge
 80133f0:	1ed4      	subge	r4, r2, #3
 80133f2:	9306      	str	r3, [sp, #24]
 80133f4:	bfb2      	itee	lt
 80133f6:	2400      	movlt	r4, #0
 80133f8:	2318      	movge	r3, #24
 80133fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80133fe:	f06f 0317 	mvn.w	r3, #23
 8013402:	fb04 3303 	mla	r3, r4, r3, r3
 8013406:	eb03 0a02 	add.w	sl, r3, r2
 801340a:	9b02      	ldr	r3, [sp, #8]
 801340c:	9a06      	ldr	r2, [sp, #24]
 801340e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80136e0 <__kernel_rem_pio2+0x318>
 8013412:	eb03 0802 	add.w	r8, r3, r2
 8013416:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013418:	1aa7      	subs	r7, r4, r2
 801341a:	ae22      	add	r6, sp, #136	; 0x88
 801341c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013420:	2500      	movs	r5, #0
 8013422:	4545      	cmp	r5, r8
 8013424:	dd13      	ble.n	801344e <__kernel_rem_pio2+0x86>
 8013426:	9b08      	ldr	r3, [sp, #32]
 8013428:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80136e0 <__kernel_rem_pio2+0x318>
 801342c:	aa22      	add	r2, sp, #136	; 0x88
 801342e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013432:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013436:	f04f 0800 	mov.w	r8, #0
 801343a:	9b02      	ldr	r3, [sp, #8]
 801343c:	4598      	cmp	r8, r3
 801343e:	dc2f      	bgt.n	80134a0 <__kernel_rem_pio2+0xd8>
 8013440:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013444:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013448:	462f      	mov	r7, r5
 801344a:	2600      	movs	r6, #0
 801344c:	e01b      	b.n	8013486 <__kernel_rem_pio2+0xbe>
 801344e:	42ef      	cmn	r7, r5
 8013450:	d407      	bmi.n	8013462 <__kernel_rem_pio2+0x9a>
 8013452:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013456:	f7ed f885 	bl	8000564 <__aeabi_i2d>
 801345a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801345e:	3501      	adds	r5, #1
 8013460:	e7df      	b.n	8013422 <__kernel_rem_pio2+0x5a>
 8013462:	ec51 0b18 	vmov	r0, r1, d8
 8013466:	e7f8      	b.n	801345a <__kernel_rem_pio2+0x92>
 8013468:	e9d7 2300 	ldrd	r2, r3, [r7]
 801346c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013470:	f7ed f8e2 	bl	8000638 <__aeabi_dmul>
 8013474:	4602      	mov	r2, r0
 8013476:	460b      	mov	r3, r1
 8013478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801347c:	f7ec ff26 	bl	80002cc <__adddf3>
 8013480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013484:	3601      	adds	r6, #1
 8013486:	9b06      	ldr	r3, [sp, #24]
 8013488:	429e      	cmp	r6, r3
 801348a:	f1a7 0708 	sub.w	r7, r7, #8
 801348e:	ddeb      	ble.n	8013468 <__kernel_rem_pio2+0xa0>
 8013490:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013494:	f108 0801 	add.w	r8, r8, #1
 8013498:	ecab 7b02 	vstmia	fp!, {d7}
 801349c:	3508      	adds	r5, #8
 801349e:	e7cc      	b.n	801343a <__kernel_rem_pio2+0x72>
 80134a0:	9b02      	ldr	r3, [sp, #8]
 80134a2:	aa0e      	add	r2, sp, #56	; 0x38
 80134a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80134a8:	930d      	str	r3, [sp, #52]	; 0x34
 80134aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80134ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80134b0:	9c02      	ldr	r4, [sp, #8]
 80134b2:	930c      	str	r3, [sp, #48]	; 0x30
 80134b4:	00e3      	lsls	r3, r4, #3
 80134b6:	930a      	str	r3, [sp, #40]	; 0x28
 80134b8:	ab9a      	add	r3, sp, #616	; 0x268
 80134ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80134be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80134c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80134c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80134c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80134cc:	46c3      	mov	fp, r8
 80134ce:	46a1      	mov	r9, r4
 80134d0:	f1b9 0f00 	cmp.w	r9, #0
 80134d4:	f1a5 0508 	sub.w	r5, r5, #8
 80134d8:	dc77      	bgt.n	80135ca <__kernel_rem_pio2+0x202>
 80134da:	ec47 6b10 	vmov	d0, r6, r7
 80134de:	4650      	mov	r0, sl
 80134e0:	f000 fc0a 	bl	8013cf8 <scalbn>
 80134e4:	ec57 6b10 	vmov	r6, r7, d0
 80134e8:	2200      	movs	r2, #0
 80134ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80134ee:	ee10 0a10 	vmov	r0, s0
 80134f2:	4639      	mov	r1, r7
 80134f4:	f7ed f8a0 	bl	8000638 <__aeabi_dmul>
 80134f8:	ec41 0b10 	vmov	d0, r0, r1
 80134fc:	f000 fb7c 	bl	8013bf8 <floor>
 8013500:	4b7c      	ldr	r3, [pc, #496]	; (80136f4 <__kernel_rem_pio2+0x32c>)
 8013502:	ec51 0b10 	vmov	r0, r1, d0
 8013506:	2200      	movs	r2, #0
 8013508:	f7ed f896 	bl	8000638 <__aeabi_dmul>
 801350c:	4602      	mov	r2, r0
 801350e:	460b      	mov	r3, r1
 8013510:	4630      	mov	r0, r6
 8013512:	4639      	mov	r1, r7
 8013514:	f7ec fed8 	bl	80002c8 <__aeabi_dsub>
 8013518:	460f      	mov	r7, r1
 801351a:	4606      	mov	r6, r0
 801351c:	f7ed fb3c 	bl	8000b98 <__aeabi_d2iz>
 8013520:	9004      	str	r0, [sp, #16]
 8013522:	f7ed f81f 	bl	8000564 <__aeabi_i2d>
 8013526:	4602      	mov	r2, r0
 8013528:	460b      	mov	r3, r1
 801352a:	4630      	mov	r0, r6
 801352c:	4639      	mov	r1, r7
 801352e:	f7ec fecb 	bl	80002c8 <__aeabi_dsub>
 8013532:	f1ba 0f00 	cmp.w	sl, #0
 8013536:	4606      	mov	r6, r0
 8013538:	460f      	mov	r7, r1
 801353a:	dd6d      	ble.n	8013618 <__kernel_rem_pio2+0x250>
 801353c:	1e62      	subs	r2, r4, #1
 801353e:	ab0e      	add	r3, sp, #56	; 0x38
 8013540:	9d04      	ldr	r5, [sp, #16]
 8013542:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013546:	f1ca 0118 	rsb	r1, sl, #24
 801354a:	fa40 f301 	asr.w	r3, r0, r1
 801354e:	441d      	add	r5, r3
 8013550:	408b      	lsls	r3, r1
 8013552:	1ac0      	subs	r0, r0, r3
 8013554:	ab0e      	add	r3, sp, #56	; 0x38
 8013556:	9504      	str	r5, [sp, #16]
 8013558:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801355c:	f1ca 0317 	rsb	r3, sl, #23
 8013560:	fa40 fb03 	asr.w	fp, r0, r3
 8013564:	f1bb 0f00 	cmp.w	fp, #0
 8013568:	dd65      	ble.n	8013636 <__kernel_rem_pio2+0x26e>
 801356a:	9b04      	ldr	r3, [sp, #16]
 801356c:	2200      	movs	r2, #0
 801356e:	3301      	adds	r3, #1
 8013570:	9304      	str	r3, [sp, #16]
 8013572:	4615      	mov	r5, r2
 8013574:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013578:	4294      	cmp	r4, r2
 801357a:	f300 809c 	bgt.w	80136b6 <__kernel_rem_pio2+0x2ee>
 801357e:	f1ba 0f00 	cmp.w	sl, #0
 8013582:	dd07      	ble.n	8013594 <__kernel_rem_pio2+0x1cc>
 8013584:	f1ba 0f01 	cmp.w	sl, #1
 8013588:	f000 80c0 	beq.w	801370c <__kernel_rem_pio2+0x344>
 801358c:	f1ba 0f02 	cmp.w	sl, #2
 8013590:	f000 80c6 	beq.w	8013720 <__kernel_rem_pio2+0x358>
 8013594:	f1bb 0f02 	cmp.w	fp, #2
 8013598:	d14d      	bne.n	8013636 <__kernel_rem_pio2+0x26e>
 801359a:	4632      	mov	r2, r6
 801359c:	463b      	mov	r3, r7
 801359e:	4956      	ldr	r1, [pc, #344]	; (80136f8 <__kernel_rem_pio2+0x330>)
 80135a0:	2000      	movs	r0, #0
 80135a2:	f7ec fe91 	bl	80002c8 <__aeabi_dsub>
 80135a6:	4606      	mov	r6, r0
 80135a8:	460f      	mov	r7, r1
 80135aa:	2d00      	cmp	r5, #0
 80135ac:	d043      	beq.n	8013636 <__kernel_rem_pio2+0x26e>
 80135ae:	4650      	mov	r0, sl
 80135b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80136e8 <__kernel_rem_pio2+0x320>
 80135b4:	f000 fba0 	bl	8013cf8 <scalbn>
 80135b8:	4630      	mov	r0, r6
 80135ba:	4639      	mov	r1, r7
 80135bc:	ec53 2b10 	vmov	r2, r3, d0
 80135c0:	f7ec fe82 	bl	80002c8 <__aeabi_dsub>
 80135c4:	4606      	mov	r6, r0
 80135c6:	460f      	mov	r7, r1
 80135c8:	e035      	b.n	8013636 <__kernel_rem_pio2+0x26e>
 80135ca:	4b4c      	ldr	r3, [pc, #304]	; (80136fc <__kernel_rem_pio2+0x334>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	4630      	mov	r0, r6
 80135d0:	4639      	mov	r1, r7
 80135d2:	f7ed f831 	bl	8000638 <__aeabi_dmul>
 80135d6:	f7ed fadf 	bl	8000b98 <__aeabi_d2iz>
 80135da:	f7ec ffc3 	bl	8000564 <__aeabi_i2d>
 80135de:	4602      	mov	r2, r0
 80135e0:	460b      	mov	r3, r1
 80135e2:	ec43 2b18 	vmov	d8, r2, r3
 80135e6:	4b46      	ldr	r3, [pc, #280]	; (8013700 <__kernel_rem_pio2+0x338>)
 80135e8:	2200      	movs	r2, #0
 80135ea:	f7ed f825 	bl	8000638 <__aeabi_dmul>
 80135ee:	4602      	mov	r2, r0
 80135f0:	460b      	mov	r3, r1
 80135f2:	4630      	mov	r0, r6
 80135f4:	4639      	mov	r1, r7
 80135f6:	f7ec fe67 	bl	80002c8 <__aeabi_dsub>
 80135fa:	f7ed facd 	bl	8000b98 <__aeabi_d2iz>
 80135fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013602:	f84b 0b04 	str.w	r0, [fp], #4
 8013606:	ec51 0b18 	vmov	r0, r1, d8
 801360a:	f7ec fe5f 	bl	80002cc <__adddf3>
 801360e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013612:	4606      	mov	r6, r0
 8013614:	460f      	mov	r7, r1
 8013616:	e75b      	b.n	80134d0 <__kernel_rem_pio2+0x108>
 8013618:	d106      	bne.n	8013628 <__kernel_rem_pio2+0x260>
 801361a:	1e63      	subs	r3, r4, #1
 801361c:	aa0e      	add	r2, sp, #56	; 0x38
 801361e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013622:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8013626:	e79d      	b.n	8013564 <__kernel_rem_pio2+0x19c>
 8013628:	4b36      	ldr	r3, [pc, #216]	; (8013704 <__kernel_rem_pio2+0x33c>)
 801362a:	2200      	movs	r2, #0
 801362c:	f7ed fa8a 	bl	8000b44 <__aeabi_dcmpge>
 8013630:	2800      	cmp	r0, #0
 8013632:	d13d      	bne.n	80136b0 <__kernel_rem_pio2+0x2e8>
 8013634:	4683      	mov	fp, r0
 8013636:	2200      	movs	r2, #0
 8013638:	2300      	movs	r3, #0
 801363a:	4630      	mov	r0, r6
 801363c:	4639      	mov	r1, r7
 801363e:	f7ed fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8013642:	2800      	cmp	r0, #0
 8013644:	f000 80c0 	beq.w	80137c8 <__kernel_rem_pio2+0x400>
 8013648:	1e65      	subs	r5, r4, #1
 801364a:	462b      	mov	r3, r5
 801364c:	2200      	movs	r2, #0
 801364e:	9902      	ldr	r1, [sp, #8]
 8013650:	428b      	cmp	r3, r1
 8013652:	da6c      	bge.n	801372e <__kernel_rem_pio2+0x366>
 8013654:	2a00      	cmp	r2, #0
 8013656:	f000 8089 	beq.w	801376c <__kernel_rem_pio2+0x3a4>
 801365a:	ab0e      	add	r3, sp, #56	; 0x38
 801365c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013660:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013664:	2b00      	cmp	r3, #0
 8013666:	f000 80ad 	beq.w	80137c4 <__kernel_rem_pio2+0x3fc>
 801366a:	4650      	mov	r0, sl
 801366c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80136e8 <__kernel_rem_pio2+0x320>
 8013670:	f000 fb42 	bl	8013cf8 <scalbn>
 8013674:	ab9a      	add	r3, sp, #616	; 0x268
 8013676:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801367a:	ec57 6b10 	vmov	r6, r7, d0
 801367e:	00ec      	lsls	r4, r5, #3
 8013680:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8013684:	46aa      	mov	sl, r5
 8013686:	f1ba 0f00 	cmp.w	sl, #0
 801368a:	f280 80d6 	bge.w	801383a <__kernel_rem_pio2+0x472>
 801368e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80136e0 <__kernel_rem_pio2+0x318>
 8013692:	462e      	mov	r6, r5
 8013694:	2e00      	cmp	r6, #0
 8013696:	f2c0 8104 	blt.w	80138a2 <__kernel_rem_pio2+0x4da>
 801369a:	ab72      	add	r3, sp, #456	; 0x1c8
 801369c:	ed8d 8b06 	vstr	d8, [sp, #24]
 80136a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013708 <__kernel_rem_pio2+0x340>
 80136a4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80136a8:	f04f 0800 	mov.w	r8, #0
 80136ac:	1baf      	subs	r7, r5, r6
 80136ae:	e0ea      	b.n	8013886 <__kernel_rem_pio2+0x4be>
 80136b0:	f04f 0b02 	mov.w	fp, #2
 80136b4:	e759      	b.n	801356a <__kernel_rem_pio2+0x1a2>
 80136b6:	f8d8 3000 	ldr.w	r3, [r8]
 80136ba:	b955      	cbnz	r5, 80136d2 <__kernel_rem_pio2+0x30a>
 80136bc:	b123      	cbz	r3, 80136c8 <__kernel_rem_pio2+0x300>
 80136be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80136c2:	f8c8 3000 	str.w	r3, [r8]
 80136c6:	2301      	movs	r3, #1
 80136c8:	3201      	adds	r2, #1
 80136ca:	f108 0804 	add.w	r8, r8, #4
 80136ce:	461d      	mov	r5, r3
 80136d0:	e752      	b.n	8013578 <__kernel_rem_pio2+0x1b0>
 80136d2:	1acb      	subs	r3, r1, r3
 80136d4:	f8c8 3000 	str.w	r3, [r8]
 80136d8:	462b      	mov	r3, r5
 80136da:	e7f5      	b.n	80136c8 <__kernel_rem_pio2+0x300>
 80136dc:	f3af 8000 	nop.w
	...
 80136ec:	3ff00000 	.word	0x3ff00000
 80136f0:	08014718 	.word	0x08014718
 80136f4:	40200000 	.word	0x40200000
 80136f8:	3ff00000 	.word	0x3ff00000
 80136fc:	3e700000 	.word	0x3e700000
 8013700:	41700000 	.word	0x41700000
 8013704:	3fe00000 	.word	0x3fe00000
 8013708:	080146d8 	.word	0x080146d8
 801370c:	1e62      	subs	r2, r4, #1
 801370e:	ab0e      	add	r3, sp, #56	; 0x38
 8013710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013714:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013718:	a90e      	add	r1, sp, #56	; 0x38
 801371a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801371e:	e739      	b.n	8013594 <__kernel_rem_pio2+0x1cc>
 8013720:	1e62      	subs	r2, r4, #1
 8013722:	ab0e      	add	r3, sp, #56	; 0x38
 8013724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013728:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801372c:	e7f4      	b.n	8013718 <__kernel_rem_pio2+0x350>
 801372e:	a90e      	add	r1, sp, #56	; 0x38
 8013730:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013734:	3b01      	subs	r3, #1
 8013736:	430a      	orrs	r2, r1
 8013738:	e789      	b.n	801364e <__kernel_rem_pio2+0x286>
 801373a:	3301      	adds	r3, #1
 801373c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013740:	2900      	cmp	r1, #0
 8013742:	d0fa      	beq.n	801373a <__kernel_rem_pio2+0x372>
 8013744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013746:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801374a:	446a      	add	r2, sp
 801374c:	3a98      	subs	r2, #152	; 0x98
 801374e:	920a      	str	r2, [sp, #40]	; 0x28
 8013750:	9a08      	ldr	r2, [sp, #32]
 8013752:	18e3      	adds	r3, r4, r3
 8013754:	18a5      	adds	r5, r4, r2
 8013756:	aa22      	add	r2, sp, #136	; 0x88
 8013758:	f104 0801 	add.w	r8, r4, #1
 801375c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013760:	9304      	str	r3, [sp, #16]
 8013762:	9b04      	ldr	r3, [sp, #16]
 8013764:	4543      	cmp	r3, r8
 8013766:	da04      	bge.n	8013772 <__kernel_rem_pio2+0x3aa>
 8013768:	461c      	mov	r4, r3
 801376a:	e6a3      	b.n	80134b4 <__kernel_rem_pio2+0xec>
 801376c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801376e:	2301      	movs	r3, #1
 8013770:	e7e4      	b.n	801373c <__kernel_rem_pio2+0x374>
 8013772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013774:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013778:	f7ec fef4 	bl	8000564 <__aeabi_i2d>
 801377c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013782:	46ab      	mov	fp, r5
 8013784:	461c      	mov	r4, r3
 8013786:	f04f 0900 	mov.w	r9, #0
 801378a:	2600      	movs	r6, #0
 801378c:	2700      	movs	r7, #0
 801378e:	9b06      	ldr	r3, [sp, #24]
 8013790:	4599      	cmp	r9, r3
 8013792:	dd06      	ble.n	80137a2 <__kernel_rem_pio2+0x3da>
 8013794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013796:	e8e3 6702 	strd	r6, r7, [r3], #8
 801379a:	f108 0801 	add.w	r8, r8, #1
 801379e:	930a      	str	r3, [sp, #40]	; 0x28
 80137a0:	e7df      	b.n	8013762 <__kernel_rem_pio2+0x39a>
 80137a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80137a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80137aa:	f7ec ff45 	bl	8000638 <__aeabi_dmul>
 80137ae:	4602      	mov	r2, r0
 80137b0:	460b      	mov	r3, r1
 80137b2:	4630      	mov	r0, r6
 80137b4:	4639      	mov	r1, r7
 80137b6:	f7ec fd89 	bl	80002cc <__adddf3>
 80137ba:	f109 0901 	add.w	r9, r9, #1
 80137be:	4606      	mov	r6, r0
 80137c0:	460f      	mov	r7, r1
 80137c2:	e7e4      	b.n	801378e <__kernel_rem_pio2+0x3c6>
 80137c4:	3d01      	subs	r5, #1
 80137c6:	e748      	b.n	801365a <__kernel_rem_pio2+0x292>
 80137c8:	ec47 6b10 	vmov	d0, r6, r7
 80137cc:	f1ca 0000 	rsb	r0, sl, #0
 80137d0:	f000 fa92 	bl	8013cf8 <scalbn>
 80137d4:	ec57 6b10 	vmov	r6, r7, d0
 80137d8:	4ba0      	ldr	r3, [pc, #640]	; (8013a5c <__kernel_rem_pio2+0x694>)
 80137da:	ee10 0a10 	vmov	r0, s0
 80137de:	2200      	movs	r2, #0
 80137e0:	4639      	mov	r1, r7
 80137e2:	f7ed f9af 	bl	8000b44 <__aeabi_dcmpge>
 80137e6:	b1f8      	cbz	r0, 8013828 <__kernel_rem_pio2+0x460>
 80137e8:	4b9d      	ldr	r3, [pc, #628]	; (8013a60 <__kernel_rem_pio2+0x698>)
 80137ea:	2200      	movs	r2, #0
 80137ec:	4630      	mov	r0, r6
 80137ee:	4639      	mov	r1, r7
 80137f0:	f7ec ff22 	bl	8000638 <__aeabi_dmul>
 80137f4:	f7ed f9d0 	bl	8000b98 <__aeabi_d2iz>
 80137f8:	4680      	mov	r8, r0
 80137fa:	f7ec feb3 	bl	8000564 <__aeabi_i2d>
 80137fe:	4b97      	ldr	r3, [pc, #604]	; (8013a5c <__kernel_rem_pio2+0x694>)
 8013800:	2200      	movs	r2, #0
 8013802:	f7ec ff19 	bl	8000638 <__aeabi_dmul>
 8013806:	460b      	mov	r3, r1
 8013808:	4602      	mov	r2, r0
 801380a:	4639      	mov	r1, r7
 801380c:	4630      	mov	r0, r6
 801380e:	f7ec fd5b 	bl	80002c8 <__aeabi_dsub>
 8013812:	f7ed f9c1 	bl	8000b98 <__aeabi_d2iz>
 8013816:	1c65      	adds	r5, r4, #1
 8013818:	ab0e      	add	r3, sp, #56	; 0x38
 801381a:	f10a 0a18 	add.w	sl, sl, #24
 801381e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013822:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013826:	e720      	b.n	801366a <__kernel_rem_pio2+0x2a2>
 8013828:	4630      	mov	r0, r6
 801382a:	4639      	mov	r1, r7
 801382c:	f7ed f9b4 	bl	8000b98 <__aeabi_d2iz>
 8013830:	ab0e      	add	r3, sp, #56	; 0x38
 8013832:	4625      	mov	r5, r4
 8013834:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013838:	e717      	b.n	801366a <__kernel_rem_pio2+0x2a2>
 801383a:	ab0e      	add	r3, sp, #56	; 0x38
 801383c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8013840:	f7ec fe90 	bl	8000564 <__aeabi_i2d>
 8013844:	4632      	mov	r2, r6
 8013846:	463b      	mov	r3, r7
 8013848:	f7ec fef6 	bl	8000638 <__aeabi_dmul>
 801384c:	4b84      	ldr	r3, [pc, #528]	; (8013a60 <__kernel_rem_pio2+0x698>)
 801384e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8013852:	2200      	movs	r2, #0
 8013854:	4630      	mov	r0, r6
 8013856:	4639      	mov	r1, r7
 8013858:	f7ec feee 	bl	8000638 <__aeabi_dmul>
 801385c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013860:	4606      	mov	r6, r0
 8013862:	460f      	mov	r7, r1
 8013864:	e70f      	b.n	8013686 <__kernel_rem_pio2+0x2be>
 8013866:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801386a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801386e:	f7ec fee3 	bl	8000638 <__aeabi_dmul>
 8013872:	4602      	mov	r2, r0
 8013874:	460b      	mov	r3, r1
 8013876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801387a:	f7ec fd27 	bl	80002cc <__adddf3>
 801387e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013882:	f108 0801 	add.w	r8, r8, #1
 8013886:	9b02      	ldr	r3, [sp, #8]
 8013888:	4598      	cmp	r8, r3
 801388a:	dc01      	bgt.n	8013890 <__kernel_rem_pio2+0x4c8>
 801388c:	45b8      	cmp	r8, r7
 801388e:	ddea      	ble.n	8013866 <__kernel_rem_pio2+0x49e>
 8013890:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013894:	ab4a      	add	r3, sp, #296	; 0x128
 8013896:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801389a:	ed87 7b00 	vstr	d7, [r7]
 801389e:	3e01      	subs	r6, #1
 80138a0:	e6f8      	b.n	8013694 <__kernel_rem_pio2+0x2cc>
 80138a2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	dc0b      	bgt.n	80138c0 <__kernel_rem_pio2+0x4f8>
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	dc35      	bgt.n	8013918 <__kernel_rem_pio2+0x550>
 80138ac:	d059      	beq.n	8013962 <__kernel_rem_pio2+0x59a>
 80138ae:	9b04      	ldr	r3, [sp, #16]
 80138b0:	f003 0007 	and.w	r0, r3, #7
 80138b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80138b8:	ecbd 8b02 	vpop	{d8}
 80138bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80138c2:	2b03      	cmp	r3, #3
 80138c4:	d1f3      	bne.n	80138ae <__kernel_rem_pio2+0x4e6>
 80138c6:	ab4a      	add	r3, sp, #296	; 0x128
 80138c8:	4423      	add	r3, r4
 80138ca:	9306      	str	r3, [sp, #24]
 80138cc:	461c      	mov	r4, r3
 80138ce:	469a      	mov	sl, r3
 80138d0:	9502      	str	r5, [sp, #8]
 80138d2:	9b02      	ldr	r3, [sp, #8]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	f1aa 0a08 	sub.w	sl, sl, #8
 80138da:	dc6b      	bgt.n	80139b4 <__kernel_rem_pio2+0x5ec>
 80138dc:	46aa      	mov	sl, r5
 80138de:	f1ba 0f01 	cmp.w	sl, #1
 80138e2:	f1a4 0408 	sub.w	r4, r4, #8
 80138e6:	f300 8085 	bgt.w	80139f4 <__kernel_rem_pio2+0x62c>
 80138ea:	9c06      	ldr	r4, [sp, #24]
 80138ec:	2000      	movs	r0, #0
 80138ee:	3408      	adds	r4, #8
 80138f0:	2100      	movs	r1, #0
 80138f2:	2d01      	cmp	r5, #1
 80138f4:	f300 809d 	bgt.w	8013a32 <__kernel_rem_pio2+0x66a>
 80138f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80138fc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013900:	f1bb 0f00 	cmp.w	fp, #0
 8013904:	f040 809b 	bne.w	8013a3e <__kernel_rem_pio2+0x676>
 8013908:	9b01      	ldr	r3, [sp, #4]
 801390a:	e9c3 5600 	strd	r5, r6, [r3]
 801390e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013912:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013916:	e7ca      	b.n	80138ae <__kernel_rem_pio2+0x4e6>
 8013918:	3408      	adds	r4, #8
 801391a:	ab4a      	add	r3, sp, #296	; 0x128
 801391c:	441c      	add	r4, r3
 801391e:	462e      	mov	r6, r5
 8013920:	2000      	movs	r0, #0
 8013922:	2100      	movs	r1, #0
 8013924:	2e00      	cmp	r6, #0
 8013926:	da36      	bge.n	8013996 <__kernel_rem_pio2+0x5ce>
 8013928:	f1bb 0f00 	cmp.w	fp, #0
 801392c:	d039      	beq.n	80139a2 <__kernel_rem_pio2+0x5da>
 801392e:	4602      	mov	r2, r0
 8013930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013934:	9c01      	ldr	r4, [sp, #4]
 8013936:	e9c4 2300 	strd	r2, r3, [r4]
 801393a:	4602      	mov	r2, r0
 801393c:	460b      	mov	r3, r1
 801393e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013942:	f7ec fcc1 	bl	80002c8 <__aeabi_dsub>
 8013946:	ae4c      	add	r6, sp, #304	; 0x130
 8013948:	2401      	movs	r4, #1
 801394a:	42a5      	cmp	r5, r4
 801394c:	da2c      	bge.n	80139a8 <__kernel_rem_pio2+0x5e0>
 801394e:	f1bb 0f00 	cmp.w	fp, #0
 8013952:	d002      	beq.n	801395a <__kernel_rem_pio2+0x592>
 8013954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013958:	4619      	mov	r1, r3
 801395a:	9b01      	ldr	r3, [sp, #4]
 801395c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013960:	e7a5      	b.n	80138ae <__kernel_rem_pio2+0x4e6>
 8013962:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8013966:	eb0d 0403 	add.w	r4, sp, r3
 801396a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801396e:	2000      	movs	r0, #0
 8013970:	2100      	movs	r1, #0
 8013972:	2d00      	cmp	r5, #0
 8013974:	da09      	bge.n	801398a <__kernel_rem_pio2+0x5c2>
 8013976:	f1bb 0f00 	cmp.w	fp, #0
 801397a:	d002      	beq.n	8013982 <__kernel_rem_pio2+0x5ba>
 801397c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013980:	4619      	mov	r1, r3
 8013982:	9b01      	ldr	r3, [sp, #4]
 8013984:	e9c3 0100 	strd	r0, r1, [r3]
 8013988:	e791      	b.n	80138ae <__kernel_rem_pio2+0x4e6>
 801398a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801398e:	f7ec fc9d 	bl	80002cc <__adddf3>
 8013992:	3d01      	subs	r5, #1
 8013994:	e7ed      	b.n	8013972 <__kernel_rem_pio2+0x5aa>
 8013996:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801399a:	f7ec fc97 	bl	80002cc <__adddf3>
 801399e:	3e01      	subs	r6, #1
 80139a0:	e7c0      	b.n	8013924 <__kernel_rem_pio2+0x55c>
 80139a2:	4602      	mov	r2, r0
 80139a4:	460b      	mov	r3, r1
 80139a6:	e7c5      	b.n	8013934 <__kernel_rem_pio2+0x56c>
 80139a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80139ac:	f7ec fc8e 	bl	80002cc <__adddf3>
 80139b0:	3401      	adds	r4, #1
 80139b2:	e7ca      	b.n	801394a <__kernel_rem_pio2+0x582>
 80139b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80139b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80139bc:	9b02      	ldr	r3, [sp, #8]
 80139be:	3b01      	subs	r3, #1
 80139c0:	9302      	str	r3, [sp, #8]
 80139c2:	4632      	mov	r2, r6
 80139c4:	463b      	mov	r3, r7
 80139c6:	4640      	mov	r0, r8
 80139c8:	4649      	mov	r1, r9
 80139ca:	f7ec fc7f 	bl	80002cc <__adddf3>
 80139ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80139d2:	4602      	mov	r2, r0
 80139d4:	460b      	mov	r3, r1
 80139d6:	4640      	mov	r0, r8
 80139d8:	4649      	mov	r1, r9
 80139da:	f7ec fc75 	bl	80002c8 <__aeabi_dsub>
 80139de:	4632      	mov	r2, r6
 80139e0:	463b      	mov	r3, r7
 80139e2:	f7ec fc73 	bl	80002cc <__adddf3>
 80139e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80139ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80139ee:	ed8a 7b00 	vstr	d7, [sl]
 80139f2:	e76e      	b.n	80138d2 <__kernel_rem_pio2+0x50a>
 80139f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80139f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80139fc:	4640      	mov	r0, r8
 80139fe:	4632      	mov	r2, r6
 8013a00:	463b      	mov	r3, r7
 8013a02:	4649      	mov	r1, r9
 8013a04:	f7ec fc62 	bl	80002cc <__adddf3>
 8013a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	460b      	mov	r3, r1
 8013a10:	4640      	mov	r0, r8
 8013a12:	4649      	mov	r1, r9
 8013a14:	f7ec fc58 	bl	80002c8 <__aeabi_dsub>
 8013a18:	4632      	mov	r2, r6
 8013a1a:	463b      	mov	r3, r7
 8013a1c:	f7ec fc56 	bl	80002cc <__adddf3>
 8013a20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a28:	ed84 7b00 	vstr	d7, [r4]
 8013a2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a30:	e755      	b.n	80138de <__kernel_rem_pio2+0x516>
 8013a32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a36:	f7ec fc49 	bl	80002cc <__adddf3>
 8013a3a:	3d01      	subs	r5, #1
 8013a3c:	e759      	b.n	80138f2 <__kernel_rem_pio2+0x52a>
 8013a3e:	9b01      	ldr	r3, [sp, #4]
 8013a40:	9a01      	ldr	r2, [sp, #4]
 8013a42:	601d      	str	r5, [r3, #0]
 8013a44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013a48:	605c      	str	r4, [r3, #4]
 8013a4a:	609f      	str	r7, [r3, #8]
 8013a4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013a50:	60d3      	str	r3, [r2, #12]
 8013a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a56:	6110      	str	r0, [r2, #16]
 8013a58:	6153      	str	r3, [r2, #20]
 8013a5a:	e728      	b.n	80138ae <__kernel_rem_pio2+0x4e6>
 8013a5c:	41700000 	.word	0x41700000
 8013a60:	3e700000 	.word	0x3e700000
 8013a64:	00000000 	.word	0x00000000

08013a68 <__kernel_sin>:
 8013a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a6c:	ed2d 8b04 	vpush	{d8-d9}
 8013a70:	eeb0 8a41 	vmov.f32	s16, s2
 8013a74:	eef0 8a61 	vmov.f32	s17, s3
 8013a78:	ec55 4b10 	vmov	r4, r5, d0
 8013a7c:	b083      	sub	sp, #12
 8013a7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013a82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013a86:	9001      	str	r0, [sp, #4]
 8013a88:	da06      	bge.n	8013a98 <__kernel_sin+0x30>
 8013a8a:	ee10 0a10 	vmov	r0, s0
 8013a8e:	4629      	mov	r1, r5
 8013a90:	f7ed f882 	bl	8000b98 <__aeabi_d2iz>
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d051      	beq.n	8013b3c <__kernel_sin+0xd4>
 8013a98:	4622      	mov	r2, r4
 8013a9a:	462b      	mov	r3, r5
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	4629      	mov	r1, r5
 8013aa0:	f7ec fdca 	bl	8000638 <__aeabi_dmul>
 8013aa4:	4682      	mov	sl, r0
 8013aa6:	468b      	mov	fp, r1
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	460b      	mov	r3, r1
 8013aac:	4620      	mov	r0, r4
 8013aae:	4629      	mov	r1, r5
 8013ab0:	f7ec fdc2 	bl	8000638 <__aeabi_dmul>
 8013ab4:	a341      	add	r3, pc, #260	; (adr r3, 8013bbc <__kernel_sin+0x154>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	4680      	mov	r8, r0
 8013abc:	4689      	mov	r9, r1
 8013abe:	4650      	mov	r0, sl
 8013ac0:	4659      	mov	r1, fp
 8013ac2:	f7ec fdb9 	bl	8000638 <__aeabi_dmul>
 8013ac6:	a33f      	add	r3, pc, #252	; (adr r3, 8013bc4 <__kernel_sin+0x15c>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	f7ec fbfc 	bl	80002c8 <__aeabi_dsub>
 8013ad0:	4652      	mov	r2, sl
 8013ad2:	465b      	mov	r3, fp
 8013ad4:	f7ec fdb0 	bl	8000638 <__aeabi_dmul>
 8013ad8:	a33c      	add	r3, pc, #240	; (adr r3, 8013bcc <__kernel_sin+0x164>)
 8013ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ade:	f7ec fbf5 	bl	80002cc <__adddf3>
 8013ae2:	4652      	mov	r2, sl
 8013ae4:	465b      	mov	r3, fp
 8013ae6:	f7ec fda7 	bl	8000638 <__aeabi_dmul>
 8013aea:	a33a      	add	r3, pc, #232	; (adr r3, 8013bd4 <__kernel_sin+0x16c>)
 8013aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af0:	f7ec fbea 	bl	80002c8 <__aeabi_dsub>
 8013af4:	4652      	mov	r2, sl
 8013af6:	465b      	mov	r3, fp
 8013af8:	f7ec fd9e 	bl	8000638 <__aeabi_dmul>
 8013afc:	a337      	add	r3, pc, #220	; (adr r3, 8013bdc <__kernel_sin+0x174>)
 8013afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b02:	f7ec fbe3 	bl	80002cc <__adddf3>
 8013b06:	9b01      	ldr	r3, [sp, #4]
 8013b08:	4606      	mov	r6, r0
 8013b0a:	460f      	mov	r7, r1
 8013b0c:	b9eb      	cbnz	r3, 8013b4a <__kernel_sin+0xe2>
 8013b0e:	4602      	mov	r2, r0
 8013b10:	460b      	mov	r3, r1
 8013b12:	4650      	mov	r0, sl
 8013b14:	4659      	mov	r1, fp
 8013b16:	f7ec fd8f 	bl	8000638 <__aeabi_dmul>
 8013b1a:	a325      	add	r3, pc, #148	; (adr r3, 8013bb0 <__kernel_sin+0x148>)
 8013b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b20:	f7ec fbd2 	bl	80002c8 <__aeabi_dsub>
 8013b24:	4642      	mov	r2, r8
 8013b26:	464b      	mov	r3, r9
 8013b28:	f7ec fd86 	bl	8000638 <__aeabi_dmul>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4620      	mov	r0, r4
 8013b32:	4629      	mov	r1, r5
 8013b34:	f7ec fbca 	bl	80002cc <__adddf3>
 8013b38:	4604      	mov	r4, r0
 8013b3a:	460d      	mov	r5, r1
 8013b3c:	ec45 4b10 	vmov	d0, r4, r5
 8013b40:	b003      	add	sp, #12
 8013b42:	ecbd 8b04 	vpop	{d8-d9}
 8013b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4a:	4b1b      	ldr	r3, [pc, #108]	; (8013bb8 <__kernel_sin+0x150>)
 8013b4c:	ec51 0b18 	vmov	r0, r1, d8
 8013b50:	2200      	movs	r2, #0
 8013b52:	f7ec fd71 	bl	8000638 <__aeabi_dmul>
 8013b56:	4632      	mov	r2, r6
 8013b58:	ec41 0b19 	vmov	d9, r0, r1
 8013b5c:	463b      	mov	r3, r7
 8013b5e:	4640      	mov	r0, r8
 8013b60:	4649      	mov	r1, r9
 8013b62:	f7ec fd69 	bl	8000638 <__aeabi_dmul>
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	ec51 0b19 	vmov	r0, r1, d9
 8013b6e:	f7ec fbab 	bl	80002c8 <__aeabi_dsub>
 8013b72:	4652      	mov	r2, sl
 8013b74:	465b      	mov	r3, fp
 8013b76:	f7ec fd5f 	bl	8000638 <__aeabi_dmul>
 8013b7a:	ec53 2b18 	vmov	r2, r3, d8
 8013b7e:	f7ec fba3 	bl	80002c8 <__aeabi_dsub>
 8013b82:	a30b      	add	r3, pc, #44	; (adr r3, 8013bb0 <__kernel_sin+0x148>)
 8013b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b88:	4606      	mov	r6, r0
 8013b8a:	460f      	mov	r7, r1
 8013b8c:	4640      	mov	r0, r8
 8013b8e:	4649      	mov	r1, r9
 8013b90:	f7ec fd52 	bl	8000638 <__aeabi_dmul>
 8013b94:	4602      	mov	r2, r0
 8013b96:	460b      	mov	r3, r1
 8013b98:	4630      	mov	r0, r6
 8013b9a:	4639      	mov	r1, r7
 8013b9c:	f7ec fb96 	bl	80002cc <__adddf3>
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	4629      	mov	r1, r5
 8013ba8:	f7ec fb8e 	bl	80002c8 <__aeabi_dsub>
 8013bac:	e7c4      	b.n	8013b38 <__kernel_sin+0xd0>
 8013bae:	bf00      	nop
 8013bb0:	55555549 	.word	0x55555549
 8013bb4:	3fc55555 	.word	0x3fc55555
 8013bb8:	3fe00000 	.word	0x3fe00000
 8013bbc:	5acfd57c 	.word	0x5acfd57c
 8013bc0:	3de5d93a 	.word	0x3de5d93a
 8013bc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8013bc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8013bcc:	57b1fe7d 	.word	0x57b1fe7d
 8013bd0:	3ec71de3 	.word	0x3ec71de3
 8013bd4:	19c161d5 	.word	0x19c161d5
 8013bd8:	3f2a01a0 	.word	0x3f2a01a0
 8013bdc:	1110f8a6 	.word	0x1110f8a6
 8013be0:	3f811111 	.word	0x3f811111

08013be4 <fabs>:
 8013be4:	ec51 0b10 	vmov	r0, r1, d0
 8013be8:	ee10 2a10 	vmov	r2, s0
 8013bec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013bf0:	ec43 2b10 	vmov	d0, r2, r3
 8013bf4:	4770      	bx	lr
	...

08013bf8 <floor>:
 8013bf8:	ec51 0b10 	vmov	r0, r1, d0
 8013bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013c04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013c08:	2e13      	cmp	r6, #19
 8013c0a:	ee10 5a10 	vmov	r5, s0
 8013c0e:	ee10 8a10 	vmov	r8, s0
 8013c12:	460c      	mov	r4, r1
 8013c14:	dc32      	bgt.n	8013c7c <floor+0x84>
 8013c16:	2e00      	cmp	r6, #0
 8013c18:	da14      	bge.n	8013c44 <floor+0x4c>
 8013c1a:	a333      	add	r3, pc, #204	; (adr r3, 8013ce8 <floor+0xf0>)
 8013c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c20:	f7ec fb54 	bl	80002cc <__adddf3>
 8013c24:	2200      	movs	r2, #0
 8013c26:	2300      	movs	r3, #0
 8013c28:	f7ec ff96 	bl	8000b58 <__aeabi_dcmpgt>
 8013c2c:	b138      	cbz	r0, 8013c3e <floor+0x46>
 8013c2e:	2c00      	cmp	r4, #0
 8013c30:	da57      	bge.n	8013ce2 <floor+0xea>
 8013c32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013c36:	431d      	orrs	r5, r3
 8013c38:	d001      	beq.n	8013c3e <floor+0x46>
 8013c3a:	4c2d      	ldr	r4, [pc, #180]	; (8013cf0 <floor+0xf8>)
 8013c3c:	2500      	movs	r5, #0
 8013c3e:	4621      	mov	r1, r4
 8013c40:	4628      	mov	r0, r5
 8013c42:	e025      	b.n	8013c90 <floor+0x98>
 8013c44:	4f2b      	ldr	r7, [pc, #172]	; (8013cf4 <floor+0xfc>)
 8013c46:	4137      	asrs	r7, r6
 8013c48:	ea01 0307 	and.w	r3, r1, r7
 8013c4c:	4303      	orrs	r3, r0
 8013c4e:	d01f      	beq.n	8013c90 <floor+0x98>
 8013c50:	a325      	add	r3, pc, #148	; (adr r3, 8013ce8 <floor+0xf0>)
 8013c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c56:	f7ec fb39 	bl	80002cc <__adddf3>
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	f7ec ff7b 	bl	8000b58 <__aeabi_dcmpgt>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d0eb      	beq.n	8013c3e <floor+0x46>
 8013c66:	2c00      	cmp	r4, #0
 8013c68:	bfbe      	ittt	lt
 8013c6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013c6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013c72:	19a4      	addlt	r4, r4, r6
 8013c74:	ea24 0407 	bic.w	r4, r4, r7
 8013c78:	2500      	movs	r5, #0
 8013c7a:	e7e0      	b.n	8013c3e <floor+0x46>
 8013c7c:	2e33      	cmp	r6, #51	; 0x33
 8013c7e:	dd0b      	ble.n	8013c98 <floor+0xa0>
 8013c80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013c84:	d104      	bne.n	8013c90 <floor+0x98>
 8013c86:	ee10 2a10 	vmov	r2, s0
 8013c8a:	460b      	mov	r3, r1
 8013c8c:	f7ec fb1e 	bl	80002cc <__adddf3>
 8013c90:	ec41 0b10 	vmov	d0, r0, r1
 8013c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca0:	fa23 f707 	lsr.w	r7, r3, r7
 8013ca4:	4207      	tst	r7, r0
 8013ca6:	d0f3      	beq.n	8013c90 <floor+0x98>
 8013ca8:	a30f      	add	r3, pc, #60	; (adr r3, 8013ce8 <floor+0xf0>)
 8013caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cae:	f7ec fb0d 	bl	80002cc <__adddf3>
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f7ec ff4f 	bl	8000b58 <__aeabi_dcmpgt>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d0bf      	beq.n	8013c3e <floor+0x46>
 8013cbe:	2c00      	cmp	r4, #0
 8013cc0:	da02      	bge.n	8013cc8 <floor+0xd0>
 8013cc2:	2e14      	cmp	r6, #20
 8013cc4:	d103      	bne.n	8013cce <floor+0xd6>
 8013cc6:	3401      	adds	r4, #1
 8013cc8:	ea25 0507 	bic.w	r5, r5, r7
 8013ccc:	e7b7      	b.n	8013c3e <floor+0x46>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013cd4:	fa03 f606 	lsl.w	r6, r3, r6
 8013cd8:	4435      	add	r5, r6
 8013cda:	4545      	cmp	r5, r8
 8013cdc:	bf38      	it	cc
 8013cde:	18e4      	addcc	r4, r4, r3
 8013ce0:	e7f2      	b.n	8013cc8 <floor+0xd0>
 8013ce2:	2500      	movs	r5, #0
 8013ce4:	462c      	mov	r4, r5
 8013ce6:	e7aa      	b.n	8013c3e <floor+0x46>
 8013ce8:	8800759c 	.word	0x8800759c
 8013cec:	7e37e43c 	.word	0x7e37e43c
 8013cf0:	bff00000 	.word	0xbff00000
 8013cf4:	000fffff 	.word	0x000fffff

08013cf8 <scalbn>:
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	ec55 4b10 	vmov	r4, r5, d0
 8013cfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013d02:	4606      	mov	r6, r0
 8013d04:	462b      	mov	r3, r5
 8013d06:	b99a      	cbnz	r2, 8013d30 <scalbn+0x38>
 8013d08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d0c:	4323      	orrs	r3, r4
 8013d0e:	d036      	beq.n	8013d7e <scalbn+0x86>
 8013d10:	4b39      	ldr	r3, [pc, #228]	; (8013df8 <scalbn+0x100>)
 8013d12:	4629      	mov	r1, r5
 8013d14:	ee10 0a10 	vmov	r0, s0
 8013d18:	2200      	movs	r2, #0
 8013d1a:	f7ec fc8d 	bl	8000638 <__aeabi_dmul>
 8013d1e:	4b37      	ldr	r3, [pc, #220]	; (8013dfc <scalbn+0x104>)
 8013d20:	429e      	cmp	r6, r3
 8013d22:	4604      	mov	r4, r0
 8013d24:	460d      	mov	r5, r1
 8013d26:	da10      	bge.n	8013d4a <scalbn+0x52>
 8013d28:	a32b      	add	r3, pc, #172	; (adr r3, 8013dd8 <scalbn+0xe0>)
 8013d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2e:	e03a      	b.n	8013da6 <scalbn+0xae>
 8013d30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013d34:	428a      	cmp	r2, r1
 8013d36:	d10c      	bne.n	8013d52 <scalbn+0x5a>
 8013d38:	ee10 2a10 	vmov	r2, s0
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	4629      	mov	r1, r5
 8013d40:	f7ec fac4 	bl	80002cc <__adddf3>
 8013d44:	4604      	mov	r4, r0
 8013d46:	460d      	mov	r5, r1
 8013d48:	e019      	b.n	8013d7e <scalbn+0x86>
 8013d4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013d4e:	460b      	mov	r3, r1
 8013d50:	3a36      	subs	r2, #54	; 0x36
 8013d52:	4432      	add	r2, r6
 8013d54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013d58:	428a      	cmp	r2, r1
 8013d5a:	dd08      	ble.n	8013d6e <scalbn+0x76>
 8013d5c:	2d00      	cmp	r5, #0
 8013d5e:	a120      	add	r1, pc, #128	; (adr r1, 8013de0 <scalbn+0xe8>)
 8013d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d64:	da1c      	bge.n	8013da0 <scalbn+0xa8>
 8013d66:	a120      	add	r1, pc, #128	; (adr r1, 8013de8 <scalbn+0xf0>)
 8013d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d6c:	e018      	b.n	8013da0 <scalbn+0xa8>
 8013d6e:	2a00      	cmp	r2, #0
 8013d70:	dd08      	ble.n	8013d84 <scalbn+0x8c>
 8013d72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013d7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d7e:	ec45 4b10 	vmov	d0, r4, r5
 8013d82:	bd70      	pop	{r4, r5, r6, pc}
 8013d84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013d88:	da19      	bge.n	8013dbe <scalbn+0xc6>
 8013d8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013d8e:	429e      	cmp	r6, r3
 8013d90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013d94:	dd0a      	ble.n	8013dac <scalbn+0xb4>
 8013d96:	a112      	add	r1, pc, #72	; (adr r1, 8013de0 <scalbn+0xe8>)
 8013d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d1e2      	bne.n	8013d66 <scalbn+0x6e>
 8013da0:	a30f      	add	r3, pc, #60	; (adr r3, 8013de0 <scalbn+0xe8>)
 8013da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da6:	f7ec fc47 	bl	8000638 <__aeabi_dmul>
 8013daa:	e7cb      	b.n	8013d44 <scalbn+0x4c>
 8013dac:	a10a      	add	r1, pc, #40	; (adr r1, 8013dd8 <scalbn+0xe0>)
 8013dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d0b8      	beq.n	8013d28 <scalbn+0x30>
 8013db6:	a10e      	add	r1, pc, #56	; (adr r1, 8013df0 <scalbn+0xf8>)
 8013db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dbc:	e7b4      	b.n	8013d28 <scalbn+0x30>
 8013dbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013dc2:	3236      	adds	r2, #54	; 0x36
 8013dc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013dc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013dcc:	4620      	mov	r0, r4
 8013dce:	4b0c      	ldr	r3, [pc, #48]	; (8013e00 <scalbn+0x108>)
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	e7e8      	b.n	8013da6 <scalbn+0xae>
 8013dd4:	f3af 8000 	nop.w
 8013dd8:	c2f8f359 	.word	0xc2f8f359
 8013ddc:	01a56e1f 	.word	0x01a56e1f
 8013de0:	8800759c 	.word	0x8800759c
 8013de4:	7e37e43c 	.word	0x7e37e43c
 8013de8:	8800759c 	.word	0x8800759c
 8013dec:	fe37e43c 	.word	0xfe37e43c
 8013df0:	c2f8f359 	.word	0xc2f8f359
 8013df4:	81a56e1f 	.word	0x81a56e1f
 8013df8:	43500000 	.word	0x43500000
 8013dfc:	ffff3cb0 	.word	0xffff3cb0
 8013e00:	3c900000 	.word	0x3c900000

08013e04 <_init>:
 8013e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e06:	bf00      	nop
 8013e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e0a:	bc08      	pop	{r3}
 8013e0c:	469e      	mov	lr, r3
 8013e0e:	4770      	bx	lr

08013e10 <_fini>:
 8013e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e12:	bf00      	nop
 8013e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e16:	bc08      	pop	{r3}
 8013e18:	469e      	mov	lr, r3
 8013e1a:	4770      	bx	lr
